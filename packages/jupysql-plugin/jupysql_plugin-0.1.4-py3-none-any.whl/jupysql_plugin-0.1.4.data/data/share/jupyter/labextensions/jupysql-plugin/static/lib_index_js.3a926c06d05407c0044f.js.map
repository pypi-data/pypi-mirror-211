{"version":3,"file":"lib_index_js.3a926c06d05407c0044f.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,0DAA0D,sCAAsC,uBAAuB,GAAG,OAAO,mFAAmF,YAAY,aAAa,0CAA0C,sCAAsC,uBAAuB,GAAG,mBAAmB;AAC1W;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;ACPvC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACoD;AACpD;AACA;AACA;AACO,kCAAkC,8DAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB;AACjB;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;AC7D3B;AACA;AACoD;AACb;AACvC;AACA;AACA;AACO,8BAA8B,8DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;AC5D6B;AACjB;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAM,qBAAqB,uCAAuC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5DyC;AACO;AACzC;AACP,OAAO,0CAAM;AACb,OAAO,2CAAY;AACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL+F;AACvC;AACN;AACE;AACpD;AACqD;AACrB;AACwB;AACH;AACS;AACjB;AACkB;AACf;AACQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAkB,EAAE,kEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kEAAe;AAClD,oCAAoC,mEAAgB;AACpD,mCAAmC,6DAAe;AAClD,wCAAwC,2DAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,cAAc;AACnF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI;AACzE;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gDAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,+DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yCAAyC,uEAA+B;AACxE;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAmB;AAC/B,SAAS;AACT,mBAAmB,kEAAkB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,kEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kDAAW;AACzB,iBAAiB,qDAAc;AAC/B,iBAAiB,0DAAa;AAC9B,KAAK;AACL;AAC0B;AAC1B,iEAAe,4DAA4D,EAAC;;;;;;;;;;;;;;;;AC5N5E;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;ACdgE;AACd;AACzD;AACgC;AACzB,wBAAwB,iEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,6EAA0B;AACjC;AACA;AACA,yBAAyB,iDAAW;AACpC,iCAAiC,oDAAc;AAC/C,kCAAkC;AAClC,wBAAwB,iDAAW,EAAE;AACrC,gCAAgC,oDAAc;AACvC,uBAAuB,gEAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpFyD;AACX;AACyB;AACnC;AAC7B,yBAAyB,iEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,6EAA0B;AACjC;AACA;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;AAChD,oCAAoC;AACpC,yBAAyB,iDAAW,EAAE;AACtC,iCAAiC,oDAAc;AACxC,wBAAwB,gEAAa;AAC5C;AACA;AACA,cAAc,6CAA6C;AAC3D,cAAc,gDAAgD;AAC9D,cAAc,6CAA6C;AAC3D,cAAc,+CAA+C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,oBAAoB,aAAa;AACjC,oBAAoB,YAAY;AAChC,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAO;AACvB;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;AChEyF;AACzF,YAAwF;;AAExF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,uFAAO;;;;AAIxB,iEAAe,8FAAc,MAAM","sources":["webpack://jupysql-plugin/./style/widget.css","webpack://jupysql-plugin/./lib/comm.js","webpack://jupysql-plugin/./lib/connector.js","webpack://jupysql-plugin/./lib/customconnector.js","webpack://jupysql-plugin/./lib/formatter.js","webpack://jupysql-plugin/./lib/index-widgets.js","webpack://jupysql-plugin/./lib/index.js","webpack://jupysql-plugin/./lib/version.js","webpack://jupysql-plugin/./lib/widgets/form.js","webpack://jupysql-plugin/./lib/widgets/table.js","webpack://jupysql-plugin/./style/widget.css?ad60"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".custom-widget {\\n    background-color: lightseagreen;\\n    padding: 0px 2px;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/widget.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,+BAA+B;IAC/B,gBAAgB;AACpB\",\"sourcesContent\":[\".custom-widget {\\n    background-color: lightseagreen;\\n    padding: 0px 2px;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Opens a comm from the frontend to the kernel\nexport const registerCommTargets = (context) => {\n    var _a;\n    const sessionContext = context.sessionContext;\n    const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n    if (!kernel)\n        return;\n    // Listen to updateTableWidget event\n    document.addEventListener(\"onUpdateTableWidget\", async (event) => {\n        const customEvent = event;\n        const data = customEvent.detail.data;\n        // Register to table_widget handler in the JupySQL kernel\n        const comm = kernel.createComm(\"comm_target_handle_table_widget\");\n        await comm.open('initializing connection').done;\n        // Send data to the Kernel to recevice rows to display\n        comm.send(data);\n        // Handle recevied rows\n        comm.onMsg = (msg) => {\n            const content = msg.content;\n            const data = content.data;\n            // Raise event to update table with new rows\n            let customEvent = new CustomEvent('onTableWidgetRowsReady', {\n                bubbles: true,\n                cancelable: true,\n                composed: false,\n                detail: {\n                    data: data\n                }\n            });\n            document.body.dispatchEvent(customEvent);\n        };\n    });\n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Modified from jupyterlab/packages/completer/src/connector.ts\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * A multi-connector connector for completion handlers.\n */\nexport class CompletionConnector extends DataConnector {\n    /**\n     * Create a new connector for completion requests.\n     *\n     * @param connectors - Connectors to request matches from, ordered by metadata preference (descending).\n     */\n    constructor(connectors) {\n        super();\n        this._connectors = connectors;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     * @returns Completion reply\n     */\n    fetch(request) {\n        return Promise.all(this._connectors.map((connector) => connector.fetch(request))).then((replies) => {\n            const definedReplies = replies.filter((reply) => !!reply);\n            return Private.mergeReplies(definedReplies);\n        });\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Merge results from multiple connectors.\n     *\n     * @param replies - Array of completion results.\n     * @returns IReply with a superset of all matches.\n     */\n    function mergeReplies(replies) {\n        // Filter replies with matches.\n        const repliesWithMatches = replies.filter((rep) => rep.matches.length > 0);\n        // If no replies contain matches, return an empty IReply.\n        if (repliesWithMatches.length === 0) {\n            return replies[0];\n        }\n        // If only one reply contains matches, return it.\n        if (repliesWithMatches.length === 1) {\n            return repliesWithMatches[0];\n        }\n        // Collect unique matches from all replies.\n        const matches = new Set();\n        repliesWithMatches.forEach((reply) => {\n            reply.matches.forEach((match) => matches.add(match));\n        });\n        // Note that the returned metadata field only contains items in the first member of repliesWithMatches.\n        return { ...repliesWithMatches[0], matches: [...matches] };\n    }\n    Private.mergeReplies = mergeReplies;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\nimport keywords from './keywords.json';\n/**\n * A custom connector for completion handlers.\n */\nexport class CustomConnector extends DataConnector {\n    /**\n     * Create a new custom connector for completion requests.\n     *\n     * @param options - The instatiation options for the custom connector.\n     */\n    constructor(options) {\n        super();\n        this._editor = options.editor;\n        this._sessionContext = options.sessionContext;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     * @returns Completion reply\n     */\n    fetch(request) {\n        if (!this._editor) {\n            return Promise.reject('No editor');\n        }\n        return new Promise((resolve) => {\n            resolve(Private.completionHint(this._editor, this._sessionContext));\n        });\n    }\n}\n/**\n * A namespace for Private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get a list of mocked completion hints.\n     *\n     * @param editor Editor\n     * @returns Completion reply\n     */\n    function completionHint(editor, sessionContext) {\n        // Find the token at the cursor\n        const cursor = editor.getCursorPosition();\n        const token = editor.getTokenForPosition(cursor);\n        var newTokenList = keywords[\"keywords\"];\n        const completionList = newTokenList.filter((t) => t.value.startsWith(token.value.toUpperCase())).map((t) => t.value);\n        // Remove duplicate completions from the list\n        const matches = Array.from(new Set(completionList));\n        return {\n            start: token.offset,\n            end: token.offset + token.value.length,\n            matches,\n            metadata: {},\n        };\n    }\n    Private.completionHint = completionHint;\n})(Private || (Private = {}));\n","import { showErrorMessage } from '@jupyterlab/apputils';\nimport { format } from 'sql-formatter';\nexport class JupyterlabNotebookCodeFormatter {\n    constructor(notebookTracker) {\n        this.notebookTracker = notebookTracker;\n    }\n    async formatAllCodeCells(config, formatter, notebook) {\n        return this.formatCells(false, config, formatter, notebook);\n    }\n    getCodeCells(selectedOnly = true, notebook) {\n        if (!this.notebookTracker.currentWidget) {\n            return [];\n        }\n        const codeCells = [];\n        notebook = notebook || this.notebookTracker.currentWidget.content;\n        notebook.widgets.forEach((cell) => {\n            if (cell.model.type === 'code') {\n                if (!selectedOnly || notebook.isSelectedOrActive(cell)) {\n                    codeCells.push(cell);\n                }\n            }\n        });\n        return codeCells;\n    }\n    async formatCells(selectedOnly, config, formatter, notebook) {\n        if (this.working) {\n            return;\n        }\n        try {\n            this.working = true;\n            const selectedCells = this.getCodeCells(selectedOnly, notebook);\n            if (selectedCells.length === 0) {\n                this.working = false;\n                return;\n            }\n            for (let i = 0; i < selectedCells.length; ++i) {\n                const cell = selectedCells[i];\n                const text = cell.model.value.text;\n                if (text.startsWith(\"%%sql\")) {\n                    const lines = text.split(\"\\n\");\n                    const sqlCommand = lines.shift();\n                    try {\n                        const query = format(lines.join(\"\\n\"), { language: 'sql', keywordCase: 'upper' });\n                        cell.model.value.text = sqlCommand + \"\\n\" + query;\n                    }\n                    catch (error) {\n                    }\n                }\n            }\n        }\n        catch (error) {\n            await showErrorMessage('Jupysql plugin formatting', error);\n        }\n        this.working = false;\n    }\n    applicable(formatter, currentWidget) {\n        const currentNotebookWidget = this.notebookTracker.currentWidget;\n        // TODO: Handle showing just the correct formatter for the language later\n        return currentNotebookWidget && currentWidget === currentNotebookWidget;\n    }\n}\n","import * as widget from './widgets/form';\nimport * as widget_table from './widgets/table';\nexport const widgetExports = {\n    ...widget,\n    ...widget_table,\n};\n","import { ContextConnector, ICompletionManager, KernelConnector, } from '@jupyterlab/completer';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { CompletionConnector } from './connector';\nimport { CustomConnector } from './customconnector';\n// for syntax highlighting\nimport { ICodeMirror } from '@jupyterlab/codemirror';\nimport * as _ from 'underscore';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { JupyterlabNotebookCodeFormatter } from './formatter';\nimport { registerCommTargets } from './comm';\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\nimport { widgetExports } from './index-widgets';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\n/**\n * The command IDs used by the console plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.invoke = 'completer:invoke';\n    CommandIDs.invokeNotebook = 'completer:invoke-notebook';\n    CommandIDs.select = 'completer:select';\n    CommandIDs.selectNotebook = 'completer:select-notebook';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the extension.\n */\nconst extension = {\n    id: 'completer',\n    autoStart: true,\n    requires: [ICompletionManager, INotebookTracker],\n    activate: async (app, completionManager, notebooks) => {\n        console.log('JupyterLab extension jupysql-plugin is activated!');\n        // Modelled after completer-extension's notebooks plugin\n        notebooks.widgetAdded.connect((sender, panel) => {\n            var _a, _b;\n            let editor = (_b = (_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;\n            const session = panel.sessionContext.session;\n            const sessionContext = panel.sessionContext;\n            const options = { session, editor, sessionContext };\n            const connector = new CompletionConnector([]);\n            const handler = completionManager.register({\n                connector,\n                editor,\n                parent: panel,\n            });\n            const updateConnector = () => {\n                var _a, _b;\n                editor = (_b = (_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;\n                options.session = panel.sessionContext.session;\n                options.sessionContext = panel.sessionContext;\n                options.editor = editor;\n                handler.editor = editor;\n                const kernel = new KernelConnector(options);\n                const context = new ContextConnector(options);\n                const custom = new CustomConnector(options);\n                handler.connector = new CompletionConnector([\n                    kernel,\n                    context,\n                    custom\n                ]);\n            };\n            // Update the handler whenever the prompt or session changes\n            panel.content.activeCellChanged.connect(updateConnector);\n            panel.sessionContext.sessionChanged.connect(updateConnector);\n        });\n        // Add notebook completer command.\n        app.commands.addCommand(CommandIDs.invokeNotebook, {\n            execute: () => {\n                var _a;\n                const panel = notebooks.currentWidget;\n                if (panel && ((_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.model.type) === 'code') {\n                    return app.commands.execute(CommandIDs.invoke, { id: panel.id });\n                }\n            },\n        });\n        // Add notebook completer select command.\n        app.commands.addCommand(CommandIDs.selectNotebook, {\n            execute: () => {\n                const id = notebooks.currentWidget && notebooks.currentWidget.id;\n                if (id) {\n                    return app.commands.execute(CommandIDs.select, { id });\n                }\n            },\n        });\n        // Set enter key for notebook completer select command.\n        app.commands.addKeyBinding({\n            command: CommandIDs.selectNotebook,\n            keys: ['Enter'],\n            selector: '.jp-Notebook .jp-mod-completer-active',\n        });\n    },\n};\n// %%sql highlighting\nclass SqlCodeMirror {\n    constructor(app, tracker, code_mirror) {\n        var _a, _b;\n        this.app = app;\n        this.tracker = tracker;\n        this.code_mirror = code_mirror;\n        (_b = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCellChanged) === null || _b === void 0 ? void 0 : _b.connect(() => {\n            var _a;\n            if (((_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell) !== null) {\n                const cell = this.tracker.activeCell;\n                if (cell !== null && (cell === null || cell === void 0 ? void 0 : cell.model.type) === 'code') {\n                    const code_mirror_editor = cell === null || cell === void 0 ? void 0 : cell.editor;\n                    const debounced_on_change = _.debounce(() => {\n                        var _a;\n                        // check for editor with first line starting with %%sql\n                        const line = (_a = code_mirror_editor\n                            .getLine(code_mirror_editor.firstLine())) === null || _a === void 0 ? void 0 : _a.trim();\n                        if (line === null || line === void 0 ? void 0 : line.startsWith('%%sql')) {\n                            code_mirror_editor.editor.setOption('mode', 'text/x-sql');\n                        }\n                        else {\n                            code_mirror_editor.editor.setOption('mode', 'text/x-ipython');\n                        }\n                    }, 300);\n                    code_mirror_editor.editor.on('change', debounced_on_change);\n                    debounced_on_change();\n                }\n            }\n        });\n    }\n}\nfunction activate_syntax(app, tracker, code_mirror) {\n    new SqlCodeMirror(app, tracker, code_mirror);\n    console.log('SQLCodeMirror loaded.');\n}\n/**\n * Initialization data for the jupyterlabs_sql_codemirror extension.\n * this is based on:\n * https://github.com/surdouski/jupyterlabs_sql_codemirror\n */\nconst extension_sql = {\n    id: '@ploomber/sql-syntax-highlighting',\n    autoStart: true,\n    requires: [INotebookTracker, ICodeMirror],\n    optional: [],\n    activate: activate_syntax\n};\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class FormattingExtension {\n    constructor(tracker) {\n        this.notebookCodeFormatter = new JupyterlabNotebookCodeFormatter(tracker);\n    }\n    createNew(panel, context) {\n        const clearOutput = () => {\n            this.notebookCodeFormatter.formatAllCodeCells(undefined, undefined, panel.content);\n        };\n        const button = new ToolbarButton({\n            className: 'format-sql-button',\n            label: 'Format SQL',\n            onClick: clearOutput,\n            tooltip: 'Format all %%sql cells',\n        });\n        panel.toolbar.insertItem(10, 'formatSQL', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class RegisterNotebookCommListener {\n    /**\n     * Register notebook comm\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        setTimeout(() => {\n            registerCommTargets(context);\n        }, 5000);\n        return new DisposableDelegate(() => {\n        });\n    }\n}\n/**\n * Activate the extension.\n *\n * @param app Main application object\n */\nconst formatting_plugin = {\n    activate: (app, tracker) => {\n        app.docRegistry.addWidgetExtension('Notebook', new FormattingExtension(tracker));\n        app.docRegistry.addWidgetExtension('Notebook', new RegisterNotebookCommListener());\n    },\n    autoStart: true,\n    id: \"formatting\",\n    requires: [\n        INotebookTracker,\n    ]\n};\nconst EXTENSION_ID = 'jupysql-plugin:plugin';\n/**\n * The example plugin.\n */\nconst examplePlugin = {\n    id: EXTENSION_ID,\n    requires: [IJupyterWidgetRegistry],\n    activate: activateWidgetExtension,\n    autoStart: true,\n};\n// the \"as unknown as ...\" typecast above is solely to support JupyterLab 1\n// and 2 in the same codebase and should be removed when we migrate to Lumino.\n// export default examplePlugin;\n/**\n * Activate the widget extension.\n */\nfunction activateWidgetExtension(app, registry) {\n    registry.registerWidget({\n        name: MODULE_NAME,\n        version: MODULE_VERSION,\n        exports: widgetExports,\n    });\n}\nexport * from './version';\nexport default [extension, extension_sql, formatting_plugin, examplePlugin];\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n","import { DOMWidgetModel, DOMWidgetView, } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n// Import the CSS\nimport '../../style/widget.css';\nexport class FormModel extends DOMWidgetModel {\n    defaults() {\n        return {\n            ...super.defaults(),\n            _model_name: FormModel.model_name,\n            _model_module: FormModel.model_module,\n            _model_module_version: FormModel.model_module_version,\n            _view_name: FormModel.view_name,\n            _view_module: FormModel.view_module,\n            _view_module_version: FormModel.view_module_version,\n            value: 'Hello World',\n        };\n    }\n}\nFormModel.serializers = {\n    ...DOMWidgetModel.serializers,\n};\nFormModel.model_name = 'FormModel';\nFormModel.model_module = MODULE_NAME;\nFormModel.model_module_version = MODULE_VERSION;\nFormModel.view_name = 'FormView'; // Set to null if no view\nFormModel.view_module = MODULE_NAME; // Set to null if no view\nFormModel.view_module_version = MODULE_VERSION;\nexport class FormView extends DOMWidgetView {\n    render() {\n        this.el.classList.add('custom-widget');\n        const template = `\n        <form id=\"myForm\">\n        <label for=\"dropdown\">Select an option:</label>\n        <select id=\"dropdown\" name=\"dropdown\">\n          <option value=\"A\">Option A</option>\n          <option value=\"B\">Option B</option>\n        </select>\n      \n        <label for=\"port\">Enter a port:</label>\n        <input type=\"number\" id=\"port\" name=\"port\">\n\n        <div id=\"confirmationMessage\"></div>\n      \n        <button type=\"submit\">Submit</button>\n      </form>\n      \n`;\n        this.el.innerHTML = template;\n        // Add event listener for form submission\n        const form = this.el.querySelector('#myForm');\n        form.addEventListener('submit', this.handleFormSubmit.bind(this));\n        // Listen for messages from the Python backend\n        this.model.on('msg:custom', this.handleMessage.bind(this));\n    }\n    handleFormSubmit(event) {\n        event.preventDefault();\n        // Extract form data\n        const form = event.target;\n        const formData = new FormData(form);\n        // Convert form data to a plain object\n        const formValues = {};\n        for (const [key, value] of formData.entries()) {\n            formValues[key] = value.toString();\n        }\n        // Call the function to send form data to the Python backend\n        this.sendFormData(formValues);\n    }\n    sendFormData(formData) {\n        // Create a message to send to the Python backend\n        const message = {\n            method: 'submit_form',\n            data: formData\n        };\n        // Send the message to the Python backend\n        this.send(message);\n    }\n    handleMessage(content) {\n        if (content.method === 'display_confirmation_message') {\n            const confirmationMessage = this.el.querySelector('#confirmationMessage');\n            if (confirmationMessage) {\n                confirmationMessage.textContent = content.message;\n            }\n        }\n    }\n}\n","import { MODULE_NAME, MODULE_VERSION } from '../version';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DOMWidgetModel, DOMWidgetView, } from '@jupyter-widgets/base';\nimport { Tooltip } from 'bootstrap';\nexport class TableModel extends DOMWidgetModel {\n    defaults() {\n        return {\n            ...super.defaults(),\n            _model_name: TableModel.model_name,\n            _model_module: TableModel.model_module,\n            _model_module_version: TableModel.model_module_version,\n            _view_name: TableModel.view_name,\n            _view_module: TableModel.view_module,\n            _view_module_version: TableModel.view_module_version,\n            value: 'Hello World',\n        };\n    }\n}\nTableModel.serializers = {\n    ...DOMWidgetModel.serializers,\n};\nTableModel.model_name = 'TableModel';\nTableModel.model_module = MODULE_NAME;\nTableModel.model_module_version = MODULE_VERSION;\nTableModel.view_name = 'TableView'; // Set to null if no view\nTableModel.view_module = MODULE_NAME; // Set to null if no view\nTableModel.view_module_version = MODULE_VERSION;\nexport class TableView extends DOMWidgetView {\n    render() {\n        const stockData = [\n            { symbol: 'AAPL', price: 142.34, change: 1.25 },\n            { symbol: 'GOOGL', price: 2725.45, change: -4.56 },\n            { symbol: 'MSFT', price: 259.43, change: 2.78 },\n            { symbol: 'AMZN', price: 3310.98, change: -7.92 },\n        ];\n        this.el.innerHTML = `\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"symbol\">Symbol</th>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"price\">Price</th>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"change\">Change</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${stockData.map((stock) => `\n            <tr>\n              <td>${stock.symbol}</td>\n              <td>${stock.price}</td>\n              <td>${stock.change}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n    `;\n        const tooltipTriggerList = Array.from(this.el.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n        tooltipTriggerList.forEach((tooltipTriggerEl) => {\n            const column = tooltipTriggerEl.getAttribute('title');\n            const tooltipContent = stockData.map((stock) => stock[column]).join(', ');\n            new Tooltip(tooltipTriggerEl, {\n                title: tooltipContent,\n            });\n        });\n    }\n}\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./widget.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}