{"version":3,"file":"lib_index_js.155baf37516b3a1ab3ef.js","mappings":"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","sources":["webpack://jupysql-plugin/./style/widget.css","webpack://jupysql-plugin/./src/comm.ts","webpack://jupysql-plugin/./src/connector.ts","webpack://jupysql-plugin/./src/customconnector.ts","webpack://jupysql-plugin/./src/formatter.ts","webpack://jupysql-plugin/./src/index-widgets.ts","webpack://jupysql-plugin/./src/index.ts","webpack://jupysql-plugin/./src/version.ts","webpack://jupysql-plugin/./src/widgets/form.ts","webpack://jupysql-plugin/./src/widgets/table.ts","webpack://jupysql-plugin/./style/widget.css?ad60"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".custom-widget {\\n    background-color: lightseagreen;\\n    padding: 0px 2px;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/widget.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,+BAA+B;IAC/B,gBAAgB;AACpB\",\"sourcesContent\":[\".custom-widget {\\n    background-color: lightseagreen;\\n    padding: 0px 2px;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Opens a comm from the frontend to the kernel\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { INotebookModel } from '@jupyterlab/notebook';\n\n\nexport const registerCommTargets = (context: DocumentRegistry.IContext<INotebookModel>): void => {\n  const sessionContext = context.sessionContext;\n  const kernel = sessionContext.session?.kernel;\n\n  if (!kernel)\n    return\n\n  // Listen to updateTableWidget event\n  document.addEventListener(\"onUpdateTableWidget\", async (event : Event) => {\n    const customEvent = <CustomEvent> event\n    const data = customEvent.detail.data\n\n    // Register to table_widget handler in the JupySQL kernel\n    const comm = kernel.createComm(\"comm_target_handle_table_widget\");\n\n    await comm.open('initializing connection').done;\n\n    // Send data to the Kernel to recevice rows to display\n    comm.send(data);\n\n    // Handle recevied rows\n    comm.onMsg = (msg) => {\n      const content = msg.content;\n      const data = <{rows : any}> content.data;\n      \n      // Raise event to update table with new rows\n      let customEvent = new CustomEvent('onTableWidgetRowsReady', {\n        bubbles: true,\n        cancelable: true,\n        composed: false,\n        detail : {\n            data : data\n        }\n        });\n        document.body.dispatchEvent(customEvent);\n    }\n  })\n  \n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Modified from jupyterlab/packages/completer/src/connector.ts\n\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { CompletionHandler } from '@jupyterlab/completer';\n\n/**\n * A multi-connector connector for completion handlers.\n */\nexport class CompletionConnector extends DataConnector<\n  CompletionHandler.IReply,\n  void,\n  CompletionHandler.IRequest\n> {\n  /**\n   * Create a new connector for completion requests.\n   *\n   * @param connectors - Connectors to request matches from, ordered by metadata preference (descending).\n   */\n  constructor(\n    connectors: DataConnector<\n      CompletionHandler.IReply,\n      void,\n      CompletionHandler.IRequest\n    >[]\n  ) {\n    super();\n    this._connectors = connectors;\n  }\n\n  /**\n   * Fetch completion requests.\n   *\n   * @param request - The completion request text and details.\n   * @returns Completion reply\n   */\n  fetch(\n    request: CompletionHandler.IRequest\n  ): Promise<CompletionHandler.IReply> {\n    return Promise.all(\n      this._connectors.map((connector) => connector.fetch(request))\n    ).then((replies) => {\n      const definedReplies = replies.filter(\n        (reply): reply is CompletionHandler.IReply => !!reply\n      );\n      return Private.mergeReplies(definedReplies);\n    });\n  }\n\n  private _connectors: DataConnector<\n    CompletionHandler.IReply,\n    void,\n    CompletionHandler.IRequest\n  >[];\n}\n\n/**\n * A namespace for private functionality.\n */\nnamespace Private {\n  /**\n   * Merge results from multiple connectors.\n   *\n   * @param replies - Array of completion results.\n   * @returns IReply with a superset of all matches.\n   */\n  export function mergeReplies(\n    replies: Array<CompletionHandler.IReply>\n  ): CompletionHandler.IReply {\n    // Filter replies with matches.\n    const repliesWithMatches = replies.filter((rep) => rep.matches.length > 0);\n    // If no replies contain matches, return an empty IReply.\n    if (repliesWithMatches.length === 0) {\n      return replies[0];\n    }\n    // If only one reply contains matches, return it.\n    if (repliesWithMatches.length === 1) {\n      return repliesWithMatches[0];\n    }\n\n    // Collect unique matches from all replies.\n    const matches: Set<string> = new Set();\n    repliesWithMatches.forEach((reply) => {\n      reply.matches.forEach((match) => matches.add(match));\n    });\n\n    // Note that the returned metadata field only contains items in the first member of repliesWithMatches.\n    return { ...repliesWithMatches[0], matches: [...matches] };\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Modified from jupyterlab/packages/completer/src/contextconnector.ts\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { CompletionHandler } from '@jupyterlab/completer';\n\nimport {\n  ISessionContext\n} from '@jupyterlab/apputils';\n\nimport keywords from './keywords.json';\n\n/**\n * A custom connector for completion handlers.\n */\nexport class CustomConnector extends DataConnector<\n  CompletionHandler.IReply,\n  void,\n  CompletionHandler.IRequest\n> {\n  /**\n   * Create a new custom connector for completion requests.\n   *\n   * @param options - The instatiation options for the custom connector.\n   */\n  constructor(options: CustomConnector.IOptions) {\n    super();\n    this._editor = options.editor;\n    this._sessionContext = options.sessionContext;\n  }\n\n  /**\n   * Fetch completion requests.\n   *\n   * @param request - The completion request text and details.\n   * @returns Completion reply\n   */\n  fetch(\n    request: CompletionHandler.IRequest\n  ): Promise<CompletionHandler.IReply> {\n    if (!this._editor) {\n      return Promise.reject('No editor');\n    }\n    return new Promise<CompletionHandler.IReply>((resolve) => {\n      resolve(Private.completionHint(this._editor, this._sessionContext));\n    });\n  }\n\n  private _editor: CodeEditor.IEditor | null;\n  private _sessionContext: ISessionContext | null;\n\n}\n\n/**\n * A namespace for custom connector statics.\n */\nexport namespace CustomConnector {\n  /**\n   * The instantiation options for cell completion handlers.\n   */\n  export interface IOptions {\n    /**\n     * The session used by the custom connector.\n     */\n    editor: CodeEditor.IEditor | null;\n    sessionContext: ISessionContext | null;\n  }\n\n}\n\n\n\n/**\n * A namespace for Private functionality.\n */\nnamespace Private {\n  /**\n   * Get a list of mocked completion hints.\n   *\n   * @param editor Editor\n   * @returns Completion reply\n   */\n\n\n\n\n  export function completionHint(\n    editor: CodeEditor.IEditor,\n    sessionContext: ISessionContext\n  ): CompletionHandler.IReply {\n    // Find the token at the cursor\n    const cursor = editor.getCursorPosition();\n    const token = editor.getTokenForPosition(cursor);\n\n    var newTokenList = keywords[\"keywords\"]\n\n    const completionList = newTokenList.filter((t) => t.value.startsWith(token.value.toUpperCase())).map((t) => t.value);\n\n    // Remove duplicate completions from the list\n    const matches = Array.from(new Set<string>(completionList));\n\n    return {\n      start: token.offset,\n      end: token.offset + token.value.length,\n      matches,\n      metadata: {},\n    };\n  }\n}\n","// inspired by: https://github.com/ryantam626/jupyterlab_code_formatter\nimport { Cell, CodeCell } from '@jupyterlab/cells';\nimport { INotebookTracker, Notebook } from '@jupyterlab/notebook';\nimport { Widget } from '@lumino/widgets';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { format } from 'sql-formatter';\n\nexport class JupyterlabNotebookCodeFormatter {\n    protected working: boolean;\n    protected notebookTracker: INotebookTracker;\n\n    constructor(\n        notebookTracker: INotebookTracker\n    ) {\n        this.notebookTracker = notebookTracker;\n    }\n\n\n    public async formatAllCodeCells(\n        config: any,\n        formatter?: string,\n        notebook?: Notebook\n    ) {\n        return this.formatCells(false, config, formatter, notebook);\n    }\n\n    private getCodeCells(selectedOnly = true, notebook?: Notebook): CodeCell[] {\n        if (!this.notebookTracker.currentWidget) {\n            return [];\n        }\n        const codeCells: CodeCell[] = [];\n        notebook = notebook || this.notebookTracker.currentWidget.content;\n        notebook.widgets.forEach((cell: Cell) => {\n            if (cell.model.type === 'code') {\n                if (!selectedOnly || notebook.isSelectedOrActive(cell)) {\n                    codeCells.push(cell as CodeCell);\n                }\n            }\n        });\n        return codeCells;\n    }\n\n\n    private async formatCells(\n        selectedOnly: boolean,\n        config: any,\n        formatter?: string,\n        notebook?: Notebook\n    ) {\n\n        if (this.working) {\n            return;\n        }\n        try {\n            this.working = true;\n            const selectedCells = this.getCodeCells(selectedOnly, notebook);\n            if (selectedCells.length === 0) {\n                this.working = false;\n                return;\n            }\n\n            for (let i = 0; i < selectedCells.length; ++i) {\n                const cell = selectedCells[i];\n                const text = cell.model.value.text\n\n                if (text.startsWith(\"%%sql\")) {\n                    const lines = text.split(\"\\n\");\n                    const sqlCommand = lines.shift();\n\n                    try {\n                        const query = format(lines.join(\"\\n\"), { language: 'sql', keywordCase: 'upper' })\n                        cell.model.value.text = sqlCommand + \"\\n\" + query;\n                    } catch (error) {\n                    }\n\n\n                }\n            }\n        } catch (error) {\n            await showErrorMessage('Jupysql plugin formatting', error);\n        }\n        this.working = false;\n    }\n\n    applicable(formatter: string, currentWidget: Widget) {\n        const currentNotebookWidget = this.notebookTracker.currentWidget;\n        // TODO: Handle showing just the correct formatter for the language later\n        return currentNotebookWidget && currentWidget === currentNotebookWidget;\n    }\n}\n","import * as widget from './widgets/form';\nimport * as widget_table from './widgets/table';\n\nexport const widgetExports = {\n    ...widget,\n    ...widget_table,\n};\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n} from '@jupyterlab/application';\n\nimport {\n  ContextConnector,\n  ICompletionManager,\n  KernelConnector,\n} from '@jupyterlab/completer';\n\nimport { INotebookTracker, NotebookPanel, INotebookModel } from '@jupyterlab/notebook';\n\nimport { CompletionConnector } from './connector';\n\nimport { CustomConnector } from './customconnector';\n\n\n// for syntax highlighting\nimport { CodeMirrorEditor, ICodeMirror } from '@jupyterlab/codemirror';\nimport * as _ from 'underscore';\n\n\nimport { IDisposable, DisposableDelegate } from '@lumino/disposable';\n\n\nimport { ToolbarButton } from '@jupyterlab/apputils';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { JupyterlabNotebookCodeFormatter } from './formatter';\n\nimport { registerCommTargets } from './comm'\n\n// widgets\nimport { Application, IPlugin } from '@lumino/application';\nimport { Widget } from '@lumino/widgets';\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\nimport { widgetExports } from './index-widgets';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\n\n/**\n * The command IDs used by the console plugin.\n */\nnamespace CommandIDs {\n  export const invoke = 'completer:invoke';\n\n  export const invokeNotebook = 'completer:invoke-notebook';\n\n  export const select = 'completer:select';\n\n  export const selectNotebook = 'completer:select-notebook';\n}\n\n/**\n * Initialization data for the extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: 'completer',\n  autoStart: true,\n  requires: [ICompletionManager, INotebookTracker],\n  activate: async (\n    app: JupyterFrontEnd,\n    completionManager: ICompletionManager,\n    notebooks: INotebookTracker\n  ) => {\n    console.log('JupyterLab extension jupysql-plugin is activated!');\n    // Modelled after completer-extension's notebooks plugin\n    notebooks.widgetAdded.connect(\n      (sender: INotebookTracker, panel: NotebookPanel) => {\n        let editor = panel.content.activeCell?.editor ?? null;\n        const session = panel.sessionContext.session;\n        const sessionContext = panel.sessionContext;\n        const options = { session, editor, sessionContext };\n        const connector = new CompletionConnector([]);\n        const handler = completionManager.register({\n          connector,\n          editor,\n          parent: panel,\n        });\n\n        const updateConnector = () => {\n          editor = panel.content.activeCell?.editor ?? null;\n          options.session = panel.sessionContext.session;\n          options.sessionContext = panel.sessionContext;\n          options.editor = editor;\n          handler.editor = editor;\n\n          const kernel = new KernelConnector(options);\n          const context = new ContextConnector(options);\n          const custom = new CustomConnector(options);\n          handler.connector = new CompletionConnector([\n            kernel,\n            context,\n            custom\n          ]);\n        };\n\n        // Update the handler whenever the prompt or session changes\n        panel.content.activeCellChanged.connect(updateConnector);\n        panel.sessionContext.sessionChanged.connect(updateConnector);\n      }\n    );\n\n    // Add notebook completer command.\n    app.commands.addCommand(CommandIDs.invokeNotebook, {\n      execute: () => {\n        const panel = notebooks.currentWidget;\n        if (panel && panel.content.activeCell?.model.type === 'code') {\n          return app.commands.execute(CommandIDs.invoke, { id: panel.id });\n        }\n      },\n    });\n\n    // Add notebook completer select command.\n    app.commands.addCommand(CommandIDs.selectNotebook, {\n      execute: () => {\n        const id = notebooks.currentWidget && notebooks.currentWidget.id;\n\n        if (id) {\n          return app.commands.execute(CommandIDs.select, { id });\n        }\n      },\n    });\n\n    // Set enter key for notebook completer select command.\n    app.commands.addKeyBinding({\n      command: CommandIDs.selectNotebook,\n      keys: ['Enter'],\n      selector: '.jp-Notebook .jp-mod-completer-active',\n    });\n  },\n};\n\n\n// %%sql highlighting\nclass SqlCodeMirror {\n  constructor(\n    protected app: JupyterFrontEnd,\n    protected tracker: INotebookTracker,\n    protected code_mirror: ICodeMirror\n  ) {\n    this.tracker?.activeCellChanged?.connect(() => {\n      if (this.tracker?.activeCell !== null) {\n        const cell = this.tracker.activeCell;\n        if (cell !== null && cell?.model.type === 'code') {\n          const code_mirror_editor = cell?.editor as CodeMirrorEditor;\n          const debounced_on_change = _.debounce(() => {\n            // check for editor with first line starting with %%sql\n            const line = code_mirror_editor\n              .getLine(code_mirror_editor.firstLine())\n              ?.trim();\n            if (line?.startsWith('%%sql')) {\n              code_mirror_editor.editor.setOption('mode', 'text/x-sql');\n            } else {\n              code_mirror_editor.editor.setOption('mode', 'text/x-ipython');\n            }\n          }, 300);\n          code_mirror_editor.editor.on('change', debounced_on_change);\n          debounced_on_change();\n        }\n      }\n    });\n  }\n}\n\nfunction activate_syntax(\n  app: JupyterFrontEnd,\n  tracker: INotebookTracker,\n  code_mirror: ICodeMirror\n): void {\n  new SqlCodeMirror(app, tracker, code_mirror);\n  console.log('SQLCodeMirror loaded.');\n}\n\n/**\n * Initialization data for the jupyterlabs_sql_codemirror extension.\n * this is based on:\n * https://github.com/surdouski/jupyterlabs_sql_codemirror\n */\nconst extension_sql: JupyterFrontEndPlugin<void> = {\n  id: '@ploomber/sql-syntax-highlighting',\n  autoStart: true,\n  requires: [INotebookTracker, ICodeMirror],\n  optional: [],\n  activate: activate_syntax\n};\n\n\n\n\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class FormattingExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  /**\n   * Create a new extension for the notebook panel widget.\n   *\n   * @param panel Notebook panel\n   * @param context Notebook context\n   * @returns Disposable on the added button\n   */\n\n  private notebookCodeFormatter: JupyterlabNotebookCodeFormatter;\n\n\n  constructor(\n    tracker: INotebookTracker\n  ) {\n    this.notebookCodeFormatter = new JupyterlabNotebookCodeFormatter(\n      tracker\n    );\n  }\n\n\n  createNew(\n    panel: NotebookPanel,\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n    const clearOutput = () => {\n      this.notebookCodeFormatter.formatAllCodeCells(undefined, undefined, panel.content)\n    };\n    const button = new ToolbarButton({\n      className: 'format-sql-button',\n      label: 'Format SQL',\n      onClick: clearOutput,\n      tooltip: 'Format all %%sql cells',\n    });\n\n    panel.toolbar.insertItem(10, 'formatSQL', button);\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n\n\nexport class RegisterNotebookCommListener\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  /**\n   * Register notebook comm\n   *\n   * @param panel Notebook panel\n   * @param context Notebook context\n   * @returns Disposable on the added button\n   */\n  createNew(\n    panel: NotebookPanel,\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n\n    setTimeout(() => {\n      registerCommTargets(context)\n    }, 5000)\n\n    return new DisposableDelegate(() => {\n\n    });\n  }\n}\n\n\n/**\n * Activate the extension.\n *\n * @param app Main application object\n */\nconst formatting_plugin: JupyterFrontEndPlugin<void> = {\n  activate: (\n    app: JupyterFrontEnd,\n    tracker: INotebookTracker,\n  ) => {\n\n    app.docRegistry.addWidgetExtension('Notebook', new FormattingExtension(\n      tracker,\n    ));\n\n    app.docRegistry.addWidgetExtension('Notebook', new RegisterNotebookCommListener());\n\n  },\n  autoStart: true,\n  id: \"formatting\",\n  requires: [\n    INotebookTracker,\n  ]\n};\n\n\nconst EXTENSION_ID = 'jupysql-plugin:plugin';\n\n/**\n * The example plugin.\n */\nconst examplePlugin: IPlugin<Application<Widget>, void> = {\n  id: EXTENSION_ID,\n  requires: [IJupyterWidgetRegistry],\n  activate: activateWidgetExtension,\n  autoStart: true,\n} as unknown as IPlugin<Application<Widget>, void>;\n// the \"as unknown as ...\" typecast above is solely to support JupyterLab 1\n// and 2 in the same codebase and should be removed when we migrate to Lumino.\n\n// export default examplePlugin;\n\n/**\n * Activate the widget extension.\n */\nfunction activateWidgetExtension(\n  app: Application<Widget>,\n  registry: IJupyterWidgetRegistry\n): void {\n  registry.registerWidget({\n    name: MODULE_NAME,\n    version: MODULE_VERSION,\n    exports: widgetExports,\n  });\n}\n\nexport * from './version';\nexport default [extension, extension_sql, formatting_plugin, examplePlugin];\n","\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;","\nimport {\n    DOMWidgetModel,\n    DOMWidgetView,\n    ISerializers,\n} from '@jupyter-widgets/base';\n\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n\n// Import the CSS\nimport '../../style/widget.css';\n\nexport class FormModel extends DOMWidgetModel {\n    defaults() {\n        return {\n            ...super.defaults(),\n            _model_name: FormModel.model_name,\n            _model_module: FormModel.model_module,\n            _model_module_version: FormModel.model_module_version,\n            _view_name: FormModel.view_name,\n            _view_module: FormModel.view_module,\n            _view_module_version: FormModel.view_module_version,\n            value: 'Hello World',\n        };\n    }\n\n    static serializers: ISerializers = {\n        ...DOMWidgetModel.serializers,\n        // Add any extra serializers here\n    };\n\n    static model_name = 'FormModel';\n    static model_module = MODULE_NAME;\n    static model_module_version = MODULE_VERSION;\n    static view_name = 'FormView'; // Set to null if no view\n    static view_module = MODULE_NAME; // Set to null if no view\n    static view_module_version = MODULE_VERSION;\n}\n\nexport class FormView extends DOMWidgetView {\n    render() {\n        this.el.classList.add('custom-widget');\n\n        const template = `\n        <form id=\"myForm\">\n        <label for=\"dropdown\">Select an option:</label>\n        <select id=\"dropdown\" name=\"dropdown\">\n          <option value=\"A\">Option A</option>\n          <option value=\"B\">Option B</option>\n        </select>\n      \n        <label for=\"port\">Enter a port:</label>\n        <input type=\"number\" id=\"port\" name=\"port\">\n\n        <div id=\"confirmationMessage\"></div>\n      \n        <button type=\"submit\">Submit</button>\n      </form>\n      \n`\n\n        this.el.innerHTML = template;\n\n        // Add event listener for form submission\n        const form = this.el.querySelector('#myForm');\n        form.addEventListener('submit', this.handleFormSubmit.bind(this));\n\n        // Listen for messages from the Python backend\n        this.model.on('msg:custom', this.handleMessage.bind(this));\n\n    }\n    handleFormSubmit(event: Event) {\n        event.preventDefault();\n\n        // Extract form data\n        const form = event.target as HTMLFormElement;\n        const formData = new FormData(form);\n\n        // Convert form data to a plain object\n        const formValues: { [key: string]: string } = {};\n        for (const [key, value] of formData.entries()) {\n            formValues[key] = value.toString();\n        }\n\n        // Call the function to send form data to the Python backend\n        this.sendFormData(formValues);\n    }\n    sendFormData(formData: { [key: string]: string }) {\n        // Create a message to send to the Python backend\n        const message = {\n            method: 'submit_form',\n            data: formData\n        };\n\n        // Send the message to the Python backend\n        this.send(message);\n    }\n\n    handleMessage(content: any) {\n        if (content.method === 'display_confirmation_message') {\n            const confirmationMessage = this.el.querySelector('#confirmationMessage');\n            if (confirmationMessage) {\n                confirmationMessage.textContent = content.message;\n            }\n        }\n    }\n\n}\n\n","import { MODULE_NAME, MODULE_VERSION } from '../version';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  DOMWidgetModel,\n  DOMWidgetView,\n  ISerializers,\n} from '@jupyter-widgets/base';\nimport { Tooltip } from 'bootstrap';\n\n\nexport class TableModel extends DOMWidgetModel {\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: TableModel.model_name,\n      _model_module: TableModel.model_module,\n      _model_module_version: TableModel.model_module_version,\n      _view_name: TableModel.view_name,\n      _view_module: TableModel.view_module,\n      _view_module_version: TableModel.view_module_version,\n      value: 'Hello World',\n    };\n  }\n\n  static serializers: ISerializers = {\n    ...DOMWidgetModel.serializers,\n    // Add any extra serializers here\n  };\n\n  static model_name = 'TableModel';\n  static model_module = MODULE_NAME;\n  static model_module_version = MODULE_VERSION;\n  static view_name = 'TableView'; // Set to null if no view\n  static view_module = MODULE_NAME; // Set to null if no view\n  static view_module_version = MODULE_VERSION;\n}\n\ninterface StockData {\n  symbol: string;\n  price: number;\n  change: number;\n}\n\nexport class TableView extends DOMWidgetView {\n  render() {\n    const stockData: StockData[] = [\n      { symbol: 'AAPL', price: 142.34, change: 1.25 },\n      { symbol: 'GOOGL', price: 2725.45, change: -4.56 },\n      { symbol: 'MSFT', price: 259.43, change: 2.78 },\n      { symbol: 'AMZN', price: 3310.98, change: -7.92 },\n    ];\n\n    this.el.innerHTML = `\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"symbol\">Symbol</th>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"price\">Price</th>\n            <th data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"change\">Change</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${stockData.map((stock) => `\n            <tr>\n              <td>${stock.symbol}</td>\n              <td>${stock.price}</td>\n              <td>${stock.change}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n    `;\n\n    const tooltipTriggerList = Array.from(this.el.querySelectorAll('[data-bs-toggle=\"tooltip\"]')) as HTMLElement[];\n    tooltipTriggerList.forEach((tooltipTriggerEl) => {\n      const column = tooltipTriggerEl.getAttribute('title') as keyof StockData;\n      const tooltipContent = stockData.map((stock) => stock[column]).join(', ');\n\n      new Tooltip(tooltipTriggerEl, {\n        title: tooltipContent,\n      });\n    });\n  }\n}\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./widget.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}