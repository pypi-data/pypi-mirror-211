{
    "1": {
        "category": "extraction",
        "function": "infer_nuclei_fromlabel",
        "parameter_values": {
            "nuc_ch": 0,
            "median_sz": 3,
            "gauss_sig": 5.0,
            "thresh_factor": 0.8,
            "thresh_min": 0.1,
            "thresh_max": 1.0,
            "max_hole_w": 35,
            "small_obj_w": 15
        },
        "parent": 0,
        "annotation": "get  nuclei segmentation: 1"
    },
    "2": {
        "category": "extraction",
        "function": "raw_cellmask_fromaggr",
        "parameter_values": {
            "scale_min_max": true
        },
        "parent": 0,
        "annotation": " this creates an aggregate signal for the cellmask"
    },
    "3": {
        "category": "preprocessing",
        "function": "scale_and_smooth",
        "parameter_values": {
            "median_sz": 4,
            "gauss_sig": 4.5
        },
        "parent": 2,
        "annotation": "cellmask segmentation: 3"
    },
    "4": {
        "category": "preprocessing",
        "function": "non_linear_cellmask_transform_MCZ",
        "parent": 3,
        "annotation": "cellmask segmentation: 4"
    },
    "5": {
        "category": "core",
        "function": "masked_object_thresh",
        "parameter_values": {
            "th_method": "ave_tri_med",
            "cutoff_size": 375,
            "th_adjust": 0.94
        },
        "parent": 4,
        "annotation": "cellmask segmentation: 5"
    },
    "6": {
        "category": "postprocessing",
        "function": "fill_and_filter_linear_size",
        "parameter_values": {
            "hole_min": 0,
            "hole_max": 55,
            "min_size": 42,
            "method": "slice_by_slice"
        },
        "parent": 5,
        "annotation": "cellmask segmentation: 6"
    },
    "7": {
        "category": "postpostprocessing",
        "function": "choose_max_label_cellmask_union_nucleus",
        "parameter_values": {
            "interior_labels": true
        },
        "parent": [
            3,
            6,
            1
        ],
        "annotation": "cellmask segmentation: 7"
    },
    "8": {
        "category": "postpostprocessing",
        "function": "infer_cytoplasm",
        "parameter_values": {
            "erode_nuclei": true
        },
        "parent": [
            1,
            7
        ],
        "annotation": "infer cytoplasm: 8"
    },
    "9": {
        "category": "export",
        "function": "stack_masks",
        "parent": [
            1,
            7,
            8
        ],
        "annotation": "export  canonical masks (nuc,cellmask, cyto) as np.uint8 9"
    }
}