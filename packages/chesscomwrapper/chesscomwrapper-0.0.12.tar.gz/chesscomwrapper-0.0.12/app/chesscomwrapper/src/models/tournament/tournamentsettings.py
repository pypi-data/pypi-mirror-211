class TournamentSettings(object):
    """A class to represent a tournament settings with the type, rules, is rated, is official, is invite only, min rating, max rating, initial group size, user advance count, use tiebreak, allow vacation, winner places, registered user count, games per opponent, total rounds, concurrent games per opponent, time class and time control"""
    def __init__(self, data) -> None:
        self.type = data.get('type', None)
        self.rules = data.get('rules', None)
        self.is_rated = data.get('is_rated', None)
        self.is_official = data.get('is_official', None)
        self.is_invite_only = data.get('is_invite_only', None)
        self.min_rating = data.get('min_rating', None)
        self.max_rating = data.get('max_rating', None)
        self.initial_group_size = data.get('initial_group_size', None)
        self.user_advance_count = data.get('user_advance_count', None)
        self.use_tiebreak = data.get('use_tiebreak', None)
        self.allow_vacation = data.get('allow_vacation', None)
        self.winner_places = data.get('winner_places', None)
        self.registered_user_count = data.get('registered_user_count', None)
        self.games_per_opponent = data.get('games_per_opponent', None)
        self.total_rounds = data.get('total_rounds', None)
        self.concurrent_games_per_opponent = data.get('concurrent_games_per_opponent', None)
        self.time_class = data.get('time_class', None)
        self.time_control = data.get('time_control', None)