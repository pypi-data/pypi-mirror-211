# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class TemplateResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'template': 'str',
        'required_placeholders': 'dict(str, str)',
        'optional_placeholders': 'dict(str, str)',
        'user_input_placeholders': 'list[str]'
    }

    attribute_map = {
        'template': 'template',
        'required_placeholders': 'requiredPlaceholders',
        'optional_placeholders': 'optionalPlaceholders',
        'user_input_placeholders': 'userInputPlaceholders'
    }

    def __init__(self, template=None, required_placeholders=None, optional_placeholders=None, user_input_placeholders=None, local_vars_configuration=None):  # noqa: E501
        """TemplateResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._template = None
        self._required_placeholders = None
        self._optional_placeholders = None
        self._user_input_placeholders = None
        self.discriminator = None

        self.template = template
        self.required_placeholders = required_placeholders
        self.optional_placeholders = optional_placeholders
        self.user_input_placeholders = user_input_placeholders

    @property
    def template(self):
        """Gets the template of this TemplateResponse.  # noqa: E501


        :return: The template of this TemplateResponse.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TemplateResponse.


        :param template: The template of this TemplateResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def required_placeholders(self):
        """Gets the required_placeholders of this TemplateResponse.  # noqa: E501


        :return: The required_placeholders of this TemplateResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._required_placeholders

    @required_placeholders.setter
    def required_placeholders(self, required_placeholders):
        """Sets the required_placeholders of this TemplateResponse.


        :param required_placeholders: The required_placeholders of this TemplateResponse.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and required_placeholders is None:  # noqa: E501
            raise ValueError("Invalid value for `required_placeholders`, must not be `None`")  # noqa: E501

        self._required_placeholders = required_placeholders

    @property
    def optional_placeholders(self):
        """Gets the optional_placeholders of this TemplateResponse.  # noqa: E501


        :return: The optional_placeholders of this TemplateResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._optional_placeholders

    @optional_placeholders.setter
    def optional_placeholders(self, optional_placeholders):
        """Sets the optional_placeholders of this TemplateResponse.


        :param optional_placeholders: The optional_placeholders of this TemplateResponse.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and optional_placeholders is None:  # noqa: E501
            raise ValueError("Invalid value for `optional_placeholders`, must not be `None`")  # noqa: E501

        self._optional_placeholders = optional_placeholders

    @property
    def user_input_placeholders(self):
        """Gets the user_input_placeholders of this TemplateResponse.  # noqa: E501


        :return: The user_input_placeholders of this TemplateResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_input_placeholders

    @user_input_placeholders.setter
    def user_input_placeholders(self, user_input_placeholders):
        """Sets the user_input_placeholders of this TemplateResponse.


        :param user_input_placeholders: The user_input_placeholders of this TemplateResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and user_input_placeholders is None:  # noqa: E501
            raise ValueError("Invalid value for `user_input_placeholders`, must not be `None`")  # noqa: E501

        self._user_input_placeholders = user_input_placeholders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateResponse):
            return True

        return self.to_dict() != other.to_dict()
