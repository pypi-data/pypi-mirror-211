# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class OptimizedModelResponseMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'model_id': 'str',
        'name': 'str',
        'owner': 'str',
        'version': 'str',
        'model_size': 'float',
        'source': 'ModelSource',
        'quantization_level': 'QuantizationLevel',
        'framework': 'FrameworkType',
        'platform_version': 'str',
        'dl_task': 'str',
        'input_dimensions': 'list[object]',
        'channel_first': 'bool',
        'fetched_model_input_dimensions': 'list[object]',
        'dataset_name': 'DatasetName',
        'architecture': 'str',
        'primary_hardware': 'HardwareReturnSchema',
        'primary_batch_size': 'int',
        'benchmark_state': 'ModelBenchmarkState',
        'benchmark_start_date': 'datetime',
        'benchmark_end_date': 'datetime',
        'benchmark': 'dict(str, list[ModelBenchmarkResultMetadata])',
        'optimization_state': 'ModelOptimizationState',
        'optimization_start_date': 'datetime',
        'optimization_end_date': 'datetime',
        'gru_state': 'ModelGruState',
        'gru_start_date': 'datetime',
        'gru_end_date': 'datetime',
        'input_tensor_name': 'str',
        'output_tensor_name': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'kpis': 'list[KPI]',
        'accuracy_metrics': 'list[AccuracyMetric]',
        'hyper_parameters': 'list[HyperParameter]',
        'raw_format': 'bool',
        'company_name': 'str',
        'company_id': 'str',
        'workspace_id': 'str',
        'baseline_model_id': 'str',
        'error': 'ModelErrorRecord',
        'custom_hardware': 'str',
        'colab_link': 'str',
        'is_int8_calibrated': 'bool',
        'dl_task_label': 'DeepLearningTaskLabel'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'model_id': 'modelId',
        'name': 'name',
        'owner': 'owner',
        'version': 'version',
        'model_size': 'modelSize',
        'source': 'source',
        'quantization_level': 'quantizationLevel',
        'framework': 'framework',
        'platform_version': 'platformVersion',
        'dl_task': 'dlTask',
        'input_dimensions': 'inputDimensions',
        'channel_first': 'channelFirst',
        'fetched_model_input_dimensions': 'fetchedModelInputDimensions',
        'dataset_name': 'datasetName',
        'architecture': 'architecture',
        'primary_hardware': 'primaryHardware',
        'primary_batch_size': 'primaryBatchSize',
        'benchmark_state': 'benchmarkState',
        'benchmark_start_date': 'benchmarkStartDate',
        'benchmark_end_date': 'benchmarkEndDate',
        'benchmark': 'benchmark',
        'optimization_state': 'optimizationState',
        'optimization_start_date': 'optimizationStartDate',
        'optimization_end_date': 'optimizationEndDate',
        'gru_state': 'gruState',
        'gru_start_date': 'gruStartDate',
        'gru_end_date': 'gruEndDate',
        'input_tensor_name': 'inputTensorName',
        'output_tensor_name': 'outputTensorName',
        'description': 'description',
        'tags': 'tags',
        'kpis': 'kpis',
        'accuracy_metrics': 'accuracyMetrics',
        'hyper_parameters': 'hyperParameters',
        'raw_format': 'rawFormat',
        'company_name': 'companyName',
        'company_id': 'companyId',
        'workspace_id': 'workspaceId',
        'baseline_model_id': 'baselineModelId',
        'error': 'error',
        'custom_hardware': 'customHardware',
        'colab_link': 'colabLink',
        'is_int8_calibrated': 'isInt8Calibrated',
        'dl_task_label': 'dlTaskLabel'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, model_id=None, name=None, owner=None, version='1.0', model_size=0, source=None, quantization_level=None, framework=None, platform_version=None, dl_task=None, input_dimensions=None, channel_first=True, fetched_model_input_dimensions=None, dataset_name=None, architecture=None, primary_hardware=None, primary_batch_size=1, benchmark_state=None, benchmark_start_date=None, benchmark_end_date=None, benchmark=None, optimization_state=None, optimization_start_date=None, optimization_end_date=None, gru_state=None, gru_start_date=None, gru_end_date=None, input_tensor_name=None, output_tensor_name=None, description='', tags=[], kpis=[], accuracy_metrics=[], hyper_parameters=[], raw_format=False, company_name=None, company_id=None, workspace_id=None, baseline_model_id=None, error=None, custom_hardware=None, colab_link=None, is_int8_calibrated=False, dl_task_label=None, local_vars_configuration=None):  # noqa: E501
        """OptimizedModelResponseMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._model_id = None
        self._name = None
        self._owner = None
        self._version = None
        self._model_size = None
        self._source = None
        self._quantization_level = None
        self._framework = None
        self._platform_version = None
        self._dl_task = None
        self._input_dimensions = None
        self._channel_first = None
        self._fetched_model_input_dimensions = None
        self._dataset_name = None
        self._architecture = None
        self._primary_hardware = None
        self._primary_batch_size = None
        self._benchmark_state = None
        self._benchmark_start_date = None
        self._benchmark_end_date = None
        self._benchmark = None
        self._optimization_state = None
        self._optimization_start_date = None
        self._optimization_end_date = None
        self._gru_state = None
        self._gru_start_date = None
        self._gru_end_date = None
        self._input_tensor_name = None
        self._output_tensor_name = None
        self._description = None
        self._tags = None
        self._kpis = None
        self._accuracy_metrics = None
        self._hyper_parameters = None
        self._raw_format = None
        self._company_name = None
        self._company_id = None
        self._workspace_id = None
        self._baseline_model_id = None
        self._error = None
        self._custom_hardware = None
        self._colab_link = None
        self._is_int8_calibrated = None
        self._dl_task_label = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        if model_id is not None:
            self.model_id = model_id
        self.name = name
        if owner is not None:
            self.owner = owner
        if version is not None:
            self.version = version
        if model_size is not None:
            self.model_size = model_size
        if source is not None:
            self.source = source
        if quantization_level is not None:
            self.quantization_level = quantization_level
        self.framework = framework
        if platform_version is not None:
            self.platform_version = platform_version
        self.dl_task = dl_task
        if input_dimensions is not None:
            self.input_dimensions = input_dimensions
        if channel_first is not None:
            self.channel_first = channel_first
        if fetched_model_input_dimensions is not None:
            self.fetched_model_input_dimensions = fetched_model_input_dimensions
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if architecture is not None:
            self.architecture = architecture
        self.primary_hardware = primary_hardware
        if primary_batch_size is not None:
            self.primary_batch_size = primary_batch_size
        if benchmark_state is not None:
            self.benchmark_state = benchmark_state
        if benchmark_start_date is not None:
            self.benchmark_start_date = benchmark_start_date
        if benchmark_end_date is not None:
            self.benchmark_end_date = benchmark_end_date
        if benchmark is not None:
            self.benchmark = benchmark
        if optimization_state is not None:
            self.optimization_state = optimization_state
        self.optimization_start_date = optimization_start_date
        self.optimization_end_date = optimization_end_date
        if gru_state is not None:
            self.gru_state = gru_state
        if gru_start_date is not None:
            self.gru_start_date = gru_start_date
        if gru_end_date is not None:
            self.gru_end_date = gru_end_date
        if input_tensor_name is not None:
            self.input_tensor_name = input_tensor_name
        if output_tensor_name is not None:
            self.output_tensor_name = output_tensor_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if kpis is not None:
            self.kpis = kpis
        if accuracy_metrics is not None:
            self.accuracy_metrics = accuracy_metrics
        if hyper_parameters is not None:
            self.hyper_parameters = hyper_parameters
        if raw_format is not None:
            self.raw_format = raw_format
        if company_name is not None:
            self.company_name = company_name
        if company_id is not None:
            self.company_id = company_id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        self.baseline_model_id = baseline_model_id
        if error is not None:
            self.error = error
        if custom_hardware is not None:
            self.custom_hardware = custom_hardware
        if colab_link is not None:
            self.colab_link = colab_link
        if is_int8_calibrated is not None:
            self.is_int8_calibrated = is_int8_calibrated
        self.dl_task_label = dl_task_label

    @property
    def update_time(self):
        """Gets the update_time of this OptimizedModelResponseMetadata.  # noqa: E501

        The last time when the model data was changed.  # noqa: E501

        :return: The update_time of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OptimizedModelResponseMetadata.

        The last time when the model data was changed.  # noqa: E501

        :param update_time: The update_time of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this OptimizedModelResponseMetadata.  # noqa: E501

        The time when the model was added to model repository.  # noqa: E501

        :return: The creation_time of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this OptimizedModelResponseMetadata.

        The time when the model was added to model repository.  # noqa: E501

        :param creation_time: The creation_time of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The id of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OptimizedModelResponseMetadata.


        :param id: The id of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this OptimizedModelResponseMetadata.  # noqa: E501

        Is this model had been deleted?  # noqa: E501

        :return: The deleted of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this OptimizedModelResponseMetadata.

        Is this model had been deleted?  # noqa: E501

        :param deleted: The deleted of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def model_id(self):
        """Gets the model_id of this OptimizedModelResponseMetadata.  # noqa: E501

        The unique indicator of this model  # noqa: E501

        :return: The model_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this OptimizedModelResponseMetadata.

        The unique indicator of this model  # noqa: E501

        :param model_id: The model_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this OptimizedModelResponseMetadata.  # noqa: E501

        The name of this model.  # noqa: E501

        :return: The name of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OptimizedModelResponseMetadata.

        The name of this model.  # noqa: E501

        :param name: The name of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this OptimizedModelResponseMetadata.  # noqa: E501

        What is the id of the owner of this model?  # noqa: E501

        :return: The owner of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this OptimizedModelResponseMetadata.

        What is the id of the owner of this model?  # noqa: E501

        :param owner: The owner of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def version(self):
        """Gets the version of this OptimizedModelResponseMetadata.  # noqa: E501

        The version of the model, 1.0 for baseline 1.X for optimized  # noqa: E501

        :return: The version of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OptimizedModelResponseMetadata.

        The version of the model, 1.0 for baseline 1.X for optimized  # noqa: E501

        :param version: The version of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def model_size(self):
        """Gets the model_size of this OptimizedModelResponseMetadata.  # noqa: E501

        The size of the model file in mb.  # noqa: E501

        :return: The model_size of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: float
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this OptimizedModelResponseMetadata.

        The size of the model file in mb.  # noqa: E501

        :param model_size: The model_size of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: float
        """

        self._model_size = model_size

    @property
    def source(self):
        """Gets the source of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The source of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: ModelSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OptimizedModelResponseMetadata.


        :param source: The source of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: ModelSource
        """

        self._source = source

    @property
    def quantization_level(self):
        """Gets the quantization_level of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The quantization_level of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: QuantizationLevel
        """
        return self._quantization_level

    @quantization_level.setter
    def quantization_level(self, quantization_level):
        """Sets the quantization_level of this OptimizedModelResponseMetadata.


        :param quantization_level: The quantization_level of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: QuantizationLevel
        """

        self._quantization_level = quantization_level

    @property
    def framework(self):
        """Gets the framework of this OptimizedModelResponseMetadata.  # noqa: E501

        The deep learning framework of the model - which library is it based on?  # noqa: E501

        :return: The framework of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: FrameworkType
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this OptimizedModelResponseMetadata.

        The deep learning framework of the model - which library is it based on?  # noqa: E501

        :param framework: The framework of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: FrameworkType
        """
        if self.local_vars_configuration.client_side_validation and framework is None:  # noqa: E501
            raise ValueError("Invalid value for `framework`, must not be `None`")  # noqa: E501

        self._framework = framework

    @property
    def platform_version(self):
        """Gets the platform_version of this OptimizedModelResponseMetadata.  # noqa: E501

        The platform version which the model was created by. Used in order to distinguish which packages version are required.  # noqa: E501

        :return: The platform_version of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this OptimizedModelResponseMetadata.

        The platform version which the model was created by. Used in order to distinguish which packages version are required.  # noqa: E501

        :param platform_version: The platform_version of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def dl_task(self):
        """Gets the dl_task of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The dl_task of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._dl_task

    @dl_task.setter
    def dl_task(self, dl_task):
        """Sets the dl_task of this OptimizedModelResponseMetadata.


        :param dl_task: The dl_task of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dl_task is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task`, must not be `None`")  # noqa: E501

        self._dl_task = dl_task

    @property
    def input_dimensions(self):
        """Gets the input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501

        A list of numbers, describing the vector (dimensions) of the input model. A tuple - \"(1,2,3)\" or a list of integers as input. the integers have separated with commas \",\".  # noqa: E501

        :return: The input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[object]
        """
        return self._input_dimensions

    @input_dimensions.setter
    def input_dimensions(self, input_dimensions):
        """Sets the input_dimensions of this OptimizedModelResponseMetadata.

        A list of numbers, describing the vector (dimensions) of the input model. A tuple - \"(1,2,3)\" or a list of integers as input. the integers have separated with commas \",\".  # noqa: E501

        :param input_dimensions: The input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[object]
        """

        self._input_dimensions = input_dimensions

    @property
    def channel_first(self):
        """Gets the channel_first of this OptimizedModelResponseMetadata.  # noqa: E501

        This field indicate if the channel of the model is the first input dim (True) or the last one (False).  # noqa: E501

        :return: The channel_first of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._channel_first

    @channel_first.setter
    def channel_first(self, channel_first):
        """Sets the channel_first of this OptimizedModelResponseMetadata.

        This field indicate if the channel of the model is the first input dim (True) or the last one (False).  # noqa: E501

        :param channel_first: The channel_first of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: bool
        """

        self._channel_first = channel_first

    @property
    def fetched_model_input_dimensions(self):
        """Gets the fetched_model_input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501

        The input dimensions of the model as fetched from the model inferencer engine. Will be None if the engine doesn't support getting the input vector shape.  # noqa: E501

        :return: The fetched_model_input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[object]
        """
        return self._fetched_model_input_dimensions

    @fetched_model_input_dimensions.setter
    def fetched_model_input_dimensions(self, fetched_model_input_dimensions):
        """Sets the fetched_model_input_dimensions of this OptimizedModelResponseMetadata.

        The input dimensions of the model as fetched from the model inferencer engine. Will be None if the engine doesn't support getting the input vector shape.  # noqa: E501

        :param fetched_model_input_dimensions: The fetched_model_input_dimensions of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[object]
        """

        self._fetched_model_input_dimensions = fetched_model_input_dimensions

    @property
    def dataset_name(self):
        """Gets the dataset_name of this OptimizedModelResponseMetadata.  # noqa: E501

        The dataset that the model is based on.  # noqa: E501

        :return: The dataset_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: DatasetName
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this OptimizedModelResponseMetadata.

        The dataset that the model is based on.  # noqa: E501

        :param dataset_name: The dataset_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: DatasetName
        """

        self._dataset_name = dataset_name

    @property
    def architecture(self):
        """Gets the architecture of this OptimizedModelResponseMetadata.  # noqa: E501

        The architecture of the model, must be supported by deci.  # noqa: E501

        :return: The architecture of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this OptimizedModelResponseMetadata.

        The architecture of the model, must be supported by deci.  # noqa: E501

        :param architecture: The architecture of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def primary_hardware(self):
        """Gets the primary_hardware of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The primary_hardware of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: HardwareReturnSchema
        """
        return self._primary_hardware

    @primary_hardware.setter
    def primary_hardware(self, primary_hardware):
        """Sets the primary_hardware of this OptimizedModelResponseMetadata.


        :param primary_hardware: The primary_hardware of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: HardwareReturnSchema
        """
        if self.local_vars_configuration.client_side_validation and primary_hardware is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_hardware`, must not be `None`")  # noqa: E501

        self._primary_hardware = primary_hardware

    @property
    def primary_batch_size(self):
        """Gets the primary_batch_size of this OptimizedModelResponseMetadata.  # noqa: E501

        The batch size to present on default when viewing this model.  # noqa: E501

        :return: The primary_batch_size of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: int
        """
        return self._primary_batch_size

    @primary_batch_size.setter
    def primary_batch_size(self, primary_batch_size):
        """Sets the primary_batch_size of this OptimizedModelResponseMetadata.

        The batch size to present on default when viewing this model.  # noqa: E501

        :param primary_batch_size: The primary_batch_size of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: int
        """

        self._primary_batch_size = primary_batch_size

    @property
    def benchmark_state(self):
        """Gets the benchmark_state of this OptimizedModelResponseMetadata.  # noqa: E501

        What is the state of the model benchmark?  # noqa: E501

        :return: The benchmark_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: ModelBenchmarkState
        """
        return self._benchmark_state

    @benchmark_state.setter
    def benchmark_state(self, benchmark_state):
        """Sets the benchmark_state of this OptimizedModelResponseMetadata.

        What is the state of the model benchmark?  # noqa: E501

        :param benchmark_state: The benchmark_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: ModelBenchmarkState
        """

        self._benchmark_state = benchmark_state

    @property
    def benchmark_start_date(self):
        """Gets the benchmark_start_date of this OptimizedModelResponseMetadata.  # noqa: E501

        When the benchmark process was started?  # noqa: E501

        :return: The benchmark_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._benchmark_start_date

    @benchmark_start_date.setter
    def benchmark_start_date(self, benchmark_start_date):
        """Sets the benchmark_start_date of this OptimizedModelResponseMetadata.

        When the benchmark process was started?  # noqa: E501

        :param benchmark_start_date: The benchmark_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._benchmark_start_date = benchmark_start_date

    @property
    def benchmark_end_date(self):
        """Gets the benchmark_end_date of this OptimizedModelResponseMetadata.  # noqa: E501

        When the benchmark process was ended?  # noqa: E501

        :return: The benchmark_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._benchmark_end_date

    @benchmark_end_date.setter
    def benchmark_end_date(self, benchmark_end_date):
        """Sets the benchmark_end_date of this OptimizedModelResponseMetadata.

        When the benchmark process was ended?  # noqa: E501

        :param benchmark_end_date: The benchmark_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._benchmark_end_date = benchmark_end_date

    @property
    def benchmark(self):
        """Gets the benchmark of this OptimizedModelResponseMetadata.  # noqa: E501

        Benchmark result of the model per batch size per hardware.  # noqa: E501

        :return: The benchmark of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: dict(str, list[ModelBenchmarkResultMetadata])
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this OptimizedModelResponseMetadata.

        Benchmark result of the model per batch size per hardware.  # noqa: E501

        :param benchmark: The benchmark of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: dict(str, list[ModelBenchmarkResultMetadata])
        """

        self._benchmark = benchmark

    @property
    def optimization_state(self):
        """Gets the optimization_state of this OptimizedModelResponseMetadata.  # noqa: E501

        Which optimizations ran on this model.  # noqa: E501

        :return: The optimization_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: ModelOptimizationState
        """
        return self._optimization_state

    @optimization_state.setter
    def optimization_state(self, optimization_state):
        """Sets the optimization_state of this OptimizedModelResponseMetadata.

        Which optimizations ran on this model.  # noqa: E501

        :param optimization_state: The optimization_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: ModelOptimizationState
        """

        self._optimization_state = optimization_state

    @property
    def optimization_start_date(self):
        """Gets the optimization_start_date of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The optimization_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._optimization_start_date

    @optimization_start_date.setter
    def optimization_start_date(self, optimization_start_date):
        """Sets the optimization_start_date of this OptimizedModelResponseMetadata.


        :param optimization_start_date: The optimization_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and optimization_start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `optimization_start_date`, must not be `None`")  # noqa: E501

        self._optimization_start_date = optimization_start_date

    @property
    def optimization_end_date(self):
        """Gets the optimization_end_date of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The optimization_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._optimization_end_date

    @optimization_end_date.setter
    def optimization_end_date(self, optimization_end_date):
        """Sets the optimization_end_date of this OptimizedModelResponseMetadata.


        :param optimization_end_date: The optimization_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and optimization_end_date is None:  # noqa: E501
            raise ValueError("Invalid value for `optimization_end_date`, must not be `None`")  # noqa: E501

        self._optimization_end_date = optimization_end_date

    @property
    def gru_state(self):
        """Gets the gru_state of this OptimizedModelResponseMetadata.  # noqa: E501

        What is the state of gru on this model?  # noqa: E501

        :return: The gru_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: ModelGruState
        """
        return self._gru_state

    @gru_state.setter
    def gru_state(self, gru_state):
        """Sets the gru_state of this OptimizedModelResponseMetadata.

        What is the state of gru on this model?  # noqa: E501

        :param gru_state: The gru_state of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: ModelGruState
        """

        self._gru_state = gru_state

    @property
    def gru_start_date(self):
        """Gets the gru_start_date of this OptimizedModelResponseMetadata.  # noqa: E501

        When was gru started on this model?  # noqa: E501

        :return: The gru_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._gru_start_date

    @gru_start_date.setter
    def gru_start_date(self, gru_start_date):
        """Sets the gru_start_date of this OptimizedModelResponseMetadata.

        When was gru started on this model?  # noqa: E501

        :param gru_start_date: The gru_start_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._gru_start_date = gru_start_date

    @property
    def gru_end_date(self):
        """Gets the gru_end_date of this OptimizedModelResponseMetadata.  # noqa: E501

        When was gru ended on this model?  # noqa: E501

        :return: The gru_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._gru_end_date

    @gru_end_date.setter
    def gru_end_date(self, gru_end_date):
        """Sets the gru_end_date of this OptimizedModelResponseMetadata.

        When was gru ended on this model?  # noqa: E501

        :param gru_end_date: The gru_end_date of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._gru_end_date = gru_end_date

    @property
    def input_tensor_name(self):
        """Gets the input_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501

        The name of the input layer that will be used as an input layer for TensorFlow, Exactly as it is used inside of TensorFlow.  # noqa: E501

        :return: The input_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._input_tensor_name

    @input_tensor_name.setter
    def input_tensor_name(self, input_tensor_name):
        """Sets the input_tensor_name of this OptimizedModelResponseMetadata.

        The name of the input layer that will be used as an input layer for TensorFlow, Exactly as it is used inside of TensorFlow.  # noqa: E501

        :param input_tensor_name: The input_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                input_tensor_name is not None and len(input_tensor_name) > 100):
            raise ValueError("Invalid value for `input_tensor_name`, length must be less than or equal to `100`")  # noqa: E501

        self._input_tensor_name = input_tensor_name

    @property
    def output_tensor_name(self):
        """Gets the output_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501

        The name of the output layer that will be used as an input layer for TensorFlow, Exactly as it is used inside of TensorFlow.  # noqa: E501

        :return: The output_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._output_tensor_name

    @output_tensor_name.setter
    def output_tensor_name(self, output_tensor_name):
        """Sets the output_tensor_name of this OptimizedModelResponseMetadata.

        The name of the output layer that will be used as an input layer for TensorFlow, Exactly as it is used inside of TensorFlow.  # noqa: E501

        :param output_tensor_name: The output_tensor_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                output_tensor_name is not None and len(output_tensor_name) > 100):
            raise ValueError("Invalid value for `output_tensor_name`, length must be less than or equal to `100`")  # noqa: E501

        self._output_tensor_name = output_tensor_name

    @property
    def description(self):
        """Gets the description of this OptimizedModelResponseMetadata.  # noqa: E501

        Description explains this model purpose.  # noqa: E501

        :return: The description of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OptimizedModelResponseMetadata.

        Description explains this model purpose.  # noqa: E501

        :param description: The description of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this OptimizedModelResponseMetadata.  # noqa: E501

        List of tags used to query this model quickly.  # noqa: E501

        :return: The tags of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OptimizedModelResponseMetadata.

        List of tags used to query this model quickly.  # noqa: E501

        :param tags: The tags of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def kpis(self):
        """Gets the kpis of this OptimizedModelResponseMetadata.  # noqa: E501

        Model goals for primary hardware and batch size.  # noqa: E501

        :return: The kpis of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[KPI]
        """
        return self._kpis

    @kpis.setter
    def kpis(self, kpis):
        """Sets the kpis of this OptimizedModelResponseMetadata.

        Model goals for primary hardware and batch size.  # noqa: E501

        :param kpis: The kpis of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[KPI]
        """

        self._kpis = kpis

    @property
    def accuracy_metrics(self):
        """Gets the accuracy_metrics of this OptimizedModelResponseMetadata.  # noqa: E501

        List of all accuracy metrics on this model performance.  # noqa: E501

        :return: The accuracy_metrics of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[AccuracyMetric]
        """
        return self._accuracy_metrics

    @accuracy_metrics.setter
    def accuracy_metrics(self, accuracy_metrics):
        """Sets the accuracy_metrics of this OptimizedModelResponseMetadata.

        List of all accuracy metrics on this model performance.  # noqa: E501

        :param accuracy_metrics: The accuracy_metrics of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[AccuracyMetric]
        """

        self._accuracy_metrics = accuracy_metrics

    @property
    def hyper_parameters(self):
        """Gets the hyper_parameters of this OptimizedModelResponseMetadata.  # noqa: E501

        List of all user defined hyper parameters.  # noqa: E501

        :return: The hyper_parameters of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: list[HyperParameter]
        """
        return self._hyper_parameters

    @hyper_parameters.setter
    def hyper_parameters(self, hyper_parameters):
        """Sets the hyper_parameters of this OptimizedModelResponseMetadata.

        List of all user defined hyper parameters.  # noqa: E501

        :param hyper_parameters: The hyper_parameters of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: list[HyperParameter]
        """

        self._hyper_parameters = hyper_parameters

    @property
    def raw_format(self):
        """Gets the raw_format of this OptimizedModelResponseMetadata.  # noqa: E501

        Whether we want to download files of the model in a raw (true) or regular (false) format  # noqa: E501

        :return: The raw_format of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._raw_format

    @raw_format.setter
    def raw_format(self, raw_format):
        """Sets the raw_format of this OptimizedModelResponseMetadata.

        Whether we want to download files of the model in a raw (true) or regular (false) format  # noqa: E501

        :param raw_format: The raw_format of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: bool
        """

        self._raw_format = raw_format

    @property
    def company_name(self):
        """Gets the company_name of this OptimizedModelResponseMetadata.  # noqa: E501

        The name of the company the model belongs to.  # noqa: E501

        :return: The company_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this OptimizedModelResponseMetadata.

        The name of the company the model belongs to.  # noqa: E501

        :param company_name: The company_name of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                company_name is not None and len(company_name) > 100):
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                company_name is not None and len(company_name) < 1):
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._company_name = company_name

    @property
    def company_id(self):
        """Gets the company_id of this OptimizedModelResponseMetadata.  # noqa: E501

        The unique id of the company the model belongs to.  # noqa: E501

        :return: The company_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this OptimizedModelResponseMetadata.

        The unique id of the company the model belongs to.  # noqa: E501

        :param company_id: The company_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The workspace_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this OptimizedModelResponseMetadata.


        :param workspace_id: The workspace_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def baseline_model_id(self):
        """Gets the baseline_model_id of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The baseline_model_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._baseline_model_id

    @baseline_model_id.setter
    def baseline_model_id(self, baseline_model_id):
        """Sets the baseline_model_id of this OptimizedModelResponseMetadata.


        :param baseline_model_id: The baseline_model_id of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and baseline_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `baseline_model_id`, must not be `None`")  # noqa: E501

        self._baseline_model_id = baseline_model_id

    @property
    def error(self):
        """Gets the error of this OptimizedModelResponseMetadata.  # noqa: E501

        Current errors for this model.  # noqa: E501

        :return: The error of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: ModelErrorRecord
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this OptimizedModelResponseMetadata.

        Current errors for this model.  # noqa: E501

        :param error: The error of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: ModelErrorRecord
        """

        self._error = error

    @property
    def custom_hardware(self):
        """Gets the custom_hardware of this OptimizedModelResponseMetadata.  # noqa: E501

        A custom hardware defined by the user  # noqa: E501

        :return: The custom_hardware of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._custom_hardware

    @custom_hardware.setter
    def custom_hardware(self, custom_hardware):
        """Sets the custom_hardware of this OptimizedModelResponseMetadata.

        A custom hardware defined by the user  # noqa: E501

        :param custom_hardware: The custom_hardware of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._custom_hardware = custom_hardware

    @property
    def colab_link(self):
        """Gets the colab_link of this OptimizedModelResponseMetadata.  # noqa: E501

        A link to a Colab with code to download this specific model.  # noqa: E501

        :return: The colab_link of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._colab_link

    @colab_link.setter
    def colab_link(self, colab_link):
        """Sets the colab_link of this OptimizedModelResponseMetadata.

        A link to a Colab with code to download this specific model.  # noqa: E501

        :param colab_link: The colab_link of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: str
        """

        self._colab_link = colab_link

    @property
    def is_int8_calibrated(self):
        """Gets the is_int8_calibrated of this OptimizedModelResponseMetadata.  # noqa: E501

        Indicates whether a model is INT8 calibrated  # noqa: E501

        :return: The is_int8_calibrated of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_int8_calibrated

    @is_int8_calibrated.setter
    def is_int8_calibrated(self, is_int8_calibrated):
        """Sets the is_int8_calibrated of this OptimizedModelResponseMetadata.

        Indicates whether a model is INT8 calibrated  # noqa: E501

        :param is_int8_calibrated: The is_int8_calibrated of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: bool
        """

        self._is_int8_calibrated = is_int8_calibrated

    @property
    def dl_task_label(self):
        """Gets the dl_task_label of this OptimizedModelResponseMetadata.  # noqa: E501


        :return: The dl_task_label of this OptimizedModelResponseMetadata.  # noqa: E501
        :rtype: DeepLearningTaskLabel
        """
        return self._dl_task_label

    @dl_task_label.setter
    def dl_task_label(self, dl_task_label):
        """Sets the dl_task_label of this OptimizedModelResponseMetadata.


        :param dl_task_label: The dl_task_label of this OptimizedModelResponseMetadata.  # noqa: E501
        :type: DeepLearningTaskLabel
        """
        if self.local_vars_configuration.client_side_validation and dl_task_label is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task_label`, must not be `None`")  # noqa: E501

        self._dl_task_label = dl_task_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizedModelResponseMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizedModelResponseMetadata):
            return True

        return self.to_dict() != other.to_dict()
