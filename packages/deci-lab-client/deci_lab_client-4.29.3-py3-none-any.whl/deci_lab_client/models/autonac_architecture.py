# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class AutonacArchitecture(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'workspace_id': 'str',
        'owner': 'str',
        'model_id': 'str',
        'name': 'str',
        'autonac': 'bool',
        'colab_link': 'str',
        'delivery_state': 'AutonacDeliveryState',
        'deep_learning_task': 'DeepLearningTask',
        'source': 'AutonacSource',
        'architecture': 'str',
        'initial_raw_format': 'bool',
        'initial_model_size': 'float',
        'initial_quantization_level': 'QuantizationLevel',
        'initial_input_dimensions': 'list[object]',
        'initial_accuracy_metrics': 'list[AccuracyMetric]',
        'initial_hyper_parameters': 'list[HyperParameter]',
        'initial_description': 'str',
        'initial_kpis': 'list[KPI]',
        'initial_optimization_state': 'ModelOptimizationState',
        'initial_baseline_model_id': 'str',
        'initial_primary_hardware': 'HardwareType'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'workspace_id': 'workspaceId',
        'owner': 'owner',
        'model_id': 'modelId',
        'name': 'name',
        'autonac': 'autonac',
        'colab_link': 'colabLink',
        'delivery_state': 'deliveryState',
        'deep_learning_task': 'deepLearningTask',
        'source': 'source',
        'architecture': 'architecture',
        'initial_raw_format': 'initialRawFormat',
        'initial_model_size': 'initialModelSize',
        'initial_quantization_level': 'initialQuantizationLevel',
        'initial_input_dimensions': 'initialInputDimensions',
        'initial_accuracy_metrics': 'initialAccuracyMetrics',
        'initial_hyper_parameters': 'initialHyperParameters',
        'initial_description': 'initialDescription',
        'initial_kpis': 'initialKpis',
        'initial_optimization_state': 'initialOptimizationState',
        'initial_baseline_model_id': 'initialBaselineModelId',
        'initial_primary_hardware': 'initialPrimaryHardware'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, workspace_id=None, owner=None, model_id=None, name=None, autonac=True, colab_link=None, delivery_state=None, deep_learning_task=None, source=None, architecture=None, initial_raw_format=False, initial_model_size=None, initial_quantization_level=None, initial_input_dimensions=None, initial_accuracy_metrics=None, initial_hyper_parameters=None, initial_description=None, initial_kpis=None, initial_optimization_state=None, initial_baseline_model_id=None, initial_primary_hardware=None, local_vars_configuration=None):  # noqa: E501
        """AutonacArchitecture - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._workspace_id = None
        self._owner = None
        self._model_id = None
        self._name = None
        self._autonac = None
        self._colab_link = None
        self._delivery_state = None
        self._deep_learning_task = None
        self._source = None
        self._architecture = None
        self._initial_raw_format = None
        self._initial_model_size = None
        self._initial_quantization_level = None
        self._initial_input_dimensions = None
        self._initial_accuracy_metrics = None
        self._initial_hyper_parameters = None
        self._initial_description = None
        self._initial_kpis = None
        self._initial_optimization_state = None
        self._initial_baseline_model_id = None
        self._initial_primary_hardware = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.workspace_id = workspace_id
        self.owner = owner
        self.model_id = model_id
        self.name = name
        if autonac is not None:
            self.autonac = autonac
        if colab_link is not None:
            self.colab_link = colab_link
        self.delivery_state = delivery_state
        self.deep_learning_task = deep_learning_task
        self.source = source
        self.architecture = architecture
        if initial_raw_format is not None:
            self.initial_raw_format = initial_raw_format
        self.initial_model_size = initial_model_size
        self.initial_quantization_level = initial_quantization_level
        self.initial_input_dimensions = initial_input_dimensions
        self.initial_accuracy_metrics = initial_accuracy_metrics
        self.initial_hyper_parameters = initial_hyper_parameters
        self.initial_description = initial_description
        self.initial_kpis = initial_kpis
        self.initial_optimization_state = initial_optimization_state
        self.initial_baseline_model_id = initial_baseline_model_id
        self.initial_primary_hardware = initial_primary_hardware

    @property
    def update_time(self):
        """Gets the update_time of this AutonacArchitecture.  # noqa: E501


        :return: The update_time of this AutonacArchitecture.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AutonacArchitecture.


        :param update_time: The update_time of this AutonacArchitecture.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this AutonacArchitecture.  # noqa: E501


        :return: The creation_time of this AutonacArchitecture.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AutonacArchitecture.


        :param creation_time: The creation_time of this AutonacArchitecture.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this AutonacArchitecture.  # noqa: E501


        :return: The id of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutonacArchitecture.


        :param id: The id of this AutonacArchitecture.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this AutonacArchitecture.  # noqa: E501


        :return: The deleted of this AutonacArchitecture.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AutonacArchitecture.


        :param deleted: The deleted of this AutonacArchitecture.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def workspace_id(self):
        """Gets the workspace_id of this AutonacArchitecture.  # noqa: E501


        :return: The workspace_id of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this AutonacArchitecture.


        :param workspace_id: The workspace_id of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def owner(self):
        """Gets the owner of this AutonacArchitecture.  # noqa: E501


        :return: The owner of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AutonacArchitecture.


        :param owner: The owner of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def model_id(self):
        """Gets the model_id of this AutonacArchitecture.  # noqa: E501


        :return: The model_id of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this AutonacArchitecture.


        :param model_id: The model_id of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this AutonacArchitecture.  # noqa: E501


        :return: The name of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutonacArchitecture.


        :param name: The name of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def autonac(self):
        """Gets the autonac of this AutonacArchitecture.  # noqa: E501


        :return: The autonac of this AutonacArchitecture.  # noqa: E501
        :rtype: bool
        """
        return self._autonac

    @autonac.setter
    def autonac(self, autonac):
        """Sets the autonac of this AutonacArchitecture.


        :param autonac: The autonac of this AutonacArchitecture.  # noqa: E501
        :type: bool
        """

        self._autonac = autonac

    @property
    def colab_link(self):
        """Gets the colab_link of this AutonacArchitecture.  # noqa: E501


        :return: The colab_link of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._colab_link

    @colab_link.setter
    def colab_link(self, colab_link):
        """Sets the colab_link of this AutonacArchitecture.


        :param colab_link: The colab_link of this AutonacArchitecture.  # noqa: E501
        :type: str
        """

        self._colab_link = colab_link

    @property
    def delivery_state(self):
        """Gets the delivery_state of this AutonacArchitecture.  # noqa: E501


        :return: The delivery_state of this AutonacArchitecture.  # noqa: E501
        :rtype: AutonacDeliveryState
        """
        return self._delivery_state

    @delivery_state.setter
    def delivery_state(self, delivery_state):
        """Sets the delivery_state of this AutonacArchitecture.


        :param delivery_state: The delivery_state of this AutonacArchitecture.  # noqa: E501
        :type: AutonacDeliveryState
        """
        if self.local_vars_configuration.client_side_validation and delivery_state is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_state`, must not be `None`")  # noqa: E501

        self._delivery_state = delivery_state

    @property
    def deep_learning_task(self):
        """Gets the deep_learning_task of this AutonacArchitecture.  # noqa: E501


        :return: The deep_learning_task of this AutonacArchitecture.  # noqa: E501
        :rtype: DeepLearningTask
        """
        return self._deep_learning_task

    @deep_learning_task.setter
    def deep_learning_task(self, deep_learning_task):
        """Sets the deep_learning_task of this AutonacArchitecture.


        :param deep_learning_task: The deep_learning_task of this AutonacArchitecture.  # noqa: E501
        :type: DeepLearningTask
        """
        if self.local_vars_configuration.client_side_validation and deep_learning_task is None:  # noqa: E501
            raise ValueError("Invalid value for `deep_learning_task`, must not be `None`")  # noqa: E501

        self._deep_learning_task = deep_learning_task

    @property
    def source(self):
        """Gets the source of this AutonacArchitecture.  # noqa: E501


        :return: The source of this AutonacArchitecture.  # noqa: E501
        :rtype: AutonacSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AutonacArchitecture.


        :param source: The source of this AutonacArchitecture.  # noqa: E501
        :type: AutonacSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def architecture(self):
        """Gets the architecture of this AutonacArchitecture.  # noqa: E501


        :return: The architecture of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AutonacArchitecture.


        :param architecture: The architecture of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and architecture is None:  # noqa: E501
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501

        self._architecture = architecture

    @property
    def initial_raw_format(self):
        """Gets the initial_raw_format of this AutonacArchitecture.  # noqa: E501


        :return: The initial_raw_format of this AutonacArchitecture.  # noqa: E501
        :rtype: bool
        """
        return self._initial_raw_format

    @initial_raw_format.setter
    def initial_raw_format(self, initial_raw_format):
        """Sets the initial_raw_format of this AutonacArchitecture.


        :param initial_raw_format: The initial_raw_format of this AutonacArchitecture.  # noqa: E501
        :type: bool
        """

        self._initial_raw_format = initial_raw_format

    @property
    def initial_model_size(self):
        """Gets the initial_model_size of this AutonacArchitecture.  # noqa: E501


        :return: The initial_model_size of this AutonacArchitecture.  # noqa: E501
        :rtype: float
        """
        return self._initial_model_size

    @initial_model_size.setter
    def initial_model_size(self, initial_model_size):
        """Sets the initial_model_size of this AutonacArchitecture.


        :param initial_model_size: The initial_model_size of this AutonacArchitecture.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and initial_model_size is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_model_size`, must not be `None`")  # noqa: E501

        self._initial_model_size = initial_model_size

    @property
    def initial_quantization_level(self):
        """Gets the initial_quantization_level of this AutonacArchitecture.  # noqa: E501


        :return: The initial_quantization_level of this AutonacArchitecture.  # noqa: E501
        :rtype: QuantizationLevel
        """
        return self._initial_quantization_level

    @initial_quantization_level.setter
    def initial_quantization_level(self, initial_quantization_level):
        """Sets the initial_quantization_level of this AutonacArchitecture.


        :param initial_quantization_level: The initial_quantization_level of this AutonacArchitecture.  # noqa: E501
        :type: QuantizationLevel
        """
        if self.local_vars_configuration.client_side_validation and initial_quantization_level is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_quantization_level`, must not be `None`")  # noqa: E501

        self._initial_quantization_level = initial_quantization_level

    @property
    def initial_input_dimensions(self):
        """Gets the initial_input_dimensions of this AutonacArchitecture.  # noqa: E501


        :return: The initial_input_dimensions of this AutonacArchitecture.  # noqa: E501
        :rtype: list[object]
        """
        return self._initial_input_dimensions

    @initial_input_dimensions.setter
    def initial_input_dimensions(self, initial_input_dimensions):
        """Sets the initial_input_dimensions of this AutonacArchitecture.


        :param initial_input_dimensions: The initial_input_dimensions of this AutonacArchitecture.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and initial_input_dimensions is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_input_dimensions`, must not be `None`")  # noqa: E501

        self._initial_input_dimensions = initial_input_dimensions

    @property
    def initial_accuracy_metrics(self):
        """Gets the initial_accuracy_metrics of this AutonacArchitecture.  # noqa: E501


        :return: The initial_accuracy_metrics of this AutonacArchitecture.  # noqa: E501
        :rtype: list[AccuracyMetric]
        """
        return self._initial_accuracy_metrics

    @initial_accuracy_metrics.setter
    def initial_accuracy_metrics(self, initial_accuracy_metrics):
        """Sets the initial_accuracy_metrics of this AutonacArchitecture.


        :param initial_accuracy_metrics: The initial_accuracy_metrics of this AutonacArchitecture.  # noqa: E501
        :type: list[AccuracyMetric]
        """
        if self.local_vars_configuration.client_side_validation and initial_accuracy_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_accuracy_metrics`, must not be `None`")  # noqa: E501

        self._initial_accuracy_metrics = initial_accuracy_metrics

    @property
    def initial_hyper_parameters(self):
        """Gets the initial_hyper_parameters of this AutonacArchitecture.  # noqa: E501


        :return: The initial_hyper_parameters of this AutonacArchitecture.  # noqa: E501
        :rtype: list[HyperParameter]
        """
        return self._initial_hyper_parameters

    @initial_hyper_parameters.setter
    def initial_hyper_parameters(self, initial_hyper_parameters):
        """Sets the initial_hyper_parameters of this AutonacArchitecture.


        :param initial_hyper_parameters: The initial_hyper_parameters of this AutonacArchitecture.  # noqa: E501
        :type: list[HyperParameter]
        """
        if self.local_vars_configuration.client_side_validation and initial_hyper_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_hyper_parameters`, must not be `None`")  # noqa: E501

        self._initial_hyper_parameters = initial_hyper_parameters

    @property
    def initial_description(self):
        """Gets the initial_description of this AutonacArchitecture.  # noqa: E501


        :return: The initial_description of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._initial_description

    @initial_description.setter
    def initial_description(self, initial_description):
        """Sets the initial_description of this AutonacArchitecture.


        :param initial_description: The initial_description of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and initial_description is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_description`, must not be `None`")  # noqa: E501

        self._initial_description = initial_description

    @property
    def initial_kpis(self):
        """Gets the initial_kpis of this AutonacArchitecture.  # noqa: E501


        :return: The initial_kpis of this AutonacArchitecture.  # noqa: E501
        :rtype: list[KPI]
        """
        return self._initial_kpis

    @initial_kpis.setter
    def initial_kpis(self, initial_kpis):
        """Sets the initial_kpis of this AutonacArchitecture.


        :param initial_kpis: The initial_kpis of this AutonacArchitecture.  # noqa: E501
        :type: list[KPI]
        """
        if self.local_vars_configuration.client_side_validation and initial_kpis is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_kpis`, must not be `None`")  # noqa: E501

        self._initial_kpis = initial_kpis

    @property
    def initial_optimization_state(self):
        """Gets the initial_optimization_state of this AutonacArchitecture.  # noqa: E501


        :return: The initial_optimization_state of this AutonacArchitecture.  # noqa: E501
        :rtype: ModelOptimizationState
        """
        return self._initial_optimization_state

    @initial_optimization_state.setter
    def initial_optimization_state(self, initial_optimization_state):
        """Sets the initial_optimization_state of this AutonacArchitecture.


        :param initial_optimization_state: The initial_optimization_state of this AutonacArchitecture.  # noqa: E501
        :type: ModelOptimizationState
        """
        if self.local_vars_configuration.client_side_validation and initial_optimization_state is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_optimization_state`, must not be `None`")  # noqa: E501

        self._initial_optimization_state = initial_optimization_state

    @property
    def initial_baseline_model_id(self):
        """Gets the initial_baseline_model_id of this AutonacArchitecture.  # noqa: E501


        :return: The initial_baseline_model_id of this AutonacArchitecture.  # noqa: E501
        :rtype: str
        """
        return self._initial_baseline_model_id

    @initial_baseline_model_id.setter
    def initial_baseline_model_id(self, initial_baseline_model_id):
        """Sets the initial_baseline_model_id of this AutonacArchitecture.


        :param initial_baseline_model_id: The initial_baseline_model_id of this AutonacArchitecture.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and initial_baseline_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_baseline_model_id`, must not be `None`")  # noqa: E501

        self._initial_baseline_model_id = initial_baseline_model_id

    @property
    def initial_primary_hardware(self):
        """Gets the initial_primary_hardware of this AutonacArchitecture.  # noqa: E501


        :return: The initial_primary_hardware of this AutonacArchitecture.  # noqa: E501
        :rtype: HardwareType
        """
        return self._initial_primary_hardware

    @initial_primary_hardware.setter
    def initial_primary_hardware(self, initial_primary_hardware):
        """Sets the initial_primary_hardware of this AutonacArchitecture.


        :param initial_primary_hardware: The initial_primary_hardware of this AutonacArchitecture.  # noqa: E501
        :type: HardwareType
        """
        if self.local_vars_configuration.client_side_validation and initial_primary_hardware is None:  # noqa: E501
            raise ValueError("Invalid value for `initial_primary_hardware`, must not be `None`")  # noqa: E501

        self._initial_primary_hardware = initial_primary_hardware

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutonacArchitecture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutonacArchitecture):
            return True

        return self.to_dict() != other.to_dict()
