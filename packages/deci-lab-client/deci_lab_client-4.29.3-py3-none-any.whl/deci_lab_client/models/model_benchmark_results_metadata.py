# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class ModelBenchmarkResultsMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hardware_type': 'HardwareType',
        'job_id': 'str',
        'results_list': 'list[ModelBenchmarkResultMetadata]'
    }

    attribute_map = {
        'hardware_type': 'hardwareType',
        'job_id': 'jobId',
        'results_list': 'resultsList'
    }

    def __init__(self, hardware_type=None, job_id=None, results_list=None, local_vars_configuration=None):  # noqa: E501
        """ModelBenchmarkResultsMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hardware_type = None
        self._job_id = None
        self._results_list = None
        self.discriminator = None

        self.hardware_type = hardware_type
        if job_id is not None:
            self.job_id = job_id
        self.results_list = results_list

    @property
    def hardware_type(self):
        """Gets the hardware_type of this ModelBenchmarkResultsMetadata.  # noqa: E501


        :return: The hardware_type of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :rtype: HardwareType
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this ModelBenchmarkResultsMetadata.


        :param hardware_type: The hardware_type of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :type: HardwareType
        """
        if self.local_vars_configuration.client_side_validation and hardware_type is None:  # noqa: E501
            raise ValueError("Invalid value for `hardware_type`, must not be `None`")  # noqa: E501

        self._hardware_type = hardware_type

    @property
    def job_id(self):
        """Gets the job_id of this ModelBenchmarkResultsMetadata.  # noqa: E501


        :return: The job_id of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ModelBenchmarkResultsMetadata.


        :param job_id: The job_id of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def results_list(self):
        """Gets the results_list of this ModelBenchmarkResultsMetadata.  # noqa: E501


        :return: The results_list of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :rtype: list[ModelBenchmarkResultMetadata]
        """
        return self._results_list

    @results_list.setter
    def results_list(self, results_list):
        """Sets the results_list of this ModelBenchmarkResultsMetadata.


        :param results_list: The results_list of this ModelBenchmarkResultsMetadata.  # noqa: E501
        :type: list[ModelBenchmarkResultMetadata]
        """
        if self.local_vars_configuration.client_side_validation and results_list is None:  # noqa: E501
            raise ValueError("Invalid value for `results_list`, must not be `None`")  # noqa: E501

        self._results_list = results_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelBenchmarkResultsMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelBenchmarkResultsMetadata):
            return True

        return self.to_dict() != other.to_dict()
