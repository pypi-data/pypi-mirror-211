# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class ModelZooResponseMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'model_id': 'str',
        'name': 'str',
        'benchmark': 'dict(str, list[object])',
        'primary_hardware': 'HardwareReturnSchema',
        'primary_batch_size': 'int',
        'accuracy_metrics': 'list[AccuracyMetric]',
        'dl_task': 'DeepLearningTask',
        'quantization_level': 'QuantizationLevel',
        'architecture_family': 'str',
        'model_size': 'float',
        'optimization_state': 'ModelOptimizationState',
        'version': 'str',
        'optimization_start_date': 'datetime',
        'benchmark_start_date': 'datetime',
        'owner': 'BaseUserMetadata',
        'downloads_count': 'int',
        'dataset_name': 'DatasetName',
        'framework': 'FrameworkType',
        'input_dimensions': 'list[object]',
        'dl_task_label': 'DeepLearningTaskLabel'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'model_id': 'modelId',
        'name': 'name',
        'benchmark': 'benchmark',
        'primary_hardware': 'primaryHardware',
        'primary_batch_size': 'primaryBatchSize',
        'accuracy_metrics': 'accuracyMetrics',
        'dl_task': 'dlTask',
        'quantization_level': 'quantizationLevel',
        'architecture_family': 'architectureFamily',
        'model_size': 'modelSize',
        'optimization_state': 'optimizationState',
        'version': 'version',
        'optimization_start_date': 'optimizationStartDate',
        'benchmark_start_date': 'benchmarkStartDate',
        'owner': 'owner',
        'downloads_count': 'downloadsCount',
        'dataset_name': 'datasetName',
        'framework': 'framework',
        'input_dimensions': 'inputDimensions',
        'dl_task_label': 'dlTaskLabel'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, model_id=None, name=None, benchmark=None, primary_hardware=None, primary_batch_size=1, accuracy_metrics=[], dl_task=None, quantization_level=None, architecture_family=None, model_size=0, optimization_state=None, version=None, optimization_start_date=None, benchmark_start_date=None, owner=None, downloads_count=None, dataset_name=None, framework=None, input_dimensions=None, dl_task_label=None, local_vars_configuration=None):  # noqa: E501
        """ModelZooResponseMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._model_id = None
        self._name = None
        self._benchmark = None
        self._primary_hardware = None
        self._primary_batch_size = None
        self._accuracy_metrics = None
        self._dl_task = None
        self._quantization_level = None
        self._architecture_family = None
        self._model_size = None
        self._optimization_state = None
        self._version = None
        self._optimization_start_date = None
        self._benchmark_start_date = None
        self._owner = None
        self._downloads_count = None
        self._dataset_name = None
        self._framework = None
        self._input_dimensions = None
        self._dl_task_label = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.model_id = model_id
        self.name = name
        if benchmark is not None:
            self.benchmark = benchmark
        self.primary_hardware = primary_hardware
        if primary_batch_size is not None:
            self.primary_batch_size = primary_batch_size
        if accuracy_metrics is not None:
            self.accuracy_metrics = accuracy_metrics
        self.dl_task = dl_task
        self.quantization_level = quantization_level
        self.architecture_family = architecture_family
        if model_size is not None:
            self.model_size = model_size
        self.optimization_state = optimization_state
        self.version = version
        if optimization_start_date is not None:
            self.optimization_start_date = optimization_start_date
        if benchmark_start_date is not None:
            self.benchmark_start_date = benchmark_start_date
        self.owner = owner
        self.downloads_count = downloads_count
        self.dataset_name = dataset_name
        self.framework = framework
        self.input_dimensions = input_dimensions
        self.dl_task_label = dl_task_label

    @property
    def update_time(self):
        """Gets the update_time of this ModelZooResponseMetadata.  # noqa: E501


        :return: The update_time of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ModelZooResponseMetadata.


        :param update_time: The update_time of this ModelZooResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this ModelZooResponseMetadata.  # noqa: E501


        :return: The creation_time of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ModelZooResponseMetadata.


        :param creation_time: The creation_time of this ModelZooResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this ModelZooResponseMetadata.  # noqa: E501


        :return: The id of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelZooResponseMetadata.


        :param id: The id of this ModelZooResponseMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this ModelZooResponseMetadata.  # noqa: E501


        :return: The deleted of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ModelZooResponseMetadata.


        :param deleted: The deleted of this ModelZooResponseMetadata.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def model_id(self):
        """Gets the model_id of this ModelZooResponseMetadata.  # noqa: E501


        :return: The model_id of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelZooResponseMetadata.


        :param model_id: The model_id of this ModelZooResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this ModelZooResponseMetadata.  # noqa: E501


        :return: The name of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelZooResponseMetadata.


        :param name: The name of this ModelZooResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def benchmark(self):
        """Gets the benchmark of this ModelZooResponseMetadata.  # noqa: E501


        :return: The benchmark of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: dict(str, list[object])
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this ModelZooResponseMetadata.


        :param benchmark: The benchmark of this ModelZooResponseMetadata.  # noqa: E501
        :type: dict(str, list[object])
        """

        self._benchmark = benchmark

    @property
    def primary_hardware(self):
        """Gets the primary_hardware of this ModelZooResponseMetadata.  # noqa: E501


        :return: The primary_hardware of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: HardwareReturnSchema
        """
        return self._primary_hardware

    @primary_hardware.setter
    def primary_hardware(self, primary_hardware):
        """Sets the primary_hardware of this ModelZooResponseMetadata.


        :param primary_hardware: The primary_hardware of this ModelZooResponseMetadata.  # noqa: E501
        :type: HardwareReturnSchema
        """
        if self.local_vars_configuration.client_side_validation and primary_hardware is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_hardware`, must not be `None`")  # noqa: E501

        self._primary_hardware = primary_hardware

    @property
    def primary_batch_size(self):
        """Gets the primary_batch_size of this ModelZooResponseMetadata.  # noqa: E501


        :return: The primary_batch_size of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: int
        """
        return self._primary_batch_size

    @primary_batch_size.setter
    def primary_batch_size(self, primary_batch_size):
        """Sets the primary_batch_size of this ModelZooResponseMetadata.


        :param primary_batch_size: The primary_batch_size of this ModelZooResponseMetadata.  # noqa: E501
        :type: int
        """

        self._primary_batch_size = primary_batch_size

    @property
    def accuracy_metrics(self):
        """Gets the accuracy_metrics of this ModelZooResponseMetadata.  # noqa: E501


        :return: The accuracy_metrics of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: list[AccuracyMetric]
        """
        return self._accuracy_metrics

    @accuracy_metrics.setter
    def accuracy_metrics(self, accuracy_metrics):
        """Sets the accuracy_metrics of this ModelZooResponseMetadata.


        :param accuracy_metrics: The accuracy_metrics of this ModelZooResponseMetadata.  # noqa: E501
        :type: list[AccuracyMetric]
        """

        self._accuracy_metrics = accuracy_metrics

    @property
    def dl_task(self):
        """Gets the dl_task of this ModelZooResponseMetadata.  # noqa: E501


        :return: The dl_task of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: DeepLearningTask
        """
        return self._dl_task

    @dl_task.setter
    def dl_task(self, dl_task):
        """Sets the dl_task of this ModelZooResponseMetadata.


        :param dl_task: The dl_task of this ModelZooResponseMetadata.  # noqa: E501
        :type: DeepLearningTask
        """
        if self.local_vars_configuration.client_side_validation and dl_task is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task`, must not be `None`")  # noqa: E501

        self._dl_task = dl_task

    @property
    def quantization_level(self):
        """Gets the quantization_level of this ModelZooResponseMetadata.  # noqa: E501


        :return: The quantization_level of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: QuantizationLevel
        """
        return self._quantization_level

    @quantization_level.setter
    def quantization_level(self, quantization_level):
        """Sets the quantization_level of this ModelZooResponseMetadata.


        :param quantization_level: The quantization_level of this ModelZooResponseMetadata.  # noqa: E501
        :type: QuantizationLevel
        """
        if self.local_vars_configuration.client_side_validation and quantization_level is None:  # noqa: E501
            raise ValueError("Invalid value for `quantization_level`, must not be `None`")  # noqa: E501

        self._quantization_level = quantization_level

    @property
    def architecture_family(self):
        """Gets the architecture_family of this ModelZooResponseMetadata.  # noqa: E501


        :return: The architecture_family of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._architecture_family

    @architecture_family.setter
    def architecture_family(self, architecture_family):
        """Sets the architecture_family of this ModelZooResponseMetadata.


        :param architecture_family: The architecture_family of this ModelZooResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and architecture_family is None:  # noqa: E501
            raise ValueError("Invalid value for `architecture_family`, must not be `None`")  # noqa: E501

        self._architecture_family = architecture_family

    @property
    def model_size(self):
        """Gets the model_size of this ModelZooResponseMetadata.  # noqa: E501


        :return: The model_size of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: float
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this ModelZooResponseMetadata.


        :param model_size: The model_size of this ModelZooResponseMetadata.  # noqa: E501
        :type: float
        """

        self._model_size = model_size

    @property
    def optimization_state(self):
        """Gets the optimization_state of this ModelZooResponseMetadata.  # noqa: E501


        :return: The optimization_state of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: ModelOptimizationState
        """
        return self._optimization_state

    @optimization_state.setter
    def optimization_state(self, optimization_state):
        """Sets the optimization_state of this ModelZooResponseMetadata.


        :param optimization_state: The optimization_state of this ModelZooResponseMetadata.  # noqa: E501
        :type: ModelOptimizationState
        """
        if self.local_vars_configuration.client_side_validation and optimization_state is None:  # noqa: E501
            raise ValueError("Invalid value for `optimization_state`, must not be `None`")  # noqa: E501

        self._optimization_state = optimization_state

    @property
    def version(self):
        """Gets the version of this ModelZooResponseMetadata.  # noqa: E501


        :return: The version of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelZooResponseMetadata.


        :param version: The version of this ModelZooResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def optimization_start_date(self):
        """Gets the optimization_start_date of this ModelZooResponseMetadata.  # noqa: E501


        :return: The optimization_start_date of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._optimization_start_date

    @optimization_start_date.setter
    def optimization_start_date(self, optimization_start_date):
        """Sets the optimization_start_date of this ModelZooResponseMetadata.


        :param optimization_start_date: The optimization_start_date of this ModelZooResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._optimization_start_date = optimization_start_date

    @property
    def benchmark_start_date(self):
        """Gets the benchmark_start_date of this ModelZooResponseMetadata.  # noqa: E501


        :return: The benchmark_start_date of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._benchmark_start_date

    @benchmark_start_date.setter
    def benchmark_start_date(self, benchmark_start_date):
        """Sets the benchmark_start_date of this ModelZooResponseMetadata.


        :param benchmark_start_date: The benchmark_start_date of this ModelZooResponseMetadata.  # noqa: E501
        :type: datetime
        """

        self._benchmark_start_date = benchmark_start_date

    @property
    def owner(self):
        """Gets the owner of this ModelZooResponseMetadata.  # noqa: E501


        :return: The owner of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: BaseUserMetadata
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ModelZooResponseMetadata.


        :param owner: The owner of this ModelZooResponseMetadata.  # noqa: E501
        :type: BaseUserMetadata
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def downloads_count(self):
        """Gets the downloads_count of this ModelZooResponseMetadata.  # noqa: E501


        :return: The downloads_count of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: int
        """
        return self._downloads_count

    @downloads_count.setter
    def downloads_count(self, downloads_count):
        """Sets the downloads_count of this ModelZooResponseMetadata.


        :param downloads_count: The downloads_count of this ModelZooResponseMetadata.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and downloads_count is None:  # noqa: E501
            raise ValueError("Invalid value for `downloads_count`, must not be `None`")  # noqa: E501

        self._downloads_count = downloads_count

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ModelZooResponseMetadata.  # noqa: E501


        :return: The dataset_name of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: DatasetName
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ModelZooResponseMetadata.


        :param dataset_name: The dataset_name of this ModelZooResponseMetadata.  # noqa: E501
        :type: DatasetName
        """
        if self.local_vars_configuration.client_side_validation and dataset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    @property
    def framework(self):
        """Gets the framework of this ModelZooResponseMetadata.  # noqa: E501


        :return: The framework of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: FrameworkType
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this ModelZooResponseMetadata.


        :param framework: The framework of this ModelZooResponseMetadata.  # noqa: E501
        :type: FrameworkType
        """
        if self.local_vars_configuration.client_side_validation and framework is None:  # noqa: E501
            raise ValueError("Invalid value for `framework`, must not be `None`")  # noqa: E501

        self._framework = framework

    @property
    def input_dimensions(self):
        """Gets the input_dimensions of this ModelZooResponseMetadata.  # noqa: E501


        :return: The input_dimensions of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: list[object]
        """
        return self._input_dimensions

    @input_dimensions.setter
    def input_dimensions(self, input_dimensions):
        """Sets the input_dimensions of this ModelZooResponseMetadata.


        :param input_dimensions: The input_dimensions of this ModelZooResponseMetadata.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and input_dimensions is None:  # noqa: E501
            raise ValueError("Invalid value for `input_dimensions`, must not be `None`")  # noqa: E501

        self._input_dimensions = input_dimensions

    @property
    def dl_task_label(self):
        """Gets the dl_task_label of this ModelZooResponseMetadata.  # noqa: E501


        :return: The dl_task_label of this ModelZooResponseMetadata.  # noqa: E501
        :rtype: DeepLearningTaskLabel
        """
        return self._dl_task_label

    @dl_task_label.setter
    def dl_task_label(self, dl_task_label):
        """Sets the dl_task_label of this ModelZooResponseMetadata.


        :param dl_task_label: The dl_task_label of this ModelZooResponseMetadata.  # noqa: E501
        :type: DeepLearningTaskLabel
        """
        if self.local_vars_configuration.client_side_validation and dl_task_label is None:  # noqa: E501
            raise ValueError("Invalid value for `dl_task_label`, must not be `None`")  # noqa: E501

        self._dl_task_label = dl_task_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelZooResponseMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelZooResponseMetadata):
            return True

        return self.to_dict() != other.to_dict()
