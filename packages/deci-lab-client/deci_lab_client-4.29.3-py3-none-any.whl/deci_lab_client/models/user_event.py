# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class UserEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'user_id': 'str',
        'type': 'UserEventType',
        'value': 'object',
        'completed_at': 'datetime',
        'source': 'UserEventSource'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'user_id': 'userId',
        'type': 'type',
        'value': 'value',
        'completed_at': 'completedAt',
        'source': 'source'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, user_id=None, type=None, value=None, completed_at=None, source=None, local_vars_configuration=None):  # noqa: E501
        """UserEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._user_id = None
        self._type = None
        self._value = None
        self._completed_at = None
        self._source = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.user_id = user_id
        self.type = type
        if value is not None:
            self.value = value
        if completed_at is not None:
            self.completed_at = completed_at
        self.source = source

    @property
    def update_time(self):
        """Gets the update_time of this UserEvent.  # noqa: E501


        :return: The update_time of this UserEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UserEvent.


        :param update_time: The update_time of this UserEvent.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this UserEvent.  # noqa: E501


        :return: The creation_time of this UserEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this UserEvent.


        :param creation_time: The creation_time of this UserEvent.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this UserEvent.  # noqa: E501


        :return: The id of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserEvent.


        :param id: The id of this UserEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this UserEvent.  # noqa: E501


        :return: The deleted of this UserEvent.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UserEvent.


        :param deleted: The deleted of this UserEvent.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def user_id(self):
        """Gets the user_id of this UserEvent.  # noqa: E501


        :return: The user_id of this UserEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserEvent.


        :param user_id: The user_id of this UserEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def type(self):
        """Gets the type of this UserEvent.  # noqa: E501


        :return: The type of this UserEvent.  # noqa: E501
        :rtype: UserEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserEvent.


        :param type: The type of this UserEvent.  # noqa: E501
        :type: UserEventType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self):
        """Gets the value of this UserEvent.  # noqa: E501


        :return: The value of this UserEvent.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserEvent.


        :param value: The value of this UserEvent.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def completed_at(self):
        """Gets the completed_at of this UserEvent.  # noqa: E501


        :return: The completed_at of this UserEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this UserEvent.


        :param completed_at: The completed_at of this UserEvent.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def source(self):
        """Gets the source of this UserEvent.  # noqa: E501


        :return: The source of this UserEvent.  # noqa: E501
        :rtype: UserEventSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UserEvent.


        :param source: The source of this UserEvent.  # noqa: E501
        :type: UserEventSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserEvent):
            return True

        return self.to_dict() != other.to_dict()
