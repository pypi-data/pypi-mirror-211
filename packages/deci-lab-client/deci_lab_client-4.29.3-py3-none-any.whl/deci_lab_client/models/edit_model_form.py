# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class EditModelForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'dl_task': 'DeepLearningTask',
        'primary_batch_size': 'BatchSize',
        'primary_hardware': 'HardwareType',
        'accuracy_metrics': 'list[AccuracyMetric]',
        'name': 'str',
        'owner': 'str',
        'input_dimensions': 'list[object]',
        'channel_first': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'dl_task': 'dlTask',
        'primary_batch_size': 'primaryBatchSize',
        'primary_hardware': 'primaryHardware',
        'accuracy_metrics': 'accuracyMetrics',
        'name': 'name',
        'owner': 'owner',
        'input_dimensions': 'inputDimensions',
        'channel_first': 'channelFirst'
    }

    def __init__(self, description=None, dl_task=None, primary_batch_size=None, primary_hardware=None, accuracy_metrics=None, name=None, owner=None, input_dimensions=None, channel_first=None, local_vars_configuration=None):  # noqa: E501
        """EditModelForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._dl_task = None
        self._primary_batch_size = None
        self._primary_hardware = None
        self._accuracy_metrics = None
        self._name = None
        self._owner = None
        self._input_dimensions = None
        self._channel_first = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if dl_task is not None:
            self.dl_task = dl_task
        if primary_batch_size is not None:
            self.primary_batch_size = primary_batch_size
        if primary_hardware is not None:
            self.primary_hardware = primary_hardware
        if accuracy_metrics is not None:
            self.accuracy_metrics = accuracy_metrics
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if input_dimensions is not None:
            self.input_dimensions = input_dimensions
        if channel_first is not None:
            self.channel_first = channel_first

    @property
    def description(self):
        """Gets the description of this EditModelForm.  # noqa: E501


        :return: The description of this EditModelForm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditModelForm.


        :param description: The description of this EditModelForm.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dl_task(self):
        """Gets the dl_task of this EditModelForm.  # noqa: E501


        :return: The dl_task of this EditModelForm.  # noqa: E501
        :rtype: DeepLearningTask
        """
        return self._dl_task

    @dl_task.setter
    def dl_task(self, dl_task):
        """Sets the dl_task of this EditModelForm.


        :param dl_task: The dl_task of this EditModelForm.  # noqa: E501
        :type: DeepLearningTask
        """

        self._dl_task = dl_task

    @property
    def primary_batch_size(self):
        """Gets the primary_batch_size of this EditModelForm.  # noqa: E501


        :return: The primary_batch_size of this EditModelForm.  # noqa: E501
        :rtype: BatchSize
        """
        return self._primary_batch_size

    @primary_batch_size.setter
    def primary_batch_size(self, primary_batch_size):
        """Sets the primary_batch_size of this EditModelForm.


        :param primary_batch_size: The primary_batch_size of this EditModelForm.  # noqa: E501
        :type: BatchSize
        """

        self._primary_batch_size = primary_batch_size

    @property
    def primary_hardware(self):
        """Gets the primary_hardware of this EditModelForm.  # noqa: E501


        :return: The primary_hardware of this EditModelForm.  # noqa: E501
        :rtype: HardwareType
        """
        return self._primary_hardware

    @primary_hardware.setter
    def primary_hardware(self, primary_hardware):
        """Sets the primary_hardware of this EditModelForm.


        :param primary_hardware: The primary_hardware of this EditModelForm.  # noqa: E501
        :type: HardwareType
        """

        self._primary_hardware = primary_hardware

    @property
    def accuracy_metrics(self):
        """Gets the accuracy_metrics of this EditModelForm.  # noqa: E501


        :return: The accuracy_metrics of this EditModelForm.  # noqa: E501
        :rtype: list[AccuracyMetric]
        """
        return self._accuracy_metrics

    @accuracy_metrics.setter
    def accuracy_metrics(self, accuracy_metrics):
        """Sets the accuracy_metrics of this EditModelForm.


        :param accuracy_metrics: The accuracy_metrics of this EditModelForm.  # noqa: E501
        :type: list[AccuracyMetric]
        """

        self._accuracy_metrics = accuracy_metrics

    @property
    def name(self):
        """Gets the name of this EditModelForm.  # noqa: E501


        :return: The name of this EditModelForm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditModelForm.


        :param name: The name of this EditModelForm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this EditModelForm.  # noqa: E501


        :return: The owner of this EditModelForm.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EditModelForm.


        :param owner: The owner of this EditModelForm.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def input_dimensions(self):
        """Gets the input_dimensions of this EditModelForm.  # noqa: E501


        :return: The input_dimensions of this EditModelForm.  # noqa: E501
        :rtype: list[object]
        """
        return self._input_dimensions

    @input_dimensions.setter
    def input_dimensions(self, input_dimensions):
        """Sets the input_dimensions of this EditModelForm.


        :param input_dimensions: The input_dimensions of this EditModelForm.  # noqa: E501
        :type: list[object]
        """

        self._input_dimensions = input_dimensions

    @property
    def channel_first(self):
        """Gets the channel_first of this EditModelForm.  # noqa: E501


        :return: The channel_first of this EditModelForm.  # noqa: E501
        :rtype: bool
        """
        return self._channel_first

    @channel_first.setter
    def channel_first(self, channel_first):
        """Sets the channel_first of this EditModelForm.


        :param channel_first: The channel_first of this EditModelForm.  # noqa: E501
        :type: bool
        """

        self._channel_first = channel_first

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditModelForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditModelForm):
            return True

        return self.to_dict() != other.to_dict()
