# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'user_id': 'str',
        'company_id': 'str',
        'email': 'str',
        'job_title': 'str',
        'state': 'UserState',
        'feature_flags': 'list[UserFeatureFlagMetadata]',
        'deci_role': 'DeciRole',
        'auth_provider': 'str'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'user_id': 'userId',
        'company_id': 'companyId',
        'email': 'email',
        'job_title': 'jobTitle',
        'state': 'state',
        'feature_flags': 'featureFlags',
        'deci_role': 'deciRole',
        'auth_provider': 'authProvider'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, first_name=None, last_name=None, user_id=None, company_id=None, email=None, job_title=None, state=None, feature_flags=[], deci_role=None, auth_provider=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._first_name = None
        self._last_name = None
        self._user_id = None
        self._company_id = None
        self._email = None
        self._job_title = None
        self._state = None
        self._feature_flags = None
        self._deci_role = None
        self._auth_provider = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.user_id = user_id
        if company_id is not None:
            self.company_id = company_id
        self.email = email
        if job_title is not None:
            self.job_title = job_title
        self.state = state
        if feature_flags is not None:
            self.feature_flags = feature_flags
        if deci_role is not None:
            self.deci_role = deci_role
        if auth_provider is not None:
            self.auth_provider = auth_provider

    @property
    def update_time(self):
        """Gets the update_time of this User.  # noqa: E501


        :return: The update_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this User.


        :param update_time: The update_time of this User.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this User.  # noqa: E501


        :return: The creation_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this User.


        :param creation_time: The creation_time of this User.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this User.  # noqa: E501


        :return: The deleted of this User.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this User.


        :param deleted: The deleted of this User.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501


        :return: The user_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def company_id(self):
        """Gets the company_id of this User.  # noqa: E501


        :return: The company_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this User.


        :param company_id: The company_id of this User.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def job_title(self):
        """Gets the job_title of this User.  # noqa: E501


        :return: The job_title of this User.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this User.


        :param job_title: The job_title of this User.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501


        :return: The state of this User.  # noqa: E501
        :rtype: UserState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.


        :param state: The state of this User.  # noqa: E501
        :type: UserState
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def feature_flags(self):
        """Gets the feature_flags of this User.  # noqa: E501


        :return: The feature_flags of this User.  # noqa: E501
        :rtype: list[UserFeatureFlagMetadata]
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this User.


        :param feature_flags: The feature_flags of this User.  # noqa: E501
        :type: list[UserFeatureFlagMetadata]
        """

        self._feature_flags = feature_flags

    @property
    def deci_role(self):
        """Gets the deci_role of this User.  # noqa: E501


        :return: The deci_role of this User.  # noqa: E501
        :rtype: DeciRole
        """
        return self._deci_role

    @deci_role.setter
    def deci_role(self, deci_role):
        """Sets the deci_role of this User.


        :param deci_role: The deci_role of this User.  # noqa: E501
        :type: DeciRole
        """

        self._deci_role = deci_role

    @property
    def auth_provider(self):
        """Gets the auth_provider of this User.  # noqa: E501


        :return: The auth_provider of this User.  # noqa: E501
        :rtype: str
        """
        return self._auth_provider

    @auth_provider.setter
    def auth_provider(self, auth_provider):
        """Sets the auth_provider of this User.


        :param auth_provider: The auth_provider of this User.  # noqa: E501
        :type: str
        """

        self._auth_provider = auth_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
