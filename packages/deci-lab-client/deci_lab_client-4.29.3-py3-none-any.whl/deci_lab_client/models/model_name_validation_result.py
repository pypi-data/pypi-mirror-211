# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class ModelNameValidationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unique_to_workspace': 'bool',
        'unique_invalid_characters': 'list[str]'
    }

    attribute_map = {
        'unique_to_workspace': 'uniqueToWorkspace',
        'unique_invalid_characters': 'uniqueInvalidCharacters'
    }

    def __init__(self, unique_to_workspace=None, unique_invalid_characters=None, local_vars_configuration=None):  # noqa: E501
        """ModelNameValidationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._unique_to_workspace = None
        self._unique_invalid_characters = None
        self.discriminator = None

        self.unique_to_workspace = unique_to_workspace
        self.unique_invalid_characters = unique_invalid_characters

    @property
    def unique_to_workspace(self):
        """Gets the unique_to_workspace of this ModelNameValidationResult.  # noqa: E501


        :return: The unique_to_workspace of this ModelNameValidationResult.  # noqa: E501
        :rtype: bool
        """
        return self._unique_to_workspace

    @unique_to_workspace.setter
    def unique_to_workspace(self, unique_to_workspace):
        """Sets the unique_to_workspace of this ModelNameValidationResult.


        :param unique_to_workspace: The unique_to_workspace of this ModelNameValidationResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and unique_to_workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `unique_to_workspace`, must not be `None`")  # noqa: E501

        self._unique_to_workspace = unique_to_workspace

    @property
    def unique_invalid_characters(self):
        """Gets the unique_invalid_characters of this ModelNameValidationResult.  # noqa: E501


        :return: The unique_invalid_characters of this ModelNameValidationResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._unique_invalid_characters

    @unique_invalid_characters.setter
    def unique_invalid_characters(self, unique_invalid_characters):
        """Sets the unique_invalid_characters of this ModelNameValidationResult.


        :param unique_invalid_characters: The unique_invalid_characters of this ModelNameValidationResult.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and unique_invalid_characters is None:  # noqa: E501
            raise ValueError("Invalid value for `unique_invalid_characters`, must not be `None`")  # noqa: E501

        self._unique_invalid_characters = unique_invalid_characters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelNameValidationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelNameValidationResult):
            return True

        return self.to_dict() != other.to_dict()
