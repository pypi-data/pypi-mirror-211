# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class EditUserForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'password': 'str',
        'job_title': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'password': 'password',
        'job_title': 'jobTitle'
    }

    def __init__(self, first_name=None, last_name=None, password=None, job_title=None, local_vars_configuration=None):  # noqa: E501
        """EditUserForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._password = None
        self._job_title = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if password is not None:
            self.password = password
        if job_title is not None:
            self.job_title = job_title

    @property
    def first_name(self):
        """Gets the first_name of this EditUserForm.  # noqa: E501

        The first name must contain english characters, numbers or spaces.  # noqa: E501

        :return: The first_name of this EditUserForm.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EditUserForm.

        The first name must contain english characters, numbers or spaces.  # noqa: E501

        :param first_name: The first_name of this EditUserForm.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 64):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) < 2):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EditUserForm.  # noqa: E501

        The last name must contain english characters, numbers or spaces.  # noqa: E501

        :return: The last_name of this EditUserForm.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EditUserForm.

        The last name must contain english characters, numbers or spaces.  # noqa: E501

        :param last_name: The last_name of this EditUserForm.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 64):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) < 2):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this EditUserForm.  # noqa: E501

        The password must contain at least one special character. It must include at least 8 characters, and not more than 64 characters.  # noqa: E501

        :return: The password of this EditUserForm.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EditUserForm.

        The password must contain at least one special character. It must include at least 8 characters, and not more than 64 characters.  # noqa: E501

        :param password: The password of this EditUserForm.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) > 64):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) < 8):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    @property
    def job_title(self):
        """Gets the job_title of this EditUserForm.  # noqa: E501

        The job title must contain only English characters, numbers or spaces.  # noqa: E501

        :return: The job_title of this EditUserForm.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this EditUserForm.

        The job title must contain only English characters, numbers or spaces.  # noqa: E501

        :param job_title: The job_title of this EditUserForm.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                job_title is not None and len(job_title) > 64):
            raise ValueError("Invalid value for `job_title`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                job_title is not None and len(job_title) < 3):
            raise ValueError("Invalid value for `job_title`, length must be greater than or equal to `3`")  # noqa: E501

        self._job_title = job_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditUserForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditUserForm):
            return True

        return self.to_dict() != other.to_dict()
