# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class HardwareTypeLabel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    JETSON_XAVIER_NX_16GB = "Jetson Xavier NX 16GB"
    JETSON_NANO_4GB = "Jetson Nano 4GB"
    JETSON_AGX_XAVIER_32GB = "Jetson AGX Xavier 32GB"
    JETSON_AGX_ORIN_DEVELOPMENT_KIT = "Jetson AGX Orin Development Kit"
    JETSON_ORIN_NX_16GB = "Jetson Orin NX 16GB"
    JETSON_ORIN_NANO_8GB = "Jetson Orin Nano 8GB"
    JETSON_ORIN_NANO_4GB = "Jetson Orin Nano 4GB"
    EPYC_C5A_2XLARGE_ = "EPYC (c5a.2xlarge)"
    AMD_ROME_EPYC_7002_C5A_4XLARGE_ = "AMD Rome EPYC 7002 (c5a.4xlarge)"
    AMD_MILAN_EPYC_7003_M6A_4XLARGE_ = "AMD Milan EPYC 7003 (m6a.4xlarge)"
    CASCADE_LAKE_C5_4XLARGE_ = "Cascade Lake (c5.4xlarge)"
    SKY_LAKE_C5N_4XLARGE_ = "Sky Lake (c5n.4xlarge)"
    BROADWELL_M4_4XLARGE_ = "Broadwell (m4.4xlarge)"
    ICE_LAKE_M6I_4XLARGE_ = "Ice Lake (m6i.4xlarge)"
    K80_P2_XLARGE_ = "K80 (p2.xlarge)"
    V100_P3_2XLARGE_ = "V100 (p3.2xlarge)"
    SKYLAKE_SP_M5_2XLARGE_ = "Skylake-SP (m5.2xlarge)"
    T4_G4DN_2XLARGE_ = "T4 (g4dn.2xlarge)"
    A10G_G5_2XLARGE_ = "A10G (g5.2xlarge)"
    A100_40GB_A2_HIGHGPU_1G_ = "A100 40GB (a2-highgpu-1g)"
    A100_80GB_A2_ULTRAGPU_1G_ = "A100 80GB (a2-ultragpu-1g)"
    CASCADE_LAKE_N2_STANDARD_4_ = "Cascade Lake (n2-standard-4)"
    INTEL_NUC_TIGER_LAKE = "Intel NUC Tiger Lake"
    NXP_I_MX_8M_MINI = "NXP i.MX 8M mini"
    C5_2XLARGE = "c5.2xlarge"
    HAILO_8 = "Hailo-8"
    AMBARELLA = "Ambarella"
    APPLE_IPHONE_A11 = "Apple iPhone A11"
    APPLE_IPHONE_A12 = "Apple iPhone A12"
    APPLE_IPHONE_A14 = "Apple iPhone A14"
    APPLE_IPHONE_A15 = "Apple iPhone A15"
    SNAPDRAGON_845 = "Snapdragon 845"
    SNAPDRAGON_855 = "Snapdragon 855"
    SNAPDRAGON_888 = "Snapdragon 888"
    SNAPDRAGON_8_GEN_1 = "Snapdragon 8 Gen 1"
    EXYNOS_9810 = "Exynos 9810"
    EXYNOS_9820 = "Exynos 9820"
    EXYNOS_990 = "Exynos 990"
    EXYNOS_2200 = "Exynos 2200"

    allowable_values = [JETSON_XAVIER_NX_16GB, JETSON_NANO_4GB, JETSON_AGX_XAVIER_32GB, JETSON_AGX_ORIN_DEVELOPMENT_KIT, JETSON_ORIN_NX_16GB, JETSON_ORIN_NANO_8GB, JETSON_ORIN_NANO_4GB, EPYC_C5A_2XLARGE_, AMD_ROME_EPYC_7002_C5A_4XLARGE_, AMD_MILAN_EPYC_7003_M6A_4XLARGE_, CASCADE_LAKE_C5_4XLARGE_, SKY_LAKE_C5N_4XLARGE_, BROADWELL_M4_4XLARGE_, ICE_LAKE_M6I_4XLARGE_, K80_P2_XLARGE_, V100_P3_2XLARGE_, SKYLAKE_SP_M5_2XLARGE_, T4_G4DN_2XLARGE_, A10G_G5_2XLARGE_, A100_40GB_A2_HIGHGPU_1G_, A100_80GB_A2_ULTRAGPU_1G_, CASCADE_LAKE_N2_STANDARD_4_, INTEL_NUC_TIGER_LAKE, NXP_I_MX_8M_MINI, C5_2XLARGE, HAILO_8, AMBARELLA, APPLE_IPHONE_A11, APPLE_IPHONE_A12, APPLE_IPHONE_A14, APPLE_IPHONE_A15, SNAPDRAGON_845, SNAPDRAGON_855, SNAPDRAGON_888, SNAPDRAGON_8_GEN_1, EXYNOS_9810, EXYNOS_9820, EXYNOS_990, EXYNOS_2200]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """HardwareTypeLabel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareTypeLabel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareTypeLabel):
            return True

        return self.to_dict() != other.to_dict()
