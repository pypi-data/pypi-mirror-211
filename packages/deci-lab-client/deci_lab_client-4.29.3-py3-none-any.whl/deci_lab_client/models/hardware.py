# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class Hardware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'name': 'str',
        'label': 'str',
        'machine_model': 'str',
        'group': 'HardwareGroup',
        'image_distribution': 'str',
        'image_repository': 'str',
        'future': 'bool',
        'vendor': 'HardwareVendor',
        'family': 'InferenceHardware',
        'taint': 'str',
        'job_label': 'str',
        'environment': 'HardwareEnvironment',
        'default_batch_size_list': 'list[int]',
        'fake': 'bool',
        'deprecated': 'bool'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'name': 'name',
        'label': 'label',
        'machine_model': 'machineModel',
        'group': 'group',
        'image_distribution': 'imageDistribution',
        'image_repository': 'imageRepository',
        'future': 'future',
        'vendor': 'vendor',
        'family': 'family',
        'taint': 'taint',
        'job_label': 'jobLabel',
        'environment': 'environment',
        'default_batch_size_list': 'defaultBatchSizeList',
        'fake': 'fake',
        'deprecated': 'deprecated'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, name=None, label=None, machine_model=None, group=None, image_distribution=None, image_repository=None, future=False, vendor=None, family=None, taint=None, job_label=None, environment=None, default_batch_size_list=[1,8,16,32,64], fake=False, deprecated=False, local_vars_configuration=None):  # noqa: E501
        """Hardware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._name = None
        self._label = None
        self._machine_model = None
        self._group = None
        self._image_distribution = None
        self._image_repository = None
        self._future = None
        self._vendor = None
        self._family = None
        self._taint = None
        self._job_label = None
        self._environment = None
        self._default_batch_size_list = None
        self._fake = None
        self._deprecated = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.name = name
        self.label = label
        self.machine_model = machine_model
        self.group = group
        if image_distribution is not None:
            self.image_distribution = image_distribution
        if image_repository is not None:
            self.image_repository = image_repository
        if future is not None:
            self.future = future
        self.vendor = vendor
        self.family = family
        self.taint = taint
        self.job_label = job_label
        self.environment = environment
        if default_batch_size_list is not None:
            self.default_batch_size_list = default_batch_size_list
        if fake is not None:
            self.fake = fake
        if deprecated is not None:
            self.deprecated = deprecated

    @property
    def update_time(self):
        """Gets the update_time of this Hardware.  # noqa: E501


        :return: The update_time of this Hardware.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Hardware.


        :param update_time: The update_time of this Hardware.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this Hardware.  # noqa: E501


        :return: The creation_time of this Hardware.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Hardware.


        :param creation_time: The creation_time of this Hardware.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this Hardware.  # noqa: E501


        :return: The id of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hardware.


        :param id: The id of this Hardware.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this Hardware.  # noqa: E501


        :return: The deleted of this Hardware.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Hardware.


        :param deleted: The deleted of this Hardware.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this Hardware.  # noqa: E501


        :return: The name of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hardware.


        :param name: The name of this Hardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this Hardware.  # noqa: E501


        :return: The label of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Hardware.


        :param label: The label of this Hardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def machine_model(self):
        """Gets the machine_model of this Hardware.  # noqa: E501


        :return: The machine_model of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._machine_model

    @machine_model.setter
    def machine_model(self, machine_model):
        """Sets the machine_model of this Hardware.


        :param machine_model: The machine_model of this Hardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and machine_model is None:  # noqa: E501
            raise ValueError("Invalid value for `machine_model`, must not be `None`")  # noqa: E501

        self._machine_model = machine_model

    @property
    def group(self):
        """Gets the group of this Hardware.  # noqa: E501


        :return: The group of this Hardware.  # noqa: E501
        :rtype: HardwareGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Hardware.


        :param group: The group of this Hardware.  # noqa: E501
        :type: HardwareGroup
        """
        if self.local_vars_configuration.client_side_validation and group is None:  # noqa: E501
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def image_distribution(self):
        """Gets the image_distribution of this Hardware.  # noqa: E501


        :return: The image_distribution of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._image_distribution

    @image_distribution.setter
    def image_distribution(self, image_distribution):
        """Sets the image_distribution of this Hardware.


        :param image_distribution: The image_distribution of this Hardware.  # noqa: E501
        :type: str
        """

        self._image_distribution = image_distribution

    @property
    def image_repository(self):
        """Gets the image_repository of this Hardware.  # noqa: E501


        :return: The image_repository of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._image_repository

    @image_repository.setter
    def image_repository(self, image_repository):
        """Sets the image_repository of this Hardware.


        :param image_repository: The image_repository of this Hardware.  # noqa: E501
        :type: str
        """

        self._image_repository = image_repository

    @property
    def future(self):
        """Gets the future of this Hardware.  # noqa: E501


        :return: The future of this Hardware.  # noqa: E501
        :rtype: bool
        """
        return self._future

    @future.setter
    def future(self, future):
        """Sets the future of this Hardware.


        :param future: The future of this Hardware.  # noqa: E501
        :type: bool
        """

        self._future = future

    @property
    def vendor(self):
        """Gets the vendor of this Hardware.  # noqa: E501


        :return: The vendor of this Hardware.  # noqa: E501
        :rtype: HardwareVendor
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Hardware.


        :param vendor: The vendor of this Hardware.  # noqa: E501
        :type: HardwareVendor
        """
        if self.local_vars_configuration.client_side_validation and vendor is None:  # noqa: E501
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def family(self):
        """Gets the family of this Hardware.  # noqa: E501


        :return: The family of this Hardware.  # noqa: E501
        :rtype: InferenceHardware
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Hardware.


        :param family: The family of this Hardware.  # noqa: E501
        :type: InferenceHardware
        """
        if self.local_vars_configuration.client_side_validation and family is None:  # noqa: E501
            raise ValueError("Invalid value for `family`, must not be `None`")  # noqa: E501

        self._family = family

    @property
    def taint(self):
        """Gets the taint of this Hardware.  # noqa: E501


        :return: The taint of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._taint

    @taint.setter
    def taint(self, taint):
        """Sets the taint of this Hardware.


        :param taint: The taint of this Hardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and taint is None:  # noqa: E501
            raise ValueError("Invalid value for `taint`, must not be `None`")  # noqa: E501

        self._taint = taint

    @property
    def job_label(self):
        """Gets the job_label of this Hardware.  # noqa: E501


        :return: The job_label of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._job_label

    @job_label.setter
    def job_label(self, job_label):
        """Sets the job_label of this Hardware.


        :param job_label: The job_label of this Hardware.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_label is None:  # noqa: E501
            raise ValueError("Invalid value for `job_label`, must not be `None`")  # noqa: E501

        self._job_label = job_label

    @property
    def environment(self):
        """Gets the environment of this Hardware.  # noqa: E501


        :return: The environment of this Hardware.  # noqa: E501
        :rtype: HardwareEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Hardware.


        :param environment: The environment of this Hardware.  # noqa: E501
        :type: HardwareEnvironment
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def default_batch_size_list(self):
        """Gets the default_batch_size_list of this Hardware.  # noqa: E501


        :return: The default_batch_size_list of this Hardware.  # noqa: E501
        :rtype: list[int]
        """
        return self._default_batch_size_list

    @default_batch_size_list.setter
    def default_batch_size_list(self, default_batch_size_list):
        """Sets the default_batch_size_list of this Hardware.


        :param default_batch_size_list: The default_batch_size_list of this Hardware.  # noqa: E501
        :type: list[int]
        """

        self._default_batch_size_list = default_batch_size_list

    @property
    def fake(self):
        """Gets the fake of this Hardware.  # noqa: E501


        :return: The fake of this Hardware.  # noqa: E501
        :rtype: bool
        """
        return self._fake

    @fake.setter
    def fake(self, fake):
        """Sets the fake of this Hardware.


        :param fake: The fake of this Hardware.  # noqa: E501
        :type: bool
        """

        self._fake = fake

    @property
    def deprecated(self):
        """Gets the deprecated of this Hardware.  # noqa: E501


        :return: The deprecated of this Hardware.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Hardware.


        :param deprecated: The deprecated of this Hardware.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hardware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Hardware):
            return True

        return self.to_dict() != other.to_dict()
