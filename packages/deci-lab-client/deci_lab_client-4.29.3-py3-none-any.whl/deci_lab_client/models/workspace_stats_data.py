# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class WorkspaceStatsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workspace_id': 'str',
        'baseline_models_count': 'int',
        'autonac_models_count': 'int',
        'in_progress': 'dict(str, int)',
        'completed': 'dict(str, int)'
    }

    attribute_map = {
        'workspace_id': 'workspaceId',
        'baseline_models_count': 'baselineModelsCount',
        'autonac_models_count': 'autonacModelsCount',
        'in_progress': 'inProgress',
        'completed': 'completed'
    }

    def __init__(self, workspace_id=None, baseline_models_count=0, autonac_models_count=0, in_progress=None, completed=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceStatsData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._workspace_id = None
        self._baseline_models_count = None
        self._autonac_models_count = None
        self._in_progress = None
        self._completed = None
        self.discriminator = None

        self.workspace_id = workspace_id
        if baseline_models_count is not None:
            self.baseline_models_count = baseline_models_count
        if autonac_models_count is not None:
            self.autonac_models_count = autonac_models_count
        if in_progress is not None:
            self.in_progress = in_progress
        if completed is not None:
            self.completed = completed

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceStatsData.  # noqa: E501


        :return: The workspace_id of this WorkspaceStatsData.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceStatsData.


        :param workspace_id: The workspace_id of this WorkspaceStatsData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def baseline_models_count(self):
        """Gets the baseline_models_count of this WorkspaceStatsData.  # noqa: E501


        :return: The baseline_models_count of this WorkspaceStatsData.  # noqa: E501
        :rtype: int
        """
        return self._baseline_models_count

    @baseline_models_count.setter
    def baseline_models_count(self, baseline_models_count):
        """Sets the baseline_models_count of this WorkspaceStatsData.


        :param baseline_models_count: The baseline_models_count of this WorkspaceStatsData.  # noqa: E501
        :type: int
        """

        self._baseline_models_count = baseline_models_count

    @property
    def autonac_models_count(self):
        """Gets the autonac_models_count of this WorkspaceStatsData.  # noqa: E501


        :return: The autonac_models_count of this WorkspaceStatsData.  # noqa: E501
        :rtype: int
        """
        return self._autonac_models_count

    @autonac_models_count.setter
    def autonac_models_count(self, autonac_models_count):
        """Sets the autonac_models_count of this WorkspaceStatsData.


        :param autonac_models_count: The autonac_models_count of this WorkspaceStatsData.  # noqa: E501
        :type: int
        """

        self._autonac_models_count = autonac_models_count

    @property
    def in_progress(self):
        """Gets the in_progress of this WorkspaceStatsData.  # noqa: E501


        :return: The in_progress of this WorkspaceStatsData.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this WorkspaceStatsData.


        :param in_progress: The in_progress of this WorkspaceStatsData.  # noqa: E501
        :type: dict(str, int)
        """

        self._in_progress = in_progress

    @property
    def completed(self):
        """Gets the completed of this WorkspaceStatsData.  # noqa: E501


        :return: The completed of this WorkspaceStatsData.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this WorkspaceStatsData.


        :param completed: The completed of this WorkspaceStatsData.  # noqa: E501
        :type: dict(str, int)
        """

        self._completed = completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceStatsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceStatsData):
            return True

        return self.to_dict() != other.to_dict()
