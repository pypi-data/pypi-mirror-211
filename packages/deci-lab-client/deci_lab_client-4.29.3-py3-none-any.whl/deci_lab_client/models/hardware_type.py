# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class HardwareType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    K80 = "K80"
    V100 = "V100"
    T4 = "T4"
    A10G = "A10G"
    A100_80GB_GCP = "A100 80GB GCP"
    A100_40GB_GCP = "A100 40GB GCP"
    EPYC = "EPYC"
    EPYC_7002 = "EPYC 7002"
    EPYC_7003 = "EPYC 7003"
    JETSON_XAVIER = "Jetson Xavier"
    JETSON_NANO = "Jetson Nano"
    JETSON_XAVIER_AGX = "Jetson Xavier AGX"
    JETSON_ORIN = "Jetson Orin"
    JETSON_ORIN_NX = "Jetson Orin NX"
    JETSON_ORIN_NANO = "Jetson Orin Nano"
    JETSON_ORIN_NANO_4GB = "Jetson Orin Nano 4GB"
    CASCADE_LAKE = "Cascade Lake"
    SKYLAKE = "Skylake"
    BROADWELL = "Broadwell"
    ICELAKE = "Icelake"
    INTEL_NUC_TIGER_LAKE = "Intel NUC Tiger Lake"
    SKYLAKE_SP = "Skylake-SP"
    CASCADE_LAKE_GCP = "Cascade Lake GCP"
    NXP_I_MX_8M_MINI = "NXP i.MX 8M mini"
    C5_2XLARGE = "c5.2xlarge"
    HAILO_8 = "Hailo-8"
    AMBARELLA = "Ambarella"
    APPLE_IPHONE_A11 = "Apple iPhone A11"
    APPLE_IPHONE_A12 = "Apple iPhone A12"
    APPLE_IPHONE_A14 = "Apple iPhone A14"
    APPLE_IPHONE_A15 = "Apple iPhone A15"
    SNAPDRAGON_845 = "Snapdragon 845"
    SNAPDRAGON_855 = "Snapdragon 855"
    SNAPDRAGON_888 = "Snapdragon 888"
    SNAPDRAGON_8_GEN_1 = "Snapdragon 8 Gen 1"
    EXYNOS_9810 = "Exynos 9810"
    EXYNOS_9820 = "Exynos 9820"
    EXYNOS_990 = "Exynos 990"
    EXYNOS_2200 = "Exynos 2200"

    allowable_values = [K80, V100, T4, A10G, A100_80GB_GCP, A100_40GB_GCP, EPYC, EPYC_7002, EPYC_7003, JETSON_XAVIER, JETSON_NANO, JETSON_XAVIER_AGX, JETSON_ORIN, JETSON_ORIN_NX, JETSON_ORIN_NANO, JETSON_ORIN_NANO_4GB, CASCADE_LAKE, SKYLAKE, BROADWELL, ICELAKE, INTEL_NUC_TIGER_LAKE, SKYLAKE_SP, CASCADE_LAKE_GCP, NXP_I_MX_8M_MINI, C5_2XLARGE, HAILO_8, AMBARELLA, APPLE_IPHONE_A11, APPLE_IPHONE_A12, APPLE_IPHONE_A14, APPLE_IPHONE_A15, SNAPDRAGON_845, SNAPDRAGON_855, SNAPDRAGON_888, SNAPDRAGON_8_GEN_1, EXYNOS_9810, EXYNOS_9820, EXYNOS_990, EXYNOS_2200]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """HardwareType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareType):
            return True

        return self.to_dict() != other.to_dict()
