# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class WorkspaceBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'update_time': 'datetime',
        'creation_time': 'datetime',
        'id': 'str',
        'deleted': 'bool',
        'name': 'str',
        'license': 'DeciLicenseType',
        'optimized_models_allowed_limit': 'int',
        'autonac_optimizations_quota': 'int'
    }

    attribute_map = {
        'update_time': 'updateTime',
        'creation_time': 'creationTime',
        'id': 'id',
        'deleted': 'deleted',
        'name': 'name',
        'license': 'license',
        'optimized_models_allowed_limit': 'optimizedModelsAllowedLimit',
        'autonac_optimizations_quota': 'autonacOptimizationsQuota'
    }

    def __init__(self, update_time=None, creation_time=None, id=None, deleted=False, name=None, license=None, optimized_models_allowed_limit=100, autonac_optimizations_quota=0, local_vars_configuration=None):  # noqa: E501
        """WorkspaceBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._update_time = None
        self._creation_time = None
        self._id = None
        self._deleted = None
        self._name = None
        self._license = None
        self._optimized_models_allowed_limit = None
        self._autonac_optimizations_quota = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if deleted is not None:
            self.deleted = deleted
        self.name = name
        if license is not None:
            self.license = license
        if optimized_models_allowed_limit is not None:
            self.optimized_models_allowed_limit = optimized_models_allowed_limit
        if autonac_optimizations_quota is not None:
            self.autonac_optimizations_quota = autonac_optimizations_quota

    @property
    def update_time(self):
        """Gets the update_time of this WorkspaceBase.  # noqa: E501


        :return: The update_time of this WorkspaceBase.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this WorkspaceBase.


        :param update_time: The update_time of this WorkspaceBase.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def creation_time(self):
        """Gets the creation_time of this WorkspaceBase.  # noqa: E501


        :return: The creation_time of this WorkspaceBase.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WorkspaceBase.


        :param creation_time: The creation_time of this WorkspaceBase.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this WorkspaceBase.  # noqa: E501


        :return: The id of this WorkspaceBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceBase.


        :param id: The id of this WorkspaceBase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def deleted(self):
        """Gets the deleted of this WorkspaceBase.  # noqa: E501


        :return: The deleted of this WorkspaceBase.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this WorkspaceBase.


        :param deleted: The deleted of this WorkspaceBase.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this WorkspaceBase.  # noqa: E501


        :return: The name of this WorkspaceBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceBase.


        :param name: The name of this WorkspaceBase.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def license(self):
        """Gets the license of this WorkspaceBase.  # noqa: E501


        :return: The license of this WorkspaceBase.  # noqa: E501
        :rtype: DeciLicenseType
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this WorkspaceBase.


        :param license: The license of this WorkspaceBase.  # noqa: E501
        :type: DeciLicenseType
        """

        self._license = license

    @property
    def optimized_models_allowed_limit(self):
        """Gets the optimized_models_allowed_limit of this WorkspaceBase.  # noqa: E501


        :return: The optimized_models_allowed_limit of this WorkspaceBase.  # noqa: E501
        :rtype: int
        """
        return self._optimized_models_allowed_limit

    @optimized_models_allowed_limit.setter
    def optimized_models_allowed_limit(self, optimized_models_allowed_limit):
        """Sets the optimized_models_allowed_limit of this WorkspaceBase.


        :param optimized_models_allowed_limit: The optimized_models_allowed_limit of this WorkspaceBase.  # noqa: E501
        :type: int
        """

        self._optimized_models_allowed_limit = optimized_models_allowed_limit

    @property
    def autonac_optimizations_quota(self):
        """Gets the autonac_optimizations_quota of this WorkspaceBase.  # noqa: E501


        :return: The autonac_optimizations_quota of this WorkspaceBase.  # noqa: E501
        :rtype: int
        """
        return self._autonac_optimizations_quota

    @autonac_optimizations_quota.setter
    def autonac_optimizations_quota(self, autonac_optimizations_quota):
        """Sets the autonac_optimizations_quota of this WorkspaceBase.


        :param autonac_optimizations_quota: The autonac_optimizations_quota of this WorkspaceBase.  # noqa: E501
        :type: int
        """

        self._autonac_optimizations_quota = autonac_optimizations_quota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceBase):
            return True

        return self.to_dict() != other.to_dict()
