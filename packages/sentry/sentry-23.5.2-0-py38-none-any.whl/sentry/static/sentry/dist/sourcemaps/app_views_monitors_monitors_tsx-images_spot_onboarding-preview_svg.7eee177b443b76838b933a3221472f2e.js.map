{"version":3,"file":"chunks/app_views_monitors_monitors_tsx-images_spot_onboarding-preview_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/monitors.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/components/diamondStatus.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/utils/routeAnalytics/useRouteAnalyticsEventNames.tsx","webpack:///./app/views/monitors/components/cronsFeedbackButton.tsx","webpack:///./app/views/monitors/components/monitorBadge.tsx","webpack:///./app/views/monitors/components/row.tsx","webpack:///./app/views/monitors/monitors.tsx","webpack:///./app/views/monitors/types.tsx","webpack:///./app/views/monitors/utils.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {logException} from 'sentry/utils/logging';\nimport {Monitor} from 'sentry/views/monitors/types';\n\nexport async function deleteMonitor(api: Client, orgId: string, monitorSlug: string) {\n  addLoadingMessage(t('Deleting Monitor...'));\n\n  try {\n    await api.requestPromise(`/organizations/${orgId}/monitors/${monitorSlug}/`, {\n      method: 'DELETE',\n    });\n    clearIndicators();\n  } catch {\n    addErrorMessage(t('Unable to remove monitor.'));\n  }\n}\n\nexport async function deleteMonitorEnvironment(\n  api: Client,\n  orgId: string,\n  monitorSlug: string,\n  environment: string\n) {\n  addLoadingMessage(t('Deleting Environment...'));\n\n  try {\n    await api.requestPromise(`/organizations/${orgId}/monitors/${monitorSlug}/`, {\n      method: 'DELETE',\n      query: {\n        environment,\n      },\n    });\n    clearIndicators();\n  } catch {\n    addErrorMessage(t('Unable to remove environment from monitor.'));\n  }\n}\n\nexport async function updateMonitor(\n  api: Client,\n  orgId: string,\n  monitorSlug: string,\n  data: Partial<Monitor>\n) {\n  addLoadingMessage();\n\n  try {\n    const resp = await api.requestPromise(\n      `/organizations/${orgId}/monitors/${monitorSlug}/`,\n      {method: 'PUT', data}\n    );\n    clearIndicators();\n    return resp;\n  } catch (err) {\n    logException(err);\n    addErrorMessage(t('Unable to update monitor.'));\n  }\n\n  return null;\n}\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import styled from '@emotion/styled';\n\nimport {IconDiamond} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\ninterface DiamondStatusProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Color of the diamond\n   */\n  color: ColorOrAlias;\n  /**\n   * Icon component to render inside of the diamond\n   */\n  icon: React.ComponentType<SVGIconProps>;\n}\n\n/**\n * A status indicator that renders a icon within a diamond\n */\nfunction DiamondStatus({color, icon: Icon, ...props}: DiamondStatusProps) {\n  return (\n    <StatusWrapper role=\"presentation\" color={color} {...props}>\n      <DiamondBackground color={color} />\n      <Icon color=\"white\" />\n    </StatusWrapper>\n  );\n}\n\nexport {DiamondStatus};\n\nconst DiamondBackground = styled(IconDiamond)`\n  width: 36px;\n  height: 36px;\n`;\n\nconst StatusWrapper = styled('div')<{color: ColorOrAlias}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: 16px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import {useContext, useEffect} from 'react';\n\nimport {RouteAnalyticsContext} from 'sentry/views/routeAnalyticsContextProvider';\n\n/**\n * This hook provides custom analytics event names for route based analytics.\n * @param eventKey The key used to identify the event\n * @param eventName The English string used as the event name\n */\nexport default function useRouteAnalyticsEventNames(eventKey: string, eventName: string) {\n  const {setEventNames, previousUrl} = useContext(RouteAnalyticsContext);\n  useEffect(() => {\n    setEventNames(eventKey, eventName);\n  }, [setEventNames, eventKey, eventName, previousUrl]);\n}\n","import {FeatureFeedback} from 'sentry/components/featureFeedback';\n\nconst CRONS_FEEDBACK_NAME = 'crons';\n\nfunction CronsFeedbackButton() {\n  return <FeatureFeedback featureName={CRONS_FEEDBACK_NAME} buttonProps={{size: 'sm'}} />;\n}\n\nexport default CronsFeedbackButton;\n","import {DiamondStatus} from 'sentry/components/diamondStatus';\nimport {\n  IconCheckmark,\n  IconExclamation,\n  IconFire,\n  IconPause,\n  IconTimer,\n} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {ObjectStatus} from 'sentry/types';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\nimport {MonitorStatus} from '../types';\n\ninterface MonitorBadgeProps {\n  status: MonitorStatus | ObjectStatus;\n}\n\ninterface StatusData {\n  Icon: React.ComponentType<SVGIconProps>;\n  color: ColorOrAlias;\n}\n\nfunction MonitorBadge({status}: MonitorBadgeProps) {\n  const {Icon, color} = statusMap[status] ?? statusMap.ok;\n\n  return <DiamondStatus icon={Icon} color={color} />;\n}\n\n// TODO(ts): Use satisfies\nconst statusMap: Record<MonitorStatus, StatusData> = {\n  ok: {\n    Icon: IconCheckmark,\n    color: 'successText',\n  },\n  error: {\n    Icon: IconFire,\n    color: 'errorText',\n  },\n  timeout: {\n    Icon: IconFire,\n    color: 'errorText',\n  },\n  missed_checkin: {\n    Icon: IconExclamation,\n    color: 'warningText',\n  },\n  active: {\n    Icon: IconTimer,\n    color: 'subText',\n  },\n  disabled: {\n    Icon: (p: SVGIconProps) => <IconPause {...p} size=\"xs\" />,\n    color: 'subText',\n  },\n};\n\nexport {MonitorBadge};\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {deleteMonitor, deleteMonitorEnvironment} from 'sentry/actionCreators/monitors';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport {DropdownMenu, MenuItemProps} from 'sentry/components/dropdownMenu';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconEllipsis} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {scheduleAsText} from 'sentry/views/monitors/utils';\n\nimport {Monitor, MonitorEnvironment, MonitorStatus} from '../types';\n\nimport {MonitorBadge} from './monitorBadge';\n\ninterface MonitorRowProps {\n  monitor: Monitor;\n  onDelete: (monitorEnv?: MonitorEnvironment) => void;\n  organization: Organization;\n  monitorEnv?: MonitorEnvironment;\n}\n\nfunction MonitorRow({monitor, monitorEnv, organization, onDelete}: MonitorRowProps) {\n  const api = useApi();\n  const lastCheckin = monitorEnv?.lastCheckIn ? (\n    <TimeSince unitStyle=\"regular\" date={monitorEnv.lastCheckIn} />\n  ) : null;\n\n  const deletionMessage = monitorEnv\n    ? tct(\n        'Are you sure you want to permanently delete the \"[envName]\" environment from \"[monitorName]\"?',\n        {monitorName: monitor.name, envName: monitorEnv.name}\n      )\n    : tct('Are you sure you want to permanently delete \"[monitorName]\"?', {\n        monitorName: monitor.name,\n      });\n\n  const actions: MenuItemProps[] = [\n    {\n      key: 'edit',\n      label: t('Edit'),\n      // TODO(davidenwang): Right now we have to pass the environment\n      // through the URL so that when we save the monitor and are\n      // redirected back to the details page it queries the backend\n      // for a monitor environment with check-in data\n      to: normalizeUrl({\n        pathname: `/organizations/${organization.slug}/crons/${monitor.slug}/edit/`,\n        query: {environment: monitorEnv?.name},\n      }),\n    },\n    {\n      key: 'delete',\n      label: t('Delete'),\n      priority: 'danger',\n      onAction: () => {\n        openConfirmModal({\n          onConfirm: async () => {\n            if (monitorEnv) {\n              await deleteMonitorEnvironment(\n                api,\n                organization.slug,\n                monitor.slug,\n                monitorEnv.name\n              );\n            } else {\n              await deleteMonitor(api, organization.slug, monitor.slug);\n            }\n            onDelete(monitorEnv);\n          },\n          header: t('Delete Monitor?'),\n          message: deletionMessage,\n          confirmText: t('Delete Monitor'),\n          priority: 'danger',\n        });\n      },\n    },\n  ];\n\n  const monitorDetailUrl = `/organizations/${organization.slug}/crons/${monitor.slug}/${\n    monitorEnv ? `?environment=${monitorEnv.name}` : ''\n  }`;\n\n  // TODO(davidenwang): Change accordingly when we have ObjectStatus on monitor\n  const monitorStatus =\n    monitor.status !== 'disabled' && monitorEnv ? monitorEnv.status : monitor.status;\n\n  return (\n    <Fragment>\n      <MonitorName>\n        <MonitorBadge status={monitorStatus} />\n        <Link to={monitorDetailUrl}>{monitor.name}</Link>\n      </MonitorName>\n      <MonitorColumn>\n        <TextOverflow>\n          {monitorStatus === 'disabled'\n            ? t('Paused')\n            : monitorStatus === MonitorStatus.ACTIVE || !lastCheckin\n            ? t('Waiting for first check-in')\n            : monitorStatus === MonitorStatus.OK\n            ? tct('Check-in [lastCheckin]', {lastCheckin})\n            : monitorStatus === MonitorStatus.MISSED_CHECKIN\n            ? tct('Missed [lastCheckin]', {lastCheckin})\n            : monitorStatus === MonitorStatus.ERROR\n            ? tct('Failed [lastCheckin]', {lastCheckin})\n            : monitorStatus === MonitorStatus.TIMEOUT\n            ? t('Timed out')\n            : null}\n        </TextOverflow>\n      </MonitorColumn>\n      <MonitorColumn>{scheduleAsText(monitor.config)}</MonitorColumn>\n      <MonitorColumn>\n        {monitorEnv?.nextCheckIn &&\n        monitorEnv.status !== MonitorStatus.DISABLED &&\n        monitorEnv.status !== MonitorStatus.ACTIVE ? (\n          <TimeSince unitStyle=\"regular\" date={monitorEnv.nextCheckIn} />\n        ) : (\n          '\\u2014'\n        )}\n      </MonitorColumn>\n      <MonitorColumn>\n        <IdBadge\n          project={monitor.project}\n          avatarSize={18}\n          avatarProps={{hasTooltip: true, tooltip: monitor.project.slug}}\n        />\n      </MonitorColumn>\n      <MonitorColumn>{monitorEnv?.name ?? '\\u2014'}</MonitorColumn>\n      <ActionsColumn>\n        <DropdownMenu\n          items={actions}\n          position=\"bottom-end\"\n          triggerProps={{\n            'aria-label': t('Actions'),\n            size: 'xs',\n            icon: <IconEllipsis size=\"xs\" />,\n            showChevron: false,\n          }}\n        />\n      </ActionsColumn>\n    </Fragment>\n  );\n}\n\nexport {MonitorRow};\n\nconst MonitorName = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(2)};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst MonitorColumn = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst ActionsColumn = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport onboardingImg from 'sentry-images/spot/onboarding-preview.svg';\n\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {setApiQueryData, useApiQuery, useQueryClient} from 'sentry/utils/queryClient';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport useRouteAnalyticsParams from 'sentry/utils/routeAnalytics/useRouteAnalyticsParams';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useRouter from 'sentry/utils/useRouter';\n\nimport CronsFeedbackButton from './components/cronsFeedbackButton';\nimport {MonitorRow} from './components/row';\nimport {Monitor, MonitorEnvironment} from './types';\n\nfunction NewMonitorButton(props: ButtonProps) {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n\n  return (\n    <Button\n      to={{\n        pathname: `/organizations/${organization.slug}/crons/create/`,\n        query: {project: selection.projects},\n      }}\n      priority=\"primary\"\n      {...props}\n    >\n      {props.children}\n    </Button>\n  );\n}\n\nexport default function Monitors({location}: RouteComponentProps<{}, {}>) {\n  const organization = useOrganization();\n  const router = useRouter();\n  const queryClient = useQueryClient();\n\n  const monitorListQueryKey = [\n    `/organizations/${organization.slug}/monitors/`,\n    {query: {...location.query, includeNew: true}},\n  ] as const;\n  const {\n    data: monitorList,\n    getResponseHeader: monitorListHeaders,\n    isLoading,\n  } = useApiQuery<Monitor[]>(monitorListQueryKey, {\n    staleTime: 0,\n  });\n\n  useRouteAnalyticsEventNames('monitors.page_viewed', 'Monitors: Page Viewed');\n  useRouteAnalyticsParams({empty_state: !monitorList || monitorList.length === 0});\n\n  const monitorListPageLinks = monitorListHeaders?.('Link');\n\n  const handleSearch = (query: string) => {\n    router.push({\n      pathname: location.pathname,\n      query: normalizeDateTimeParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  const renderMonitorRow = (monitor: Monitor, monitorEnv?: MonitorEnvironment) => (\n    <MonitorRow\n      key={`${monitor.slug}-${monitorEnv?.name ?? 'no-env'}`}\n      monitor={monitor}\n      monitorEnv={monitorEnv}\n      onDelete={deletedEnv => {\n        if (deletedEnv) {\n          if (!monitorList) {\n            return;\n          }\n          const deletedEnvMonitor = monitorList.find(m => m.slug === monitor.slug);\n          if (!deletedEnvMonitor) {\n            return;\n          }\n          deletedEnvMonitor.environments = deletedEnvMonitor.environments.filter(\n            e => e.name !== deletedEnv.name\n          );\n          setApiQueryData(queryClient, monitorListQueryKey, monitorList);\n        } else {\n          setApiQueryData(\n            queryClient,\n            monitorListQueryKey,\n            monitorList?.filter(m => m.slug !== monitor.slug)\n          );\n        }\n      }}\n      organization={organization}\n    />\n  );\n\n  return (\n    <SentryDocumentTitle title={`Crons — ${organization.slug}`}>\n      <Layout.Page>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>\n              {t('Cron Monitors')}\n              <PageHeadingQuestionTooltip\n                title={t(\n                  'Scheduled monitors that check in on recurring jobs and tell you if they’re running on schedule, failing, or succeeding.'\n                )}\n                docsUrl=\"https://docs.sentry.io/product/crons/\"\n              />\n              <FeatureBadge type=\"beta\" />\n            </Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <CronsFeedbackButton />\n              <NewMonitorButton size=\"sm\" icon={<IconAdd isCircled size=\"xs\" />}>\n                {t('Add Monitor')}\n              </NewMonitorButton>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <Filters>\n              <PageFilterBar>\n                <ProjectPageFilter resetParamsOnChange={['cursor']} />\n                <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n              </PageFilterBar>\n              <SearchBar\n                query={decodeScalar(qs.parse(location.search)?.query, '')}\n                placeholder={t('Search by name or slug')}\n                onSearch={handleSearch}\n              />\n            </Filters>\n            {isLoading ? (\n              <LoadingIndicator />\n            ) : monitorList?.length ? (\n              <Fragment>\n                <StyledPanelTable\n                  headers={[\n                    t('Monitor Name'),\n                    t('Status'),\n                    t('Schedule'),\n                    t('Next Checkin'),\n                    t('Project'),\n                    t('Environment'),\n                    t('Actions'),\n                  ]}\n                >\n                  {monitorList\n                    ?.map(monitor =>\n                      monitor.environments.length > 0\n                        ? monitor.environments.map(monitorEnv =>\n                            renderMonitorRow(monitor, monitorEnv)\n                          )\n                        : renderMonitorRow(monitor)\n                    )\n                    .flat()}\n                </StyledPanelTable>\n                {monitorListPageLinks && <Pagination pageLinks={monitorListPageLinks} />}\n              </Fragment>\n            ) : (\n              <OnboardingPanel image={<img src={onboardingImg} />}>\n                <h3>{t('Let Sentry monitor your recurring jobs')}</h3>\n                <p>\n                  {t(\n                    \"We'll tell you if your recurring jobs are running on schedule, failing, or succeeding.\"\n                  )}\n                </p>\n                <ButtonList gap={1}>\n                  <NewMonitorButton>{t('Set up first cron monitor')}</NewMonitorButton>\n                  <Button href=\"https://docs.sentry.io/product/crons\" external>\n                    {t('Read docs')}\n                  </Button>\n                </ButtonList>\n              </OnboardingPanel>\n            )}\n          </Layout.Main>\n        </Layout.Body>\n      </Layout.Page>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Filters = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr max-content 1fr max-content max-content max-content max-content;\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {ObjectStatus, Project} from 'sentry/types';\n\nexport enum MonitorType {\n  UNKNOWN = 'unknown',\n  CRON_JOB = 'cron_job',\n}\n\n/**\n * Some old monitor configuratiosn do NOT have a schedule_type\n *\n * TODO: This should be removed once we've cleaned up our old data and can\n *       verify we don't have any config objects missing schedule_type\n */\ntype LegacyDefaultSchedule = undefined;\n\nexport enum ScheduleType {\n  CRONTAB = 'crontab',\n  INTERVAL = 'interval',\n}\n\nexport enum MonitorStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  DISABLED = 'disabled',\n  ACTIVE = 'active',\n  MISSED_CHECKIN = 'missed_checkin',\n  TIMEOUT = 'timeout',\n}\n\nexport enum CheckInStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  IN_PROGRESS = 'in_progress',\n  MISSED = 'missed',\n  TIMEOUT = 'timeout',\n}\n\ninterface BaseConfig {\n  checkin_margin: number;\n  max_runtime: number;\n  timezone: string;\n  alert_rule_id?: number;\n}\n\n/**\n * The configuration object used when the schedule is a CRONTAB\n */\nexport interface CrontabConfig extends BaseConfig {\n  /**\n   * The crontab schedule\n   */\n  schedule: string;\n  schedule_type: ScheduleType.CRONTAB | LegacyDefaultSchedule;\n}\n\n/**\n * The configuration object used when the schedule is an INTERVAL\n */\nexport interface IntervalConfig extends BaseConfig {\n  /**\n   * The interval style schedule\n   */\n  schedule: [\n    value: number,\n    interval: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute'\n  ];\n  schedule_type: ScheduleType.INTERVAL;\n}\n\nexport type MonitorConfig = CrontabConfig | IntervalConfig;\n\nexport interface MonitorEnvironment {\n  dateCreated: string;\n  lastCheckIn: string;\n  name: string;\n  nextCheckIn: string;\n  status: MonitorStatus;\n}\n\nexport interface Monitor {\n  config: MonitorConfig;\n  dateCreated: string;\n  environments: MonitorEnvironment[];\n  id: string;\n  name: string;\n  project: Project;\n  slug: string;\n  status: ObjectStatus;\n  type: MonitorType;\n  alertRule?: {\n    targets: Array<{\n      targetIdentifier: number;\n      targetType: 'Member' | 'Team';\n    }>;\n  };\n}\n\nexport interface MonitorStat {\n  duration: number;\n  error: number;\n  missed: number;\n  ok: number;\n  timeout: number;\n  ts: number;\n}\n\nexport interface CheckIn {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: CheckInStatus;\n  attachmentId?: number;\n}\n","import cronstrue from 'cronstrue';\n\nimport {t, tn} from 'sentry/locale';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport {MonitorConfig, ScheduleType} from 'sentry/views/monitors/types';\n\nexport function crontabAsText(crontabInput: string | null): string | null {\n  if (!crontabInput) {\n    return null;\n  }\n  let parsedSchedule: string;\n  try {\n    parsedSchedule = cronstrue.toString(crontabInput, {\n      verbose: true,\n      use24HourTimeFormat: shouldUse24Hours(),\n    });\n  } catch (_e) {\n    return null;\n  }\n\n  return parsedSchedule;\n}\n\nexport function scheduleAsText(config: MonitorConfig) {\n  // Crontab format uses cronstrue\n  if (config.schedule_type === ScheduleType.CRONTAB) {\n    const parsedSchedule = crontabAsText(config.schedule);\n    return parsedSchedule ?? t('Unknown schedule');\n  }\n\n  // Interval format is simpler\n  const [value, timeUnit] = config.schedule;\n\n  if (timeUnit === 'minute') {\n    return tn('Every minute', 'Every %s minutes', value);\n  }\n\n  if (timeUnit === 'hour') {\n    return tn('Every hour', 'Every %s hours', value);\n  }\n\n  if (timeUnit === 'day') {\n    return tn('Every day', 'Every %s days', value);\n  }\n\n  if (timeUnit === 'week') {\n    return tn('Every week', 'Every %s weeks', value);\n  }\n\n  if (timeUnit === 'month') {\n    return tn('Every month', 'Every %s months', value);\n  }\n\n  return t('Unknown schedule');\n}\n"],"names":["async","deleteMonitor","api","orgId","monitorSlug","addLoadingMessage","t","requestPromise","method","clearIndicators","addErrorMessage","deleteMonitorEnvironment","environment","query","updateMonitor","data","resp","err","ex","Sentry","scope","window","console","error","DiamondStatus","_ref","color","icon","Icon","props","_jsxs","StatusWrapper","role","children","_jsx","DiamondBackground","displayName","_styled","IconDiamond","target","name","styles","OnboardingPanel","image","noCenter","Panel","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","SearchBar","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","onSubmit","preventDefault","current","blur","clearSearch","FormWrap","InputGroup","disablePointerEvents","IconSearch","StyledInput","ref","type","autoComplete","SearchBarTrailingButton","borderless","onClick","IconClose","Button","subText","useRouteAnalyticsEventNames","eventKey","eventName","setEventNames","previousUrl","useContext","RouteAnalyticsContext","CronsFeedbackButton","FeatureFeedback","featureName","buttonProps","MonitorBadge","status","statusMap","ok","IconCheckmark","IconFire","timeout","missed_checkin","IconExclamation","active","IconTimer","disabled","IconPause","MonitorRow","monitor","monitorEnv","organization","onDelete","useApi","lastCheckin","lastCheckIn","TimeSince","unitStyle","date","deletionMessage","tct","monitorName","envName","actions","key","label","to","normalizeUrl","pathname","slug","priority","onAction","openConfirmModal","onConfirm","header","message","confirmText","monitorDetailUrl","monitorStatus","Fragment","MonitorName","Link","MonitorColumn","TextOverflow","MonitorStatus","scheduleAsText","config","nextCheckIn","IdBadge","project","avatarSize","avatarProps","hasTooltip","tooltip","ActionsColumn","DropdownMenu","items","position","triggerProps","IconEllipsis","showChevron","fontSizeLarge","NewMonitorButton","useOrganization","selection","usePageFilters","projects","Monitors","location","router","useRouter","queryClient","useQueryClient","monitorListQueryKey","includeNew","monitorList","getResponseHeader","monitorListHeaders","isLoading","useApiQuery","staleTime","useRouteAnalyticsParams","empty_state","length","monitorListPageLinks","renderMonitorRow","deletedEnv","deletedEnvMonitor","find","m","environments","filter","setApiQueryData","SentryDocumentTitle","title","Layout","PageHeadingQuestionTooltip","docsUrl","FeatureBadge","ButtonBar","gap","IconAdd","isCircled","fullWidth","Filters","PageFilterBar","ProjectPageFilter","resetParamsOnChange","EnvironmentPageFilter","decodeScalar","qs","search","placeholder","push","normalizeDateTimeParams","LoadingIndicator","StyledPanelTable","headers","map","flat","Pagination","pageLinks","src","onboardingImg","ButtonList","href","external","PanelTable","MonitorType","ScheduleType","CheckInStatus","crontabAsText","crontabInput","parsedSchedule","cronstrue","verbose","use24HourTimeFormat","shouldUse24Hours","_e","schedule_type","schedule","timeUnit","tn"],"sourceRoot":""}