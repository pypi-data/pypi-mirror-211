{"version":3,"file":"chunks/app_views_settings_organizationMembers_organizationMemberDetail_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/components/teamRoleSelect.tsx","webpack:///./app/utils/isMemberDisabledFromLimit.tsx","webpack:///./app/utils/orgRole.tsx","webpack:///./app/views/settings/components/teamSelect/teamSelectForMember.tsx","webpack:///./app/views/settings/organizationMembers/inviteMember/orgRoleSelect.tsx","webpack:///./app/views/settings/organizationMembers/organizationMemberDetail.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import styled from '@emotion/styled';\n\nimport {ControlProps} from 'sentry/components/forms/controls/selectControl';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team, TeamMember, TeamRole} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\ninterface Props {\n  member: TeamMember;\n  onChangeTeamRole: (newRole: TeamRole['id'] | string) => void;\n  organization: Organization;\n  team: Team;\n  disabled?: boolean;\n  size?: ControlProps['size'];\n}\n\nfunction TeamRoleSelect({\n  organization,\n  team,\n  member,\n  onChangeTeamRole,\n  disabled,\n  size,\n}: Props) {\n  const {orgRoleList, teamRoleList, features} = organization;\n  if (!features.includes('team-roles')) {\n    return null;\n  }\n\n  // Determine the org-role, including if the current team has an org role\n  // and adding the user to the current team changes their minimum team-role\n  const possibleOrgRoles = [member.orgRole];\n  if (member.orgRolesFromTeams && member.orgRolesFromTeams.length > 0) {\n    possibleOrgRoles.push(member.orgRolesFromTeams[0].role.id);\n  }\n  if (team.orgRole) {\n    possibleOrgRoles.push(team.orgRole);\n  }\n  const effectiveOrgRole = getEffectiveOrgRole(possibleOrgRoles, orgRoleList);\n\n  // If the member's org-role has elevated permission, their team-role will\n  // inherit scopes from it\n  if (hasOrgRoleOverwrite({orgRole: effectiveOrgRole?.id, orgRoleList, teamRoleList})) {\n    const effectiveTeamRole = teamRoleList.find(\n      r => r.id === effectiveOrgRole?.minimumTeamRole\n    );\n\n    return (\n      <RoleName>\n        {effectiveTeamRole?.name || effectiveOrgRole?.minimumTeamRole}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={effectiveOrgRole?.id}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  const teamRoleId =\n    member.teamRole || // From TeamMemberEndpoint\n    member.teamRoles?.find(tr => tr.teamSlug === team.slug)?.role || // From OrgMemberDetailEndpoint\n    null;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  return (\n    <RoleSelectControl\n      disabled={disabled}\n      disableUnallowed={false}\n      roles={teamRoleList}\n      value={teamRole.id}\n      onChange={option => onChangeTeamRole(option.value)}\n      size={size}\n    />\n  );\n}\n\nexport default TeamRoleSelect;\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n","import {Member} from 'sentry/types';\n\n// check to see if a member has been disabled because of the member limit\nexport default function isMemberDisabledFromLimit(member?: Member | null) {\n  return member?.flags['member-limit:restricted'] ?? false;\n}\n","import {OrgRole} from 'sentry/types';\n\nexport function getEffectiveOrgRole(\n  memberOrgRoles: string[],\n  orgRoleList: OrgRole[]\n): OrgRole {\n  const orgRoleMap = orgRoleList.reduce((acc, role, index) => {\n    acc[role.id] = {index, role};\n    return acc;\n  }, {});\n\n  // sort by ascending index (high to low priority)\n  memberOrgRoles.sort((a, b) => orgRoleMap[b].index - orgRoleMap[a].index);\n\n  return orgRoleMap[memberOrgRoles[0]]?.role;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport TeamRoleSelect from 'sentry/components/teamRoleSelect';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport {RoleOverwritePanelAlert} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\nimport {DropdownAddTeam, TeamSelectProps} from './utils';\n\ntype Props = TeamSelectProps & {\n  /**\n   * Member that this component is acting upon\n   */\n  member: Member;\n  /**\n   * Used when showing Teams for a Member\n   */\n  onChangeTeamRole: (teamSlug: string, teamRole: string) => void;\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedOrgRole: Member['orgRole'];\n  /**\n   * Used when showing Teams for a Member\n   */\n  selectedTeamRoles: Member['teamRoles'];\n};\n\nfunction TeamSelect({\n  disabled,\n  loadingTeams,\n  member,\n  selectedOrgRole,\n  selectedTeamRoles,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  onCreateTeam,\n  onChangeTeamRole,\n}: Props) {\n  const {teams, onSearch, fetching: isLoadingTeams} = useTeams();\n  const {orgRoleList, teamRoleList} = organization;\n\n  const selectedTeamSlugs = new Set(selectedTeamRoles.map(tm => tm.teamSlug));\n  const selectedTeams = teams.filter(tm => selectedTeamSlugs.has(tm.slug));\n\n  // Determine if adding a team changes the minimum team-role\n  // Get org-roles from team membership, if any\n  const groupOrgRoles = selectedTeams\n    .filter(team => team.orgRole)\n    .map(team => team.orgRole as string);\n  if (selectedOrgRole) {\n    groupOrgRoles.push(selectedOrgRole);\n  }\n\n  // Sort them and to get the highest priority role\n  // Highest priority role may change minimum team role\n  const effectiveOrgRole = getEffectiveOrgRole(groupOrgRoles, orgRoleList);\n\n  const renderBody = () => {\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n\n    return (\n      <React.Fragment>\n        {organization.features.includes('team-roles') && effectiveOrgRole && (\n          <RoleOverwritePanelAlert\n            orgRole={effectiveOrgRole?.id}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        )}\n\n        {selectedTeams.map(team => (\n          <TeamRow\n            key={team.slug}\n            disabled={disabled}\n            organization={organization}\n            team={team}\n            member={{\n              ...member,\n              orgRolesFromTeams: [{role: effectiveOrgRole, teamSlug: ''}],\n              orgRole: selectedOrgRole,\n              teamRoles: selectedTeamRoles,\n            }}\n            onChangeTeamRole={onChangeTeamRole}\n            onRemoveTeam={slug => onRemoveTeam(slug)}\n          />\n        ))}\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAddTeam\n          disabled={disabled}\n          isLoadingTeams={isLoadingTeams}\n          isAddingTeamToMember\n          canCreateTeam={false}\n          onSearch={onSearch}\n          onSelect={onAddTeam}\n          onCreateTeam={onCreateTeam}\n          organization={organization}\n          selectedTeams={selectedTeams.map(tm => tm.slug)}\n          teams={teams}\n        />\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\nfunction TeamRow({\n  disabled,\n  organization,\n  team,\n  member,\n  onRemoveTeam,\n  onChangeTeamRole,\n}: {\n  disabled: boolean;\n  member: Member;\n  onChangeTeamRole: Props['onChangeTeamRole'];\n  onRemoveTeam: Props['onRemoveTeam'];\n  organization: Organization;\n  team: Team;\n}) {\n  const hasOrgAdmin = organization.access.includes('org:admin');\n  const isIdpProvisioned = team.flags['idp:provisioned'];\n  const isPermissionGroup = team.orgRole !== null && !hasOrgAdmin;\n  const isRemoveDisabled = disabled || isIdpProvisioned || isPermissionGroup;\n\n  const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n  const orgRoleFromTeam = team.orgRole ? `${startCase(team.orgRole)} Team` : null;\n\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-member\">\n      <TeamPanelItemLeft>\n        <Link to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n          <TeamBadge team={team} />\n        </Link>\n      </TeamPanelItemLeft>\n\n      <TeamOrgRole>{orgRoleFromTeam}</TeamOrgRole>\n\n      {organization.features.includes('team-roles') && (\n        <RoleSelectWrapper>\n          <TeamRoleSelect\n            disabled={disabled}\n            size=\"xs\"\n            organization={organization}\n            team={team}\n            member={member}\n            onChangeTeamRole={newRole => onChangeTeamRole(team.slug, newRole)}\n          />\n        </RoleSelectWrapper>\n      )}\n\n      <Button\n        size=\"xs\"\n        icon={<IconSubtract isCircled size=\"xs\" />}\n        title={buttonHelpText}\n        disabled={isRemoveDisabled}\n        onClick={() => onRemoveTeam(team.slug)}\n      >\n        {t('Remove')}\n      </Button>\n    </TeamPanelItem>\n  );\n}\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst TeamPanelItemLeft = styled('div')`\n  flex-grow: 4;\n`;\n\nconst TeamOrgRole = styled('div')`\n  min-width: 90px;\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n`;\n\nconst RoleSelectWrapper = styled('div')`\n  min-width: 200px;\n  margin-right: ${space(2)};\n`;\n\nexport default TeamSelect;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport Radio from 'sentry/components/radio';\nimport {t, tct} from 'sentry/locale';\nimport {OrgRole} from 'sentry/types';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst Label = styled('label')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  margin-bottom: 0;\n`;\n\ntype Props = {\n  disabled: boolean;\n  enforceAllowed: boolean;\n  enforceIdpRoleRestricted: boolean;\n  enforceRetired: boolean;\n  isCurrentUser: boolean;\n  roleList: OrgRole[];\n  roleSelected: string;\n  setSelected: (id: string) => void;\n};\n\nclass OrganizationRoleSelect extends Component<Props> {\n  render() {\n    const {\n      disabled,\n      enforceRetired,\n      enforceAllowed,\n      isCurrentUser,\n      roleList,\n      enforceIdpRoleRestricted,\n      roleSelected,\n      setSelected,\n    } = this.props;\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div>{t('Organization Role')}</div>\n        </PanelHeader>\n        {enforceIdpRoleRestricted && (\n          <PanelAlert>\n            {tct(\n              \"[person] organization-level role is managed through your organization's identity provider.\",\n              {person: isCurrentUser ? 'Your' : \"This member's\"}\n            )}\n          </PanelAlert>\n        )}\n\n        <PanelBody>\n          {roleList.map(role => {\n            const {desc, name, id, allowed, isRetired: roleRetired} = role;\n\n            const isRetired = enforceRetired && roleRetired;\n            const isDisabled =\n              disabled ||\n              isRetired ||\n              (enforceAllowed && !allowed) ||\n              enforceIdpRoleRestricted;\n\n            return (\n              <PanelItem\n                key={id}\n                onClick={() => !isDisabled && setSelected(id)}\n                css={!isDisabled ? {} : {color: 'grey', cursor: 'default'}}\n              >\n                <Label>\n                  <Radio id={id} value={name} checked={id === roleSelected} readOnly />\n                  <div style={{flex: 1, padding: '0 16px'}}>\n                    {name}\n                    <TextBlock noMargin>\n                      <div className=\"help-block\">{desc}</div>\n                    </TextBlock>\n                  </div>\n                </Label>\n              </PanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default OrganizationRoleSelect;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport {removeAuthenticator} from 'sentry/actionCreators/account';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {resendMemberInvite, updateMember} from 'sentry/actionCreators/members';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport DateTime from 'sentry/components/dateTime';\nimport NotFound from 'sentry/components/errors/notFound';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconRefresh} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport configStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization} from 'sentry/types';\nimport isMemberDisabledFromLimit from 'sentry/utils/isMemberDisabledFromLimit';\nimport Teams from 'sentry/utils/teams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TeamSelectForMember from 'sentry/views/settings/components/teamSelect/teamSelectForMember';\n\nimport OrganizationRoleSelect from './inviteMember/orgRoleSelect';\n\nconst MULTIPLE_ORGS = t('Cannot be reset since user is in more than one organization');\nconst NOT_ENROLLED = t('Not enrolled in two-factor authentication');\nconst NO_PERMISSION = t('You do not have permission to perform this action');\nconst TWO_FACTOR_REQUIRED = t(\n  'Cannot be reset since two-factor is required for this organization'\n);\n\ntype RouteParams = {\n  memberId: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  groupOrgRoles: Member['orgRolesFromTeams']; // Form state\n  member: Member | null;\n  orgRole: Member['orgRole']; // Form state\n  teamRoles: Member['teamRoles']; // Form state\n} & AsyncView['state'];\n\nconst DisabledMemberTooltip = HookOrDefault({\n  hookName: 'component:disabled-member-tooltip',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nclass OrganizationMemberDetail extends AsyncView<Props, State> {\n  get hasTeamRoles() {\n    const {organization} = this.props;\n    return organization.features.includes('team-roles');\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      groupOrgRoles: [],\n      member: null,\n      orgRole: '',\n      teamRoles: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    return [\n      ['member', `/organizations/${organization.slug}/members/${params.memberId}/`],\n    ];\n  }\n\n  onRequestSuccess({data, stateKey}: {data: Member; stateKey: string}) {\n    if (stateKey === 'member') {\n      const {orgRole, teamRoles, orgRolesFromTeams} = data;\n      this.setState({\n        orgRole,\n        teamRoles,\n        groupOrgRoles: orgRolesFromTeams,\n      });\n    }\n  }\n\n  handleSave = async () => {\n    const {organization, params} = this.props;\n    const {orgRole, teamRoles} = this.state;\n\n    addLoadingMessage(t('Saving...'));\n    this.setState({busy: true});\n\n    try {\n      const updatedMember = await updateMember(this.api, {\n        orgId: organization.slug,\n        memberId: params.memberId,\n        data: {orgRole, teamRoles} as any,\n      });\n      this.setState({\n        member: updatedMember,\n        orgRole: updatedMember.orgRole,\n        teamRoles: updatedMember.teamRoles,\n        busy: false,\n      });\n      addSuccessMessage(t('Saved'));\n    } catch (resp) {\n      const errorMessage =\n        (resp && resp.responseJSON && resp.responseJSON.detail) || t('Could not save...');\n      this.setState({busy: false});\n      addErrorMessage(errorMessage);\n    }\n  };\n\n  handleInvite = async (regenerate: boolean) => {\n    const {organization, params} = this.props;\n\n    addLoadingMessage(t('Sending invite...'));\n\n    this.setState({busy: true});\n\n    try {\n      const data = await resendMemberInvite(this.api, {\n        orgId: organization.slug,\n        memberId: params.memberId,\n        regenerate,\n      });\n\n      addSuccessMessage(t('Sent invite!'));\n\n      if (regenerate) {\n        this.setState(state => ({member: {...state.member, ...data}}));\n      }\n    } catch (_err) {\n      addErrorMessage(t('Could not send invite'));\n    }\n\n    this.setState({busy: false});\n  };\n\n  handle2faReset = async () => {\n    const {organization, router} = this.props;\n    const {user} = this.state.member!;\n\n    const requests =\n      user?.authenticators.map(auth => removeAuthenticator(this.api, user.id, auth.id)) ??\n      [];\n\n    try {\n      await Promise.all(requests);\n      router.push(normalizeUrl(`/settings/${organization.slug}/members/`));\n      addSuccessMessage(t('All authenticators have been removed'));\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticators'));\n      Sentry.captureException(err);\n    }\n  };\n\n  onAddTeam = (teamSlug: string) => {\n    const teamRoles = [...this.state.teamRoles];\n    const i = teamRoles.findIndex(r => r.teamSlug === teamSlug);\n    if (i !== -1) {\n      return;\n    }\n\n    teamRoles.push({teamSlug, role: null});\n    this.setState({teamRoles});\n  };\n\n  onRemoveTeam = (teamSlug: string) => {\n    const teamRoles = this.state.teamRoles.filter(r => r.teamSlug !== teamSlug);\n    this.setState({teamRoles});\n  };\n\n  onChangeOrgRole = orgRole => this.setState({orgRole});\n\n  onChangeTeamRole = (teamSlug: string, role: string) => {\n    if (!this.hasTeamRoles) {\n      return;\n    }\n\n    const teamRoles = [...this.state.teamRoles];\n    const i = teamRoles.findIndex(r => r.teamSlug === teamSlug);\n    if (i === -1) {\n      return;\n    }\n\n    teamRoles[i] = {...teamRoles[i], role};\n    this.setState({teamRoles});\n  };\n\n  showResetButton = () => {\n    const {organization} = this.props;\n    const {member} = this.state;\n    const {user} = member!;\n\n    if (!user || !user.authenticators || organization.require2FA) {\n      return false;\n    }\n    const hasAuth = user.authenticators.length >= 1;\n    return hasAuth && user.canReset2fa;\n  };\n\n  getTooltip = (): string => {\n    const {organization} = this.props;\n    const {member} = this.state;\n    const {user} = member!;\n\n    if (!user) {\n      return '';\n    }\n\n    if (!user.authenticators) {\n      return NO_PERMISSION;\n    }\n    if (!user.authenticators.length) {\n      return NOT_ENROLLED;\n    }\n    if (!user.canReset2fa) {\n      return MULTIPLE_ORGS;\n    }\n    if (organization.require2FA) {\n      return TWO_FACTOR_REQUIRED;\n    }\n\n    return '';\n  };\n\n  get memberDeactivated() {\n    return isMemberDisabledFromLimit(this.state.member);\n  }\n\n  get hasFormChanged() {\n    const {member, orgRole, teamRoles} = this.state;\n    if (!member) {\n      return false;\n    }\n\n    if (orgRole !== member.orgRole || !isEqual(teamRoles, member.teamRoles)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  renderMemberStatus(member: Member) {\n    if (this.memberDeactivated) {\n      return (\n        <em>\n          <DisabledMemberTooltip>{t('Deactivated')}</DisabledMemberTooltip>\n        </em>\n      );\n    }\n    if (member.expired) {\n      return <em>{t('Invitation Expired')}</em>;\n    }\n    if (member.pending) {\n      return <em>{t('Invitation Pending')}</em>;\n    }\n    return t('Active');\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {member, orgRole, teamRoles} = this.state;\n\n    if (!member) {\n      return <NotFound />;\n    }\n\n    const {access, features, orgRoleList} = organization;\n    const canEdit = access.includes('org:write') && !this.memberDeactivated;\n    const hasTeamRoles = features.includes('team-roles');\n\n    const {email, expired, pending, invite_link: inviteLink} = member;\n    const canResend = !expired;\n    const showAuth = !pending;\n    const currentUser = configStore.get('user');\n    const isCurrentUser = currentUser.email === email;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <div>{member.name}</div>\n              <ExtraHeaderText>{t('Member Settings')}</ExtraHeaderText>\n            </Fragment>\n          }\n        />\n\n        <Panel>\n          <PanelHeader>{t('Basics')}</PanelHeader>\n\n          <PanelBody>\n            <PanelItem>\n              <Details>\n                <div>\n                  <DetailLabel>{t('Email')}</DetailLabel>\n                  <div>\n                    <ExternalLink href={`mailto:${email}`}>{email}</ExternalLink>\n                  </div>\n                </div>\n                <div>\n                  <DetailLabel>{t('Status')}</DetailLabel>\n                  <div data-test-id=\"member-status\">\n                    {this.renderMemberStatus(member)}\n                  </div>\n                </div>\n                <div>\n                  <DetailLabel>{t('Added')}</DetailLabel>\n                  <div>\n                    <DateTime dateOnly date={member.dateCreated} />\n                  </div>\n                </div>\n              </Details>\n            </PanelItem>\n            <PanelItem>\n              {inviteLink && (\n                <InviteSection>\n                  <InviteField>\n                    <DetailLabel>{t('Invite Link')}</DetailLabel>\n                    <TextCopyInput>{inviteLink}</TextCopyInput>\n                    <p className=\"help-block\">\n                      {t(\n                        'This invite link can be used by anyone who knows it. Keep it secure!'\n                      )}\n                    </p>\n                  </InviteField>\n                  <ButtonBar gap={1}>\n                    {canResend && (\n                      <Button\n                        data-test-id=\"resend-invite\"\n                        onClick={() => this.handleInvite(false)}\n                      >\n                        {t('Resend Invite')}\n                      </Button>\n                    )}\n                    <Button\n                      onClick={() => this.handleInvite(true)}\n                      title={t(\n                        'Generate New Invite. This will invalidate the previous invite link!'\n                      )}\n                      priority=\"danger\"\n                      aria-label={t('Generate New Invite')}\n                      icon={<IconRefresh size=\"sm\" />}\n                    />\n                  </ButtonBar>\n                </InviteSection>\n              )}\n            </PanelItem>\n          </PanelBody>\n        </Panel>\n\n        {showAuth && (\n          <Panel>\n            <PanelHeader>{t('Authentication')}</PanelHeader>\n            <PanelBody>\n              <FieldGroup\n                alignRight\n                flexibleControlStateSize\n                label={t('Reset two-factor authentication')}\n                help={t(\n                  'Resetting two-factor authentication will remove all two-factor authentication methods for this member.'\n                )}\n              >\n                <Tooltip disabled={this.showResetButton()} title={this.getTooltip()}>\n                  <Confirm\n                    disabled={!this.showResetButton()}\n                    message={tct(\n                      'Are you sure you want to disable all two-factor authentication methods for [name]?',\n                      {name: member.name ? member.name : 'this member'}\n                    )}\n                    onConfirm={this.handle2faReset}\n                  >\n                    <Button priority=\"danger\">\n                      {t('Reset two-factor authentication')}\n                    </Button>\n                  </Confirm>\n                </Tooltip>\n              </FieldGroup>\n            </PanelBody>\n          </Panel>\n        )}\n\n        <OrganizationRoleSelect\n          enforceAllowed={false}\n          enforceIdpRoleRestricted={member.flags['idp:role-restricted']}\n          enforceRetired={hasTeamRoles}\n          isCurrentUser={isCurrentUser}\n          disabled={!canEdit}\n          roleList={orgRoleList}\n          roleSelected={orgRole}\n          setSelected={this.onChangeOrgRole}\n        />\n\n        <Teams slugs={member.teams}>\n          {({initiallyLoaded}) => (\n            <Fragment>\n              <TeamSelectForMember\n                disabled={!canEdit}\n                organization={organization}\n                member={member}\n                selectedOrgRole={orgRole}\n                selectedTeamRoles={teamRoles}\n                onChangeTeamRole={this.onChangeTeamRole}\n                onAddTeam={this.onAddTeam}\n                onRemoveTeam={this.onRemoveTeam}\n                loadingTeams={!initiallyLoaded}\n              />\n            </Fragment>\n          )}\n        </Teams>\n\n        <Footer>\n          <Button\n            priority=\"primary\"\n            busy={this.state.busy}\n            onClick={this.handleSave}\n            disabled={!canEdit || !this.hasFormChanged}\n          >\n            {t('Save Member')}\n          </Button>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationMemberDetail);\n\nconst ExtraHeaderText = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst Details = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: 2fr 1fr 1fr;\n  gap: ${space(2)};\n  width: 100%;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-auto-flow: row;\n    grid-template-columns: auto;\n  }\n`;\n\nconst DetailLabel = styled('div')`\n  font-weight: bold;\n  margin-bottom: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst InviteField = styled('div')`\n  flex-grow: 1;\n`;\n\nconst InviteSection = styled('div')`\n  flex-grow: 1;\n  display: flex;\n  gap: ${space(1)};\n`;\n\nconst Footer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","TeamRoleSelect","organization","team","member","onChangeTeamRole","size","orgRoleList","teamRoleList","features","includes","possibleOrgRoles","orgRole","orgRolesFromTeams","length","push","role","effectiveOrgRole","getEffectiveOrgRole","hasOrgRoleOverwrite","effectiveTeamRole","find","minimumTeamRole","_jsxs","RoleName","IconWrapper","RoleOverwriteIcon","teamRoleId","teamRole","teamRoles","tr","teamSlug","slug","onChange","option","space","isMemberDisabledFromLimit","flags","memberOrgRoles","orgRoleMap","reduce","acc","index","sort","a","b","TeamSelect","loadingTeams","selectedOrgRole","selectedTeamRoles","onAddTeam","onRemoveTeam","onCreateTeam","teams","onSearch","fetching","isLoadingTeams","useTeams","selectedTeamSlugs","Set","tm","selectedTeams","filter","has","groupOrgRoles","Panel","PanelHeader","hasButtons","t","DropdownAddTeam","isAddingTeamToMember","canCreateTeam","onSelect","PanelBody","LoadingIndicator","EmptyMessage","React","RoleOverwritePanelAlert","TeamRow","_ref2","hasOrgAdmin","access","isIdpProvisioned","isPermissionGroup","isRemoveDisabled","buttonHelpText","getButtonHelpText","orgRoleFromTeam","startCase","TeamPanelItem","TeamPanelItemLeft","Link","to","TeamBadge","TeamOrgRole","RoleSelectWrapper","newRole","Button","icon","IconSubtract","isCircled","title","onClick","PanelItem","Label","OrganizationRoleSelect","Component","render","enforceRetired","enforceAllowed","isCurrentUser","roleList","enforceIdpRoleRestricted","roleSelected","setSelected","this","PanelAlert","tct","person","roleRetired","isDisabled","css","color","cursor","Radio","checked","readOnly","style","flex","padding","TextBlock","noMargin","className","MULTIPLE_ORGS","NOT_ENROLLED","NO_PERMISSION","TWO_FACTOR_REQUIRED","DisabledMemberTooltip","HookOrDefault","hookName","defaultComponent","Fragment","OrganizationMemberDetail","AsyncView","constructor","arguments","_defineProperty","async","params","state","addLoadingMessage","setState","busy","updatedMember","updateMember","api","orgId","memberId","data","addSuccessMessage","resp","errorMessage","responseJSON","detail","addErrorMessage","resendMemberInvite","regenerate","_err","router","user","requests","authenticators","auth","removeAuthenticator","Promise","all","normalizeUrl","err","Sentry","findIndex","hasTeamRoles","i","require2FA","canReset2fa","getDefaultState","super","getEndpoints","onRequestSuccess","stateKey","memberDeactivated","hasFormChanged","isEqual","renderMemberStatus","expired","pending","renderBody","NotFound","canEdit","email","invite_link","inviteLink","canResend","showAuth","configStore","SettingsPageHeader","ExtraHeaderText","DetailLabel","ExternalLink","href","DateTime","dateOnly","date","dateCreated","InviteSection","InviteField","TextCopyInput","ButtonBar","gap","handleInvite","priority","IconRefresh","FieldGroup","alignRight","flexibleControlStateSize","help","Tooltip","showResetButton","getTooltip","Confirm","message","onConfirm","handle2faReset","onChangeOrgRole","Teams","slugs","_ref3","initiallyLoaded","TeamSelectForMember","Footer","handleSave","withOrganization","p","theme","gray300","fontSizeLarge","breakpoints","small","textColor","getOverwriteString","IconInfo","orgRoleObj","isSelf","teamRoleObj","selfNoun","selfPronoun","article"],"sourceRoot":""}