{"version":3,"file":"chunks/app_views_starfish_views_spans_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"kYAIA,MAAMA,GAAmBC,EAAAA,EAAAA,eAGtB,CACDC,eAAWC,EACXC,aAAeC,QAGV,SAASC,EAAiBC,GAA0C,IAAzC,SAACC,GAAsCD,EACvE,MAAOL,EAAWE,IAAgBK,EAAAA,EAAAA,YAClC,OACEC,EAAAA,EAAAA,IAACV,EAAiBW,SAAQ,CACxBC,MAAO,CACLV,YACAE,gBACAI,SAEDA,GAGP,CAEO,SAASK,IACd,MAAM,UAACX,IAAaY,EAAAA,EAAAA,YAAWd,GAC/B,OAAKE,GAKHQ,EAAAA,EAAAA,IAACK,EAAAA,GAAK,CAACC,KAAK,QAAQ,eAAa,mBAAmBC,UAAQ,EAAAT,SACzDN,IALI,IAQX,CAzBgBI,EAAiBY,YAAA,oBAcjBL,EAAcK,YAAA,iBAavB,MAAMC,EAAeA,KAAML,EAAAA,EAAAA,YAAWd,E,mfCvB9B,SAASoB,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,KAEXC,GACHF,EAASG,MAAMD,YAAc,MAAOE,EAAAA,EAChCJ,EAASG,MAAMD,WAChBE,EAAAA,EAAAA,IAEN,OACEf,EAAAA,EAAAA,IAACgB,EAAAA,GAAW,CAAAlB,UACVmB,EAAAA,EAAAA,IAACrB,EAAAA,GAAiB,CAAAE,SAAA,EAChBE,EAAAA,EAAAA,IAACgB,EAAAA,GAAa,CAAAlB,UACZE,EAAAA,EAAAA,IAACgB,EAAAA,GAAoB,CAAAlB,UACnBE,EAAAA,EAAAA,IAACgB,EAAAA,GAAY,CAAAlB,UAAEoB,EAAAA,EAAAA,GAAE,gBAIrBlB,EAAAA,EAAAA,IAACgB,EAAAA,GAAW,CAAAlB,UACVmB,EAAAA,EAAAA,IAACD,EAAAA,GAAW,CAACG,WAAS,EAAArB,SAAA,EACpBE,EAAAA,EAAAA,IAACG,EAAAA,GAAc,KACfH,EAAAA,EAAAA,IAACoB,EAAAA,EAAoB,CAAAtB,UACnBE,EAAAA,EAAAA,IAACqB,EAAAA,EAAS,CAACR,WAAYA,eAOrC,CA5BwBH,EAAKF,YAAA,O","sources":["webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/views/starfish/views/spans/index.tsx"],"sourcesContent":["import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {t} from 'sentry/locale';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName} from 'sentry/views/starfish/types';\n\nimport SpansView from './spansView';\n\ntype Query = {\n  moduleName?: string;\n};\n\nexport default function Spans() {\n  const location = useLocation<Query>();\n\n  const moduleName =\n    (location.query.moduleName ?? '') in ModuleName\n      ? (location.query.moduleName as ModuleName)\n      : ModuleName.ALL;\n\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('Spans')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <PageFiltersContainer>\n              <SpansView moduleName={moduleName} />\n            </PageFiltersContainer>\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n"],"names":["pageErrorContext","createContext","pageError","undefined","setPageError","_","PageErrorProvider","_ref","children","useState","_jsx","Provider","value","PageErrorAlert","useContext","Alert","type","showIcon","displayName","usePageError","Spans","location","useLocation","moduleName","query","ModuleName","Layout","_jsxs","t","fullWidth","PageFiltersContainer","SpansView"],"sourceRoot":""}