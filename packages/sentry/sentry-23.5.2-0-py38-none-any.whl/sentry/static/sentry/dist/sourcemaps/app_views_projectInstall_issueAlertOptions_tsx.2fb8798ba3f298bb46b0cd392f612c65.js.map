{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {IssueAlertRuleAction} from 'sentry/types/alerts';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\nexport const REAPPEARED_EVENT_CONDITION =\n  'sentry.rules.conditions.reappeared_event.ReappearedEventCondition';\nconst ISSUE_ALERT_DEFAULT_ACTION: Omit<\n  IssueAlertRuleAction,\n  'label' | 'name' | 'prompt'\n> = {\n  id: 'sentry.mail.actions.NotifyEmailAction',\n  targetType: 'IssueOwners',\n};\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: Omit<IssueAlertRuleAction, 'label' | 'name' | 'prompt'>[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.ALERT_ON_EVERY_ISSUE.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const customizedAlertOption: [string, React.ReactNode] = [\n      Actions.CUSTOMIZED_ALERTS.toString(),\n      <CustomizeAlertsGrid\n        key={Actions.CUSTOMIZED_ALERTS}\n        onClick={e => {\n          // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n          // propagation of the click up to the label, causing it to focus\n          // the radio input and lose focus on the select.\n          e.preventDefault();\n          const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n          this.setStateAndUpdateParents({alertSetting});\n        }}\n      >\n        {t('When there are more than')}\n        <InlineInput\n          type=\"number\"\n          min=\"0\"\n          name=\"\"\n          placeholder={DEFAULT_PLACEHOLDER_VALUE}\n          value={this.state.threshold}\n          onChange={threshold =>\n            this.setStateAndUpdateParents({threshold: threshold.target.value})\n          }\n          data-test-id=\"range-input\"\n        />\n        <InlineSelectControl\n          value={this.state.metric}\n          options={this.getAvailableMetricOptions()}\n          onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n        />\n        {t('a unique error in')}\n        <InlineSelectControl\n          value={this.state.interval}\n          options={this.state.intervalChoices?.map(([value, label]) => ({\n            value,\n            label,\n          }))}\n          onChange={interval => this.setStateAndUpdateParents({interval: interval.value})}\n        />\n      </CustomizeAlertsGrid>,\n    ];\n\n    const options: [string, React.ReactNode][] = [\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n      ...(hasProperlyLoadedConditions ? [customizedAlertOption] : []),\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n    ];\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [\n        {\n          ...ISSUE_ALERT_DEFAULT_ACTION,\n          ...(this.props.organization.features.includes('issue-alert-fallback-targeting')\n            ? {fallthroughType: 'ActiveMembers'}\n            : {}),\n        },\n      ],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null\n  ): void {\n    this.setState(state, () => {\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('2. Set your alert frequency')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(Layout.Title)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n"],"names":["MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","REAPPEARED_EVENT_CONDITION","ISSUE_ALERT_DEFAULT_ACTION","id","targetType","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","value","IssueAlertOptions","AsyncComponent","getDefaultState","super","conditions","intervalChoices","alertSetting","ALERT_ON_EVERY_ISSUE","toString","metric","getAvailableMetricOptions","label","t","filter","_ref","this","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","customizedAlertOption","CUSTOMIZED_ALERTS","_jsxs","CustomizeAlertsGrid","onClick","e","preventDefault","setStateAndUpdateParents","children","_jsx","InlineInput","type","min","name","placeholder","onChange","target","InlineSelectControl","options","map","_ref2","CREATE_ALERT_LATER","_ref3","choiceValue","node","RadioItemWrapper","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actions","props","organization","features","includes","fallthroughType","actionMatch","frequency","setState","getEndpoints","slug","onLoadAllEndpointsSuccess","Object","values","formFields","choices","reduce","equalityReducer","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","renderBody","issueAlertOptionsChoices","Fragment","PageHeadingWithTopMargins","withMargins","Content","RadioGroupWithPadding","withOrganization","_styled","space","Input","styles","SelectControl","RadioGroup","Layout"],"sourceRoot":""}