{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeAnalytics/useRouteAnalyticsEventNames.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["import {useContext, useEffect} from 'react';\n\nimport {RouteAnalyticsContext} from 'sentry/views/routeAnalyticsContextProvider';\n\n/**\n * This hook provides custom analytics event names for route based analytics.\n * @param eventKey The key used to identify the event\n * @param eventName The English string used as the event name\n */\nexport default function useRouteAnalyticsEventNames(eventKey: string, eventName: string) {\n  const {setEventNames, previousUrl} = useContext(RouteAnalyticsContext);\n  useEffect(() => {\n    setEventNames(eventKey, eventName);\n  }, [setEventNames, eventKey, eventName, previousUrl]);\n}\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {Fragment, useCallback, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport omit from 'lodash/omit';\nimport startCase from 'lodash/startCase';\nimport {PlatformIcon} from 'platformicons';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openCreateTeamModal, openModal} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {SUPPORTED_LANGUAGES} from 'sentry/components/onboarding/frameworkSuggestionModal';\nimport PlatformPicker, {Platform} from 'sentry/components/platformPicker';\nimport {useProjectCreationAccess} from 'sentry/components/projects/useProjectCreationAccess';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {OnboardingSelectedSDK, Team} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport slugify from 'sentry/utils/slugify';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\nfunction CreateProject() {\n  const api = useApi();\n  const organization = useOrganization();\n  const {teams} = useTeams();\n\n  const accessTeams = teams.filter((team: Team) => team.access.includes('team:admin'));\n\n  useRouteAnalyticsEventNames(\n    'project_creation_page.viewed',\n    'Project Create: Creation page viewed'\n  );\n\n  const [projectName, setProjectName] = useState('');\n  const [platform, setPlatform] = useState<OnboardingSelectedSDK | undefined>(undefined);\n  const [team, setTeam] = useState(accessTeams?.[0]?.slug);\n\n  const [errors, setErrors] = useState(false);\n  const [inFlight, setInFlight] = useState(false);\n\n  const [alertRuleConfig, setAlertRuleConfig] = useState<IssueAlertFragment | undefined>(\n    undefined\n  );\n\n  const frameworkSelectionEnabled = !!organization?.features.includes(\n    'onboarding-sdk-selection'\n  );\n\n  const createProject = useCallback(\n    async (selectedFramework?: OnboardingSelectedSDK) => {\n      const {slug} = organization;\n      const {\n        shouldCreateCustomRule,\n        name,\n        conditions,\n        actions,\n        actionMatch,\n        frequency,\n        defaultRules,\n      } = alertRuleConfig || {};\n\n      const selectedPlatform = selectedFramework?.key ?? platform?.key;\n\n      if (!selectedPlatform) {\n        addErrorMessage(t('Please select a platform in Step 1'));\n        return;\n      }\n\n      setInFlight(true);\n\n      try {\n        const projectData = await api.requestPromise(\n          team === null\n            ? `/organizations/${slug}/experimental/projects/`\n            : `/teams/${slug}/${team}/projects/`,\n          {\n            method: 'POST',\n            data: {\n              name: projectName,\n              platform: selectedPlatform,\n              default_rules: defaultRules ?? true,\n            },\n          }\n        );\n\n        let ruleId: string | undefined;\n        if (shouldCreateCustomRule) {\n          const ruleData = await api.requestPromise(\n            `/projects/${organization.slug}/${projectData.slug}/rules/`,\n            {\n              method: 'POST',\n              data: {\n                name,\n                conditions,\n                actions,\n                actionMatch,\n                frequency,\n              },\n            }\n          );\n          ruleId = ruleData.id;\n        }\n        trackAnalytics('project_creation_page.created', {\n          organization,\n          issue_alert: defaultRules\n            ? 'Default'\n            : shouldCreateCustomRule\n            ? 'Custom'\n            : 'No Rule',\n          project_id: projectData.id,\n          rule_id: ruleId || '',\n        });\n\n        ProjectsStore.onCreateSuccess(projectData, organization.slug);\n\n        browserHistory.push(\n          normalizeUrl(\n            `/${organization.slug}/${projectData.slug}/getting-started/${selectedPlatform}/`\n          )\n        );\n      } catch (err) {\n        setInFlight(false);\n        setErrors(err.responseJSON);\n\n        // Only log this if the error is something other than:\n        // * The user not having access to create a project, or,\n        // * A project with that slug already exists\n        if (err.status !== 403 && err.status !== 409) {\n          Sentry.withScope(scope => {\n            scope.setExtra('err', err);\n            Sentry.captureMessage('Project creation failed');\n          });\n        }\n      }\n    },\n    [api, alertRuleConfig, organization, platform, projectName, team]\n  );\n\n  const handleProjectCreation = useCallback(async () => {\n    const selectedPlatform = platform;\n\n    if (!selectedPlatform) {\n      addErrorMessage(t('Please select a platform in Step 1'));\n      return;\n    }\n\n    if (\n      selectedPlatform.type !== 'language' ||\n      !Object.values(SUPPORTED_LANGUAGES).includes(\n        selectedPlatform.language as SUPPORTED_LANGUAGES\n      )\n    ) {\n      createProject();\n      return;\n    }\n\n    const {FrameworkSuggestionModal, modalCss} = await import(\n      'sentry/components/onboarding/frameworkSuggestionModal'\n    );\n\n    openModal(\n      deps => (\n        <FrameworkSuggestionModal\n          {...deps}\n          organization={organization}\n          selectedPlatform={selectedPlatform}\n          onConfigure={selectedFramework => {\n            createProject(selectedFramework);\n          }}\n          onSkip={createProject}\n        />\n      ),\n      {\n        modalCss,\n        onClose: () => {\n          trackAnalytics('project_creation.select_framework_modal_close_button_clicked', {\n            platform: selectedPlatform.key,\n            organization,\n          });\n        },\n      }\n    );\n  }, [platform, createProject, organization]);\n\n  function handlePlatformChange(selectedPlatform: Platform | null) {\n    if (!selectedPlatform?.id) {\n      setPlatform(undefined);\n      setProjectName('');\n      return;\n    }\n\n    const userModifiedName = !!projectName && projectName !== platform?.key;\n    const newName = userModifiedName ? projectName : selectedPlatform.id;\n\n    setPlatform({\n      ...omit(selectedPlatform, 'id'),\n      key: selectedPlatform.id,\n    });\n\n    setProjectName(newName);\n  }\n\n  const {shouldCreateCustomRule, conditions} = alertRuleConfig || {};\n  const {canCreateProject} = useProjectCreationAccess({organization, teams: accessTeams});\n\n  const isOrgMemberWithNoAccess =\n    accessTeams.length === 0 && !organization.access.includes('project:admin');\n\n  const canSubmitForm =\n    !inFlight &&\n    (team || isOrgMemberWithNoAccess) &&\n    canCreateProject &&\n    projectName !== '' &&\n    (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value));\n\n  const createProjectForm = (\n    <Fragment>\n      <Layout.Title withMargins>\n        {t('3. Name your project and assign it a team')}\n      </Layout.Title>\n      <CreateProjectForm\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          // Prevent the page from reloading\n          event.preventDefault();\n          frameworkSelectionEnabled ? handleProjectCreation() : createProject();\n        }}\n      >\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInputWrap>\n            <StyledPlatformIcon platform={platform?.key ?? 'other'} size={20} />\n            <ProjectNameInput\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => setProjectName(slugify(e.target.value))}\n            />\n          </ProjectNameInputWrap>\n        </div>\n        {!isOrgMemberWithNoAccess && (\n          <div>\n            <FormLabel>{t('Team')}</FormLabel>\n            <TeamSelectInput>\n              <TeamSelector\n                name=\"select-team\"\n                aria-label={t('Select a Team')}\n                menuPlacement=\"auto\"\n                clearable={false}\n                value={team}\n                placeholder={t('Select a Team')}\n                onChange={choice => setTeam(choice.value)}\n                teamFilter={(tm: Team) => tm.access.includes('team:admin')}\n              />\n              <Button\n                borderless\n                data-test-id=\"create-team\"\n                icon={<IconAdd isCircled />}\n                onClick={() =>\n                  openCreateTeamModal({\n                    organization,\n                    onClose: ({slug}) => setTeam(slug),\n                  })\n                }\n                title={t('Create a team')}\n                aria-label={t('Create a team')}\n              />\n            </TeamSelectInput>\n          </div>\n        )}\n        <div>\n          <Button\n            type=\"submit\"\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    </Fragment>\n  );\n\n  return (\n    <Access access={canCreateProject ? ['project:read'] : ['project:admin']}>\n      <div data-test-id=\"onboarding-info\">\n        <Layout.Title withMargins>{t('Create a new project in 3 steps')}</Layout.Title>\n        <HelpText>\n          {tct(\n            'Set up a separate project for each part of your application (for example, your API server and frontend client), to quickly pinpoint which part of your application errors are coming from. [link: Read the docs].',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/integrate-frontend/create-new-project/\" />\n              ),\n            }\n          )}\n        </HelpText>\n        <Layout.Title withMargins>{t('1. Choose your platform')}</Layout.Title>\n        <PlatformPicker\n          platform={platform?.key}\n          defaultCategory={platform?.category}\n          setPlatform={handlePlatformChange}\n          organization={organization}\n          showOther\n        />\n        <IssueAlertOptions onChange={updatedData => setAlertRuleConfig(updatedData)} />\n        {createProjectForm}\n\n        {errors && (\n          <Alert type=\"error\">\n            {Object.keys(errors).map(key => (\n              <div key={key}>\n                <strong>{startCase(key)}</strong>: {errors[key]}\n              </div>\n            ))}\n          </Alert>\n        )}\n      </div>\n    </Access>\n  );\n}\n\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst ProjectNameInputWrap = styled('div')`\n  position: relative;\n`;\n\nconst ProjectNameInput = styled(Input)`\n  padding-left: calc(${p => p.theme.formPadding.md.paddingLeft}px * 1.5 + 20px);\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  position: absolute;\n  top: 50%;\n  left: ${p => p.theme.formPadding.md.paddingLeft}px;\n  transform: translateY(-50%);\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {space} from 'sentry/styles/space';\n\nimport {CreateProject} from './createProject';\n\nfunction NewProject() {\n  return (\n    <SentryDocumentTitle>\n      <Container>\n        <div className=\"container\">\n          <Content>\n            <CreateProject />\n          </Content>\n        </div>\n      </Container>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["useRouteAnalyticsEventNames","eventKey","eventName","setEventNames","previousUrl","useContext","RouteAnalyticsContext","useEffect","slugify","str","normalize","toLowerCase","replace","CreateProject","api","useApi","organization","useOrganization","teams","useTeams","accessTeams","filter","team","access","includes","projectName","setProjectName","useState","platform","setPlatform","undefined","setTeam","slug","errors","setErrors","inFlight","setInFlight","alertRuleConfig","setAlertRuleConfig","frameworkSelectionEnabled","features","createProject","useCallback","async","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","selectedPlatform","selectedFramework","key","projectData","requestPromise","method","data","default_rules","ruleId","id","trackAnalytics","issue_alert","project_id","rule_id","ProjectsStore","browserHistory","normalizeUrl","err","responseJSON","status","Sentry","scope","setExtra","addErrorMessage","t","handleProjectCreation","type","Object","values","SUPPORTED_LANGUAGES","language","FrameworkSuggestionModal","modalCss","openModal","deps","_jsx","onConfigure","onSkip","onClose","canCreateProject","useProjectCreationAccess","isOrgMemberWithNoAccess","length","canSubmitForm","every","condition","value","createProjectForm","_jsxs","Fragment","children","Layout","withMargins","CreateProjectForm","onSubmit","event","preventDefault","FormLabel","ProjectNameInputWrap","StyledPlatformIcon","size","ProjectNameInput","placeholder","autoComplete","onChange","e","target","TeamSelectInput","TeamSelector","menuPlacement","clearable","choice","teamFilter","tm","Button","borderless","icon","IconAdd","isCircled","onClick","openCreateTeamModal","_ref","title","priority","disabled","Access","HelpText","tct","link","ExternalLink","href","PlatformPicker","defaultCategory","category","newName","omit","showOther","IssueAlertOptions","updatedData","Alert","keys","map","startCase","displayName","_styled","space","p","theme","background","fontSizeExtraLarge","styles","Input","formPadding","md","paddingLeft","PlatformIcon","subText","NewProject","SentryDocumentTitle","Container","className","Content"],"sourceRoot":""}