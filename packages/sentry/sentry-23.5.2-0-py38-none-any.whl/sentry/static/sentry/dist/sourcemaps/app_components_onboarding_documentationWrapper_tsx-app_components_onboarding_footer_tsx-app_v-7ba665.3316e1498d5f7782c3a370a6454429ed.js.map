{"version":3,"file":"chunks/app_components_onboarding_documentationWrapper_tsx-app_components_onboarding_footer_tsx-app_v-7ba665.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboarding/documentationWrapper.tsx","webpack:///./app/components/onboarding/footer.tsx","webpack:///./app/views/onboarding/components/genericFooter.tsx","webpack:///./app/views/onboarding/components/integrations/addInstallationInstructions.tsx","webpack:///./app/views/onboarding/components/integrations/postInstallCodeSnippet.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegrationButton.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Alert, alertStyles} from 'sentry/components/alert';\nimport {space} from 'sentry/styles/space';\n\ntype AlertType = React.ComponentProps<typeof Alert>['type'];\n\nconst getAlertSelector = (type: AlertType) =>\n  type === 'muted' ? null : `.alert[level=\"${type}\"], .alert-${type}`;\n\nexport const DocumentationWrapper = styled('div')`\n  /* Size of the new footer + 16px */\n  padding-bottom: calc(72px + ${space(2)});\n\n  h2 {\n    font-size: 1.375rem;\n  }\n\n  h3 {\n    font-size: 1.25rem;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  ul,\n  ol,\n  li {\n    margin-top: 0.5em;\n    margin-bottom: 0.5em;\n  }\n\n  blockquote,\n  hr,\n  pre,\n  pre[class*='language-'],\n  div[data-language] {\n    margin-top: 1em;\n    margin-bottom: 1em;\n  }\n\n  blockquote {\n    padding: ${space(1.5)} ${space(2)};\n    ${p => alertStyles({theme: p.theme, type: 'info'})}\n  }\n\n  blockquote > * {\n    margin: 0;\n  }\n\n  .gatsby-highlight:last-child {\n    margin-bottom: 0;\n  }\n\n  hr {\n    border-color: ${p => p.theme.border};\n  }\n\n  code {\n    color: ${p => p.theme.pink400};\n  }\n\n  .alert {\n    border-radius: ${p => p.theme.borderRadius};\n  }\n\n  /**\n   * XXX(epurkhiser): This comes from the doc styles and avoids bottom margin issues in alerts\n  */\n  .content-flush-bottom *:last-child {\n    margin-bottom: 0;\n  }\n\n  ${p =>\n    Object.keys(p.theme.alert).map(\n      type => `\n        ${getAlertSelector(type as AlertType)} {\n          ${alertStyles({theme: p.theme, type: type as AlertType})};\n          display: block;\n        }\n      `\n    )}\n`;\n","import {useCallback, useContext, useEffect, useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport isPropValid from '@emotion/is-prop-valid';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport {OnboardingContext} from 'sentry/components/onboarding/onboardingContext';\nimport {IconCheckmark, IconCircle, IconRefresh} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {space} from 'sentry/styles/space';\nimport {Group, OnboardingProjectStatus, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport GenericFooter from 'sentry/views/onboarding/components/genericFooter';\n\nexport type OnboardingState = {\n  status: OnboardingProjectStatus;\n  firstIssueId?: string;\n};\n\nconst DEFAULT_POLL_INTERVAL = 5000;\n\ntype Props = Pick<RouteComponentProps<{}, {}>, 'router' | 'route' | 'location'> & {\n  projectSlug: Project['slug'];\n  newOrg?: boolean;\n  projectId?: Project['id'];\n};\n\nasync function openChangeRouteModal({\n  nextLocation,\n  router,\n}: {\n  nextLocation: Location;\n  router: RouteComponentProps<{}, {}>['router'];\n}) {\n  const mod = await import('sentry/components/onboarding/changeRouteModal');\n\n  const {ChangeRouteModal} = mod;\n\n  openModal(deps => (\n    <ChangeRouteModal {...deps} router={router} nextLocation={nextLocation} />\n  ));\n}\n\nexport function Footer({projectSlug, projectId, router, newOrg}: Props) {\n  const organization = useOrganization();\n  const preferences = useLegacyStore(PreferencesStore);\n  const [firstError, setFirstError] = useState<string | null>(null);\n  const [firstIssue, setFirstIssue] = useState<Group | undefined>(undefined);\n  const {projects} = useProjects();\n  const onboardingContext = useContext(OnboardingContext);\n  const projectData = projectId ? onboardingContext.data.projects[projectId] : undefined;\n  const selectedProject = projects.find(project => project.slug === projectSlug);\n\n  useApiQuery<Project>([`/projects/${organization.slug}/${projectSlug}/`], {\n    staleTime: 0,\n    refetchInterval: DEFAULT_POLL_INTERVAL,\n    enabled:\n      !!projectSlug &&\n      !firstError &&\n      projectData?.status === OnboardingProjectStatus.WAITING, // Fetch only if the project is available and we have not yet received an error,\n    onSuccess: ([data]) => {\n      setFirstError(data.firstEvent);\n    },\n  });\n\n  // Locate the projects first issue group. The project.firstEvent field will\n  // *not* include sample events, while just looking at the issues list will.\n  // We will wait until the project.firstEvent is set and then locate the\n  // event given that event datetime\n  useApiQuery<Group[]>([`/projects/${organization.slug}/${projectSlug}/issues/`], {\n    staleTime: 0,\n    enabled:\n      !!firstError &&\n      !firstIssue &&\n      projectData?.status === OnboardingProjectStatus.PROCESSING, // Only fetch if an error event is received and we have not yet located the first issue,\n    onSuccess: ([data]) => {\n      setFirstIssue(data.find((issue: Group) => issue.firstSeen === firstError));\n    },\n  });\n\n  useEffect(() => {\n    if (!projectId || !!projectData) {\n      return;\n    }\n\n    onboardingContext.setData({\n      ...onboardingContext.data,\n      projects: {\n        ...onboardingContext.data.projects,\n        [projectId]: {\n          slug: projectSlug,\n          status: OnboardingProjectStatus.WAITING,\n        },\n      },\n    });\n  }, [projectData, onboardingContext, projectSlug, projectId]);\n\n  useEffect(() => {\n    if (!projectId) {\n      return;\n    }\n\n    if (!firstError) {\n      return;\n    }\n\n    if (projectData?.status !== OnboardingProjectStatus.WAITING) {\n      return;\n    }\n\n    trackAnalytics('onboarding.first_error_received', {\n      organization,\n      new_organization: !!newOrg,\n      project_id: projectId,\n      platform: selectedProject?.platform ?? 'other',\n    });\n\n    onboardingContext.setData({\n      ...onboardingContext.data,\n      projects: {\n        ...onboardingContext.data.projects,\n        [projectId]: {\n          slug: projectSlug,\n          status: OnboardingProjectStatus.PROCESSING,\n        },\n      },\n    });\n\n    addSuccessMessage(t('First error received'));\n  }, [\n    firstError,\n    newOrg,\n    organization,\n    projectId,\n    projectData,\n    onboardingContext,\n    projectSlug,\n    selectedProject,\n  ]);\n\n  useEffect(() => {\n    if (!projectId) {\n      return;\n    }\n\n    if (!firstIssue) {\n      return;\n    }\n\n    if (projectData?.status !== OnboardingProjectStatus.PROCESSING) {\n      return;\n    }\n\n    trackAnalytics('onboarding.first_error_processed', {\n      organization,\n      new_organization: !!newOrg,\n      project_id: projectId,\n      platform: selectedProject?.platform ?? 'other',\n    });\n\n    onboardingContext.setData({\n      ...onboardingContext.data,\n      projects: {\n        ...onboardingContext.data.projects,\n        [projectId]: {\n          slug: projectSlug,\n          status: OnboardingProjectStatus.PROCESSED,\n          firstIssueId: firstIssue.id,\n        },\n      },\n    });\n\n    addSuccessMessage(t('First error processed'));\n  }, [\n    firstIssue,\n    newOrg,\n    organization,\n    projectData,\n    projectId,\n    onboardingContext,\n    projectSlug,\n    selectedProject,\n  ]);\n\n  // The explore button is only showed if Sentry has not yet received any errors OR the issue is still being processed\n  const handleExploreSentry = useCallback(() => {\n    if (!projectId) {\n      return;\n    }\n\n    if (\n      onboardingContext.data.projects[projectId].status ===\n      OnboardingProjectStatus.WAITING\n    ) {\n      return;\n    }\n\n    trackAnalytics('onboarding.explore_sentry_button_clicked', {\n      organization,\n      project_id: projectId,\n      platform: selectedProject?.platform ?? 'other',\n    });\n\n    router.push({\n      ...router.location,\n      pathname: `/organizations/${organization.slug}/issues/?referrer=onboarding-first-event-footer`,\n    });\n  }, [organization, projectId, router, onboardingContext, selectedProject]);\n\n  const handleSkipOnboarding = useCallback(() => {\n    if (!projectId) {\n      return;\n    }\n\n    if (\n      onboardingContext.data.projects[projectId].status !==\n      OnboardingProjectStatus.WAITING\n    ) {\n      return;\n    }\n\n    trackAnalytics('growth.onboarding_clicked_skip', {\n      organization,\n      source: 'targeted_onboarding_first_event_footer',\n    });\n\n    const selectedProjectId = selectedProject?.id;\n\n    let pathname = `/organizations/${organization.slug}/issues/?`;\n    if (selectedProjectId) {\n      pathname += `project=${selectedProjectId}&`;\n    }\n\n    openChangeRouteModal({\n      router,\n      nextLocation: {\n        ...router.location,\n        pathname: (pathname += `referrer=onboarding-first-event-footer-skip`),\n      },\n    });\n  }, [router, organization, selectedProject, onboardingContext, projectId]);\n\n  const handleViewError = useCallback(() => {\n    if (!projectId) {\n      return;\n    }\n\n    trackAnalytics('onboarding.view_error_button_clicked', {\n      organization,\n      new_organization: !!newOrg,\n      project_id: projectId,\n      platform: selectedProject?.platform ?? 'other',\n    });\n\n    router.push({\n      ...router.location,\n      pathname: `/organizations/${organization.slug}/issues/${onboardingContext.data.projects[projectId].firstIssueId}/?referrer=onboarding-first-event-footer`,\n    });\n  }, [organization, newOrg, router, onboardingContext, projectId, selectedProject]);\n\n  return (\n    <Wrapper newOrg={!!newOrg} sidebarCollapsed={!!preferences.collapsed}>\n      <Column>\n        {projectData?.status === OnboardingProjectStatus.WAITING && newOrg && (\n          <Button onClick={handleSkipOnboarding} priority=\"link\">\n            {t('Skip Onboarding')}\n          </Button>\n        )}\n      </Column>\n      <StatusesColumn>\n        {projectData?.status === OnboardingProjectStatus.WAITING ? (\n          <WaitingForErrorStatus>\n            <IconCircle size=\"sm\" />\n            {t('Waiting for error')}\n          </WaitingForErrorStatus>\n        ) : projectData?.status === OnboardingProjectStatus.PROCESSED ? (\n          <ErrorProcessedStatus>\n            <IconCheckmark isCircled size=\"sm\" color=\"green300\" />\n            {t('Error Processed!')}\n          </ErrorProcessedStatus>\n        ) : (\n          <ErrorProcessingStatus>\n            <RefreshIcon size=\"sm\" />\n            {t('Processing error')}\n          </ErrorProcessingStatus>\n        )}\n      </StatusesColumn>\n      <ActionsColumn>\n        {projectData?.status === OnboardingProjectStatus.PROCESSED ? (\n          <Button priority=\"primary\" onClick={handleViewError}>\n            {t('View Error')}\n          </Button>\n        ) : (\n          <Button\n            priority=\"primary\"\n            disabled={projectData?.status === OnboardingProjectStatus.WAITING}\n            onClick={handleExploreSentry}\n            title={\n              projectData?.status === OnboardingProjectStatus.WAITING\n                ? t('Waiting for error')\n                : undefined\n            }\n          >\n            {t('Explore Sentry')}\n          </Button>\n        )}\n      </ActionsColumn>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled(GenericFooter, {\n  shouldForwardProp: prop => isPropValid(prop),\n})<{\n  newOrg: boolean;\n  sidebarCollapsed: boolean;\n}>`\n  display: none;\n  display: flex;\n  flex-direction: row;\n  padding: ${space(2)} ${space(4)};\n  justify-content: space-between;\n  align-items: center;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    align-items: center;\n    gap: ${space(3)};\n  }\n  ${p =>\n    !p.newOrg &&\n    css`\n      @media (min-width: ${p.theme.breakpoints.medium}) {\n        width: calc(\n          100% -\n            ${p.theme.sidebar[p.sidebarCollapsed ? 'collapsedWidth' : 'expandedWidth']}\n        );\n        right: 0;\n        left: auto;\n      }\n    `}\n`;\n\nconst Column = styled('div')`\n  display: flex;\n`;\n\nconst StatusesColumn = styled('div')`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ActionsColumn = styled('div')`\n  display: none;\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst WaitingForErrorStatus = styled('div')`\n  display: grid;\n  grid-template-columns: max-content max-content;\n  gap: ${space(0.75)};\n  align-items: center;\n  padding: ${space(1)} ${space(1.5)};\n  border: 1.5px solid ${p => p.theme.gray500};\n  border-radius: 76px;\n  color: ${p => p.theme.gray500};\n  line-height: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ErrorProcessingStatus = styled(WaitingForErrorStatus)`\n  border-color: ${p => p.theme.gray200};\n  color: ${p => p.theme.gray300};\n  position: relative;\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst ErrorProcessedStatus = styled(WaitingForErrorStatus)`\n  border-radius: 44px;\n  background: ${p => p.theme.inverted.background};\n  color: ${p => p.theme.inverted.textColor};\n`;\n\nconst RefreshIcon = styled(IconRefresh)`\n  animation: rotate 1s linear infinite;\n`;\n","import styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nimport testableTransition from 'sentry/utils/testableTransition';\n\nconst GenericFooter = styled(motion.div)`\n  width: 100%;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  height: 72px;\n  z-index: 100;\n  display: flex;\n  background-color: ${p => p.theme.background};\n  justify-content: space-between;\n  box-shadow: 0px -4px 24px rgba(43, 34, 51, 0.08);\n`;\n\nGenericFooter.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {animate: {}},\n  transition: testableTransition({\n    staggerChildren: 0.2,\n  }),\n};\n\nexport default GenericFooter;\n","import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\n\n// TODO: Make dyanmic for other platforms/integrations\nexport default function AddInstallationInstructions() {\n  return (\n    <Fragment>\n      <p>\n        {tct(\n          'The automated AWS Lambda setup will instrument your Lambda functions with Sentry error and performance monitoring without any code changes. We use CloudFormation Stack ([learnMore]) to create the Sentry role which gives us access to your AWS account.',\n          {\n            learnMore: (\n              <ExternalLink href=\"https://aws.amazon.com/cloudformation/\">\n                {t('Learn more about CloudFormation')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </p>\n      <p>\n        {tct(\n          'Just press the [addInstallation] button below and complete the steps in the popup that opens.',\n          {addInstallation: <strong>{t('Add Installation')}</strong>}\n        )}\n      </p>\n      <p>\n        {tct(\n          'If you don’t want to add CloudFormation stack to your AWS environment, press the [manualSetup] button instead.',\n          {manualSetup: <strong>{t('Manual Setup')}</strong>}\n        )}\n      </p>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider} from 'sentry/types';\n\ntype Props = {\n  provider: IntegrationProvider;\n  isOnboarding?: boolean;\n  platform?: PlatformKey;\n};\n\nexport default function PostInstallCodeSnippet({\n  provider,\n  platform,\n  isOnboarding,\n}: Props) {\n  // currently supporting both Python and Node\n  const token_punctuation: string = platform === 'python-awslambda' ? '()' : '();';\n  return (\n    <div>\n      <p>\n        {t(\n          \"Congrats, you just installed the %s integration! Now that it's is installed, the next time you trigger an error it will go to your Sentry.\",\n          provider.name\n        )}\n      </p>\n      <p>\n        {t(\n          'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n        )}\n      </p>\n      <div>\n        <CodeWrapper>\n          <code>\n            <TokenFunction>myUndefinedFunction</TokenFunction>\n            <TokenPunctuation>{token_punctuation}</TokenPunctuation>)\n          </code>\n        </CodeWrapper>\n      </div>\n      {isOnboarding && (\n        <Fragment>\n          <p>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n          </p>\n          <p>\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nconst CodeWrapper = styled('pre')`\n  padding: 1em;\n  overflow: auto;\n  background: #251f3d;\n  font-size: 15px;\n`;\n\nconst TokenFunction = styled('span')`\n  color: #7cc5c4;\n`;\n\nconst TokenPunctuation = styled('span')`\n  color: #b3acc1;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = ButtonProps & {\n  api: Client;\n  organization: Organization;\n  source: string;\n  onClick?: () => void;\n  onCreateSampleGroup?: () => void;\n  project?: Project;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAnalytics('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted = true;\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAnalytics(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project, onCreateSampleGroup} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    if (onCreateSampleGroup) {\n      onCreateSampleGroup();\n    } else {\n      trackAnalytics('growth.onboarding_view_sample_event', {\n        platform: project.platform,\n        organization,\n      });\n    }\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n\n    // Navigated away before event was created - skip analytics and error messages\n    // latestEventAvailable will succeed even if the request was cancelled\n    if (!this._isMounted) {\n      return;\n    }\n\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    this.props.onClick?.();\n\n    browserHistory.push(\n      normalizeUrl(\n        `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}&referrer=sample-error`\n      )\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n    const validOrigins = [\n      ConfigStore.get('links').sentryUrl,\n      ConfigStore.get('links').organizationUrl,\n      document.location.origin,\n    ];\n    if (!validOrigins.includes(message.origin)) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data?.error ?? t('An unknown error occurred'));\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import {Button, ButtonProps} from 'sentry/components/button';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {IntegrationWithConfig} from 'sentry/types';\n\nimport AddIntegration from './addIntegration';\n\ninterface AddIntegrationButtonProps\n  extends Omit<ButtonProps, 'children' | 'analyticsParams'>,\n    Pick<\n      React.ComponentProps<typeof AddIntegration>,\n      'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n    > {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n}\n\nexport function AddIntegrationButton({\n  provider,\n  buttonText,\n  onAddIntegration,\n  organization,\n  reinstall,\n  analyticsParams,\n  modalParams,\n  ...buttonProps\n}: AddIntegrationButtonProps) {\n  const label =\n    buttonText ?? (reinstall ? t('Enable') : t('Add %s', provider.metadata.noun));\n\n  return (\n    <Tooltip\n      disabled={provider.canAdd}\n      title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n    >\n      <AddIntegration\n        provider={provider}\n        onInstall={onAddIntegration}\n        organization={organization}\n        analyticsParams={analyticsParams}\n        modalParams={modalParams}\n      >\n        {onClick => (\n          <Button\n            disabled={!provider.canAdd}\n            {...buttonProps}\n            onClick={() => onClick()}\n            aria-label={t('Add integration')}\n          >\n            {label}\n          </Button>\n        )}\n      </AddIntegration>\n    </Tooltip>\n  );\n}\n"],"names":["DocumentationWrapper","_styled","target","space","p","alertStyles","theme","type","border","pink400","borderRadius","Object","keys","alert","map","getAlertSelector","DEFAULT_POLL_INTERVAL","Footer","_ref2","projectSlug","projectId","router","newOrg","organization","useOrganization","preferences","useLegacyStore","PreferencesStore","firstError","setFirstError","useState","firstIssue","setFirstIssue","undefined","projects","useProjects","onboardingContext","useContext","OnboardingContext","projectData","data","selectedProject","find","project","slug","useApiQuery","staleTime","refetchInterval","enabled","status","OnboardingProjectStatus","onSuccess","_ref3","firstEvent","_ref4","issue","firstSeen","useEffect","setData","trackAnalytics","new_organization","project_id","platform","addSuccessMessage","t","firstIssueId","id","handleExploreSentry","useCallback","push","location","pathname","handleSkipOnboarding","source","selectedProjectId","async","_ref","nextLocation","mod","ChangeRouteModal","openModal","deps","_jsx","openChangeRouteModal","handleViewError","_jsxs","Wrapper","sidebarCollapsed","collapsed","children","Column","Button","onClick","priority","StatusesColumn","WaitingForErrorStatus","IconCircle","size","ErrorProcessedStatus","IconCheckmark","isCircled","color","ErrorProcessingStatus","RefreshIcon","ActionsColumn","disabled","title","displayName","GenericFooter","shouldForwardProp","prop","isPropValid","breakpoints","small","css","medium","sidebar","name","styles","gray500","fontSizeLarge","gray200","gray300","inverted","background","textColor","IconRefresh","motion","defaultProps","initial","animate","exit","variants","transition","testableTransition","staggerChildren","AddInstallationInstructions","Fragment","tct","learnMore","ExternalLink","href","addInstallation","manualSetup","PostInstallCodeSnippet","provider","isOnboarding","token_punctuation","CodeWrapper","TokenFunction","TokenPunctuation","EVENT_POLL_INTERVAL","CreateSampleEventButton","Component","constructor","arguments","_defineProperty","creating","api","onCreateSampleGroup","this","props","eventData","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","requestPromise","method","error","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","_isMounted","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","normalizeUrl","componentDidMount","componentWillUnmount","eventKey","interval","render","_api","_organization","_project","_source","state","createSampleGroup","withApi","withOrganization","AddIntegration","urlParams","account","analyticsParams","modalParams","trackIntegrationAnalytics","integration","key","integration_type","width","height","setupDialog","left","top","computeCenteredWindow","query","installUrl","qs","opts","dialog","open","focus","message","onInstall","ConfigStore","sentryUrl","organizationUrl","document","origin","includes","success","addEventListener","didReceiveMessage","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","Tooltip","canAdd"],"sourceRoot":""}