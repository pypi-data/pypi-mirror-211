{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/edit.tsx","webpack:///./app/views/alerts/edit.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport RuleForm from 'sentry/views/alerts/rules/metric/ruleForm';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype RouteParams = {\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  onChangeTitle: (data: string) => void;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  actions: Map<string, any>;\n  rule: MetricRule; // This is temp\n} & AsyncView['state'];\n\nclass MetricRulesEdit extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getTitle(): string {\n    const {organization, project} = this.props;\n    const {rule} = this.state;\n    const ruleName = rule?.name;\n\n    return routeTitleGen(\n      ruleName ? t('Alert %s', ruleName) : '',\n      organization.slug,\n      false,\n      project?.slug\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${organization.slug}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {rule} = this.state;\n    if (rule?.errors) {\n      (rule?.errors || []).map(({detail}) => addErrorMessage(detail, {append: true}));\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {organization, router} = this.props;\n    const {ruleId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/alerts/rules/details/${ruleId}/`,\n      })\n    );\n  };\n\n  renderError(error?: Error, disableLog = false): React.ReactNode {\n    const {errors} = this.state;\n    const notFound = Object.values(errors).find(resp => resp && resp.status === 404);\n    if (notFound) {\n      return (\n        <Alert type=\"error\" showIcon>\n          {t('This alert rule could not be found.')}\n        </Alert>\n      );\n    }\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        disableProjectSelector\n      />\n    );\n  }\n}\n\nexport default MetricRulesEdit;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Member, Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesEdit from 'sentry/views/alerts/rules/metric/edit';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\ntype RouteParams = {\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  members: Member[] | undefined;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAnalytics('edit_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): AlertRuleType {\n    return location.pathname.includes('/alerts/metric-rules/')\n      ? AlertRuleType.METRIC\n      : AlertRuleType.ISSUE;\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes, members} =\n      this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueEditor\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                      members={members}\n                    />\n                  )}\n                  {hasMetricAlerts && alertType === AlertRuleType.METRIC && (\n                    <MetricRulesEdit\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"names":["MetricRulesEdit","AsyncView","constructor","arguments","_defineProperty","organization","router","this","props","ruleId","params","metric","name","push","normalizeUrl","pathname","slug","getDefaultState","super","actions","Map","getTitle","project","rule","state","ruleName","routeTitleGen","t","getEndpoints","onRequestSuccess","_ref","stateKey","data","onChangeTitle","onLoadAllEndpointsSuccess","errors","map","_ref2","detail","addErrorMessage","append","renderError","error","disableLog","length","undefined","Object","values","find","resp","status","_jsx","Alert","type","showIcon","children","renderBody","RuleForm","onSubmitSuccess","handleSubmitSuccess","disableProjectSelector","ProjectAlertsEditor","Component","setState","componentDidMount","trackAnalytics","project_id","id","alert_type","getAlertType","location","includes","AlertRuleType","render","hasMetricAlerts","routes","members","alertType","_jsxs","Fragment","SentryDocumentTitle","title","orgSlug","projectSlug","Layout","BuilderBreadCrumbs","EditConditionsBody","Teams","provideUserTeams","teams","initiallyLoaded","IssueEditor","handleChangeTitle","userTeamIds","_ref3","LoadingIndicator","displayName","_styled","target","styles"],"sourceRoot":""}