{"version":3,"file":"chunks/app_components_performance_layouts_index_tsx-app_views_starfish_components_miniChartPanel_tsx-1951a7.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/performance/layouts/index.tsx","webpack:///./app/views/discover/table/topResultsIndicator.tsx","webpack:///./app/views/starfish/components/miniChartPanel.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdown.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdownContainer.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\n/**\n * Common performance layouts\n */\n\nexport const PerformanceLayoutBodyRow = styled('div')<{\n  minSize: number;\n  columns?: number;\n}>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n  grid-row-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    ${p =>\n      p.columns\n        ? `\n    grid-template-columns: repeat(${p.columns}, 1fr);\n    `\n        : `\n    grid-template-columns: repeat(auto-fit, minmax(${p.minSize}px, 1fr));\n    `}\n  }\n`;\n","import styled from '@emotion/styled';\n\ntype TopResultsIndicatorProps = {\n  count: number;\n  index: number;\n};\n\nexport const TopResultsIndicator = styled('div')<TopResultsIndicatorProps>`\n  position: absolute;\n  left: -1px;\n  margin-top: 4.5px;\n  width: 9px;\n  height: 15px;\n  border-radius: 0 3px 3px 0;\n\n  background-color: ${p => {\n    // this background color needs to match the colors used in\n    // app/components/charts/eventsChart so that the ordering matches\n\n    // the color pallete contains n + 2 colors, so we subtract 2 here\n    return p.theme.charts.getColorPalette(p.count - 2)[p.index];\n  }};\n`;\n\nexport default TopResultsIndicator;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\nimport textStyles from 'sentry/styles/text';\n\ntype Props = {\n  children: React.ReactNode;\n  button?: JSX.Element;\n  title?: string;\n};\n\nexport default function MiniChartPanel({title, children, button}: Props) {\n  return (\n    <Panel>\n      <PanelBody>\n        <Header>\n          {title && <ChartLabel>{title}</ChartLabel>}\n          {button}\n        </Header>\n        {children}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} ${space(1)} 0;\n  min-height: 24px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst PanelBody = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  ${textStyles};\n`;\n","import {Fragment, useEffect, useState} from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport Duration from 'sentry/components/duration';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {NumberContainer} from 'sentry/utils/discover/styles';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport TopResultsIndicator from 'sentry/views/discover/table/topResultsIndicator';\nimport {RightAlignedCell} from 'sentry/views/performance/landing/widgets/components/selectableList';\nimport {getSegmentLabelForTable} from 'sentry/views/starfish/components/breakdownBar';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport {DataRow} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  colorPalette: string[];\n  initialShowSeries: boolean[];\n  isTableLoading: boolean;\n  tableData: DataRow[];\n  topSeriesData: Series[];\n  totalCumulativeTime: number;\n};\n\nexport function SpanGroupBreakdown({\n  tableData: transformedData,\n  totalCumulativeTime: totalValues,\n  topSeriesData: data,\n  initialShowSeries,\n}: Props) {\n  const {selection} = usePageFilters();\n  const [showSeriesArray, setShowSeriesArray] = useState<boolean[]>(initialShowSeries);\n\n  useEffect(() => {\n    setShowSeriesArray(initialShowSeries);\n  }, [initialShowSeries]);\n\n  const visibleSeries: Series[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const series = data[index];\n    if (showSeriesArray[index]) {\n      visibleSeries.push(series);\n    }\n  }\n\n  return (\n    <Fragment>\n      <ChartPadding>\n        <Header>\n          <ChartLabel>{'p50 of Span Groups With Highest Cumulative Times'}</ChartLabel>\n        </Header>\n        <Chart\n          statsPeriod=\"24h\"\n          height={175}\n          data={visibleSeries}\n          start=\"\"\n          end=\"\"\n          loading={false}\n          utc={false}\n          grid={{\n            left: '0',\n            right: '0',\n            top: '8px',\n            bottom: '0',\n          }}\n          definedAxisTicks={6}\n          stacked\n          aggregateOutputFormat=\"duration\"\n        />\n      </ChartPadding>\n      <ListContainer>\n        {transformedData.map((row, index) => {\n          const checkedValue = showSeriesArray[index];\n          const group = row.group;\n          const {start, end, utc, period} = selection.datetime;\n          const spansLinkQueryParams =\n            start && end\n              ? {start: getUtcDateString(start), end: getUtcDateString(end), utc}\n              : {statsPeriod: period};\n          ['span_operation', 'action', 'domain'].forEach(key => {\n            if (group[key] !== undefined && group[key] !== null) {\n              spansLinkQueryParams[key] = group[key];\n            }\n          });\n\n          const spansLink =\n            group.module === 'other'\n              ? `/starfish/spans/`\n              : `/starfish/spans/?${qs.stringify(spansLinkQueryParams)}`;\n          return (\n            <StyledLineItem\n              key={`${group.span_operation}-${group.action}-${group.domain}`}\n            >\n              <ListItemContainer>\n                <StyledTopResultsIndicator\n                  count={Math.max(transformedData.length - 1, 1)}\n                  index={index}\n                />\n                <Checkbox\n                  size=\"sm\"\n                  checked={checkedValue}\n                  onChange={() => {\n                    const updatedSeries = [...showSeriesArray];\n                    updatedSeries[index] = !checkedValue;\n                    setShowSeriesArray(updatedSeries);\n                  }}\n                />\n                <TextAlignLeft>\n                  <Link to={spansLink}>\n                    <TextOverflow>\n                      {getSegmentLabelForTable(\n                        group.span_operation,\n                        group.action,\n                        group.domain\n                      )}\n                    </TextOverflow>\n                  </Link>\n                </TextAlignLeft>\n                <RightAlignedCell>\n                  <Tooltip\n                    title={t(\n                      'This group of spans account for %s of the cumulative time on your web service',\n                      formatPercentage(row.cumulativeTime / totalValues, 1)\n                    )}\n                    containerDisplayMode=\"block\"\n                    position=\"top\"\n                  >\n                    <NumberContainer>\n                      {tct('[cumulativeTime] ([cumulativeTimePercentage])', {\n                        cumulativeTime: (\n                          <Duration\n                            seconds={row.cumulativeTime / 1000}\n                            fixedDigits={1}\n                            abbreviation\n                          />\n                        ),\n                        cumulativeTimePercentage: formatPercentage(\n                          row.cumulativeTime / totalValues,\n                          1\n                        ),\n                      })}\n                    </NumberContainer>\n                  </Tooltip>\n                </RightAlignedCell>\n              </ListItemContainer>\n            </StyledLineItem>\n          );\n        })}\n      </ListContainer>\n    </Fragment>\n  );\n}\n\nconst StyledLineItem = styled('li')`\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst ListItemContainer = styled('div')`\n  display: flex;\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ListContainer = styled('ul')`\n  padding: ${space(1)} 0 0 0;\n  margin: 0;\n  list-style-type: none;\n`;\n\nconst TextAlignLeft = styled('span')`\n  text-align: left;\n  width: 100%;\n  padding: 0 ${space(1.5)};\n`;\n\nconst ChartPadding = styled('div')`\n  padding: 0 ${space(2)};\n`;\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StyledTopResultsIndicator = styled(TopResultsIndicator)`\n  margin-top: 0px;\n`;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport {Panel} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {getSegmentLabel} from 'sentry/views/starfish/components/breakdownBar';\nimport {PERIOD_REGEX} from 'sentry/views/starfish/utils/dates';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {\n  getOtherDomainsActionsAndOpTimeseries,\n  getTopDomainsActionsAndOp,\n  getTopDomainsActionsAndOpTimeseries,\n  totalCumulativeTime,\n} from 'sentry/views/starfish/views/webServiceView/queries';\nimport {SpanGroupBreakdown} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdown';\n\nconst HOST = 'http://localhost:8080';\n\nexport const OTHER_SPAN_GROUP_MODULE = 'other';\n\ntype Props = {\n  transaction?: string;\n};\n\ntype Group = {\n  action: string;\n  domain: string;\n  module: string;\n  span_operation: string;\n  transaction?: string;\n};\n\nexport type Segment = Group & {\n  num_spans: number;\n  sum: number;\n};\n\nexport type DataRow = {\n  cumulativeTime: number;\n  group: Group;\n};\n\nexport function SpanGroupBreakdownContainer({transaction: maybeTransaction}: Props) {\n  const transaction = maybeTransaction ?? '';\n  const pageFilter = usePageFilters();\n  const {selection} = pageFilter;\n  const theme = useTheme();\n\n  const {data: segments, isLoading: isSegmentsLoading} = useQuery<Segment[]>({\n    queryKey: ['webServiceSpanGrouping', transaction, selection.datetime],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getTopDomainsActionsAndOp({\n          transaction,\n          datetime: selection.datetime,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const {data: cumulativeTime} = useQuery({\n    queryKey: ['totalCumulativeTime', transaction, selection.datetime],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${totalCumulativeTime({\n          transaction,\n          datetime: selection.datetime,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const totalValues = cumulativeTime.reduce((acc, segment) => acc + segment.sum, 0);\n  const totalSegments = segments.reduce((acc, segment) => acc + segment.sum, 0);\n  const otherValue = totalValues - totalSegments;\n\n  const transformedData: DataRow[] = [];\n\n  for (let index = 0; index < segments.length; index++) {\n    const element = segments[index];\n    transformedData.push({\n      cumulativeTime: element.sum,\n      group: {\n        action: element.action,\n        domain: element.domain,\n        module: element.module,\n        span_operation: element.span_operation,\n        transaction: element.transaction,\n      },\n    });\n  }\n\n  transformedData.push({\n    cumulativeTime: otherValue,\n    group: {\n      action: '',\n      domain: '',\n      module: OTHER_SPAN_GROUP_MODULE,\n      span_operation: 'Other',\n      transaction: '',\n    },\n  });\n\n  let topConditions =\n    segments.length > 0\n      ? ` (span_operation = '${segments[0].span_operation}' ${\n          segments[0].action ? `AND action = '${segments[0].action}'` : ''\n        } ${segments[0].domain ? `AND domain = '${segments[0].domain}'` : ''})`\n      : '';\n\n  for (let index = 1; index < segments.length; index++) {\n    const element = segments[index];\n    topConditions = topConditions.concat(\n      ' OR ',\n      `(span_operation = '${element.span_operation}' ${\n        element.action ? `AND action = '${element.action}'` : ''\n      } ${element.domain ? `AND domain = '${element.domain}'` : ''})`\n    );\n  }\n\n  const {isLoading: isTopDataLoading, data: topData} = useQuery({\n    queryKey: ['topSpanGroupTimeseries', transaction, topConditions, selection.datetime],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getTopDomainsActionsAndOpTimeseries({\n          transaction,\n          topConditions,\n          datetime: selection.datetime,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const {isLoading: isOtherDataLoading, data: otherData} = useQuery({\n    queryKey: [\n      'otherSpanGroupTimeseries',\n      transaction,\n      topConditions,\n      selection.datetime,\n    ],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getOtherDomainsActionsAndOpTimeseries({\n          transaction,\n          topConditions,\n          datetime: selection.datetime,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const seriesByDomain: {[module: string]: Series} = {};\n  const [_, num, unit] = pageFilter.selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const start =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(pageFilter.selection.datetime.start);\n  const end = moment(pageFilter.selection.datetime.end ?? undefined);\n\n  const colorPalette = theme.charts.getColorPalette(transformedData.length - 3);\n\n  if (!isTopDataLoading && !isOtherDataLoading && segments.length > 0) {\n    segments.forEach((segment, index) => {\n      const label = getSegmentLabel(\n        segment.span_operation,\n        segment.action,\n        segment.domain\n      );\n      seriesByDomain[label] = {\n        seriesName: `${label}`,\n        data: [],\n        color: colorPalette[index],\n      };\n    });\n\n    topData.forEach(value => {\n      seriesByDomain[\n        getSegmentLabel(value.span_operation, value.action, value.domain)\n      ].data.push({value: value.p50, name: value.interval});\n    });\n\n    seriesByDomain.Other = {\n      seriesName: `Other`,\n      data: [],\n      color: theme.gray100,\n    };\n\n    otherData.forEach(value => {\n      seriesByDomain.Other.data.push({value: value.p50, name: value.interval});\n    });\n  }\n\n  const data = Object.values(seriesByDomain).map(series =>\n    zeroFillSeries(series, moment.duration(12, 'hour'), start, end)\n  );\n\n  const initialShowSeries = transformedData.map(\n    segment => segment.group.module !== OTHER_SPAN_GROUP_MODULE\n  );\n\n  if (isTopDataLoading || isSegmentsLoading) {\n    return (\n      <Panel>\n        <Placeholder height=\"600px\" />\n      </Panel>\n    );\n  }\n\n  return (\n    <StyledPanel>\n      <SpanGroupBreakdown\n        tableData={transformedData}\n        totalCumulativeTime={totalValues}\n        isTableLoading={isSegmentsLoading}\n        topSeriesData={data}\n        colorPalette={colorPalette}\n        initialShowSeries={initialShowSeries}\n      />\n    </StyledPanel>\n  );\n}\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\n"],"names":["PerformanceLayoutBodyRow","_styled","target","space","p","theme","breakpoints","small","medium","columns","minSize","charts","getColorPalette","count","index","MiniChartPanel","_ref","title","children","button","_jsx","Panel","_jsxs","PanelBody","Header","ChartLabel","displayName","text","cardTitle","textStyles","SpanGroupBreakdown","tableData","transformedData","totalCumulativeTime","totalValues","topSeriesData","data","initialShowSeries","selection","usePageFilters","showSeriesArray","setShowSeriesArray","useState","useEffect","visibleSeries","length","series","push","Fragment","ChartPadding","Chart","statsPeriod","height","start","end","loading","utc","grid","left","right","top","bottom","definedAxisTicks","stacked","aggregateOutputFormat","ListContainer","map","row","checkedValue","group","period","datetime","spansLinkQueryParams","getUtcDateString","forEach","key","undefined","spansLink","module","qs","StyledLineItem","ListItemContainer","StyledTopResultsIndicator","Math","max","Checkbox","size","checked","onChange","updatedSeries","TextAlignLeft","Link","to","TextOverflow","getSegmentLabelForTable","span_operation","action","domain","RightAlignedCell","Tooltip","t","formatPercentage","cumulativeTime","containerDisplayMode","position","NumberContainer","tct","Duration","seconds","fixedDigits","abbreviation","cumulativeTimePercentage","lineHeightBody","border","fontSizeMedium","TopResultsIndicator","name","styles","HOST","OTHER_SPAN_GROUP_MODULE","SpanGroupBreakdownContainer","transaction","maybeTransaction","pageFilter","useTheme","segments","isLoading","isSegmentsLoading","useQuery","queryKey","queryFn","fetch","getTopDomainsActionsAndOp","then","res","json","retry","initialData","reduce","acc","segment","sum","otherValue","element","topConditions","concat","isTopDataLoading","topData","getTopDomainsActionsAndOpTimeseries","isOtherDataLoading","otherData","getOtherDomainsActionsAndOpTimeseries","seriesByDomain","_","num","unit","match","PERIOD_REGEX","moment","subtract","colorPalette","label","getSegmentLabel","seriesName","color","value","p50","interval","Other","gray100","Object","values","zeroFillSeries","Placeholder","StyledPanel","isTableLoading"],"sourceRoot":""}