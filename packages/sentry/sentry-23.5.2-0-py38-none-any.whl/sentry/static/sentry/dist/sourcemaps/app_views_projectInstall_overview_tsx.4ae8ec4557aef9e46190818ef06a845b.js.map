{"version":3,"file":"chunks/app_views_projectInstall_overview_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/overview.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport {Button} from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport PlatformPicker, {PLATFORM_CATEGORIES} from 'sentry/components/platformPicker';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport platforms from 'sentry/data/platforms';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = RouteComponentProps<{projectId: string}, {}>;\n\nexport function ProjectInstallOverview({params, routes, location}: Props) {\n  const [showDsn, setShowDsn] = useState(false);\n  const {projectId: projectSlug} = params;\n  const organization = useOrganization();\n  const {projects} = useProjects();\n\n  const issueStreamLink = `/organizations/${organization.slug}/issues/#welcome`;\n  const isGettingStarted = window.location.href.indexOf('getting-started') > 0;\n\n  const project = projects.find(p => p.slug === projectSlug);\n  const platform = project ? platforms.find(p => p.id === project.platform) : undefined;\n  const category = PLATFORM_CATEGORIES.find(c =>\n    c.platforms?.some(p => p === platform?.id)\n  )?.id;\n\n  const {\n    data: keyList,\n    isLoading,\n    isError,\n    refetch,\n  } = useApiQuery<ProjectKey[]>([`/projects/${organization.slug}/${projectSlug}/keys/`], {\n    staleTime: Infinity,\n  });\n\n  const redirectToDocs = useCallback(\n    (platformKey: PlatformKey | null) => {\n      const installUrl = isGettingStarted\n        ? `/organizations/${organization.slug}/projects/${projectSlug}/getting-started/${platformKey}/`\n        : recreateRoute(`${platformKey}/`, {\n            routes,\n            location,\n            params,\n            stepBack: -1,\n          });\n\n      browserHistory.push(normalizeUrl(installUrl));\n    },\n    [projectSlug, isGettingStarted, organization.slug, routes, location, params]\n  );\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} />;\n  }\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Instrumentation')} projectSlug={projectSlug} />\n      <SettingsPageHeader title={t('Configure your application')} />\n      <TextBlock>\n        {t(\n          'Get started by selecting the platform or language that powers your application.'\n        )}\n      </TextBlock>\n\n      {showDsn ? (\n        <DsnInfo>\n          <DsnContainer>\n            <strong>{t('DSN')}</strong>\n            <DsnValue>\n              <AutoSelectText>{keyList?.[0].dsn.public}</AutoSelectText>\n            </DsnValue>\n          </DsnContainer>\n\n          <Button priority=\"primary\" to={issueStreamLink}>\n            {t('Got it! Take me to the Issue Stream.')}\n          </Button>\n        </DsnInfo>\n      ) : (\n        <p>\n          <small>\n            {tct('Already have things setup? [link:Get your DSN]', {\n              link: (\n                <Button\n                  priority=\"link\"\n                  onClick={() => setShowDsn(!showDsn)}\n                  aria-label={t('Get your DSN')}\n                />\n              ),\n            })}\n            .\n          </small>\n        </p>\n      )}\n      <PlatformPicker\n        setPlatform={selectedPlatform => redirectToDocs(selectedPlatform?.id ?? null)}\n        showOther={false}\n        organization={organization}\n        defaultCategory={category}\n        platform={platform?.id}\n      />\n      <p>\n        {tct(\n          `For a complete list of client integrations, please see\n             [docLink:our in-depth documentation].`,\n          {docLink: <ExternalLink href=\"https://docs.sentry.io\" />}\n        )}\n      </p>\n    </div>\n  );\n}\n\nconst DsnValue = styled('code')`\n  overflow: hidden;\n`;\n\nconst DsnInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst DsnContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1.5)} ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n"],"names":["ProjectInstallOverview","_ref","params","routes","location","showDsn","setShowDsn","useState","projectId","projectSlug","organization","useOrganization","projects","useProjects","issueStreamLink","slug","isGettingStarted","window","href","indexOf","project","find","p","platform","platforms","id","undefined","category","PLATFORM_CATEGORIES","c","some","data","keyList","isLoading","isError","refetch","useApiQuery","staleTime","Infinity","redirectToDocs","useCallback","platformKey","installUrl","recreateRoute","stepBack","browserHistory","normalizeUrl","_jsx","LoadingIndicator","LoadingError","onRetry","_jsxs","children","SentryDocumentTitle","title","t","SettingsPageHeader","TextBlock","DsnInfo","DsnContainer","DsnValue","AutoSelectText","dsn","public","Button","priority","to","tct","link","onClick","PlatformPicker","setPlatform","selectedPlatform","showOther","defaultCategory","docLink","ExternalLink","displayName","_styled","target","name","styles","space"],"sourceRoot":""}