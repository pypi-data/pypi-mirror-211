{"version":3,"file":"chunks/app_views_issueDetails_groupUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/issueDetails/groupUserFeedback.tsx","webpack:///./app/views/issueDetails/utils.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {EventUserFeedback} from 'sentry/components/events/userFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization, Project, UserReport} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {UserFeedbackEmpty} from 'sentry/views/userFeedback/userFeedbackEmpty';\n\nimport {fetchGroupUserReports} from './utils';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  environments: string[];\n  group: Group;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  reportList: UserReport[];\n  pageLinks?: string | null;\n};\n\nclass GroupUserFeedback extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    reportList: [],\n    pageLinks: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(prevProps.params, this.props.params) ||\n      prevProps.location.pathname !== this.props.location.pathname ||\n      prevProps.location.search !== this.props.location.search\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, {\n      ...this.props.params,\n      cursor: this.props.location.query.cursor || '',\n    })\n      .then(([data, _, resp]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: resp?.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList, loading, error} = this.state;\n    const {organization, group} = this.props;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <Layout.Body>\n          <Layout.Main>\n            {reportList.map((item, idx) => (\n              <StyledEventUserFeedback\n                key={idx}\n                report={item}\n                orgId={organization.slug}\n                issueId={group.id}\n              />\n            ))}\n            <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n          </Layout.Main>\n        </Layout.Body>\n      );\n    }\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <UserFeedbackEmpty projectIds={[group.project.id]} />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(GroupUserFeedback);\n","import {useMemo} from 'react';\nimport orderBy from 'lodash/orderBy';\n\nimport {bulkUpdate, useFetchIssueTags} from 'sentry/actionCreators/group';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Group, GroupActivity} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {useLocation} from 'sentry/utils/useLocation';\n\nexport function markEventSeen(\n  api: Client,\n  orgId: string,\n  projectId: string,\n  groupId: string\n) {\n  bulkUpdate(\n    api,\n    {\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    },\n    {}\n  );\n}\n\nexport function fetchGroupUserReports(groupId: string, query: Record<string, string>) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param event\n */\nexport function getEventEnvironment(event: Event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n\nconst SUBSCRIPTION_REASONS = {\n  commented: t(\n    \"You're receiving workflow notifications because you have commented on this issue.\"\n  ),\n  assigned: t(\n    \"You're receiving workflow notifications because you were assigned to this issue.\"\n  ),\n  bookmarked: t(\n    \"You're receiving workflow notifications because you have bookmarked this issue.\"\n  ),\n  changed_status: t(\n    \"You're receiving workflow notifications because you have changed the status of this issue.\"\n  ),\n  mentioned: t(\n    \"You're receiving workflow notifications because you have been mentioned in this issue.\"\n  ),\n};\n\n/**\n * @param group\n * @param removeLinks add/remove links to subscription reasons text (default: false)\n * @returns Reason for subscription\n */\nexport function getSubscriptionReason(group: Group) {\n  if (group.subscriptionDetails && group.subscriptionDetails.disabled) {\n    return t('You have disabled workflow notifications for this project.');\n  }\n\n  if (!group.isSubscribed) {\n    return t('Subscribe to workflow notifications for this issue');\n  }\n\n  if (group.subscriptionDetails) {\n    const {reason} = group.subscriptionDetails;\n    if (reason === 'unknown') {\n      return t(\n        \"You're receiving workflow notifications because you are subscribed to this issue.\"\n      );\n    }\n\n    if (reason && SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {\n      return SUBSCRIPTION_REASONS[reason];\n    }\n  }\n\n  return t(\n    \"You're receiving updates because you are subscribed to workflow notifications for this project.\"\n  );\n}\n\nexport function getGroupMostRecentActivity(activities: GroupActivity[]) {\n  // Most recent activity\n  return orderBy([...activities], ({dateCreated}) => new Date(dateCreated), ['desc'])[0];\n}\n\nexport enum ReprocessingStatus {\n  REPROCESSED_AND_HASNT_EVENT = 'reprocessed_and_hasnt_event',\n  REPROCESSED_AND_HAS_EVENT = 'reprocessed_and_has_event',\n  REPROCESSING = 'reprocessing',\n  NO_STATUS = 'no_status',\n}\n\n// Reprocessing Checks\nexport function getGroupReprocessingStatus(\n  group: Group,\n  mostRecentActivity?: GroupActivity\n) {\n  const {status, count, activity: activities} = group;\n  const groupCount = Number(count);\n\n  switch (status) {\n    case 'reprocessing':\n      return ReprocessingStatus.REPROCESSING;\n    case 'unresolved': {\n      const groupMostRecentActivity =\n        mostRecentActivity ?? getGroupMostRecentActivity(activities);\n      if (groupMostRecentActivity?.type === 'reprocess') {\n        if (groupCount === 0) {\n          return ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT;\n        }\n        return ReprocessingStatus.REPROCESSED_AND_HAS_EVENT;\n      }\n      return ReprocessingStatus.NO_STATUS;\n    }\n    default:\n      return ReprocessingStatus.NO_STATUS;\n  }\n}\n\nexport const useFetchIssueTagsForDetailsPage = (\n  {\n    groupId,\n    environment = [],\n  }: {\n    environment: string[];\n    groupId?: string;\n  },\n  {enabled = true}: {enabled?: boolean} = {}\n) => {\n  return useFetchIssueTags(\n    {\n      groupId,\n      environment,\n      readable: true,\n      limit: 4,\n    },\n    {enabled}\n  );\n};\n\nexport function useEnvironmentsFromUrl(): string[] {\n  const location = useLocation();\n  const envs = location.query.environment;\n\n  const envsArray = useMemo(() => {\n    return typeof envs === 'string' ? [envs] : envs ?? [];\n  }, [envs]);\n\n  return envsArray;\n}\n"],"names":["GroupUserFeedback","Component","constructor","arguments","_defineProperty","loading","error","reportList","pageLinks","this","setState","fetchGroupUserReports","props","group","id","params","cursor","location","query","then","_ref","data","_","resp","getResponseHeader","catch","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","pathname","search","render","state","organization","_jsx","LoadingIndicator","LoadingError","onRetry","length","Layout","children","_jsxs","map","item","idx","StyledEventUserFeedback","report","orgId","slug","issueId","Pagination","fullWidth","UserFeedbackEmpty","projectIds","project","displayName","_styled","EventUserFeedback","target","space","withOrganization","markEventSeen","api","projectId","groupId","bulkUpdate","itemIds","failSilently","hasSeen","Client","requestPromise","includeAllArgs","getEventEnvironment","event","tag","tags","find","key","value","SUBSCRIPTION_REASONS","commented","t","assigned","bookmarked","changed_status","mentioned","getSubscriptionReason","subscriptionDetails","disabled","isSubscribed","reason","hasOwnProperty","getGroupMostRecentActivity","activities","orderBy","_ref2","dateCreated","Date","ReprocessingStatus","getGroupReprocessingStatus","mostRecentActivity","status","count","activity","groupCount","Number","REPROCESSING","groupMostRecentActivity","type","REPROCESSED_AND_HASNT_EVENT","REPROCESSED_AND_HAS_EVENT","NO_STATUS","useFetchIssueTagsForDetailsPage","_ref3","environment","enabled","undefined","useFetchIssueTags","readable","limit","useEnvironmentsFromUrl","envs","useLocation","useMemo"],"sourceRoot":""}