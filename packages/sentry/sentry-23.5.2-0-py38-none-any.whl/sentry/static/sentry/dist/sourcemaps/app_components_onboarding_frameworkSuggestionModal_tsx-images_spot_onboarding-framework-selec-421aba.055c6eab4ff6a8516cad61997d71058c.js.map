{"version":3,"file":"chunks/app_components_onboarding_frameworkSuggestionModal_tsx-images_spot_onboarding-framework-selec-421aba.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboarding/frameworkSuggestionModal.tsx"],"sourcesContent":["import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {PlatformIcon} from 'platformicons';\n\nimport onboardingFrameworkSelectionJavascript from 'sentry-images/spot/onboarding-framework-selection-javascript.svg';\nimport onboardingFrameworkSelectionNode from 'sentry-images/spot/onboarding-framework-selection-node.svg';\nimport onboardingFrameworkSelectionPython from 'sentry-images/spot/onboarding-framework-selection-python.svg';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport Radio from 'sentry/components/radio';\nimport categoryList from 'sentry/data/platformCategories';\nimport platforms from 'sentry/data/platforms';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {OnboardingSelectedSDK, Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nexport enum SUPPORTED_LANGUAGES {\n  JAVASCRIPT = 'javascript',\n  PYTHON = 'python',\n  NODE = 'node',\n}\n\nexport const languageDetails = {\n  [SUPPORTED_LANGUAGES.JAVASCRIPT]: {\n    description: t(\n      'Our JavaScript framework SDK’s include all the features of our Browser Javascript SDK with additional features specific to that framework'\n    ),\n    topFrameworksImage: onboardingFrameworkSelectionJavascript,\n  },\n  [SUPPORTED_LANGUAGES.NODE]: {\n    description: t(\n      'Our Node framework SDK’s include all the features of our Node SDK with instructions specific to that framework'\n    ),\n    topFrameworksImage: onboardingFrameworkSelectionNode,\n  },\n  [SUPPORTED_LANGUAGES.PYTHON]: {\n    description: t(\n      'Our Python framework SDK’s include all the features of our Python SDK with instructions specific to that framework'\n    ),\n    topFrameworksImage: onboardingFrameworkSelectionPython,\n  },\n};\n\ntype Props = ModalRenderProps & {\n  onConfigure: (selectedFramework: OnboardingSelectedSDK) => void;\n  onSkip: () => void;\n  organization: Organization;\n  selectedPlatform: OnboardingSelectedSDK;\n  newOrg?: boolean;\n};\n\nexport function FrameworkSuggestionModal({\n  Body,\n  Footer,\n  selectedPlatform,\n  onSkip,\n  onConfigure,\n  closeModal,\n  CloseButton,\n  organization,\n  newOrg,\n}: Props) {\n  const [selectedFramework, setSelectedFramework] = useState<\n    OnboardingSelectedSDK | undefined\n  >(undefined);\n\n  const frameworks = platforms.filter(\n    platform =>\n      platform.type === 'framework' && platform.language === selectedPlatform.key\n  );\n\n  useEffect(() => {\n    trackAnalytics(\n      newOrg\n        ? 'onboarding.select_framework_modal_rendered'\n        : 'project_creation.select_framework_modal_rendered',\n      {\n        platform: selectedPlatform.key,\n        organization,\n      }\n    );\n  }, [selectedPlatform.key, organization, newOrg]);\n\n  const handleConfigure = useCallback(() => {\n    if (!selectedFramework) {\n      return;\n    }\n\n    trackAnalytics(\n      newOrg\n        ? 'onboarding.select_framework_modal_configure_sdk_button_clicked'\n        : 'project_creation.select_framework_modal_configure_sdk_button_clicked',\n      {\n        platform: selectedPlatform.key,\n        framework: selectedFramework.key,\n        organization,\n      }\n    );\n\n    onConfigure(selectedFramework);\n    closeModal();\n  }, [\n    selectedPlatform,\n    selectedFramework,\n    organization,\n    onConfigure,\n    closeModal,\n    newOrg,\n  ]);\n\n  const handleSkip = useCallback(() => {\n    trackAnalytics(\n      newOrg\n        ? 'onboarding.select_framework_modal_skip_button_clicked'\n        : 'project_creation.select_framework_modal_skip_button_clicked',\n      {\n        platform: selectedPlatform.key,\n        organization,\n      }\n    );\n    onSkip();\n    closeModal();\n  }, [selectedPlatform, organization, closeModal, onSkip, newOrg]);\n\n  return (\n    <Fragment>\n      <Header>\n        <CloseButton onClick={closeModal} />\n      </Header>\n      <Body>\n        <TopFrameworksImage\n          src={languageDetails[selectedPlatform.key].topFrameworksImage}\n        />\n        <Heading>{t('Do you use a framework?')}</Heading>\n        <Description>{languageDetails[selectedPlatform.key].description}</Description>\n        <Panel>\n          <PanelBody>\n            <Frameworks>\n              {frameworks.map((framework, index) => {\n                const frameworkCategory =\n                  categoryList.find(category => {\n                    return category.platforms.includes(framework.id as never);\n                  })?.id ?? 'all';\n\n                return (\n                  <Framework key={framework.id}>\n                    <RadioLabel\n                      index={index}\n                      onClick={() =>\n                        setSelectedFramework({\n                          key: framework.id,\n                          type: framework.type,\n                          language: framework.language,\n                          category: frameworkCategory,\n                        })\n                      }\n                    >\n                      <RadioBox\n                        radioSize=\"small\"\n                        checked={selectedFramework?.key === framework.id}\n                        readOnly\n                      />\n                      <FrameworkIcon size={24} platform={framework.id} />\n                      {framework.name}\n                    </RadioLabel>\n                  </Framework>\n                );\n              })}\n            </Frameworks>\n          </PanelBody>\n        </Panel>\n      </Body>\n      <Footer>\n        <Actions>\n          <Button size=\"md\" onClick={handleSkip}>\n            {t('Skip')}\n          </Button>\n          <Button\n            size=\"md\"\n            priority=\"primary\"\n            onClick={handleConfigure}\n            disabled={!selectedFramework}\n            title={!selectedFramework ? t('Select a framework to configure') : undefined}\n          >\n            {t('Configure SDK')}\n          </Button>\n        </Actions>\n      </Footer>\n    </Fragment>\n  );\n}\n\nconst Header = styled('header')`\n  position: relative;\n  height: 30px;\n\n  margin: -${space(4)} -${space(2)} 0 -${space(3)};\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin: -${space(4)} -${space(4)} 0 -${space(4)};\n  }\n`;\n\nconst TopFrameworksImage = styled('img')`\n  margin-bottom: ${space(2)};\n`;\n\nconst Heading = styled('h6')`\n  margin-bottom: ${space(1)};\n  text-align: center;\n`;\n\nconst Description = styled(TextBlock)`\n  margin-bottom: ${space(2)};\n  text-align: center;\n`;\n\nconst Frameworks = styled(List)`\n  max-height: 240px;\n  overflow-y: auto;\n`;\n\nconst Framework = styled(ListItem)`\n  height: 40px;\n  display: grid;\n  text-align: left;\n  cursor: pointer;\n  :not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst FrameworkIcon = styled(PlatformIcon)`\n  border: 1px solid ${p => p.theme.innerBorder};\n`;\n\nconst RadioLabel = styled(RadioLineItem)`\n  display: inline-grid;\n  grid-template-columns: max-content max-content 1fr;\n  align-items: center;\n  padding: ${space(1)} ${space(1.5)};\n  gap: ${space(1.5)};\n  input {\n    cursor: pointer;\n  }\n`;\n\nconst RadioBox = styled(Radio)`\n  padding: ${space(0.5)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${space(1)};\n  width: 100%;\n`;\n\nexport const modalCss = css`\n  max-width: 400px;\n  width: 100%;\n`;\n"],"names":["SUPPORTED_LANGUAGES","languageDetails","JAVASCRIPT","description","t","topFrameworksImage","NODE","onboardingFrameworkSelectionNode","PYTHON","FrameworkSuggestionModal","_ref","Body","Footer","selectedPlatform","onSkip","onConfigure","closeModal","CloseButton","organization","newOrg","selectedFramework","setSelectedFramework","useState","undefined","frameworks","platforms","platform","type","language","key","useEffect","trackAnalytics","handleConfigure","useCallback","framework","handleSkip","_jsxs","Fragment","children","_jsx","Header","onClick","TopFrameworksImage","src","Heading","Description","Panel","PanelBody","Frameworks","map","index","frameworkCategory","categoryList","category","includes","id","Framework","RadioLabel","RadioBox","radioSize","checked","readOnly","FrameworkIcon","size","name","Actions","Button","priority","disabled","title","displayName","_styled","target","space","p","theme","breakpoints","medium","TextBlock","List","styles","ListItem","border","PlatformIcon","innerBorder","RadioLineItem","Radio","modalCss"],"sourceRoot":""}