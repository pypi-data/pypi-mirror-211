{"version":3,"file":"chunks/app_views_starfish_views_spans_spansView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/types.tsx","webpack:///./app/views/starfish/views/spans/queries.tsx","webpack:///./app/views/starfish/views/spans/spansTable.tsx","webpack:///./app/views/starfish/views/spans/selectors/actionSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/domainSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/spanOperationSelector.tsx","webpack:///./app/views/starfish/views/spans/spanTimeCharts.tsx","webpack:///./app/views/starfish/views/spans/spansView.tsx"],"sourcesContent":["export enum ModuleName {\n  HTTP = 'http',\n  DB = 'db',\n  NONE = 'none',\n  ALL = '',\n}\n","import moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport {datetimeToClickhouseFilterTimestamps} from 'sentry/views/starfish/utils/dates';\n\nexport const getTimeSpentQuery = (\n  descriptionFilter: string | undefined,\n  groupingColumn: string,\n  conditions: string[] = []\n) => {\n  const validConditions = conditions.filter(Boolean);\n\n  return `SELECT\n    ${groupingColumn} AS primary_group,\n    sum(exclusive_time) AS exclusive_time\n    FROM spans_experimental_starfish\n    WHERE 1 = 1\n    ${validConditions.length > 0 ? 'AND' : ''}\n    ${validConditions.join(' AND ')}\n    ${descriptionFilter ? `AND match(lower(description), '${descriptionFilter}')` : ''}\n    GROUP BY primary_group\n  `;\n};\n\nexport const getSpanListQuery = (\n  datetime: DateTimeObject,\n  conditions: string[] = [],\n  orderBy: string,\n  limit: number\n) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  const validConditions = conditions.filter(Boolean);\n\n  return `SELECT\n    group_id, span_operation, description, domain,\n    sum(exclusive_time) as total_exclusive_time,\n    uniq(transaction) as transactions,\n    quantile(0.95)(exclusive_time) as p95,\n    quantile(0.75)(exclusive_time) as p75,\n    quantile(0.50)(exclusive_time) as p50,\n    count() as count,\n    (divide(count, ${\n      (moment(end_timestamp ?? undefined).unix() - moment(start_timestamp).unix()) / 60\n    }) AS epm)\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${validConditions.length > 0 ? 'AND' : ''}\n    ${validConditions.join(' AND ')}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY group_id, span_operation, domain, description\n    ORDER BY ${orderBy ?? 'count'} desc\n    ${limit ? `LIMIT ${limit}` : ''}`;\n};\n\nexport const getSpansTrendsQuery = (datetime: DateTimeObject, groupIDs: string[]) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n\n  return `\n    SELECT\n    group_id, span_operation,\n    toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval,\n    quantile(0.50)(exclusive_time) as p50_trend,\n    quantile(0.95)(exclusive_time) as p95_trend,\n    divide(count(), multiply(24, 60)) as throughput\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    AND group_id IN (${groupIDs.map(id => `'${id}'`).join(',')})\n    GROUP BY group_id, span_operation, interval\n    ORDER BY interval asc\n  `;\n};\n","import {Theme, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {Series} from 'sentry/types/echarts';\nimport {formatPercentage, getDuration} from 'sentry/utils/formatters';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {TableColumnSort} from 'sentry/views/discover/table/types';\nimport {DURATION_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport {FormattedCode} from 'sentry/views/starfish/components/formattedCode';\nimport Sparkline, {\n  generateHorizontalLine,\n} from 'sentry/views/starfish/components/sparkline';\nimport {useApplicationMetrics} from 'sentry/views/starfish/queries/useApplicationMetrics';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\ntype Props = {\n  isLoading: boolean;\n  moduleName: ModuleName;\n  onSetOrderBy: (orderBy: string) => void;\n  orderBy: string;\n  spansData: SpanDataRow[];\n  spansTrendsData: SpanTrendDataRow[];\n  columnOrder?: GridColumnOrder[];\n};\n\nexport type SpanDataRow = {\n  count: number;\n  description: string;\n  domain: string;\n  epm: number;\n  formatted_desc: string;\n  group_id: string;\n  p50: number;\n  p95: number;\n  span_operation: string;\n  total_exclusive_time: number;\n};\n\nexport type SpanTrendDataRow = {\n  group_id: string;\n  interval: string;\n  percentile_value: string;\n  span_operation: string;\n};\n\nexport default function SpansTable({\n  moduleName,\n  spansData,\n  orderBy,\n  onSetOrderBy,\n  spansTrendsData,\n  isLoading,\n  columnOrder,\n}: Props) {\n  const location = useLocation();\n  const theme = useTheme();\n  const {data: applicationMetrics} = useApplicationMetrics();\n\n  const spansTrendsGrouped = {p50_trend: {}, p95_trend: {}, throughput: {}};\n\n  spansTrendsData?.forEach(({group_id, span_operation, interval, ...rest}) => {\n    ['p50_trend', 'p95_trend', 'throughput'].forEach(trend => {\n      if (span_operation in spansTrendsGrouped[trend]) {\n        if (group_id in spansTrendsGrouped[trend][span_operation]) {\n          return spansTrendsGrouped[trend][span_operation][group_id].push({\n            name: interval,\n            value: rest[trend],\n          });\n        }\n        return (spansTrendsGrouped[trend][span_operation][group_id] = [\n          {name: interval, value: rest[trend]},\n        ]);\n      }\n      return (spansTrendsGrouped[trend][span_operation] = {\n        [group_id]: [{name: interval, value: rest[trend]}],\n      });\n    });\n  });\n\n  const combinedSpansData = spansData?.map(spanData => {\n    const {group_id, span_operation} = spanData;\n    if (spansTrendsGrouped.p50_trend?.[span_operation] === undefined) {\n      return spanData;\n    }\n    const p50_trend: Series = {\n      seriesName: 'p50_trend',\n      data: spansTrendsGrouped.p50_trend[span_operation][group_id],\n    };\n    const p95_trend: Series = {\n      seriesName: 'p95_trend',\n      data: spansTrendsGrouped.p95_trend[span_operation][group_id],\n    };\n    const throughput_trend: Series = {\n      seriesName: 'throughput_trend',\n      data: spansTrendsGrouped.throughput[span_operation][group_id],\n    };\n\n    const zeroFilledP50 = zeroFillSeries(p50_trend, moment.duration(1, 'day'));\n    const zeroFilledP95 = zeroFillSeries(p95_trend, moment.duration(1, 'day'));\n    const zeroFilledThroughput = zeroFillSeries(\n      throughput_trend,\n      moment.duration(1, 'day')\n    );\n    return {\n      ...spanData,\n      app_impact: formatPercentage(\n        spanData.total_exclusive_time / applicationMetrics['sum(span.duration)']\n      ),\n      p50_trend: zeroFilledP50,\n      p95_trend: zeroFilledP95,\n      throughput_trend: zeroFilledThroughput,\n    };\n  });\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={combinedSpansData}\n      columnOrder={columnOrder ?? getColumns(moduleName)}\n      columnSortBy={\n        orderBy ? [] : [{key: orderBy, order: 'desc'} as TableColumnSort<string>]\n      }\n      grid={{\n        renderHeadCell: getRenderHeadCell(orderBy, onSetOrderBy),\n        renderBodyCell: (column, row) => renderBodyCell(column, row, theme),\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction getRenderHeadCell(orderBy: string, onSetOrderBy: (orderBy: string) => void) {\n  function renderHeadCell(column: GridColumnHeader): React.ReactNode {\n    return (\n      <SortLink\n        align=\"left\"\n        canSort\n        direction={orderBy === column.key ? 'desc' : undefined}\n        onClick={() => {\n          onSetOrderBy(`${column.key}`);\n        }}\n        title={column.name}\n        generateSortLink={() => {\n          return {\n            ...location,\n          };\n        }}\n      />\n    );\n  }\n\n  return renderHeadCell;\n}\n\nfunction renderBodyCell(\n  column: GridColumnHeader,\n  row: SpanDataRow,\n  theme: Theme\n): React.ReactNode {\n  if (column.key === 'throughput_trend' && row[column.key]) {\n    const horizontalLine = generateHorizontalLine(\n      `${row.epm.toFixed(2)}`,\n      row.epm,\n      theme\n    );\n    return (\n      <Sparkline\n        color={THROUGHPUT_COLOR}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n        markLine={horizontalLine}\n      />\n    );\n  }\n\n  if (column.key === 'p50_trend' && row[column.key]) {\n    const horizontalLine = generateHorizontalLine(\n      `${getDuration(row.p50 / 1000, 2, true)}`,\n      row.p50,\n      theme\n    );\n    return (\n      <Sparkline\n        color={DURATION_COLOR}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n        markLine={horizontalLine}\n      />\n    );\n  }\n\n  if (column.key === 'description') {\n    return (\n      <OverflowEllipsisTextContainer>\n        <Link to={`/starfish/span/${row.group_id}`}>\n          {row.span_operation === 'db' ? (\n            <StyledFormattedCode>\n              {(row as unknown as SpanDataRow).formatted_desc}\n            </StyledFormattedCode>\n          ) : (\n            row.description || '<null>'\n          )}\n        </Link>\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key.toString().match(/^p\\d\\d/) || column.key === 'total_exclusive_time') {\n    return <Duration seconds={row[column.key] / 1000} fixedDigits={2} abbreviation />;\n  }\n\n  return row[column.key];\n}\n\n// We use different named column keys for the same columns in db and api module\n// So we need to map them to the appropriate keys for the module details drawer\n// Not ideal, but this is a temporary fix until we match the column keys.\n// Also the type for this is not very consistent. We should fix that too.\nexport const mapRowKeys = (row: SpanDataRow, spanOperation: string) => {\n  switch (spanOperation) {\n    case 'http.client':\n      return {\n        ...row,\n        'p50(span.self_time)': row.p50,\n        'p95(span.self_time)': row.p95,\n      };\n    case 'db':\n      return {\n        ...row,\n        total_time: row.total_exclusive_time,\n      };\n\n    default:\n      return row;\n  }\n};\n\nfunction getDomainHeader(moduleName: ModuleName) {\n  if (moduleName === ModuleName.HTTP) {\n    return 'Host';\n  }\n  if (moduleName === ModuleName.DB) {\n    return 'Table';\n  }\n  return 'Domain';\n}\nfunction getDescriptionHeader(moduleName: ModuleName) {\n  if (moduleName === ModuleName.HTTP) {\n    return 'URL';\n  }\n  if (moduleName === ModuleName.DB) {\n    return 'Query';\n  }\n  return 'Description';\n}\n\nfunction getColumns(moduleName: ModuleName): GridColumnOrder[] {\n  const description = getDescriptionHeader(moduleName);\n\n  const domain = getDomainHeader(moduleName);\n\n  const order: Array<GridColumnOrder | false> = [\n    {\n      key: 'span_operation',\n      name: 'Operation',\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'description',\n      name: description,\n      width: COL_WIDTH_UNDEFINED,\n    },\n    moduleName !== ModuleName.ALL && {\n      key: 'domain',\n      name: domain,\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'throughput_trend',\n      name: 'Throughput',\n      width: 175,\n    },\n    {\n      key: 'p50_trend',\n      name: 'Duration (p50)',\n      width: 175,\n    },\n    {\n      key: 'app_impact',\n      name: 'App Impact',\n      width: COL_WIDTH_UNDEFINED,\n    },\n  ];\n\n  return order.filter((x): x is GridColumnOrder => Boolean(x));\n}\n\nconst StyledFormattedCode = styled(FormattedCode)`\n  background: none;\n  text-overflow: ellipsis;\n`;\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\ntype Props = {\n  moduleName?: ModuleName;\n  value?: string;\n};\n\nexport function ActionSelector({value = '', moduleName = ModuleName.ALL}: Props) {\n  // TODO: This only returns the top 25 actions. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const query = getQuery(moduleName);\n  const eventView = getEventView(moduleName, selection);\n\n  const useHTTPActions = moduleName === ModuleName.HTTP;\n\n  const {data: actions} = useSpansQuery<[{'span.action': string}]>({\n    eventView,\n    queryString: query,\n    initialData: [],\n    enabled: Boolean(query && !useHTTPActions),\n  });\n\n  const options = useHTTPActions\n    ? HTTP_ACTION_OPTIONS\n    : [\n        {value: '', label: 'All'},\n        ...actions.map(datum => ({\n          value: datum['span.action'],\n          label: datum['span.action'],\n        })),\n      ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            action: newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst HTTP_ACTION_OPTIONS = [\n  {value: '', label: 'All'},\n  ...['GET', 'POST', 'PUT', 'DELETE'].map(action => ({\n    value: action,\n    label: action,\n  })),\n];\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('HTTP Method'),\n  db: t('SQL Command'),\n  none: t('Action'),\n  '': t('Action'),\n};\n\nfunction getQuery(moduleName?: string) {\n  return `SELECT action as \"span.action\", count()\n    FROM spans_experimental_starfish\n    WHERE 1 = 1\n    ${moduleName ? `AND module = '${moduleName}'` : ''}\n    AND action != ''\n    GROUP BY action\n    ORDER BY count() DESC\n    LIMIT 25\n  `;\n}\n\nfunction getEventView(moduleName: ModuleName, pageFilters: PageFilters) {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.action', 'count()'],\n    orderby: '-count',\n    query: moduleName ? `!span.action:\"\" span.module:${moduleName}` : '!span.action:\"\"',\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    projects: [1],\n    version: 2,\n  });\n}\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\ntype Props = {\n  moduleName?: ModuleName;\n  value?: string;\n};\n\nexport function DomainSelector({value = '', moduleName = ModuleName.ALL}: Props) {\n  // TODO: This only returns the top 25 domains. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const query = getQuery(moduleName);\n  const eventView = getEventView(moduleName, selection);\n\n  const {data: domains} = useSpansQuery<[{'span.domain': string}]>({\n    eventView,\n    queryString: query,\n    initialData: [],\n    enabled: Boolean(query),\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...domains.map(datum => ({\n      value: datum['span.domain'],\n      label: datum['span.domain'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            domain: newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('Host'),\n  db: t('Table'),\n  none: t('Domain'),\n  '': t('Domain'),\n};\n\nfunction getQuery(moduleName?: string) {\n  return `SELECT domain as \"span.domain\", count()\n    FROM spans_experimental_starfish\n    WHERE 1 = 1\n    ${moduleName ? `AND module = '${moduleName}'` : ''}\n    AND domain != ''\n    GROUP BY domain\n    ORDER BY count() DESC\n    LIMIT 25\n  `;\n}\n\nfunction getEventView(moduleName: string, pageFilters: PageFilters) {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.domain', 'count()'],\n    orderby: '-count',\n    query: moduleName ? `!span.domain:\"\" span.module:${moduleName}` : '!span.domain:\"\"',\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    projects: [1],\n    version: 2,\n  });\n}\n","import {browserHistory} from 'react-router';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\ntype Props = {\n  value: string;\n  moduleName?: ModuleName;\n};\n\nexport function SpanOperationSelector({value = '', moduleName = ModuleName.ALL}: Props) {\n  // TODO: This only returns the top 25 operations. It should either load them all, or paginate, or allow searching\n  //\n  const {selection} = usePageFilters();\n\n  const location = useLocation();\n  const query = getQuery(moduleName);\n  const eventView = getEventView(moduleName, selection);\n\n  const {data: operations} = useSpansQuery<[{'span.op': string}]>({\n    eventView,\n    queryString: query,\n    initialData: [],\n    enabled: Boolean(query),\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...operations.map(datum => ({\n      value: datum['span.op'],\n      label: datum['span.op'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{prefix: t('Operation')}}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            span_operation: newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nfunction getQuery(moduleName: ModuleName) {\n  return `SELECT span_operation as \"span.op\", count()\n    FROM spans_experimental_starfish\n    WHERE span_operation != ''\n    ${moduleName !== ModuleName.ALL ? `AND module = '${moduleName}'` : ''}\n    GROUP BY span_operation\n    ORDER BY count() DESC\n    LIMIT 25\n  `;\n}\n\nfunction getEventView(moduleName: ModuleName, pageFilters: PageFilters) {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['span.op', 'count()'],\n    orderby: '-count',\n    query: moduleName ? `span.module:${moduleName}` : '',\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    projects: [1],\n    version: 2,\n  });\n}\n","import styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {DURATION_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport {getSegmentLabel} from 'sentry/views/starfish/components/breakdownBar';\nimport Chart, {useSynchronizeCharts} from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {\n  datetimeToClickhouseFilterTimestamps,\n  PERIOD_REGEX,\n} from 'sentry/views/starfish/utils/dates';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\ntype Props = {\n  appliedFilters: AppliedFilters;\n  moduleName: ModuleName;\n};\n\ntype AppliedFilters = {\n  action: string;\n  domain: string;\n  group_id: string;\n  span_operation: string;\n};\n\nexport function SpanTimeCharts({moduleName, appliedFilters}: Props) {\n  const location = useLocation();\n\n  const {selection} = usePageFilters();\n  const [_, num, unit] = selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const startTime =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(selection.datetime.start);\n  const endTime = moment(selection.datetime.end ?? undefined);\n\n  const query = getQuery(moduleName, selection, appliedFilters);\n  const eventView = getEventView(moduleName, selection, appliedFilters);\n\n  const {isLoading, data} = useSpansQuery({\n    eventView,\n    queryString: `${query}&referrer=span-time-charts`,\n    initialData: [],\n  });\n\n  const {span_operation, action, domain} = location.query;\n\n  const label = getSegmentLabel(span_operation, action, domain);\n  const dataByGroup = {[label]: data};\n\n  const throughputTimeSeries = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: label ?? 'Throughput',\n        data: groupData.map(datum => ({\n          value: datum['spm()'],\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  const p50Series = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: label ?? 'p50()',\n        data: groupData.map(datum => ({\n          value: datum['p50(span.duration)'],\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  useSynchronizeCharts([!isLoading]);\n\n  return (\n    <ChartsContainer>\n      <ChartsContainerItem>\n        <ChartPanel title={t('Throughput')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={100}\n            data={throughputTimeSeries}\n            start=\"\"\n            end=\"\"\n            loading={isLoading}\n            utc={false}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '8px',\n              bottom: '0',\n            }}\n            definedAxisTicks={4}\n            stacked\n            isLineChart\n            chartColors={[THROUGHPUT_COLOR]}\n            disableXAxis\n            tooltipFormatterOptions={{\n              valueFormatter: value => `${value.toFixed(3)} / ${t('min')}`,\n            }}\n          />\n        </ChartPanel>\n      </ChartsContainerItem>\n\n      <ChartsContainerItem>\n        <ChartPanel title={t('Duration (P50)')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={100}\n            data={p50Series}\n            start=\"\"\n            end=\"\"\n            loading={isLoading}\n            utc={false}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '8px',\n              bottom: '0',\n            }}\n            definedAxisTicks={4}\n            stacked\n            isLineChart\n            chartColors={[DURATION_COLOR]}\n            disableXAxis\n          />\n        </ChartPanel>\n      </ChartsContainerItem>\n    </ChartsContainer>\n  );\n}\n\nconst getQuery = (\n  moduleName: ModuleName,\n  pageFilters: PageFilters,\n  appliedFilters: AppliedFilters\n) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(\n    pageFilters.datetime\n  );\n\n  const conditions = buildSQLQueryConditions(moduleName, appliedFilters);\n\n  return `SELECT\n    divide(count(), multiply(12, 60)) as \"spm()\",\n    quantile(0.50)(exclusive_time) AS \"p50(span.duration)\",\n    toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    ${conditions ? `AND ${conditions}` : ''}\n    GROUP BY interval\n    ORDER BY interval ASC\n  `;\n};\n\nconst SPAN_FILTER_KEYS = ['span_operation', 'domain', 'action'];\n\nconst buildSQLQueryConditions = (\n  moduleName: ModuleName,\n  appliedFilters: AppliedFilters\n) => {\n  const result = Object.keys(appliedFilters)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(appliedFilters[key]))\n    .map(key => {\n      return `${key} = '${appliedFilters[key]}'`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`module = '${moduleName}'`);\n  }\n\n  return result.join(' ');\n};\n\nconst getEventView = (\n  moduleName: ModuleName,\n  pageFilters: PageFilters,\n  appliedFilters: AppliedFilters\n) => {\n  const query = buildDiscoverQueryConditions(moduleName, appliedFilters);\n\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: [''],\n    yAxis: ['spm()', 'p50(span.duration)'],\n    query,\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    start: pageFilters.datetime.start ?? undefined,\n    end: pageFilters.datetime.end ?? undefined,\n    range: pageFilters.datetime.period ?? undefined,\n    projects: [1],\n    version: 2,\n  });\n};\n\nconst buildDiscoverQueryConditions = (\n  moduleName: ModuleName,\n  appliedFilters: AppliedFilters\n) => {\n  const result = Object.keys(appliedFilters)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(appliedFilters[key]))\n    .map(key => {\n      return `${key}:${appliedFilters[key]}`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`span.module:'${moduleName}'`);\n  }\n\n  return result.join(' ');\n};\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\nimport _orderBy from 'lodash/orderBy';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport {space} from 'sentry/styles/space';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {ActionSelector} from 'sentry/views/starfish/views/spans/selectors/actionSelector';\nimport {DomainSelector} from 'sentry/views/starfish/views/spans/selectors/domainSelector';\nimport {SpanOperationSelector} from 'sentry/views/starfish/views/spans/selectors/spanOperationSelector';\nimport {SpanTimeCharts} from 'sentry/views/starfish/views/spans/spanTimeCharts';\n\nimport {getSpanListQuery, getSpansTrendsQuery} from './queries';\nimport type {SpanDataRow, SpanTrendDataRow} from './spansTable';\nimport SpansTable from './spansTable';\n\nconst LIMIT: number = 25;\n\ntype Props = {\n  moduleName?: ModuleName;\n};\n\ntype State = {\n  orderBy: string;\n};\n\ntype Query = {\n  action: string;\n  domain: string;\n  group_id: string;\n  span_operation: string;\n};\n\nexport default function SpansView(props: Props) {\n  const location = useLocation<Query>();\n  const appliedFilters = location.query;\n  const pageFilter = usePageFilters();\n  const [state, setState] = useState<State>({orderBy: 'total_exclusive_time'});\n\n  const {orderBy} = state;\n\n  const queryConditions = buildQueryConditions(\n    props.moduleName || ModuleName.ALL,\n    location\n  );\n  const query = getSpanListQuery(\n    pageFilter.selection.datetime,\n    queryConditions,\n    orderBy,\n    LIMIT\n  );\n\n  const {isLoading: areSpansLoading, data: spansData} = useQuery<SpanDataRow[]>({\n    queryKey: ['spans', query],\n    queryFn: () => fetch(`${HOST}/?query=${query}&format=sql`).then(res => res.json()),\n    retry: false,\n    refetchOnWindowFocus: false,\n    initialData: [],\n  });\n\n  const groupIDs = spansData.map(({group_id}) => group_id);\n\n  const {isLoading: areSpansTrendsLoading, data: spansTrendsData} = useQuery<\n    SpanTrendDataRow[]\n  >({\n    queryKey: ['spansTrends'],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getSpansTrendsQuery(pageFilter.selection.datetime, groupIDs)}`\n      ).then(res => res.json()),\n    retry: false,\n    refetchOnWindowFocus: false,\n    initialData: [],\n    enabled: groupIDs.length > 0,\n  });\n\n  return (\n    <Fragment>\n      <FilterOptionsContainer>\n        <DatePageFilter alignDropdown=\"left\" />\n\n        <SpanOperationSelector\n          moduleName={props.moduleName}\n          value={appliedFilters.span_operation || ''}\n        />\n\n        <DomainSelector\n          moduleName={props.moduleName}\n          value={appliedFilters.domain || ''}\n        />\n\n        <ActionSelector\n          moduleName={props.moduleName}\n          value={appliedFilters.action || ''}\n        />\n      </FilterOptionsContainer>\n\n      <PaddedContainer>\n        <SpanTimeCharts\n          moduleName={props.moduleName || ModuleName.ALL}\n          appliedFilters={appliedFilters}\n        />\n      </PaddedContainer>\n\n      <PaddedContainer>\n        <SpansTable\n          moduleName={props.moduleName || ModuleName.ALL}\n          isLoading={areSpansLoading || areSpansTrendsLoading}\n          spansData={spansData}\n          orderBy={orderBy}\n          onSetOrderBy={newOrderBy => setState({orderBy: newOrderBy})}\n          spansTrendsData={spansTrendsData}\n        />\n      </PaddedContainer>\n    </Fragment>\n  );\n}\n\nconst PaddedContainer = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst FilterOptionsContainer = styled(PaddedContainer)`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nconst SPAN_FILTER_KEYS = ['span_operation', 'domain', 'action'];\n\nexport const buildQueryConditions = (moduleName: ModuleName, location: Location) => {\n  const {query} = location;\n  const result = Object.keys(query)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(query[key]))\n    .map(key => {\n      return `${key} = '${query[key]}'`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`module = '${moduleName}'`);\n  }\n\n  return result;\n};\n"],"names":["ModuleName","getSpanListQuery","datetime","conditions","arguments","length","undefined","orderBy","limit","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","validConditions","filter","Boolean","moment","unix","join","getSpansTrendsQuery","groupIDs","map","id","SpansTable","_ref","moduleName","spansData","onSetOrderBy","spansTrendsData","isLoading","columnOrder","location","useLocation","theme","useTheme","data","applicationMetrics","useApplicationMetrics","spansTrendsGrouped","p50_trend","p95_trend","throughput","forEach","_ref2","group_id","span_operation","interval","rest","trend","push","name","value","combinedSpansData","spanData","seriesName","throughput_trend","zeroFilledP50","zeroFillSeries","zeroFilledP95","zeroFilledThroughput","app_impact","formatPercentage","total_exclusive_time","_jsx","GridEditable","getColumns","columnSortBy","key","order","grid","renderHeadCell","getRenderHeadCell","renderBodyCell","column","row","horizontalLine","generateHorizontalLine","epm","toFixed","Sparkline","color","THROUGHPUT_COLOR","series","width","markLine","getDuration","p50","DURATION_COLOR","OverflowEllipsisTextContainer","children","Link","to","StyledFormattedCode","formatted_desc","description","toString","match","Duration","seconds","fixedDigits","abbreviation","SortLink","align","canSort","direction","onClick","title","generateSortLink","getDescriptionHeader","domain","getDomainHeader","COL_WIDTH_UNDEFINED","x","displayName","_styled","FormattedCode","target","styles","ActionSelector","selection","usePageFilters","query","getQuery","eventView","getEventView","useHTTPActions","actions","useSpansQuery","queryString","initialData","enabled","options","HTTP_ACTION_OPTIONS","label","datum","CompactSelect","triggerProps","prefix","LABEL_FOR_MODULE_NAME","onChange","newValue","browserHistory","action","http","t","db","none","pageFilters","EventView","fields","orderby","dataset","DiscoverDatasets","start","end","range","period","projects","version","DomainSelector","domains","SpanOperationSelector","operations","SpanTimeCharts","appliedFilters","_","num","unit","PERIOD_REGEX","startTime","subtract","endTime","getSegmentLabel","dataByGroup","throughputTimeSeries","Object","keys","groupName","groupData","p50Series","useSynchronizeCharts","_jsxs","ChartsContainer","ChartsContainerItem","ChartPanel","Chart","statsPeriod","height","loading","utc","left","right","top","bottom","definedAxisTicks","stacked","isLineChart","chartColors","disableXAxis","tooltipFormatterOptions","valueFormatter","buildSQLQueryConditions","SPAN_FILTER_KEYS","result","includes","buildDiscoverQueryConditions","yAxis","space","LIMIT","SpansView","props","pageFilter","state","setState","useState","queryConditions","buildQueryConditions","areSpansLoading","useQuery","queryKey","queryFn","fetch","HOST","then","res","json","retry","refetchOnWindowFocus","areSpansTrendsLoading","Fragment","FilterOptionsContainer","DatePageFilter","alignDropdown","PaddedContainer","newOrderBy"],"sourceRoot":""}