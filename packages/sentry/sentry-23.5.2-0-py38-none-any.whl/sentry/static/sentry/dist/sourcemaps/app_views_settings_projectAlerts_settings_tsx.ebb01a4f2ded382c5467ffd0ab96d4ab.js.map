{"version":3,"file":"chunks/app_views_settings_projectAlerts_settings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n  disabled?: boolean;\n};\n\nfunction InactivePlugins({disabled, plugins, onEnablePlugin}: Props) {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              disabled={disabled}\n              title={\n                disabled ? t('You do not have permission to set up an integration.') : ''\n              }\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled(Button)`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport {Panel, PanelItem} from 'sentry/components/panels';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nfunction PluginList({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) {\n  const hasWriteAccess = hasEveryAccess(['project:write'], {organization, project});\n\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        disabled={!hasWriteAccess}\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n}\n\nexport default PluginList;\n","import {Field} from 'sentry/components/forms/types';\nimport {t, tn} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {t(\n              'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n            )}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport {fields} from 'sentry/data/forms/projectAlerts';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {projectId: string};\n\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  pluginList: Array<Plugin> | null;\n  project: Project | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n\n  getProjectEndpoint() {\n    const {organization, params} = this.props;\n    return `/projects/${organization.slug}/${params.projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectEndpoint = this.getProjectEndpoint();\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${organization.slug}/${params.projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization} = this.props;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint();\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${organization.slug}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"sm\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert project={project} />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"names":["InactivePlugins","_ref","disabled","plugins","onEnablePlugin","length","_jsxs","Panel","children","_jsx","PanelHeader","t","PanelBody","Plugins","map","plugin","IntegrationButton","title","onClick","className","id","Label","StyledPluginIcon","pluginId","TextOverflow","shortName","name","displayName","_styled","target","space","Button","p","theme","fontSizeSmall","borderRadius","styles","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","hasWriteAccess","hasEveryAccess","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","PluginConfig","isHidden","enablePlugin","PanelItem","route","formatMinutes","value","Number","tn","fields","subjectTemplate","type","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","projectSlug","arguments","undefined","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","this","renderComponent","PermissionAlert","access","team","props","Access","_ref2","hasAccess","Alert","Settings","constructor","_defineProperty","setState","prevState","getDefaultState","super","getProjectEndpoint","params","getEndpoints","routeTitleGen","renderBody","canEditRule","state","projectEndpoint","Fragment","SettingsPageHeader","action","to","pathname","query","size","AlertLink","icon","IconMail","Form","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","JsonForm","renderHeader","PanelAlert","hasConfiguration","handleEnablePlugin"],"sourceRoot":""}