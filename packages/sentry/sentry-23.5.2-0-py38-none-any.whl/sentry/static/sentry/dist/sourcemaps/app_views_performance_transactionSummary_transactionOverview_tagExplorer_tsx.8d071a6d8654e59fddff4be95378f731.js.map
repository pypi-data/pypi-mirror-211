{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionOverview_tagExplorer_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"kZAiDO,SAASA,EAAmBC,GACjC,MAAM,gBAACC,GAAmBD,EAc1B,OAbA,SAAsCE,GACpC,MAAM,UAACC,GAAaD,EACdE,EAAyBD,EAAUE,oBAAoBH,EAAMI,UASnE,OARAF,EAAWH,gBAAkBA,EAC7BG,EAAWG,KAAOP,EAAOO,KAAOP,EAAOO,KAAOH,EAAWG,KACrDP,EAAOQ,aACTJ,EAAWI,WAAaR,EAAOQ,YAE7BR,EAAOS,SACTL,EAAWK,OAAST,EAAOS,QAEtBL,CACT,CAEF,CAEA,SAASM,EAAkBC,EAAuBC,GAChD,OACED,EAAUV,kBAAoBW,EAAUX,iBACxCU,EAAUJ,OAASK,EAAUL,MAC7BI,EAAUH,aAAeI,EAAUJ,YACnCG,EAAUF,SAAWG,EAAUH,MAEnC,CAEA,SAASI,EAAqBX,GAC5B,OACEY,EAAAA,EAAAA,IAACC,EAAAA,GAAoB,CACnBC,MAAM,4BACNC,kBAAmBlB,EAAmBG,GACtCQ,kBAAmBA,KACfR,GAGV,CATSW,EAAoBK,YAAA,uBAW7B,S,4+CC3CA,MAAMC,EAAmB,cAgBZC,EAAyC,CACpD,CACEC,IAAK,MACLC,MAAO,MACPC,KAAM,UACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,UAGV,CACEL,IAAK,WACLC,MAAO,WACPC,KAAM,aACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,UAGV,CACEL,IAAK,YACLC,MAAO,YACPC,KAAM,eACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,YACLC,MAAO,YACPC,KAAM,YACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,aACLC,MAAO,aACPC,KAAM,kBACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,GAEX,CACEN,IAAK,WACLC,MAAO,WACPC,KAAM,kBACNC,OAAQ,EACRC,OAAQ,CACNC,KAAM,SAERC,SAAS,IAIAC,EAAsBA,CACjCC,EACAC,EACA3B,KAEA,MAAM4B,EAAkBC,EAAAA,GAAyCH,GACjE,OAAIE,KAIoBE,EAAAA,EAAAA,IAAuCH,EAAU3B,KACjD+B,EAAAA,GAAAA,SACf,mBAGF,uBAAsB,EAkCxB,SAASC,EAASjC,GACvB,OAAOY,EAAAA,EAAAA,IAAA,OAAKsB,UAAU,WAAUC,SAAEnC,EAAMoC,IAAIC,YAC9C,CAFgBJ,EAAQjB,YAAA,WAgBjB,MAAMsB,UAAoBC,EAAAA,UAAiBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aACjC,CACbC,OAAQ,MACTD,EAAAA,EAAAA,GAAA,2BAEoB,CAACE,EAAqBC,KACzC,MAAMF,EAAmB,IAAIG,KAAKC,MAAMJ,QACxCA,EAAOC,GAAeC,EAAWvB,MAC7B0B,OAAOH,EAAWvB,OAClB2B,EAAAA,GACJH,KAAKI,SAAS,CAACP,UAAQ,KACxBD,EAAAA,EAAAA,GAAA,uBAEiBS,IAChB,MAAM,OAACR,GAAUG,KAAKC,MACtB,OAAOI,EAAQC,KAAI,CAACC,EAAsBC,IACf,iBAAdX,EAAOW,GACT,IAAID,EAAK/B,MAAOqB,EAAOW,IAEzBD,GACP,KACHX,EAAAA,EAAAA,GAAA,+BAoDwB,CACvBa,EACAC,EACAL,IAEO,CAAC5B,EAAiCkC,IACvCX,KAAKY,eAAeH,EAAiBC,EAAWjC,EAAQ4B,EAAQM,OACnEf,EAAAA,EAAAA,GAAA,4BAEqB,CAACtC,EAAoBG,EAAgBoD,KACzD,MAAM,aAACC,GAAgBd,KAAK9C,OAC5B6D,EAAAA,EAAAA,IAAe,mDAAoD,CACjED,iBAGF,MAAME,GAAcC,EAAAA,EAAAA,IAAa3D,EAAS4D,MAAMA,OAC1CC,EAAa,IAAIC,EAAAA,GAAcJ,GAAe,IAEpDG,EAAWE,gBAAgB5D,EAAQ,CAACoD,IAEpC,MAAMK,EAAQC,EAAWG,eACzBC,EAAAA,eAAAA,KAAoB,CAClBC,SAAUlE,EAASkE,SACnBN,MAAO,IACF5D,EAAS4D,MACZA,MAAOO,OAAOP,GAAOQ,SAEvB,KACH9B,EAAAA,EAAAA,GAAA,yBAEkB,CACjBnB,EACAoC,EACAc,IAEQC,IACN,MAAM,UAACzE,EAAS,SAAEG,EAAQ,aAAEwD,GAAgBd,KAAK9C,OACjD6D,EAAAA,EAAAA,IAAe,qDAAsD,CACnED,iBAGF,MAAMe,GAAmBC,EAAAA,EAAAA,IAA0B3E,EAAU+D,QAE7Da,EAAAA,EAAAA,IAAYF,EAAkBD,EAAQ,IAAInD,EAAQF,KAAMoD,EAAUK,IAAKnB,GAEvEU,EAAAA,eAAAA,KAAoB,CAClBC,SAAUlE,EAASkE,SACnBN,MAAO,IACF5D,EAAS4D,MACZ,CAAC/C,QAAmB8D,EACpBf,MAAOW,EAAiBP,iBAE1B,KAEL1B,EAAAA,EAAAA,GAAA,uBASgB,CACfsC,EACAzD,EACA0D,KAEA,MAAMC,EAAQD,EAAQ1D,EAAOJ,MACvB,SAACf,EAAQ,aAAEwD,EAAY,gBAAEuB,GAAmBH,EAElD,GAAmB,QAAfzD,EAAOJ,IAAe,CACxB,MAAMiE,GAASC,EAAAA,EAAAA,IAAmB,CAChCC,QAAS1B,EAAa2B,KACtBC,YAAaL,EACbM,WAAW1B,EAAAA,EAAAA,IAAa3D,EAAS4D,MAAM0B,SACvC1B,MAAO,IAAI5D,EAAS4D,MAAOzD,OAAQ0E,EAAQU,YAE7C,OACE/E,EAAAA,EAAAA,IAACgF,EAAAA,EAAI,CAACC,GAAIT,EAAQU,QAASA,IAAMhD,KAAKiD,gBAAgB5D,SACnD8C,EAAQU,UAGf,CAEA,MAAMK,EAAe,CAACC,EAAAA,GAAAA,IAAaA,EAAAA,GAAAA,SAEnC,GAAmB,aAAf1E,EAAOJ,IAAoB,CAC7B,MAAMsD,EAAY,IAAIQ,EAASH,GAAIG,EAAQU,UAC3C,OACE/E,EAAAA,EAAAA,IAACsF,EAAAA,GAAU,CACT3E,OAAQA,EACR0D,QAASR,EACT0B,iBAAkBrD,KAAKqD,iBAAiB5E,EAAQ0D,EAAQ5C,WAAYoC,GACpEuB,aAAcA,EAAa7D,UAE3BvB,EAAAA,EAAAA,IAAA,OAAKsB,UAAU,WAAUC,SAAE8C,EAAQ5C,cAGzC,CAEA,GAAmB,cAAfd,EAAOJ,IACT,OAAOP,EAAAA,EAAAA,IAACwF,EAAU,CAAAjE,UAAEkE,EAAAA,EAAAA,IAAiBpB,EAAQqB,UAAW,KAG1D,GAAmB,eAAf/E,EAAOJ,IAAsB,CAC/B,MAAMoF,EAAatB,EAAQuB,WACrBC,GAAMJ,EAAAA,EAAAA,IAAiBE,EAAa,EAAG,GAC7C,OACE3F,EAAAA,EAAAA,IAACwF,EAAU,CAAAjE,SACRoE,EAAa,GAAIG,EAAAA,EAAAA,GAAE,aAAcD,IAAOC,EAAAA,EAAAA,GAAE,YAAaD,IAG9D,CAEA,MAAmB,cAAflF,EAAOJ,KAEPP,EAAAA,EAAAA,IAACwF,EAAU,CAAAjE,UACTvB,EAAAA,EAAAA,IAAC+F,EAAAA,EAAmB,CAACC,cAAY,EAACC,aAAc5B,EAAQ6B,cAK3C,aAAfvF,EAAOJ,KAEPP,EAAAA,EAAAA,IAACwF,EAAU,CAAAjE,UACTvB,EAAAA,EAAAA,IAAC+F,EAAAA,EAAmB,CAACC,cAAY,EAACC,aAAc5B,EAAQ8B,aAIvD7B,CAAK,KACbxC,EAAAA,EAAAA,GAAA,+BAEyBsC,GACjB,CAACzD,EAAiC0D,IACvCnC,KAAKkE,eAAehC,EAAazD,EAAQ0D,IAC5C,CA1LDgC,YAAYC,EAA0BC,GACpC,MAAM,aAACvD,GAAgBd,KAAK9C,OAC5B6D,EAAAA,EAAAA,IAAe,8CAA+C,CAC5DD,eACAxC,MAAO+F,EACPC,UAAWF,GAEf,CAEAxD,eACEH,EACAC,EACAjC,EACA8F,GAEA,MAAM,SAACjH,GAAY0C,KAAK9C,MAClBsH,GAAQC,EAAAA,EAAAA,IAAehG,EAAOJ,IAAKI,EAAOiG,KAAMhE,GAChDpC,EAAQ,CAACA,MAAOG,EAAOJ,IAAKG,MAAOC,EAAOD,OAe1CmG,EAAclE,EAAgBmE,aAAatG,EAAOoC,GAClD/B,GAAUkG,EAAAA,EAAAA,IAAgBvG,EAAOoC,GAEjC0D,EAAkBO,EAAcA,EAAYjG,UAAOuD,EACnDoC,EAAmBM,EAAcA,EAAYrG,WAAQ2D,EAE3D,OACEnE,EAAAA,EAAAA,IAACgH,EAAAA,EAAQ,CACPN,MAAOA,EACPO,MAAOR,EAAWhG,KAClB+F,UAAWF,EACXzF,QAASA,EACTqG,iBAzBJ,WACE,IAAKtE,EACH,OAGF,MAAMuE,EAAgBxE,EAAgByE,YAAY5G,EAAOoC,IACnD,KAACnD,GAAQ0H,EAAcE,4BAE7B,MAAO,IACF7H,EACH4D,MAAO,IAAI5D,EAAS4D,MAAO,CAAC/C,QAAmB8D,EAAWmD,QAAS7H,GAEvE,EAcIyF,QAASA,IAAMhD,KAAKmE,YAAYC,EAAiBC,IAGvD,CA0DApB,gBACE,MAAM,aAACnC,GAAgBd,KAAK9C,OAC5B6D,EAAAA,EAAAA,IAAe,uDAAwD,CACrED,gBAEJ,CA6EAuE,SACE,MAAM,UAAClI,EAAS,aAAE2D,EAAY,SAAExD,EAAQ,cAAEuB,EAAa,SAAEC,EAAQ,gBAAEuD,GACjErC,KAAK9C,MAEDkI,GAAUnE,EAAAA,EAAAA,IAAa3D,EAAS4D,OAAOkE,SACvCE,GAASrE,EAAAA,EAAAA,IAAa3D,EAAS4D,QAAQ/C,IAEvCoH,EAAepI,EAAUqI,QAC/BD,EAAaE,OAASrH,EAEtB,MAAMsH,GAAWC,EAAAA,EAAAA,IAAUP,GAErB3E,EAAkB8E,EAAaK,UACnCF,EAASG,OACLH,EACA,CACE,CACEpH,MAAO,WACPI,KAAM,UAKVzB,EAAkB2B,EAAoBC,EAAeC,EAAU2B,GAE/DqF,EA3R6BC,EACrClH,EACAC,EACA3B,KAEA,MAAMkD,EAAUjC,EAA0BkC,KAAI0F,IAAK,IAAKA,MAClDC,EAAiB5F,EAAQ6F,MAAKF,GAAe,cAAVA,EAAE3H,MAE3C,OAAK4H,EAImBjH,EAAAA,GAAyCH,IAE/DoH,EAAe1H,KAAO,oBACf8B,IAGepB,EAAAA,EAAAA,IAAuCH,EAAU3B,KACjD+B,EAAAA,GAAAA,UACtB+G,EAAe1H,KAAO,UACf8B,GAGFA,EAfEA,CAeK,EAmQY0F,CACtBlH,EACAC,EACA2B,GAEIJ,EAAUL,KAAKmG,eAAeL,GAE9BM,EAAe3F,EAAgB4F,WAErC,OACEvI,EAAAA,EAAAA,IAACD,EAAAA,EAAoB,CACnBV,UAAWsD,EACX+B,QAAS1B,EAAa2B,KACtBnF,SAAUA,EACVL,gBAAiBA,EACjBqJ,MAAO,EACPhB,OAAQA,EAAOjG,SAEdkH,IAAuC,IAAtC,UAACC,EAAS,UAAEC,EAAS,UAAEC,GAAUH,EACjC,OACEI,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAvH,SAAA,EACPvB,EAAAA,EAAAA,IAAC+I,EAAAA,EAAW,CAACvE,OAAO,eAAcjD,UAChCvB,EAAAA,EAAAA,IAACgJ,EAAU,CACTzE,gBAAiBA,EACjB/E,SAAUA,EACVwD,aAAcA,EACd4F,UAAWA,OAGf5I,EAAAA,EAAAA,IAACiJ,EAAAA,GAAY,CACXP,UAAWA,EACXQ,KAAMP,GAAaA,EAAUO,KAAOP,EAAUO,KAAO,GACrDC,YAAa5G,EACb+F,aAAcA,EACdc,KAAM,CACJtG,eAAgBZ,KAAKmH,uBACnB1G,EACAgG,GAAWW,MAAQ,CAAC,EACpBtB,GAEF5B,eAAgBlE,KAAKqH,uBAAuBrH,KAAK9C,OACjDoK,eAAgBtH,KAAKuH,oBAEvBjK,SAAUA,MAEH,GAKrB,EAUF,SAASwJ,EAAW5J,GAClB,MAAM,UAACwJ,EAAS,aAAE5F,EAAY,SAAExD,EAAQ,gBAAE+E,GAAmBnF,EAkBvDsK,GAAgBjF,EAAAA,EAAAA,IAAmB,CACvCC,QAAS1B,EAAa2B,KACtBC,YAAaL,EACbM,WAAW1B,EAAAA,EAAAA,IAAa3D,EAAS4D,MAAM0B,SACvC1B,MAAO,IAAI5D,EAAS4D,SAGtB,OACEyF,EAAAA,EAAAA,IAACc,EAAM,CAAApI,SAAA,EACLvB,EAAAA,EAAAA,IAAA,OAAAuB,UACEvB,EAAAA,EAAAA,IAAC4J,EAAAA,GAAc,CAAArI,UAAEuE,EAAAA,EAAAA,GAAE,qBAErB9F,EAAAA,EAAAA,IAAC6J,EAAAA,GAAM,CACL3E,QAnByB4E,MAC7B7G,EAAAA,EAAAA,IAAe,qDAAsD,CACnED,gBACA,EAiBEiC,GAAIyE,EACJK,KAAK,KACL,eAAa,0BAAyBxI,UAErCuE,EAAAA,EAAAA,GAAE,oBAEL9F,EAAAA,EAAAA,IAACgK,EAAgB,CAACpB,UAAWA,EAAWqB,SApCRC,CAAC1C,EAAQ9D,EAAUN,MACrDH,EAAAA,EAAAA,IAAe,qDAAsD,CACnED,iBAEFS,EAAAA,eAAAA,KAAoB,CAClBC,WACAN,MAAO,IAAIA,EAAO,CAAC/C,GAAmBmH,IACtC,EA6BgEuC,KAAK,SAG3E,CAlVarI,EAAWtB,YAAA,cAwSf4I,EAAU5I,YAAA,aA4CnB,MAAMoF,GAAa2E,EAAAA,EAAAA,GAAO,MAAK,CAAA3F,OAAA,aAAZ2F,CAAa,CAAA1J,KAAA,SAAA2J,OAAA,kEAM1BT,GAASQ,EAAAA,EAAAA,GAAO,MAAK,CAAA3F,OAAA,aAAZ2F,CAAa,mEAGTE,EAAAA,EAAAA,GAAM,GAAE,wBAIrBL,GAAmBG,EAAAA,EAAAA,GAAOG,EAAAA,EAAU,CAAA9F,OAAA,aAAjB2F,CAAkB,iBACzBE,EAAAA,EAAAA,GAAM,GAAE,I","sources":["webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default SegmentExplorerQuery;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport {Button} from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/discover/table/cellAction';\nimport {TableColumn} from 'sentry/views/discover/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nexport const TAG_EXPLORER_COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = TAG_EXPLORER_COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.tag_value', {\n      organization,\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalytics('performance_views.summary.tag_explorer.cell_action', {\n        organization,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.visit_tag_key', {\n      organization,\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = TAG_EXPLORER_COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["getRequestFunction","_props","aggregateColumn","props","eventView","apiPayload","getEventsAPIPayload","location","sort","allTagKeys","tagKey","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","_jsx","GenericDiscoverQuery","route","getRequestPayload","displayName","TAGS_CURSOR_NAME","TAG_EXPLORER_COLUMN_ORDER","key","field","name","width","column","kind","canSort","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","children","row","tags_value","TagExplorer","Component","constructor","arguments","_defineProperty","widths","columnIndex","nextColumn","this","state","Number","COL_WIDTH_UNDEFINED","setState","columns","map","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","organization","trackAnalytics","queryString","decodeScalar","query","conditions","MutableSearch","addFilterValues","formatString","browserHistory","pathname","String","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","id","undefined","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","orgSlug","slug","transaction","projectID","project","tags_key","Link","to","onClick","onTagKeyClick","allowActions","Actions","CellAction","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","PerformanceDuration","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","SortLink","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","render","cursor","tagEventView","clone","fields","tagSorts","fromSorts","withSorts","length","adjustedColumns","getColumnsWithReplacedDuration","c","durationColumn","find","getColumnOrder","columnSortBy","getSorts","limit","_ref","isLoading","tableData","pageLinks","_jsxs","Fragment","GuideAnchor","TagsHeader","GridEditable","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","SectionHeading","Button","handleViewAllTagsClick","size","StyledPagination","onCursor","handleCursor","_styled","styles","space","Pagination"],"sourceRoot":""}