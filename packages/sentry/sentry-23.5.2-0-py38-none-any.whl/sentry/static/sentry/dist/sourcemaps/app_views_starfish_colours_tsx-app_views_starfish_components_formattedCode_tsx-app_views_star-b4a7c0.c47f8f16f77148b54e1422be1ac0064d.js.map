{"version":3,"file":"chunks/app_views_starfish_colours_tsx-app_views_starfish_components_formattedCode_tsx-app_views_star-b4a7c0.xxxxxxxxxxxxxxxxxxxx.js","mappings":"w0BAkBO,MAAMA,EAGXC,YAAYC,EAAsBC,IAAqBC,EAAAA,EAAAA,GAAA,wBAAAA,EAAAA,EAAAA,GAAA,6BACrDC,KAAKC,QAAUJ,EACfG,KAAKF,cAAgBA,CACvB,CAEAI,mBACE,OAAOF,KAAKF,aACd,EA+HF,MAAMK,UAAoCC,EAAAA,UAAiCR,cAAA,SAAAS,YAAAN,EAAAA,EAAAA,GAAA,aACvD,CAChBO,WAAW,EACXC,kBAAcC,EACdC,MAAO,KAEPC,UAAW,KACXC,UAAW,KACXC,IAAK,IAAIC,EAAAA,MACVd,EAAAA,EAAAA,GAAA,2BAuBqBe,IACpB,MAAMC,EAAiBC,EAAWhB,KAAKiB,OACjCC,EAAkBF,EAAWF,GAEnC,QACGK,EAAAA,EAAAA,IAAoBJ,EAAgBG,IACrCJ,EAAUM,QAAUpB,KAAKiB,MAAMG,OAC/BN,EAAUO,QAAUrB,KAAKiB,MAAMI,OAC/BP,EAAUQ,SAAWtB,KAAKiB,MAAMK,MAAM,KAI1CvB,EAAAA,EAAAA,GAAA,oBAGeU,IACb,GAAIT,KAAKiB,MAAMM,WACb,OAAOvB,KAAKiB,MAAMM,WAAWd,GAG/B,IAAKA,EACH,OAAO,KAGT,MAAMe,EAASf,EAAMgB,cAAcD,OACnC,GAAsB,iBAAXA,EACT,OAAO,IAAI7B,EAAW6B,EAAQf,GAGhC,MAAMR,EAAUuB,GAAQvB,QACxB,OACS,IAAIN,EADU,iBAAZM,EACaA,GAGYyB,EAAAA,EAAAA,GAAE,8BAHLjB,EAId,KACpBV,EAAAA,EAAAA,GAAA,kBAEW4B,UACV,MAAM,cACJC,EAAa,YACbC,EAAW,WACXC,EAAU,SACVC,EAAQ,UACRC,EAAS,QACTC,EAAO,MACPZ,EAAK,SACLa,GACElC,KAAKiB,OACH,IAACL,GAAOZ,KAAKmC,MAEnB,IAAKH,EAAUI,UACb,OAGF,MAAMC,EAAO,kBAAiBJ,KAAWZ,KACnCd,EAAe+B,OAAQ,gBACvBC,EAAkDvB,EAAWhB,KAAKiB,OAExEjB,KAAKwC,SAAS,CAAClC,WAAW,EAAMC,iBAEhC2B,SAAW1B,GAEXqB,IAAcjB,GAGdA,EAAI6B,QAEJ,IACE,MAAOC,EAAK,CAAGC,SAAcC,EAAmBhC,EAAKyB,EAAKE,EAAY,CACpEX,kBAGF,GAAI5B,KAAKmC,MAAM5B,eAAiBA,EAE9B,OAGF,MAAMG,EAAYoB,EAAaA,EAAWY,EAAM1C,KAAKiB,OAASyB,EAC9DX,IAAWrB,GACXV,KAAKwC,UAASK,IAAa,CACzBvC,WAAW,EACXC,kBAAcC,EACdC,MAAO,KACPE,UAAWgC,GAAMG,kBAAkB,SAAWD,EAAUlC,UACxDD,eAEJ,CAAE,MAAOqC,GACP,MAAMtC,EAAQT,KAAKgD,YAAYD,GAC/B/C,KAAKwC,SAAS,CACZlC,WAAW,EACXC,kBAAcC,EACdC,QACAC,UAAW,OAETwB,GACFA,EAASzB,QAASD,EAEtB,IACD,CAxHDyC,oBACEjD,KAAKkD,WACP,CAEAC,mBAAmBrC,GAEjB,MAAMsC,EAAmBpD,KAAKqD,mBAAmBvC,GAG3CwC,GAC8B,IAAlCxC,EAAUkB,UAAUI,WAAuBpC,KAAKiB,MAAMe,UAAUI,UAE5DmB,IAAwBvD,KAAKiB,MAAMuC,mBACrCxD,KAAKiB,MAAMuC,kBAAkB1C,EAAWd,KAAKiB,QAG7CmC,GAAoBE,GAAuBC,IAC7CvD,KAAKkD,WAET,CAuGAO,SACE,MAAM,UAACnD,EAAS,MAAEG,EAAK,UAAEC,EAAS,UAAEC,GAAaX,KAAKmC,MAEhDuB,EAAyC,CAC7CpD,YACAG,QACAC,YACAC,aAEIgD,EAAsC3D,KAAKiB,MAAM0C,SACvD,OAAOA,IAAWD,EACpB,EAKK,SAASE,EAA2B3C,GACzC,MAAM4C,GAAmBC,EAAAA,EAAAA,GAAgB,CAACC,WAAW,KAAQC,KACvDC,GAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,KAA8BnC,UAEhEC,EAAUhB,EAAMgB,SAAW4B,EAC3B7B,EAAYf,EAAMe,WAAaiC,EAErC,QAAgBzD,IAAZyB,QAAuCzB,IAAdwB,EAC3B,MAAM,IAAIoC,MAAM,+DAGlB,MAAMC,EAAsB,IACvBpD,EACHgB,UACAD,aAEF,OAAOsC,EAAAA,EAAAA,IAACnE,EAAqB,IAAWkE,GAC1C,CAtKMlE,EAAqBoE,YAAA,wBAqJXX,EAAoBW,YAAA,uBA4BpC,MAAMC,EAAe,IACfC,EAAqB,EACrBC,EAAOC,GAAY,IAAIC,SAAQC,GAAWC,WAAWD,EAASF,KAE7DhD,eAAeiB,EACpBhC,EACAyB,EACA0C,GAK+D,IAJ/DC,EAGC3E,UAAA4E,OAAA,QAAAzE,IAAAH,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM,cAACuB,EAAa,MAAEsD,GAASF,EAC/B,GAAIpD,GAAeuD,aACjB,OAAOvD,EAAcuD,aAAavE,EAAKyB,EAAK,CAC1C+C,MAAOL,EACPM,gBAAgB,IAIpB,MAAMC,EAAcJ,GAAOI,aAAed,EACpCe,EAAoBL,GAAOK,mBAAqBd,EAChDe,EAAcN,GAAOM,aAAe,GACpCC,EAAWP,GAAOQ,OAAS,EACjC,IAEIjF,EAFAiF,EAAQ,EACRC,EAAU,EAGd,KAAOD,EAAQD,KAAchF,GAAS+E,EAAYI,SAASnF,EAAMoF,UAAU,CACrEF,EAAU,SACNjB,EAAKiB,GAEb,IAEE,OADAD,UACa9E,EAAIkF,eAAezD,EAAK,CACnC0D,OAAQ,MACRV,gBAAgB,EAChBD,MAAO,IAEDL,IAGV,CAAE,MAAOhC,GACPtC,EAAQsC,EACR4C,EAAUL,EAAcC,IAAsBG,EAAQ,EACxD,CACF,CACA,MAAMjF,CACR,CAEA,SAASO,EAAiBC,GACxB,MAAM,OACJK,EAAM,MACNF,EAAK,aACL4E,EAAY,SACZC,EAAQ,kBACRC,EAAiB,UACjBlE,EAAS,SACTmE,EAAQ,0BACRC,GACEnF,EACEoF,EAAUH,EACZA,EAAkBjF,GAClBe,EAAUsE,oBAAoBH,EAAUC,GAiB5C,OAfI9E,IACF+E,EAAQ/E,OAASA,GAEfF,IACFiF,EAAQE,SAAWnF,GAEjB4E,IACFK,EAAQL,aAAeA,GAErBC,IACFI,EAAQJ,SAAWA,GAGrBO,OAAOC,OAAOJ,EAASpF,EAAMyF,aAAe,CAAC,GAEtCL,CACT,CAEO,SAASM,EAA8B1F,GAC5C,MAAML,GAAMgG,EAAAA,EAAAA,MACN,QAAC3E,EAAO,MAAEZ,EAAK,QAAE2D,GAAW/D,EAC5BoB,EAAO,kBAAiBJ,KAAWZ,KACnCkB,EAAavB,EAAiBC,GAEpC,OAAO4F,EAAAA,EAAAA,GACL,CAACxF,EAAOkB,IACRZ,UACE,MAAOgB,SAAcC,EAAmBhC,EAAKyB,EAAKE,EAAY,CAC5DX,cAAeX,EAAMW,gBAEvB,OAAOe,CAAI,GAEbqC,EAEJ,CAEA,S,gKC1aA,MACE8B,EACAC,EACA5C,IACE6C,EAAAA,EAAAA,GAAqD,CACvDC,KAAM,+B,2KCJD,SAASD,EAAkChC,GAKhD,MAAM,OACJkC,GAAS,EAAI,aACbrH,EAAgB,mBAAkBmF,EAAQiC,+CAA8C,KACxFA,GACEjC,EAEEmC,GAAUC,EAAAA,EAAAA,oBAAuC5G,GAYvD,OAVA2G,EAAQ5C,YAAc0C,EAUf,CACLE,EAAQE,SATV,WACE,MAAMC,GAAUpD,EAAAA,EAAAA,YAAWiD,GAC3B,IAAKG,GAAWJ,EACd,MAAM,IAAI9C,MAAMvE,GAElB,OAAOyH,CACT,EAKEH,EAEJ,C,sHCnCO,MAAMI,EAAmBC,EAAAA,EAAAA,GAAAA,GACnBC,EAAiBD,EAAAA,EAAAA,GAAAA,GACFA,EAAAA,EAAAA,GAAAA,E,uMCArB,MAAME,GAAgBC,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,YAC7BE,EAAAA,EAAAA,GAAM,GAAE,mBACFA,EAAAA,EAAAA,GAAM,GAAE,mBACRC,GAAKA,EAAEC,MAAMC,cAAY,oC,6RCqCrC,SAAS,EAAQC,GACtBA,EAAUC,gBAAgB,MAAO,IACnC,C,wPC7Be,SAASC,EAASC,GAAmD,IAAlD,OAACC,EAAM,MAAEC,EAAK,MAAEC,EAAK,SAAEC,GAAyBJ,EAGhF,GAFAK,EAAAA,EAAY,CAACC,EAAAA,EAAWC,KAEnBN,EAAO3F,KACV,OAAO,KAGT,MAAMkG,EAAc,CAClBlG,KAAM2F,EAAO3F,KAAKmG,KAAIC,GAASA,EAAMC,QACrCC,KAAM,OACNC,YAAY,EACZC,QAAQ,GAGV,OACE5E,EAAAA,EAAAA,IAAC6E,EAAAA,EAAgB,CACfV,QAASA,EACTW,OAAQ,CACNb,QACAF,OAAQ,CAACO,EAAaJ,GACtBa,MAAO,CACLC,MAAM,EACN5G,KAAM2F,EAAO3F,KAAKmG,KAAIC,GAASA,EAAM7B,OACrC+B,KAAM,YAERO,MAAO,CACLD,MAAM,EACNN,KAAM,SAERQ,KAAM,CACJC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,IAGZC,UAAQ,EACRC,MAAO,CACLC,OAAQ,GACRzB,MAAOA,GAAS,KAElB0B,YAAU,EACVjC,MAAM,cAGZ,CAuGO,SAASkC,EAAuBC,EAAeC,EAAkBpC,GACtE,MAAO,CACLqC,WAAYF,EACZlB,KAAM,OACNT,MAAOR,EAAMsC,QACb3H,KAAM,GACN4H,WAAY,EACZC,WAAY,EACZ/B,UAAUgC,EAAAA,EAAAA,GAAS,CACjBC,QAAQ,EACRC,WAAW,EACXC,UAAW,CAACpC,MAAOR,EAAMsC,QAASrB,KAAM,UACxCtG,KAAM,CACJ,CACE6G,MAAOY,IAGXS,MAAO,CACLtB,MAAM,EACNa,SAAU,cACVU,UAAWX,KAInB,CA5KwB/B,EAAS5D,YAAA,W,yWCN1B,MAAMuG,EAAwB,WACnC,MAAMC,GAAcC,EAAAA,EAAAA,MACd,UAACC,EAAS,QAAEC,IAAWC,EAAAA,EAAAA,IAAeJ,GAGtC3F,EAeE,qJAjBYgG,EAAAA,EAAAA,GAAmBH,EAAWC,OAG5ClJ,EAyBCqJ,EAAAA,GAAAA,eAAyB,CAC9BpE,KAAM,GACNqE,OAAQ,CAAC,sBACTC,QAASC,EAAAA,GAAAA,cACTC,SAAU,CAAC,GACXC,QAAS,KA3BL,UAACpL,EAAS,KAAEoC,IAAQiJ,EAAAA,EAAAA,IAAyB,CACjD3J,YACA4J,YAAaxG,EACbyG,YAAa,GACbC,QAASC,QAAQ3G,KAGnB,MAAO,CAAC9E,YAAWoC,KAAMA,EAAK,IAAM,CAAC,EACvC,C,wEC5BO,MAAMsJ,EAAO,uB,iICIb,MAAMZ,EAAqBA,CAACH,EAAmBC,KACpD,MAAM,gBAACe,EAAe,cAAEC,IAAiBC,EAAAA,EAAAA,IAAqC,CAC5EC,MAAOnB,EAAUoB,OAAO,uBACxBC,IAAKpB,EAAQmB,OAAO,yBAEtB,MAAQ,OACNJ,EAAmB,yCAAwCA,MAAsB,SACjFC,EAAiB,sCAAqCA,MAAoB,QAC3E,C,gmBCEH,MAAMK,EAAc,sBAKb,SAASZ,EAAavD,GAYE,IAZU,UACvCpG,EAAS,YACT4J,EAAW,YACXC,EAAW,iBACXW,EAAgB,QAChBV,GAOD1D,EACC,MAAM,QAACpD,GC1BF,WACL,MAAOA,EAASyH,IAAcC,EAAAA,EAAAA,UAA0B,CAACC,aAAa,IACtE,MAAO,CAAC3H,UAASyH,aACnB,CDuBoBG,IACZ,YAACD,GAAe3H,EAChB6H,EAwHR,SAAyBC,GAMtB,IANuB,YACxBH,EAAW,kBACXI,GAIDD,EACC,OAAIH,EACEI,EACKC,EAEFC,EAEFC,CACT,CAtIwBC,CAAiB,CACrCR,YAAaH,GAAoBG,EACjCI,mBAAoB/K,GAAWuH,OAAOtE,QAAU,GAAK,IAEvD,GAiBF,SACE4H,GAEA,OAAOA,IAAkBI,CAC3B,CArBMG,CAAmBP,IAuBzB,SACEA,GAEA,OAAOA,IAAkBG,CAC3B,CA3B2CK,CAA6BR,GAAgB,CACpF,GAAI7K,EACF,OAAO6K,EAAc,CAAC7K,YAAW6J,cAAaC,YAEhD,MAAM,IAAI1H,MACR,uEAEJ,CAEA,GAAIwH,EACF,OAAOiB,EAAc,CAACjB,cAAaC,cAAaC,YAElD,MAAM,IAAI1H,MACR,oHAEJ,CAcO,SAAS8I,EAAeI,GAQ5B,IAR6B,YAC9B1B,EAAW,YACXC,EAAW,QACXC,GAKDwB,EACC,MAAM,UAAChN,EAAS,KAAEoC,IAAQmE,EAAAA,EAAAA,GAAS,CACjC0G,SAAU,CAAC3B,GACX4B,QAASA,IAAMC,MAAO,GAAEzB,EAAAA,YAAeJ,KAAe8B,MAAKC,GAAOA,EAAIC,SACtE1I,OAAO,EACP2G,cACAC,UACA+B,sBAAsB,IAExB,MAAO,CAACvN,YAAWoC,OACrB,CAEO,SAASsK,EAAiCc,GAU9C,IAV+C,UAChD9L,EAAS,QACT8J,EAAO,YACPD,EAAW,SACX5F,GAMD6H,EACC,MAAM3H,GAAW4H,EAAAA,EAAAA,KACXC,GAAelK,EAAAA,EAAAA,MACf,UAACxD,EAAS,KAAEoC,IAAQiE,EAAAA,EAAAA,IAKxB,CACAtF,MAAO,eACPW,YACAmE,WACAlE,QAAS+L,EAAahK,KACtBkC,kBAAmBA,KAAA,IACdlE,EAAUsE,oBAAoBH,GACjCoD,MAAOvH,EAAUuH,MACjB0E,UAAWjM,EAAUiM,UACrBC,aAAc,EACdC,QAAS,EACTC,QAASpM,EAAUqM,QAAQ,IAAKC,EAAAA,EAAAA,IAAWtM,EAAUqM,QAAQ,SAAM7N,EACnE+N,SAAUvM,EAAUuM,WAEtBvJ,QAAS,CACP8G,UACA+B,sBAAsB,GAExB5H,aAEF,MAAO,CACL3F,YACAoC,KACEpC,GAAauL,EACTA,EACA2C,EAAgC9L,EAAMV,GAEhD,CAEO,SAASiL,EAAuBwB,GAQpC,IARqC,UACtCzM,EAAS,YACT6J,EAAW,SACX5F,GAKDwI,EACC,MAAMtI,GAAW4H,EAAAA,EAAAA,KACXC,GAAelK,EAAAA,EAAAA,MACf,UAACxD,EAAS,KAAEoC,IAAQgM,EAAAA,EAAAA,GAAiB,CACzC1M,YACAC,QAAS+L,EAAahK,KACtBmC,WACAF,aAEF,MAAO,CAAC3F,YAAWoC,KAAMpC,GAAauL,EAAcA,EAAcnJ,GAAMA,KAC1E,CAoBA,SAAS8L,EAAgCG,EAAQ3M,GAC/C,IAAKA,EAAUuH,MACb,MAAO,GAET,IAAIqF,EAAY,GAChB,MAAMC,EACJ7M,EAAUuH,QACkB,iBAApBvH,EAAUuH,OAAiD,IAA3BvH,EAAUuH,MAAMtE,QACpD6J,EACuB,iBAApB9M,EAAUuH,MAAqBvH,EAAUuH,MAAQvH,EAAUuH,MAAM,GAE1E,OAAIoF,EAAOjM,KACFqM,EACLJ,EACAE,EAAcC,EAAa,UAG/BtI,OAAOwI,KAAKL,GAAQM,SAAQC,IACtBP,EAAOO,GAAKxM,KACdkM,EAAYO,EACVP,EACAG,EAAsCJ,EAAOO,GAAML,EAAcC,EAAaI,IAGhF1I,OAAOwI,KAAKL,EAAOO,IAAMD,SAAQG,IACd,UAAbA,IACFR,EAAYO,EACVP,EACAG,EAAsCJ,EAAOO,GAAKE,GAAWA,EAAUF,IAE3E,GAEJ,IAGgBN,EAAU/F,KAAI0F,IAAY,IACvCA,EACHA,SAAUc,IAAyC,IAAlCC,SAASf,EAASA,SAAU,KAAYlC,OAAOE,OAGpE,CAEA,SAASwC,EAAsCJ,EAAQO,EAAaK,GAClE,MAAMX,EAAY,GAgBlB,OAfAD,EAAOjM,KAAKuM,SAAQO,IAAmC,IAAjCC,IAAaC,MAAO3G,KAAQyG,EAChD,MAAMG,EAAmBf,EAAUgB,MACjCrB,GACEA,EAASA,WAAakB,KAAcF,GAAQhB,EAASgB,QAAUA,KAE/DI,EACFA,EAAiBT,GAAOnG,EAG1B6F,EAAUiB,KAAK,CACbtB,SAAUkB,EACV,CAACP,GAAMnG,EACPwG,SACA,IAEGX,CACT,CAEA,SAASO,EAAeW,EAAmBC,GACzC,MAAMnI,EAAqBoI,KAAKC,MAAMD,KAAKE,UAAUJ,IAcrD,OAbAC,EAAOd,SAAQkB,IAA2C,IAAzC5B,SAAUkB,EAAS,MAAEF,KAAUa,GAAKD,EACnD,MAAMR,EAAmB/H,EAAOgI,MAC9BrB,GACEA,EAASA,WAAakB,KAAcF,GAAQhB,EAASgB,QAAUA,KAE/DI,EACFnJ,OAAOwI,KAAKoB,GAAMnB,SAAQC,IACxBS,EAAiBT,GAAOkB,EAAKlB,EAAI,IAIrCtH,EAAOiI,KAAK,CAACtB,SAAUkB,EAAWF,WAAUa,GAAM,IAE7CxI,CACT,C","sources":["webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/starfish/colours.tsx","webpack:///./app/views/starfish/components/formattedCode.tsx","webpack:///../node_modules/echarts/lib/renderer/installSVGRenderer.js","webpack:///./app/views/starfish/components/sparkline.tsx","webpack:///./app/views/starfish/queries/useApplicationMetrics.tsx","webpack:///./app/views/starfish/utils/constants.tsx","webpack:///./app/views/starfish/utils/getDateQueryFilter.tsx","webpack:///./app/views/starfish/utils/useSpansQuery.tsx","webpack:///./app/views/starfish/utils/useStarfishOptions.tsx"],"sourcesContent":["import {Component, useContext} from 'react';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\n\nimport useApi from '../useApi';\nimport useOrganization from '../useOrganization';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string | string[] | undefined>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationDiscoverEndpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  options?: Omit<Parameters<typeof useQuery>[2], 'initialData'>;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  api: Client;\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n    api: new Client(),\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = getPayload(this.props);\n    const otherAPIPayload = getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n    const {api} = this.state;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching,\n      });\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useOrganization({allowNull: true})?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\ntype RetryOptions = {\n  statusCodes: number[];\n  tries: number;\n  baseTimeout?: number;\n  timeoutMultiplier?: number;\n};\n\nconst BASE_TIMEOUT = 200;\nconst TIMEOUT_MULTIPLIER = 2;\nconst wait = duration => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  options: {\n    queryBatching?: QueryBatching;\n    retry?: RetryOptions;\n  } = {}\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  const {queryBatching, retry} = options;\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  const baseTimeout = retry?.baseTimeout ?? BASE_TIMEOUT;\n  const timeoutMultiplier = retry?.timeoutMultiplier ?? TIMEOUT_MULTIPLIER;\n  const statusCodes = retry?.statusCodes ?? [];\n  const maxTries = retry?.tries ?? 1;\n  let tries = 0;\n  let timeout = 0;\n  let error;\n\n  while (tries < maxTries && (!error || statusCodes.includes(error.status))) {\n    if (timeout > 0) {\n      await wait(timeout);\n    }\n    try {\n      tries++;\n      return await api.requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          // marking params as any so as to not cause typescript errors\n          ...(params as any),\n        },\n      });\n    } catch (err) {\n      error = err;\n      timeout = baseTimeout * timeoutMultiplier ** (tries - 1);\n    }\n  }\n  throw error;\n}\n\nfunction getPayload<T, P>(props: Props<T, P>) {\n  const {\n    cursor,\n    limit,\n    noPagination,\n    referrer,\n    getRequestPayload,\n    eventView,\n    location,\n    forceAppendRawQueryString,\n  } = props;\n  const payload = getRequestPayload\n    ? getRequestPayload(props)\n    : eventView.getEventsAPIPayload(location, forceAppendRawQueryString);\n\n  if (cursor) {\n    payload.cursor = cursor;\n  }\n  if (limit) {\n    payload.per_page = limit;\n  }\n  if (noPagination) {\n    payload.noPagination = noPagination;\n  }\n  if (referrer) {\n    payload.referrer = referrer;\n  }\n\n  Object.assign(payload, props.queryExtras ?? {});\n\n  return payload;\n}\n\nexport function useGenericDiscoverQuery<T, P>(props: Props<T, P>) {\n  const api = useApi();\n  const {orgSlug, route, options} = props;\n  const url = `/organizations/${orgSlug}/${route}/`;\n  const apiPayload = getPayload<T, P>(props);\n\n  return useQuery<T, QueryError>(\n    [route, apiPayload],\n    async () => {\n      const [resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching: props.queryBatching,\n      });\n      return resp;\n    },\n    options\n  );\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {CHART_PALETTE} from 'sentry/constants/chartPalette';\n\nexport const THROUGHPUT_COLOR = CHART_PALETTE[0][0];\nexport const DURATION_COLOR = CHART_PALETTE[1][1];\nexport const ERRORS_COLOR = CHART_PALETTE[2][2];\n","import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\nexport const FormattedCode = styled('div')`\n  padding: ${space(1)};\n  margin-bottom: ${space(3)};\n  border-radius: ${p => p.theme.borderRadius};\n  overflow-x: auto;\n  white-space: pre;\n`;\n","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport SVGPainter from 'zrender/lib/svg/Painter.js';\nexport function install(registers) {\n  registers.registerPainter('svg', SVGPainter);\n}","import {Theme} from '@emotion/react';\nimport {LineChart} from 'echarts/charts';\nimport * as echarts from 'echarts/core';\nimport {SVGRenderer} from 'echarts/renderers';\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\nimport moment from 'moment';\n\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\n\ntype SparklineProps = {\n  series: Series;\n  color?: string | string[];\n  markLine?: Series;\n  width?: number;\n};\n\nexport default function Sparkline({series, width, color, markLine}: SparklineProps) {\n  echarts.use([LineChart, SVGRenderer]);\n\n  if (!series.data) {\n    return null;\n  }\n\n  const valueSeries = {\n    data: series.data.map(datum => datum.value),\n    type: 'line',\n    showSymbol: false,\n    smooth: true,\n  };\n\n  return (\n    <ReactEChartsCore\n      echarts={echarts}\n      option={{\n        color,\n        series: [valueSeries, markLine],\n        xAxis: {\n          show: false,\n          data: series.data.map(datum => datum.name),\n          type: 'category',\n        },\n        yAxis: {\n          show: false,\n          type: 'value',\n        },\n        grid: {\n          left: 3,\n          top: 3,\n          right: 3,\n          bottom: 3,\n        },\n      }}\n      notMerge\n      style={{\n        height: 25,\n        width: width ?? 200,\n      }}\n      lazyUpdate\n      theme=\"theme_name\"\n    />\n  );\n}\n\ntype MultiSparklineProps = {\n  color: string[];\n  series: Series[];\n  height?: number;\n  markLine?: Series;\n  width?: number;\n};\n\nexport function MultiSparkline({\n  series,\n  markLine,\n  width,\n  height,\n  color,\n}: MultiSparklineProps) {\n  echarts.use([LineChart, SVGRenderer]);\n\n  function getValueSeries(targetSeries, i) {\n    return {\n      data: targetSeries.data.map(datum => datum.value),\n      type: 'line',\n      showSymbol: false,\n      smooth: true,\n      lineStyle: {color: color[i], width: [1, 2][i]},\n      yAxisIndex: i,\n    };\n  }\n\n  return (\n    <ReactEChartsCore\n      echarts={echarts}\n      option={{\n        series: [...series.map((item, index) => getValueSeries(item, index)), markLine],\n        xAxis: {\n          show: false,\n          data: getValueSeries(series[0], 0).data.map(datum => datum.name),\n          type: 'category',\n        },\n        yAxis: [\n          {\n            show: false,\n            type: 'value',\n          },\n          {\n            show: false,\n            type: 'value',\n          },\n        ],\n        grid: {\n          left: 3,\n          top: 3,\n          right: 3,\n          bottom: 3,\n        },\n      }}\n      notMerge\n      style={{\n        height: height ?? 25,\n        width: width ?? 200,\n      }}\n      lazyUpdate\n      theme=\"theme_name\"\n    />\n  );\n}\n\nexport function generateMarkLine(\n  title: string,\n  position: string,\n  data: SeriesDataUnit[],\n  theme: Theme\n) {\n  const index = data.findIndex(item => {\n    return (\n      Math.abs(moment.duration(moment(item.name).diff(moment(position))).asSeconds()) <\n      86400\n    );\n  });\n  return {\n    seriesName: title,\n    type: 'line',\n    color: theme.blue300,\n    data: [],\n    xAxisIndex: 0,\n    yAxisIndex: 0,\n    markLine: MarkLine({\n      silent: true,\n      animation: false,\n      lineStyle: {color: theme.blue300, type: 'dotted'},\n      data: [\n        {\n          xAxis: index,\n        },\n      ],\n      label: {\n        show: false,\n      },\n    }),\n  };\n}\n\nexport function generateHorizontalLine(title: string, position: number, theme: Theme) {\n  return {\n    seriesName: title,\n    type: 'line',\n    color: theme.blue300,\n    data: [],\n    xAxisIndex: 0,\n    yAxisIndex: 0,\n    markLine: MarkLine({\n      silent: true,\n      animation: false,\n      lineStyle: {color: theme.blue300, type: 'dotted'},\n      data: [\n        {\n          yAxis: position,\n        },\n      ],\n      label: {\n        show: true,\n        position: 'insideStart',\n        formatter: title,\n      },\n    }),\n  };\n}\n","import EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {getDateFilters} from 'sentry/views/starfish/utils/dates';\nimport {getDateQueryFilter} from 'sentry/views/starfish/utils/getDateQueryFilter';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\ntype Metrics = {\n  'sum(span.duration)': number;\n};\n\nexport const useApplicationMetrics = (_referrer = 'application-metrics') => {\n  const pageFilters = usePageFilters();\n  const {startTime, endTime} = getDateFilters(pageFilters);\n  const dateFilters = getDateQueryFilter(startTime, endTime);\n\n  const query = getQuery(dateFilters);\n  const eventView = getEventView();\n\n  // TODO: Add referrer\n  const {isLoading, data} = useSpansQuery<Metrics[]>({\n    eventView,\n    queryString: query,\n    initialData: [],\n    enabled: Boolean(query),\n  });\n\n  return {isLoading, data: data[0] ?? {}};\n};\n\nfunction getQuery(dateFilters: string) {\n  return `\n    SELECT\n    count() as count,\n    sum(exclusive_time) as \"sum(span.duration)\"\n    FROM spans_experimental_starfish\n    WHERE 1 = 1\n    ${dateFilters}\n`;\n}\n\nfunction getEventView() {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['sum(span.duration)'],\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    projects: [1],\n    version: 2,\n  });\n}\n","export const HOST = 'http://localhost:8080';\n","import {Moment} from 'moment';\n\nimport {datetimeToClickhouseFilterTimestamps} from 'sentry/views/starfish/utils/dates';\n\nexport const getDateQueryFilter = (startTime: Moment, endTime: Moment) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps({\n    start: startTime.format('YYYY-MM-DD HH:mm:ss'),\n    end: endTime.format('YYYY-MM-DD HH:mm:ss'),\n  });\n  return `\n  ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n  ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n  `;\n};\n","import {useQuery} from '@tanstack/react-query';\nimport moment from 'moment';\n\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {useStarfishOptions} from 'sentry/views/starfish/utils/useStarfishOptions';\n\nconst DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ss';\n\n// Setting return type since I'd rather not know if its discover query or not\nexport type UseSpansQueryReturnType<T> = {data: T; isLoading: boolean};\n\nexport function useSpansQuery<T = any[]>({\n  eventView,\n  queryString,\n  initialData,\n  forceUseDiscover,\n  enabled,\n}: {\n  enabled?: boolean;\n  eventView?: EventView;\n  forceUseDiscover?: boolean;\n  initialData?: any;\n  queryString?: string;\n}): UseSpansQueryReturnType<T> {\n  const {options} = useStarfishOptions();\n  const {useDiscover} = options;\n  const queryFunction = getQueryFunction({\n    useDiscover: forceUseDiscover ?? useDiscover,\n    isTimeseriesQuery: (eventView?.yAxis?.length ?? 0) > 0,\n  });\n  if (isDiscoverFunction(queryFunction) || isDiscoverTimeseriesFunction(queryFunction)) {\n    if (eventView) {\n      return queryFunction({eventView, initialData, enabled});\n    }\n    throw new Error(\n      'eventView argument must be defined when Starfish useDiscover is true'\n    );\n  }\n\n  if (queryString) {\n    return queryFunction({queryString, initialData, enabled});\n  }\n  throw new Error(\n    'queryString argument must be defined when Starfish useDiscover is false, ie when using scraped data via fetch API'\n  );\n}\n\nfunction isDiscoverFunction(\n  queryFunction: Function\n): queryFunction is typeof useWrappedDiscoverQuery {\n  return queryFunction === useWrappedDiscoverQuery;\n}\n\nfunction isDiscoverTimeseriesFunction(\n  queryFunction: Function\n): queryFunction is typeof useWrappedDiscoverTimeseriesQuery {\n  return queryFunction === useWrappedDiscoverTimeseriesQuery;\n}\n\nexport function useWrappedQuery({\n  queryString,\n  initialData,\n  enabled,\n}: {\n  queryString: string;\n  enabled?: boolean;\n  initialData?: any;\n}) {\n  const {isLoading, data} = useQuery({\n    queryKey: [queryString],\n    queryFn: () => fetch(`${HOST}/?query=${queryString}`).then(res => res.json()),\n    retry: false,\n    initialData,\n    enabled,\n    refetchOnWindowFocus: false,\n  });\n  return {isLoading, data};\n}\n\nexport function useWrappedDiscoverTimeseriesQuery({\n  eventView,\n  enabled,\n  initialData,\n  referrer,\n}: {\n  eventView: EventView;\n  enabled?: boolean;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data} = useGenericDiscoverQuery<\n    {\n      data: any[];\n    },\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 1,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n    }),\n    options: {\n      enabled,\n      refetchOnWindowFocus: false,\n    },\n    referrer,\n  });\n  return {\n    isLoading,\n    data:\n      isLoading && initialData\n        ? initialData\n        : processDiscoverTimeseriesResult(data, eventView),\n  };\n}\n\nexport function useWrappedDiscoverQuery({\n  eventView,\n  initialData,\n  referrer,\n}: {\n  eventView: EventView;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data} = useDiscoverQuery({\n    eventView,\n    orgSlug: organization.slug,\n    location,\n    referrer,\n  });\n  return {isLoading, data: isLoading && initialData ? initialData : data?.data};\n}\n\nfunction getQueryFunction({\n  useDiscover,\n  isTimeseriesQuery,\n}: {\n  useDiscover: boolean;\n  isTimeseriesQuery?: boolean;\n}) {\n  if (useDiscover) {\n    if (isTimeseriesQuery) {\n      return useWrappedDiscoverTimeseriesQuery;\n    }\n    return useWrappedDiscoverQuery;\n  }\n  return useWrappedQuery;\n}\n\ntype Interval = {[key: string]: any; interval: string; group?: string};\n\nfunction processDiscoverTimeseriesResult(result, eventView: EventView) {\n  if (!eventView.yAxis) {\n    return [];\n  }\n  let intervals = [] as Interval[];\n  const singleYAxis =\n    eventView.yAxis &&\n    (typeof eventView.yAxis === 'string' || eventView.yAxis.length === 1);\n  const firstYAxis =\n    typeof eventView.yAxis === 'string' ? eventView.yAxis : eventView.yAxis[0];\n\n  if (result.data) {\n    return processSingleDiscoverTimeseriesResult(\n      result,\n      singleYAxis ? firstYAxis : 'count'\n    );\n  }\n  Object.keys(result).forEach(key => {\n    if (result[key].data) {\n      intervals = mergeIntervals(\n        intervals,\n        processSingleDiscoverTimeseriesResult(result[key], singleYAxis ? firstYAxis : key)\n      );\n    } else {\n      Object.keys(result[key]).forEach(innerKey => {\n        if (innerKey !== 'order') {\n          intervals = mergeIntervals(\n            intervals,\n            processSingleDiscoverTimeseriesResult(result[key][innerKey], innerKey, key)\n          );\n        }\n      });\n    }\n  });\n\n  const processed = intervals.map(interval => ({\n    ...interval,\n    interval: moment(parseInt(interval.interval, 10) * 1000).format(DATE_FORMAT),\n  }));\n  return processed;\n}\n\nfunction processSingleDiscoverTimeseriesResult(result, key: string, group?: string) {\n  const intervals = [] as Interval[];\n  result.data.forEach(([timestamp, [{count: value}]]) => {\n    const existingInterval = intervals.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      existingInterval[key] = value;\n      return;\n    }\n    intervals.push({\n      interval: timestamp,\n      [key]: value,\n      group,\n    });\n  });\n  return intervals;\n}\n\nfunction mergeIntervals(first: Interval[], second: Interval[]) {\n  const target: Interval[] = JSON.parse(JSON.stringify(first));\n  second.forEach(({interval: timestamp, group, ...rest}) => {\n    const existingInterval = target.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      Object.keys(rest).forEach(key => {\n        existingInterval[key] = rest[key];\n      });\n      return;\n    }\n    target.push({interval: timestamp, group, ...rest});\n  });\n  return target;\n}\n","import {useState} from 'react';\n\ntype StarfishOptions = {\n  useDiscover: boolean;\n};\n\nexport function useStarfishOptions() {\n  const [options, setOptions] = useState<StarfishOptions>({useDiscover: false});\n  return {options, setOptions};\n}\n"],"names":["QueryError","constructor","errorMessage","originalError","_defineProperty","this","message","getOriginalError","_GenericDiscoverQuery","Component","arguments","isLoading","tableFetchID","undefined","error","tableData","pageLinks","api","Client","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","t","async","queryBatching","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","state","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useOrganization","allowNull","slug","performanceEventView","useContext","PerformanceEventViewContext","Error","_props","_jsx","displayName","BASE_TIMEOUT","TIMEOUT_MULTIPLIER","wait","duration","Promise","resolve","setTimeout","params","options","length","retry","batchRequest","query","includeAllArgs","baseTimeout","timeoutMultiplier","statusCodes","maxTries","tries","timeout","includes","status","requestPromise","method","noPagination","referrer","getRequestPayload","location","forceAppendRawQueryString","payload","getEventsAPIPayload","per_page","Object","assign","queryExtras","useGenericDiscoverQuery","useApi","useQuery","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","strict","Context","createContext","Provider","context","THROUGHPUT_COLOR","CHART_PALETTE","DURATION_COLOR","FormattedCode","_styled","target","space","p","theme","borderRadius","registers","registerPainter","Sparkline","_ref","series","width","color","markLine","echarts","LineChart","SVGRenderer","valueSeries","map","datum","value","type","showSymbol","smooth","ReactEChartsCore","option","xAxis","show","yAxis","grid","left","top","right","bottom","notMerge","style","height","lazyUpdate","generateHorizontalLine","title","position","seriesName","blue300","xAxisIndex","yAxisIndex","MarkLine","silent","animation","lineStyle","label","formatter","useApplicationMetrics","pageFilters","usePageFilters","startTime","endTime","getDateFilters","getDateQueryFilter","EventView","fields","dataset","DiscoverDatasets","projects","version","useSpansQuery","queryString","initialData","enabled","Boolean","HOST","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","start","format","end","DATE_FORMAT","forceUseDiscover","setOptions","useState","useDiscover","useStarfishOptions","queryFunction","_ref5","isTimeseriesQuery","useWrappedDiscoverTimeseriesQuery","useWrappedDiscoverQuery","useWrappedQuery","getQueryFunction","isDiscoverFunction","isDiscoverTimeseriesFunction","_ref2","queryKey","queryFn","fetch","then","res","json","refetchOnWindowFocus","_ref3","useLocation","organization","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","processDiscoverTimeseriesResult","_ref4","useDiscoverQuery","result","intervals","singleYAxis","firstYAxis","processSingleDiscoverTimeseriesResult","keys","forEach","key","mergeIntervals","innerKey","moment","parseInt","group","_ref6","timestamp","count","existingInterval","find","push","first","second","JSON","parse","stringify","_ref7","rest"],"sourceRoot":""}