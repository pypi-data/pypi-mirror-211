from typegraph.importers.base.importer import Import
from typegraph.utils.sanitizers import inject_params
from typegraph import t
from box import Box
from typegraph.runtimes.http import HTTPRuntime


def import_github(params=None):
    target_url = inject_params("https://api.github.com", params)
    github = HTTPRuntime(target_url)

    renames = {
        "root": "_github_1_root",
        "nullable_simple_user": "_github_2_nullable_simple_user",
        "integration": "_github_3_integration",
        "basic_error": "_github_4_basic_error",
        "validation_error_simple": "_github_5_validation_error_simple",
        "webhook_config_url": "_github_6_webhook_config_url",
        "webhook_config_content_type": "_github_7_webhook_config_content_type",
        "webhook_config_secret": "_github_8_webhook_config_secret",
        "webhook_config_insecure_ssl": "_github_9_webhook_config_insecure_ssl",
        "webhook_config": "_github_10_webhook_config",
        "hook_delivery_item": "_github_11_hook_delivery_item",
        "scim_error": "_github_12_scim_error",
        "validation_error": "_github_13_validation_error",
        "hook_delivery": "_github_14_hook_delivery",
        "simple_user": "_github_15_simple_user",
        "enterprise": "_github_16_enterprise",
        "integration_installation_request": "_github_17_integration_installation_request",
        "app_permissions": "_github_18_app_permissions",
        "installation": "_github_19_installation",
        "nullable_license_simple": "_github_20_nullable_license_simple",
        "repository": "_github_21_repository",
        "installation_token": "_github_22_installation_token",
        "nullable_scoped_installation": "_github_23_nullable_scoped_installation",
        "authorization": "_github_24_authorization",
        "code_of_conduct": "_github_25_code_of_conduct",
        "alert_number": "_github_26_alert_number",
        "dependabot_alert_package": "_github_27_dependabot_alert_package",
        "dependabot_alert_security_vulnerability": "_github_28_dependabot_alert_security_vulnerability",
        "dependabot_alert_security_advisory": "_github_29_dependabot_alert_security_advisory",
        "alert_url": "_github_30_alert_url",
        "alert_html_url": "_github_31_alert_html_url",
        "alert_created_at": "_github_32_alert_created_at",
        "alert_updated_at": "_github_33_alert_updated_at",
        "alert_dismissed_at": "_github_34_alert_dismissed_at",
        "alert_fixed_at": "_github_35_alert_fixed_at",
        "alert_auto_dismissed_at": "_github_36_alert_auto_dismissed_at",
        "simple_repository": "_github_37_simple_repository",
        "dependabot_alert_with_repository": "_github_38_dependabot_alert_with_repository",
        "nullable_alert_updated_at": "_github_39_nullable_alert_updated_at",
        "secret_scanning_alert_state": "_github_40_secret_scanning_alert_state",
        "secret_scanning_alert_resolution": "_github_41_secret_scanning_alert_resolution",
        "organization_secret_scanning_alert": "_github_42_organization_secret_scanning_alert",
        "actor": "_github_43_actor",
        "nullable_milestone": "_github_44_nullable_milestone",
        "nullable_integration": "_github_45_nullable_integration",
        "author_association": "_github_46_author_association",
        "reaction_rollup": "_github_47_reaction_rollup",
        "issue": "_github_48_issue",
        "issue_comment": "_github_49_issue_comment",
        "event": "_github_50_event",
        "link_with_type": "_github_51_link_with_type",
        "feed": "_github_52_feed",
        "base_gist": "_github_53_base_gist",
        "public_user": "_github_54_public_user",
        "gist_history": "_github_55_gist_history",
        "gist_simple": "_github_56_gist_simple",
        "gist_comment": "_github_57_gist_comment",
        "gist_commit": "_github_58_gist_commit",
        "gitignore_template": "_github_59_gitignore_template",
        "license_simple": "_github_60_license_simple",
        "license": "_github_61_license",
        "marketplace_listing_plan": "_github_62_marketplace_listing_plan",
        "marketplace_purchase": "_github_63_marketplace_purchase",
        "api_overview": "_github_64_api_overview",
        "security_and_analysis": "_github_65_security_and_analysis",
        "minimal_repository": "_github_66_minimal_repository",
        "thread": "_github_67_thread",
        "thread_subscription": "_github_68_thread_subscription",
        "organization_simple": "_github_69_organization_simple",
        "organization_programmatic_access_grant_request": "_github_70_organization_programmatic_access_grant_request",
        "organization_programmatic_access_grant": "_github_71_organization_programmatic_access_grant",
        "organization_full": "_github_72_organization_full",
        "actions_cache_usage_org_enterprise": "_github_73_actions_cache_usage_org_enterprise",
        "actions_cache_usage_by_repository": "_github_74_actions_cache_usage_by_repository",
        "oidc_custom_sub": "_github_75_oidc_custom_sub",
        "empty_object": "_github_76_empty_object",
        "enabled_repositories": "_github_77_enabled_repositories",
        "allowed_actions": "_github_78_allowed_actions",
        "selected_actions_url": "_github_79_selected_actions_url",
        "actions_organization_permissions": "_github_80_actions_organization_permissions",
        "selected_actions": "_github_81_selected_actions",
        "actions_default_workflow_permissions": "_github_82_actions_default_workflow_permissions",
        "actions_can_approve_pull_request_reviews": "_github_83_actions_can_approve_pull_request_reviews",
        "actions_get_default_workflow_permissions": "_github_84_actions_get_default_workflow_permissions",
        "actions_set_default_workflow_permissions": "_github_85_actions_set_default_workflow_permissions",
        "required_workflow": "_github_86_required_workflow",
        "runner_label": "_github_87_runner_label",
        "runner": "_github_88_runner",
        "runner_application": "_github_89_runner_application",
        "authentication_token": "_github_90_authentication_token",
        "organization_actions_secret": "_github_91_organization_actions_secret",
        "actions_public_key": "_github_92_actions_public_key",
        "organization_actions_variable": "_github_93_organization_actions_variable",
        "code_scanning_analysis_tool_name": "_github_94_code_scanning_analysis_tool_name",
        "code_scanning_analysis_tool_guid": "_github_95_code_scanning_analysis_tool_guid",
        "code_scanning_alert_state": "_github_96_code_scanning_alert_state",
        "code_scanning_alert_severity": "_github_97_code_scanning_alert_severity",
        "alert_instances_url": "_github_98_alert_instances_url",
        "code_scanning_alert_dismissed_reason": "_github_99_code_scanning_alert_dismissed_reason",
        "code_scanning_alert_dismissed_comment": "_github_100_code_scanning_alert_dismissed_comment",
        "code_scanning_alert_rule": "_github_101_code_scanning_alert_rule",
        "code_scanning_analysis_tool_version": "_github_102_code_scanning_analysis_tool_version",
        "code_scanning_analysis_tool": "_github_103_code_scanning_analysis_tool",
        "code_scanning_ref": "_github_104_code_scanning_ref",
        "code_scanning_analysis_analysis_key": "_github_105_code_scanning_analysis_analysis_key",
        "code_scanning_alert_environment": "_github_106_code_scanning_alert_environment",
        "code_scanning_analysis_category": "_github_107_code_scanning_analysis_category",
        "code_scanning_alert_location": "_github_108_code_scanning_alert_location",
        "code_scanning_alert_classification": "_github_109_code_scanning_alert_classification",
        "code_scanning_alert_instance": "_github_110_code_scanning_alert_instance",
        "code_scanning_organization_alert_items": "_github_111_code_scanning_organization_alert_items",
        "nullable_codespace_machine": "_github_112_nullable_codespace_machine",
        "codespace": "_github_113_codespace",
        "codespaces_org_secret": "_github_114_codespaces_org_secret",
        "codespaces_public_key": "_github_115_codespaces_public_key",
        "organization_dependabot_secret": "_github_116_organization_dependabot_secret",
        "dependabot_public_key": "_github_117_dependabot_public_key",
        "nullable_minimal_repository": "_github_118_nullable_minimal_repository",
        "package": "_github_119_package",
        "organization_invitation": "_github_120_organization_invitation",
        "org_hook": "_github_121_org_hook",
        "interaction_group": "_github_122_interaction_group",
        "interaction_limit_response": "_github_123_interaction_limit_response",
        "interaction_expiry": "_github_124_interaction_expiry",
        "interaction_limit": "_github_125_interaction_limit",
        "nullable_team_simple": "_github_126_nullable_team_simple",
        "team": "_github_127_team",
        "org_membership": "_github_128_org_membership",
        "migration": "_github_129_migration",
        "package_version": "_github_130_package_version",
        "project": "_github_131_project",
        "repository_rule_enforcement": "_github_132_repository_rule_enforcement",
        "repository_ruleset_bypass_actor": "_github_133_repository_ruleset_bypass_actor",
        "repository_ruleset_conditions": "_github_134_repository_ruleset_conditions",
        "repository_ruleset_conditions_repository_name_target": "_github_135_repository_ruleset_conditions_repository_name_target",
        "org_ruleset_conditions": "_github_136_org_ruleset_conditions",
        "repository_rule_creation": "_github_137_repository_rule_creation",
        "repository_rule_update": "_github_138_repository_rule_update",
        "repository_rule_deletion": "_github_139_repository_rule_deletion",
        "repository_rule_required_linear_history": "_github_140_repository_rule_required_linear_history",
        "repository_rule_required_deployments": "_github_141_repository_rule_required_deployments",
        "repository_rule_required_signatures": "_github_142_repository_rule_required_signatures",
        "repository_rule_pull_request": "_github_143_repository_rule_pull_request",
        "repository_rule_params_status_check_configuration": "_github_144_repository_rule_params_status_check_configuration",
        "repository_rule_required_status_checks": "_github_145_repository_rule_required_status_checks",
        "repository_rule_non_fast_forward": "_github_146_repository_rule_non_fast_forward",
        "repository_rule_commit_message_pattern": "_github_147_repository_rule_commit_message_pattern",
        "repository_rule_commit_author_email_pattern": "_github_148_repository_rule_commit_author_email_pattern",
        "repository_rule_committer_email_pattern": "_github_149_repository_rule_committer_email_pattern",
        "repository_rule_branch_name_pattern": "_github_150_repository_rule_branch_name_pattern",
        "repository_rule_tag_name_pattern": "_github_151_repository_rule_tag_name_pattern",
        "repository_rule": "_github_152_repository_rule",
        "repository_ruleset": "_github_153_repository_ruleset",
        "team_simple": "_github_154_team_simple",
        "actions_billing_usage": "_github_155_actions_billing_usage",
        "packages_billing_usage": "_github_156_packages_billing_usage",
        "combined_billing_usage": "_github_157_combined_billing_usage",
        "team_organization": "_github_158_team_organization",
        "team_full": "_github_159_team_full",
        "team_discussion": "_github_160_team_discussion",
        "team_discussion_comment": "_github_161_team_discussion_comment",
        "reaction": "_github_162_reaction",
        "team_membership": "_github_163_team_membership",
        "team_project": "_github_164_team_project",
        "nullable_repository": "_github_165_nullable_repository",
        "team_repository": "_github_166_team_repository",
        "project_card": "_github_167_project_card",
        "project_column": "_github_168_project_column",
        "project_collaborator_permission": "_github_169_project_collaborator_permission",
        "rate_limit": "_github_170_rate_limit",
        "rate_limit_overview": "_github_171_rate_limit_overview",
        "repo_required_workflow": "_github_172_repo_required_workflow",
        "workflow_usage": "_github_173_workflow_usage",
        "code_of_conduct_simple": "_github_174_code_of_conduct_simple",
        "full_repository": "_github_175_full_repository",
        "artifact": "_github_176_artifact",
        "actions_cache_list": "_github_177_actions_cache_list",
        "job": "_github_178_job",
        "oidc_custom_sub_repo": "_github_179_oidc_custom_sub_repo",
        "actions_secret": "_github_180_actions_secret",
        "actions_variable": "_github_181_actions_variable",
        "actions_enabled": "_github_182_actions_enabled",
        "actions_repository_permissions": "_github_183_actions_repository_permissions",
        "actions_workflow_access_to_repository": "_github_184_actions_workflow_access_to_repository",
        "referenced_workflow": "_github_185_referenced_workflow",
        "pull_request_minimal": "_github_186_pull_request_minimal",
        "nullable_simple_commit": "_github_187_nullable_simple_commit",
        "workflow_run": "_github_188_workflow_run",
        "environment_approvals": "_github_189_environment_approvals",
        "review_custom_gates_comment_required": "_github_190_review_custom_gates_comment_required",
        "review_custom_gates_state_required": "_github_191_review_custom_gates_state_required",
        "deployment_reviewer_type": "_github_192_deployment_reviewer_type",
        "pending_deployment": "_github_193_pending_deployment",
        "deployment": "_github_194_deployment",
        "workflow_run_usage": "_github_195_workflow_run_usage",
        "workflow": "_github_196_workflow",
        "autolink": "_github_197_autolink",
        "protected_branch_required_status_check": "_github_198_protected_branch_required_status_check",
        "protected_branch_admin_enforced": "_github_199_protected_branch_admin_enforced",
        "protected_branch_pull_request_review": "_github_200_protected_branch_pull_request_review",
        "branch_restriction_policy": "_github_201_branch_restriction_policy",
        "branch_protection": "_github_202_branch_protection",
        "short_branch": "_github_203_short_branch",
        "nullable_git_user": "_github_204_nullable_git_user",
        "verification": "_github_205_verification",
        "diff_entry": "_github_206_diff_entry",
        "commit": "_github_207_commit",
        "branch_with_protection": "_github_208_branch_with_protection",
        "status_check_policy": "_github_209_status_check_policy",
        "protected_branch": "_github_210_protected_branch",
        "deployment_simple": "_github_211_deployment_simple",
        "check_run": "_github_212_check_run",
        "check_annotation": "_github_213_check_annotation",
        "simple_commit": "_github_214_simple_commit",
        "check_suite": "_github_215_check_suite",
        "check_suite_preference": "_github_216_check_suite_preference",
        "code_scanning_alert_rule_summary": "_github_217_code_scanning_alert_rule_summary",
        "code_scanning_alert_items": "_github_218_code_scanning_alert_items",
        "code_scanning_alert": "_github_219_code_scanning_alert",
        "code_scanning_alert_set_state": "_github_220_code_scanning_alert_set_state",
        "code_scanning_analysis_sarif_id": "_github_221_code_scanning_analysis_sarif_id",
        "code_scanning_analysis_commit_sha": "_github_222_code_scanning_analysis_commit_sha",
        "code_scanning_analysis_environment": "_github_223_code_scanning_analysis_environment",
        "code_scanning_analysis_created_at": "_github_224_code_scanning_analysis_created_at",
        "code_scanning_analysis_url": "_github_225_code_scanning_analysis_url",
        "code_scanning_analysis": "_github_226_code_scanning_analysis",
        "code_scanning_analysis_deletion": "_github_227_code_scanning_analysis_deletion",
        "code_scanning_codeql_database": "_github_228_code_scanning_codeql_database",
        "code_scanning_default_setup": "_github_229_code_scanning_default_setup",
        "code_scanning_default_setup_update": "_github_230_code_scanning_default_setup_update",
        "code_scanning_default_setup_update_response": "_github_231_code_scanning_default_setup_update_response",
        "code_scanning_analysis_sarif_file": "_github_232_code_scanning_analysis_sarif_file",
        "code_scanning_sarifs_receipt": "_github_233_code_scanning_sarifs_receipt",
        "code_scanning_sarifs_status": "_github_234_code_scanning_sarifs_status",
        "codeowners_errors": "_github_235_codeowners_errors",
        "codespace_machine": "_github_236_codespace_machine",
        "repo_codespaces_secret": "_github_237_repo_codespaces_secret",
        "collaborator": "_github_238_collaborator",
        "repository_invitation": "_github_239_repository_invitation",
        "nullable_collaborator": "_github_240_nullable_collaborator",
        "repository_collaborator_permission": "_github_241_repository_collaborator_permission",
        "commit_comment": "_github_242_commit_comment",
        "branch_short": "_github_243_branch_short",
        "link": "_github_244_link",
        "auto_merge": "_github_245_auto_merge",
        "pull_request_simple": "_github_246_pull_request_simple",
        "simple_commit_status": "_github_247_simple_commit_status",
        "combined_commit_status": "_github_248_combined_commit_status",
        "status": "_github_249_status",
        "nullable_code_of_conduct_simple": "_github_250_nullable_code_of_conduct_simple",
        "nullable_community_health_file": "_github_251_nullable_community_health_file",
        "community_profile": "_github_252_community_profile",
        "commit_comparison": "_github_253_commit_comparison",
        "content_tree": "_github_254_content_tree",
        "content_directory": "_github_255_content_directory",
        "content_file": "_github_256_content_file",
        "content_symlink": "_github_257_content_symlink",
        "content_submodule": "_github_258_content_submodule",
        "file_commit": "_github_259_file_commit",
        "contributor": "_github_260_contributor",
        "dependabot_alert": "_github_261_dependabot_alert",
        "dependabot_secret": "_github_262_dependabot_secret",
        "dependency_graph_diff": "_github_263_dependency_graph_diff",
        "dependency_graph_spdx_sbom": "_github_264_dependency_graph_spdx_sbom",
        "metadata": "_github_265_metadata",
        "dependency": "_github_266_dependency",
        "manifest": "_github_267_manifest",
        "snapshot": "_github_268_snapshot",
        "deployment_status": "_github_269_deployment_status",
        "wait_timer": "_github_270_wait_timer",
        "deployment_branch_policy_settings": "_github_271_deployment_branch_policy_settings",
        "environment": "_github_272_environment",
        "deployment_branch_policy": "_github_273_deployment_branch_policy",
        "deployment_branch_policy_name_pattern": "_github_274_deployment_branch_policy_name_pattern",
        "custom_deployment_rule_app": "_github_275_custom_deployment_rule_app",
        "deployment_protection_rule": "_github_276_deployment_protection_rule",
        "short_blob": "_github_277_short_blob",
        "blob": "_github_278_blob",
        "git_commit": "_github_279_git_commit",
        "git_ref": "_github_280_git_ref",
        "git_tag": "_github_281_git_tag",
        "git_tree": "_github_282_git_tree",
        "hook_response": "_github_283_hook_response",
        "hook": "_github_284_hook",
        "ximport": "_github_285_ximport",
        "porter_author": "_github_286_porter_author",
        "porter_large_file": "_github_287_porter_large_file",
        "nullable_issue": "_github_288_nullable_issue",
        "issue_event_label": "_github_289_issue_event_label",
        "issue_event_dismissed_review": "_github_290_issue_event_dismissed_review",
        "issue_event_milestone": "_github_291_issue_event_milestone",
        "issue_event_project_card": "_github_292_issue_event_project_card",
        "issue_event_rename": "_github_293_issue_event_rename",
        "issue_event": "_github_294_issue_event",
        "labeled_issue_event": "_github_295_labeled_issue_event",
        "unlabeled_issue_event": "_github_296_unlabeled_issue_event",
        "assigned_issue_event": "_github_297_assigned_issue_event",
        "unassigned_issue_event": "_github_298_unassigned_issue_event",
        "milestoned_issue_event": "_github_299_milestoned_issue_event",
        "demilestoned_issue_event": "_github_300_demilestoned_issue_event",
        "renamed_issue_event": "_github_301_renamed_issue_event",
        "review_requested_issue_event": "_github_302_review_requested_issue_event",
        "review_request_removed_issue_event": "_github_303_review_request_removed_issue_event",
        "review_dismissed_issue_event": "_github_304_review_dismissed_issue_event",
        "locked_issue_event": "_github_305_locked_issue_event",
        "added_to_project_issue_event": "_github_306_added_to_project_issue_event",
        "moved_column_in_project_issue_event": "_github_307_moved_column_in_project_issue_event",
        "removed_from_project_issue_event": "_github_308_removed_from_project_issue_event",
        "converted_note_to_issue_issue_event": "_github_309_converted_note_to_issue_issue_event",
        "issue_event_for_issue": "_github_310_issue_event_for_issue",
        "label": "_github_311_label",
        "timeline_comment_event": "_github_312_timeline_comment_event",
        "timeline_cross_referenced_event": "_github_313_timeline_cross_referenced_event",
        "timeline_committed_event": "_github_314_timeline_committed_event",
        "timeline_reviewed_event": "_github_315_timeline_reviewed_event",
        "pull_request_review_comment": "_github_316_pull_request_review_comment",
        "timeline_line_commented_event": "_github_317_timeline_line_commented_event",
        "timeline_commit_commented_event": "_github_318_timeline_commit_commented_event",
        "timeline_assigned_issue_event": "_github_319_timeline_assigned_issue_event",
        "timeline_unassigned_issue_event": "_github_320_timeline_unassigned_issue_event",
        "state_change_issue_event": "_github_321_state_change_issue_event",
        "timeline_issue_events": "_github_322_timeline_issue_events",
        "deploy_key": "_github_323_deploy_key",
        "language": "_github_324_language",
        "license_content": "_github_325_license_content",
        "merged_upstream": "_github_326_merged_upstream",
        "milestone": "_github_327_milestone",
        "pages_source_hash": "_github_328_pages_source_hash",
        "pages_https_certificate": "_github_329_pages_https_certificate",
        "page": "_github_330_page",
        "page_build": "_github_331_page_build",
        "page_build_status": "_github_332_page_build_status",
        "page_deployment": "_github_333_page_deployment",
        "pages_health_check": "_github_334_pages_health_check",
        "pull_request": "_github_335_pull_request",
        "pull_request_merge_result": "_github_336_pull_request_merge_result",
        "pull_request_review_request": "_github_337_pull_request_review_request",
        "pull_request_review": "_github_338_pull_request_review",
        "review_comment": "_github_339_review_comment",
        "release_asset": "_github_340_release_asset",
        "release": "_github_341_release",
        "release_notes_content": "_github_342_release_notes_content",
        "secret_scanning_alert": "_github_343_secret_scanning_alert",
        "secret_scanning_alert_resolution_comment": "_github_344_secret_scanning_alert_resolution_comment",
        "secret_scanning_location_commit": "_github_345_secret_scanning_location_commit",
        "secret_scanning_location_issue_title": "_github_346_secret_scanning_location_issue_title",
        "secret_scanning_location_issue_body": "_github_347_secret_scanning_location_issue_body",
        "secret_scanning_location_issue_comment": "_github_348_secret_scanning_location_issue_comment",
        "secret_scanning_location": "_github_349_secret_scanning_location",
        "security_advisory_ecosystems": "_github_350_security_advisory_ecosystems",
        "repository_advisory_vulnerability": "_github_351_repository_advisory_vulnerability",
        "security_advisory_credit_types": "_github_352_security_advisory_credit_types",
        "repository_advisory_credit": "_github_353_repository_advisory_credit",
        "repository_advisory": "_github_354_repository_advisory",
        "repository_advisory_create": "_github_355_repository_advisory_create",
        "private_vulnerability_report_create": "_github_356_private_vulnerability_report_create",
        "repository_advisory_update": "_github_357_repository_advisory_update",
        "stargazer": "_github_358_stargazer",
        "code_frequency_stat": "_github_359_code_frequency_stat",
        "commit_activity": "_github_360_commit_activity",
        "contributor_activity": "_github_361_contributor_activity",
        "participation_stats": "_github_362_participation_stats",
        "repository_subscription": "_github_363_repository_subscription",
        "tag": "_github_364_tag",
        "tag_protection": "_github_365_tag_protection",
        "topic": "_github_366_topic",
        "traffic": "_github_367_traffic",
        "clone_traffic": "_github_368_clone_traffic",
        "content_traffic": "_github_369_content_traffic",
        "referrer_traffic": "_github_370_referrer_traffic",
        "view_traffic": "_github_371_view_traffic",
        "search_result_text_matches": "_github_372_search_result_text_matches",
        "code_search_result_item": "_github_373_code_search_result_item",
        "commit_search_result_item": "_github_374_commit_search_result_item",
        "issue_search_result_item": "_github_375_issue_search_result_item",
        "label_search_result_item": "_github_376_label_search_result_item",
        "repo_search_result_item": "_github_377_repo_search_result_item",
        "topic_search_result_item": "_github_378_topic_search_result_item",
        "user_search_result_item": "_github_379_user_search_result_item",
        "private_user": "_github_380_private_user",
        "codespaces_secret": "_github_381_codespaces_secret",
        "codespaces_user_public_key": "_github_382_codespaces_user_public_key",
        "codespace_export_details": "_github_383_codespace_export_details",
        "codespace_with_full_repository": "_github_384_codespace_with_full_repository",
        "email": "_github_385_email",
        "gpg_key": "_github_386_gpg_key",
        "key": "_github_387_key",
        "marketplace_account": "_github_388_marketplace_account",
        "user_marketplace_purchase": "_github_389_user_marketplace_purchase",
        "social_account": "_github_390_social_account",
        "ssh_signing_key": "_github_391_ssh_signing_key",
        "starred_repository": "_github_392_starred_repository",
        "hovercard": "_github_393_hovercard",
        "key_simple": "_github_394_key_simple",
        "simple_installation": "_github_395_simple_installation",
        "simple_check_suite": "_github_396_simple_check_suite",
        "check_run_with_simple_check_suite": "_github_397_check_run_with_simple_check_suite",
        "discussion": "_github_398_discussion",
        "merge_group": "_github_399_merge_group",
        "personal_access_token_request": "_github_400_personal_access_token_request",
        "projects_v2": "_github_401_projects_v2",
        "projects_v2_item_content_type": "_github_402_projects_v2_item_content_type",
        "projects_v2_item": "_github_403_projects_v2_item",
        "webhook_branch_protection_rule_created": "_github_404_webhook_branch_protection_rule_created",
        "webhook_branch_protection_rule_deleted": "_github_405_webhook_branch_protection_rule_deleted",
        "webhook_branch_protection_rule_edited": "_github_406_webhook_branch_protection_rule_edited",
        "webhook_check_run_completed": "_github_407_webhook_check_run_completed",
        "webhook_check_run_completed_form_encoded": "_github_408_webhook_check_run_completed_form_encoded",
        "webhook_check_run_created": "_github_409_webhook_check_run_created",
        "webhook_check_run_created_form_encoded": "_github_410_webhook_check_run_created_form_encoded",
        "webhook_check_run_requested_action": "_github_411_webhook_check_run_requested_action",
        "webhook_check_run_requested_action_form_encoded": "_github_412_webhook_check_run_requested_action_form_encoded",
        "webhook_check_run_rerequested": "_github_413_webhook_check_run_rerequested",
        "webhook_check_run_rerequested_form_encoded": "_github_414_webhook_check_run_rerequested_form_encoded",
        "webhook_check_suite_completed": "_github_415_webhook_check_suite_completed",
        "webhook_check_suite_requested": "_github_416_webhook_check_suite_requested",
        "webhook_check_suite_rerequested": "_github_417_webhook_check_suite_rerequested",
        "webhook_code_scanning_alert_appeared_in_branch": "_github_418_webhook_code_scanning_alert_appeared_in_branch",
        "webhook_code_scanning_alert_closed_by_user": "_github_419_webhook_code_scanning_alert_closed_by_user",
        "webhook_code_scanning_alert_created": "_github_420_webhook_code_scanning_alert_created",
        "webhook_code_scanning_alert_fixed": "_github_421_webhook_code_scanning_alert_fixed",
        "webhook_code_scanning_alert_reopened": "_github_422_webhook_code_scanning_alert_reopened",
        "webhook_code_scanning_alert_reopened_by_user": "_github_423_webhook_code_scanning_alert_reopened_by_user",
        "webhook_commit_comment_created": "_github_424_webhook_commit_comment_created",
        "webhook_create": "_github_425_webhook_create",
        "webhook_delete": "_github_426_webhook_delete",
        "webhook_dependabot_alert_auto_dismissed": "_github_427_webhook_dependabot_alert_auto_dismissed",
        "webhook_dependabot_alert_auto_reopened": "_github_428_webhook_dependabot_alert_auto_reopened",
        "webhook_dependabot_alert_created": "_github_429_webhook_dependabot_alert_created",
        "webhook_dependabot_alert_dismissed": "_github_430_webhook_dependabot_alert_dismissed",
        "webhook_dependabot_alert_fixed": "_github_431_webhook_dependabot_alert_fixed",
        "webhook_dependabot_alert_reintroduced": "_github_432_webhook_dependabot_alert_reintroduced",
        "webhook_dependabot_alert_reopened": "_github_433_webhook_dependabot_alert_reopened",
        "webhook_deploy_key_created": "_github_434_webhook_deploy_key_created",
        "webhook_deploy_key_deleted": "_github_435_webhook_deploy_key_deleted",
        "webhook_deployment_created": "_github_436_webhook_deployment_created",
        "webhook_deployment_protection_rule_requested": "_github_437_webhook_deployment_protection_rule_requested",
        "webhook_deployment_status_created": "_github_438_webhook_deployment_status_created",
        "webhook_discussion_answered": "_github_439_webhook_discussion_answered",
        "webhook_discussion_category_changed": "_github_440_webhook_discussion_category_changed",
        "webhook_discussion_closed": "_github_441_webhook_discussion_closed",
        "webhook_discussion_comment_created": "_github_442_webhook_discussion_comment_created",
        "webhook_discussion_comment_deleted": "_github_443_webhook_discussion_comment_deleted",
        "webhook_discussion_comment_edited": "_github_444_webhook_discussion_comment_edited",
        "webhook_discussion_created": "_github_445_webhook_discussion_created",
        "webhook_discussion_deleted": "_github_446_webhook_discussion_deleted",
        "webhook_discussion_edited": "_github_447_webhook_discussion_edited",
        "webhook_discussion_labeled": "_github_448_webhook_discussion_labeled",
        "webhook_discussion_locked": "_github_449_webhook_discussion_locked",
        "webhook_discussion_pinned": "_github_450_webhook_discussion_pinned",
        "webhook_discussion_reopened": "_github_451_webhook_discussion_reopened",
        "webhook_discussion_transferred": "_github_452_webhook_discussion_transferred",
        "webhook_discussion_unanswered": "_github_453_webhook_discussion_unanswered",
        "webhook_discussion_unlabeled": "_github_454_webhook_discussion_unlabeled",
        "webhook_discussion_unlocked": "_github_455_webhook_discussion_unlocked",
        "webhook_discussion_unpinned": "_github_456_webhook_discussion_unpinned",
        "webhook_fork": "_github_457_webhook_fork",
        "webhook_github_app_authorization_revoked": "_github_458_webhook_github_app_authorization_revoked",
        "webhook_gollum": "_github_459_webhook_gollum",
        "webhook_installation_created": "_github_460_webhook_installation_created",
        "webhook_installation_deleted": "_github_461_webhook_installation_deleted",
        "webhook_installation_new_permissions_accepted": "_github_462_webhook_installation_new_permissions_accepted",
        "webhook_installation_repositories_added": "_github_463_webhook_installation_repositories_added",
        "webhook_installation_repositories_removed": "_github_464_webhook_installation_repositories_removed",
        "webhook_installation_suspend": "_github_465_webhook_installation_suspend",
        "webhook_installation_target_renamed": "_github_466_webhook_installation_target_renamed",
        "webhook_installation_unsuspend": "_github_467_webhook_installation_unsuspend",
        "webhook_issue_comment_created": "_github_468_webhook_issue_comment_created",
        "webhook_issue_comment_deleted": "_github_469_webhook_issue_comment_deleted",
        "webhook_issue_comment_edited": "_github_470_webhook_issue_comment_edited",
        "webhook_issues_assigned": "_github_471_webhook_issues_assigned",
        "webhook_issues_closed": "_github_472_webhook_issues_closed",
        "webhook_issues_deleted": "_github_473_webhook_issues_deleted",
        "webhook_issues_demilestoned": "_github_474_webhook_issues_demilestoned",
        "webhook_issues_edited": "_github_475_webhook_issues_edited",
        "webhook_issues_labeled": "_github_476_webhook_issues_labeled",
        "webhook_issues_locked": "_github_477_webhook_issues_locked",
        "webhook_issues_milestoned": "_github_478_webhook_issues_milestoned",
        "webhook_issues_opened": "_github_479_webhook_issues_opened",
        "webhook_issues_pinned": "_github_480_webhook_issues_pinned",
        "webhook_issues_reopened": "_github_481_webhook_issues_reopened",
        "webhook_issues_transferred": "_github_482_webhook_issues_transferred",
        "webhook_issues_unassigned": "_github_483_webhook_issues_unassigned",
        "webhook_issues_unlabeled": "_github_484_webhook_issues_unlabeled",
        "webhook_issues_unlocked": "_github_485_webhook_issues_unlocked",
        "webhook_issues_unpinned": "_github_486_webhook_issues_unpinned",
        "webhook_label_created": "_github_487_webhook_label_created",
        "webhook_label_deleted": "_github_488_webhook_label_deleted",
        "webhook_label_edited": "_github_489_webhook_label_edited",
        "webhook_marketplace_purchase_cancelled": "_github_490_webhook_marketplace_purchase_cancelled",
        "webhook_marketplace_purchase_changed": "_github_491_webhook_marketplace_purchase_changed",
        "webhook_marketplace_purchase_pending_change": "_github_492_webhook_marketplace_purchase_pending_change",
        "webhook_marketplace_purchase_pending_change_cancelled": "_github_493_webhook_marketplace_purchase_pending_change_cancelled",
        "webhook_marketplace_purchase_purchased": "_github_494_webhook_marketplace_purchase_purchased",
        "webhook_member_added": "_github_495_webhook_member_added",
        "webhook_member_edited": "_github_496_webhook_member_edited",
        "webhook_member_removed": "_github_497_webhook_member_removed",
        "webhook_membership_added": "_github_498_webhook_membership_added",
        "webhook_membership_removed": "_github_499_webhook_membership_removed",
        "webhook_merge_group_checks_requested": "_github_500_webhook_merge_group_checks_requested",
        "webhook_merge_group_destroyed": "_github_501_webhook_merge_group_destroyed",
        "webhook_meta_deleted": "_github_502_webhook_meta_deleted",
        "webhook_milestone_closed": "_github_503_webhook_milestone_closed",
        "webhook_milestone_created": "_github_504_webhook_milestone_created",
        "webhook_milestone_deleted": "_github_505_webhook_milestone_deleted",
        "webhook_milestone_edited": "_github_506_webhook_milestone_edited",
        "webhook_milestone_opened": "_github_507_webhook_milestone_opened",
        "webhook_org_block_blocked": "_github_508_webhook_org_block_blocked",
        "webhook_org_block_unblocked": "_github_509_webhook_org_block_unblocked",
        "webhook_organization_deleted": "_github_510_webhook_organization_deleted",
        "webhook_organization_member_added": "_github_511_webhook_organization_member_added",
        "webhook_organization_member_invited": "_github_512_webhook_organization_member_invited",
        "webhook_organization_member_removed": "_github_513_webhook_organization_member_removed",
        "webhook_organization_renamed": "_github_514_webhook_organization_renamed",
        "webhook_rubygems_metadata": "_github_515_webhook_rubygems_metadata",
        "webhook_package_published": "_github_516_webhook_package_published",
        "webhook_package_updated": "_github_517_webhook_package_updated",
        "webhook_page_build": "_github_518_webhook_page_build",
        "webhook_personal_access_token_request_approved": "_github_519_webhook_personal_access_token_request_approved",
        "webhook_personal_access_token_request_cancelled": "_github_520_webhook_personal_access_token_request_cancelled",
        "webhook_personal_access_token_request_created": "_github_521_webhook_personal_access_token_request_created",
        "webhook_personal_access_token_request_denied": "_github_522_webhook_personal_access_token_request_denied",
        "webhook_ping": "_github_523_webhook_ping",
        "webhook_ping_form_encoded": "_github_524_webhook_ping_form_encoded",
        "webhook_project_card_converted": "_github_525_webhook_project_card_converted",
        "webhook_project_card_created": "_github_526_webhook_project_card_created",
        "webhook_project_card_deleted": "_github_527_webhook_project_card_deleted",
        "webhook_project_card_edited": "_github_528_webhook_project_card_edited",
        "webhook_project_card_moved": "_github_529_webhook_project_card_moved",
        "webhook_project_closed": "_github_530_webhook_project_closed",
        "webhook_project_column_created": "_github_531_webhook_project_column_created",
        "webhook_project_column_deleted": "_github_532_webhook_project_column_deleted",
        "webhook_project_column_edited": "_github_533_webhook_project_column_edited",
        "webhook_project_column_moved": "_github_534_webhook_project_column_moved",
        "webhook_project_created": "_github_535_webhook_project_created",
        "webhook_project_deleted": "_github_536_webhook_project_deleted",
        "webhook_project_edited": "_github_537_webhook_project_edited",
        "webhook_project_reopened": "_github_538_webhook_project_reopened",
        "webhook_projects_v2_project_closed": "_github_539_webhook_projects_v2_project_closed",
        "webhook_projects_v2_project_created": "_github_540_webhook_projects_v2_project_created",
        "webhook_projects_v2_project_deleted": "_github_541_webhook_projects_v2_project_deleted",
        "webhook_projects_v2_project_edited": "_github_542_webhook_projects_v2_project_edited",
        "webhook_projects_v2_item_archived": "_github_543_webhook_projects_v2_item_archived",
        "webhook_projects_v2_item_converted": "_github_544_webhook_projects_v2_item_converted",
        "webhook_projects_v2_item_created": "_github_545_webhook_projects_v2_item_created",
        "webhook_projects_v2_item_deleted": "_github_546_webhook_projects_v2_item_deleted",
        "webhook_projects_v2_item_edited": "_github_547_webhook_projects_v2_item_edited",
        "webhook_projects_v2_item_reordered": "_github_548_webhook_projects_v2_item_reordered",
        "webhook_projects_v2_item_restored": "_github_549_webhook_projects_v2_item_restored",
        "webhook_projects_v2_project_reopened": "_github_550_webhook_projects_v2_project_reopened",
        "webhook_public": "_github_551_webhook_public",
        "webhook_pull_request_assigned": "_github_552_webhook_pull_request_assigned",
        "webhook_pull_request_auto_merge_disabled": "_github_553_webhook_pull_request_auto_merge_disabled",
        "webhook_pull_request_auto_merge_enabled": "_github_554_webhook_pull_request_auto_merge_enabled",
        "webhook_pull_request_closed": "_github_555_webhook_pull_request_closed",
        "webhook_pull_request_converted_to_draft": "_github_556_webhook_pull_request_converted_to_draft",
        "webhook_pull_request_demilestoned": "_github_557_webhook_pull_request_demilestoned",
        "webhook_pull_request_dequeued": "_github_558_webhook_pull_request_dequeued",
        "webhook_pull_request_edited": "_github_559_webhook_pull_request_edited",
        "webhook_pull_request_enqueued": "_github_560_webhook_pull_request_enqueued",
        "webhook_pull_request_labeled": "_github_561_webhook_pull_request_labeled",
        "webhook_pull_request_locked": "_github_562_webhook_pull_request_locked",
        "webhook_pull_request_milestoned": "_github_563_webhook_pull_request_milestoned",
        "webhook_pull_request_opened": "_github_564_webhook_pull_request_opened",
        "webhook_pull_request_ready_for_review": "_github_565_webhook_pull_request_ready_for_review",
        "webhook_pull_request_reopened": "_github_566_webhook_pull_request_reopened",
        "webhook_pull_request_review_comment_created": "_github_567_webhook_pull_request_review_comment_created",
        "webhook_pull_request_review_comment_deleted": "_github_568_webhook_pull_request_review_comment_deleted",
        "webhook_pull_request_review_comment_edited": "_github_569_webhook_pull_request_review_comment_edited",
        "webhook_pull_request_review_dismissed": "_github_570_webhook_pull_request_review_dismissed",
        "webhook_pull_request_review_edited": "_github_571_webhook_pull_request_review_edited",
        "webhook_pull_request_review_request_removed": "_github_572_webhook_pull_request_review_request_removed",
        "webhook_pull_request_review_requested": "_github_573_webhook_pull_request_review_requested",
        "webhook_pull_request_review_submitted": "_github_574_webhook_pull_request_review_submitted",
        "webhook_pull_request_review_thread_resolved": "_github_575_webhook_pull_request_review_thread_resolved",
        "webhook_pull_request_review_thread_unresolved": "_github_576_webhook_pull_request_review_thread_unresolved",
        "webhook_pull_request_synchronize": "_github_577_webhook_pull_request_synchronize",
        "webhook_pull_request_unassigned": "_github_578_webhook_pull_request_unassigned",
        "webhook_pull_request_unlabeled": "_github_579_webhook_pull_request_unlabeled",
        "webhook_pull_request_unlocked": "_github_580_webhook_pull_request_unlocked",
        "webhook_push": "_github_581_webhook_push",
        "webhook_registry_package_published": "_github_582_webhook_registry_package_published",
        "webhook_registry_package_updated": "_github_583_webhook_registry_package_updated",
        "webhook_release_created": "_github_584_webhook_release_created",
        "webhook_release_deleted": "_github_585_webhook_release_deleted",
        "webhook_release_edited": "_github_586_webhook_release_edited",
        "webhook_release_prereleased": "_github_587_webhook_release_prereleased",
        "webhook_release_published": "_github_588_webhook_release_published",
        "webhook_release_released": "_github_589_webhook_release_released",
        "webhook_release_unpublished": "_github_590_webhook_release_unpublished",
        "webhook_repository_advisory_published": "_github_591_webhook_repository_advisory_published",
        "webhook_repository_advisory_reported": "_github_592_webhook_repository_advisory_reported",
        "webhook_repository_archived": "_github_593_webhook_repository_archived",
        "webhook_repository_created": "_github_594_webhook_repository_created",
        "webhook_repository_deleted": "_github_595_webhook_repository_deleted",
        "webhook_repository_dispatch_sample": "_github_596_webhook_repository_dispatch_sample",
        "webhook_repository_edited": "_github_597_webhook_repository_edited",
        "webhook_repository_import": "_github_598_webhook_repository_import",
        "webhook_repository_privatized": "_github_599_webhook_repository_privatized",
        "webhook_repository_publicized": "_github_600_webhook_repository_publicized",
        "webhook_repository_renamed": "_github_601_webhook_repository_renamed",
        "webhook_repository_transferred": "_github_602_webhook_repository_transferred",
        "webhook_repository_unarchived": "_github_603_webhook_repository_unarchived",
        "webhook_repository_vulnerability_alert_create": "_github_604_webhook_repository_vulnerability_alert_create",
        "webhook_repository_vulnerability_alert_dismiss": "_github_605_webhook_repository_vulnerability_alert_dismiss",
        "webhook_repository_vulnerability_alert_reopen": "_github_606_webhook_repository_vulnerability_alert_reopen",
        "webhook_repository_vulnerability_alert_resolve": "_github_607_webhook_repository_vulnerability_alert_resolve",
        "webhook_secret_scanning_alert_created": "_github_608_webhook_secret_scanning_alert_created",
        "webhook_secret_scanning_alert_location_created": "_github_609_webhook_secret_scanning_alert_location_created",
        "webhook_secret_scanning_alert_location_created_form_encoded": "_github_610_webhook_secret_scanning_alert_location_created_form_encoded",
        "webhook_secret_scanning_alert_reopened": "_github_611_webhook_secret_scanning_alert_reopened",
        "webhook_secret_scanning_alert_resolved": "_github_612_webhook_secret_scanning_alert_resolved",
        "webhook_secret_scanning_alert_revoked": "_github_613_webhook_secret_scanning_alert_revoked",
        "webhook_security_advisory_published": "_github_614_webhook_security_advisory_published",
        "webhook_security_advisory_updated": "_github_615_webhook_security_advisory_updated",
        "webhook_security_advisory_withdrawn": "_github_616_webhook_security_advisory_withdrawn",
        "webhook_security_and_analysis": "_github_617_webhook_security_and_analysis",
        "webhook_sponsorship_cancelled": "_github_618_webhook_sponsorship_cancelled",
        "webhook_sponsorship_created": "_github_619_webhook_sponsorship_created",
        "webhook_sponsorship_edited": "_github_620_webhook_sponsorship_edited",
        "webhook_sponsorship_pending_cancellation": "_github_621_webhook_sponsorship_pending_cancellation",
        "webhook_sponsorship_pending_tier_change": "_github_622_webhook_sponsorship_pending_tier_change",
        "webhook_sponsorship_tier_changed": "_github_623_webhook_sponsorship_tier_changed",
        "webhook_star_created": "_github_624_webhook_star_created",
        "webhook_star_deleted": "_github_625_webhook_star_deleted",
        "webhook_status": "_github_626_webhook_status",
        "webhook_team_add": "_github_627_webhook_team_add",
        "webhook_team_added_to_repository": "_github_628_webhook_team_added_to_repository",
        "webhook_team_created": "_github_629_webhook_team_created",
        "webhook_team_deleted": "_github_630_webhook_team_deleted",
        "webhook_team_edited": "_github_631_webhook_team_edited",
        "webhook_team_removed_from_repository": "_github_632_webhook_team_removed_from_repository",
        "webhook_watch_started": "_github_633_webhook_watch_started",
        "webhook_workflow_dispatch": "_github_634_webhook_workflow_dispatch",
        "webhook_workflow_job_completed": "_github_635_webhook_workflow_job_completed",
        "webhook_workflow_job_in_progress": "_github_636_webhook_workflow_job_in_progress",
        "webhook_workflow_job_queued": "_github_637_webhook_workflow_job_queued",
        "webhook_workflow_job_waiting": "_github_638_webhook_workflow_job_waiting",
        "webhook_workflow_run_completed": "_github_639_webhook_workflow_run_completed",
        "webhook_workflow_run_in_progress": "_github_640_webhook_workflow_run_in_progress",
        "webhook_workflow_run_requested": "_github_641_webhook_workflow_run_requested",
    }

    types = {}
    types["root"] = t.struct(
        {
            "current_user_url": t.string(),
            "current_user_authorizations_html_url": t.string(),
            "authorizations_url": t.string(),
            "code_search_url": t.string(),
            "commit_search_url": t.string(),
            "emails_url": t.string(),
            "emojis_url": t.string(),
            "events_url": t.string(),
            "feeds_url": t.string(),
            "followers_url": t.string(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "hub_url": t.string(),
            "issue_search_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "label_search_url": t.string(),
            "notifications_url": t.string(),
            "organization_url": t.string(),
            "organization_repositories_url": t.string(),
            "organization_teams_url": t.string(),
            "public_gists_url": t.string(),
            "rate_limit_url": t.string(),
            "repository_url": t.string(),
            "repository_search_url": t.string(),
            "current_user_repositories_url": t.string(),
            "starred_url": t.string(),
            "starred_gists_url": t.string(),
            "topic_search_url": t.string().optional(),
            "user_url": t.string(),
            "user_organizations_url": t.string(),
            "user_repositories_url": t.string(),
            "user_search_url": t.string(),
        }
    ).named(renames["root"])
    types["nullable_simple_user"] = (
        t.struct(
            {
                "name": t.string().optional(),
                "email": t.string().optional(),
                "login": t.string(),
                "id": t.integer(),
                "node_id": t.string(),
                "avatar_url": t.string(),
                "gravatar_id": t.string().optional(),
                "url": t.string(),
                "html_url": t.string(),
                "followers_url": t.string(),
                "following_url": t.string(),
                "gists_url": t.string(),
                "starred_url": t.string(),
                "subscriptions_url": t.string(),
                "organizations_url": t.string(),
                "repos_url": t.string(),
                "events_url": t.string(),
                "received_events_url": t.string(),
                "type": t.string(),
                "site_admin": t.boolean(),
                "starred_at": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_simple_user"])
    )
    types["integration"] = t.struct(
        {
            "id": t.integer(),
            "slug": t.string().optional(),
            "node_id": t.string(),
            "owner": t.proxy(renames["nullable_simple_user"]),
            "name": t.string(),
            "description": t.string().optional(),
            "external_url": t.string(),
            "html_url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "permissions": t.struct(
                {
                    "issues": t.string().optional(),
                    "checks": t.string().optional(),
                    "metadata": t.string().optional(),
                    "contents": t.string().optional(),
                    "deployments": t.string().optional(),
                }
            ),
            "events": t.array(t.string()),
            "installations_count": t.integer().optional(),
            "client_id": t.string().optional(),
            "client_secret": t.string().optional(),
            "webhook_secret": t.string().optional(),
            "pem": t.string().optional(),
        }
    ).named(renames["integration"])
    types["basic_error"] = t.struct(
        {
            "message": t.string().optional(),
            "documentation_url": t.string().optional(),
            "url": t.string().optional(),
            "status": t.string().optional(),
        }
    ).named(renames["basic_error"])
    types["validation_error_simple"] = t.struct(
        {
            "message": t.string(),
            "documentation_url": t.string(),
            "errors": t.array(t.string()).optional(),
        }
    ).named(renames["validation_error_simple"])
    types["webhook_config_url"] = t.string().named(renames["webhook_config_url"])
    types["webhook_config_content_type"] = t.string().named(
        renames["webhook_config_content_type"]
    )
    types["webhook_config_secret"] = t.string().named(renames["webhook_config_secret"])
    types["webhook_config_insecure_ssl"] = t.either([t.string(), t.number()]).named(
        renames["webhook_config_insecure_ssl"]
    )
    types["webhook_config"] = t.struct(
        {
            "url": t.proxy(renames["webhook_config_url"]).optional(),
            "content_type": t.proxy(renames["webhook_config_content_type"]).optional(),
            "secret": t.proxy(renames["webhook_config_secret"]).optional(),
            "insecure_ssl": t.proxy(renames["webhook_config_insecure_ssl"]).optional(),
        }
    ).named(renames["webhook_config"])
    types["hook_delivery_item"] = t.struct(
        {
            "id": t.integer(),
            "guid": t.string(),
            "delivered_at": t.string(),
            "redelivery": t.boolean(),
            "duration": t.number(),
            "status": t.string(),
            "status_code": t.integer(),
            "event": t.string(),
            "action": t.string().optional(),
            "installation_id": t.integer().optional(),
            "repository_id": t.integer().optional(),
        }
    ).named(renames["hook_delivery_item"])
    types["scim_error"] = t.struct(
        {
            "message": t.string().optional(),
            "documentation_url": t.string().optional(),
            "detail": t.string().optional(),
            "status": t.integer().optional(),
            "scimType": t.string().optional(),
            "schemas": t.array(t.string()).optional(),
        }
    ).named(renames["scim_error"])
    types["validation_error"] = t.struct(
        {
            "message": t.string(),
            "documentation_url": t.string(),
            "errors": t.array(
                t.struct(
                    {
                        "resource": t.string().optional(),
                        "field": t.string().optional(),
                        "message": t.string().optional(),
                        "code": t.string(),
                        "index": t.integer().optional(),
                        "value": t.either(
                            [
                                t.string().optional(),
                                t.integer().optional(),
                                t.array(t.string()).optional(),
                            ]
                        ).optional(),
                    }
                )
            ).optional(),
        }
    ).named(renames["validation_error"])
    types["hook_delivery"] = t.struct(
        {
            "id": t.integer(),
            "guid": t.string(),
            "delivered_at": t.string(),
            "redelivery": t.boolean(),
            "duration": t.number(),
            "status": t.string(),
            "status_code": t.integer(),
            "event": t.string(),
            "action": t.string().optional(),
            "installation_id": t.integer().optional(),
            "repository_id": t.integer().optional(),
            "url": t.string().optional(),
            "request": t.struct(
                {"headers": t.struct({}).optional(), "payload": t.struct({}).optional()}
            ),
            "response": t.struct(
                {"headers": t.struct({}).optional(), "payload": t.string().optional()}
            ),
        }
    ).named(renames["hook_delivery"])
    types["simple_user"] = t.struct(
        {
            "name": t.string().optional(),
            "email": t.string().optional(),
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "avatar_url": t.string(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "followers_url": t.string(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "starred_url": t.string(),
            "subscriptions_url": t.string(),
            "organizations_url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "received_events_url": t.string(),
            "type": t.string(),
            "site_admin": t.boolean(),
            "starred_at": t.string().optional(),
        }
    ).named(renames["simple_user"])
    types["enterprise"] = t.struct(
        {
            "description": t.string().optional(),
            "html_url": t.string(),
            "website_url": t.string().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "slug": t.string(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "avatar_url": t.string(),
        }
    ).named(renames["enterprise"])
    types["integration_installation_request"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string().optional(),
            "account": t.union(
                [t.proxy(renames["simple_user"]), t.proxy(renames["enterprise"])]
            ),
            "requester": t.proxy(renames["simple_user"]),
            "created_at": t.string(),
        }
    ).named(renames["integration_installation_request"])
    types["app_permissions"] = t.struct(
        {
            "actions": t.string().optional(),
            "administration": t.string().optional(),
            "checks": t.string().optional(),
            "contents": t.string().optional(),
            "deployments": t.string().optional(),
            "environments": t.string().optional(),
            "issues": t.string().optional(),
            "metadata": t.string().optional(),
            "packages": t.string().optional(),
            "pages": t.string().optional(),
            "pull_requests": t.string().optional(),
            "repository_hooks": t.string().optional(),
            "repository_projects": t.string().optional(),
            "secret_scanning_alerts": t.string().optional(),
            "secrets": t.string().optional(),
            "security_events": t.string().optional(),
            "single_file": t.string().optional(),
            "statuses": t.string().optional(),
            "vulnerability_alerts": t.string().optional(),
            "workflows": t.string().optional(),
            "members": t.string().optional(),
            "organization_administration": t.string().optional(),
            "organization_custom_roles": t.string().optional(),
            "organization_announcement_banners": t.string().optional(),
            "organization_hooks": t.string().optional(),
            "organization_personal_access_tokens": t.string().optional(),
            "organization_personal_access_token_requests": t.string().optional(),
            "organization_plan": t.string().optional(),
            "organization_projects": t.string().optional(),
            "organization_packages": t.string().optional(),
            "organization_secrets": t.string().optional(),
            "organization_self_hosted_runners": t.string().optional(),
            "organization_user_blocking": t.string().optional(),
            "team_discussions": t.string().optional(),
        }
    ).named(renames["app_permissions"])
    types["installation"] = t.struct(
        {
            "id": t.integer(),
            "account": t.union(
                [t.proxy(renames["simple_user"]), t.proxy(renames["enterprise"])]
            ).optional(),
            "repository_selection": t.string(),
            "access_tokens_url": t.string(),
            "repositories_url": t.string(),
            "html_url": t.string(),
            "app_id": t.integer(),
            "target_id": t.integer(),
            "target_type": t.string(),
            "permissions": t.proxy(renames["app_permissions"]),
            "events": t.array(t.string()),
            "created_at": t.string(),
            "updated_at": t.string(),
            "single_file_name": t.string().optional(),
            "has_multiple_single_files": t.boolean().optional(),
            "single_file_paths": t.array(t.string()).optional(),
            "app_slug": t.string(),
            "suspended_by": t.proxy(renames["nullable_simple_user"]),
            "suspended_at": t.string().optional(),
            "contact_email": t.string().optional(),
        }
    ).named(renames["installation"])
    types["nullable_license_simple"] = (
        t.struct(
            {
                "key": t.string(),
                "name": t.string(),
                "url": t.string().optional(),
                "spdx_id": t.string().optional(),
                "node_id": t.string(),
                "html_url": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_license_simple"])
    )
    types["repository"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "license": t.proxy(renames["nullable_license_simple"]),
            "organization": t.proxy(renames["nullable_simple_user"]).optional(),
            "forks": t.integer(),
            "permissions": t.struct(
                {
                    "admin": t.boolean(),
                    "pull": t.boolean(),
                    "triage": t.boolean().optional(),
                    "push": t.boolean(),
                    "maintain": t.boolean().optional(),
                }
            ).optional(),
            "owner": t.proxy(renames["simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "archive_url": t.string(),
            "assignees_url": t.string(),
            "blobs_url": t.string(),
            "branches_url": t.string(),
            "collaborators_url": t.string(),
            "comments_url": t.string(),
            "commits_url": t.string(),
            "compare_url": t.string(),
            "contents_url": t.string(),
            "contributors_url": t.string(),
            "deployments_url": t.string(),
            "downloads_url": t.string(),
            "events_url": t.string(),
            "forks_url": t.string(),
            "git_commits_url": t.string(),
            "git_refs_url": t.string(),
            "git_tags_url": t.string(),
            "git_url": t.string(),
            "issue_comment_url": t.string(),
            "issue_events_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "labels_url": t.string(),
            "languages_url": t.string(),
            "merges_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "pulls_url": t.string(),
            "releases_url": t.string(),
            "ssh_url": t.string(),
            "stargazers_url": t.string(),
            "statuses_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "tags_url": t.string(),
            "teams_url": t.string(),
            "trees_url": t.string(),
            "clone_url": t.string(),
            "mirror_url": t.string().optional(),
            "hooks_url": t.string(),
            "svn_url": t.string(),
            "homepage": t.string().optional(),
            "language": t.string().optional(),
            "forks_count": t.integer(),
            "stargazers_count": t.integer(),
            "watchers_count": t.integer(),
            "size": t.integer(),
            "default_branch": t.string(),
            "open_issues_count": t.integer(),
            "is_template": t.boolean().optional(),
            "topics": t.array(t.string()).optional(),
            "has_issues": t.boolean(),
            "has_projects": t.boolean(),
            "has_wiki": t.boolean(),
            "has_pages": t.boolean(),
            "has_downloads": t.boolean(),
            "has_discussions": t.boolean().optional(),
            "archived": t.boolean(),
            "disabled": t.boolean(),
            "visibility": t.string().optional(),
            "pushed_at": t.string().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "allow_rebase_merge": t.boolean().optional(),
            "template_repository": t.struct(
                {
                    "id": t.integer().optional(),
                    "node_id": t.string().optional(),
                    "name": t.string().optional(),
                    "full_name": t.string().optional(),
                    "owner": t.struct(
                        {
                            "login": t.string().optional(),
                            "id": t.integer().optional(),
                            "node_id": t.string().optional(),
                            "avatar_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "type": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean().optional(),
                    "html_url": t.string().optional(),
                    "description": t.string().optional(),
                    "fork": t.boolean().optional(),
                    "url": t.string().optional(),
                    "archive_url": t.string().optional(),
                    "assignees_url": t.string().optional(),
                    "blobs_url": t.string().optional(),
                    "branches_url": t.string().optional(),
                    "collaborators_url": t.string().optional(),
                    "comments_url": t.string().optional(),
                    "commits_url": t.string().optional(),
                    "compare_url": t.string().optional(),
                    "contents_url": t.string().optional(),
                    "contributors_url": t.string().optional(),
                    "deployments_url": t.string().optional(),
                    "downloads_url": t.string().optional(),
                    "events_url": t.string().optional(),
                    "forks_url": t.string().optional(),
                    "git_commits_url": t.string().optional(),
                    "git_refs_url": t.string().optional(),
                    "git_tags_url": t.string().optional(),
                    "git_url": t.string().optional(),
                    "issue_comment_url": t.string().optional(),
                    "issue_events_url": t.string().optional(),
                    "issues_url": t.string().optional(),
                    "keys_url": t.string().optional(),
                    "labels_url": t.string().optional(),
                    "languages_url": t.string().optional(),
                    "merges_url": t.string().optional(),
                    "milestones_url": t.string().optional(),
                    "notifications_url": t.string().optional(),
                    "pulls_url": t.string().optional(),
                    "releases_url": t.string().optional(),
                    "ssh_url": t.string().optional(),
                    "stargazers_url": t.string().optional(),
                    "statuses_url": t.string().optional(),
                    "subscribers_url": t.string().optional(),
                    "subscription_url": t.string().optional(),
                    "tags_url": t.string().optional(),
                    "teams_url": t.string().optional(),
                    "trees_url": t.string().optional(),
                    "clone_url": t.string().optional(),
                    "mirror_url": t.string().optional(),
                    "hooks_url": t.string().optional(),
                    "svn_url": t.string().optional(),
                    "homepage": t.string().optional(),
                    "language": t.string().optional(),
                    "forks_count": t.integer().optional(),
                    "stargazers_count": t.integer().optional(),
                    "watchers_count": t.integer().optional(),
                    "size": t.integer().optional(),
                    "default_branch": t.string().optional(),
                    "open_issues_count": t.integer().optional(),
                    "is_template": t.boolean().optional(),
                    "topics": t.array(t.string()).optional(),
                    "has_issues": t.boolean().optional(),
                    "has_projects": t.boolean().optional(),
                    "has_wiki": t.boolean().optional(),
                    "has_pages": t.boolean().optional(),
                    "has_downloads": t.boolean().optional(),
                    "archived": t.boolean().optional(),
                    "disabled": t.boolean().optional(),
                    "visibility": t.string().optional(),
                    "pushed_at": t.string().optional(),
                    "created_at": t.string().optional(),
                    "updated_at": t.string().optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean().optional(),
                            "maintain": t.boolean().optional(),
                            "push": t.boolean().optional(),
                            "triage": t.boolean().optional(),
                            "pull": t.boolean().optional(),
                        }
                    ).optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "temp_clone_token": t.string().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_auto_merge": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "merge_commit_message": t.string().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "subscribers_count": t.integer().optional(),
                    "network_count": t.integer().optional(),
                }
            ).optional(),
            "temp_clone_token": t.string().optional(),
            "allow_squash_merge": t.boolean().optional(),
            "allow_auto_merge": t.boolean().optional(),
            "delete_branch_on_merge": t.boolean().optional(),
            "allow_update_branch": t.boolean().optional(),
            "use_squash_pr_title_as_default": t.boolean().optional(),
            "squash_merge_commit_title": t.string().optional(),
            "squash_merge_commit_message": t.string().optional(),
            "merge_commit_title": t.string().optional(),
            "merge_commit_message": t.string().optional(),
            "allow_merge_commit": t.boolean().optional(),
            "allow_forking": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "subscribers_count": t.integer().optional(),
            "network_count": t.integer().optional(),
            "open_issues": t.integer(),
            "watchers": t.integer(),
            "master_branch": t.string().optional(),
            "starred_at": t.string().optional(),
            "anonymous_access_enabled": t.boolean().optional(),
        }
    ).named(renames["repository"])
    types["installation_token"] = t.struct(
        {
            "token": t.string(),
            "expires_at": t.string(),
            "permissions": t.proxy(renames["app_permissions"]).optional(),
            "repository_selection": t.string().optional(),
            "repositories": t.array(t.proxy(renames["repository"])).optional(),
            "single_file": t.string().optional(),
            "has_multiple_single_files": t.boolean().optional(),
            "single_file_paths": t.array(t.string()).optional(),
        }
    ).named(renames["installation_token"])
    types["nullable_scoped_installation"] = (
        t.struct(
            {
                "permissions": t.proxy(renames["app_permissions"]),
                "repository_selection": t.string(),
                "single_file_name": t.string().optional(),
                "has_multiple_single_files": t.boolean().optional(),
                "single_file_paths": t.array(t.string()).optional(),
                "repositories_url": t.string(),
                "account": t.proxy(renames["simple_user"]),
            }
        )
        .optional()
        .named(renames["nullable_scoped_installation"])
    )
    types["authorization"] = t.struct(
        {
            "id": t.integer(),
            "url": t.string(),
            "scopes": t.array(t.string()).optional(),
            "token": t.string(),
            "token_last_eight": t.string().optional(),
            "hashed_token": t.string().optional(),
            "app": t.struct(
                {"client_id": t.string(), "name": t.string(), "url": t.string()}
            ),
            "note": t.string().optional(),
            "note_url": t.string().optional(),
            "updated_at": t.string(),
            "created_at": t.string(),
            "fingerprint": t.string().optional(),
            "user": t.proxy(renames["nullable_simple_user"]).optional(),
            "installation": t.proxy(renames["nullable_scoped_installation"]).optional(),
            "expires_at": t.string().optional(),
        }
    ).named(renames["authorization"])
    types["code_of_conduct"] = t.struct(
        {
            "key": t.string(),
            "name": t.string(),
            "url": t.string(),
            "body": t.string().optional(),
            "html_url": t.string().optional(),
        }
    ).named(renames["code_of_conduct"])
    types["alert_number"] = t.integer().named(renames["alert_number"])
    types["dependabot_alert_package"] = t.struct(
        {"ecosystem": t.string(), "name": t.string()}
    ).named(renames["dependabot_alert_package"])
    types["dependabot_alert_security_vulnerability"] = t.struct(
        {
            "package": t.proxy(renames["dependabot_alert_package"]),
            "severity": t.string(),
            "vulnerable_version_range": t.string(),
            "first_patched_version": t.struct({"identifier": t.string()}).optional(),
        }
    ).named(renames["dependabot_alert_security_vulnerability"])
    types["dependabot_alert_security_advisory"] = t.struct(
        {
            "ghsa_id": t.string(),
            "cve_id": t.string().optional(),
            "summary": t.string(),
            "description": t.string(),
            "vulnerabilities": t.array(
                t.proxy(renames["dependabot_alert_security_vulnerability"])
            ),
            "severity": t.string(),
            "cvss": t.struct(
                {"score": t.number(), "vector_string": t.string().optional()}
            ),
            "cwes": t.array(t.struct({"cwe_id": t.string(), "name": t.string()})),
            "identifiers": t.array(t.struct({"type": t.string(), "value": t.string()})),
            "references": t.array(t.struct({"url": t.string()})),
            "published_at": t.string(),
            "updated_at": t.string(),
            "withdrawn_at": t.string().optional(),
        }
    ).named(renames["dependabot_alert_security_advisory"])
    types["alert_url"] = t.string().named(renames["alert_url"])
    types["alert_html_url"] = t.string().named(renames["alert_html_url"])
    types["alert_created_at"] = t.string().named(renames["alert_created_at"])
    types["alert_updated_at"] = t.string().named(renames["alert_updated_at"])
    types["alert_dismissed_at"] = (
        t.string().optional().named(renames["alert_dismissed_at"])
    )
    types["alert_fixed_at"] = t.string().optional().named(renames["alert_fixed_at"])
    types["alert_auto_dismissed_at"] = (
        t.string().optional().named(renames["alert_auto_dismissed_at"])
    )
    types["simple_repository"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "owner": t.proxy(renames["simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "archive_url": t.string(),
            "assignees_url": t.string(),
            "blobs_url": t.string(),
            "branches_url": t.string(),
            "collaborators_url": t.string(),
            "comments_url": t.string(),
            "commits_url": t.string(),
            "compare_url": t.string(),
            "contents_url": t.string(),
            "contributors_url": t.string(),
            "deployments_url": t.string(),
            "downloads_url": t.string(),
            "events_url": t.string(),
            "forks_url": t.string(),
            "git_commits_url": t.string(),
            "git_refs_url": t.string(),
            "git_tags_url": t.string(),
            "issue_comment_url": t.string(),
            "issue_events_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "labels_url": t.string(),
            "languages_url": t.string(),
            "merges_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "pulls_url": t.string(),
            "releases_url": t.string(),
            "stargazers_url": t.string(),
            "statuses_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "tags_url": t.string(),
            "teams_url": t.string(),
            "trees_url": t.string(),
            "hooks_url": t.string(),
        }
    ).named(renames["simple_repository"])
    types["dependabot_alert_with_repository"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]),
            "state": t.string(),
            "dependency": t.struct(
                {
                    "package": t.proxy(renames["dependabot_alert_package"]).optional(),
                    "manifest_path": t.string().optional(),
                    "scope": t.string().optional(),
                }
            ),
            "security_advisory": t.proxy(renames["dependabot_alert_security_advisory"]),
            "security_vulnerability": t.proxy(
                renames["dependabot_alert_security_vulnerability"]
            ),
            "url": t.proxy(renames["alert_url"]),
            "html_url": t.proxy(renames["alert_html_url"]),
            "created_at": t.proxy(renames["alert_created_at"]),
            "updated_at": t.proxy(renames["alert_updated_at"]),
            "dismissed_at": t.proxy(renames["alert_dismissed_at"]),
            "dismissed_by": t.proxy(renames["nullable_simple_user"]),
            "dismissed_reason": t.string().optional(),
            "dismissed_comment": t.string().optional(),
            "fixed_at": t.proxy(renames["alert_fixed_at"]),
            "auto_dismissed_at": t.proxy(renames["alert_auto_dismissed_at"]).optional(),
            "repository": t.proxy(renames["simple_repository"]),
        }
    ).named(renames["dependabot_alert_with_repository"])
    types["nullable_alert_updated_at"] = (
        t.string().optional().named(renames["nullable_alert_updated_at"])
    )
    types["secret_scanning_alert_state"] = t.string().named(
        renames["secret_scanning_alert_state"]
    )
    types["secret_scanning_alert_resolution"] = (
        t.string().optional().named(renames["secret_scanning_alert_resolution"])
    )
    types["organization_secret_scanning_alert"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]).optional(),
            "created_at": t.proxy(renames["alert_created_at"]).optional(),
            "updated_at": t.proxy(renames["nullable_alert_updated_at"]).optional(),
            "url": t.proxy(renames["alert_url"]).optional(),
            "html_url": t.proxy(renames["alert_html_url"]).optional(),
            "locations_url": t.string().optional(),
            "state": t.proxy(renames["secret_scanning_alert_state"]).optional(),
            "resolution": t.proxy(
                renames["secret_scanning_alert_resolution"]
            ).optional(),
            "resolved_at": t.string().optional(),
            "resolved_by": t.proxy(renames["nullable_simple_user"]).optional(),
            "secret_type": t.string().optional(),
            "secret_type_display_name": t.string().optional(),
            "secret": t.string().optional(),
            "repository": t.proxy(renames["simple_repository"]).optional(),
            "push_protection_bypassed": t.boolean().optional(),
            "push_protection_bypassed_by": t.proxy(
                renames["nullable_simple_user"]
            ).optional(),
            "push_protection_bypassed_at": t.string().optional(),
            "resolution_comment": t.string().optional(),
        }
    ).named(renames["organization_secret_scanning_alert"])
    types["actor"] = t.struct(
        {
            "id": t.integer(),
            "login": t.string(),
            "display_login": t.string().optional(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "avatar_url": t.string(),
        }
    ).named(renames["actor"])
    types["nullable_milestone"] = (
        t.struct(
            {
                "url": t.string(),
                "html_url": t.string(),
                "labels_url": t.string(),
                "id": t.integer(),
                "node_id": t.string(),
                "number": t.integer(),
                "state": t.string(),
                "title": t.string(),
                "description": t.string().optional(),
                "creator": t.proxy(renames["nullable_simple_user"]),
                "open_issues": t.integer(),
                "closed_issues": t.integer(),
                "created_at": t.string(),
                "updated_at": t.string(),
                "closed_at": t.string().optional(),
                "due_on": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_milestone"])
    )
    types["nullable_integration"] = (
        t.struct(
            {
                "id": t.integer(),
                "slug": t.string().optional(),
                "node_id": t.string(),
                "owner": t.proxy(renames["nullable_simple_user"]),
                "name": t.string(),
                "description": t.string().optional(),
                "external_url": t.string(),
                "html_url": t.string(),
                "created_at": t.string(),
                "updated_at": t.string(),
                "permissions": t.struct(
                    {
                        "issues": t.string().optional(),
                        "checks": t.string().optional(),
                        "metadata": t.string().optional(),
                        "contents": t.string().optional(),
                        "deployments": t.string().optional(),
                    }
                ),
                "events": t.array(t.string()),
                "installations_count": t.integer().optional(),
                "client_id": t.string().optional(),
                "client_secret": t.string().optional(),
                "webhook_secret": t.string().optional(),
                "pem": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_integration"])
    )
    types["author_association"] = t.string().named(renames["author_association"])
    types["reaction_rollup"] = t.struct(
        {
            "url": t.string(),
            "total_count": t.integer(),
            "+1": t.integer(),
            "-1": t.integer(),
            "laugh": t.integer(),
            "confused": t.integer(),
            "heart": t.integer(),
            "hooray": t.integer(),
            "eyes": t.integer(),
            "rocket": t.integer(),
        }
    ).named(renames["reaction_rollup"])
    types["issue"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "repository_url": t.string(),
            "labels_url": t.string(),
            "comments_url": t.string(),
            "events_url": t.string(),
            "html_url": t.string(),
            "number": t.integer(),
            "state": t.string(),
            "state_reason": t.string().optional(),
            "title": t.string(),
            "body": t.string().optional(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "labels": t.array(
                t.either(
                    [
                        t.string(),
                        t.struct(
                            {
                                "id": t.integer().optional(),
                                "node_id": t.string().optional(),
                                "url": t.string().optional(),
                                "name": t.string().optional(),
                                "description": t.string().optional(),
                                "color": t.string().optional(),
                                "default": t.boolean().optional(),
                            }
                        ),
                    ]
                )
            ),
            "assignee": t.proxy(renames["nullable_simple_user"]),
            "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
            "milestone": t.proxy(renames["nullable_milestone"]),
            "locked": t.boolean(),
            "active_lock_reason": t.string().optional(),
            "comments": t.integer(),
            "pull_request": t.struct(
                {
                    "merged_at": t.string().optional(),
                    "diff_url": t.string().optional(),
                    "html_url": t.string().optional(),
                    "patch_url": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "closed_at": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "draft": t.boolean().optional(),
            "closed_by": t.proxy(renames["nullable_simple_user"]).optional(),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
            "timeline_url": t.string().optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
            "author_association": t.proxy(renames["author_association"]),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["issue"])
    types["issue_comment"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "body": t.string().optional(),
            "body_text": t.string().optional(),
            "body_html": t.string().optional(),
            "html_url": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "issue_url": t.string(),
            "author_association": t.proxy(renames["author_association"]),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["issue_comment"])
    types["event"] = t.struct(
        {
            "id": t.string(),
            "type": t.string().optional(),
            "actor": t.proxy(renames["actor"]),
            "repo": t.struct(
                {"id": t.integer(), "name": t.string(), "url": t.string()}
            ),
            "org": t.proxy(renames["actor"]).optional(),
            "payload": t.struct(
                {
                    "action": t.string().optional(),
                    "issue": t.proxy(renames["issue"]).optional(),
                    "comment": t.proxy(renames["issue_comment"]).optional(),
                    "pages": t.array(
                        t.struct(
                            {
                                "page_name": t.string().optional(),
                                "title": t.string().optional(),
                                "summary": t.string().optional(),
                                "action": t.string().optional(),
                                "sha": t.string().optional(),
                                "html_url": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ),
            "public": t.boolean(),
            "created_at": t.string().optional(),
        }
    ).named(renames["event"])
    types["link_with_type"] = t.struct({"href": t.string(), "type": t.string()}).named(
        renames["link_with_type"]
    )
    types["feed"] = t.struct(
        {
            "timeline_url": t.string(),
            "user_url": t.string(),
            "current_user_public_url": t.string().optional(),
            "current_user_url": t.string().optional(),
            "current_user_actor_url": t.string().optional(),
            "current_user_organization_url": t.string().optional(),
            "current_user_organization_urls": t.array(t.string()).optional(),
            "security_advisories_url": t.string().optional(),
            "repository_discussions_url": t.string().optional(),
            "repository_discussions_category_url": t.string().optional(),
            "_links": t.struct(
                {
                    "timeline": t.proxy(renames["link_with_type"]),
                    "user": t.proxy(renames["link_with_type"]),
                    "security_advisories": t.proxy(
                        renames["link_with_type"]
                    ).optional(),
                    "current_user": t.proxy(renames["link_with_type"]).optional(),
                    "current_user_public": t.proxy(
                        renames["link_with_type"]
                    ).optional(),
                    "current_user_actor": t.proxy(renames["link_with_type"]).optional(),
                    "current_user_organization": t.proxy(
                        renames["link_with_type"]
                    ).optional(),
                    "current_user_organizations": t.array(
                        t.proxy(renames["link_with_type"])
                    ).optional(),
                    "repository_discussions": t.proxy(
                        renames["link_with_type"]
                    ).optional(),
                    "repository_discussions_category": t.proxy(
                        renames["link_with_type"]
                    ).optional(),
                }
            ),
        }
    ).named(renames["feed"])
    types["base_gist"] = t.struct(
        {
            "url": t.string(),
            "forks_url": t.string(),
            "commits_url": t.string(),
            "id": t.string(),
            "node_id": t.string(),
            "git_pull_url": t.string(),
            "git_push_url": t.string(),
            "html_url": t.string(),
            "files": t.struct({}),
            "public": t.boolean(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "description": t.string().optional(),
            "comments": t.integer(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "comments_url": t.string(),
            "owner": t.proxy(renames["simple_user"]).optional(),
            "truncated": t.boolean().optional(),
            "forks": t.array(t.struct({"_": t.string().optional()})).optional(),
            "history": t.array(t.struct({"_": t.string().optional()})).optional(),
        }
    ).named(renames["base_gist"])
    types["public_user"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "avatar_url": t.string(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "followers_url": t.string(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "starred_url": t.string(),
            "subscriptions_url": t.string(),
            "organizations_url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "received_events_url": t.string(),
            "type": t.string(),
            "site_admin": t.boolean(),
            "name": t.string().optional(),
            "company": t.string().optional(),
            "blog": t.string().optional(),
            "location": t.string().optional(),
            "email": t.string().optional(),
            "hireable": t.boolean().optional(),
            "bio": t.string().optional(),
            "twitter_username": t.string().optional(),
            "public_repos": t.integer(),
            "public_gists": t.integer(),
            "followers": t.integer(),
            "following": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "plan": t.struct(
                {
                    "collaborators": t.integer(),
                    "name": t.string(),
                    "space": t.integer(),
                    "private_repos": t.integer(),
                }
            ).optional(),
            "suspended_at": t.string().optional(),
            "private_gists": t.integer().optional(),
            "total_private_repos": t.integer().optional(),
            "owned_private_repos": t.integer().optional(),
            "disk_usage": t.integer().optional(),
            "collaborators": t.integer().optional(),
        }
    ).named(renames["public_user"])
    types["gist_history"] = t.struct(
        {
            "user": t.proxy(renames["nullable_simple_user"]).optional(),
            "version": t.string().optional(),
            "committed_at": t.string().optional(),
            "change_status": t.struct(
                {
                    "total": t.integer().optional(),
                    "additions": t.integer().optional(),
                    "deletions": t.integer().optional(),
                }
            ).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["gist_history"])
    types["gist_simple"] = t.struct(
        {
            "forks": t.array(
                t.struct(
                    {
                        "id": t.string().optional(),
                        "url": t.string().optional(),
                        "user": t.proxy(renames["public_user"]).optional(),
                        "created_at": t.string().optional(),
                        "updated_at": t.string().optional(),
                    }
                )
            ).optional(),
            "history": t.array(t.proxy(renames["gist_history"])).optional(),
            "fork_of": t.struct(
                {
                    "url": t.string(),
                    "forks_url": t.string(),
                    "commits_url": t.string(),
                    "id": t.string(),
                    "node_id": t.string(),
                    "git_pull_url": t.string(),
                    "git_push_url": t.string(),
                    "html_url": t.string(),
                    "files": t.struct({}),
                    "public": t.boolean(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "description": t.string().optional(),
                    "comments": t.integer(),
                    "user": t.proxy(renames["nullable_simple_user"]),
                    "comments_url": t.string(),
                    "owner": t.proxy(renames["nullable_simple_user"]).optional(),
                    "truncated": t.boolean().optional(),
                    "forks": t.array(t.struct({"_": t.string().optional()})).optional(),
                    "history": t.array(
                        t.struct({"_": t.string().optional()})
                    ).optional(),
                }
            ).optional(),
            "url": t.string().optional(),
            "forks_url": t.string().optional(),
            "commits_url": t.string().optional(),
            "id": t.string().optional(),
            "node_id": t.string().optional(),
            "git_pull_url": t.string().optional(),
            "git_push_url": t.string().optional(),
            "html_url": t.string().optional(),
            "files": t.struct({}).optional(),
            "public": t.boolean().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "description": t.string().optional(),
            "comments": t.integer().optional(),
            "user": t.string().optional(),
            "comments_url": t.string().optional(),
            "owner": t.proxy(renames["simple_user"]).optional(),
            "truncated": t.boolean().optional(),
        }
    ).named(renames["gist_simple"])
    types["gist_comment"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "body": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "author_association": t.proxy(renames["author_association"]),
        }
    ).named(renames["gist_comment"])
    types["gist_commit"] = t.struct(
        {
            "url": t.string(),
            "version": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "change_status": t.struct(
                {
                    "total": t.integer().optional(),
                    "additions": t.integer().optional(),
                    "deletions": t.integer().optional(),
                }
            ),
            "committed_at": t.string(),
        }
    ).named(renames["gist_commit"])
    types["gitignore_template"] = t.struct(
        {"name": t.string(), "source": t.string()}
    ).named(renames["gitignore_template"])
    types["license_simple"] = t.struct(
        {
            "key": t.string(),
            "name": t.string(),
            "url": t.string().optional(),
            "spdx_id": t.string().optional(),
            "node_id": t.string(),
            "html_url": t.string().optional(),
        }
    ).named(renames["license_simple"])
    types["license"] = t.struct(
        {
            "key": t.string(),
            "name": t.string(),
            "spdx_id": t.string().optional(),
            "url": t.string().optional(),
            "node_id": t.string(),
            "html_url": t.string(),
            "description": t.string(),
            "implementation": t.string(),
            "permissions": t.array(t.string()),
            "conditions": t.array(t.string()),
            "limitations": t.array(t.string()),
            "body": t.string(),
            "featured": t.boolean(),
        }
    ).named(renames["license"])
    types["marketplace_listing_plan"] = t.struct(
        {
            "url": t.string(),
            "accounts_url": t.string(),
            "id": t.integer(),
            "number": t.integer(),
            "name": t.string(),
            "description": t.string(),
            "monthly_price_in_cents": t.integer(),
            "yearly_price_in_cents": t.integer(),
            "price_model": t.string(),
            "has_free_trial": t.boolean(),
            "unit_name": t.string().optional(),
            "state": t.string(),
            "bullets": t.array(t.string()),
        }
    ).named(renames["marketplace_listing_plan"])
    types["marketplace_purchase"] = t.struct(
        {
            "url": t.string(),
            "type": t.string(),
            "id": t.integer(),
            "login": t.string(),
            "organization_billing_email": t.string().optional(),
            "email": t.string().optional(),
            "marketplace_pending_change": t.struct(
                {
                    "is_installed": t.boolean().optional(),
                    "effective_date": t.string().optional(),
                    "unit_count": t.integer().optional(),
                    "id": t.integer().optional(),
                    "plan": t.proxy(renames["marketplace_listing_plan"]).optional(),
                }
            ).optional(),
            "marketplace_purchase": t.struct(
                {
                    "billing_cycle": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "is_installed": t.boolean().optional(),
                    "unit_count": t.integer().optional(),
                    "on_free_trial": t.boolean().optional(),
                    "free_trial_ends_on": t.string().optional(),
                    "updated_at": t.string().optional(),
                    "plan": t.proxy(renames["marketplace_listing_plan"]).optional(),
                }
            ),
        }
    ).named(renames["marketplace_purchase"])
    types["api_overview"] = t.struct(
        {
            "verifiable_password_authentication": t.boolean(),
            "ssh_key_fingerprints": t.struct(
                {
                    "SHA256_RSA": t.string().optional(),
                    "SHA256_DSA": t.string().optional(),
                    "SHA256_ECDSA": t.string().optional(),
                    "SHA256_ED25519": t.string().optional(),
                }
            ).optional(),
            "ssh_keys": t.array(t.string()).optional(),
            "hooks": t.array(t.string()).optional(),
            "web": t.array(t.string()).optional(),
            "api": t.array(t.string()).optional(),
            "git": t.array(t.string()).optional(),
            "packages": t.array(t.string()).optional(),
            "pages": t.array(t.string()).optional(),
            "importer": t.array(t.string()).optional(),
            "actions": t.array(t.string()).optional(),
            "dependabot": t.array(t.string()).optional(),
        }
    ).named(renames["api_overview"])
    types["security_and_analysis"] = (
        t.struct(
            {
                "advanced_security": t.struct(
                    {"status": t.string().optional()}
                ).optional(),
                "secret_scanning": t.struct(
                    {"status": t.string().optional()}
                ).optional(),
                "secret_scanning_push_protection": t.struct(
                    {"status": t.string().optional()}
                ).optional(),
            }
        )
        .optional()
        .named(renames["security_and_analysis"])
    )
    types["minimal_repository"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "owner": t.proxy(renames["simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "archive_url": t.string(),
            "assignees_url": t.string(),
            "blobs_url": t.string(),
            "branches_url": t.string(),
            "collaborators_url": t.string(),
            "comments_url": t.string(),
            "commits_url": t.string(),
            "compare_url": t.string(),
            "contents_url": t.string(),
            "contributors_url": t.string(),
            "deployments_url": t.string(),
            "downloads_url": t.string(),
            "events_url": t.string(),
            "forks_url": t.string(),
            "git_commits_url": t.string(),
            "git_refs_url": t.string(),
            "git_tags_url": t.string(),
            "git_url": t.string().optional(),
            "issue_comment_url": t.string(),
            "issue_events_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "labels_url": t.string(),
            "languages_url": t.string(),
            "merges_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "pulls_url": t.string(),
            "releases_url": t.string(),
            "ssh_url": t.string().optional(),
            "stargazers_url": t.string(),
            "statuses_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "tags_url": t.string(),
            "teams_url": t.string(),
            "trees_url": t.string(),
            "clone_url": t.string().optional(),
            "mirror_url": t.string().optional(),
            "hooks_url": t.string(),
            "svn_url": t.string().optional(),
            "homepage": t.string().optional(),
            "language": t.string().optional(),
            "forks_count": t.integer().optional(),
            "stargazers_count": t.integer().optional(),
            "watchers_count": t.integer().optional(),
            "size": t.integer().optional(),
            "default_branch": t.string().optional(),
            "open_issues_count": t.integer().optional(),
            "is_template": t.boolean().optional(),
            "topics": t.array(t.string()).optional(),
            "has_issues": t.boolean().optional(),
            "has_projects": t.boolean().optional(),
            "has_wiki": t.boolean().optional(),
            "has_pages": t.boolean().optional(),
            "has_downloads": t.boolean().optional(),
            "has_discussions": t.boolean().optional(),
            "archived": t.boolean().optional(),
            "disabled": t.boolean().optional(),
            "visibility": t.string().optional(),
            "pushed_at": t.string().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "permissions": t.struct(
                {
                    "admin": t.boolean().optional(),
                    "maintain": t.boolean().optional(),
                    "push": t.boolean().optional(),
                    "triage": t.boolean().optional(),
                    "pull": t.boolean().optional(),
                }
            ).optional(),
            "role_name": t.string().optional(),
            "temp_clone_token": t.string().optional(),
            "delete_branch_on_merge": t.boolean().optional(),
            "subscribers_count": t.integer().optional(),
            "network_count": t.integer().optional(),
            "code_of_conduct": t.proxy(renames["code_of_conduct"]).optional(),
            "license": t.struct(
                {
                    "key": t.string().optional(),
                    "name": t.string().optional(),
                    "spdx_id": t.string().optional(),
                    "url": t.string().optional(),
                    "node_id": t.string().optional(),
                }
            ).optional(),
            "forks": t.integer().optional(),
            "open_issues": t.integer().optional(),
            "watchers": t.integer().optional(),
            "allow_forking": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "security_and_analysis": t.proxy(
                renames["security_and_analysis"]
            ).optional(),
        }
    ).named(renames["minimal_repository"])
    types["thread"] = t.struct(
        {
            "id": t.string(),
            "repository": t.proxy(renames["minimal_repository"]),
            "subject": t.struct(
                {
                    "title": t.string(),
                    "url": t.string(),
                    "latest_comment_url": t.string(),
                    "type": t.string(),
                }
            ),
            "reason": t.string(),
            "unread": t.boolean(),
            "updated_at": t.string(),
            "last_read_at": t.string().optional(),
            "url": t.string(),
            "subscription_url": t.string(),
        }
    ).named(renames["thread"])
    types["thread_subscription"] = t.struct(
        {
            "subscribed": t.boolean(),
            "ignored": t.boolean(),
            "reason": t.string().optional(),
            "created_at": t.string().optional(),
            "url": t.string(),
            "thread_url": t.string().optional(),
            "repository_url": t.string().optional(),
        }
    ).named(renames["thread_subscription"])
    types["organization_simple"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "hooks_url": t.string(),
            "issues_url": t.string(),
            "members_url": t.string(),
            "public_members_url": t.string(),
            "avatar_url": t.string(),
            "description": t.string().optional(),
        }
    ).named(renames["organization_simple"])
    types["organization_programmatic_access_grant_request"] = t.struct(
        {
            "id": t.integer(),
            "reason": t.string().optional(),
            "owner": t.proxy(renames["simple_user"]),
            "repository_selection": t.string(),
            "repositories_url": t.string(),
            "permissions": t.struct(
                {
                    "organization": t.struct({}).optional(),
                    "repository": t.struct({}).optional(),
                    "other": t.struct({}).optional(),
                }
            ),
            "created_at": t.string(),
            "token_expired": t.boolean(),
            "token_expires_at": t.string().optional(),
            "token_last_used_at": t.string().optional(),
        }
    ).named(renames["organization_programmatic_access_grant_request"])
    types["organization_programmatic_access_grant"] = t.struct(
        {
            "id": t.integer(),
            "owner": t.proxy(renames["simple_user"]),
            "repository_selection": t.string(),
            "repositories_url": t.string(),
            "permissions": t.struct(
                {
                    "organization": t.struct({}).optional(),
                    "repository": t.struct({}).optional(),
                    "other": t.struct({}).optional(),
                }
            ),
            "access_granted_at": t.string(),
            "token_expired": t.boolean(),
            "token_expires_at": t.string().optional(),
            "token_last_used_at": t.string().optional(),
        }
    ).named(renames["organization_programmatic_access_grant"])
    types["organization_full"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "hooks_url": t.string(),
            "issues_url": t.string(),
            "members_url": t.string(),
            "public_members_url": t.string(),
            "avatar_url": t.string(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "company": t.string().optional(),
            "blog": t.string().optional(),
            "location": t.string().optional(),
            "email": t.string().optional(),
            "twitter_username": t.string().optional(),
            "is_verified": t.boolean().optional(),
            "has_organization_projects": t.boolean(),
            "has_repository_projects": t.boolean(),
            "public_repos": t.integer(),
            "public_gists": t.integer(),
            "followers": t.integer(),
            "following": t.integer(),
            "html_url": t.string(),
            "created_at": t.string(),
            "type": t.string(),
            "total_private_repos": t.integer().optional(),
            "owned_private_repos": t.integer().optional(),
            "private_gists": t.integer().optional(),
            "disk_usage": t.integer().optional(),
            "collaborators": t.integer().optional(),
            "billing_email": t.string().optional(),
            "plan": t.struct(
                {
                    "name": t.string(),
                    "space": t.integer(),
                    "private_repos": t.integer(),
                    "filled_seats": t.integer().optional(),
                    "seats": t.integer().optional(),
                }
            ).optional(),
            "default_repository_permission": t.string().optional(),
            "members_can_create_repositories": t.boolean().optional(),
            "two_factor_requirement_enabled": t.boolean().optional(),
            "members_allowed_repository_creation_type": t.string().optional(),
            "members_can_create_public_repositories": t.boolean().optional(),
            "members_can_create_private_repositories": t.boolean().optional(),
            "members_can_create_internal_repositories": t.boolean().optional(),
            "members_can_create_pages": t.boolean().optional(),
            "members_can_create_public_pages": t.boolean().optional(),
            "members_can_create_private_pages": t.boolean().optional(),
            "members_can_fork_private_repositories": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "updated_at": t.string(),
            "advanced_security_enabled_for_new_repositories": t.boolean().optional(),
            "dependabot_alerts_enabled_for_new_repositories": t.boolean().optional(),
            "dependabot_security_updates_enabled_for_new_repositories": t.boolean().optional(),
            "dependency_graph_enabled_for_new_repositories": t.boolean().optional(),
            "secret_scanning_enabled_for_new_repositories": t.boolean().optional(),
            "secret_scanning_push_protection_enabled_for_new_repositories": t.boolean().optional(),
            "secret_scanning_push_protection_custom_link_enabled": t.boolean().optional(),
            "secret_scanning_push_protection_custom_link": t.string().optional(),
        }
    ).named(renames["organization_full"])
    types["actions_cache_usage_org_enterprise"] = t.struct(
        {
            "total_active_caches_count": t.integer(),
            "total_active_caches_size_in_bytes": t.integer(),
        }
    ).named(renames["actions_cache_usage_org_enterprise"])
    types["actions_cache_usage_by_repository"] = t.struct(
        {
            "full_name": t.string(),
            "active_caches_size_in_bytes": t.integer(),
            "active_caches_count": t.integer(),
        }
    ).named(renames["actions_cache_usage_by_repository"])
    types["oidc_custom_sub"] = t.struct(
        {"include_claim_keys": t.array(t.string())}
    ).named(renames["oidc_custom_sub"])
    types["empty_object"] = t.struct({}).named(renames["empty_object"])
    types["enabled_repositories"] = t.string().named(renames["enabled_repositories"])
    types["allowed_actions"] = t.string().named(renames["allowed_actions"])
    types["selected_actions_url"] = t.string().named(renames["selected_actions_url"])
    types["actions_organization_permissions"] = t.struct(
        {
            "enabled_repositories": t.proxy(renames["enabled_repositories"]),
            "selected_repositories_url": t.string().optional(),
            "allowed_actions": t.proxy(renames["allowed_actions"]).optional(),
            "selected_actions_url": t.proxy(renames["selected_actions_url"]).optional(),
        }
    ).named(renames["actions_organization_permissions"])
    types["selected_actions"] = t.struct(
        {
            "github_owned_allowed": t.boolean().optional(),
            "verified_allowed": t.boolean().optional(),
            "patterns_allowed": t.array(t.string()).optional(),
        }
    ).named(renames["selected_actions"])
    types["actions_default_workflow_permissions"] = t.string().named(
        renames["actions_default_workflow_permissions"]
    )
    types["actions_can_approve_pull_request_reviews"] = t.boolean().named(
        renames["actions_can_approve_pull_request_reviews"]
    )
    types["actions_get_default_workflow_permissions"] = t.struct(
        {
            "default_workflow_permissions": t.proxy(
                renames["actions_default_workflow_permissions"]
            ),
            "can_approve_pull_request_reviews": t.proxy(
                renames["actions_can_approve_pull_request_reviews"]
            ),
        }
    ).named(renames["actions_get_default_workflow_permissions"])
    types["actions_set_default_workflow_permissions"] = t.struct(
        {
            "default_workflow_permissions": t.proxy(
                renames["actions_default_workflow_permissions"]
            ).optional(),
            "can_approve_pull_request_reviews": t.proxy(
                renames["actions_can_approve_pull_request_reviews"]
            ).optional(),
        }
    ).named(renames["actions_set_default_workflow_permissions"])
    types["required_workflow"] = t.struct(
        {
            "id": t.number(),
            "name": t.string(),
            "path": t.string(),
            "scope": t.string(),
            "ref": t.string(),
            "state": t.string(),
            "selected_repositories_url": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "repository": t.proxy(renames["minimal_repository"]),
        }
    ).named(renames["required_workflow"])
    types["runner_label"] = t.struct(
        {
            "id": t.integer().optional(),
            "name": t.string(),
            "type": t.string().optional(),
        }
    ).named(renames["runner_label"])
    types["runner"] = t.struct(
        {
            "id": t.integer(),
            "runner_group_id": t.integer().optional(),
            "name": t.string(),
            "os": t.string(),
            "status": t.string(),
            "busy": t.boolean(),
            "labels": t.array(t.proxy(renames["runner_label"])),
        }
    ).named(renames["runner"])
    types["runner_application"] = t.struct(
        {
            "os": t.string(),
            "architecture": t.string(),
            "download_url": t.string(),
            "filename": t.string(),
            "temp_download_token": t.string().optional(),
            "sha256_checksum": t.string().optional(),
        }
    ).named(renames["runner_application"])
    types["authentication_token"] = t.struct(
        {
            "token": t.string(),
            "expires_at": t.string(),
            "permissions": t.struct({}).optional(),
            "repositories": t.array(t.proxy(renames["repository"])).optional(),
            "single_file": t.string().optional(),
            "repository_selection": t.string().optional(),
        }
    ).named(renames["authentication_token"])
    types["organization_actions_secret"] = t.struct(
        {
            "name": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "visibility": t.string(),
            "selected_repositories_url": t.string().optional(),
        }
    ).named(renames["organization_actions_secret"])
    types["actions_public_key"] = t.struct(
        {
            "key_id": t.string(),
            "key": t.string(),
            "id": t.integer().optional(),
            "url": t.string().optional(),
            "title": t.string().optional(),
            "created_at": t.string().optional(),
        }
    ).named(renames["actions_public_key"])
    types["organization_actions_variable"] = t.struct(
        {
            "name": t.string(),
            "value": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "visibility": t.string(),
            "selected_repositories_url": t.string().optional(),
        }
    ).named(renames["organization_actions_variable"])
    types["code_scanning_analysis_tool_name"] = t.string().named(
        renames["code_scanning_analysis_tool_name"]
    )
    types["code_scanning_analysis_tool_guid"] = (
        t.string().optional().named(renames["code_scanning_analysis_tool_guid"])
    )
    types["code_scanning_alert_state"] = t.string().named(
        renames["code_scanning_alert_state"]
    )
    types["code_scanning_alert_severity"] = t.string().named(
        renames["code_scanning_alert_severity"]
    )
    types["alert_instances_url"] = t.string().named(renames["alert_instances_url"])
    types["code_scanning_alert_dismissed_reason"] = (
        t.string().optional().named(renames["code_scanning_alert_dismissed_reason"])
    )
    types["code_scanning_alert_dismissed_comment"] = (
        t.string().optional().named(renames["code_scanning_alert_dismissed_comment"])
    )
    types["code_scanning_alert_rule"] = t.struct(
        {
            "id": t.string().optional(),
            "name": t.string().optional(),
            "severity": t.string().optional(),
            "security_severity_level": t.string().optional(),
            "description": t.string().optional(),
            "full_description": t.string().optional(),
            "tags": t.array(t.string()).optional(),
            "help": t.string().optional(),
            "help_uri": t.string().optional(),
        }
    ).named(renames["code_scanning_alert_rule"])
    types["code_scanning_analysis_tool_version"] = (
        t.string().optional().named(renames["code_scanning_analysis_tool_version"])
    )
    types["code_scanning_analysis_tool"] = t.struct(
        {
            "name": t.proxy(renames["code_scanning_analysis_tool_name"]).optional(),
            "version": t.proxy(
                renames["code_scanning_analysis_tool_version"]
            ).optional(),
            "guid": t.proxy(renames["code_scanning_analysis_tool_guid"]).optional(),
        }
    ).named(renames["code_scanning_analysis_tool"])
    types["code_scanning_ref"] = t.string().named(renames["code_scanning_ref"])
    types["code_scanning_analysis_analysis_key"] = t.string().named(
        renames["code_scanning_analysis_analysis_key"]
    )
    types["code_scanning_alert_environment"] = t.string().named(
        renames["code_scanning_alert_environment"]
    )
    types["code_scanning_analysis_category"] = t.string().named(
        renames["code_scanning_analysis_category"]
    )
    types["code_scanning_alert_location"] = t.struct(
        {
            "path": t.string().optional(),
            "start_line": t.integer().optional(),
            "end_line": t.integer().optional(),
            "start_column": t.integer().optional(),
            "end_column": t.integer().optional(),
        }
    ).named(renames["code_scanning_alert_location"])
    types["code_scanning_alert_classification"] = (
        t.string().optional().named(renames["code_scanning_alert_classification"])
    )
    types["code_scanning_alert_instance"] = t.struct(
        {
            "ref": t.proxy(renames["code_scanning_ref"]).optional(),
            "analysis_key": t.proxy(
                renames["code_scanning_analysis_analysis_key"]
            ).optional(),
            "environment": t.proxy(
                renames["code_scanning_alert_environment"]
            ).optional(),
            "category": t.proxy(renames["code_scanning_analysis_category"]).optional(),
            "state": t.proxy(renames["code_scanning_alert_state"]).optional(),
            "commit_sha": t.string().optional(),
            "message": t.struct({"text": t.string().optional()}).optional(),
            "location": t.proxy(renames["code_scanning_alert_location"]).optional(),
            "html_url": t.string().optional(),
            "classifications": t.array(
                t.proxy(renames["code_scanning_alert_classification"])
            ).optional(),
        }
    ).named(renames["code_scanning_alert_instance"])
    types["code_scanning_organization_alert_items"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]),
            "created_at": t.proxy(renames["alert_created_at"]),
            "updated_at": t.proxy(renames["alert_updated_at"]).optional(),
            "url": t.proxy(renames["alert_url"]),
            "html_url": t.proxy(renames["alert_html_url"]),
            "instances_url": t.proxy(renames["alert_instances_url"]),
            "state": t.proxy(renames["code_scanning_alert_state"]),
            "fixed_at": t.proxy(renames["alert_fixed_at"]).optional(),
            "dismissed_by": t.proxy(renames["nullable_simple_user"]),
            "dismissed_at": t.proxy(renames["alert_dismissed_at"]),
            "dismissed_reason": t.proxy(
                renames["code_scanning_alert_dismissed_reason"]
            ),
            "dismissed_comment": t.proxy(
                renames["code_scanning_alert_dismissed_comment"]
            ).optional(),
            "rule": t.proxy(renames["code_scanning_alert_rule"]),
            "tool": t.proxy(renames["code_scanning_analysis_tool"]),
            "most_recent_instance": t.proxy(renames["code_scanning_alert_instance"]),
            "repository": t.proxy(renames["simple_repository"]),
        }
    ).named(renames["code_scanning_organization_alert_items"])
    types["nullable_codespace_machine"] = (
        t.struct(
            {
                "name": t.string(),
                "display_name": t.string(),
                "operating_system": t.string(),
                "storage_in_bytes": t.integer(),
                "memory_in_bytes": t.integer(),
                "cpus": t.integer(),
                "prebuild_availability": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_codespace_machine"])
    )
    types["codespace"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "display_name": t.string().optional(),
            "environment_id": t.string().optional(),
            "owner": t.proxy(renames["simple_user"]),
            "billable_owner": t.proxy(renames["simple_user"]),
            "repository": t.proxy(renames["minimal_repository"]),
            "machine": t.proxy(renames["nullable_codespace_machine"]),
            "devcontainer_path": t.string().optional(),
            "prebuild": t.boolean().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "last_used_at": t.string(),
            "state": t.string(),
            "url": t.string(),
            "git_status": t.struct(
                {
                    "ahead": t.integer().optional(),
                    "behind": t.integer().optional(),
                    "has_unpushed_changes": t.boolean().optional(),
                    "has_uncommitted_changes": t.boolean().optional(),
                    "ref": t.string().optional(),
                }
            ),
            "location": t.string(),
            "idle_timeout_minutes": t.integer().optional(),
            "web_url": t.string(),
            "machines_url": t.string(),
            "start_url": t.string(),
            "stop_url": t.string(),
            "publish_url": t.string().optional(),
            "pulls_url": t.string().optional(),
            "recent_folders": t.array(t.string()),
            "runtime_constraints": t.struct(
                {"allowed_port_privacy_settings": t.array(t.string()).optional()}
            ).optional(),
            "pending_operation": t.boolean().optional(),
            "pending_operation_disabled_reason": t.string().optional(),
            "idle_timeout_notice": t.string().optional(),
            "retention_period_minutes": t.integer().optional(),
            "retention_expires_at": t.string().optional(),
            "last_known_stop_notice": t.string().optional(),
        }
    ).named(renames["codespace"])
    types["codespaces_org_secret"] = t.struct(
        {
            "name": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "visibility": t.string(),
            "selected_repositories_url": t.string().optional(),
        }
    ).named(renames["codespaces_org_secret"])
    types["codespaces_public_key"] = t.struct(
        {
            "key_id": t.string(),
            "key": t.string(),
            "id": t.integer().optional(),
            "url": t.string().optional(),
            "title": t.string().optional(),
            "created_at": t.string().optional(),
        }
    ).named(renames["codespaces_public_key"])
    types["organization_dependabot_secret"] = t.struct(
        {
            "name": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "visibility": t.string(),
            "selected_repositories_url": t.string().optional(),
        }
    ).named(renames["organization_dependabot_secret"])
    types["dependabot_public_key"] = t.struct(
        {"key_id": t.string(), "key": t.string()}
    ).named(renames["dependabot_public_key"])
    types["nullable_minimal_repository"] = (
        t.struct(
            {
                "id": t.integer(),
                "node_id": t.string(),
                "name": t.string(),
                "full_name": t.string(),
                "owner": t.proxy(renames["simple_user"]),
                "private": t.boolean(),
                "html_url": t.string(),
                "description": t.string().optional(),
                "fork": t.boolean(),
                "url": t.string(),
                "archive_url": t.string(),
                "assignees_url": t.string(),
                "blobs_url": t.string(),
                "branches_url": t.string(),
                "collaborators_url": t.string(),
                "comments_url": t.string(),
                "commits_url": t.string(),
                "compare_url": t.string(),
                "contents_url": t.string(),
                "contributors_url": t.string(),
                "deployments_url": t.string(),
                "downloads_url": t.string(),
                "events_url": t.string(),
                "forks_url": t.string(),
                "git_commits_url": t.string(),
                "git_refs_url": t.string(),
                "git_tags_url": t.string(),
                "git_url": t.string().optional(),
                "issue_comment_url": t.string(),
                "issue_events_url": t.string(),
                "issues_url": t.string(),
                "keys_url": t.string(),
                "labels_url": t.string(),
                "languages_url": t.string(),
                "merges_url": t.string(),
                "milestones_url": t.string(),
                "notifications_url": t.string(),
                "pulls_url": t.string(),
                "releases_url": t.string(),
                "ssh_url": t.string().optional(),
                "stargazers_url": t.string(),
                "statuses_url": t.string(),
                "subscribers_url": t.string(),
                "subscription_url": t.string(),
                "tags_url": t.string(),
                "teams_url": t.string(),
                "trees_url": t.string(),
                "clone_url": t.string().optional(),
                "mirror_url": t.string().optional(),
                "hooks_url": t.string(),
                "svn_url": t.string().optional(),
                "homepage": t.string().optional(),
                "language": t.string().optional(),
                "forks_count": t.integer().optional(),
                "stargazers_count": t.integer().optional(),
                "watchers_count": t.integer().optional(),
                "size": t.integer().optional(),
                "default_branch": t.string().optional(),
                "open_issues_count": t.integer().optional(),
                "is_template": t.boolean().optional(),
                "topics": t.array(t.string()).optional(),
                "has_issues": t.boolean().optional(),
                "has_projects": t.boolean().optional(),
                "has_wiki": t.boolean().optional(),
                "has_pages": t.boolean().optional(),
                "has_downloads": t.boolean().optional(),
                "has_discussions": t.boolean().optional(),
                "archived": t.boolean().optional(),
                "disabled": t.boolean().optional(),
                "visibility": t.string().optional(),
                "pushed_at": t.string().optional(),
                "created_at": t.string().optional(),
                "updated_at": t.string().optional(),
                "permissions": t.struct(
                    {
                        "admin": t.boolean().optional(),
                        "maintain": t.boolean().optional(),
                        "push": t.boolean().optional(),
                        "triage": t.boolean().optional(),
                        "pull": t.boolean().optional(),
                    }
                ).optional(),
                "role_name": t.string().optional(),
                "temp_clone_token": t.string().optional(),
                "delete_branch_on_merge": t.boolean().optional(),
                "subscribers_count": t.integer().optional(),
                "network_count": t.integer().optional(),
                "code_of_conduct": t.proxy(renames["code_of_conduct"]).optional(),
                "license": t.struct(
                    {
                        "key": t.string().optional(),
                        "name": t.string().optional(),
                        "spdx_id": t.string().optional(),
                        "url": t.string().optional(),
                        "node_id": t.string().optional(),
                    }
                ).optional(),
                "forks": t.integer().optional(),
                "open_issues": t.integer().optional(),
                "watchers": t.integer().optional(),
                "allow_forking": t.boolean().optional(),
                "web_commit_signoff_required": t.boolean().optional(),
                "security_and_analysis": t.proxy(
                    renames["security_and_analysis"]
                ).optional(),
            }
        )
        .optional()
        .named(renames["nullable_minimal_repository"])
    )
    types["package"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "package_type": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "version_count": t.integer(),
            "visibility": t.string(),
            "owner": t.proxy(renames["nullable_simple_user"]).optional(),
            "repository": t.proxy(renames["nullable_minimal_repository"]).optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
        }
    ).named(renames["package"])
    types["organization_invitation"] = t.struct(
        {
            "id": t.integer(),
            "login": t.string().optional(),
            "email": t.string().optional(),
            "role": t.string(),
            "created_at": t.string(),
            "failed_at": t.string().optional(),
            "failed_reason": t.string().optional(),
            "inviter": t.proxy(renames["simple_user"]),
            "team_count": t.integer(),
            "node_id": t.string(),
            "invitation_teams_url": t.string(),
            "invitation_source": t.string().optional(),
        }
    ).named(renames["organization_invitation"])
    types["org_hook"] = t.struct(
        {
            "id": t.integer(),
            "url": t.string(),
            "ping_url": t.string(),
            "deliveries_url": t.string().optional(),
            "name": t.string(),
            "events": t.array(t.string()),
            "active": t.boolean(),
            "config": t.struct(
                {
                    "url": t.string().optional(),
                    "insecure_ssl": t.string().optional(),
                    "content_type": t.string().optional(),
                    "secret": t.string().optional(),
                }
            ),
            "updated_at": t.string(),
            "created_at": t.string(),
            "type": t.string(),
        }
    ).named(renames["org_hook"])
    types["interaction_group"] = t.string().named(renames["interaction_group"])
    types["interaction_limit_response"] = t.struct(
        {
            "limit": t.proxy(renames["interaction_group"]),
            "origin": t.string(),
            "expires_at": t.string(),
        }
    ).named(renames["interaction_limit_response"])
    types["interaction_expiry"] = t.string().named(renames["interaction_expiry"])
    types["interaction_limit"] = t.struct(
        {
            "limit": t.proxy(renames["interaction_group"]),
            "expiry": t.proxy(renames["interaction_expiry"]).optional(),
        }
    ).named(renames["interaction_limit"])
    types["nullable_team_simple"] = (
        t.struct(
            {
                "id": t.integer(),
                "node_id": t.string(),
                "url": t.string(),
                "members_url": t.string(),
                "name": t.string(),
                "description": t.string().optional(),
                "permission": t.string(),
                "privacy": t.string().optional(),
                "notification_setting": t.string().optional(),
                "html_url": t.string(),
                "repositories_url": t.string(),
                "slug": t.string(),
                "ldap_dn": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_team_simple"])
    )
    types["team"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "slug": t.string(),
            "description": t.string().optional(),
            "privacy": t.string().optional(),
            "notification_setting": t.string().optional(),
            "permission": t.string(),
            "permissions": t.struct(
                {
                    "pull": t.boolean(),
                    "triage": t.boolean(),
                    "push": t.boolean(),
                    "maintain": t.boolean(),
                    "admin": t.boolean(),
                }
            ).optional(),
            "url": t.string(),
            "html_url": t.string(),
            "members_url": t.string(),
            "repositories_url": t.string(),
            "parent": t.proxy(renames["nullable_team_simple"]),
        }
    ).named(renames["team"])
    types["org_membership"] = t.struct(
        {
            "url": t.string(),
            "state": t.string(),
            "role": t.string(),
            "organization_url": t.string(),
            "organization": t.proxy(renames["organization_simple"]),
            "user": t.proxy(renames["nullable_simple_user"]),
            "permissions": t.struct({"can_create_repository": t.boolean()}).optional(),
        }
    ).named(renames["org_membership"])
    types["migration"] = t.struct(
        {
            "id": t.integer(),
            "owner": t.proxy(renames["nullable_simple_user"]),
            "guid": t.string(),
            "state": t.string(),
            "lock_repositories": t.boolean(),
            "exclude_metadata": t.boolean(),
            "exclude_git_data": t.boolean(),
            "exclude_attachments": t.boolean(),
            "exclude_releases": t.boolean(),
            "exclude_owner_projects": t.boolean(),
            "org_metadata_only": t.boolean(),
            "repositories": t.array(t.proxy(renames["repository"])),
            "url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "node_id": t.string(),
            "archive_url": t.string().optional(),
            "exclude": t.array(t.string()).optional(),
        }
    ).named(renames["migration"])
    types["package_version"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "url": t.string(),
            "package_html_url": t.string(),
            "html_url": t.string().optional(),
            "license": t.string().optional(),
            "description": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "deleted_at": t.string().optional(),
            "metadata": t.struct(
                {
                    "package_type": t.string(),
                    "container": t.struct({"tags": t.array(t.string())}).optional(),
                    "docker": t.struct(
                        {"tag": t.array(t.string()).optional()}
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["package_version"])
    types["project"] = t.struct(
        {
            "owner_url": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "columns_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "body": t.string().optional(),
            "number": t.integer(),
            "state": t.string(),
            "creator": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "organization_permission": t.string().optional(),
            "private": t.boolean().optional(),
        }
    ).named(renames["project"])
    types["repository_rule_enforcement"] = t.string().named(
        renames["repository_rule_enforcement"]
    )
    types["repository_ruleset_bypass_actor"] = t.struct(
        {"actor_id": t.integer().optional(), "actor_type": t.string().optional()}
    ).named(renames["repository_ruleset_bypass_actor"])
    types["repository_ruleset_conditions"] = t.struct(
        {
            "ref_name": t.struct(
                {
                    "include": t.array(t.string()).optional(),
                    "exclude": t.array(t.string()).optional(),
                }
            ).optional()
        }
    ).named(renames["repository_ruleset_conditions"])
    types["repository_ruleset_conditions_repository_name_target"] = t.struct(
        {
            "repository_name": t.struct(
                {
                    "include": t.array(t.string()).optional(),
                    "exclude": t.array(t.string()).optional(),
                    "protected": t.boolean().optional(),
                }
            ).optional()
        }
    ).named(renames["repository_ruleset_conditions_repository_name_target"])
    types["org_ruleset_conditions"] = t.struct(
        {
            "ref_name": t.struct(
                {
                    "include": t.array(t.string()).optional(),
                    "exclude": t.array(t.string()).optional(),
                }
            ).optional(),
            "repository_name": t.struct(
                {
                    "include": t.array(t.string()).optional(),
                    "exclude": t.array(t.string()).optional(),
                    "protected": t.boolean().optional(),
                }
            ).optional(),
        }
    ).named(renames["org_ruleset_conditions"])
    types["repository_rule_creation"] = t.struct({"type": t.string()}).named(
        renames["repository_rule_creation"]
    )
    types["repository_rule_update"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {"update_allows_fetch_and_merge": t.boolean()}
            ).optional(),
        }
    ).named(renames["repository_rule_update"])
    types["repository_rule_deletion"] = t.struct({"type": t.string()}).named(
        renames["repository_rule_deletion"]
    )
    types["repository_rule_required_linear_history"] = t.struct(
        {"type": t.string()}
    ).named(renames["repository_rule_required_linear_history"])
    types["repository_rule_required_deployments"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {"required_deployment_environments": t.array(t.string())}
            ).optional(),
        }
    ).named(renames["repository_rule_required_deployments"])
    types["repository_rule_required_signatures"] = t.struct({"type": t.string()}).named(
        renames["repository_rule_required_signatures"]
    )
    types["repository_rule_pull_request"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "dismiss_stale_reviews_on_push": t.boolean(),
                    "require_code_owner_review": t.boolean(),
                    "require_last_push_approval": t.boolean(),
                    "required_approving_review_count": t.integer(),
                    "required_review_thread_resolution": t.boolean(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_pull_request"])
    types["repository_rule_params_status_check_configuration"] = t.struct(
        {"context": t.string(), "integration_id": t.integer().optional()}
    ).named(renames["repository_rule_params_status_check_configuration"])
    types["repository_rule_required_status_checks"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "required_status_checks": t.array(
                        t.proxy(
                            renames["repository_rule_params_status_check_configuration"]
                        )
                    ),
                    "strict_required_status_checks_policy": t.boolean(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_required_status_checks"])
    types["repository_rule_non_fast_forward"] = t.struct({"type": t.string()}).named(
        renames["repository_rule_non_fast_forward"]
    )
    types["repository_rule_commit_message_pattern"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "name": t.string().optional(),
                    "negate": t.boolean().optional(),
                    "operator": t.string(),
                    "pattern": t.string(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_commit_message_pattern"])
    types["repository_rule_commit_author_email_pattern"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "name": t.string().optional(),
                    "negate": t.boolean().optional(),
                    "operator": t.string(),
                    "pattern": t.string(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_commit_author_email_pattern"])
    types["repository_rule_committer_email_pattern"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "name": t.string().optional(),
                    "negate": t.boolean().optional(),
                    "operator": t.string(),
                    "pattern": t.string(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_committer_email_pattern"])
    types["repository_rule_branch_name_pattern"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "name": t.string().optional(),
                    "negate": t.boolean().optional(),
                    "operator": t.string(),
                    "pattern": t.string(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_branch_name_pattern"])
    types["repository_rule_tag_name_pattern"] = t.struct(
        {
            "type": t.string(),
            "parameters": t.struct(
                {
                    "name": t.string().optional(),
                    "negate": t.boolean().optional(),
                    "operator": t.string(),
                    "pattern": t.string(),
                }
            ).optional(),
        }
    ).named(renames["repository_rule_tag_name_pattern"])
    types["repository_rule"] = t.either(
        [
            t.proxy(renames["repository_rule_creation"]),
            t.proxy(renames["repository_rule_update"]),
            t.proxy(renames["repository_rule_deletion"]),
            t.proxy(renames["repository_rule_required_linear_history"]),
            t.proxy(renames["repository_rule_required_deployments"]),
            t.proxy(renames["repository_rule_required_signatures"]),
            t.proxy(renames["repository_rule_pull_request"]),
            t.proxy(renames["repository_rule_required_status_checks"]),
            t.proxy(renames["repository_rule_non_fast_forward"]),
            t.proxy(renames["repository_rule_commit_message_pattern"]),
            t.proxy(renames["repository_rule_commit_author_email_pattern"]),
            t.proxy(renames["repository_rule_committer_email_pattern"]),
            t.proxy(renames["repository_rule_branch_name_pattern"]),
            t.proxy(renames["repository_rule_tag_name_pattern"]),
        ]
    ).named(renames["repository_rule"])
    types["repository_ruleset"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "target": t.string().optional(),
            "source_type": t.string().optional(),
            "source": t.string(),
            "enforcement": t.proxy(renames["repository_rule_enforcement"]),
            "bypass_mode": t.string().optional(),
            "bypass_actors": t.array(
                t.proxy(renames["repository_ruleset_bypass_actor"])
            ).optional(),
            "node_id": t.string().optional(),
            "_links": t.struct(
                {"self": t.struct({"href": t.string().optional()}).optional()}
            ).optional(),
            "conditions": t.union(
                [
                    t.proxy(renames["repository_ruleset_conditions"]),
                    t.proxy(renames["org_ruleset_conditions"]),
                ]
            ).optional(),
            "rules": t.array(t.proxy(renames["repository_rule"])).optional(),
        }
    ).named(renames["repository_ruleset"])
    types["team_simple"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "members_url": t.string(),
            "name": t.string(),
            "description": t.string().optional(),
            "permission": t.string(),
            "privacy": t.string().optional(),
            "notification_setting": t.string().optional(),
            "html_url": t.string(),
            "repositories_url": t.string(),
            "slug": t.string(),
            "ldap_dn": t.string().optional(),
        }
    ).named(renames["team_simple"])
    types["actions_billing_usage"] = t.struct(
        {
            "total_minutes_used": t.integer(),
            "total_paid_minutes_used": t.integer(),
            "included_minutes": t.integer(),
            "minutes_used_breakdown": t.struct(
                {
                    "UBUNTU": t.integer().optional(),
                    "MACOS": t.integer().optional(),
                    "WINDOWS": t.integer().optional(),
                    "ubuntu_4_core": t.integer().optional(),
                    "ubuntu_8_core": t.integer().optional(),
                    "ubuntu_16_core": t.integer().optional(),
                    "ubuntu_32_core": t.integer().optional(),
                    "ubuntu_64_core": t.integer().optional(),
                    "windows_4_core": t.integer().optional(),
                    "windows_8_core": t.integer().optional(),
                    "windows_16_core": t.integer().optional(),
                    "windows_32_core": t.integer().optional(),
                    "windows_64_core": t.integer().optional(),
                    "macos_12_core": t.integer().optional(),
                    "total": t.integer().optional(),
                }
            ),
        }
    ).named(renames["actions_billing_usage"])
    types["packages_billing_usage"] = t.struct(
        {
            "total_gigabytes_bandwidth_used": t.integer(),
            "total_paid_gigabytes_bandwidth_used": t.integer(),
            "included_gigabytes_bandwidth": t.integer(),
        }
    ).named(renames["packages_billing_usage"])
    types["combined_billing_usage"] = t.struct(
        {
            "days_left_in_billing_cycle": t.integer(),
            "estimated_paid_storage_for_month": t.integer(),
            "estimated_storage_for_month": t.integer(),
        }
    ).named(renames["combined_billing_usage"])
    types["team_organization"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "hooks_url": t.string(),
            "issues_url": t.string(),
            "members_url": t.string(),
            "public_members_url": t.string(),
            "avatar_url": t.string(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "company": t.string().optional(),
            "blog": t.string().optional(),
            "location": t.string().optional(),
            "email": t.string().optional(),
            "twitter_username": t.string().optional(),
            "is_verified": t.boolean().optional(),
            "has_organization_projects": t.boolean(),
            "has_repository_projects": t.boolean(),
            "public_repos": t.integer(),
            "public_gists": t.integer(),
            "followers": t.integer(),
            "following": t.integer(),
            "html_url": t.string(),
            "created_at": t.string(),
            "type": t.string(),
            "total_private_repos": t.integer().optional(),
            "owned_private_repos": t.integer().optional(),
            "private_gists": t.integer().optional(),
            "disk_usage": t.integer().optional(),
            "collaborators": t.integer().optional(),
            "billing_email": t.string().optional(),
            "plan": t.struct(
                {
                    "name": t.string(),
                    "space": t.integer(),
                    "private_repos": t.integer(),
                    "filled_seats": t.integer().optional(),
                    "seats": t.integer().optional(),
                }
            ).optional(),
            "default_repository_permission": t.string().optional(),
            "members_can_create_repositories": t.boolean().optional(),
            "two_factor_requirement_enabled": t.boolean().optional(),
            "members_allowed_repository_creation_type": t.string().optional(),
            "members_can_create_public_repositories": t.boolean().optional(),
            "members_can_create_private_repositories": t.boolean().optional(),
            "members_can_create_internal_repositories": t.boolean().optional(),
            "members_can_create_pages": t.boolean().optional(),
            "members_can_create_public_pages": t.boolean().optional(),
            "members_can_create_private_pages": t.boolean().optional(),
            "members_can_fork_private_repositories": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "updated_at": t.string(),
        }
    ).named(renames["team_organization"])
    types["team_full"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "name": t.string(),
            "slug": t.string(),
            "description": t.string().optional(),
            "privacy": t.string().optional(),
            "notification_setting": t.string().optional(),
            "permission": t.string(),
            "members_url": t.string(),
            "repositories_url": t.string(),
            "parent": t.proxy(renames["nullable_team_simple"]).optional(),
            "members_count": t.integer(),
            "repos_count": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "organization": t.proxy(renames["team_organization"]),
            "ldap_dn": t.string().optional(),
        }
    ).named(renames["team_full"])
    types["team_discussion"] = t.struct(
        {
            "author": t.proxy(renames["nullable_simple_user"]),
            "body": t.string(),
            "body_html": t.string(),
            "body_version": t.string(),
            "comments_count": t.integer(),
            "comments_url": t.string(),
            "created_at": t.string(),
            "last_edited_at": t.string().optional(),
            "html_url": t.string(),
            "node_id": t.string(),
            "number": t.integer(),
            "pinned": t.boolean(),
            "private": t.boolean(),
            "team_url": t.string(),
            "title": t.string(),
            "updated_at": t.string(),
            "url": t.string(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["team_discussion"])
    types["team_discussion_comment"] = t.struct(
        {
            "author": t.proxy(renames["nullable_simple_user"]),
            "body": t.string(),
            "body_html": t.string(),
            "body_version": t.string(),
            "created_at": t.string(),
            "last_edited_at": t.string().optional(),
            "discussion_url": t.string(),
            "html_url": t.string(),
            "node_id": t.string(),
            "number": t.integer(),
            "updated_at": t.string(),
            "url": t.string(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["team_discussion_comment"])
    types["reaction"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "content": t.string(),
            "created_at": t.string(),
        }
    ).named(renames["reaction"])
    types["team_membership"] = t.struct(
        {"url": t.string(), "role": t.string(), "state": t.string()}
    ).named(renames["team_membership"])
    types["team_project"] = t.struct(
        {
            "owner_url": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "columns_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "body": t.string().optional(),
            "number": t.integer(),
            "state": t.string(),
            "creator": t.proxy(renames["simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "organization_permission": t.string().optional(),
            "private": t.boolean().optional(),
            "permissions": t.struct(
                {"read": t.boolean(), "write": t.boolean(), "admin": t.boolean()}
            ),
        }
    ).named(renames["team_project"])
    types["nullable_repository"] = (
        t.struct(
            {
                "id": t.integer(),
                "node_id": t.string(),
                "name": t.string(),
                "full_name": t.string(),
                "license": t.proxy(renames["nullable_license_simple"]),
                "organization": t.proxy(renames["nullable_simple_user"]).optional(),
                "forks": t.integer(),
                "permissions": t.struct(
                    {
                        "admin": t.boolean(),
                        "pull": t.boolean(),
                        "triage": t.boolean().optional(),
                        "push": t.boolean(),
                        "maintain": t.boolean().optional(),
                    }
                ).optional(),
                "owner": t.proxy(renames["simple_user"]),
                "private": t.boolean(),
                "html_url": t.string(),
                "description": t.string().optional(),
                "fork": t.boolean(),
                "url": t.string(),
                "archive_url": t.string(),
                "assignees_url": t.string(),
                "blobs_url": t.string(),
                "branches_url": t.string(),
                "collaborators_url": t.string(),
                "comments_url": t.string(),
                "commits_url": t.string(),
                "compare_url": t.string(),
                "contents_url": t.string(),
                "contributors_url": t.string(),
                "deployments_url": t.string(),
                "downloads_url": t.string(),
                "events_url": t.string(),
                "forks_url": t.string(),
                "git_commits_url": t.string(),
                "git_refs_url": t.string(),
                "git_tags_url": t.string(),
                "git_url": t.string(),
                "issue_comment_url": t.string(),
                "issue_events_url": t.string(),
                "issues_url": t.string(),
                "keys_url": t.string(),
                "labels_url": t.string(),
                "languages_url": t.string(),
                "merges_url": t.string(),
                "milestones_url": t.string(),
                "notifications_url": t.string(),
                "pulls_url": t.string(),
                "releases_url": t.string(),
                "ssh_url": t.string(),
                "stargazers_url": t.string(),
                "statuses_url": t.string(),
                "subscribers_url": t.string(),
                "subscription_url": t.string(),
                "tags_url": t.string(),
                "teams_url": t.string(),
                "trees_url": t.string(),
                "clone_url": t.string(),
                "mirror_url": t.string().optional(),
                "hooks_url": t.string(),
                "svn_url": t.string(),
                "homepage": t.string().optional(),
                "language": t.string().optional(),
                "forks_count": t.integer(),
                "stargazers_count": t.integer(),
                "watchers_count": t.integer(),
                "size": t.integer(),
                "default_branch": t.string(),
                "open_issues_count": t.integer(),
                "is_template": t.boolean().optional(),
                "topics": t.array(t.string()).optional(),
                "has_issues": t.boolean(),
                "has_projects": t.boolean(),
                "has_wiki": t.boolean(),
                "has_pages": t.boolean(),
                "has_downloads": t.boolean(),
                "has_discussions": t.boolean().optional(),
                "archived": t.boolean(),
                "disabled": t.boolean(),
                "visibility": t.string().optional(),
                "pushed_at": t.string().optional(),
                "created_at": t.string().optional(),
                "updated_at": t.string().optional(),
                "allow_rebase_merge": t.boolean().optional(),
                "template_repository": t.struct(
                    {
                        "id": t.integer().optional(),
                        "node_id": t.string().optional(),
                        "name": t.string().optional(),
                        "full_name": t.string().optional(),
                        "owner": t.struct(
                            {
                                "login": t.string().optional(),
                                "id": t.integer().optional(),
                                "node_id": t.string().optional(),
                                "avatar_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "url": t.string().optional(),
                                "html_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "events_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "type": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                            }
                        ).optional(),
                        "private": t.boolean().optional(),
                        "html_url": t.string().optional(),
                        "description": t.string().optional(),
                        "fork": t.boolean().optional(),
                        "url": t.string().optional(),
                        "archive_url": t.string().optional(),
                        "assignees_url": t.string().optional(),
                        "blobs_url": t.string().optional(),
                        "branches_url": t.string().optional(),
                        "collaborators_url": t.string().optional(),
                        "comments_url": t.string().optional(),
                        "commits_url": t.string().optional(),
                        "compare_url": t.string().optional(),
                        "contents_url": t.string().optional(),
                        "contributors_url": t.string().optional(),
                        "deployments_url": t.string().optional(),
                        "downloads_url": t.string().optional(),
                        "events_url": t.string().optional(),
                        "forks_url": t.string().optional(),
                        "git_commits_url": t.string().optional(),
                        "git_refs_url": t.string().optional(),
                        "git_tags_url": t.string().optional(),
                        "git_url": t.string().optional(),
                        "issue_comment_url": t.string().optional(),
                        "issue_events_url": t.string().optional(),
                        "issues_url": t.string().optional(),
                        "keys_url": t.string().optional(),
                        "labels_url": t.string().optional(),
                        "languages_url": t.string().optional(),
                        "merges_url": t.string().optional(),
                        "milestones_url": t.string().optional(),
                        "notifications_url": t.string().optional(),
                        "pulls_url": t.string().optional(),
                        "releases_url": t.string().optional(),
                        "ssh_url": t.string().optional(),
                        "stargazers_url": t.string().optional(),
                        "statuses_url": t.string().optional(),
                        "subscribers_url": t.string().optional(),
                        "subscription_url": t.string().optional(),
                        "tags_url": t.string().optional(),
                        "teams_url": t.string().optional(),
                        "trees_url": t.string().optional(),
                        "clone_url": t.string().optional(),
                        "mirror_url": t.string().optional(),
                        "hooks_url": t.string().optional(),
                        "svn_url": t.string().optional(),
                        "homepage": t.string().optional(),
                        "language": t.string().optional(),
                        "forks_count": t.integer().optional(),
                        "stargazers_count": t.integer().optional(),
                        "watchers_count": t.integer().optional(),
                        "size": t.integer().optional(),
                        "default_branch": t.string().optional(),
                        "open_issues_count": t.integer().optional(),
                        "is_template": t.boolean().optional(),
                        "topics": t.array(t.string()).optional(),
                        "has_issues": t.boolean().optional(),
                        "has_projects": t.boolean().optional(),
                        "has_wiki": t.boolean().optional(),
                        "has_pages": t.boolean().optional(),
                        "has_downloads": t.boolean().optional(),
                        "archived": t.boolean().optional(),
                        "disabled": t.boolean().optional(),
                        "visibility": t.string().optional(),
                        "pushed_at": t.string().optional(),
                        "created_at": t.string().optional(),
                        "updated_at": t.string().optional(),
                        "permissions": t.struct(
                            {
                                "admin": t.boolean().optional(),
                                "maintain": t.boolean().optional(),
                                "push": t.boolean().optional(),
                                "triage": t.boolean().optional(),
                                "pull": t.boolean().optional(),
                            }
                        ).optional(),
                        "allow_rebase_merge": t.boolean().optional(),
                        "temp_clone_token": t.string().optional(),
                        "allow_squash_merge": t.boolean().optional(),
                        "allow_auto_merge": t.boolean().optional(),
                        "delete_branch_on_merge": t.boolean().optional(),
                        "allow_update_branch": t.boolean().optional(),
                        "use_squash_pr_title_as_default": t.boolean().optional(),
                        "squash_merge_commit_title": t.string().optional(),
                        "squash_merge_commit_message": t.string().optional(),
                        "merge_commit_title": t.string().optional(),
                        "merge_commit_message": t.string().optional(),
                        "allow_merge_commit": t.boolean().optional(),
                        "subscribers_count": t.integer().optional(),
                        "network_count": t.integer().optional(),
                    }
                ).optional(),
                "temp_clone_token": t.string().optional(),
                "allow_squash_merge": t.boolean().optional(),
                "allow_auto_merge": t.boolean().optional(),
                "delete_branch_on_merge": t.boolean().optional(),
                "allow_update_branch": t.boolean().optional(),
                "use_squash_pr_title_as_default": t.boolean().optional(),
                "squash_merge_commit_title": t.string().optional(),
                "squash_merge_commit_message": t.string().optional(),
                "merge_commit_title": t.string().optional(),
                "merge_commit_message": t.string().optional(),
                "allow_merge_commit": t.boolean().optional(),
                "allow_forking": t.boolean().optional(),
                "web_commit_signoff_required": t.boolean().optional(),
                "subscribers_count": t.integer().optional(),
                "network_count": t.integer().optional(),
                "open_issues": t.integer(),
                "watchers": t.integer(),
                "master_branch": t.string().optional(),
                "starred_at": t.string().optional(),
                "anonymous_access_enabled": t.boolean().optional(),
            }
        )
        .optional()
        .named(renames["nullable_repository"])
    )
    types["team_repository"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "license": t.proxy(renames["nullable_license_simple"]),
            "forks": t.integer(),
            "permissions": t.struct(
                {
                    "admin": t.boolean(),
                    "pull": t.boolean(),
                    "triage": t.boolean().optional(),
                    "push": t.boolean(),
                    "maintain": t.boolean().optional(),
                }
            ).optional(),
            "role_name": t.string().optional(),
            "owner": t.proxy(renames["nullable_simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "archive_url": t.string(),
            "assignees_url": t.string(),
            "blobs_url": t.string(),
            "branches_url": t.string(),
            "collaborators_url": t.string(),
            "comments_url": t.string(),
            "commits_url": t.string(),
            "compare_url": t.string(),
            "contents_url": t.string(),
            "contributors_url": t.string(),
            "deployments_url": t.string(),
            "downloads_url": t.string(),
            "events_url": t.string(),
            "forks_url": t.string(),
            "git_commits_url": t.string(),
            "git_refs_url": t.string(),
            "git_tags_url": t.string(),
            "git_url": t.string(),
            "issue_comment_url": t.string(),
            "issue_events_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "labels_url": t.string(),
            "languages_url": t.string(),
            "merges_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "pulls_url": t.string(),
            "releases_url": t.string(),
            "ssh_url": t.string(),
            "stargazers_url": t.string(),
            "statuses_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "tags_url": t.string(),
            "teams_url": t.string(),
            "trees_url": t.string(),
            "clone_url": t.string(),
            "mirror_url": t.string().optional(),
            "hooks_url": t.string(),
            "svn_url": t.string(),
            "homepage": t.string().optional(),
            "language": t.string().optional(),
            "forks_count": t.integer(),
            "stargazers_count": t.integer(),
            "watchers_count": t.integer(),
            "size": t.integer(),
            "default_branch": t.string(),
            "open_issues_count": t.integer(),
            "is_template": t.boolean().optional(),
            "topics": t.array(t.string()).optional(),
            "has_issues": t.boolean(),
            "has_projects": t.boolean(),
            "has_wiki": t.boolean(),
            "has_pages": t.boolean(),
            "has_downloads": t.boolean(),
            "archived": t.boolean(),
            "disabled": t.boolean(),
            "visibility": t.string().optional(),
            "pushed_at": t.string().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "allow_rebase_merge": t.boolean().optional(),
            "template_repository": t.proxy(renames["nullable_repository"]).optional(),
            "temp_clone_token": t.string().optional(),
            "allow_squash_merge": t.boolean().optional(),
            "allow_auto_merge": t.boolean().optional(),
            "delete_branch_on_merge": t.boolean().optional(),
            "allow_merge_commit": t.boolean().optional(),
            "allow_forking": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "subscribers_count": t.integer().optional(),
            "network_count": t.integer().optional(),
            "open_issues": t.integer(),
            "watchers": t.integer(),
            "master_branch": t.string().optional(),
        }
    ).named(renames["team_repository"])
    types["project_card"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "note": t.string().optional(),
            "creator": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "archived": t.boolean().optional(),
            "column_name": t.string().optional(),
            "project_id": t.string().optional(),
            "column_url": t.string(),
            "content_url": t.string().optional(),
            "project_url": t.string(),
        }
    ).named(renames["project_card"])
    types["project_column"] = t.struct(
        {
            "url": t.string(),
            "project_url": t.string(),
            "cards_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
        }
    ).named(renames["project_column"])
    types["project_collaborator_permission"] = t.struct(
        {"permission": t.string(), "user": t.proxy(renames["nullable_simple_user"])}
    ).named(renames["project_collaborator_permission"])
    types["rate_limit"] = t.struct(
        {
            "limit": t.integer(),
            "remaining": t.integer(),
            "reset": t.integer(),
            "used": t.integer(),
        }
    ).named(renames["rate_limit"])
    types["rate_limit_overview"] = t.struct(
        {
            "resources": t.struct(
                {
                    "core": t.proxy(renames["rate_limit"]),
                    "graphql": t.proxy(renames["rate_limit"]).optional(),
                    "search": t.proxy(renames["rate_limit"]),
                    "source_import": t.proxy(renames["rate_limit"]).optional(),
                    "integration_manifest": t.proxy(renames["rate_limit"]).optional(),
                    "code_scanning_upload": t.proxy(renames["rate_limit"]).optional(),
                    "actions_runner_registration": t.proxy(
                        renames["rate_limit"]
                    ).optional(),
                    "scim": t.proxy(renames["rate_limit"]).optional(),
                    "dependency_snapshots": t.proxy(renames["rate_limit"]).optional(),
                }
            ),
            "rate": t.proxy(renames["rate_limit"]),
        }
    ).named(renames["rate_limit_overview"])
    types["repo_required_workflow"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "path": t.string(),
            "state": t.string(),
            "source_repository": t.proxy(renames["minimal_repository"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "badge_url": t.string(),
        }
    ).named(renames["repo_required_workflow"])
    types["workflow_usage"] = t.struct(
        {
            "billable": t.struct(
                {
                    "UBUNTU": t.struct({"total_ms": t.integer().optional()}).optional(),
                    "MACOS": t.struct({"total_ms": t.integer().optional()}).optional(),
                    "WINDOWS": t.struct(
                        {"total_ms": t.integer().optional()}
                    ).optional(),
                }
            )
        }
    ).named(renames["workflow_usage"])
    types["code_of_conduct_simple"] = t.struct(
        {
            "url": t.string(),
            "key": t.string(),
            "name": t.string(),
            "html_url": t.string().optional(),
        }
    ).named(renames["code_of_conduct_simple"])
    types["full_repository"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "owner": t.proxy(renames["simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "archive_url": t.string(),
            "assignees_url": t.string(),
            "blobs_url": t.string(),
            "branches_url": t.string(),
            "collaborators_url": t.string(),
            "comments_url": t.string(),
            "commits_url": t.string(),
            "compare_url": t.string(),
            "contents_url": t.string(),
            "contributors_url": t.string(),
            "deployments_url": t.string(),
            "downloads_url": t.string(),
            "events_url": t.string(),
            "forks_url": t.string(),
            "git_commits_url": t.string(),
            "git_refs_url": t.string(),
            "git_tags_url": t.string(),
            "git_url": t.string(),
            "issue_comment_url": t.string(),
            "issue_events_url": t.string(),
            "issues_url": t.string(),
            "keys_url": t.string(),
            "labels_url": t.string(),
            "languages_url": t.string(),
            "merges_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "pulls_url": t.string(),
            "releases_url": t.string(),
            "ssh_url": t.string(),
            "stargazers_url": t.string(),
            "statuses_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "tags_url": t.string(),
            "teams_url": t.string(),
            "trees_url": t.string(),
            "clone_url": t.string(),
            "mirror_url": t.string().optional(),
            "hooks_url": t.string(),
            "svn_url": t.string(),
            "homepage": t.string().optional(),
            "language": t.string().optional(),
            "forks_count": t.integer(),
            "stargazers_count": t.integer(),
            "watchers_count": t.integer(),
            "size": t.integer(),
            "default_branch": t.string(),
            "open_issues_count": t.integer(),
            "is_template": t.boolean().optional(),
            "topics": t.array(t.string()).optional(),
            "has_issues": t.boolean(),
            "has_projects": t.boolean(),
            "has_wiki": t.boolean(),
            "has_pages": t.boolean(),
            "has_downloads": t.boolean(),
            "has_discussions": t.boolean(),
            "archived": t.boolean(),
            "disabled": t.boolean(),
            "visibility": t.string().optional(),
            "pushed_at": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "permissions": t.struct(
                {
                    "admin": t.boolean(),
                    "maintain": t.boolean().optional(),
                    "push": t.boolean(),
                    "triage": t.boolean().optional(),
                    "pull": t.boolean(),
                }
            ).optional(),
            "allow_rebase_merge": t.boolean().optional(),
            "template_repository": t.proxy(renames["nullable_repository"]).optional(),
            "temp_clone_token": t.string().optional(),
            "allow_squash_merge": t.boolean().optional(),
            "allow_auto_merge": t.boolean().optional(),
            "delete_branch_on_merge": t.boolean().optional(),
            "allow_merge_commit": t.boolean().optional(),
            "allow_update_branch": t.boolean().optional(),
            "use_squash_pr_title_as_default": t.boolean().optional(),
            "squash_merge_commit_title": t.string().optional(),
            "squash_merge_commit_message": t.string().optional(),
            "merge_commit_title": t.string().optional(),
            "merge_commit_message": t.string().optional(),
            "allow_forking": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
            "subscribers_count": t.integer(),
            "network_count": t.integer(),
            "license": t.proxy(renames["nullable_license_simple"]),
            "organization": t.proxy(renames["nullable_simple_user"]).optional(),
            "parent": t.proxy(renames["repository"]).optional(),
            "source": t.proxy(renames["repository"]).optional(),
            "forks": t.integer(),
            "master_branch": t.string().optional(),
            "open_issues": t.integer(),
            "watchers": t.integer(),
            "anonymous_access_enabled": t.boolean().optional(),
            "code_of_conduct": t.proxy(renames["code_of_conduct_simple"]).optional(),
            "security_and_analysis": t.proxy(
                renames["security_and_analysis"]
            ).optional(),
        }
    ).named(renames["full_repository"])
    types["artifact"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "size_in_bytes": t.integer(),
            "url": t.string(),
            "archive_download_url": t.string(),
            "expired": t.boolean(),
            "created_at": t.string().optional(),
            "expires_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "workflow_run": t.struct(
                {
                    "id": t.integer().optional(),
                    "repository_id": t.integer().optional(),
                    "head_repository_id": t.integer().optional(),
                    "head_branch": t.string().optional(),
                    "head_sha": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["artifact"])
    types["actions_cache_list"] = t.struct(
        {
            "total_count": t.integer(),
            "actions_caches": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "ref": t.string().optional(),
                        "key": t.string().optional(),
                        "version": t.string().optional(),
                        "last_accessed_at": t.string().optional(),
                        "created_at": t.string().optional(),
                        "size_in_bytes": t.integer().optional(),
                    }
                )
            ),
        }
    ).named(renames["actions_cache_list"])
    types["job"] = t.struct(
        {
            "id": t.integer(),
            "run_id": t.integer(),
            "run_url": t.string(),
            "run_attempt": t.integer().optional(),
            "node_id": t.string(),
            "head_sha": t.string(),
            "url": t.string(),
            "html_url": t.string().optional(),
            "status": t.string(),
            "conclusion": t.string().optional(),
            "created_at": t.string(),
            "started_at": t.string(),
            "completed_at": t.string().optional(),
            "name": t.string(),
            "steps": t.array(
                t.struct(
                    {
                        "status": t.string(),
                        "conclusion": t.string().optional(),
                        "name": t.string(),
                        "number": t.integer(),
                        "started_at": t.string().optional(),
                        "completed_at": t.string().optional(),
                    }
                )
            ).optional(),
            "check_run_url": t.string(),
            "labels": t.array(t.string()),
            "runner_id": t.integer().optional(),
            "runner_name": t.string().optional(),
            "runner_group_id": t.integer().optional(),
            "runner_group_name": t.string().optional(),
            "workflow_name": t.string().optional(),
            "head_branch": t.string().optional(),
        }
    ).named(renames["job"])
    types["oidc_custom_sub_repo"] = t.struct(
        {
            "use_default": t.boolean(),
            "include_claim_keys": t.array(t.string()).optional(),
        }
    ).named(renames["oidc_custom_sub_repo"])
    types["actions_secret"] = t.struct(
        {"name": t.string(), "created_at": t.string(), "updated_at": t.string()}
    ).named(renames["actions_secret"])
    types["actions_variable"] = t.struct(
        {
            "name": t.string(),
            "value": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
        }
    ).named(renames["actions_variable"])
    types["actions_enabled"] = t.boolean().named(renames["actions_enabled"])
    types["actions_repository_permissions"] = t.struct(
        {
            "enabled": t.proxy(renames["actions_enabled"]),
            "allowed_actions": t.proxy(renames["allowed_actions"]).optional(),
            "selected_actions_url": t.proxy(renames["selected_actions_url"]).optional(),
        }
    ).named(renames["actions_repository_permissions"])
    types["actions_workflow_access_to_repository"] = t.struct(
        {"access_level": t.string()}
    ).named(renames["actions_workflow_access_to_repository"])
    types["referenced_workflow"] = t.struct(
        {"path": t.string(), "sha": t.string(), "ref": t.string().optional()}
    ).named(renames["referenced_workflow"])
    types["pull_request_minimal"] = t.struct(
        {
            "id": t.integer(),
            "number": t.integer(),
            "url": t.string(),
            "head": t.struct(
                {
                    "ref": t.string(),
                    "sha": t.string(),
                    "repo": t.struct(
                        {"id": t.integer(), "url": t.string(), "name": t.string()}
                    ),
                }
            ),
            "base": t.struct(
                {
                    "ref": t.string(),
                    "sha": t.string(),
                    "repo": t.struct(
                        {"id": t.integer(), "url": t.string(), "name": t.string()}
                    ),
                }
            ),
        }
    ).named(renames["pull_request_minimal"])
    types["nullable_simple_commit"] = (
        t.struct(
            {
                "id": t.string(),
                "tree_id": t.string(),
                "message": t.string(),
                "timestamp": t.string(),
                "author": t.struct(
                    {"name": t.string(), "email": t.string()}
                ).optional(),
                "committer": t.struct(
                    {"name": t.string(), "email": t.string()}
                ).optional(),
            }
        )
        .optional()
        .named(renames["nullable_simple_commit"])
    )
    types["workflow_run"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string().optional(),
            "node_id": t.string(),
            "check_suite_id": t.integer().optional(),
            "check_suite_node_id": t.string().optional(),
            "head_branch": t.string().optional(),
            "head_sha": t.string(),
            "path": t.string(),
            "run_number": t.integer(),
            "run_attempt": t.integer().optional(),
            "referenced_workflows": t.array(
                t.proxy(renames["referenced_workflow"])
            ).optional(),
            "event": t.string(),
            "status": t.string().optional(),
            "conclusion": t.string().optional(),
            "workflow_id": t.integer(),
            "url": t.string(),
            "html_url": t.string(),
            "pull_requests": t.array(
                t.proxy(renames["pull_request_minimal"])
            ).optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "actor": t.proxy(renames["simple_user"]).optional(),
            "triggering_actor": t.proxy(renames["simple_user"]).optional(),
            "run_started_at": t.string().optional(),
            "jobs_url": t.string(),
            "logs_url": t.string(),
            "check_suite_url": t.string(),
            "artifacts_url": t.string(),
            "cancel_url": t.string(),
            "rerun_url": t.string(),
            "previous_attempt_url": t.string().optional(),
            "workflow_url": t.string(),
            "head_commit": t.proxy(renames["nullable_simple_commit"]),
            "repository": t.proxy(renames["minimal_repository"]),
            "head_repository": t.proxy(renames["minimal_repository"]),
            "head_repository_id": t.integer().optional(),
            "display_title": t.string(),
        }
    ).named(renames["workflow_run"])
    types["environment_approvals"] = t.struct(
        {
            "environments": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "node_id": t.string().optional(),
                        "name": t.string().optional(),
                        "url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "created_at": t.string().optional(),
                        "updated_at": t.string().optional(),
                    }
                )
            ),
            "state": t.string(),
            "user": t.proxy(renames["simple_user"]),
            "comment": t.string(),
        }
    ).named(renames["environment_approvals"])
    types["review_custom_gates_comment_required"] = t.struct(
        {"environment_name": t.string(), "comment": t.string()}
    ).named(renames["review_custom_gates_comment_required"])
    types["review_custom_gates_state_required"] = t.struct(
        {
            "environment_name": t.string(),
            "state": t.string(),
            "comment": t.string().optional(),
        }
    ).named(renames["review_custom_gates_state_required"])
    types["deployment_reviewer_type"] = t.string().named(
        renames["deployment_reviewer_type"]
    )
    types["pending_deployment"] = t.struct(
        {
            "environment": t.struct(
                {
                    "id": t.integer().optional(),
                    "node_id": t.string().optional(),
                    "name": t.string().optional(),
                    "url": t.string().optional(),
                    "html_url": t.string().optional(),
                }
            ),
            "wait_timer": t.integer(),
            "wait_timer_started_at": t.string().optional(),
            "current_user_can_approve": t.boolean(),
            "reviewers": t.array(
                t.struct(
                    {
                        "type": t.proxy(renames["deployment_reviewer_type"]).optional(),
                        "reviewer": t.union(
                            [t.proxy(renames["simple_user"]), t.proxy(renames["team"])]
                        ).optional(),
                    }
                )
            ),
        }
    ).named(renames["pending_deployment"])
    types["deployment"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "sha": t.string(),
            "ref": t.string(),
            "task": t.string(),
            "payload": t.either([t.struct({}), t.string()]),
            "original_environment": t.string().optional(),
            "environment": t.string(),
            "description": t.string().optional(),
            "creator": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "statuses_url": t.string(),
            "repository_url": t.string(),
            "transient_environment": t.boolean().optional(),
            "production_environment": t.boolean().optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
        }
    ).named(renames["deployment"])
    types["workflow_run_usage"] = t.struct(
        {
            "billable": t.struct(
                {
                    "UBUNTU": t.struct(
                        {
                            "total_ms": t.integer(),
                            "jobs": t.integer(),
                            "job_runs": t.array(
                                t.struct(
                                    {"job_id": t.integer(), "duration_ms": t.integer()}
                                )
                            ).optional(),
                        }
                    ).optional(),
                    "MACOS": t.struct(
                        {
                            "total_ms": t.integer(),
                            "jobs": t.integer(),
                            "job_runs": t.array(
                                t.struct(
                                    {"job_id": t.integer(), "duration_ms": t.integer()}
                                )
                            ).optional(),
                        }
                    ).optional(),
                    "WINDOWS": t.struct(
                        {
                            "total_ms": t.integer(),
                            "jobs": t.integer(),
                            "job_runs": t.array(
                                t.struct(
                                    {"job_id": t.integer(), "duration_ms": t.integer()}
                                )
                            ).optional(),
                        }
                    ).optional(),
                }
            ),
            "run_duration_ms": t.integer().optional(),
        }
    ).named(renames["workflow_run_usage"])
    types["workflow"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "path": t.string(),
            "state": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "badge_url": t.string(),
            "deleted_at": t.string().optional(),
        }
    ).named(renames["workflow"])
    types["autolink"] = t.struct(
        {
            "id": t.integer(),
            "key_prefix": t.string(),
            "url_template": t.string(),
            "is_alphanumeric": t.boolean(),
        }
    ).named(renames["autolink"])
    types["protected_branch_required_status_check"] = t.struct(
        {
            "url": t.string().optional(),
            "enforcement_level": t.string().optional(),
            "contexts": t.array(t.string()),
            "checks": t.array(
                t.struct({"context": t.string(), "app_id": t.integer().optional()})
            ),
            "contexts_url": t.string().optional(),
            "strict": t.boolean().optional(),
        }
    ).named(renames["protected_branch_required_status_check"])
    types["protected_branch_admin_enforced"] = t.struct(
        {"url": t.string(), "enabled": t.boolean()}
    ).named(renames["protected_branch_admin_enforced"])
    types["protected_branch_pull_request_review"] = t.struct(
        {
            "url": t.string().optional(),
            "dismissal_restrictions": t.struct(
                {
                    "users": t.array(t.proxy(renames["simple_user"])).optional(),
                    "teams": t.array(t.proxy(renames["team"])).optional(),
                    "apps": t.array(t.proxy(renames["integration"])).optional(),
                    "url": t.string().optional(),
                    "users_url": t.string().optional(),
                    "teams_url": t.string().optional(),
                }
            ).optional(),
            "bypass_pull_request_allowances": t.struct(
                {
                    "users": t.array(t.proxy(renames["simple_user"])).optional(),
                    "teams": t.array(t.proxy(renames["team"])).optional(),
                    "apps": t.array(t.proxy(renames["integration"])).optional(),
                }
            ).optional(),
            "dismiss_stale_reviews": t.boolean(),
            "require_code_owner_reviews": t.boolean(),
            "required_approving_review_count": t.integer().optional(),
            "require_last_push_approval": t.boolean().optional(),
        }
    ).named(renames["protected_branch_pull_request_review"])
    types["branch_restriction_policy"] = t.struct(
        {
            "url": t.string(),
            "users_url": t.string(),
            "teams_url": t.string(),
            "apps_url": t.string(),
            "users": t.array(
                t.struct(
                    {
                        "login": t.string().optional(),
                        "id": t.integer().optional(),
                        "node_id": t.string().optional(),
                        "avatar_url": t.string().optional(),
                        "gravatar_id": t.string().optional(),
                        "url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "followers_url": t.string().optional(),
                        "following_url": t.string().optional(),
                        "gists_url": t.string().optional(),
                        "starred_url": t.string().optional(),
                        "subscriptions_url": t.string().optional(),
                        "organizations_url": t.string().optional(),
                        "repos_url": t.string().optional(),
                        "events_url": t.string().optional(),
                        "received_events_url": t.string().optional(),
                        "type": t.string().optional(),
                        "site_admin": t.boolean().optional(),
                    }
                )
            ),
            "teams": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "node_id": t.string().optional(),
                        "url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "name": t.string().optional(),
                        "slug": t.string().optional(),
                        "description": t.string().optional(),
                        "privacy": t.string().optional(),
                        "notification_setting": t.string().optional(),
                        "permission": t.string().optional(),
                        "members_url": t.string().optional(),
                        "repositories_url": t.string().optional(),
                        "parent": t.string().optional(),
                    }
                )
            ),
            "apps": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "slug": t.string().optional(),
                        "node_id": t.string().optional(),
                        "owner": t.struct(
                            {
                                "login": t.string().optional(),
                                "id": t.integer().optional(),
                                "node_id": t.string().optional(),
                                "url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "events_url": t.string().optional(),
                                "hooks_url": t.string().optional(),
                                "issues_url": t.string().optional(),
                                "members_url": t.string().optional(),
                                "public_members_url": t.string().optional(),
                                "avatar_url": t.string().optional(),
                                "description": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "type": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                            }
                        ).optional(),
                        "name": t.string().optional(),
                        "description": t.string().optional(),
                        "external_url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "created_at": t.string().optional(),
                        "updated_at": t.string().optional(),
                        "permissions": t.struct(
                            {
                                "metadata": t.string().optional(),
                                "contents": t.string().optional(),
                                "issues": t.string().optional(),
                                "single_file": t.string().optional(),
                            }
                        ).optional(),
                        "events": t.array(t.string()).optional(),
                    }
                )
            ),
        }
    ).named(renames["branch_restriction_policy"])
    types["branch_protection"] = t.struct(
        {
            "url": t.string().optional(),
            "enabled": t.boolean().optional(),
            "required_status_checks": t.proxy(
                renames["protected_branch_required_status_check"]
            ).optional(),
            "enforce_admins": t.proxy(
                renames["protected_branch_admin_enforced"]
            ).optional(),
            "required_pull_request_reviews": t.proxy(
                renames["protected_branch_pull_request_review"]
            ).optional(),
            "restrictions": t.proxy(renames["branch_restriction_policy"]).optional(),
            "required_linear_history": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
            "allow_force_pushes": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
            "allow_deletions": t.struct({"enabled": t.boolean().optional()}).optional(),
            "block_creations": t.struct({"enabled": t.boolean().optional()}).optional(),
            "required_conversation_resolution": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
            "name": t.string().optional(),
            "protection_url": t.string().optional(),
            "required_signatures": t.struct(
                {"url": t.string(), "enabled": t.boolean()}
            ).optional(),
            "lock_branch": t.struct({"enabled": t.boolean().optional()}).optional(),
            "allow_fork_syncing": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
        }
    ).named(renames["branch_protection"])
    types["short_branch"] = t.struct(
        {
            "name": t.string(),
            "commit": t.struct({"sha": t.string(), "url": t.string()}),
            "protected": t.boolean(),
            "protection": t.proxy(renames["branch_protection"]).optional(),
            "protection_url": t.string().optional(),
        }
    ).named(renames["short_branch"])
    types["nullable_git_user"] = (
        t.struct(
            {
                "name": t.string().optional(),
                "email": t.string().optional(),
                "date": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_git_user"])
    )
    types["verification"] = t.struct(
        {
            "verified": t.boolean(),
            "reason": t.string(),
            "payload": t.string().optional(),
            "signature": t.string().optional(),
        }
    ).named(renames["verification"])
    types["diff_entry"] = t.struct(
        {
            "sha": t.string(),
            "filename": t.string(),
            "status": t.string(),
            "additions": t.integer(),
            "deletions": t.integer(),
            "changes": t.integer(),
            "blob_url": t.string(),
            "raw_url": t.string(),
            "contents_url": t.string(),
            "patch": t.string().optional(),
            "previous_filename": t.string().optional(),
        }
    ).named(renames["diff_entry"])
    types["commit"] = t.struct(
        {
            "url": t.string(),
            "sha": t.string(),
            "node_id": t.string(),
            "html_url": t.string(),
            "comments_url": t.string(),
            "commit": t.struct(
                {
                    "url": t.string(),
                    "author": t.proxy(renames["nullable_git_user"]),
                    "committer": t.proxy(renames["nullable_git_user"]),
                    "message": t.string(),
                    "comment_count": t.integer(),
                    "tree": t.struct({"sha": t.string(), "url": t.string()}),
                    "verification": t.proxy(renames["verification"]).optional(),
                }
            ),
            "author": t.proxy(renames["nullable_simple_user"]),
            "committer": t.proxy(renames["nullable_simple_user"]),
            "parents": t.array(
                t.struct(
                    {
                        "sha": t.string(),
                        "url": t.string(),
                        "html_url": t.string().optional(),
                    }
                )
            ),
            "stats": t.struct(
                {
                    "additions": t.integer().optional(),
                    "deletions": t.integer().optional(),
                    "total": t.integer().optional(),
                }
            ).optional(),
            "files": t.array(t.proxy(renames["diff_entry"])).optional(),
        }
    ).named(renames["commit"])
    types["branch_with_protection"] = t.struct(
        {
            "name": t.string(),
            "commit": t.proxy(renames["commit"]),
            "_links": t.struct({"html": t.string(), "self": t.string()}),
            "protected": t.boolean(),
            "protection": t.proxy(renames["branch_protection"]),
            "protection_url": t.string(),
            "pattern": t.string().optional(),
            "required_approving_review_count": t.integer().optional(),
        }
    ).named(renames["branch_with_protection"])
    types["status_check_policy"] = t.struct(
        {
            "url": t.string(),
            "strict": t.boolean(),
            "contexts": t.array(t.string()),
            "checks": t.array(
                t.struct({"context": t.string(), "app_id": t.integer().optional()})
            ),
            "contexts_url": t.string(),
        }
    ).named(renames["status_check_policy"])
    types["protected_branch"] = t.struct(
        {
            "url": t.string(),
            "required_status_checks": t.proxy(
                renames["status_check_policy"]
            ).optional(),
            "required_pull_request_reviews": t.struct(
                {
                    "url": t.string(),
                    "dismiss_stale_reviews": t.boolean().optional(),
                    "require_code_owner_reviews": t.boolean().optional(),
                    "required_approving_review_count": t.integer().optional(),
                    "require_last_push_approval": t.boolean().optional(),
                    "dismissal_restrictions": t.struct(
                        {
                            "url": t.string(),
                            "users_url": t.string(),
                            "teams_url": t.string(),
                            "users": t.array(t.proxy(renames["simple_user"])),
                            "teams": t.array(t.proxy(renames["team"])),
                            "apps": t.array(t.proxy(renames["integration"])).optional(),
                        }
                    ).optional(),
                    "bypass_pull_request_allowances": t.struct(
                        {
                            "users": t.array(t.proxy(renames["simple_user"])),
                            "teams": t.array(t.proxy(renames["team"])),
                            "apps": t.array(t.proxy(renames["integration"])).optional(),
                        }
                    ).optional(),
                }
            ).optional(),
            "required_signatures": t.struct(
                {"url": t.string(), "enabled": t.boolean()}
            ).optional(),
            "enforce_admins": t.struct(
                {"url": t.string(), "enabled": t.boolean()}
            ).optional(),
            "required_linear_history": t.struct({"enabled": t.boolean()}).optional(),
            "allow_force_pushes": t.struct({"enabled": t.boolean()}).optional(),
            "allow_deletions": t.struct({"enabled": t.boolean()}).optional(),
            "restrictions": t.proxy(renames["branch_restriction_policy"]).optional(),
            "required_conversation_resolution": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
            "block_creations": t.struct({"enabled": t.boolean()}).optional(),
            "lock_branch": t.struct({"enabled": t.boolean().optional()}).optional(),
            "allow_fork_syncing": t.struct(
                {"enabled": t.boolean().optional()}
            ).optional(),
        }
    ).named(renames["protected_branch"])
    types["deployment_simple"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "task": t.string(),
            "original_environment": t.string().optional(),
            "environment": t.string(),
            "description": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "statuses_url": t.string(),
            "repository_url": t.string(),
            "transient_environment": t.boolean().optional(),
            "production_environment": t.boolean().optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
        }
    ).named(renames["deployment_simple"])
    types["check_run"] = t.struct(
        {
            "id": t.integer(),
            "head_sha": t.string(),
            "node_id": t.string(),
            "external_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string().optional(),
            "details_url": t.string().optional(),
            "status": t.string(),
            "conclusion": t.string().optional(),
            "started_at": t.string().optional(),
            "completed_at": t.string().optional(),
            "output": t.struct(
                {
                    "title": t.string().optional(),
                    "summary": t.string().optional(),
                    "text": t.string().optional(),
                    "annotations_count": t.integer(),
                    "annotations_url": t.string(),
                }
            ),
            "name": t.string(),
            "check_suite": t.struct({"id": t.integer()}).optional(),
            "app": t.proxy(renames["nullable_integration"]),
            "pull_requests": t.array(t.proxy(renames["pull_request_minimal"])),
            "deployment": t.proxy(renames["deployment_simple"]).optional(),
        }
    ).named(renames["check_run"])
    types["check_annotation"] = t.struct(
        {
            "path": t.string(),
            "start_line": t.integer(),
            "end_line": t.integer(),
            "start_column": t.integer().optional(),
            "end_column": t.integer().optional(),
            "annotation_level": t.string().optional(),
            "title": t.string().optional(),
            "message": t.string().optional(),
            "raw_details": t.string().optional(),
            "blob_href": t.string(),
        }
    ).named(renames["check_annotation"])
    types["simple_commit"] = t.struct(
        {
            "id": t.string(),
            "tree_id": t.string(),
            "message": t.string(),
            "timestamp": t.string(),
            "author": t.struct({"name": t.string(), "email": t.string()}).optional(),
            "committer": t.struct({"name": t.string(), "email": t.string()}).optional(),
        }
    ).named(renames["simple_commit"])
    types["check_suite"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "head_branch": t.string().optional(),
            "head_sha": t.string(),
            "status": t.string().optional(),
            "conclusion": t.string().optional(),
            "url": t.string().optional(),
            "before": t.string().optional(),
            "after": t.string().optional(),
            "pull_requests": t.array(
                t.proxy(renames["pull_request_minimal"])
            ).optional(),
            "app": t.proxy(renames["nullable_integration"]),
            "repository": t.proxy(renames["minimal_repository"]),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "head_commit": t.proxy(renames["simple_commit"]),
            "latest_check_runs_count": t.integer(),
            "check_runs_url": t.string(),
            "rerequestable": t.boolean().optional(),
            "runs_rerequestable": t.boolean().optional(),
        }
    ).named(renames["check_suite"])
    types["check_suite_preference"] = t.struct(
        {
            "preferences": t.struct(
                {
                    "auto_trigger_checks": t.array(
                        t.struct({"app_id": t.integer(), "setting": t.boolean()})
                    ).optional()
                }
            ),
            "repository": t.proxy(renames["minimal_repository"]),
        }
    ).named(renames["check_suite_preference"])
    types["code_scanning_alert_rule_summary"] = t.struct(
        {
            "id": t.string().optional(),
            "name": t.string().optional(),
            "tags": t.array(t.string()).optional(),
            "severity": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["code_scanning_alert_rule_summary"])
    types["code_scanning_alert_items"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]),
            "created_at": t.proxy(renames["alert_created_at"]),
            "updated_at": t.proxy(renames["alert_updated_at"]).optional(),
            "url": t.proxy(renames["alert_url"]),
            "html_url": t.proxy(renames["alert_html_url"]),
            "instances_url": t.proxy(renames["alert_instances_url"]),
            "state": t.proxy(renames["code_scanning_alert_state"]),
            "fixed_at": t.proxy(renames["alert_fixed_at"]).optional(),
            "dismissed_by": t.proxy(renames["nullable_simple_user"]),
            "dismissed_at": t.proxy(renames["alert_dismissed_at"]),
            "dismissed_reason": t.proxy(
                renames["code_scanning_alert_dismissed_reason"]
            ),
            "dismissed_comment": t.proxy(
                renames["code_scanning_alert_dismissed_comment"]
            ).optional(),
            "rule": t.proxy(renames["code_scanning_alert_rule_summary"]),
            "tool": t.proxy(renames["code_scanning_analysis_tool"]),
            "most_recent_instance": t.proxy(renames["code_scanning_alert_instance"]),
        }
    ).named(renames["code_scanning_alert_items"])
    types["code_scanning_alert"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]),
            "created_at": t.proxy(renames["alert_created_at"]),
            "updated_at": t.proxy(renames["alert_updated_at"]).optional(),
            "url": t.proxy(renames["alert_url"]),
            "html_url": t.proxy(renames["alert_html_url"]),
            "instances_url": t.proxy(renames["alert_instances_url"]),
            "state": t.proxy(renames["code_scanning_alert_state"]),
            "fixed_at": t.proxy(renames["alert_fixed_at"]).optional(),
            "dismissed_by": t.proxy(renames["nullable_simple_user"]),
            "dismissed_at": t.proxy(renames["alert_dismissed_at"]),
            "dismissed_reason": t.proxy(
                renames["code_scanning_alert_dismissed_reason"]
            ),
            "dismissed_comment": t.proxy(
                renames["code_scanning_alert_dismissed_comment"]
            ).optional(),
            "rule": t.proxy(renames["code_scanning_alert_rule"]),
            "tool": t.proxy(renames["code_scanning_analysis_tool"]),
            "most_recent_instance": t.proxy(renames["code_scanning_alert_instance"]),
        }
    ).named(renames["code_scanning_alert"])
    types["code_scanning_alert_set_state"] = t.string().named(
        renames["code_scanning_alert_set_state"]
    )
    types["code_scanning_analysis_sarif_id"] = t.string().named(
        renames["code_scanning_analysis_sarif_id"]
    )
    types["code_scanning_analysis_commit_sha"] = t.string().named(
        renames["code_scanning_analysis_commit_sha"]
    )
    types["code_scanning_analysis_environment"] = t.string().named(
        renames["code_scanning_analysis_environment"]
    )
    types["code_scanning_analysis_created_at"] = t.string().named(
        renames["code_scanning_analysis_created_at"]
    )
    types["code_scanning_analysis_url"] = t.string().named(
        renames["code_scanning_analysis_url"]
    )
    types["code_scanning_analysis"] = t.struct(
        {
            "ref": t.proxy(renames["code_scanning_ref"]),
            "commit_sha": t.proxy(renames["code_scanning_analysis_commit_sha"]),
            "analysis_key": t.proxy(renames["code_scanning_analysis_analysis_key"]),
            "environment": t.proxy(renames["code_scanning_analysis_environment"]),
            "category": t.proxy(renames["code_scanning_analysis_category"]).optional(),
            "error": t.string(),
            "created_at": t.proxy(renames["code_scanning_analysis_created_at"]),
            "results_count": t.integer(),
            "rules_count": t.integer(),
            "id": t.integer(),
            "url": t.proxy(renames["code_scanning_analysis_url"]),
            "sarif_id": t.proxy(renames["code_scanning_analysis_sarif_id"]),
            "tool": t.proxy(renames["code_scanning_analysis_tool"]),
            "deletable": t.boolean(),
            "warning": t.string(),
        }
    ).named(renames["code_scanning_analysis"])
    types["code_scanning_analysis_deletion"] = t.struct(
        {
            "next_analysis_url": t.string().optional(),
            "confirm_delete_url": t.string().optional(),
        }
    ).named(renames["code_scanning_analysis_deletion"])
    types["code_scanning_codeql_database"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "language": t.string(),
            "uploader": t.proxy(renames["simple_user"]),
            "content_type": t.string(),
            "size": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "url": t.string(),
        }
    ).named(renames["code_scanning_codeql_database"])
    types["code_scanning_default_setup"] = t.struct(
        {
            "state": t.string().optional(),
            "languages": t.array(t.string()).optional(),
            "query_suite": t.string().optional(),
            "updated_at": t.string().optional(),
        }
    ).named(renames["code_scanning_default_setup"])
    types["code_scanning_default_setup_update"] = t.struct(
        {"state": t.string(), "query_suite": t.string().optional()}
    ).named(renames["code_scanning_default_setup_update"])
    types["code_scanning_default_setup_update_response"] = t.struct(
        {"run_id": t.integer().optional(), "run_url": t.string().optional()}
    ).named(renames["code_scanning_default_setup_update_response"])
    types["code_scanning_analysis_sarif_file"] = t.string().named(
        renames["code_scanning_analysis_sarif_file"]
    )
    types["code_scanning_sarifs_receipt"] = t.struct(
        {
            "id": t.proxy(renames["code_scanning_analysis_sarif_id"]).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["code_scanning_sarifs_receipt"])
    types["code_scanning_sarifs_status"] = t.struct(
        {
            "processing_status": t.string().optional(),
            "analyses_url": t.string().optional(),
            "errors": t.array(t.string()).optional(),
        }
    ).named(renames["code_scanning_sarifs_status"])
    types["codeowners_errors"] = t.struct(
        {
            "errors": t.array(
                t.struct(
                    {
                        "line": t.integer(),
                        "column": t.integer(),
                        "source": t.string().optional(),
                        "kind": t.string(),
                        "suggestion": t.string().optional(),
                        "message": t.string(),
                        "path": t.string(),
                    }
                )
            )
        }
    ).named(renames["codeowners_errors"])
    types["codespace_machine"] = t.struct(
        {
            "name": t.string(),
            "display_name": t.string(),
            "operating_system": t.string(),
            "storage_in_bytes": t.integer(),
            "memory_in_bytes": t.integer(),
            "cpus": t.integer(),
            "prebuild_availability": t.string().optional(),
        }
    ).named(renames["codespace_machine"])
    types["repo_codespaces_secret"] = t.struct(
        {"name": t.string(), "created_at": t.string(), "updated_at": t.string()}
    ).named(renames["repo_codespaces_secret"])
    types["collaborator"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "node_id": t.string(),
            "avatar_url": t.string(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "followers_url": t.string(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "starred_url": t.string(),
            "subscriptions_url": t.string(),
            "organizations_url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "received_events_url": t.string(),
            "type": t.string(),
            "site_admin": t.boolean(),
            "permissions": t.struct(
                {
                    "pull": t.boolean(),
                    "triage": t.boolean().optional(),
                    "push": t.boolean(),
                    "maintain": t.boolean().optional(),
                    "admin": t.boolean(),
                }
            ).optional(),
            "role_name": t.string(),
        }
    ).named(renames["collaborator"])
    types["repository_invitation"] = t.struct(
        {
            "id": t.integer(),
            "repository": t.proxy(renames["minimal_repository"]),
            "invitee": t.proxy(renames["nullable_simple_user"]),
            "inviter": t.proxy(renames["nullable_simple_user"]),
            "permissions": t.string(),
            "created_at": t.string(),
            "expired": t.boolean().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "node_id": t.string(),
        }
    ).named(renames["repository_invitation"])
    types["nullable_collaborator"] = (
        t.struct(
            {
                "login": t.string(),
                "id": t.integer(),
                "email": t.string().optional(),
                "name": t.string().optional(),
                "node_id": t.string(),
                "avatar_url": t.string(),
                "gravatar_id": t.string().optional(),
                "url": t.string(),
                "html_url": t.string(),
                "followers_url": t.string(),
                "following_url": t.string(),
                "gists_url": t.string(),
                "starred_url": t.string(),
                "subscriptions_url": t.string(),
                "organizations_url": t.string(),
                "repos_url": t.string(),
                "events_url": t.string(),
                "received_events_url": t.string(),
                "type": t.string(),
                "site_admin": t.boolean(),
                "permissions": t.struct(
                    {
                        "pull": t.boolean(),
                        "triage": t.boolean().optional(),
                        "push": t.boolean(),
                        "maintain": t.boolean().optional(),
                        "admin": t.boolean(),
                    }
                ).optional(),
                "role_name": t.string(),
            }
        )
        .optional()
        .named(renames["nullable_collaborator"])
    )
    types["repository_collaborator_permission"] = t.struct(
        {
            "permission": t.string(),
            "role_name": t.string(),
            "user": t.proxy(renames["nullable_collaborator"]),
        }
    ).named(renames["repository_collaborator_permission"])
    types["commit_comment"] = t.struct(
        {
            "html_url": t.string(),
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "body": t.string(),
            "path": t.string().optional(),
            "position": t.integer().optional(),
            "line": t.integer().optional(),
            "commit_id": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "author_association": t.proxy(renames["author_association"]),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["commit_comment"])
    types["branch_short"] = t.struct(
        {
            "name": t.string(),
            "commit": t.struct({"sha": t.string(), "url": t.string()}),
            "protected": t.boolean(),
        }
    ).named(renames["branch_short"])
    types["link"] = t.struct({"href": t.string()}).named(renames["link"])
    types["auto_merge"] = (
        t.struct(
            {
                "enabled_by": t.proxy(renames["simple_user"]),
                "merge_method": t.string(),
                "commit_title": t.string(),
                "commit_message": t.string(),
            }
        )
        .optional()
        .named(renames["auto_merge"])
    )
    types["pull_request_simple"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "html_url": t.string(),
            "diff_url": t.string(),
            "patch_url": t.string(),
            "issue_url": t.string(),
            "commits_url": t.string(),
            "review_comments_url": t.string(),
            "review_comment_url": t.string(),
            "comments_url": t.string(),
            "statuses_url": t.string(),
            "number": t.integer(),
            "state": t.string(),
            "locked": t.boolean(),
            "title": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "body": t.string().optional(),
            "labels": t.array(
                t.struct(
                    {
                        "id": t.integer(),
                        "node_id": t.string(),
                        "url": t.string(),
                        "name": t.string(),
                        "description": t.string(),
                        "color": t.string(),
                        "default": t.boolean(),
                    }
                )
            ),
            "milestone": t.proxy(renames["nullable_milestone"]),
            "active_lock_reason": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "closed_at": t.string().optional(),
            "merged_at": t.string().optional(),
            "merge_commit_sha": t.string().optional(),
            "assignee": t.proxy(renames["nullable_simple_user"]),
            "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
            "requested_reviewers": t.array(t.proxy(renames["simple_user"])).optional(),
            "requested_teams": t.array(t.proxy(renames["team"])).optional(),
            "head": t.struct(
                {
                    "label": t.string(),
                    "ref": t.string(),
                    "repo": t.proxy(renames["repository"]),
                    "sha": t.string(),
                    "user": t.proxy(renames["nullable_simple_user"]),
                }
            ),
            "base": t.struct(
                {
                    "label": t.string(),
                    "ref": t.string(),
                    "repo": t.proxy(renames["repository"]),
                    "sha": t.string(),
                    "user": t.proxy(renames["nullable_simple_user"]),
                }
            ),
            "_links": t.struct(
                {
                    "comments": t.proxy(renames["link"]),
                    "commits": t.proxy(renames["link"]),
                    "statuses": t.proxy(renames["link"]),
                    "html": t.proxy(renames["link"]),
                    "issue": t.proxy(renames["link"]),
                    "review_comments": t.proxy(renames["link"]),
                    "review_comment": t.proxy(renames["link"]),
                    "self": t.proxy(renames["link"]),
                }
            ),
            "author_association": t.proxy(renames["author_association"]),
            "auto_merge": t.proxy(renames["auto_merge"]),
            "draft": t.boolean().optional(),
        }
    ).named(renames["pull_request_simple"])
    types["simple_commit_status"] = t.struct(
        {
            "description": t.string().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "state": t.string(),
            "context": t.string(),
            "target_url": t.string().optional(),
            "required": t.boolean().optional(),
            "avatar_url": t.string().optional(),
            "url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
        }
    ).named(renames["simple_commit_status"])
    types["combined_commit_status"] = t.struct(
        {
            "state": t.string(),
            "statuses": t.array(t.proxy(renames["simple_commit_status"])),
            "sha": t.string(),
            "total_count": t.integer(),
            "repository": t.proxy(renames["minimal_repository"]),
            "commit_url": t.string(),
            "url": t.string(),
        }
    ).named(renames["combined_commit_status"])
    types["status"] = t.struct(
        {
            "url": t.string(),
            "avatar_url": t.string().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "state": t.string(),
            "description": t.string().optional(),
            "target_url": t.string().optional(),
            "context": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "creator": t.proxy(renames["nullable_simple_user"]),
        }
    ).named(renames["status"])
    types["nullable_code_of_conduct_simple"] = (
        t.struct(
            {
                "url": t.string(),
                "key": t.string(),
                "name": t.string(),
                "html_url": t.string().optional(),
            }
        )
        .optional()
        .named(renames["nullable_code_of_conduct_simple"])
    )
    types["nullable_community_health_file"] = (
        t.struct({"url": t.string(), "html_url": t.string()})
        .optional()
        .named(renames["nullable_community_health_file"])
    )
    types["community_profile"] = t.struct(
        {
            "health_percentage": t.integer(),
            "description": t.string().optional(),
            "documentation": t.string().optional(),
            "files": t.struct(
                {
                    "code_of_conduct": t.proxy(
                        renames["nullable_code_of_conduct_simple"]
                    ),
                    "code_of_conduct_file": t.proxy(
                        renames["nullable_community_health_file"]
                    ),
                    "license": t.proxy(renames["nullable_license_simple"]),
                    "contributing": t.proxy(renames["nullable_community_health_file"]),
                    "readme": t.proxy(renames["nullable_community_health_file"]),
                    "issue_template": t.proxy(
                        renames["nullable_community_health_file"]
                    ),
                    "pull_request_template": t.proxy(
                        renames["nullable_community_health_file"]
                    ),
                }
            ),
            "updated_at": t.string().optional(),
            "content_reports_enabled": t.boolean().optional(),
        }
    ).named(renames["community_profile"])
    types["commit_comparison"] = t.struct(
        {
            "url": t.string(),
            "html_url": t.string(),
            "permalink_url": t.string(),
            "diff_url": t.string(),
            "patch_url": t.string(),
            "base_commit": t.proxy(renames["commit"]),
            "merge_base_commit": t.proxy(renames["commit"]),
            "status": t.string(),
            "ahead_by": t.integer(),
            "behind_by": t.integer(),
            "total_commits": t.integer(),
            "commits": t.array(t.proxy(renames["commit"])),
            "files": t.array(t.proxy(renames["diff_entry"])).optional(),
        }
    ).named(renames["commit_comparison"])
    types["content_tree"] = t.struct(
        {
            "type": t.string(),
            "size": t.integer(),
            "name": t.string(),
            "path": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "git_url": t.string().optional(),
            "html_url": t.string().optional(),
            "download_url": t.string().optional(),
            "entries": t.array(
                t.struct(
                    {
                        "type": t.string(),
                        "size": t.integer(),
                        "name": t.string(),
                        "path": t.string(),
                        "content": t.string().optional(),
                        "sha": t.string(),
                        "url": t.string(),
                        "git_url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "download_url": t.string().optional(),
                        "_links": t.struct(
                            {
                                "git": t.string().optional(),
                                "html": t.string().optional(),
                                "self": t.string(),
                            }
                        ),
                    }
                )
            ).optional(),
            "_links": t.struct(
                {
                    "git": t.string().optional(),
                    "html": t.string().optional(),
                    "self": t.string(),
                }
            ),
        }
    ).named(renames["content_tree"])
    types["content_directory"] = t.array(
        t.struct(
            {
                "type": t.string(),
                "size": t.integer(),
                "name": t.string(),
                "path": t.string(),
                "content": t.string().optional(),
                "sha": t.string(),
                "url": t.string(),
                "git_url": t.string().optional(),
                "html_url": t.string().optional(),
                "download_url": t.string().optional(),
                "_links": t.struct(
                    {
                        "git": t.string().optional(),
                        "html": t.string().optional(),
                        "self": t.string(),
                    }
                ),
            }
        )
    ).named(renames["content_directory"])
    types["content_file"] = t.struct(
        {
            "type": t.string(),
            "encoding": t.string(),
            "size": t.integer(),
            "name": t.string(),
            "path": t.string(),
            "content": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "git_url": t.string().optional(),
            "html_url": t.string().optional(),
            "download_url": t.string().optional(),
            "_links": t.struct(
                {
                    "git": t.string().optional(),
                    "html": t.string().optional(),
                    "self": t.string(),
                }
            ),
            "target": t.string().optional(),
            "submodule_git_url": t.string().optional(),
        }
    ).named(renames["content_file"])
    types["content_symlink"] = t.struct(
        {
            "type": t.string(),
            "target": t.string(),
            "size": t.integer(),
            "name": t.string(),
            "path": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "git_url": t.string().optional(),
            "html_url": t.string().optional(),
            "download_url": t.string().optional(),
            "_links": t.struct(
                {
                    "git": t.string().optional(),
                    "html": t.string().optional(),
                    "self": t.string(),
                }
            ),
        }
    ).named(renames["content_symlink"])
    types["content_submodule"] = t.struct(
        {
            "type": t.string(),
            "submodule_git_url": t.string(),
            "size": t.integer(),
            "name": t.string(),
            "path": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "git_url": t.string().optional(),
            "html_url": t.string().optional(),
            "download_url": t.string().optional(),
            "_links": t.struct(
                {
                    "git": t.string().optional(),
                    "html": t.string().optional(),
                    "self": t.string(),
                }
            ),
        }
    ).named(renames["content_submodule"])
    types["file_commit"] = t.struct(
        {
            "content": t.struct(
                {
                    "name": t.string().optional(),
                    "path": t.string().optional(),
                    "sha": t.string().optional(),
                    "size": t.integer().optional(),
                    "url": t.string().optional(),
                    "html_url": t.string().optional(),
                    "git_url": t.string().optional(),
                    "download_url": t.string().optional(),
                    "type": t.string().optional(),
                    "_links": t.struct(
                        {
                            "self": t.string().optional(),
                            "git": t.string().optional(),
                            "html": t.string().optional(),
                        }
                    ).optional(),
                }
            ).optional(),
            "commit": t.struct(
                {
                    "sha": t.string().optional(),
                    "node_id": t.string().optional(),
                    "url": t.string().optional(),
                    "html_url": t.string().optional(),
                    "author": t.struct(
                        {
                            "date": t.string().optional(),
                            "name": t.string().optional(),
                            "email": t.string().optional(),
                        }
                    ).optional(),
                    "committer": t.struct(
                        {
                            "date": t.string().optional(),
                            "name": t.string().optional(),
                            "email": t.string().optional(),
                        }
                    ).optional(),
                    "message": t.string().optional(),
                    "tree": t.struct(
                        {"url": t.string().optional(), "sha": t.string().optional()}
                    ).optional(),
                    "parents": t.array(
                        t.struct(
                            {
                                "url": t.string().optional(),
                                "html_url": t.string().optional(),
                                "sha": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "verification": t.struct(
                        {
                            "verified": t.boolean().optional(),
                            "reason": t.string().optional(),
                            "signature": t.string().optional(),
                            "payload": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
        }
    ).named(renames["file_commit"])
    types["contributor"] = t.struct(
        {
            "login": t.string().optional(),
            "id": t.integer().optional(),
            "node_id": t.string().optional(),
            "avatar_url": t.string().optional(),
            "gravatar_id": t.string().optional(),
            "url": t.string().optional(),
            "html_url": t.string().optional(),
            "followers_url": t.string().optional(),
            "following_url": t.string().optional(),
            "gists_url": t.string().optional(),
            "starred_url": t.string().optional(),
            "subscriptions_url": t.string().optional(),
            "organizations_url": t.string().optional(),
            "repos_url": t.string().optional(),
            "events_url": t.string().optional(),
            "received_events_url": t.string().optional(),
            "type": t.string(),
            "site_admin": t.boolean().optional(),
            "contributions": t.integer(),
            "email": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["contributor"])
    types["dependabot_alert"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]),
            "state": t.string(),
            "dependency": t.struct(
                {
                    "package": t.proxy(renames["dependabot_alert_package"]).optional(),
                    "manifest_path": t.string().optional(),
                    "scope": t.string().optional(),
                }
            ),
            "security_advisory": t.proxy(renames["dependabot_alert_security_advisory"]),
            "security_vulnerability": t.proxy(
                renames["dependabot_alert_security_vulnerability"]
            ),
            "url": t.proxy(renames["alert_url"]),
            "html_url": t.proxy(renames["alert_html_url"]),
            "created_at": t.proxy(renames["alert_created_at"]),
            "updated_at": t.proxy(renames["alert_updated_at"]),
            "dismissed_at": t.proxy(renames["alert_dismissed_at"]),
            "dismissed_by": t.proxy(renames["nullable_simple_user"]),
            "dismissed_reason": t.string().optional(),
            "dismissed_comment": t.string().optional(),
            "fixed_at": t.proxy(renames["alert_fixed_at"]),
            "auto_dismissed_at": t.proxy(renames["alert_auto_dismissed_at"]).optional(),
        }
    ).named(renames["dependabot_alert"])
    types["dependabot_secret"] = t.struct(
        {"name": t.string(), "created_at": t.string(), "updated_at": t.string()}
    ).named(renames["dependabot_secret"])
    types["dependency_graph_diff"] = t.array(
        t.struct(
            {
                "change_type": t.string(),
                "manifest": t.string(),
                "ecosystem": t.string(),
                "name": t.string(),
                "version": t.string(),
                "package_url": t.string().optional(),
                "license": t.string().optional(),
                "source_repository_url": t.string().optional(),
                "vulnerabilities": t.array(
                    t.struct(
                        {
                            "severity": t.string(),
                            "advisory_ghsa_id": t.string(),
                            "advisory_summary": t.string(),
                            "advisory_url": t.string(),
                        }
                    )
                ),
                "scope": t.string(),
            }
        )
    ).named(renames["dependency_graph_diff"])
    types["dependency_graph_spdx_sbom"] = t.struct(
        {
            "sbom": t.struct(
                {
                    "SPDXID": t.string(),
                    "spdxVersion": t.string(),
                    "creationInfo": t.struct(
                        {"created": t.string(), "creators": t.array(t.string())}
                    ),
                    "name": t.string(),
                    "dataLicense": t.string(),
                    "documentDescribes": t.array(t.string()),
                    "documentNamespace": t.string(),
                    "packages": t.array(
                        t.struct(
                            {
                                "SPDXID": t.string().optional(),
                                "name": t.string().optional(),
                                "versionInfo": t.string().optional(),
                                "downloadLocation": t.string().optional(),
                                "filesAnalyzed": t.boolean().optional(),
                                "licenseConcluded": t.string().optional(),
                                "licenseDeclared": t.string().optional(),
                                "supplier": t.string().optional(),
                                "externalRefs": t.array(
                                    t.struct(
                                        {
                                            "referenceCategory": t.string(),
                                            "referenceLocator": t.string(),
                                            "referenceType": t.string(),
                                        }
                                    )
                                ).optional(),
                            }
                        )
                    ),
                }
            )
        }
    ).named(renames["dependency_graph_spdx_sbom"])
    types["metadata"] = t.struct({}).named(renames["metadata"])
    types["dependency"] = t.struct(
        {
            "package_url": t.string().optional(),
            "metadata": t.proxy(renames["metadata"]).optional(),
            "relationship": t.string().optional(),
            "scope": t.string().optional(),
            "dependencies": t.array(t.string()).optional(),
        }
    ).named(renames["dependency"])
    types["manifest"] = t.struct(
        {
            "name": t.string(),
            "file": t.struct({"source_location": t.string().optional()}).optional(),
            "metadata": t.proxy(renames["metadata"]).optional(),
            "resolved": t.struct({}).optional(),
        }
    ).named(renames["manifest"])
    types["snapshot"] = t.struct(
        {
            "version": t.integer(),
            "job": t.struct(
                {
                    "id": t.string(),
                    "correlator": t.string(),
                    "html_url": t.string().optional(),
                }
            ),
            "sha": t.string(),
            "ref": t.string(),
            "detector": t.struct(
                {"name": t.string(), "version": t.string(), "url": t.string()}
            ),
            "metadata": t.proxy(renames["metadata"]).optional(),
            "manifests": t.struct({}).optional(),
            "scanned": t.string(),
        }
    ).named(renames["snapshot"])
    types["deployment_status"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "state": t.string(),
            "creator": t.proxy(renames["nullable_simple_user"]),
            "description": t.string(),
            "environment": t.string().optional(),
            "target_url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "deployment_url": t.string(),
            "repository_url": t.string(),
            "environment_url": t.string().optional(),
            "log_url": t.string().optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
        }
    ).named(renames["deployment_status"])
    types["wait_timer"] = t.integer().named(renames["wait_timer"])
    types["deployment_branch_policy_settings"] = (
        t.struct(
            {"protected_branches": t.boolean(), "custom_branch_policies": t.boolean()}
        )
        .optional()
        .named(renames["deployment_branch_policy_settings"])
    )
    types["environment"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "url": t.string(),
            "html_url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "protection_rules": t.array(
                t.union(
                    [
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "type": t.string(),
                                "wait_timer": t.proxy(renames["wait_timer"]).optional(),
                            }
                        ),
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "type": t.string(),
                                "reviewers": t.array(
                                    t.struct(
                                        {
                                            "type": t.proxy(
                                                renames["deployment_reviewer_type"]
                                            ).optional(),
                                            "reviewer": t.union(
                                                [
                                                    t.proxy(renames["simple_user"]),
                                                    t.proxy(renames["team"]),
                                                ]
                                            ).optional(),
                                        }
                                    )
                                ).optional(),
                            }
                        ),
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "type": t.string(),
                            }
                        ),
                    ]
                )
            ).optional(),
            "deployment_branch_policy": t.proxy(
                renames["deployment_branch_policy_settings"]
            ).optional(),
        }
    ).named(renames["environment"])
    types["deployment_branch_policy"] = t.struct(
        {
            "id": t.integer().optional(),
            "node_id": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["deployment_branch_policy"])
    types["deployment_branch_policy_name_pattern"] = t.struct(
        {"name": t.string()}
    ).named(renames["deployment_branch_policy_name_pattern"])
    types["custom_deployment_rule_app"] = t.struct(
        {
            "id": t.integer(),
            "slug": t.string(),
            "integration_url": t.string(),
            "node_id": t.string(),
        }
    ).named(renames["custom_deployment_rule_app"])
    types["deployment_protection_rule"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "enabled": t.boolean(),
            "app": t.proxy(renames["custom_deployment_rule_app"]),
        }
    ).named(renames["deployment_protection_rule"])
    types["short_blob"] = t.struct({"url": t.string(), "sha": t.string()}).named(
        renames["short_blob"]
    )
    types["blob"] = t.struct(
        {
            "content": t.string(),
            "encoding": t.string(),
            "url": t.string(),
            "sha": t.string(),
            "size": t.integer().optional(),
            "node_id": t.string(),
            "highlighted_content": t.string().optional(),
        }
    ).named(renames["blob"])
    types["git_commit"] = t.struct(
        {
            "sha": t.string(),
            "node_id": t.string(),
            "url": t.string(),
            "author": t.struct(
                {"date": t.string(), "email": t.string(), "name": t.string()}
            ),
            "committer": t.struct(
                {"date": t.string(), "email": t.string(), "name": t.string()}
            ),
            "message": t.string(),
            "tree": t.struct({"sha": t.string(), "url": t.string()}),
            "parents": t.array(
                t.struct({"sha": t.string(), "url": t.string(), "html_url": t.string()})
            ),
            "verification": t.struct(
                {
                    "verified": t.boolean(),
                    "reason": t.string(),
                    "signature": t.string().optional(),
                    "payload": t.string().optional(),
                }
            ),
            "html_url": t.string(),
        }
    ).named(renames["git_commit"])
    types["git_ref"] = t.struct(
        {
            "ref": t.string(),
            "node_id": t.string(),
            "url": t.string(),
            "object": t.struct(
                {"type": t.string(), "sha": t.string(), "url": t.string()}
            ),
        }
    ).named(renames["git_ref"])
    types["git_tag"] = t.struct(
        {
            "node_id": t.string(),
            "tag": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "message": t.string(),
            "tagger": t.struct(
                {"date": t.string(), "email": t.string(), "name": t.string()}
            ),
            "object": t.struct(
                {"sha": t.string(), "type": t.string(), "url": t.string()}
            ),
            "verification": t.proxy(renames["verification"]).optional(),
        }
    ).named(renames["git_tag"])
    types["git_tree"] = t.struct(
        {
            "sha": t.string(),
            "url": t.string(),
            "truncated": t.boolean(),
            "tree": t.array(
                t.struct(
                    {
                        "path": t.string().optional(),
                        "mode": t.string().optional(),
                        "type": t.string().optional(),
                        "sha": t.string().optional(),
                        "size": t.integer().optional(),
                        "url": t.string().optional(),
                    }
                )
            ),
        }
    ).named(renames["git_tree"])
    types["hook_response"] = t.struct(
        {
            "code": t.integer().optional(),
            "status": t.string().optional(),
            "message": t.string().optional(),
        }
    ).named(renames["hook_response"])
    types["hook"] = t.struct(
        {
            "type": t.string(),
            "id": t.integer(),
            "name": t.string(),
            "active": t.boolean(),
            "events": t.array(t.string()),
            "config": t.struct(
                {
                    "email": t.string().optional(),
                    "password": t.string().optional(),
                    "room": t.string().optional(),
                    "subdomain": t.string().optional(),
                    "url": t.proxy(renames["webhook_config_url"]).optional(),
                    "insecure_ssl": t.proxy(
                        renames["webhook_config_insecure_ssl"]
                    ).optional(),
                    "content_type": t.proxy(
                        renames["webhook_config_content_type"]
                    ).optional(),
                    "digest": t.string().optional(),
                    "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                    "token": t.string().optional(),
                }
            ),
            "updated_at": t.string(),
            "created_at": t.string(),
            "url": t.string(),
            "test_url": t.string(),
            "ping_url": t.string(),
            "deliveries_url": t.string().optional(),
            "last_response": t.proxy(renames["hook_response"]),
        }
    ).named(renames["hook"])
    types["ximport"] = t.struct(
        {
            "vcs": t.string().optional(),
            "use_lfs": t.boolean().optional(),
            "vcs_url": t.string(),
            "svc_root": t.string().optional(),
            "tfvc_project": t.string().optional(),
            "status": t.string(),
            "status_text": t.string().optional(),
            "failed_step": t.string().optional(),
            "error_message": t.string().optional(),
            "import_percent": t.integer().optional(),
            "commit_count": t.integer().optional(),
            "push_percent": t.integer().optional(),
            "has_large_files": t.boolean().optional(),
            "large_files_size": t.integer().optional(),
            "large_files_count": t.integer().optional(),
            "project_choices": t.array(
                t.struct(
                    {
                        "vcs": t.string().optional(),
                        "tfvc_project": t.string().optional(),
                        "human_name": t.string().optional(),
                    }
                )
            ).optional(),
            "message": t.string().optional(),
            "authors_count": t.integer().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "authors_url": t.string(),
            "repository_url": t.string(),
            "svn_root": t.string().optional(),
        }
    ).named(renames["ximport"])
    types["porter_author"] = t.struct(
        {
            "id": t.integer(),
            "remote_id": t.string(),
            "remote_name": t.string(),
            "email": t.string(),
            "name": t.string(),
            "url": t.string(),
            "import_url": t.string(),
        }
    ).named(renames["porter_author"])
    types["porter_large_file"] = t.struct(
        {
            "ref_name": t.string(),
            "path": t.string(),
            "oid": t.string(),
            "size": t.integer(),
        }
    ).named(renames["porter_large_file"])
    types["nullable_issue"] = (
        t.struct(
            {
                "id": t.integer(),
                "node_id": t.string(),
                "url": t.string(),
                "repository_url": t.string(),
                "labels_url": t.string(),
                "comments_url": t.string(),
                "events_url": t.string(),
                "html_url": t.string(),
                "number": t.integer(),
                "state": t.string(),
                "state_reason": t.string().optional(),
                "title": t.string(),
                "body": t.string().optional(),
                "user": t.proxy(renames["nullable_simple_user"]),
                "labels": t.array(
                    t.either(
                        [
                            t.string(),
                            t.struct(
                                {
                                    "id": t.integer().optional(),
                                    "node_id": t.string().optional(),
                                    "url": t.string().optional(),
                                    "name": t.string().optional(),
                                    "description": t.string().optional(),
                                    "color": t.string().optional(),
                                    "default": t.boolean().optional(),
                                }
                            ),
                        ]
                    )
                ),
                "assignee": t.proxy(renames["nullable_simple_user"]),
                "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                "milestone": t.proxy(renames["nullable_milestone"]),
                "locked": t.boolean(),
                "active_lock_reason": t.string().optional(),
                "comments": t.integer(),
                "pull_request": t.struct(
                    {
                        "merged_at": t.string().optional(),
                        "diff_url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "patch_url": t.string().optional(),
                        "url": t.string().optional(),
                    }
                ).optional(),
                "closed_at": t.string().optional(),
                "created_at": t.string(),
                "updated_at": t.string(),
                "draft": t.boolean().optional(),
                "closed_by": t.proxy(renames["nullable_simple_user"]).optional(),
                "body_html": t.string().optional(),
                "body_text": t.string().optional(),
                "timeline_url": t.string().optional(),
                "repository": t.proxy(renames["repository"]).optional(),
                "performed_via_github_app": t.proxy(
                    renames["nullable_integration"]
                ).optional(),
                "author_association": t.proxy(renames["author_association"]),
                "reactions": t.proxy(renames["reaction_rollup"]).optional(),
            }
        )
        .optional()
        .named(renames["nullable_issue"])
    )
    types["issue_event_label"] = t.struct(
        {"name": t.string().optional(), "color": t.string().optional()}
    ).named(renames["issue_event_label"])
    types["issue_event_dismissed_review"] = t.struct(
        {
            "state": t.string(),
            "review_id": t.integer(),
            "dismissal_message": t.string().optional(),
            "dismissal_commit_id": t.string().optional(),
        }
    ).named(renames["issue_event_dismissed_review"])
    types["issue_event_milestone"] = t.struct({"title": t.string()}).named(
        renames["issue_event_milestone"]
    )
    types["issue_event_project_card"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "project_url": t.string(),
            "project_id": t.integer(),
            "column_name": t.string(),
            "previous_column_name": t.string().optional(),
        }
    ).named(renames["issue_event_project_card"])
    types["issue_event_rename"] = t.struct(
        {"from": t.string(), "to": t.string()}
    ).named(renames["issue_event_rename"])
    types["issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["nullable_simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "issue": t.proxy(renames["nullable_issue"]).optional(),
            "label": t.proxy(renames["issue_event_label"]).optional(),
            "assignee": t.proxy(renames["nullable_simple_user"]).optional(),
            "assigner": t.proxy(renames["nullable_simple_user"]).optional(),
            "review_requester": t.proxy(renames["nullable_simple_user"]).optional(),
            "requested_reviewer": t.proxy(renames["nullable_simple_user"]).optional(),
            "requested_team": t.proxy(renames["team"]).optional(),
            "dismissed_review": t.proxy(
                renames["issue_event_dismissed_review"]
            ).optional(),
            "milestone": t.proxy(renames["issue_event_milestone"]).optional(),
            "project_card": t.proxy(renames["issue_event_project_card"]).optional(),
            "rename": t.proxy(renames["issue_event_rename"]).optional(),
            "author_association": t.proxy(renames["author_association"]).optional(),
            "lock_reason": t.string().optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
        }
    ).named(renames["issue_event"])
    types["labeled_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "label": t.struct({"name": t.string(), "color": t.string()}),
        }
    ).named(renames["labeled_issue_event"])
    types["unlabeled_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "label": t.struct({"name": t.string(), "color": t.string()}),
        }
    ).named(renames["unlabeled_issue_event"])
    types["assigned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["integration"]),
            "assignee": t.proxy(renames["simple_user"]),
            "assigner": t.proxy(renames["simple_user"]),
        }
    ).named(renames["assigned_issue_event"])
    types["unassigned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "assignee": t.proxy(renames["simple_user"]),
            "assigner": t.proxy(renames["simple_user"]),
        }
    ).named(renames["unassigned_issue_event"])
    types["milestoned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "milestone": t.struct({"title": t.string()}),
        }
    ).named(renames["milestoned_issue_event"])
    types["demilestoned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "milestone": t.struct({"title": t.string()}),
        }
    ).named(renames["demilestoned_issue_event"])
    types["renamed_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "rename": t.struct({"from": t.string(), "to": t.string()}),
        }
    ).named(renames["renamed_issue_event"])
    types["review_requested_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "review_requester": t.proxy(renames["simple_user"]),
            "requested_team": t.proxy(renames["team"]).optional(),
            "requested_reviewer": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["review_requested_issue_event"])
    types["review_request_removed_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "review_requester": t.proxy(renames["simple_user"]),
            "requested_team": t.proxy(renames["team"]).optional(),
            "requested_reviewer": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["review_request_removed_issue_event"])
    types["review_dismissed_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "dismissed_review": t.struct(
                {
                    "state": t.string(),
                    "review_id": t.integer(),
                    "dismissal_message": t.string().optional(),
                    "dismissal_commit_id": t.string().optional(),
                }
            ),
        }
    ).named(renames["review_dismissed_issue_event"])
    types["locked_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "lock_reason": t.string().optional(),
        }
    ).named(renames["locked_issue_event"])
    types["added_to_project_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "project_card": t.struct(
                {
                    "id": t.integer(),
                    "url": t.string(),
                    "project_id": t.integer(),
                    "project_url": t.string(),
                    "column_name": t.string(),
                    "previous_column_name": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["added_to_project_issue_event"])
    types["moved_column_in_project_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "project_card": t.struct(
                {
                    "id": t.integer(),
                    "url": t.string(),
                    "project_id": t.integer(),
                    "project_url": t.string(),
                    "column_name": t.string(),
                    "previous_column_name": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["moved_column_in_project_issue_event"])
    types["removed_from_project_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "project_card": t.struct(
                {
                    "id": t.integer(),
                    "url": t.string(),
                    "project_id": t.integer(),
                    "project_url": t.string(),
                    "column_name": t.string(),
                    "previous_column_name": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["removed_from_project_issue_event"])
    types["converted_note_to_issue_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["integration"]),
            "project_card": t.struct(
                {
                    "id": t.integer(),
                    "url": t.string(),
                    "project_id": t.integer(),
                    "project_url": t.string(),
                    "column_name": t.string(),
                    "previous_column_name": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["converted_note_to_issue_issue_event"])
    types["issue_event_for_issue"] = t.union(
        [
            t.proxy(renames["labeled_issue_event"]),
            t.proxy(renames["unlabeled_issue_event"]),
            t.proxy(renames["assigned_issue_event"]),
            t.proxy(renames["unassigned_issue_event"]),
            t.proxy(renames["milestoned_issue_event"]),
            t.proxy(renames["demilestoned_issue_event"]),
            t.proxy(renames["renamed_issue_event"]),
            t.proxy(renames["review_requested_issue_event"]),
            t.proxy(renames["review_request_removed_issue_event"]),
            t.proxy(renames["review_dismissed_issue_event"]),
            t.proxy(renames["locked_issue_event"]),
            t.proxy(renames["added_to_project_issue_event"]),
            t.proxy(renames["moved_column_in_project_issue_event"]),
            t.proxy(renames["removed_from_project_issue_event"]),
            t.proxy(renames["converted_note_to_issue_issue_event"]),
        ]
    ).named(renames["issue_event_for_issue"])
    types["label"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "name": t.string(),
            "description": t.string().optional(),
            "color": t.string(),
            "default": t.boolean(),
        }
    ).named(renames["label"])
    types["timeline_comment_event"] = t.struct(
        {
            "event": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "body": t.string().optional(),
            "body_text": t.string().optional(),
            "body_html": t.string().optional(),
            "html_url": t.string(),
            "user": t.proxy(renames["simple_user"]),
            "created_at": t.string(),
            "updated_at": t.string(),
            "issue_url": t.string(),
            "author_association": t.proxy(renames["author_association"]),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["timeline_comment_event"])
    types["timeline_cross_referenced_event"] = t.struct(
        {
            "event": t.string(),
            "actor": t.proxy(renames["simple_user"]).optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "source": t.struct(
                {
                    "type": t.string().optional(),
                    "issue": t.proxy(renames["issue"]).optional(),
                }
            ),
        }
    ).named(renames["timeline_cross_referenced_event"])
    types["timeline_committed_event"] = t.struct(
        {
            "event": t.string().optional(),
            "sha": t.string(),
            "node_id": t.string(),
            "url": t.string(),
            "author": t.struct(
                {"date": t.string(), "email": t.string(), "name": t.string()}
            ),
            "committer": t.struct(
                {"date": t.string(), "email": t.string(), "name": t.string()}
            ),
            "message": t.string(),
            "tree": t.struct({"sha": t.string(), "url": t.string()}),
            "parents": t.array(
                t.struct({"sha": t.string(), "url": t.string(), "html_url": t.string()})
            ),
            "verification": t.struct(
                {
                    "verified": t.boolean(),
                    "reason": t.string(),
                    "signature": t.string().optional(),
                    "payload": t.string().optional(),
                }
            ),
            "html_url": t.string(),
        }
    ).named(renames["timeline_committed_event"])
    types["timeline_reviewed_event"] = t.struct(
        {
            "event": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "user": t.proxy(renames["simple_user"]),
            "body": t.string().optional(),
            "state": t.string(),
            "html_url": t.string(),
            "pull_request_url": t.string(),
            "_links": t.struct(
                {
                    "html": t.struct({"href": t.string()}),
                    "pull_request": t.struct({"href": t.string()}),
                }
            ),
            "submitted_at": t.string().optional(),
            "commit_id": t.string(),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
            "author_association": t.proxy(renames["author_association"]),
        }
    ).named(renames["timeline_reviewed_event"])
    types["pull_request_review_comment"] = t.struct(
        {
            "url": t.string(),
            "pull_request_review_id": t.integer().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "diff_hunk": t.string(),
            "path": t.string(),
            "position": t.integer().optional(),
            "original_position": t.integer().optional(),
            "commit_id": t.string(),
            "original_commit_id": t.string(),
            "in_reply_to_id": t.integer().optional(),
            "user": t.proxy(renames["simple_user"]),
            "body": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "html_url": t.string(),
            "pull_request_url": t.string(),
            "author_association": t.proxy(renames["author_association"]),
            "_links": t.struct(
                {
                    "self": t.struct({"href": t.string()}),
                    "html": t.struct({"href": t.string()}),
                    "pull_request": t.struct({"href": t.string()}),
                }
            ),
            "start_line": t.integer().optional(),
            "original_start_line": t.integer().optional(),
            "start_side": t.string().optional(),
            "line": t.integer().optional(),
            "original_line": t.integer().optional(),
            "side": t.string().optional(),
            "subject_type": t.string().optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
        }
    ).named(renames["pull_request_review_comment"])
    types["timeline_line_commented_event"] = t.struct(
        {
            "event": t.string().optional(),
            "node_id": t.string().optional(),
            "comments": t.array(
                t.proxy(renames["pull_request_review_comment"])
            ).optional(),
        }
    ).named(renames["timeline_line_commented_event"])
    types["timeline_commit_commented_event"] = t.struct(
        {
            "event": t.string().optional(),
            "node_id": t.string().optional(),
            "commit_id": t.string().optional(),
            "comments": t.array(t.proxy(renames["commit_comment"])).optional(),
        }
    ).named(renames["timeline_commit_commented_event"])
    types["timeline_assigned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "assignee": t.proxy(renames["simple_user"]),
        }
    ).named(renames["timeline_assigned_issue_event"])
    types["timeline_unassigned_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "assignee": t.proxy(renames["simple_user"]),
        }
    ).named(renames["timeline_unassigned_issue_event"])
    types["state_change_issue_event"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "actor": t.proxy(renames["simple_user"]),
            "event": t.string(),
            "commit_id": t.string().optional(),
            "commit_url": t.string().optional(),
            "created_at": t.string(),
            "performed_via_github_app": t.proxy(renames["nullable_integration"]),
            "state_reason": t.string().optional(),
        }
    ).named(renames["state_change_issue_event"])
    types["timeline_issue_events"] = t.union(
        [
            t.proxy(renames["labeled_issue_event"]),
            t.proxy(renames["unlabeled_issue_event"]),
            t.proxy(renames["milestoned_issue_event"]),
            t.proxy(renames["demilestoned_issue_event"]),
            t.proxy(renames["renamed_issue_event"]),
            t.proxy(renames["review_requested_issue_event"]),
            t.proxy(renames["review_request_removed_issue_event"]),
            t.proxy(renames["review_dismissed_issue_event"]),
            t.proxy(renames["locked_issue_event"]),
            t.proxy(renames["added_to_project_issue_event"]),
            t.proxy(renames["moved_column_in_project_issue_event"]),
            t.proxy(renames["removed_from_project_issue_event"]),
            t.proxy(renames["converted_note_to_issue_issue_event"]),
            t.proxy(renames["timeline_comment_event"]),
            t.proxy(renames["timeline_cross_referenced_event"]),
            t.proxy(renames["timeline_committed_event"]),
            t.proxy(renames["timeline_reviewed_event"]),
            t.proxy(renames["timeline_line_commented_event"]),
            t.proxy(renames["timeline_commit_commented_event"]),
            t.proxy(renames["timeline_assigned_issue_event"]),
            t.proxy(renames["timeline_unassigned_issue_event"]),
            t.proxy(renames["state_change_issue_event"]),
        ]
    ).named(renames["timeline_issue_events"])
    types["deploy_key"] = t.struct(
        {
            "id": t.integer(),
            "key": t.string(),
            "url": t.string(),
            "title": t.string(),
            "verified": t.boolean(),
            "created_at": t.string(),
            "read_only": t.boolean(),
            "added_by": t.string().optional(),
            "last_used": t.string().optional(),
        }
    ).named(renames["deploy_key"])
    types["language"] = t.struct({}).named(renames["language"])
    types["license_content"] = t.struct(
        {
            "name": t.string(),
            "path": t.string(),
            "sha": t.string(),
            "size": t.integer(),
            "url": t.string(),
            "html_url": t.string().optional(),
            "git_url": t.string().optional(),
            "download_url": t.string().optional(),
            "type": t.string(),
            "content": t.string(),
            "encoding": t.string(),
            "_links": t.struct(
                {
                    "git": t.string().optional(),
                    "html": t.string().optional(),
                    "self": t.string(),
                }
            ),
            "license": t.proxy(renames["nullable_license_simple"]),
        }
    ).named(renames["license_content"])
    types["merged_upstream"] = t.struct(
        {
            "message": t.string().optional(),
            "merge_type": t.string().optional(),
            "base_branch": t.string().optional(),
        }
    ).named(renames["merged_upstream"])
    types["milestone"] = t.struct(
        {
            "url": t.string(),
            "html_url": t.string(),
            "labels_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "number": t.integer(),
            "state": t.string(),
            "title": t.string(),
            "description": t.string().optional(),
            "creator": t.proxy(renames["nullable_simple_user"]),
            "open_issues": t.integer(),
            "closed_issues": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "closed_at": t.string().optional(),
            "due_on": t.string().optional(),
        }
    ).named(renames["milestone"])
    types["pages_source_hash"] = t.struct(
        {"branch": t.string(), "path": t.string()}
    ).named(renames["pages_source_hash"])
    types["pages_https_certificate"] = t.struct(
        {
            "state": t.string(),
            "description": t.string(),
            "domains": t.array(t.string()),
            "expires_at": t.string().optional(),
        }
    ).named(renames["pages_https_certificate"])
    types["page"] = t.struct(
        {
            "url": t.string(),
            "status": t.string().optional(),
            "cname": t.string().optional(),
            "protected_domain_state": t.string().optional(),
            "pending_domain_unverified_at": t.string().optional(),
            "custom_404": t.boolean(),
            "html_url": t.string().optional(),
            "build_type": t.string().optional(),
            "source": t.proxy(renames["pages_source_hash"]).optional(),
            "public": t.boolean(),
            "https_certificate": t.proxy(renames["pages_https_certificate"]).optional(),
            "https_enforced": t.boolean().optional(),
        }
    ).named(renames["page"])
    types["page_build"] = t.struct(
        {
            "url": t.string(),
            "status": t.string(),
            "error": t.struct({"message": t.string().optional()}),
            "pusher": t.proxy(renames["nullable_simple_user"]),
            "commit": t.string(),
            "duration": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
        }
    ).named(renames["page_build"])
    types["page_build_status"] = t.struct(
        {"url": t.string(), "status": t.string()}
    ).named(renames["page_build_status"])
    types["page_deployment"] = t.struct(
        {
            "status_url": t.string(),
            "page_url": t.string(),
            "preview_url": t.string().optional(),
        }
    ).named(renames["page_deployment"])
    types["pages_health_check"] = t.struct(
        {
            "domain": t.struct(
                {
                    "host": t.string().optional(),
                    "uri": t.string().optional(),
                    "nameservers": t.string().optional(),
                    "dns_resolves": t.boolean().optional(),
                    "is_proxied": t.boolean().optional(),
                    "is_cloudflare_ip": t.boolean().optional(),
                    "is_fastly_ip": t.boolean().optional(),
                    "is_old_ip_address": t.boolean().optional(),
                    "is_a_record": t.boolean().optional(),
                    "has_cname_record": t.boolean().optional(),
                    "has_mx_records_present": t.boolean().optional(),
                    "is_valid_domain": t.boolean().optional(),
                    "is_apex_domain": t.boolean().optional(),
                    "should_be_a_record": t.boolean().optional(),
                    "is_cname_to_github_user_domain": t.boolean().optional(),
                    "is_cname_to_pages_dot_github_dot_com": t.boolean().optional(),
                    "is_cname_to_fastly": t.boolean().optional(),
                    "is_pointed_to_github_pages_ip": t.boolean().optional(),
                    "is_non_github_pages_ip_present": t.boolean().optional(),
                    "is_pages_domain": t.boolean().optional(),
                    "is_served_by_pages": t.boolean().optional(),
                    "is_valid": t.boolean().optional(),
                    "reason": t.string().optional(),
                    "responds_to_https": t.boolean().optional(),
                    "enforces_https": t.boolean().optional(),
                    "https_error": t.string().optional(),
                    "is_https_eligible": t.boolean().optional(),
                    "caa_error": t.string().optional(),
                }
            ).optional(),
            "alt_domain": t.struct(
                {
                    "host": t.string().optional(),
                    "uri": t.string().optional(),
                    "nameservers": t.string().optional(),
                    "dns_resolves": t.boolean().optional(),
                    "is_proxied": t.boolean().optional(),
                    "is_cloudflare_ip": t.boolean().optional(),
                    "is_fastly_ip": t.boolean().optional(),
                    "is_old_ip_address": t.boolean().optional(),
                    "is_a_record": t.boolean().optional(),
                    "has_cname_record": t.boolean().optional(),
                    "has_mx_records_present": t.boolean().optional(),
                    "is_valid_domain": t.boolean().optional(),
                    "is_apex_domain": t.boolean().optional(),
                    "should_be_a_record": t.boolean().optional(),
                    "is_cname_to_github_user_domain": t.boolean().optional(),
                    "is_cname_to_pages_dot_github_dot_com": t.boolean().optional(),
                    "is_cname_to_fastly": t.boolean().optional(),
                    "is_pointed_to_github_pages_ip": t.boolean().optional(),
                    "is_non_github_pages_ip_present": t.boolean().optional(),
                    "is_pages_domain": t.boolean().optional(),
                    "is_served_by_pages": t.boolean().optional(),
                    "is_valid": t.boolean().optional(),
                    "reason": t.string().optional(),
                    "responds_to_https": t.boolean().optional(),
                    "enforces_https": t.boolean().optional(),
                    "https_error": t.string().optional(),
                    "is_https_eligible": t.boolean().optional(),
                    "caa_error": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["pages_health_check"])
    types["pull_request"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "html_url": t.string(),
            "diff_url": t.string(),
            "patch_url": t.string(),
            "issue_url": t.string(),
            "commits_url": t.string(),
            "review_comments_url": t.string(),
            "review_comment_url": t.string(),
            "comments_url": t.string(),
            "statuses_url": t.string(),
            "number": t.integer(),
            "state": t.string(),
            "locked": t.boolean(),
            "title": t.string(),
            "user": t.proxy(renames["simple_user"]),
            "body": t.string().optional(),
            "labels": t.array(
                t.struct(
                    {
                        "id": t.integer(),
                        "node_id": t.string(),
                        "url": t.string(),
                        "name": t.string(),
                        "description": t.string().optional(),
                        "color": t.string(),
                        "default": t.boolean(),
                    }
                )
            ),
            "milestone": t.proxy(renames["nullable_milestone"]),
            "active_lock_reason": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "closed_at": t.string().optional(),
            "merged_at": t.string().optional(),
            "merge_commit_sha": t.string().optional(),
            "assignee": t.proxy(renames["nullable_simple_user"]),
            "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
            "requested_reviewers": t.array(t.proxy(renames["simple_user"])).optional(),
            "requested_teams": t.array(t.proxy(renames["team_simple"])).optional(),
            "head": t.struct(
                {
                    "label": t.string(),
                    "ref": t.string(),
                    "repo": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "node_id": t.string(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                            "clone_url": t.string(),
                            "default_branch": t.string(),
                            "forks": t.integer(),
                            "forks_count": t.integer(),
                            "git_url": t.string(),
                            "has_downloads": t.boolean(),
                            "has_issues": t.boolean(),
                            "has_projects": t.boolean(),
                            "has_wiki": t.boolean(),
                            "has_pages": t.boolean(),
                            "has_discussions": t.boolean(),
                            "homepage": t.string().optional(),
                            "language": t.string().optional(),
                            "master_branch": t.string().optional(),
                            "archived": t.boolean(),
                            "disabled": t.boolean(),
                            "visibility": t.string().optional(),
                            "mirror_url": t.string().optional(),
                            "open_issues": t.integer(),
                            "open_issues_count": t.integer(),
                            "permissions": t.struct(
                                {
                                    "admin": t.boolean(),
                                    "maintain": t.boolean().optional(),
                                    "push": t.boolean(),
                                    "triage": t.boolean().optional(),
                                    "pull": t.boolean(),
                                }
                            ).optional(),
                            "temp_clone_token": t.string().optional(),
                            "allow_merge_commit": t.boolean().optional(),
                            "allow_squash_merge": t.boolean().optional(),
                            "allow_rebase_merge": t.boolean().optional(),
                            "license": t.struct(
                                {
                                    "key": t.string(),
                                    "name": t.string(),
                                    "url": t.string().optional(),
                                    "spdx_id": t.string().optional(),
                                    "node_id": t.string(),
                                }
                            ).optional(),
                            "pushed_at": t.string(),
                            "size": t.integer(),
                            "ssh_url": t.string(),
                            "stargazers_count": t.integer(),
                            "svn_url": t.string(),
                            "topics": t.array(t.string()).optional(),
                            "watchers": t.integer(),
                            "watchers_count": t.integer(),
                            "created_at": t.string(),
                            "updated_at": t.string(),
                            "allow_forking": t.boolean().optional(),
                            "is_template": t.boolean().optional(),
                            "web_commit_signoff_required": t.boolean().optional(),
                        }
                    ).optional(),
                    "sha": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string(),
                            "events_url": t.string(),
                            "followers_url": t.string(),
                            "following_url": t.string(),
                            "gists_url": t.string(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "node_id": t.string(),
                            "login": t.string(),
                            "organizations_url": t.string(),
                            "received_events_url": t.string(),
                            "repos_url": t.string(),
                            "site_admin": t.boolean(),
                            "starred_url": t.string(),
                            "subscriptions_url": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                        }
                    ),
                }
            ),
            "base": t.struct(
                {
                    "label": t.string(),
                    "ref": t.string(),
                    "repo": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "is_template": t.boolean().optional(),
                            "node_id": t.string(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                            "clone_url": t.string(),
                            "default_branch": t.string(),
                            "forks": t.integer(),
                            "forks_count": t.integer(),
                            "git_url": t.string(),
                            "has_downloads": t.boolean(),
                            "has_issues": t.boolean(),
                            "has_projects": t.boolean(),
                            "has_wiki": t.boolean(),
                            "has_pages": t.boolean(),
                            "has_discussions": t.boolean(),
                            "homepage": t.string().optional(),
                            "language": t.string().optional(),
                            "master_branch": t.string().optional(),
                            "archived": t.boolean(),
                            "disabled": t.boolean(),
                            "visibility": t.string().optional(),
                            "mirror_url": t.string().optional(),
                            "open_issues": t.integer(),
                            "open_issues_count": t.integer(),
                            "permissions": t.struct(
                                {
                                    "admin": t.boolean(),
                                    "maintain": t.boolean().optional(),
                                    "push": t.boolean(),
                                    "triage": t.boolean().optional(),
                                    "pull": t.boolean(),
                                }
                            ).optional(),
                            "temp_clone_token": t.string().optional(),
                            "allow_merge_commit": t.boolean().optional(),
                            "allow_squash_merge": t.boolean().optional(),
                            "allow_rebase_merge": t.boolean().optional(),
                            "license": t.proxy(renames["nullable_license_simple"]),
                            "pushed_at": t.string(),
                            "size": t.integer(),
                            "ssh_url": t.string(),
                            "stargazers_count": t.integer(),
                            "svn_url": t.string(),
                            "topics": t.array(t.string()).optional(),
                            "watchers": t.integer(),
                            "watchers_count": t.integer(),
                            "created_at": t.string(),
                            "updated_at": t.string(),
                            "allow_forking": t.boolean().optional(),
                            "web_commit_signoff_required": t.boolean().optional(),
                        }
                    ),
                    "sha": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string(),
                            "events_url": t.string(),
                            "followers_url": t.string(),
                            "following_url": t.string(),
                            "gists_url": t.string(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "node_id": t.string(),
                            "login": t.string(),
                            "organizations_url": t.string(),
                            "received_events_url": t.string(),
                            "repos_url": t.string(),
                            "site_admin": t.boolean(),
                            "starred_url": t.string(),
                            "subscriptions_url": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                        }
                    ),
                }
            ),
            "_links": t.struct(
                {
                    "comments": t.proxy(renames["link"]),
                    "commits": t.proxy(renames["link"]),
                    "statuses": t.proxy(renames["link"]),
                    "html": t.proxy(renames["link"]),
                    "issue": t.proxy(renames["link"]),
                    "review_comments": t.proxy(renames["link"]),
                    "review_comment": t.proxy(renames["link"]),
                    "self": t.proxy(renames["link"]),
                }
            ),
            "author_association": t.proxy(renames["author_association"]),
            "auto_merge": t.proxy(renames["auto_merge"]),
            "draft": t.boolean().optional(),
            "merged": t.boolean(),
            "mergeable": t.boolean().optional(),
            "rebaseable": t.boolean().optional(),
            "mergeable_state": t.string(),
            "merged_by": t.proxy(renames["nullable_simple_user"]),
            "comments": t.integer(),
            "review_comments": t.integer(),
            "maintainer_can_modify": t.boolean(),
            "commits": t.integer(),
            "additions": t.integer(),
            "deletions": t.integer(),
            "changed_files": t.integer(),
        }
    ).named(renames["pull_request"])
    types["pull_request_merge_result"] = t.struct(
        {"sha": t.string(), "merged": t.boolean(), "message": t.string()}
    ).named(renames["pull_request_merge_result"])
    types["pull_request_review_request"] = t.struct(
        {
            "users": t.array(t.proxy(renames["simple_user"])),
            "teams": t.array(t.proxy(renames["team"])),
        }
    ).named(renames["pull_request_review_request"])
    types["pull_request_review"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "body": t.string(),
            "state": t.string(),
            "html_url": t.string(),
            "pull_request_url": t.string(),
            "_links": t.struct(
                {
                    "html": t.struct({"href": t.string()}),
                    "pull_request": t.struct({"href": t.string()}),
                }
            ),
            "submitted_at": t.string().optional(),
            "commit_id": t.string().optional(),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
            "author_association": t.proxy(renames["author_association"]),
        }
    ).named(renames["pull_request_review"])
    types["review_comment"] = t.struct(
        {
            "url": t.string(),
            "pull_request_review_id": t.integer().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "diff_hunk": t.string(),
            "path": t.string(),
            "position": t.integer().optional(),
            "original_position": t.integer(),
            "commit_id": t.string(),
            "original_commit_id": t.string(),
            "in_reply_to_id": t.integer().optional(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "body": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "html_url": t.string(),
            "pull_request_url": t.string(),
            "author_association": t.proxy(renames["author_association"]),
            "_links": t.struct(
                {
                    "self": t.proxy(renames["link"]),
                    "html": t.proxy(renames["link"]),
                    "pull_request": t.proxy(renames["link"]),
                }
            ),
            "body_text": t.string().optional(),
            "body_html": t.string().optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
            "side": t.string().optional(),
            "start_side": t.string().optional(),
            "line": t.integer().optional(),
            "original_line": t.integer().optional(),
            "start_line": t.integer().optional(),
            "original_start_line": t.integer().optional(),
        }
    ).named(renames["review_comment"])
    types["release_asset"] = t.struct(
        {
            "url": t.string(),
            "browser_download_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "label": t.string().optional(),
            "state": t.string(),
            "content_type": t.string(),
            "size": t.integer(),
            "download_count": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "uploader": t.proxy(renames["nullable_simple_user"]),
        }
    ).named(renames["release_asset"])
    types["release"] = t.struct(
        {
            "url": t.string(),
            "html_url": t.string(),
            "assets_url": t.string(),
            "upload_url": t.string(),
            "tarball_url": t.string().optional(),
            "zipball_url": t.string().optional(),
            "id": t.integer(),
            "node_id": t.string(),
            "tag_name": t.string(),
            "target_commitish": t.string(),
            "name": t.string().optional(),
            "body": t.string().optional(),
            "draft": t.boolean(),
            "prerelease": t.boolean(),
            "created_at": t.string(),
            "published_at": t.string().optional(),
            "author": t.proxy(renames["simple_user"]),
            "assets": t.array(t.proxy(renames["release_asset"])),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
            "mentions_count": t.integer().optional(),
            "discussion_url": t.string().optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["release"])
    types["release_notes_content"] = t.struct(
        {"name": t.string(), "body": t.string()}
    ).named(renames["release_notes_content"])
    types["secret_scanning_alert"] = t.struct(
        {
            "number": t.proxy(renames["alert_number"]).optional(),
            "created_at": t.proxy(renames["alert_created_at"]).optional(),
            "updated_at": t.proxy(renames["nullable_alert_updated_at"]).optional(),
            "url": t.proxy(renames["alert_url"]).optional(),
            "html_url": t.proxy(renames["alert_html_url"]).optional(),
            "locations_url": t.string().optional(),
            "state": t.proxy(renames["secret_scanning_alert_state"]).optional(),
            "resolution": t.proxy(
                renames["secret_scanning_alert_resolution"]
            ).optional(),
            "resolved_at": t.string().optional(),
            "resolved_by": t.proxy(renames["nullable_simple_user"]).optional(),
            "resolution_comment": t.string().optional(),
            "secret_type": t.string().optional(),
            "secret_type_display_name": t.string().optional(),
            "secret": t.string().optional(),
            "push_protection_bypassed": t.boolean().optional(),
            "push_protection_bypassed_by": t.proxy(
                renames["nullable_simple_user"]
            ).optional(),
            "push_protection_bypassed_at": t.string().optional(),
        }
    ).named(renames["secret_scanning_alert"])
    types["secret_scanning_alert_resolution_comment"] = (
        t.string().optional().named(renames["secret_scanning_alert_resolution_comment"])
    )
    types["secret_scanning_location_commit"] = t.struct(
        {
            "path": t.string(),
            "start_line": t.number(),
            "end_line": t.number(),
            "start_column": t.number(),
            "end_column": t.number(),
            "blob_sha": t.string(),
            "blob_url": t.string(),
            "commit_sha": t.string(),
            "commit_url": t.string(),
        }
    ).named(renames["secret_scanning_location_commit"])
    types["secret_scanning_location_issue_title"] = t.struct(
        {"issue_title_url": t.string()}
    ).named(renames["secret_scanning_location_issue_title"])
    types["secret_scanning_location_issue_body"] = t.struct(
        {"issue_body_url": t.string()}
    ).named(renames["secret_scanning_location_issue_body"])
    types["secret_scanning_location_issue_comment"] = t.struct(
        {"issue_comment_url": t.string()}
    ).named(renames["secret_scanning_location_issue_comment"])
    types["secret_scanning_location"] = t.struct(
        {
            "type": t.string(),
            "details": t.either(
                [
                    t.proxy(renames["secret_scanning_location_commit"]),
                    t.proxy(renames["secret_scanning_location_issue_title"]),
                    t.proxy(renames["secret_scanning_location_issue_body"]),
                    t.proxy(renames["secret_scanning_location_issue_comment"]),
                ]
            ),
        }
    ).named(renames["secret_scanning_location"])
    types["security_advisory_ecosystems"] = t.string().named(
        renames["security_advisory_ecosystems"]
    )
    types["repository_advisory_vulnerability"] = t.struct(
        {
            "package": t.struct(
                {
                    "ecosystem": t.proxy(renames["security_advisory_ecosystems"]),
                    "name": t.string().optional(),
                }
            ).optional(),
            "vulnerable_version_range": t.string().optional(),
            "patched_versions": t.string().optional(),
            "vulnerable_functions": t.array(t.string()).optional(),
        }
    ).named(renames["repository_advisory_vulnerability"])
    types["security_advisory_credit_types"] = t.string().named(
        renames["security_advisory_credit_types"]
    )
    types["repository_advisory_credit"] = t.struct(
        {
            "user": t.proxy(renames["simple_user"]),
            "type": t.proxy(renames["security_advisory_credit_types"]),
            "state": t.string(),
        }
    ).named(renames["repository_advisory_credit"])
    types["repository_advisory"] = t.struct(
        {
            "ghsa_id": t.string(),
            "cve_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "summary": t.string(),
            "description": t.string().optional(),
            "severity": t.string().optional(),
            "author": t.struct(
                {
                    "name": t.string().optional(),
                    "email": t.string().optional(),
                    "login": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "avatar_url": t.string(),
                    "gravatar_id": t.string().optional(),
                    "url": t.string(),
                    "html_url": t.string(),
                    "followers_url": t.string(),
                    "following_url": t.string(),
                    "gists_url": t.string(),
                    "starred_url": t.string(),
                    "subscriptions_url": t.string(),
                    "organizations_url": t.string(),
                    "repos_url": t.string(),
                    "events_url": t.string(),
                    "received_events_url": t.string(),
                    "type": t.string(),
                    "site_admin": t.boolean(),
                    "starred_at": t.string().optional(),
                }
            ),
            "publisher": t.struct(
                {
                    "name": t.string().optional(),
                    "email": t.string().optional(),
                    "login": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "avatar_url": t.string(),
                    "gravatar_id": t.string().optional(),
                    "url": t.string(),
                    "html_url": t.string(),
                    "followers_url": t.string(),
                    "following_url": t.string(),
                    "gists_url": t.string(),
                    "starred_url": t.string(),
                    "subscriptions_url": t.string(),
                    "organizations_url": t.string(),
                    "repos_url": t.string(),
                    "events_url": t.string(),
                    "received_events_url": t.string(),
                    "type": t.string(),
                    "site_admin": t.boolean(),
                    "starred_at": t.string().optional(),
                }
            ),
            "identifiers": t.array(t.struct({"type": t.string(), "value": t.string()})),
            "state": t.string(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "published_at": t.string().optional(),
            "closed_at": t.string().optional(),
            "withdrawn_at": t.string().optional(),
            "submission": t.struct({"accepted": t.boolean()}).optional(),
            "vulnerabilities": t.array(
                t.proxy(renames["repository_advisory_vulnerability"])
            ).optional(),
            "cvss": t.struct(
                {"vector_string": t.string().optional(), "score": t.number().optional()}
            ).optional(),
            "cwes": t.array(
                t.struct({"cwe_id": t.string(), "name": t.string()})
            ).optional(),
            "cwe_ids": t.array(t.string()).optional(),
            "credits": t.array(
                t.struct(
                    {
                        "login": t.string().optional(),
                        "type": t.proxy(
                            renames["security_advisory_credit_types"]
                        ).optional(),
                    }
                )
            ).optional(),
            "credits_detailed": t.array(
                t.proxy(renames["repository_advisory_credit"])
            ).optional(),
        }
    ).named(renames["repository_advisory"])
    types["repository_advisory_create"] = t.struct(
        {
            "summary": t.string(),
            "description": t.string(),
            "cve_id": t.string().optional(),
            "vulnerabilities": t.array(
                t.struct(
                    {
                        "package": t.struct(
                            {
                                "ecosystem": t.proxy(
                                    renames["security_advisory_ecosystems"]
                                ),
                                "name": t.string().optional(),
                            }
                        ),
                        "vulnerable_version_range": t.string().optional(),
                        "patched_versions": t.string().optional(),
                        "vulnerable_functions": t.array(t.string()).optional(),
                    }
                )
            ),
            "cwe_ids": t.array(t.string()).optional(),
            "credits": t.array(
                t.struct(
                    {
                        "login": t.string(),
                        "type": t.proxy(renames["security_advisory_credit_types"]),
                    }
                )
            ).optional(),
            "severity": t.string().optional(),
            "cvss_vector_string": t.string().optional(),
        }
    ).named(renames["repository_advisory_create"])
    types["private_vulnerability_report_create"] = t.struct(
        {
            "summary": t.string(),
            "description": t.string(),
            "vulnerabilities": t.array(
                t.struct(
                    {
                        "package": t.struct(
                            {
                                "ecosystem": t.proxy(
                                    renames["security_advisory_ecosystems"]
                                ),
                                "name": t.string().optional(),
                            }
                        ),
                        "vulnerable_version_range": t.string().optional(),
                        "patched_versions": t.string().optional(),
                        "vulnerable_functions": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "cwe_ids": t.array(t.string()).optional(),
            "severity": t.string().optional(),
            "cvss_vector_string": t.string().optional(),
        }
    ).named(renames["private_vulnerability_report_create"])
    types["repository_advisory_update"] = t.struct(
        {
            "summary": t.string().optional(),
            "description": t.string().optional(),
            "cve_id": t.string().optional(),
            "vulnerabilities": t.array(
                t.struct(
                    {
                        "package": t.struct(
                            {
                                "ecosystem": t.proxy(
                                    renames["security_advisory_ecosystems"]
                                ),
                                "name": t.string().optional(),
                            }
                        ),
                        "vulnerable_version_range": t.string().optional(),
                        "patched_versions": t.string().optional(),
                        "vulnerable_functions": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "cwe_ids": t.array(t.string()).optional(),
            "credits": t.array(
                t.struct(
                    {
                        "login": t.string(),
                        "type": t.proxy(renames["security_advisory_credit_types"]),
                    }
                )
            ).optional(),
            "severity": t.string().optional(),
            "cvss_vector_string": t.string().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["repository_advisory_update"])
    types["stargazer"] = t.struct(
        {"starred_at": t.string(), "user": t.proxy(renames["nullable_simple_user"])}
    ).named(renames["stargazer"])
    types["code_frequency_stat"] = t.array(t.integer()).named(
        renames["code_frequency_stat"]
    )
    types["commit_activity"] = t.struct(
        {"days": t.array(t.integer()), "total": t.integer(), "week": t.integer()}
    ).named(renames["commit_activity"])
    types["contributor_activity"] = t.struct(
        {
            "author": t.proxy(renames["nullable_simple_user"]),
            "total": t.integer(),
            "weeks": t.array(
                t.struct(
                    {
                        "w": t.integer().optional(),
                        "a": t.integer().optional(),
                        "d": t.integer().optional(),
                        "c": t.integer().optional(),
                    }
                )
            ),
        }
    ).named(renames["contributor_activity"])
    types["participation_stats"] = t.struct(
        {"all": t.array(t.integer()), "owner": t.array(t.integer())}
    ).named(renames["participation_stats"])
    types["repository_subscription"] = t.struct(
        {
            "subscribed": t.boolean(),
            "ignored": t.boolean(),
            "reason": t.string().optional(),
            "created_at": t.string(),
            "url": t.string(),
            "repository_url": t.string(),
        }
    ).named(renames["repository_subscription"])
    types["tag"] = t.struct(
        {
            "name": t.string(),
            "commit": t.struct({"sha": t.string(), "url": t.string()}),
            "zipball_url": t.string(),
            "tarball_url": t.string(),
            "node_id": t.string(),
        }
    ).named(renames["tag"])
    types["tag_protection"] = t.struct(
        {
            "id": t.integer().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "enabled": t.boolean().optional(),
            "pattern": t.string(),
        }
    ).named(renames["tag_protection"])
    types["topic"] = t.struct({"names": t.array(t.string())}).named(renames["topic"])
    types["traffic"] = t.struct(
        {"timestamp": t.string(), "uniques": t.integer(), "count": t.integer()}
    ).named(renames["traffic"])
    types["clone_traffic"] = t.struct(
        {
            "count": t.integer(),
            "uniques": t.integer(),
            "clones": t.array(t.proxy(renames["traffic"])),
        }
    ).named(renames["clone_traffic"])
    types["content_traffic"] = t.struct(
        {
            "path": t.string(),
            "title": t.string(),
            "count": t.integer(),
            "uniques": t.integer(),
        }
    ).named(renames["content_traffic"])
    types["referrer_traffic"] = t.struct(
        {"referrer": t.string(), "count": t.integer(), "uniques": t.integer()}
    ).named(renames["referrer_traffic"])
    types["view_traffic"] = t.struct(
        {
            "count": t.integer(),
            "uniques": t.integer(),
            "views": t.array(t.proxy(renames["traffic"])),
        }
    ).named(renames["view_traffic"])
    types["search_result_text_matches"] = t.array(
        t.struct(
            {
                "object_url": t.string().optional(),
                "object_type": t.string().optional(),
                "property": t.string().optional(),
                "fragment": t.string().optional(),
                "matches": t.array(
                    t.struct(
                        {
                            "text": t.string().optional(),
                            "indices": t.array(t.integer()).optional(),
                        }
                    )
                ).optional(),
            }
        )
    ).named(renames["search_result_text_matches"])
    types["code_search_result_item"] = t.struct(
        {
            "name": t.string(),
            "path": t.string(),
            "sha": t.string(),
            "url": t.string(),
            "git_url": t.string(),
            "html_url": t.string(),
            "repository": t.proxy(renames["minimal_repository"]),
            "score": t.number(),
            "file_size": t.integer().optional(),
            "language": t.string().optional(),
            "last_modified_at": t.string().optional(),
            "line_numbers": t.array(t.string()).optional(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
        }
    ).named(renames["code_search_result_item"])
    types["commit_search_result_item"] = t.struct(
        {
            "url": t.string(),
            "sha": t.string(),
            "html_url": t.string(),
            "comments_url": t.string(),
            "commit": t.struct(
                {
                    "author": t.struct(
                        {"name": t.string(), "email": t.string(), "date": t.string()}
                    ),
                    "committer": t.proxy(renames["nullable_git_user"]),
                    "comment_count": t.integer(),
                    "message": t.string(),
                    "tree": t.struct({"sha": t.string(), "url": t.string()}),
                    "url": t.string(),
                    "verification": t.proxy(renames["verification"]).optional(),
                }
            ),
            "author": t.proxy(renames["nullable_simple_user"]),
            "committer": t.proxy(renames["nullable_git_user"]),
            "parents": t.array(
                t.struct(
                    {
                        "url": t.string().optional(),
                        "html_url": t.string().optional(),
                        "sha": t.string().optional(),
                    }
                )
            ),
            "repository": t.proxy(renames["minimal_repository"]),
            "score": t.number(),
            "node_id": t.string(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
        }
    ).named(renames["commit_search_result_item"])
    types["issue_search_result_item"] = t.struct(
        {
            "url": t.string(),
            "repository_url": t.string(),
            "labels_url": t.string(),
            "comments_url": t.string(),
            "events_url": t.string(),
            "html_url": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "number": t.integer(),
            "title": t.string(),
            "locked": t.boolean(),
            "active_lock_reason": t.string().optional(),
            "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
            "user": t.proxy(renames["nullable_simple_user"]),
            "labels": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "node_id": t.string().optional(),
                        "url": t.string().optional(),
                        "name": t.string().optional(),
                        "color": t.string().optional(),
                        "default": t.boolean().optional(),
                        "description": t.string().optional(),
                    }
                )
            ),
            "state": t.string(),
            "state_reason": t.string().optional(),
            "assignee": t.proxy(renames["nullable_simple_user"]),
            "milestone": t.proxy(renames["nullable_milestone"]),
            "comments": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "closed_at": t.string().optional(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
            "pull_request": t.struct(
                {
                    "merged_at": t.string().optional(),
                    "diff_url": t.string().optional(),
                    "html_url": t.string().optional(),
                    "patch_url": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "body": t.string().optional(),
            "score": t.number(),
            "author_association": t.proxy(renames["author_association"]),
            "draft": t.boolean().optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "body_html": t.string().optional(),
            "body_text": t.string().optional(),
            "timeline_url": t.string().optional(),
            "performed_via_github_app": t.proxy(
                renames["nullable_integration"]
            ).optional(),
            "reactions": t.proxy(renames["reaction_rollup"]).optional(),
        }
    ).named(renames["issue_search_result_item"])
    types["label_search_result_item"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "url": t.string(),
            "name": t.string(),
            "color": t.string(),
            "default": t.boolean(),
            "description": t.string().optional(),
            "score": t.number(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
        }
    ).named(renames["label_search_result_item"])
    types["repo_search_result_item"] = t.struct(
        {
            "id": t.integer(),
            "node_id": t.string(),
            "name": t.string(),
            "full_name": t.string(),
            "owner": t.proxy(renames["nullable_simple_user"]),
            "private": t.boolean(),
            "html_url": t.string(),
            "description": t.string().optional(),
            "fork": t.boolean(),
            "url": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "pushed_at": t.string(),
            "homepage": t.string().optional(),
            "size": t.integer(),
            "stargazers_count": t.integer(),
            "watchers_count": t.integer(),
            "language": t.string().optional(),
            "forks_count": t.integer(),
            "open_issues_count": t.integer(),
            "master_branch": t.string().optional(),
            "default_branch": t.string(),
            "score": t.number(),
            "forks_url": t.string(),
            "keys_url": t.string(),
            "collaborators_url": t.string(),
            "teams_url": t.string(),
            "hooks_url": t.string(),
            "issue_events_url": t.string(),
            "events_url": t.string(),
            "assignees_url": t.string(),
            "branches_url": t.string(),
            "tags_url": t.string(),
            "blobs_url": t.string(),
            "git_tags_url": t.string(),
            "git_refs_url": t.string(),
            "trees_url": t.string(),
            "statuses_url": t.string(),
            "languages_url": t.string(),
            "stargazers_url": t.string(),
            "contributors_url": t.string(),
            "subscribers_url": t.string(),
            "subscription_url": t.string(),
            "commits_url": t.string(),
            "git_commits_url": t.string(),
            "comments_url": t.string(),
            "issue_comment_url": t.string(),
            "contents_url": t.string(),
            "compare_url": t.string(),
            "merges_url": t.string(),
            "archive_url": t.string(),
            "downloads_url": t.string(),
            "issues_url": t.string(),
            "pulls_url": t.string(),
            "milestones_url": t.string(),
            "notifications_url": t.string(),
            "labels_url": t.string(),
            "releases_url": t.string(),
            "deployments_url": t.string(),
            "git_url": t.string(),
            "ssh_url": t.string(),
            "clone_url": t.string(),
            "svn_url": t.string(),
            "forks": t.integer(),
            "open_issues": t.integer(),
            "watchers": t.integer(),
            "topics": t.array(t.string()).optional(),
            "mirror_url": t.string().optional(),
            "has_issues": t.boolean(),
            "has_projects": t.boolean(),
            "has_pages": t.boolean(),
            "has_wiki": t.boolean(),
            "has_downloads": t.boolean(),
            "has_discussions": t.boolean().optional(),
            "archived": t.boolean(),
            "disabled": t.boolean(),
            "visibility": t.string().optional(),
            "license": t.proxy(renames["nullable_license_simple"]),
            "permissions": t.struct(
                {
                    "admin": t.boolean(),
                    "maintain": t.boolean().optional(),
                    "push": t.boolean(),
                    "triage": t.boolean().optional(),
                    "pull": t.boolean(),
                }
            ).optional(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
            "temp_clone_token": t.string().optional(),
            "allow_merge_commit": t.boolean().optional(),
            "allow_squash_merge": t.boolean().optional(),
            "allow_rebase_merge": t.boolean().optional(),
            "allow_auto_merge": t.boolean().optional(),
            "delete_branch_on_merge": t.boolean().optional(),
            "allow_forking": t.boolean().optional(),
            "is_template": t.boolean().optional(),
            "web_commit_signoff_required": t.boolean().optional(),
        }
    ).named(renames["repo_search_result_item"])
    types["topic_search_result_item"] = t.struct(
        {
            "name": t.string(),
            "display_name": t.string().optional(),
            "short_description": t.string().optional(),
            "description": t.string().optional(),
            "created_by": t.string().optional(),
            "released": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "featured": t.boolean(),
            "curated": t.boolean(),
            "score": t.number(),
            "repository_count": t.integer().optional(),
            "logo_url": t.string().optional(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
            "related": t.array(
                t.struct(
                    {
                        "topic_relation": t.struct(
                            {
                                "id": t.integer().optional(),
                                "name": t.string().optional(),
                                "topic_id": t.integer().optional(),
                                "relation_type": t.string().optional(),
                            }
                        ).optional()
                    }
                )
            ).optional(),
            "aliases": t.array(
                t.struct(
                    {
                        "topic_relation": t.struct(
                            {
                                "id": t.integer().optional(),
                                "name": t.string().optional(),
                                "topic_id": t.integer().optional(),
                                "relation_type": t.string().optional(),
                            }
                        ).optional()
                    }
                )
            ).optional(),
        }
    ).named(renames["topic_search_result_item"])
    types["user_search_result_item"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "avatar_url": t.string(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "followers_url": t.string(),
            "subscriptions_url": t.string(),
            "organizations_url": t.string(),
            "repos_url": t.string(),
            "received_events_url": t.string(),
            "type": t.string(),
            "score": t.number(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "starred_url": t.string(),
            "events_url": t.string(),
            "public_repos": t.integer().optional(),
            "public_gists": t.integer().optional(),
            "followers": t.integer().optional(),
            "following": t.integer().optional(),
            "created_at": t.string().optional(),
            "updated_at": t.string().optional(),
            "name": t.string().optional(),
            "bio": t.string().optional(),
            "email": t.string().optional(),
            "location": t.string().optional(),
            "site_admin": t.boolean(),
            "hireable": t.boolean().optional(),
            "text_matches": t.proxy(renames["search_result_text_matches"]).optional(),
            "blog": t.string().optional(),
            "company": t.string().optional(),
            "suspended_at": t.string().optional(),
        }
    ).named(renames["user_search_result_item"])
    types["private_user"] = t.struct(
        {
            "login": t.string(),
            "id": t.integer(),
            "node_id": t.string(),
            "avatar_url": t.string(),
            "gravatar_id": t.string().optional(),
            "url": t.string(),
            "html_url": t.string(),
            "followers_url": t.string(),
            "following_url": t.string(),
            "gists_url": t.string(),
            "starred_url": t.string(),
            "subscriptions_url": t.string(),
            "organizations_url": t.string(),
            "repos_url": t.string(),
            "events_url": t.string(),
            "received_events_url": t.string(),
            "type": t.string(),
            "site_admin": t.boolean(),
            "name": t.string().optional(),
            "company": t.string().optional(),
            "blog": t.string().optional(),
            "location": t.string().optional(),
            "email": t.string().optional(),
            "hireable": t.boolean().optional(),
            "bio": t.string().optional(),
            "twitter_username": t.string().optional(),
            "public_repos": t.integer(),
            "public_gists": t.integer(),
            "followers": t.integer(),
            "following": t.integer(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "private_gists": t.integer(),
            "total_private_repos": t.integer(),
            "owned_private_repos": t.integer(),
            "disk_usage": t.integer(),
            "collaborators": t.integer(),
            "two_factor_authentication": t.boolean(),
            "plan": t.struct(
                {
                    "collaborators": t.integer(),
                    "name": t.string(),
                    "space": t.integer(),
                    "private_repos": t.integer(),
                }
            ).optional(),
            "suspended_at": t.string().optional(),
            "business_plus": t.boolean().optional(),
            "ldap_dn": t.string().optional(),
        }
    ).named(renames["private_user"])
    types["codespaces_secret"] = t.struct(
        {
            "name": t.string(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "visibility": t.string(),
            "selected_repositories_url": t.string(),
        }
    ).named(renames["codespaces_secret"])
    types["codespaces_user_public_key"] = t.struct(
        {"key_id": t.string(), "key": t.string()}
    ).named(renames["codespaces_user_public_key"])
    types["codespace_export_details"] = t.struct(
        {
            "state": t.string().optional(),
            "completed_at": t.string().optional(),
            "branch": t.string().optional(),
            "sha": t.string().optional(),
            "id": t.string().optional(),
            "export_url": t.string().optional(),
            "html_url": t.string().optional(),
        }
    ).named(renames["codespace_export_details"])
    types["codespace_with_full_repository"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string(),
            "display_name": t.string().optional(),
            "environment_id": t.string().optional(),
            "owner": t.proxy(renames["simple_user"]),
            "billable_owner": t.proxy(renames["simple_user"]),
            "repository": t.proxy(renames["full_repository"]),
            "machine": t.proxy(renames["nullable_codespace_machine"]),
            "devcontainer_path": t.string().optional(),
            "prebuild": t.boolean().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "last_used_at": t.string(),
            "state": t.string(),
            "url": t.string(),
            "git_status": t.struct(
                {
                    "ahead": t.integer().optional(),
                    "behind": t.integer().optional(),
                    "has_unpushed_changes": t.boolean().optional(),
                    "has_uncommitted_changes": t.boolean().optional(),
                    "ref": t.string().optional(),
                }
            ),
            "location": t.string(),
            "idle_timeout_minutes": t.integer().optional(),
            "web_url": t.string(),
            "machines_url": t.string(),
            "start_url": t.string(),
            "stop_url": t.string(),
            "publish_url": t.string().optional(),
            "pulls_url": t.string().optional(),
            "recent_folders": t.array(t.string()),
            "runtime_constraints": t.struct(
                {"allowed_port_privacy_settings": t.array(t.string()).optional()}
            ).optional(),
            "pending_operation": t.boolean().optional(),
            "pending_operation_disabled_reason": t.string().optional(),
            "idle_timeout_notice": t.string().optional(),
            "retention_period_minutes": t.integer().optional(),
            "retention_expires_at": t.string().optional(),
        }
    ).named(renames["codespace_with_full_repository"])
    types["email"] = t.struct(
        {
            "email": t.string(),
            "primary": t.boolean(),
            "verified": t.boolean(),
            "visibility": t.string().optional(),
        }
    ).named(renames["email"])
    types["gpg_key"] = t.struct(
        {
            "id": t.integer(),
            "name": t.string().optional(),
            "primary_key_id": t.integer().optional(),
            "key_id": t.string(),
            "public_key": t.string(),
            "emails": t.array(
                t.struct(
                    {"email": t.string().optional(), "verified": t.boolean().optional()}
                )
            ),
            "subkeys": t.array(
                t.struct(
                    {
                        "id": t.integer().optional(),
                        "primary_key_id": t.integer().optional(),
                        "key_id": t.string().optional(),
                        "public_key": t.string().optional(),
                        "emails": t.array(
                            t.struct(
                                {
                                    "email": t.string().optional(),
                                    "verified": t.boolean().optional(),
                                }
                            )
                        ).optional(),
                        "subkeys": t.array(
                            t.struct({"_": t.string().optional()})
                        ).optional(),
                        "can_sign": t.boolean().optional(),
                        "can_encrypt_comms": t.boolean().optional(),
                        "can_encrypt_storage": t.boolean().optional(),
                        "can_certify": t.boolean().optional(),
                        "created_at": t.string().optional(),
                        "expires_at": t.string().optional(),
                        "raw_key": t.string().optional(),
                        "revoked": t.boolean().optional(),
                    }
                )
            ),
            "can_sign": t.boolean(),
            "can_encrypt_comms": t.boolean(),
            "can_encrypt_storage": t.boolean(),
            "can_certify": t.boolean(),
            "created_at": t.string(),
            "expires_at": t.string().optional(),
            "revoked": t.boolean(),
            "raw_key": t.string().optional(),
        }
    ).named(renames["gpg_key"])
    types["key"] = t.struct(
        {
            "key": t.string(),
            "id": t.integer(),
            "url": t.string(),
            "title": t.string(),
            "created_at": t.string(),
            "verified": t.boolean(),
            "read_only": t.boolean(),
        }
    ).named(renames["key"])
    types["marketplace_account"] = t.struct(
        {
            "url": t.string(),
            "id": t.integer(),
            "type": t.string(),
            "node_id": t.string().optional(),
            "login": t.string(),
            "email": t.string().optional(),
            "organization_billing_email": t.string().optional(),
        }
    ).named(renames["marketplace_account"])
    types["user_marketplace_purchase"] = t.struct(
        {
            "billing_cycle": t.string(),
            "next_billing_date": t.string().optional(),
            "unit_count": t.integer().optional(),
            "on_free_trial": t.boolean(),
            "free_trial_ends_on": t.string().optional(),
            "updated_at": t.string().optional(),
            "account": t.proxy(renames["marketplace_account"]),
            "plan": t.proxy(renames["marketplace_listing_plan"]),
        }
    ).named(renames["user_marketplace_purchase"])
    types["social_account"] = t.struct(
        {"provider": t.string(), "url": t.string()}
    ).named(renames["social_account"])
    types["ssh_signing_key"] = t.struct(
        {
            "key": t.string(),
            "id": t.integer(),
            "title": t.string(),
            "created_at": t.string(),
        }
    ).named(renames["ssh_signing_key"])
    types["starred_repository"] = t.struct(
        {"starred_at": t.string(), "repo": t.proxy(renames["repository"])}
    ).named(renames["starred_repository"])
    types["hovercard"] = t.struct(
        {"contexts": t.array(t.struct({"message": t.string(), "octicon": t.string()}))}
    ).named(renames["hovercard"])
    types["key_simple"] = t.struct({"id": t.integer(), "key": t.string()}).named(
        renames["key_simple"]
    )
    types["simple_installation"] = t.struct(
        {"id": t.integer(), "node_id": t.string()}
    ).named(renames["simple_installation"])
    types["simple_check_suite"] = t.struct(
        {
            "after": t.string().optional(),
            "app": t.proxy(renames["integration"]).optional(),
            "before": t.string().optional(),
            "conclusion": t.string().optional(),
            "created_at": t.string().optional(),
            "head_branch": t.string().optional(),
            "head_sha": t.string().optional(),
            "id": t.integer().optional(),
            "node_id": t.string().optional(),
            "pull_requests": t.array(
                t.proxy(renames["pull_request_minimal"])
            ).optional(),
            "repository": t.proxy(renames["minimal_repository"]).optional(),
            "status": t.string().optional(),
            "updated_at": t.string().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["simple_check_suite"])
    types["check_run_with_simple_check_suite"] = t.struct(
        {
            "app": t.proxy(renames["nullable_integration"]),
            "check_suite": t.proxy(renames["simple_check_suite"]),
            "completed_at": t.string().optional(),
            "conclusion": t.string().optional(),
            "deployment": t.proxy(renames["deployment_simple"]).optional(),
            "details_url": t.string(),
            "external_id": t.string(),
            "head_sha": t.string(),
            "html_url": t.string(),
            "id": t.integer(),
            "name": t.string(),
            "node_id": t.string(),
            "output": t.struct(
                {
                    "annotations_count": t.integer(),
                    "annotations_url": t.string(),
                    "summary": t.string().optional(),
                    "text": t.string().optional(),
                    "title": t.string().optional(),
                }
            ),
            "pull_requests": t.array(t.proxy(renames["pull_request_minimal"])),
            "started_at": t.string(),
            "status": t.string(),
            "url": t.string(),
        }
    ).named(renames["check_run_with_simple_check_suite"])
    types["discussion"] = t.struct(
        {
            "active_lock_reason": t.string().optional(),
            "answer_chosen_at": t.string().optional(),
            "answer_chosen_by": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "answer_html_url": t.string().optional(),
            "author_association": t.string(),
            "body": t.string(),
            "category": t.struct(
                {
                    "created_at": t.string(),
                    "description": t.string(),
                    "emoji": t.string(),
                    "id": t.integer(),
                    "is_answerable": t.boolean(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "repository_id": t.integer(),
                    "slug": t.string(),
                    "updated_at": t.string(),
                }
            ),
            "comments": t.integer(),
            "created_at": t.string(),
            "html_url": t.string(),
            "id": t.integer(),
            "locked": t.boolean(),
            "node_id": t.string(),
            "number": t.integer(),
            "reactions": t.struct(
                {
                    "+1": t.integer(),
                    "-1": t.integer(),
                    "confused": t.integer(),
                    "eyes": t.integer(),
                    "heart": t.integer(),
                    "hooray": t.integer(),
                    "laugh": t.integer(),
                    "rocket": t.integer(),
                    "total_count": t.integer(),
                    "url": t.string(),
                }
            ).optional(),
            "repository_url": t.string(),
            "state": t.string(),
            "state_reason": t.string().optional(),
            "timeline_url": t.string().optional(),
            "title": t.string(),
            "updated_at": t.string(),
            "user": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["discussion"])
    types["merge_group"] = t.struct(
        {
            "head_sha": t.string(),
            "head_ref": t.string(),
            "base_sha": t.string(),
            "base_ref": t.string(),
            "head_commit": t.proxy(renames["simple_commit"]),
        }
    ).named(renames["merge_group"])
    types["personal_access_token_request"] = t.struct(
        {
            "id": t.integer(),
            "owner": t.proxy(renames["simple_user"]),
            "permissions_added": t.struct(
                {
                    "organization": t.struct({}).optional(),
                    "repository": t.struct({}).optional(),
                    "other": t.struct({}).optional(),
                }
            ),
            "permissions_upgraded": t.struct(
                {
                    "organization": t.struct({}).optional(),
                    "repository": t.struct({}).optional(),
                    "other": t.struct({}).optional(),
                }
            ),
            "permissions_result": t.struct(
                {
                    "organization": t.struct({}).optional(),
                    "repository": t.struct({}).optional(),
                    "other": t.struct({}).optional(),
                }
            ),
            "repository_selection": t.string(),
            "repository_count": t.integer().optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "created_at": t.string(),
            "token_expired": t.boolean(),
            "token_expires_at": t.string().optional(),
            "token_last_used_at": t.string().optional(),
        }
    ).named(renames["personal_access_token_request"])
    types["projects_v2"] = t.struct(
        {
            "id": t.number(),
            "node_id": t.string(),
            "owner": t.proxy(renames["simple_user"]),
            "creator": t.proxy(renames["simple_user"]),
            "title": t.string(),
            "description": t.string().optional(),
            "public": t.boolean(),
            "closed_at": t.string().optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "number": t.integer(),
            "short_description": t.string().optional(),
            "deleted_at": t.string().optional(),
            "deleted_by": t.proxy(renames["nullable_simple_user"]),
        }
    ).named(renames["projects_v2"])
    types["projects_v2_item_content_type"] = t.string().named(
        renames["projects_v2_item_content_type"]
    )
    types["projects_v2_item"] = t.struct(
        {
            "id": t.number(),
            "node_id": t.string().optional(),
            "project_node_id": t.string().optional(),
            "content_node_id": t.string(),
            "content_type": t.proxy(renames["projects_v2_item_content_type"]),
            "creator": t.proxy(renames["simple_user"]).optional(),
            "created_at": t.string(),
            "updated_at": t.string(),
            "archived_at": t.string().optional(),
        }
    ).named(renames["projects_v2_item"])
    types["webhook_branch_protection_rule_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "rule": t.struct(
                {
                    "admin_enforced": t.boolean(),
                    "allow_deletions_enforcement_level": t.string(),
                    "allow_force_pushes_enforcement_level": t.string(),
                    "authorized_actor_names": t.array(t.string()),
                    "authorized_actors_only": t.boolean(),
                    "authorized_dismissal_actors_only": t.boolean(),
                    "create_protected": t.boolean().optional(),
                    "created_at": t.string(),
                    "dismiss_stale_reviews_on_push": t.boolean(),
                    "id": t.integer(),
                    "ignore_approvals_from_contributors": t.boolean(),
                    "linear_history_requirement_enforcement_level": t.string(),
                    "merge_queue_enforcement_level": t.string(),
                    "name": t.string(),
                    "pull_request_reviews_enforcement_level": t.string(),
                    "repository_id": t.integer(),
                    "require_code_owner_review": t.boolean(),
                    "required_approving_review_count": t.integer(),
                    "required_conversation_resolution_level": t.string(),
                    "required_deployments_enforcement_level": t.string(),
                    "required_status_checks": t.array(t.string()),
                    "required_status_checks_enforcement_level": t.string(),
                    "signature_requirement_enforcement_level": t.string(),
                    "strict_required_status_checks_policy": t.boolean(),
                    "updated_at": t.string(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_branch_protection_rule_created"])
    types["webhook_branch_protection_rule_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "rule": t.struct(
                {
                    "admin_enforced": t.boolean(),
                    "allow_deletions_enforcement_level": t.string(),
                    "allow_force_pushes_enforcement_level": t.string(),
                    "authorized_actor_names": t.array(t.string()),
                    "authorized_actors_only": t.boolean(),
                    "authorized_dismissal_actors_only": t.boolean(),
                    "create_protected": t.boolean().optional(),
                    "created_at": t.string(),
                    "dismiss_stale_reviews_on_push": t.boolean(),
                    "id": t.integer(),
                    "ignore_approvals_from_contributors": t.boolean(),
                    "linear_history_requirement_enforcement_level": t.string(),
                    "merge_queue_enforcement_level": t.string(),
                    "name": t.string(),
                    "pull_request_reviews_enforcement_level": t.string(),
                    "repository_id": t.integer(),
                    "require_code_owner_review": t.boolean(),
                    "required_approving_review_count": t.integer(),
                    "required_conversation_resolution_level": t.string(),
                    "required_deployments_enforcement_level": t.string(),
                    "required_status_checks": t.array(t.string()),
                    "required_status_checks_enforcement_level": t.string(),
                    "signature_requirement_enforcement_level": t.string(),
                    "strict_required_status_checks_policy": t.boolean(),
                    "updated_at": t.string(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_branch_protection_rule_deleted"])
    types["webhook_branch_protection_rule_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "admin_enforced": t.struct(
                        {"from": t.boolean().optional()}
                    ).optional(),
                    "authorized_actor_names": t.struct(
                        {"from": t.array(t.string())}
                    ).optional(),
                    "authorized_actors_only": t.struct(
                        {"from": t.boolean().optional()}
                    ).optional(),
                    "authorized_dismissal_actors_only": t.struct(
                        {"from": t.boolean().optional()}
                    ).optional(),
                    "linear_history_requirement_enforcement_level": t.struct(
                        {"from": t.string()}
                    ).optional(),
                    "required_status_checks": t.struct(
                        {"from": t.array(t.string())}
                    ).optional(),
                    "required_status_checks_enforcement_level": t.struct(
                        {"from": t.string()}
                    ).optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "rule": t.struct(
                {
                    "admin_enforced": t.boolean(),
                    "allow_deletions_enforcement_level": t.string(),
                    "allow_force_pushes_enforcement_level": t.string(),
                    "authorized_actor_names": t.array(t.string()),
                    "authorized_actors_only": t.boolean(),
                    "authorized_dismissal_actors_only": t.boolean(),
                    "create_protected": t.boolean().optional(),
                    "created_at": t.string(),
                    "dismiss_stale_reviews_on_push": t.boolean(),
                    "id": t.integer(),
                    "ignore_approvals_from_contributors": t.boolean(),
                    "linear_history_requirement_enforcement_level": t.string(),
                    "merge_queue_enforcement_level": t.string(),
                    "name": t.string(),
                    "pull_request_reviews_enforcement_level": t.string(),
                    "repository_id": t.integer(),
                    "require_code_owner_review": t.boolean(),
                    "required_approving_review_count": t.integer(),
                    "required_conversation_resolution_level": t.string(),
                    "required_deployments_enforcement_level": t.string(),
                    "required_status_checks": t.array(t.string()),
                    "required_status_checks_enforcement_level": t.string(),
                    "signature_requirement_enforcement_level": t.string(),
                    "strict_required_status_checks_policy": t.boolean(),
                    "updated_at": t.string(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_branch_protection_rule_edited"])
    types["webhook_check_run_completed"] = t.struct(
        {
            "action": t.string().optional(),
            "check_run": t.proxy(renames["check_run_with_simple_check_suite"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_run_completed"])
    types["webhook_check_run_completed_form_encoded"] = t.struct(
        {"payload": t.string()}
    ).named(renames["webhook_check_run_completed_form_encoded"])
    types["webhook_check_run_created"] = t.struct(
        {
            "action": t.string().optional(),
            "check_run": t.proxy(renames["check_run_with_simple_check_suite"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_run_created"])
    types["webhook_check_run_created_form_encoded"] = t.struct(
        {"payload": t.string()}
    ).named(renames["webhook_check_run_created_form_encoded"])
    types["webhook_check_run_requested_action"] = t.struct(
        {
            "action": t.string(),
            "check_run": t.proxy(renames["check_run_with_simple_check_suite"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "requested_action": t.struct(
                {"identifier": t.string().optional()}
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_run_requested_action"])
    types["webhook_check_run_requested_action_form_encoded"] = t.struct(
        {"payload": t.string()}
    ).named(renames["webhook_check_run_requested_action_form_encoded"])
    types["webhook_check_run_rerequested"] = t.struct(
        {
            "action": t.string().optional(),
            "check_run": t.proxy(renames["check_run_with_simple_check_suite"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_run_rerequested"])
    types["webhook_check_run_rerequested_form_encoded"] = t.struct(
        {"payload": t.string()}
    ).named(renames["webhook_check_run_rerequested_form_encoded"])
    types["webhook_check_suite_completed"] = t.struct(
        {
            "action": t.string(),
            "actions_meta": t.struct({}).optional(),
            "check_suite": t.struct(
                {
                    "after": t.string().optional(),
                    "app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ),
                    "before": t.string().optional(),
                    "check_runs_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "id": t.integer(),
                    "latest_check_runs_count": t.integer(),
                    "node_id": t.string(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.integer(),
                                "number": t.integer(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "rerequestable": t.boolean().optional(),
                    "runs_rerequestable": t.boolean().optional(),
                    "status": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_suite_completed"])
    types["webhook_check_suite_requested"] = t.struct(
        {
            "action": t.string(),
            "actions_meta": t.struct({}).optional(),
            "check_suite": t.struct(
                {
                    "after": t.string().optional(),
                    "app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ),
                    "before": t.string().optional(),
                    "check_runs_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "id": t.integer(),
                    "latest_check_runs_count": t.integer(),
                    "node_id": t.string(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.integer(),
                                "number": t.integer(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "rerequestable": t.boolean().optional(),
                    "runs_rerequestable": t.boolean().optional(),
                    "status": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_suite_requested"])
    types["webhook_check_suite_rerequested"] = t.struct(
        {
            "action": t.string(),
            "actions_meta": t.struct(
                {
                    "rerun_info": t.struct(
                        {
                            "plan_id": t.string().optional(),
                            "job_ids": t.array(t.string()).optional(),
                        }
                    ).optional()
                }
            ).optional(),
            "check_suite": t.struct(
                {
                    "after": t.string().optional(),
                    "app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ),
                    "before": t.string().optional(),
                    "check_runs_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "id": t.integer(),
                    "latest_check_runs_count": t.integer(),
                    "node_id": t.string(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.integer(),
                                "number": t.integer(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "rerequestable": t.boolean().optional(),
                    "runs_rerequestable": t.boolean().optional(),
                    "status": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_check_suite_rerequested"])
    types["webhook_code_scanning_alert_appeared_in_branch"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string(),
                    "dismissed_at": t.string().optional(),
                    "dismissed_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "dismissed_reason": t.string().optional(),
                    "html_url": t.string(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "id": t.string(),
                            "severity": t.string().optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {"name": t.string(), "version": t.string().optional()}
                    ),
                    "url": t.string(),
                }
            ),
            "commit_oid": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_appeared_in_branch"])
    types["webhook_code_scanning_alert_closed_by_user"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string(),
                    "dismissed_at": t.string(),
                    "dismissed_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "dismissed_reason": t.string().optional(),
                    "html_url": t.string(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "full_description": t.string().optional(),
                            "help": t.string().optional(),
                            "help_uri": t.string().optional(),
                            "id": t.string(),
                            "name": t.string().optional(),
                            "severity": t.string().optional(),
                            "tags": t.array(t.string()).optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {
                            "guid": t.string().optional(),
                            "name": t.string(),
                            "version": t.string().optional(),
                        }
                    ),
                    "url": t.string(),
                }
            ),
            "commit_oid": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_closed_by_user"])
    types["webhook_code_scanning_alert_created"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string().optional(),
                    "dismissed_at": t.string().optional(),
                    "dismissed_by": t.struct({"_": t.string().optional()}).optional(),
                    "dismissed_comment": t.proxy(
                        renames["code_scanning_alert_dismissed_comment"]
                    ).optional(),
                    "dismissed_reason": t.string().optional(),
                    "fixed_at": t.struct({"_": t.string().optional()}).optional(),
                    "html_url": t.string(),
                    "instances_url": t.string().optional(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "full_description": t.string().optional(),
                            "help": t.string().optional(),
                            "help_uri": t.string().optional(),
                            "id": t.string(),
                            "name": t.string().optional(),
                            "severity": t.string().optional(),
                            "tags": t.array(t.string()).optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {
                            "guid": t.string().optional(),
                            "name": t.string(),
                            "version": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string().optional(),
                    "url": t.string(),
                }
            ),
            "commit_oid": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_created"])
    types["webhook_code_scanning_alert_fixed"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string(),
                    "dismissed_at": t.string().optional(),
                    "dismissed_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "dismissed_reason": t.string().optional(),
                    "html_url": t.string(),
                    "instances_url": t.string().optional(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "full_description": t.string().optional(),
                            "help": t.string().optional(),
                            "help_uri": t.string().optional(),
                            "id": t.string(),
                            "name": t.string().optional(),
                            "severity": t.string().optional(),
                            "tags": t.array(t.string()).optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {
                            "guid": t.string().optional(),
                            "name": t.string(),
                            "version": t.string().optional(),
                        }
                    ),
                    "url": t.string(),
                }
            ),
            "commit_oid": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_fixed"])
    types["webhook_code_scanning_alert_reopened"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string(),
                    "dismissed_at": t.string().optional(),
                    "dismissed_by": t.struct({}).optional(),
                    "dismissed_reason": t.string().optional(),
                    "html_url": t.string(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "full_description": t.string().optional(),
                            "help": t.string().optional(),
                            "help_uri": t.string().optional(),
                            "id": t.string(),
                            "name": t.string().optional(),
                            "severity": t.string().optional(),
                            "tags": t.array(t.string()).optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {
                            "guid": t.string().optional(),
                            "name": t.string(),
                            "version": t.string().optional(),
                        }
                    ),
                    "url": t.string(),
                }
            ).optional(),
            "commit_oid": t.string().optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string().optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_reopened"])
    types["webhook_code_scanning_alert_reopened_by_user"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.string(),
                    "dismissed_at": t.string().optional(),
                    "dismissed_by": t.struct({"_": t.string().optional()}).optional(),
                    "dismissed_reason": t.string().optional(),
                    "html_url": t.string(),
                    "most_recent_instance": t.struct(
                        {
                            "analysis_key": t.string(),
                            "category": t.string().optional(),
                            "classifications": t.array(t.string()).optional(),
                            "commit_sha": t.string().optional(),
                            "environment": t.string(),
                            "location": t.struct(
                                {
                                    "end_column": t.integer().optional(),
                                    "end_line": t.integer().optional(),
                                    "path": t.string().optional(),
                                    "start_column": t.integer().optional(),
                                    "start_line": t.integer().optional(),
                                }
                            ).optional(),
                            "message": t.struct(
                                {"text": t.string().optional()}
                            ).optional(),
                            "ref": t.string(),
                            "state": t.string(),
                        }
                    ).optional(),
                    "number": t.integer(),
                    "rule": t.struct(
                        {
                            "description": t.string(),
                            "id": t.string(),
                            "severity": t.string().optional(),
                        }
                    ),
                    "state": t.string(),
                    "tool": t.struct(
                        {"name": t.string(), "version": t.string().optional()}
                    ),
                    "url": t.string(),
                }
            ),
            "commit_oid": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_code_scanning_alert_reopened_by_user"])
    types["webhook_commit_comment_created"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "commit_id": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "line": t.integer().optional(),
                    "node_id": t.string(),
                    "path": t.string().optional(),
                    "position": t.integer().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_commit_comment_created"])
    types["webhook_create"] = t.struct(
        {
            "description": t.string().optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "master_branch": t.string(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pusher_type": t.string(),
            "ref": t.string(),
            "ref_type": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_create"])
    types["webhook_delete"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pusher_type": t.string(),
            "ref": t.string(),
            "ref_type": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_delete"])
    types["webhook_dependabot_alert_auto_dismissed"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_auto_dismissed"])
    types["webhook_dependabot_alert_auto_reopened"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_auto_reopened"])
    types["webhook_dependabot_alert_created"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_created"])
    types["webhook_dependabot_alert_dismissed"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_dismissed"])
    types["webhook_dependabot_alert_fixed"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_fixed"])
    types["webhook_dependabot_alert_reintroduced"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_reintroduced"])
    types["webhook_dependabot_alert_reopened"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["dependabot_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_dependabot_alert_reopened"])
    types["webhook_deploy_key_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "key": t.struct(
                {
                    "added_by": t.string().optional(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "key": t.string(),
                    "last_used": t.string().optional(),
                    "read_only": t.boolean(),
                    "title": t.string(),
                    "url": t.string(),
                    "verified": t.boolean(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_deploy_key_created"])
    types["webhook_deploy_key_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "key": t.struct(
                {
                    "added_by": t.string().optional(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "key": t.string(),
                    "last_used": t.string().optional(),
                    "read_only": t.boolean(),
                    "title": t.string(),
                    "url": t.string(),
                    "verified": t.boolean(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_deploy_key_deleted"])
    types["webhook_deployment_created"] = t.struct(
        {
            "action": t.string(),
            "deployment": t.struct(
                {
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "environment": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "original_environment": t.string(),
                    "payload": t.either([t.struct({}), t.string()]),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "production_environment": t.boolean().optional(),
                    "ref": t.string(),
                    "repository_url": t.string(),
                    "sha": t.string(),
                    "statuses_url": t.string(),
                    "task": t.string(),
                    "transient_environment": t.boolean().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.struct(
                {
                    "badge_url": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "workflow_run": t.struct(
                {
                    "actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "artifacts_url": t.string().optional(),
                    "cancel_url": t.string().optional(),
                    "check_suite_id": t.integer(),
                    "check_suite_node_id": t.string(),
                    "check_suite_url": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "display_title": t.string(),
                    "event": t.string(),
                    "head_branch": t.string(),
                    "head_commit": t.struct({"_": t.string().optional()}).optional(),
                    "head_repository": t.struct(
                        {
                            "archive_url": t.string().optional(),
                            "assignees_url": t.string().optional(),
                            "blobs_url": t.string().optional(),
                            "branches_url": t.string().optional(),
                            "collaborators_url": t.string().optional(),
                            "comments_url": t.string().optional(),
                            "commits_url": t.string().optional(),
                            "compare_url": t.string().optional(),
                            "contents_url": t.string().optional(),
                            "contributors_url": t.string().optional(),
                            "deployments_url": t.string().optional(),
                            "description": t.struct(
                                {"_": t.string().optional()}
                            ).optional(),
                            "downloads_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "fork": t.boolean().optional(),
                            "forks_url": t.string().optional(),
                            "full_name": t.string().optional(),
                            "git_commits_url": t.string().optional(),
                            "git_refs_url": t.string().optional(),
                            "git_tags_url": t.string().optional(),
                            "hooks_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "issue_comment_url": t.string().optional(),
                            "issue_events_url": t.string().optional(),
                            "issues_url": t.string().optional(),
                            "keys_url": t.string().optional(),
                            "labels_url": t.string().optional(),
                            "languages_url": t.string().optional(),
                            "merges_url": t.string().optional(),
                            "milestones_url": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "notifications_url": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer().optional(),
                                    "login": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean().optional(),
                            "pulls_url": t.string().optional(),
                            "releases_url": t.string().optional(),
                            "stargazers_url": t.string().optional(),
                            "statuses_url": t.string().optional(),
                            "subscribers_url": t.string().optional(),
                            "subscription_url": t.string().optional(),
                            "tags_url": t.string().optional(),
                            "teams_url": t.string().optional(),
                            "trees_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "jobs_url": t.string().optional(),
                    "logs_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "previous_attempt_url": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.integer(),
                                "number": t.integer(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "referenced_workflows": t.array(
                        t.struct(
                            {
                                "path": t.string(),
                                "ref": t.string().optional(),
                                "sha": t.string(),
                            }
                        )
                    ).optional(),
                    "repository": t.struct(
                        {
                            "archive_url": t.string().optional(),
                            "assignees_url": t.string().optional(),
                            "blobs_url": t.string().optional(),
                            "branches_url": t.string().optional(),
                            "collaborators_url": t.string().optional(),
                            "comments_url": t.string().optional(),
                            "commits_url": t.string().optional(),
                            "compare_url": t.string().optional(),
                            "contents_url": t.string().optional(),
                            "contributors_url": t.string().optional(),
                            "deployments_url": t.string().optional(),
                            "description": t.struct(
                                {"_": t.string().optional()}
                            ).optional(),
                            "downloads_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "fork": t.boolean().optional(),
                            "forks_url": t.string().optional(),
                            "full_name": t.string().optional(),
                            "git_commits_url": t.string().optional(),
                            "git_refs_url": t.string().optional(),
                            "git_tags_url": t.string().optional(),
                            "hooks_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "issue_comment_url": t.string().optional(),
                            "issue_events_url": t.string().optional(),
                            "issues_url": t.string().optional(),
                            "keys_url": t.string().optional(),
                            "labels_url": t.string().optional(),
                            "languages_url": t.string().optional(),
                            "merges_url": t.string().optional(),
                            "milestones_url": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "notifications_url": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer().optional(),
                                    "login": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean().optional(),
                            "pulls_url": t.string().optional(),
                            "releases_url": t.string().optional(),
                            "stargazers_url": t.string().optional(),
                            "statuses_url": t.string().optional(),
                            "subscribers_url": t.string().optional(),
                            "subscription_url": t.string().optional(),
                            "tags_url": t.string().optional(),
                            "teams_url": t.string().optional(),
                            "trees_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "rerun_url": t.string().optional(),
                    "run_attempt": t.integer(),
                    "run_number": t.integer(),
                    "run_started_at": t.string(),
                    "status": t.string(),
                    "triggering_actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "workflow_id": t.integer(),
                    "workflow_url": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["webhook_deployment_created"])
    types["webhook_deployment_protection_rule_requested"] = t.struct(
        {
            "action": t.string().optional(),
            "environment": t.string().optional(),
            "event": t.string().optional(),
            "deployment_callback_url": t.string().optional(),
            "deployment": t.proxy(renames["deployment"]).optional(),
            "pull_requests": t.array(t.proxy(renames["pull_request"])).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_deployment_protection_rule_requested"])
    types["webhook_deployment_status_created"] = t.struct(
        {
            "action": t.string(),
            "check_run": t.struct(
                {
                    "completed_at": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "details_url": t.string(),
                    "external_id": t.string(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "started_at": t.string(),
                    "status": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "deployment": t.struct(
                {
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "environment": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "original_environment": t.string(),
                    "payload": t.either([t.string(), t.struct({})]).optional(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "production_environment": t.boolean().optional(),
                    "ref": t.string(),
                    "repository_url": t.string(),
                    "sha": t.string(),
                    "statuses_url": t.string(),
                    "task": t.string(),
                    "transient_environment": t.boolean().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "deployment_status": t.struct(
                {
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "deployment_url": t.string(),
                    "description": t.string(),
                    "environment": t.string(),
                    "environment_url": t.string().optional(),
                    "id": t.integer(),
                    "log_url": t.string().optional(),
                    "node_id": t.string(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "target_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.struct(
                {
                    "badge_url": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "workflow_run": t.struct(
                {
                    "actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "artifacts_url": t.string().optional(),
                    "cancel_url": t.string().optional(),
                    "check_suite_id": t.integer(),
                    "check_suite_node_id": t.string(),
                    "check_suite_url": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "display_title": t.string(),
                    "event": t.string(),
                    "head_branch": t.string(),
                    "head_commit": t.struct({"_": t.string().optional()}).optional(),
                    "head_repository": t.struct(
                        {
                            "archive_url": t.string().optional(),
                            "assignees_url": t.string().optional(),
                            "blobs_url": t.string().optional(),
                            "branches_url": t.string().optional(),
                            "collaborators_url": t.string().optional(),
                            "comments_url": t.string().optional(),
                            "commits_url": t.string().optional(),
                            "compare_url": t.string().optional(),
                            "contents_url": t.string().optional(),
                            "contributors_url": t.string().optional(),
                            "deployments_url": t.string().optional(),
                            "description": t.struct(
                                {"_": t.string().optional()}
                            ).optional(),
                            "downloads_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "fork": t.boolean().optional(),
                            "forks_url": t.string().optional(),
                            "full_name": t.string().optional(),
                            "git_commits_url": t.string().optional(),
                            "git_refs_url": t.string().optional(),
                            "git_tags_url": t.string().optional(),
                            "hooks_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "issue_comment_url": t.string().optional(),
                            "issue_events_url": t.string().optional(),
                            "issues_url": t.string().optional(),
                            "keys_url": t.string().optional(),
                            "labels_url": t.string().optional(),
                            "languages_url": t.string().optional(),
                            "merges_url": t.string().optional(),
                            "milestones_url": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "notifications_url": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer().optional(),
                                    "login": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean().optional(),
                            "pulls_url": t.string().optional(),
                            "releases_url": t.string().optional(),
                            "stargazers_url": t.string().optional(),
                            "statuses_url": t.string().optional(),
                            "subscribers_url": t.string().optional(),
                            "subscription_url": t.string().optional(),
                            "tags_url": t.string().optional(),
                            "teams_url": t.string().optional(),
                            "trees_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "jobs_url": t.string().optional(),
                    "logs_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "previous_attempt_url": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.integer(),
                                "number": t.integer(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "referenced_workflows": t.array(
                        t.struct(
                            {
                                "path": t.string(),
                                "ref": t.string().optional(),
                                "sha": t.string(),
                            }
                        )
                    ).optional(),
                    "repository": t.struct(
                        {
                            "archive_url": t.string().optional(),
                            "assignees_url": t.string().optional(),
                            "blobs_url": t.string().optional(),
                            "branches_url": t.string().optional(),
                            "collaborators_url": t.string().optional(),
                            "comments_url": t.string().optional(),
                            "commits_url": t.string().optional(),
                            "compare_url": t.string().optional(),
                            "contents_url": t.string().optional(),
                            "contributors_url": t.string().optional(),
                            "deployments_url": t.string().optional(),
                            "description": t.struct(
                                {"_": t.string().optional()}
                            ).optional(),
                            "downloads_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "fork": t.boolean().optional(),
                            "forks_url": t.string().optional(),
                            "full_name": t.string().optional(),
                            "git_commits_url": t.string().optional(),
                            "git_refs_url": t.string().optional(),
                            "git_tags_url": t.string().optional(),
                            "hooks_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "issue_comment_url": t.string().optional(),
                            "issue_events_url": t.string().optional(),
                            "issues_url": t.string().optional(),
                            "keys_url": t.string().optional(),
                            "labels_url": t.string().optional(),
                            "languages_url": t.string().optional(),
                            "merges_url": t.string().optional(),
                            "milestones_url": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "notifications_url": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer().optional(),
                                    "login": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean().optional(),
                            "pulls_url": t.string().optional(),
                            "releases_url": t.string().optional(),
                            "stargazers_url": t.string().optional(),
                            "statuses_url": t.string().optional(),
                            "subscribers_url": t.string().optional(),
                            "subscription_url": t.string().optional(),
                            "tags_url": t.string().optional(),
                            "teams_url": t.string().optional(),
                            "trees_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "rerun_url": t.string().optional(),
                    "run_attempt": t.integer(),
                    "run_number": t.integer(),
                    "run_started_at": t.string(),
                    "status": t.string(),
                    "triggering_actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "workflow_id": t.integer(),
                    "workflow_url": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["webhook_deployment_status_created"])
    types["webhook_discussion_answered"] = t.struct(
        {
            "action": t.string(),
            "answer": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "child_comment_count": t.integer(),
                    "created_at": t.string(),
                    "discussion_id": t.integer(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "parent_id": t.struct({"_": t.string().optional()}).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "repository_url": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_answered"])
    types["webhook_discussion_category_changed"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "category": t.struct(
                        {
                            "from": t.struct(
                                {
                                    "created_at": t.string(),
                                    "description": t.string(),
                                    "emoji": t.string(),
                                    "id": t.integer(),
                                    "is_answerable": t.boolean(),
                                    "name": t.string(),
                                    "node_id": t.string().optional(),
                                    "repository_id": t.integer(),
                                    "slug": t.string(),
                                    "updated_at": t.string(),
                                }
                            )
                        }
                    )
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_category_changed"])
    types["webhook_discussion_closed"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_closed"])
    types["webhook_discussion_comment_created"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "child_comment_count": t.integer(),
                    "created_at": t.string(),
                    "discussion_id": t.integer(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "parent_id": t.integer().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_comment_created"])
    types["webhook_discussion_comment_deleted"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "child_comment_count": t.integer(),
                    "created_at": t.string(),
                    "discussion_id": t.integer(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "parent_id": t.integer().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_comment_deleted"])
    types["webhook_discussion_comment_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"body": t.struct({"from": t.string()})}),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "child_comment_count": t.integer(),
                    "created_at": t.string(),
                    "discussion_id": t.integer(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "parent_id": t.integer().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_comment_edited"])
    types["webhook_discussion_created"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "answer_chosen_at": t.string().optional(),
                    "answer_chosen_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "answer_html_url": t.string().optional(),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "category": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "emoji": t.string(),
                            "id": t.integer(),
                            "is_answerable": t.boolean(),
                            "name": t.string(),
                            "node_id": t.string().optional(),
                            "repository_id": t.integer(),
                            "slug": t.string(),
                            "updated_at": t.string(),
                        }
                    ),
                    "comments": t.integer(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "locked": t.boolean(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_created"])
    types["webhook_discussion_deleted"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_deleted"])
    types["webhook_discussion_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "body": t.struct({"from": t.string()}).optional(),
                    "title": t.struct({"from": t.string()}).optional(),
                }
            ).optional(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_edited"])
    types["webhook_discussion_labeled"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_labeled"])
    types["webhook_discussion_locked"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_locked"])
    types["webhook_discussion_pinned"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_pinned"])
    types["webhook_discussion_reopened"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_reopened"])
    types["webhook_discussion_transferred"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "new_discussion": t.proxy(renames["discussion"]),
                    "new_repository": t.proxy(renames["repository"]),
                }
            ),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_transferred"])
    types["webhook_discussion_unanswered"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "old_answer": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "child_comment_count": t.integer(),
                    "created_at": t.string(),
                    "discussion_id": t.integer(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "parent_id": t.struct({"_": t.string().optional()}).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "repository_url": t.string(),
                    "updated_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_discussion_unanswered"])
    types["webhook_discussion_unlabeled"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_unlabeled"])
    types["webhook_discussion_unlocked"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_unlocked"])
    types["webhook_discussion_unpinned"] = t.struct(
        {
            "action": t.string(),
            "discussion": t.proxy(renames["discussion"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_discussion_unpinned"])
    types["webhook_fork"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "forkee": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string().optional()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                    "web_commit_signoff_required": t.boolean().optional(),
                }
            ),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_fork"])
    types["webhook_github_app_authorization_revoked"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_github_app_authorization_revoked"])
    types["webhook_gollum"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pages": t.array(
                t.struct(
                    {
                        "action": t.string(),
                        "html_url": t.string(),
                        "page_name": t.string(),
                        "sha": t.string(),
                        "summary": t.string().optional(),
                        "title": t.string(),
                    }
                )
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_gollum"])
    types["webhook_installation_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "requester": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_created"])
    types["webhook_installation_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "requester": t.struct({"_": t.string().optional()}).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_deleted"])
    types["webhook_installation_new_permissions_accepted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "requester": t.struct({"_": t.string().optional()}).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_new_permissions_accepted"])
    types["webhook_installation_repositories_added"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories_added": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ),
            "repositories_removed": t.array(
                t.struct(
                    {
                        "full_name": t.string().optional(),
                        "id": t.integer().optional(),
                        "name": t.string().optional(),
                        "node_id": t.string().optional(),
                        "private": t.boolean().optional(),
                    }
                )
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "repository_selection": t.string(),
            "requester": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_repositories_added"])
    types["webhook_installation_repositories_removed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories_added": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ),
            "repositories_removed": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "repository_selection": t.string(),
            "requester": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_repositories_removed"])
    types["webhook_installation_suspend"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "requester": t.struct({"_": t.string().optional()}).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_suspend"])
    types["webhook_installation_target_renamed"] = t.struct(
        {
            "account": t.struct(
                {
                    "avatar_url": t.string(),
                    "created_at": t.string().optional(),
                    "description": t.struct({"_": t.string().optional()}).optional(),
                    "events_url": t.string().optional(),
                    "followers": t.integer().optional(),
                    "followers_url": t.string().optional(),
                    "following": t.integer().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "has_organization_projects": t.boolean().optional(),
                    "has_repository_projects": t.boolean().optional(),
                    "hooks_url": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_verified": t.boolean().optional(),
                    "issues_url": t.string().optional(),
                    "login": t.string().optional(),
                    "members_url": t.string().optional(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "organizations_url": t.string().optional(),
                    "public_gists": t.integer().optional(),
                    "public_members_url": t.string().optional(),
                    "public_repos": t.integer().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "slug": t.string().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "updated_at": t.string().optional(),
                    "url": t.string().optional(),
                    "website_url": t.struct({"_": t.string().optional()}).optional(),
                }
            ),
            "action": t.string(),
            "changes": t.struct(
                {
                    "login": t.struct({"from": t.string()}).optional(),
                    "slug": t.struct({"from": t.string()}).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "target_type": t.string(),
        }
    ).named(renames["webhook_installation_target_renamed"])
    types["webhook_installation_unsuspend"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repositories": t.array(
                t.struct(
                    {
                        "full_name": t.string(),
                        "id": t.integer(),
                        "name": t.string(),
                        "node_id": t.string(),
                        "private": t.boolean(),
                    }
                )
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "requester": t.struct({"_": t.string().optional()}).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_installation_unsuspend"])
    types["webhook_issue_comment_created"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "node_id": t.string(),
                    "performed_via_github_app": t.proxy(
                        renames["nullable_integration"]
                    ),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "labels_url": t.string(),
                    "locked": t.boolean(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issue_comment_created"])
    types["webhook_issue_comment_deleted"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "node_id": t.string(),
                    "performed_via_github_app": t.proxy(
                        renames["nullable_integration"]
                    ),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "labels_url": t.string(),
                    "locked": t.boolean(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issue_comment_deleted"])
    types["webhook_issue_comment_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"body": t.struct({"from": t.string()}).optional()}),
            "comment": t.struct(
                {
                    "author_association": t.string(),
                    "body": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "node_id": t.string(),
                    "performed_via_github_app": t.proxy(
                        renames["nullable_integration"]
                    ),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "labels_url": t.string(),
                    "locked": t.boolean(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issue_comment_edited"])
    types["webhook_issues_assigned"] = t.struct(
        {
            "action": t.string(),
            "assignee": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_assigned"])
    types["webhook_issues_closed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_closed"])
    types["webhook_issues_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_deleted"])
    types["webhook_issues_demilestoned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_demilestoned"])
    types["webhook_issues_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "body": t.struct({"from": t.string()}).optional(),
                    "title": t.struct({"from": t.string()}).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_edited"])
    types["webhook_issues_labeled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_labeled"])
    types["webhook_issues_locked"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_locked"])
    types["webhook_issues_milestoned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_milestoned"])
    types["webhook_issues_opened"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "old_issue": t.struct(
                        {
                            "active_lock_reason": t.string().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "body": t.string().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer(),
                            "comments_url": t.string(),
                            "created_at": t.string(),
                            "draft": t.boolean().optional(),
                            "events_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ).optional(),
                            "labels_url": t.string(),
                            "locked": t.boolean().optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "performed_via_github_app": t.struct(
                                {
                                    "created_at": t.string().optional(),
                                    "description": t.string().optional(),
                                    "events": t.array(t.string()).optional(),
                                    "external_url": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "actions": t.string().optional(),
                                            "administration": t.string().optional(),
                                            "checks": t.string().optional(),
                                            "content_references": t.string().optional(),
                                            "contents": t.string().optional(),
                                            "deployments": t.string().optional(),
                                            "discussions": t.string().optional(),
                                            "emails": t.string().optional(),
                                            "environments": t.string().optional(),
                                            "issues": t.string().optional(),
                                            "keys": t.string().optional(),
                                            "members": t.string().optional(),
                                            "metadata": t.string().optional(),
                                            "organization_administration": t.string().optional(),
                                            "organization_hooks": t.string().optional(),
                                            "organization_packages": t.string().optional(),
                                            "organization_plan": t.string().optional(),
                                            "organization_projects": t.string().optional(),
                                            "organization_secrets": t.string().optional(),
                                            "organization_self_hosted_runners": t.string().optional(),
                                            "organization_user_blocking": t.string().optional(),
                                            "packages": t.string().optional(),
                                            "pages": t.string().optional(),
                                            "pull_requests": t.string().optional(),
                                            "repository_hooks": t.string().optional(),
                                            "repository_projects": t.string().optional(),
                                            "secret_scanning_alerts": t.string().optional(),
                                            "secrets": t.string().optional(),
                                            "security_events": t.string().optional(),
                                            "security_scanning_alert": t.string().optional(),
                                            "single_file": t.string().optional(),
                                            "statuses": t.string().optional(),
                                            "team_discussions": t.string().optional(),
                                            "vulnerability_alerts": t.string().optional(),
                                            "workflows": t.string().optional(),
                                        }
                                    ).optional(),
                                    "slug": t.string().optional(),
                                    "updated_at": t.string().optional(),
                                }
                            ).optional(),
                            "pull_request": t.struct(
                                {
                                    "diff_url": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "merged_at": t.string().optional(),
                                    "patch_url": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "reactions": t.struct(
                                {
                                    "+1": t.integer(),
                                    "-1": t.integer(),
                                    "confused": t.integer(),
                                    "eyes": t.integer(),
                                    "heart": t.integer(),
                                    "hooray": t.integer(),
                                    "laugh": t.integer(),
                                    "rocket": t.integer(),
                                    "total_count": t.integer(),
                                    "url": t.string(),
                                }
                            ),
                            "repository_url": t.string(),
                            "state": t.string().optional(),
                            "state_reason": t.string().optional(),
                            "timeline_url": t.string().optional(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ).optional(),
                    "old_repository": t.struct(
                        {
                            "allow_auto_merge": t.boolean().optional(),
                            "allow_forking": t.boolean().optional(),
                            "allow_merge_commit": t.boolean().optional(),
                            "allow_rebase_merge": t.boolean().optional(),
                            "allow_squash_merge": t.boolean().optional(),
                            "allow_update_branch": t.boolean().optional(),
                            "archive_url": t.string(),
                            "archived": t.boolean(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "clone_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "created_at": t.either([t.integer(), t.string()]),
                            "default_branch": t.string(),
                            "delete_branch_on_merge": t.boolean().optional(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "disabled": t.boolean().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks": t.integer(),
                            "forks_count": t.integer(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "git_url": t.string(),
                            "has_downloads": t.boolean(),
                            "has_issues": t.boolean(),
                            "has_pages": t.boolean(),
                            "has_projects": t.boolean(),
                            "has_wiki": t.boolean(),
                            "homepage": t.string().optional(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "is_template": t.boolean().optional(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "language": t.string().optional(),
                            "languages_url": t.string(),
                            "license": t.struct(
                                {
                                    "key": t.string(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "spdx_id": t.string(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "master_branch": t.string().optional(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "mirror_url": t.string().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "open_issues": t.integer(),
                            "open_issues_count": t.integer(),
                            "organization": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "admin": t.boolean(),
                                    "maintain": t.boolean().optional(),
                                    "pull": t.boolean(),
                                    "push": t.boolean(),
                                    "triage": t.boolean().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "public": t.boolean().optional(),
                            "pulls_url": t.string(),
                            "pushed_at": t.either([t.integer(), t.string()]).optional(),
                            "releases_url": t.string(),
                            "role_name": t.string().optional(),
                            "size": t.integer(),
                            "ssh_url": t.string(),
                            "stargazers": t.integer().optional(),
                            "stargazers_count": t.integer(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "svn_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "topics": t.array(t.string()),
                            "trees_url": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "visibility": t.string(),
                            "watchers": t.integer(),
                            "watchers_count": t.integer(),
                        }
                    ),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_opened"])
    types["webhook_issues_pinned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_pinned"])
    types["webhook_issues_reopened"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_reopened"])
    types["webhook_issues_transferred"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "new_issue": t.struct(
                        {
                            "active_lock_reason": t.string().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "body": t.string().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer(),
                            "comments_url": t.string(),
                            "created_at": t.string(),
                            "draft": t.boolean().optional(),
                            "events_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ).optional(),
                            "labels_url": t.string(),
                            "locked": t.boolean().optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "performed_via_github_app": t.struct(
                                {
                                    "created_at": t.string().optional(),
                                    "description": t.string().optional(),
                                    "events": t.array(t.string()).optional(),
                                    "external_url": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "actions": t.string().optional(),
                                            "administration": t.string().optional(),
                                            "checks": t.string().optional(),
                                            "content_references": t.string().optional(),
                                            "contents": t.string().optional(),
                                            "deployments": t.string().optional(),
                                            "discussions": t.string().optional(),
                                            "emails": t.string().optional(),
                                            "environments": t.string().optional(),
                                            "issues": t.string().optional(),
                                            "keys": t.string().optional(),
                                            "members": t.string().optional(),
                                            "metadata": t.string().optional(),
                                            "organization_administration": t.string().optional(),
                                            "organization_hooks": t.string().optional(),
                                            "organization_packages": t.string().optional(),
                                            "organization_plan": t.string().optional(),
                                            "organization_projects": t.string().optional(),
                                            "organization_secrets": t.string().optional(),
                                            "organization_self_hosted_runners": t.string().optional(),
                                            "organization_user_blocking": t.string().optional(),
                                            "packages": t.string().optional(),
                                            "pages": t.string().optional(),
                                            "pull_requests": t.string().optional(),
                                            "repository_hooks": t.string().optional(),
                                            "repository_projects": t.string().optional(),
                                            "secret_scanning_alerts": t.string().optional(),
                                            "secrets": t.string().optional(),
                                            "security_events": t.string().optional(),
                                            "security_scanning_alert": t.string().optional(),
                                            "single_file": t.string().optional(),
                                            "statuses": t.string().optional(),
                                            "team_discussions": t.string().optional(),
                                            "vulnerability_alerts": t.string().optional(),
                                            "workflows": t.string().optional(),
                                        }
                                    ).optional(),
                                    "slug": t.string().optional(),
                                    "updated_at": t.string().optional(),
                                }
                            ).optional(),
                            "pull_request": t.struct(
                                {
                                    "diff_url": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "merged_at": t.string().optional(),
                                    "patch_url": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "reactions": t.struct(
                                {
                                    "+1": t.integer(),
                                    "-1": t.integer(),
                                    "confused": t.integer(),
                                    "eyes": t.integer(),
                                    "heart": t.integer(),
                                    "hooray": t.integer(),
                                    "laugh": t.integer(),
                                    "rocket": t.integer(),
                                    "total_count": t.integer(),
                                    "url": t.string(),
                                }
                            ),
                            "repository_url": t.string(),
                            "state": t.string().optional(),
                            "state_reason": t.string().optional(),
                            "timeline_url": t.string().optional(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "new_repository": t.struct(
                        {
                            "allow_auto_merge": t.boolean().optional(),
                            "allow_forking": t.boolean().optional(),
                            "allow_merge_commit": t.boolean().optional(),
                            "allow_rebase_merge": t.boolean().optional(),
                            "allow_squash_merge": t.boolean().optional(),
                            "allow_update_branch": t.boolean().optional(),
                            "archive_url": t.string(),
                            "archived": t.boolean(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "clone_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "created_at": t.either([t.integer(), t.string()]),
                            "default_branch": t.string(),
                            "delete_branch_on_merge": t.boolean().optional(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "disabled": t.boolean().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks": t.integer(),
                            "forks_count": t.integer(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "git_url": t.string(),
                            "has_downloads": t.boolean(),
                            "has_issues": t.boolean(),
                            "has_pages": t.boolean(),
                            "has_projects": t.boolean(),
                            "has_wiki": t.boolean(),
                            "has_discussions": t.boolean(),
                            "homepage": t.string().optional(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "is_template": t.boolean().optional(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "language": t.string().optional(),
                            "languages_url": t.string(),
                            "license": t.struct(
                                {
                                    "key": t.string(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "spdx_id": t.string(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "master_branch": t.string().optional(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "mirror_url": t.string().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "open_issues": t.integer(),
                            "open_issues_count": t.integer(),
                            "organization": t.string().optional(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "admin": t.boolean(),
                                    "maintain": t.boolean().optional(),
                                    "pull": t.boolean(),
                                    "push": t.boolean(),
                                    "triage": t.boolean().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "public": t.boolean().optional(),
                            "pulls_url": t.string(),
                            "pushed_at": t.either([t.integer(), t.string()]).optional(),
                            "releases_url": t.string(),
                            "role_name": t.string().optional(),
                            "size": t.integer(),
                            "ssh_url": t.string(),
                            "stargazers": t.integer().optional(),
                            "stargazers_count": t.integer(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "svn_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "topics": t.array(t.string()),
                            "trees_url": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "visibility": t.string(),
                            "watchers": t.integer(),
                            "watchers_count": t.integer(),
                            "web_commit_signoff_required": t.boolean().optional(),
                        }
                    ),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_transferred"])
    types["webhook_issues_unassigned"] = t.struct(
        {
            "action": t.string(),
            "assignee": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_unassigned"])
    types["webhook_issues_unlabeled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_unlabeled"])
    types["webhook_issues_unlocked"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        ).optional()
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_unlocked"])
    types["webhook_issues_unpinned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "issue": t.struct(
                {
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer(),
                    "comments_url": t.string(),
                    "created_at": t.string(),
                    "draft": t.boolean().optional(),
                    "events_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ).optional(),
                    "labels_url": t.string(),
                    "locked": t.boolean().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "performed_via_github_app": t.struct(
                        {
                            "created_at": t.string().optional(),
                            "description": t.string().optional(),
                            "events": t.array(t.string()).optional(),
                            "external_url": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer().optional(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "permissions": t.struct(
                                {
                                    "actions": t.string().optional(),
                                    "administration": t.string().optional(),
                                    "checks": t.string().optional(),
                                    "content_references": t.string().optional(),
                                    "contents": t.string().optional(),
                                    "deployments": t.string().optional(),
                                    "discussions": t.string().optional(),
                                    "emails": t.string().optional(),
                                    "environments": t.string().optional(),
                                    "issues": t.string().optional(),
                                    "keys": t.string().optional(),
                                    "members": t.string().optional(),
                                    "metadata": t.string().optional(),
                                    "organization_administration": t.string().optional(),
                                    "organization_hooks": t.string().optional(),
                                    "organization_packages": t.string().optional(),
                                    "organization_plan": t.string().optional(),
                                    "organization_projects": t.string().optional(),
                                    "organization_secrets": t.string().optional(),
                                    "organization_self_hosted_runners": t.string().optional(),
                                    "organization_user_blocking": t.string().optional(),
                                    "packages": t.string().optional(),
                                    "pages": t.string().optional(),
                                    "pull_requests": t.string().optional(),
                                    "repository_hooks": t.string().optional(),
                                    "repository_projects": t.string().optional(),
                                    "secret_scanning_alerts": t.string().optional(),
                                    "secrets": t.string().optional(),
                                    "security_events": t.string().optional(),
                                    "security_scanning_alert": t.string().optional(),
                                    "single_file": t.string().optional(),
                                    "statuses": t.string().optional(),
                                    "team_discussions": t.string().optional(),
                                    "vulnerability_alerts": t.string().optional(),
                                    "workflows": t.string().optional(),
                                }
                            ).optional(),
                            "slug": t.string().optional(),
                            "updated_at": t.string().optional(),
                        }
                    ).optional(),
                    "pull_request": t.struct(
                        {
                            "diff_url": t.string().optional(),
                            "html_url": t.string().optional(),
                            "merged_at": t.string().optional(),
                            "patch_url": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "repository_url": t.string(),
                    "state": t.string().optional(),
                    "state_reason": t.string().optional(),
                    "timeline_url": t.string().optional(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_issues_unpinned"])
    types["webhook_label_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_label_created"])
    types["webhook_label_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_label_deleted"])
    types["webhook_label_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "color": t.struct({"from": t.string()}).optional(),
                    "description": t.struct({"from": t.string()}).optional(),
                    "name": t.struct({"from": t.string()}).optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_label_edited"])
    types["webhook_marketplace_purchase_cancelled"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string().optional()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "previous_marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_marketplace_purchase_cancelled"])
    types["webhook_marketplace_purchase_changed"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string().optional()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "previous_marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean().optional(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_marketplace_purchase_changed"])
    types["webhook_marketplace_purchase_pending_change"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string().optional()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "previous_marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_marketplace_purchase_pending_change"])
    types["webhook_marketplace_purchase_pending_change_cancelled"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "previous_marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_marketplace_purchase_pending_change_cancelled"])
    types["webhook_marketplace_purchase_purchased"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.string().optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string().optional()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "previous_marketplace_purchase": t.struct(
                {
                    "account": t.struct(
                        {
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organization_billing_email": t.string().optional(),
                            "type": t.string(),
                        }
                    ),
                    "billing_cycle": t.string(),
                    "free_trial_ends_on": t.struct(
                        {"_": t.string().optional()}
                    ).optional(),
                    "next_billing_date": t.string().optional(),
                    "on_free_trial": t.boolean(),
                    "plan": t.struct(
                        {
                            "bullets": t.array(t.string()),
                            "description": t.string(),
                            "has_free_trial": t.boolean(),
                            "id": t.integer(),
                            "monthly_price_in_cents": t.integer(),
                            "name": t.string(),
                            "price_model": t.string(),
                            "unit_name": t.string().optional(),
                            "yearly_price_in_cents": t.integer(),
                        }
                    ),
                    "unit_count": t.integer(),
                }
            ).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_marketplace_purchase_purchased"])
    types["webhook_member_added"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {"permission": t.struct({"to": t.string()}).optional()}
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "member": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_member_added"])
    types["webhook_member_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "old_permission": t.struct({"from": t.string()}).optional(),
                    "permission": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "member": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_member_edited"])
    types["webhook_member_removed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "member": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_member_removed"])
    types["webhook_membership_added"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "member": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "scope": t.string(),
            "sender": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_membership_added"])
    types["webhook_membership_removed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "member": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "scope": t.string(),
            "sender": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_membership_removed"])
    types["webhook_merge_group_checks_requested"] = t.struct(
        {
            "action": t.string(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "merge_group": t.proxy(renames["merge_group"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_merge_group_checks_requested"])
    types["webhook_merge_group_destroyed"] = t.struct(
        {
            "action": t.string(),
            "reason": t.string().optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "merge_group": t.proxy(renames["merge_group"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_merge_group_destroyed"])
    types["webhook_meta_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "hook": t.struct(
                {
                    "active": t.boolean(),
                    "config": t.struct(
                        {
                            "content_type": t.string(),
                            "insecure_ssl": t.string(),
                            "secret": t.string().optional(),
                            "url": t.string(),
                        }
                    ),
                    "created_at": t.string(),
                    "events": t.array(t.string()),
                    "id": t.integer(),
                    "name": t.string(),
                    "type": t.string(),
                    "updated_at": t.string(),
                }
            ),
            "hook_id": t.integer(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["nullable_repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_meta_deleted"])
    types["webhook_milestone_closed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_milestone_closed"])
    types["webhook_milestone_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_milestone_created"])
    types["webhook_milestone_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_milestone_deleted"])
    types["webhook_milestone_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "description": t.struct({"from": t.string()}).optional(),
                    "due_on": t.struct({"from": t.string()}).optional(),
                    "title": t.struct({"from": t.string()}).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_milestone_edited"])
    types["webhook_milestone_opened"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "milestone": t.struct(
                {
                    "closed_at": t.string().optional(),
                    "closed_issues": t.integer(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "description": t.string().optional(),
                    "due_on": t.string().optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels_url": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "open_issues": t.integer(),
                    "state": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_milestone_opened"])
    types["webhook_org_block_blocked"] = t.struct(
        {
            "action": t.string(),
            "blocked_user": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_org_block_blocked"])
    types["webhook_org_block_unblocked"] = t.struct(
        {
            "action": t.string(),
            "blocked_user": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_org_block_unblocked"])
    types["webhook_organization_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "membership": t.struct(
                {
                    "organization_url": t.string(),
                    "role": t.string(),
                    "state": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_organization_deleted"])
    types["webhook_organization_member_added"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "membership": t.struct(
                {
                    "organization_url": t.string(),
                    "role": t.string(),
                    "state": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_organization_member_added"])
    types["webhook_organization_member_invited"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "invitation": t.struct(
                {
                    "created_at": t.string(),
                    "email": t.string().optional(),
                    "failed_at": t.string().optional(),
                    "failed_reason": t.string().optional(),
                    "id": t.number(),
                    "invitation_teams_url": t.string(),
                    "inviter": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "login": t.string().optional(),
                    "node_id": t.string(),
                    "role": t.string(),
                    "team_count": t.number(),
                    "invitation_source": t.string().optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "user": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["webhook_organization_member_invited"])
    types["webhook_organization_member_removed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "membership": t.struct(
                {
                    "organization_url": t.string(),
                    "role": t.string(),
                    "state": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_organization_member_removed"])
    types["webhook_organization_renamed"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {"login": t.struct({"from": t.string().optional()}).optional()}
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "membership": t.struct(
                {
                    "organization_url": t.string(),
                    "role": t.string(),
                    "state": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_organization_renamed"])
    types["webhook_rubygems_metadata"] = t.struct(
        {
            "name": t.string().optional(),
            "description": t.string().optional(),
            "readme": t.string().optional(),
            "homepage": t.string().optional(),
            "version_info": t.struct({"version": t.string().optional()}).optional(),
            "platform": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "repo": t.string().optional(),
            "dependencies": t.array(t.struct({})).optional(),
            "commit_oid": t.string().optional(),
        }
    ).named(renames["webhook_rubygems_metadata"])
    types["webhook_package_published"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "package": t.struct(
                {
                    "created_at": t.string().optional(),
                    "description": t.string().optional(),
                    "ecosystem": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "namespace": t.string(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "package_type": t.string(),
                    "package_version": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "body": t.either([t.string(), t.struct({})]).optional(),
                            "body_html": t.string().optional(),
                            "container_metadata": t.struct(
                                {
                                    "labels": t.struct({}).optional(),
                                    "manifest": t.struct({}).optional(),
                                    "tag": t.struct(
                                        {
                                            "digest": t.string().optional(),
                                            "name": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ).optional(),
                            "created_at": t.string().optional(),
                            "description": t.string(),
                            "docker_metadata": t.array(
                                t.struct({"tags": t.array(t.string()).optional()})
                            ).optional(),
                            "draft": t.boolean().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "installation_command": t.string(),
                            "manifest": t.string().optional(),
                            "metadata": t.array(t.struct({})),
                            "name": t.string(),
                            "npm_metadata": t.struct(
                                {
                                    "name": t.string().optional(),
                                    "version": t.string().optional(),
                                    "npm_user": t.string().optional(),
                                    "author": t.struct({}).optional(),
                                    "bugs": t.struct({}).optional(),
                                    "dependencies": t.struct({}).optional(),
                                    "dev_dependencies": t.struct({}).optional(),
                                    "peer_dependencies": t.struct({}).optional(),
                                    "optional_dependencies": t.struct({}).optional(),
                                    "description": t.string().optional(),
                                    "dist": t.struct({}).optional(),
                                    "git_head": t.string().optional(),
                                    "homepage": t.string().optional(),
                                    "license": t.string().optional(),
                                    "main": t.string().optional(),
                                    "repository": t.struct({}).optional(),
                                    "scripts": t.struct({}).optional(),
                                    "id": t.string().optional(),
                                    "node_version": t.string().optional(),
                                    "npm_version": t.string().optional(),
                                    "has_shrinkwrap": t.boolean().optional(),
                                    "maintainers": t.array(t.struct({})).optional(),
                                    "contributors": t.array(t.struct({})).optional(),
                                    "engines": t.struct({}).optional(),
                                    "keywords": t.array(t.string()).optional(),
                                    "files": t.array(t.string()).optional(),
                                    "bin": t.struct({}).optional(),
                                    "man": t.struct({}).optional(),
                                    "directories": t.struct({}).optional(),
                                    "os": t.array(t.string()).optional(),
                                    "cpu": t.array(t.string()).optional(),
                                    "readme": t.string().optional(),
                                    "installation_command": t.string().optional(),
                                    "release_id": t.integer().optional(),
                                    "commit_oid": t.string().optional(),
                                    "published_via_actions": t.boolean().optional(),
                                    "deleted_by_id": t.integer().optional(),
                                }
                            ).optional(),
                            "nuget_metadata": t.array(
                                t.struct(
                                    {
                                        "id": t.either(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "name": t.string().optional(),
                                        "value": t.either(
                                            [
                                                t.boolean(),
                                                t.string(),
                                                t.integer(),
                                                t.struct(
                                                    {
                                                        "url": t.string().optional(),
                                                        "branch": t.string().optional(),
                                                        "commit": t.string().optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ),
                                            ]
                                        ).optional(),
                                    }
                                )
                            ).optional(),
                            "package_files": t.array(
                                t.struct(
                                    {
                                        "content_type": t.string(),
                                        "created_at": t.string(),
                                        "download_url": t.string(),
                                        "id": t.integer(),
                                        "md5": t.string().optional(),
                                        "name": t.string(),
                                        "sha1": t.string().optional(),
                                        "sha256": t.string().optional(),
                                        "size": t.integer(),
                                        "state": t.string().optional(),
                                        "updated_at": t.string(),
                                    }
                                )
                            ),
                            "package_url": t.string().optional(),
                            "prerelease": t.boolean().optional(),
                            "release": t.struct(
                                {
                                    "author": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "created_at": t.string(),
                                    "draft": t.boolean(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "name": t.string().optional(),
                                    "prerelease": t.boolean(),
                                    "published_at": t.string(),
                                    "tag_name": t.string(),
                                    "target_commitish": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "rubygems_metadata": t.array(
                                t.proxy(renames["webhook_rubygems_metadata"])
                            ).optional(),
                            "source_url": t.string().optional(),
                            "summary": t.string(),
                            "tag_name": t.string().optional(),
                            "target_commitish": t.string().optional(),
                            "target_oid": t.string().optional(),
                            "updated_at": t.string().optional(),
                            "version": t.string(),
                        }
                    ).optional(),
                    "registry": t.struct(
                        {
                            "about_url": t.string(),
                            "name": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                            "vendor": t.string(),
                        }
                    ).optional(),
                    "updated_at": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_package_published"])
    types["webhook_package_updated"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "package": t.struct(
                {
                    "created_at": t.string(),
                    "description": t.string().optional(),
                    "ecosystem": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "namespace": t.string(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "package_type": t.string(),
                    "package_version": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "body": t.string(),
                            "body_html": t.string(),
                            "created_at": t.string(),
                            "description": t.string(),
                            "docker_metadata": t.array(
                                t.struct({"tags": t.array(t.string()).optional()})
                            ).optional(),
                            "draft": t.boolean().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "installation_command": t.string(),
                            "manifest": t.string().optional(),
                            "metadata": t.array(t.struct({})),
                            "name": t.string(),
                            "package_files": t.array(
                                t.struct(
                                    {
                                        "content_type": t.string(),
                                        "created_at": t.string(),
                                        "download_url": t.string(),
                                        "id": t.integer(),
                                        "md5": t.string().optional(),
                                        "name": t.string(),
                                        "sha1": t.string().optional(),
                                        "sha256": t.string(),
                                        "size": t.integer(),
                                        "state": t.string(),
                                        "updated_at": t.string(),
                                    }
                                )
                            ),
                            "package_url": t.string().optional(),
                            "prerelease": t.boolean().optional(),
                            "release": t.struct(
                                {
                                    "author": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "created_at": t.string(),
                                    "draft": t.boolean(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "name": t.string(),
                                    "prerelease": t.boolean(),
                                    "published_at": t.string(),
                                    "tag_name": t.string(),
                                    "target_commitish": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "rubygems_metadata": t.array(
                                t.proxy(renames["webhook_rubygems_metadata"])
                            ).optional(),
                            "source_url": t.string().optional(),
                            "summary": t.string(),
                            "tag_name": t.string().optional(),
                            "target_commitish": t.string(),
                            "target_oid": t.string(),
                            "updated_at": t.string(),
                            "version": t.string(),
                        }
                    ),
                    "registry": t.struct(
                        {
                            "about_url": t.string(),
                            "name": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                            "vendor": t.string(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_package_updated"])
    types["webhook_page_build"] = t.struct(
        {
            "build": t.struct(
                {
                    "commit": t.string().optional(),
                    "created_at": t.string(),
                    "duration": t.integer(),
                    "error": t.struct({"message": t.string().optional()}),
                    "pusher": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "status": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "id": t.integer(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_page_build"])
    types["webhook_personal_access_token_request_approved"] = t.struct(
        {
            "action": t.string(),
            "personal_access_token_request": t.proxy(
                renames["personal_access_token_request"]
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "sender": t.proxy(renames["simple_user"]),
            "installation": t.proxy(renames["simple_installation"]),
        }
    ).named(renames["webhook_personal_access_token_request_approved"])
    types["webhook_personal_access_token_request_cancelled"] = t.struct(
        {
            "action": t.string(),
            "personal_access_token_request": t.proxy(
                renames["personal_access_token_request"]
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "sender": t.proxy(renames["simple_user"]),
            "installation": t.proxy(renames["simple_installation"]),
        }
    ).named(renames["webhook_personal_access_token_request_cancelled"])
    types["webhook_personal_access_token_request_created"] = t.struct(
        {
            "action": t.string(),
            "personal_access_token_request": t.proxy(
                renames["personal_access_token_request"]
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "sender": t.proxy(renames["simple_user"]),
            "installation": t.proxy(renames["simple_installation"]),
        }
    ).named(renames["webhook_personal_access_token_request_created"])
    types["webhook_personal_access_token_request_denied"] = t.struct(
        {
            "action": t.string(),
            "personal_access_token_request": t.proxy(
                renames["personal_access_token_request"]
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "sender": t.proxy(renames["simple_user"]),
            "installation": t.proxy(renames["simple_installation"]),
        }
    ).named(renames["webhook_personal_access_token_request_denied"])
    types["webhook_ping"] = t.struct(
        {
            "hook": t.struct(
                {
                    "active": t.boolean(),
                    "app_id": t.integer().optional(),
                    "config": t.struct(
                        {
                            "content_type": t.proxy(
                                renames["webhook_config_content_type"]
                            ).optional(),
                            "insecure_ssl": t.proxy(
                                renames["webhook_config_insecure_ssl"]
                            ).optional(),
                            "secret": t.proxy(
                                renames["webhook_config_secret"]
                            ).optional(),
                            "url": t.proxy(renames["webhook_config_url"]).optional(),
                        }
                    ),
                    "created_at": t.string(),
                    "deliveries_url": t.string().optional(),
                    "events": t.array(t.string()),
                    "id": t.integer(),
                    "last_response": t.proxy(renames["hook_response"]).optional(),
                    "name": t.string(),
                    "ping_url": t.string().optional(),
                    "test_url": t.string().optional(),
                    "type": t.string(),
                    "updated_at": t.string(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "hook_id": t.integer().optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "zen": t.string().optional(),
        }
    ).named(renames["webhook_ping"])
    types["webhook_ping_form_encoded"] = t.struct({"payload": t.string()}).named(
        renames["webhook_ping_form_encoded"]
    )
    types["webhook_project_card_converted"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"note": t.struct({"from": t.string()})}),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_card": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "archived": t.boolean(),
                    "column_id": t.integer(),
                    "column_url": t.string(),
                    "content_url": t.string().optional(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "note": t.string().optional(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_card_converted"])
    types["webhook_project_card_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_card": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "archived": t.boolean(),
                    "column_id": t.integer(),
                    "column_url": t.string(),
                    "content_url": t.string().optional(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "note": t.string().optional(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_card_created"])
    types["webhook_project_card_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_card": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "archived": t.boolean(),
                    "column_id": t.integer().optional(),
                    "column_url": t.string(),
                    "content_url": t.string().optional(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "note": t.string().optional(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["nullable_repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_card_deleted"])
    types["webhook_project_card_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"note": t.struct({"from": t.string().optional()})}),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_card": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "archived": t.boolean(),
                    "column_id": t.integer(),
                    "column_url": t.string(),
                    "content_url": t.string().optional(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "note": t.string().optional(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_card_edited"])
    types["webhook_project_card_moved"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {"column_id": t.struct({"from": t.integer()})}
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_card": t.struct(
                {
                    "after_id": t.number().optional(),
                    "archived": t.boolean(),
                    "column_id": t.integer(),
                    "column_url": t.string(),
                    "content_url": t.string().optional(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "note": t.string().optional(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_card_moved"])
    types["webhook_project_closed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project": t.struct(
                {
                    "body": t.string().optional(),
                    "columns_url": t.string(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "owner_url": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_closed"])
    types["webhook_project_column_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_column": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "cards_url": t.string(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_project_column_created"])
    types["webhook_project_column_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_column": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "cards_url": t.string(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["nullable_repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_project_column_deleted"])
    types["webhook_project_column_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"name": t.struct({"from": t.string()}).optional()}),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_column": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "cards_url": t.string(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_project_column_edited"])
    types["webhook_project_column_moved"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project_column": t.struct(
                {
                    "after_id": t.integer().optional(),
                    "cards_url": t.string(),
                    "created_at": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "project_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_column_moved"])
    types["webhook_project_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project": t.struct(
                {
                    "body": t.string().optional(),
                    "columns_url": t.string(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "owner_url": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_created"])
    types["webhook_project_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project": t.struct(
                {
                    "body": t.string().optional(),
                    "columns_url": t.string(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "owner_url": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["nullable_repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_project_deleted"])
    types["webhook_project_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "body": t.struct({"from": t.string()}).optional(),
                    "name": t.struct({"from": t.string()}).optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project": t.struct(
                {
                    "body": t.string().optional(),
                    "columns_url": t.string(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "owner_url": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_project_edited"])
    types["webhook_project_reopened"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "project": t.struct(
                {
                    "body": t.string().optional(),
                    "columns_url": t.string(),
                    "created_at": t.string(),
                    "creator": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "owner_url": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_project_reopened"])
    types["webhook_projects_v2_project_closed"] = t.struct(
        {
            "action": t.string(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2": t.proxy(renames["projects_v2"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_project_closed"])
    types["webhook_projects_v2_project_created"] = t.struct(
        {
            "action": t.string(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2": t.proxy(renames["projects_v2"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_project_created"])
    types["webhook_projects_v2_project_deleted"] = t.struct(
        {
            "action": t.string(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2": t.proxy(renames["projects_v2"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_project_deleted"])
    types["webhook_projects_v2_project_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "description": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional(),
                    "public": t.struct(
                        {"from": t.boolean().optional(), "to": t.boolean().optional()}
                    ).optional(),
                    "short_description": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional(),
                    "title": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional(),
                }
            ),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2": t.proxy(renames["projects_v2"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_project_edited"])
    types["webhook_projects_v2_item_archived"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "archived_at": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional()
                }
            ),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_archived"])
    types["webhook_projects_v2_item_converted"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "content_type": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional()
                }
            ),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_converted"])
    types["webhook_projects_v2_item_created"] = t.struct(
        {
            "action": t.string(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_created"])
    types["webhook_projects_v2_item_deleted"] = t.struct(
        {
            "action": t.string(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_deleted"])
    types["webhook_projects_v2_item_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.either(
                [
                    t.struct(
                        {
                            "field_value": t.struct(
                                {
                                    "field_node_id": t.string().optional(),
                                    "field_type": t.string().optional(),
                                }
                            )
                        }
                    ),
                    t.struct(
                        {
                            "body": t.struct(
                                {
                                    "from": t.string().optional(),
                                    "to": t.string().optional(),
                                }
                            )
                        }
                    ),
                ]
            ).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_edited"])
    types["webhook_projects_v2_item_reordered"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "previous_projects_v2_item_node_id": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional()
                }
            ),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_reordered"])
    types["webhook_projects_v2_item_restored"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "archived_at": t.struct(
                        {"from": t.string().optional(), "to": t.string().optional()}
                    ).optional()
                }
            ),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2_item": t.proxy(renames["projects_v2_item"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_item_restored"])
    types["webhook_projects_v2_project_reopened"] = t.struct(
        {
            "action": t.string(),
            "organization": t.proxy(renames["organization_simple"]),
            "projects_v2": t.proxy(renames["projects_v2"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_projects_v2_project_reopened"])
    types["webhook_public"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_public"])
    types["webhook_pull_request_assigned"] = t.struct(
        {
            "action": t.string(),
            "assignee": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_assigned"])
    types["webhook_pull_request_auto_merge_disabled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "reason": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_auto_merge_disabled"])
    types["webhook_pull_request_auto_merge_enabled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "reason": t.string().optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_auto_merge_enabled"])
    types["webhook_pull_request_closed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_closed"])
    types["webhook_pull_request_converted_to_draft"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_converted_to_draft"])
    types["webhook_pull_request_demilestoned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "milestone": t.proxy(renames["milestone"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_pull_request_demilestoned"])
    types["webhook_pull_request_dequeued"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "reason": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_dequeued"])
    types["webhook_pull_request_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "base": t.struct(
                        {
                            "ref": t.struct({"from": t.string()}),
                            "sha": t.struct({"from": t.string()}),
                        }
                    ).optional(),
                    "body": t.struct({"from": t.string()}).optional(),
                    "title": t.struct({"from": t.string()}).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_pull_request_edited"])
    types["webhook_pull_request_enqueued"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_enqueued"])
    types["webhook_pull_request_labeled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_labeled"])
    types["webhook_pull_request_locked"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_locked"])
    types["webhook_pull_request_milestoned"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "milestone": t.proxy(renames["milestone"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_pull_request_milestoned"])
    types["webhook_pull_request_opened"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_opened"])
    types["webhook_pull_request_ready_for_review"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_ready_for_review"])
    types["webhook_pull_request_reopened"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "html_url": t.string(),
                    "diff_url": t.string(),
                    "patch_url": t.string(),
                    "issue_url": t.string(),
                    "commits_url": t.string(),
                    "review_comments_url": t.string(),
                    "review_comment_url": t.string(),
                    "comments_url": t.string(),
                    "statuses_url": t.string(),
                    "number": t.integer(),
                    "state": t.string(),
                    "locked": t.boolean(),
                    "title": t.string(),
                    "user": t.proxy(renames["simple_user"]),
                    "body": t.string().optional(),
                    "labels": t.array(
                        t.struct(
                            {
                                "id": t.integer(),
                                "node_id": t.string(),
                                "url": t.string(),
                                "name": t.string(),
                                "description": t.string().optional(),
                                "color": t.string(),
                                "default": t.boolean(),
                            }
                        )
                    ),
                    "milestone": t.proxy(renames["nullable_milestone"]),
                    "active_lock_reason": t.string().optional(),
                    "created_at": t.string(),
                    "updated_at": t.string(),
                    "closed_at": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "assignee": t.proxy(renames["nullable_simple_user"]),
                    "assignees": t.array(t.proxy(renames["simple_user"])).optional(),
                    "requested_reviewers": t.array(
                        t.proxy(renames["simple_user"])
                    ).optional(),
                    "requested_teams": t.array(
                        t.proxy(renames["team_simple"])
                    ).optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "url": t.string().optional(),
                                            "spdx_id": t.string().optional(),
                                            "node_id": t.string(),
                                        }
                                    ).optional(),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "is_template": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "archive_url": t.string(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "node_id": t.string(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "languages_url": t.string(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "name": t.string(),
                                    "notifications_url": t.string(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "node_id": t.string(),
                                            "login": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "private": t.boolean(),
                                    "pulls_url": t.string(),
                                    "releases_url": t.string(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "trees_url": t.string(),
                                    "url": t.string(),
                                    "clone_url": t.string(),
                                    "default_branch": t.string(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "language": t.string().optional(),
                                    "master_branch": t.string().optional(),
                                    "archived": t.boolean(),
                                    "disabled": t.boolean(),
                                    "visibility": t.string().optional(),
                                    "mirror_url": t.string().optional(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                            "pull": t.boolean(),
                                        }
                                    ).optional(),
                                    "temp_clone_token": t.string().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "license": t.proxy(
                                        renames["nullable_license_simple"]
                                    ),
                                    "pushed_at": t.string(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers_count": t.integer(),
                                    "svn_url": t.string(),
                                    "topics": t.array(t.string()).optional(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "created_at": t.string(),
                                    "updated_at": t.string(),
                                    "allow_forking": t.boolean().optional(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "node_id": t.string(),
                                    "login": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                        }
                    ),
                    "_links": t.struct(
                        {
                            "comments": t.proxy(renames["link"]),
                            "commits": t.proxy(renames["link"]),
                            "statuses": t.proxy(renames["link"]),
                            "html": t.proxy(renames["link"]),
                            "issue": t.proxy(renames["link"]),
                            "review_comments": t.proxy(renames["link"]),
                            "review_comment": t.proxy(renames["link"]),
                            "self": t.proxy(renames["link"]),
                        }
                    ),
                    "author_association": t.proxy(renames["author_association"]),
                    "auto_merge": t.proxy(renames["auto_merge"]),
                    "draft": t.boolean().optional(),
                    "merged": t.boolean(),
                    "mergeable": t.boolean().optional(),
                    "rebaseable": t.boolean().optional(),
                    "mergeable_state": t.string(),
                    "merged_by": t.proxy(renames["nullable_simple_user"]),
                    "comments": t.integer(),
                    "review_comments": t.integer(),
                    "maintainer_can_modify": t.boolean(),
                    "commits": t.integer(),
                    "additions": t.integer(),
                    "deletions": t.integer(),
                    "changed_files": t.integer(),
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "merge_commit_message": t.string().optional(),
                    "merge_commit_title": t.string().optional(),
                    "squash_merge_commit_message": t.string().optional(),
                    "squash_merge_commit_title": t.string().optional(),
                    "use_squash_pr_title_as_default": t.boolean().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_reopened"])
    types["webhook_pull_request_review_comment_created"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string(),
                    "commit_id": t.string(),
                    "created_at": t.string(),
                    "diff_hunk": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "in_reply_to_id": t.integer().optional(),
                    "line": t.integer().optional(),
                    "node_id": t.string(),
                    "original_commit_id": t.string(),
                    "original_line": t.integer().optional(),
                    "original_position": t.integer(),
                    "original_start_line": t.integer().optional(),
                    "path": t.string(),
                    "position": t.integer().optional(),
                    "pull_request_review_id": t.integer().optional(),
                    "pull_request_url": t.string(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "side": t.string(),
                    "start_line": t.integer().optional(),
                    "start_side": t.string().optional(),
                    "subject_type": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean().optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean().optional(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_comment_created"])
    types["webhook_pull_request_review_comment_deleted"] = t.struct(
        {
            "action": t.string(),
            "comment": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string(),
                    "commit_id": t.string(),
                    "created_at": t.string(),
                    "diff_hunk": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "in_reply_to_id": t.integer().optional(),
                    "line": t.integer().optional(),
                    "node_id": t.string(),
                    "original_commit_id": t.string(),
                    "original_line": t.integer(),
                    "original_position": t.integer(),
                    "original_start_line": t.integer().optional(),
                    "path": t.string(),
                    "position": t.integer().optional(),
                    "pull_request_review_id": t.integer().optional(),
                    "pull_request_url": t.string(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "side": t.string(),
                    "start_line": t.integer().optional(),
                    "start_side": t.string().optional(),
                    "subject_type": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean().optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_comment_deleted"])
    types["webhook_pull_request_review_comment_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"body": t.struct({"from": t.string()}).optional()}),
            "comment": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string(),
                    "commit_id": t.string(),
                    "created_at": t.string(),
                    "diff_hunk": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "in_reply_to_id": t.integer().optional(),
                    "line": t.integer().optional(),
                    "node_id": t.string(),
                    "original_commit_id": t.string(),
                    "original_line": t.integer(),
                    "original_position": t.integer(),
                    "original_start_line": t.integer().optional(),
                    "path": t.string(),
                    "position": t.integer().optional(),
                    "pull_request_review_id": t.integer().optional(),
                    "pull_request_url": t.string(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ),
                    "side": t.string(),
                    "start_line": t.integer().optional(),
                    "start_side": t.string().optional(),
                    "subject_type": t.string().optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean().optional(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_comment_edited"])
    types["webhook_pull_request_review_dismissed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "review": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "commit_id": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "pull_request_url": t.string(),
                    "state": t.string(),
                    "submitted_at": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_dismissed"])
    types["webhook_pull_request_review_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct({"body": t.struct({"from": t.string()}).optional()}),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "review": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "commit_id": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "pull_request_url": t.string(),
                    "state": t.string(),
                    "submitted_at": t.string().optional(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_edited"])
    types["webhook_pull_request_review_request_removed"] = t.either(
        [
            t.struct(
                {
                    "action": t.string(),
                    "enterprise": t.proxy(renames["enterprise"]).optional(),
                    "installation": t.proxy(renames["simple_installation"]).optional(),
                    "number": t.integer(),
                    "organization": t.proxy(renames["organization_simple"]).optional(),
                    "pull_request": t.struct(
                        {
                            "_links": t.struct(
                                {
                                    "comments": t.struct({"href": t.string()}),
                                    "commits": t.struct({"href": t.string()}),
                                    "html": t.struct({"href": t.string()}),
                                    "issue": t.struct({"href": t.string()}),
                                    "review_comment": t.struct({"href": t.string()}),
                                    "review_comments": t.struct({"href": t.string()}),
                                    "self": t.struct({"href": t.string()}),
                                    "statuses": t.struct({"href": t.string()}),
                                }
                            ),
                            "active_lock_reason": t.string().optional(),
                            "additions": t.integer().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "auto_merge": t.struct(
                                {
                                    "commit_message": t.string().optional(),
                                    "commit_title": t.string().optional(),
                                    "enabled_by": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "merge_method": t.string(),
                                }
                            ).optional(),
                            "base": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "body": t.string().optional(),
                            "changed_files": t.integer().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer().optional(),
                            "comments_url": t.string(),
                            "commits": t.integer().optional(),
                            "commits_url": t.string(),
                            "created_at": t.string(),
                            "deletions": t.integer().optional(),
                            "diff_url": t.string(),
                            "draft": t.boolean(),
                            "head": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_url": t.string(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "locked": t.boolean(),
                            "maintainer_can_modify": t.boolean().optional(),
                            "merge_commit_sha": t.string().optional(),
                            "mergeable": t.boolean().optional(),
                            "mergeable_state": t.string().optional(),
                            "merged": t.boolean().optional(),
                            "merged_at": t.string().optional(),
                            "merged_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "patch_url": t.string(),
                            "rebaseable": t.boolean().optional(),
                            "requested_reviewers": t.array(
                                t.either(
                                    [
                                        t.struct(
                                            {
                                                "avatar_url": t.string().optional(),
                                                "deleted": t.boolean().optional(),
                                                "email": t.string().optional(),
                                                "events_url": t.string().optional(),
                                                "followers_url": t.string().optional(),
                                                "following_url": t.string().optional(),
                                                "gists_url": t.string().optional(),
                                                "gravatar_id": t.string().optional(),
                                                "html_url": t.string().optional(),
                                                "id": t.integer(),
                                                "login": t.string(),
                                                "name": t.string().optional(),
                                                "node_id": t.string().optional(),
                                                "organizations_url": t.string().optional(),
                                                "received_events_url": t.string().optional(),
                                                "repos_url": t.string().optional(),
                                                "site_admin": t.boolean().optional(),
                                                "starred_url": t.string().optional(),
                                                "subscriptions_url": t.string().optional(),
                                                "type": t.string().optional(),
                                                "url": t.string().optional(),
                                            }
                                        ).optional(),
                                        t.struct(
                                            {
                                                "deleted": t.boolean().optional(),
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "parent": t.struct(
                                                    {
                                                        "description": t.string().optional(),
                                                        "html_url": t.string(),
                                                        "id": t.integer(),
                                                        "members_url": t.string(),
                                                        "name": t.string(),
                                                        "node_id": t.string(),
                                                        "permission": t.string(),
                                                        "privacy": t.string(),
                                                        "repositories_url": t.string(),
                                                        "slug": t.string(),
                                                        "url": t.string(),
                                                    }
                                                ).optional(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                    ]
                                )
                            ),
                            "requested_teams": t.array(
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "review_comment_url": t.string(),
                            "review_comments": t.integer().optional(),
                            "review_comments_url": t.string(),
                            "state": t.string(),
                            "statuses_url": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "repository": t.proxy(renames["repository"]),
                    "requested_reviewer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sender": t.proxy(renames["simple_user"]),
                }
            ),
            t.struct(
                {
                    "action": t.string(),
                    "enterprise": t.proxy(renames["enterprise"]).optional(),
                    "installation": t.proxy(renames["simple_installation"]).optional(),
                    "number": t.integer(),
                    "organization": t.proxy(renames["organization_simple"]).optional(),
                    "pull_request": t.struct(
                        {
                            "_links": t.struct(
                                {
                                    "comments": t.struct({"href": t.string()}),
                                    "commits": t.struct({"href": t.string()}),
                                    "html": t.struct({"href": t.string()}),
                                    "issue": t.struct({"href": t.string()}),
                                    "review_comment": t.struct({"href": t.string()}),
                                    "review_comments": t.struct({"href": t.string()}),
                                    "self": t.struct({"href": t.string()}),
                                    "statuses": t.struct({"href": t.string()}),
                                }
                            ),
                            "active_lock_reason": t.string().optional(),
                            "additions": t.integer().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "auto_merge": t.struct(
                                {
                                    "commit_message": t.string().optional(),
                                    "commit_title": t.string().optional(),
                                    "enabled_by": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "merge_method": t.string(),
                                }
                            ).optional(),
                            "base": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "body": t.string().optional(),
                            "changed_files": t.integer().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer().optional(),
                            "comments_url": t.string(),
                            "commits": t.integer().optional(),
                            "commits_url": t.string(),
                            "created_at": t.string(),
                            "deletions": t.integer().optional(),
                            "diff_url": t.string(),
                            "draft": t.boolean(),
                            "head": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_url": t.string(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "locked": t.boolean(),
                            "maintainer_can_modify": t.boolean().optional(),
                            "merge_commit_sha": t.string().optional(),
                            "mergeable": t.boolean().optional(),
                            "mergeable_state": t.string().optional(),
                            "merged": t.boolean().optional(),
                            "merged_at": t.string().optional(),
                            "merged_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "patch_url": t.string(),
                            "rebaseable": t.boolean().optional(),
                            "requested_reviewers": t.array(
                                t.either(
                                    [
                                        t.struct(
                                            {
                                                "avatar_url": t.string().optional(),
                                                "deleted": t.boolean().optional(),
                                                "email": t.string().optional(),
                                                "events_url": t.string().optional(),
                                                "followers_url": t.string().optional(),
                                                "following_url": t.string().optional(),
                                                "gists_url": t.string().optional(),
                                                "gravatar_id": t.string().optional(),
                                                "html_url": t.string().optional(),
                                                "id": t.integer(),
                                                "login": t.string(),
                                                "name": t.string().optional(),
                                                "node_id": t.string().optional(),
                                                "organizations_url": t.string().optional(),
                                                "received_events_url": t.string().optional(),
                                                "repos_url": t.string().optional(),
                                                "site_admin": t.boolean().optional(),
                                                "starred_url": t.string().optional(),
                                                "subscriptions_url": t.string().optional(),
                                                "type": t.string().optional(),
                                                "url": t.string().optional(),
                                            }
                                        ).optional(),
                                        t.struct(
                                            {
                                                "deleted": t.boolean().optional(),
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "parent": t.struct(
                                                    {
                                                        "description": t.string().optional(),
                                                        "html_url": t.string(),
                                                        "id": t.integer(),
                                                        "members_url": t.string(),
                                                        "name": t.string(),
                                                        "node_id": t.string(),
                                                        "permission": t.string(),
                                                        "privacy": t.string(),
                                                        "repositories_url": t.string(),
                                                        "slug": t.string(),
                                                        "url": t.string(),
                                                    }
                                                ).optional(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                    ]
                                )
                            ),
                            "requested_teams": t.array(
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "review_comment_url": t.string(),
                            "review_comments": t.integer().optional(),
                            "review_comments_url": t.string(),
                            "state": t.string(),
                            "statuses_url": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "repository": t.proxy(renames["repository"]),
                    "requested_team": t.struct(
                        {
                            "deleted": t.boolean().optional(),
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "parent": t.struct(
                                {
                                    "description": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "members_url": t.string(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "permission": t.string(),
                                    "privacy": t.string(),
                                    "repositories_url": t.string(),
                                    "slug": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "sender": t.proxy(renames["simple_user"]),
                }
            ),
        ]
    ).named(renames["webhook_pull_request_review_request_removed"])
    types["webhook_pull_request_review_requested"] = t.either(
        [
            t.struct(
                {
                    "action": t.string(),
                    "enterprise": t.proxy(renames["enterprise"]).optional(),
                    "installation": t.proxy(renames["simple_installation"]).optional(),
                    "number": t.integer(),
                    "organization": t.proxy(renames["organization_simple"]).optional(),
                    "pull_request": t.struct(
                        {
                            "_links": t.struct(
                                {
                                    "comments": t.struct({"href": t.string()}),
                                    "commits": t.struct({"href": t.string()}),
                                    "html": t.struct({"href": t.string()}),
                                    "issue": t.struct({"href": t.string()}),
                                    "review_comment": t.struct({"href": t.string()}),
                                    "review_comments": t.struct({"href": t.string()}),
                                    "self": t.struct({"href": t.string()}),
                                    "statuses": t.struct({"href": t.string()}),
                                }
                            ),
                            "active_lock_reason": t.string().optional(),
                            "additions": t.integer().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "auto_merge": t.struct(
                                {
                                    "commit_message": t.string().optional(),
                                    "commit_title": t.string().optional(),
                                    "enabled_by": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "merge_method": t.string(),
                                }
                            ).optional(),
                            "base": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "body": t.string().optional(),
                            "changed_files": t.integer().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer().optional(),
                            "comments_url": t.string(),
                            "commits": t.integer().optional(),
                            "commits_url": t.string(),
                            "created_at": t.string(),
                            "deletions": t.integer().optional(),
                            "diff_url": t.string(),
                            "draft": t.boolean(),
                            "head": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_url": t.string(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "locked": t.boolean(),
                            "maintainer_can_modify": t.boolean().optional(),
                            "merge_commit_sha": t.string().optional(),
                            "mergeable": t.boolean().optional(),
                            "mergeable_state": t.string().optional(),
                            "merged": t.boolean().optional(),
                            "merged_at": t.string().optional(),
                            "merged_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "patch_url": t.string(),
                            "rebaseable": t.boolean().optional(),
                            "requested_reviewers": t.array(
                                t.either(
                                    [
                                        t.struct(
                                            {
                                                "avatar_url": t.string().optional(),
                                                "deleted": t.boolean().optional(),
                                                "email": t.string().optional(),
                                                "events_url": t.string().optional(),
                                                "followers_url": t.string().optional(),
                                                "following_url": t.string().optional(),
                                                "gists_url": t.string().optional(),
                                                "gravatar_id": t.string().optional(),
                                                "html_url": t.string().optional(),
                                                "id": t.integer(),
                                                "login": t.string(),
                                                "name": t.string().optional(),
                                                "node_id": t.string().optional(),
                                                "organizations_url": t.string().optional(),
                                                "received_events_url": t.string().optional(),
                                                "repos_url": t.string().optional(),
                                                "site_admin": t.boolean().optional(),
                                                "starred_url": t.string().optional(),
                                                "subscriptions_url": t.string().optional(),
                                                "type": t.string().optional(),
                                                "url": t.string().optional(),
                                            }
                                        ).optional(),
                                        t.struct(
                                            {
                                                "deleted": t.boolean().optional(),
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "parent": t.struct(
                                                    {
                                                        "description": t.string().optional(),
                                                        "html_url": t.string(),
                                                        "id": t.integer(),
                                                        "members_url": t.string(),
                                                        "name": t.string(),
                                                        "node_id": t.string(),
                                                        "permission": t.string(),
                                                        "privacy": t.string(),
                                                        "repositories_url": t.string(),
                                                        "slug": t.string(),
                                                        "url": t.string(),
                                                    }
                                                ).optional(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                    ]
                                )
                            ),
                            "requested_teams": t.array(
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                )
                            ),
                            "review_comment_url": t.string(),
                            "review_comments": t.integer().optional(),
                            "review_comments_url": t.string(),
                            "state": t.string(),
                            "statuses_url": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "repository": t.proxy(renames["repository"]),
                    "requested_reviewer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sender": t.proxy(renames["simple_user"]),
                }
            ),
            t.struct(
                {
                    "action": t.string(),
                    "enterprise": t.proxy(renames["enterprise"]).optional(),
                    "installation": t.proxy(renames["simple_installation"]).optional(),
                    "number": t.integer(),
                    "organization": t.proxy(renames["organization_simple"]).optional(),
                    "pull_request": t.struct(
                        {
                            "_links": t.struct(
                                {
                                    "comments": t.struct({"href": t.string()}),
                                    "commits": t.struct({"href": t.string()}),
                                    "html": t.struct({"href": t.string()}),
                                    "issue": t.struct({"href": t.string()}),
                                    "review_comment": t.struct({"href": t.string()}),
                                    "review_comments": t.struct({"href": t.string()}),
                                    "self": t.struct({"href": t.string()}),
                                    "statuses": t.struct({"href": t.string()}),
                                }
                            ),
                            "active_lock_reason": t.string().optional(),
                            "additions": t.integer().optional(),
                            "assignee": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "assignees": t.array(
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional()
                            ),
                            "author_association": t.string(),
                            "auto_merge": t.struct(
                                {
                                    "commit_message": t.string().optional(),
                                    "commit_title": t.string().optional(),
                                    "enabled_by": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "merge_method": t.string(),
                                }
                            ).optional(),
                            "base": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "body": t.string().optional(),
                            "changed_files": t.integer().optional(),
                            "closed_at": t.string().optional(),
                            "comments": t.integer().optional(),
                            "comments_url": t.string(),
                            "commits": t.integer().optional(),
                            "commits_url": t.string(),
                            "created_at": t.string(),
                            "deletions": t.integer().optional(),
                            "diff_url": t.string(),
                            "draft": t.boolean(),
                            "head": t.struct(
                                {
                                    "label": t.string(),
                                    "ref": t.string(),
                                    "repo": t.struct(
                                        {
                                            "allow_auto_merge": t.boolean().optional(),
                                            "allow_forking": t.boolean().optional(),
                                            "allow_merge_commit": t.boolean().optional(),
                                            "allow_rebase_merge": t.boolean().optional(),
                                            "allow_squash_merge": t.boolean().optional(),
                                            "allow_update_branch": t.boolean().optional(),
                                            "archive_url": t.string(),
                                            "archived": t.boolean(),
                                            "assignees_url": t.string(),
                                            "blobs_url": t.string(),
                                            "branches_url": t.string(),
                                            "clone_url": t.string(),
                                            "collaborators_url": t.string(),
                                            "comments_url": t.string(),
                                            "commits_url": t.string(),
                                            "compare_url": t.string(),
                                            "contents_url": t.string(),
                                            "contributors_url": t.string(),
                                            "created_at": t.either(
                                                [t.integer(), t.string()]
                                            ),
                                            "default_branch": t.string(),
                                            "delete_branch_on_merge": t.boolean().optional(),
                                            "deployments_url": t.string(),
                                            "description": t.string().optional(),
                                            "disabled": t.boolean().optional(),
                                            "downloads_url": t.string(),
                                            "events_url": t.string(),
                                            "fork": t.boolean(),
                                            "forks": t.integer(),
                                            "forks_count": t.integer(),
                                            "forks_url": t.string(),
                                            "full_name": t.string(),
                                            "git_commits_url": t.string(),
                                            "git_refs_url": t.string(),
                                            "git_tags_url": t.string(),
                                            "git_url": t.string(),
                                            "has_downloads": t.boolean(),
                                            "has_issues": t.boolean(),
                                            "has_pages": t.boolean(),
                                            "has_projects": t.boolean(),
                                            "has_wiki": t.boolean(),
                                            "has_discussions": t.boolean(),
                                            "homepage": t.string().optional(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "is_template": t.boolean().optional(),
                                            "issue_comment_url": t.string(),
                                            "issue_events_url": t.string(),
                                            "issues_url": t.string(),
                                            "keys_url": t.string(),
                                            "labels_url": t.string(),
                                            "language": t.string().optional(),
                                            "languages_url": t.string(),
                                            "license": t.struct(
                                                {
                                                    "key": t.string(),
                                                    "name": t.string(),
                                                    "node_id": t.string(),
                                                    "spdx_id": t.string(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "master_branch": t.string().optional(),
                                            "merge_commit_message": t.string().optional(),
                                            "merge_commit_title": t.string().optional(),
                                            "merges_url": t.string(),
                                            "milestones_url": t.string(),
                                            "mirror_url": t.string().optional(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "notifications_url": t.string(),
                                            "open_issues": t.integer(),
                                            "open_issues_count": t.integer(),
                                            "organization": t.string().optional(),
                                            "owner": t.struct(
                                                {
                                                    "avatar_url": t.string().optional(),
                                                    "deleted": t.boolean().optional(),
                                                    "email": t.string().optional(),
                                                    "events_url": t.string().optional(),
                                                    "followers_url": t.string().optional(),
                                                    "following_url": t.string().optional(),
                                                    "gists_url": t.string().optional(),
                                                    "gravatar_id": t.string().optional(),
                                                    "html_url": t.string().optional(),
                                                    "id": t.integer(),
                                                    "login": t.string(),
                                                    "name": t.string().optional(),
                                                    "node_id": t.string().optional(),
                                                    "organizations_url": t.string().optional(),
                                                    "received_events_url": t.string().optional(),
                                                    "repos_url": t.string().optional(),
                                                    "site_admin": t.boolean().optional(),
                                                    "starred_url": t.string().optional(),
                                                    "subscriptions_url": t.string().optional(),
                                                    "type": t.string().optional(),
                                                    "url": t.string().optional(),
                                                }
                                            ).optional(),
                                            "permissions": t.struct(
                                                {
                                                    "admin": t.boolean(),
                                                    "maintain": t.boolean().optional(),
                                                    "pull": t.boolean(),
                                                    "push": t.boolean(),
                                                    "triage": t.boolean().optional(),
                                                }
                                            ).optional(),
                                            "private": t.boolean(),
                                            "public": t.boolean().optional(),
                                            "pulls_url": t.string(),
                                            "pushed_at": t.either(
                                                [t.integer(), t.string()]
                                            ).optional(),
                                            "releases_url": t.string(),
                                            "role_name": t.string().optional(),
                                            "size": t.integer(),
                                            "squash_merge_commit_message": t.string().optional(),
                                            "squash_merge_commit_title": t.string().optional(),
                                            "ssh_url": t.string(),
                                            "stargazers": t.integer().optional(),
                                            "stargazers_count": t.integer(),
                                            "stargazers_url": t.string(),
                                            "statuses_url": t.string(),
                                            "subscribers_url": t.string(),
                                            "subscription_url": t.string(),
                                            "svn_url": t.string(),
                                            "tags_url": t.string(),
                                            "teams_url": t.string(),
                                            "topics": t.array(t.string()),
                                            "trees_url": t.string(),
                                            "updated_at": t.string(),
                                            "url": t.string(),
                                            "use_squash_pr_title_as_default": t.boolean().optional(),
                                            "visibility": t.string(),
                                            "watchers": t.integer(),
                                            "watchers_count": t.integer(),
                                            "web_commit_signoff_required": t.boolean().optional(),
                                        }
                                    ),
                                    "sha": t.string(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_url": t.string(),
                            "labels": t.array(
                                t.struct(
                                    {
                                        "color": t.string(),
                                        "default": t.boolean(),
                                        "description": t.string().optional(),
                                        "id": t.integer(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "url": t.string(),
                                    }
                                )
                            ),
                            "locked": t.boolean(),
                            "maintainer_can_modify": t.boolean().optional(),
                            "merge_commit_sha": t.string().optional(),
                            "mergeable": t.boolean().optional(),
                            "mergeable_state": t.string().optional(),
                            "merged": t.boolean().optional(),
                            "merged_at": t.string().optional(),
                            "merged_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "milestone": t.struct(
                                {
                                    "closed_at": t.string().optional(),
                                    "closed_issues": t.integer(),
                                    "created_at": t.string(),
                                    "creator": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "description": t.string().optional(),
                                    "due_on": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "labels_url": t.string(),
                                    "node_id": t.string(),
                                    "number": t.integer(),
                                    "open_issues": t.integer(),
                                    "state": t.string(),
                                    "title": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "patch_url": t.string(),
                            "rebaseable": t.boolean().optional(),
                            "requested_reviewers": t.array(
                                t.either(
                                    [
                                        t.struct(
                                            {
                                                "avatar_url": t.string().optional(),
                                                "deleted": t.boolean().optional(),
                                                "email": t.string().optional(),
                                                "events_url": t.string().optional(),
                                                "followers_url": t.string().optional(),
                                                "following_url": t.string().optional(),
                                                "gists_url": t.string().optional(),
                                                "gravatar_id": t.string().optional(),
                                                "html_url": t.string().optional(),
                                                "id": t.integer(),
                                                "login": t.string(),
                                                "name": t.string().optional(),
                                                "node_id": t.string().optional(),
                                                "organizations_url": t.string().optional(),
                                                "received_events_url": t.string().optional(),
                                                "repos_url": t.string().optional(),
                                                "site_admin": t.boolean().optional(),
                                                "starred_url": t.string().optional(),
                                                "subscriptions_url": t.string().optional(),
                                                "type": t.string().optional(),
                                                "url": t.string().optional(),
                                            }
                                        ).optional(),
                                        t.struct(
                                            {
                                                "deleted": t.boolean().optional(),
                                                "description": t.string().optional(),
                                                "html_url": t.string().optional(),
                                                "id": t.integer(),
                                                "members_url": t.string().optional(),
                                                "name": t.string(),
                                                "node_id": t.string().optional(),
                                                "parent": t.struct(
                                                    {
                                                        "description": t.string().optional(),
                                                        "html_url": t.string(),
                                                        "id": t.integer(),
                                                        "members_url": t.string(),
                                                        "name": t.string(),
                                                        "node_id": t.string(),
                                                        "permission": t.string(),
                                                        "privacy": t.string(),
                                                        "repositories_url": t.string(),
                                                        "slug": t.string(),
                                                        "url": t.string(),
                                                    }
                                                ).optional(),
                                                "permission": t.string().optional(),
                                                "privacy": t.string().optional(),
                                                "repositories_url": t.string().optional(),
                                                "slug": t.string().optional(),
                                                "url": t.string().optional(),
                                            }
                                        ),
                                    ]
                                )
                            ),
                            "requested_teams": t.array(
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                )
                            ),
                            "review_comment_url": t.string(),
                            "review_comments": t.integer().optional(),
                            "review_comments_url": t.string(),
                            "state": t.string(),
                            "statuses_url": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "repository": t.proxy(renames["repository"]),
                    "requested_team": t.struct(
                        {
                            "deleted": t.boolean().optional(),
                            "description": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "members_url": t.string().optional(),
                            "name": t.string(),
                            "node_id": t.string().optional(),
                            "parent": t.struct(
                                {
                                    "description": t.string().optional(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "members_url": t.string(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "permission": t.string(),
                                    "privacy": t.string(),
                                    "repositories_url": t.string(),
                                    "slug": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "permission": t.string().optional(),
                            "privacy": t.string().optional(),
                            "repositories_url": t.string().optional(),
                            "slug": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ),
                    "sender": t.proxy(renames["simple_user"]),
                }
            ),
        ]
    ).named(renames["webhook_pull_request_review_requested"])
    types["webhook_pull_request_review_submitted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "review": t.struct(
                {
                    "_links": t.struct(
                        {
                            "html": t.struct({"href": t.string()}),
                            "pull_request": t.struct({"href": t.string()}),
                        }
                    ),
                    "author_association": t.string(),
                    "body": t.string().optional(),
                    "commit_id": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "pull_request_url": t.string(),
                    "state": t.string(),
                    "submitted_at": t.string().optional(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_review_submitted"])
    types["webhook_pull_request_review_thread_resolved"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "thread": t.struct(
                {
                    "comments": t.array(
                        t.struct(
                            {
                                "_links": t.struct(
                                    {
                                        "html": t.struct({"href": t.string()}),
                                        "pull_request": t.struct({"href": t.string()}),
                                        "self": t.struct({"href": t.string()}),
                                    }
                                ),
                                "author_association": t.string(),
                                "body": t.string(),
                                "commit_id": t.string(),
                                "created_at": t.string(),
                                "diff_hunk": t.string(),
                                "html_url": t.string(),
                                "id": t.integer(),
                                "in_reply_to_id": t.integer().optional(),
                                "line": t.integer().optional(),
                                "node_id": t.string(),
                                "original_commit_id": t.string(),
                                "original_line": t.integer().optional(),
                                "original_position": t.integer(),
                                "original_start_line": t.integer().optional(),
                                "path": t.string(),
                                "position": t.integer().optional(),
                                "pull_request_review_id": t.integer().optional(),
                                "pull_request_url": t.string(),
                                "reactions": t.struct(
                                    {
                                        "+1": t.integer(),
                                        "-1": t.integer(),
                                        "confused": t.integer(),
                                        "eyes": t.integer(),
                                        "heart": t.integer(),
                                        "hooray": t.integer(),
                                        "laugh": t.integer(),
                                        "rocket": t.integer(),
                                        "total_count": t.integer(),
                                        "url": t.string(),
                                    }
                                ),
                                "side": t.string(),
                                "start_line": t.integer().optional(),
                                "start_side": t.string().optional(),
                                "subject_type": t.string().optional(),
                                "updated_at": t.string(),
                                "url": t.string(),
                                "user": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        )
                    ),
                    "node_id": t.string(),
                }
            ),
        }
    ).named(renames["webhook_pull_request_review_thread_resolved"])
    types["webhook_pull_request_review_thread_unresolved"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "closed_at": t.string().optional(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "merge_commit_sha": t.string().optional(),
                    "merged_at": t.string().optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "thread": t.struct(
                {
                    "comments": t.array(
                        t.struct(
                            {
                                "_links": t.struct(
                                    {
                                        "html": t.struct({"href": t.string()}),
                                        "pull_request": t.struct({"href": t.string()}),
                                        "self": t.struct({"href": t.string()}),
                                    }
                                ),
                                "author_association": t.string(),
                                "body": t.string(),
                                "commit_id": t.string(),
                                "created_at": t.string(),
                                "diff_hunk": t.string(),
                                "html_url": t.string(),
                                "id": t.integer(),
                                "in_reply_to_id": t.integer().optional(),
                                "line": t.integer().optional(),
                                "node_id": t.string(),
                                "original_commit_id": t.string(),
                                "original_line": t.integer(),
                                "original_position": t.integer(),
                                "original_start_line": t.integer().optional(),
                                "path": t.string(),
                                "position": t.integer().optional(),
                                "pull_request_review_id": t.integer().optional(),
                                "pull_request_url": t.string(),
                                "reactions": t.struct(
                                    {
                                        "+1": t.integer(),
                                        "-1": t.integer(),
                                        "confused": t.integer(),
                                        "eyes": t.integer(),
                                        "heart": t.integer(),
                                        "hooray": t.integer(),
                                        "laugh": t.integer(),
                                        "rocket": t.integer(),
                                        "total_count": t.integer(),
                                        "url": t.string(),
                                    }
                                ),
                                "side": t.string(),
                                "start_line": t.integer().optional(),
                                "start_side": t.string().optional(),
                                "subject_type": t.string().optional(),
                                "updated_at": t.string(),
                                "url": t.string(),
                                "user": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        )
                    ),
                    "node_id": t.string(),
                }
            ),
        }
    ).named(renames["webhook_pull_request_review_thread_unresolved"])
    types["webhook_pull_request_synchronize"] = t.struct(
        {
            "action": t.string(),
            "after": t.string(),
            "before": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_synchronize"])
    types["webhook_pull_request_unassigned"] = t.struct(
        {
            "action": t.string(),
            "assignee": t.struct(
                {
                    "avatar_url": t.string().optional(),
                    "deleted": t.boolean().optional(),
                    "email": t.string().optional(),
                    "events_url": t.string().optional(),
                    "followers_url": t.string().optional(),
                    "following_url": t.string().optional(),
                    "gists_url": t.string().optional(),
                    "gravatar_id": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "login": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string().optional(),
                    "organizations_url": t.string().optional(),
                    "received_events_url": t.string().optional(),
                    "repos_url": t.string().optional(),
                    "site_admin": t.boolean().optional(),
                    "starred_url": t.string().optional(),
                    "subscriptions_url": t.string().optional(),
                    "type": t.string().optional(),
                    "url": t.string().optional(),
                }
            ).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_pull_request_unassigned"])
    types["webhook_pull_request_unlabeled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "label": t.struct(
                {
                    "color": t.string(),
                    "default": t.boolean(),
                    "description": t.string().optional(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string().optional(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string().optional(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_unlabeled"])
    types["webhook_pull_request_unlocked"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "number": t.integer(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pull_request": t.struct(
                {
                    "_links": t.struct(
                        {
                            "comments": t.struct({"href": t.string()}),
                            "commits": t.struct({"href": t.string()}),
                            "html": t.struct({"href": t.string()}),
                            "issue": t.struct({"href": t.string()}),
                            "review_comment": t.struct({"href": t.string()}),
                            "review_comments": t.struct({"href": t.string()}),
                            "self": t.struct({"href": t.string()}),
                            "statuses": t.struct({"href": t.string()}),
                        }
                    ),
                    "active_lock_reason": t.string().optional(),
                    "additions": t.integer().optional(),
                    "assignee": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "assignees": t.array(
                        t.struct(
                            {
                                "avatar_url": t.string().optional(),
                                "deleted": t.boolean().optional(),
                                "email": t.string().optional(),
                                "events_url": t.string().optional(),
                                "followers_url": t.string().optional(),
                                "following_url": t.string().optional(),
                                "gists_url": t.string().optional(),
                                "gravatar_id": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "login": t.string(),
                                "name": t.string().optional(),
                                "node_id": t.string().optional(),
                                "organizations_url": t.string().optional(),
                                "received_events_url": t.string().optional(),
                                "repos_url": t.string().optional(),
                                "site_admin": t.boolean().optional(),
                                "starred_url": t.string().optional(),
                                "subscriptions_url": t.string().optional(),
                                "type": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        ).optional()
                    ),
                    "author_association": t.string(),
                    "auto_merge": t.struct(
                        {
                            "commit_message": t.string().optional(),
                            "commit_title": t.string(),
                            "enabled_by": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "merge_method": t.string(),
                        }
                    ).optional(),
                    "base": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "body": t.string().optional(),
                    "changed_files": t.integer().optional(),
                    "closed_at": t.string().optional(),
                    "comments": t.integer().optional(),
                    "comments_url": t.string(),
                    "commits": t.integer().optional(),
                    "commits_url": t.string(),
                    "created_at": t.string(),
                    "deletions": t.integer().optional(),
                    "diff_url": t.string(),
                    "draft": t.boolean(),
                    "head": t.struct(
                        {
                            "label": t.string(),
                            "ref": t.string(),
                            "repo": t.struct(
                                {
                                    "allow_auto_merge": t.boolean().optional(),
                                    "allow_forking": t.boolean().optional(),
                                    "allow_merge_commit": t.boolean().optional(),
                                    "allow_rebase_merge": t.boolean().optional(),
                                    "allow_squash_merge": t.boolean().optional(),
                                    "allow_update_branch": t.boolean().optional(),
                                    "archive_url": t.string(),
                                    "archived": t.boolean(),
                                    "assignees_url": t.string(),
                                    "blobs_url": t.string(),
                                    "branches_url": t.string(),
                                    "clone_url": t.string(),
                                    "collaborators_url": t.string(),
                                    "comments_url": t.string(),
                                    "commits_url": t.string(),
                                    "compare_url": t.string(),
                                    "contents_url": t.string(),
                                    "contributors_url": t.string(),
                                    "created_at": t.either([t.integer(), t.string()]),
                                    "default_branch": t.string(),
                                    "delete_branch_on_merge": t.boolean().optional(),
                                    "deployments_url": t.string(),
                                    "description": t.string().optional(),
                                    "disabled": t.boolean().optional(),
                                    "downloads_url": t.string(),
                                    "events_url": t.string(),
                                    "fork": t.boolean(),
                                    "forks": t.integer(),
                                    "forks_count": t.integer(),
                                    "forks_url": t.string(),
                                    "full_name": t.string(),
                                    "git_commits_url": t.string(),
                                    "git_refs_url": t.string(),
                                    "git_tags_url": t.string(),
                                    "git_url": t.string(),
                                    "has_downloads": t.boolean(),
                                    "has_issues": t.boolean(),
                                    "has_pages": t.boolean(),
                                    "has_projects": t.boolean(),
                                    "has_wiki": t.boolean(),
                                    "has_discussions": t.boolean(),
                                    "homepage": t.string().optional(),
                                    "hooks_url": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "is_template": t.boolean().optional(),
                                    "issue_comment_url": t.string(),
                                    "issue_events_url": t.string(),
                                    "issues_url": t.string(),
                                    "keys_url": t.string(),
                                    "labels_url": t.string(),
                                    "language": t.string().optional(),
                                    "languages_url": t.string(),
                                    "license": t.struct(
                                        {
                                            "key": t.string(),
                                            "name": t.string(),
                                            "node_id": t.string(),
                                            "spdx_id": t.string(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "master_branch": t.string().optional(),
                                    "merge_commit_message": t.string().optional(),
                                    "merge_commit_title": t.string().optional(),
                                    "merges_url": t.string(),
                                    "milestones_url": t.string(),
                                    "mirror_url": t.string().optional(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                    "notifications_url": t.string(),
                                    "open_issues": t.integer(),
                                    "open_issues_count": t.integer(),
                                    "organization": t.string().optional(),
                                    "owner": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "permissions": t.struct(
                                        {
                                            "admin": t.boolean(),
                                            "maintain": t.boolean().optional(),
                                            "pull": t.boolean(),
                                            "push": t.boolean(),
                                            "triage": t.boolean().optional(),
                                        }
                                    ).optional(),
                                    "private": t.boolean(),
                                    "public": t.boolean().optional(),
                                    "pulls_url": t.string(),
                                    "pushed_at": t.either(
                                        [t.integer(), t.string()]
                                    ).optional(),
                                    "releases_url": t.string(),
                                    "role_name": t.string().optional(),
                                    "size": t.integer(),
                                    "squash_merge_commit_message": t.string().optional(),
                                    "squash_merge_commit_title": t.string().optional(),
                                    "ssh_url": t.string(),
                                    "stargazers": t.integer().optional(),
                                    "stargazers_count": t.integer(),
                                    "stargazers_url": t.string(),
                                    "statuses_url": t.string(),
                                    "subscribers_url": t.string(),
                                    "subscription_url": t.string(),
                                    "svn_url": t.string(),
                                    "tags_url": t.string(),
                                    "teams_url": t.string(),
                                    "topics": t.array(t.string()),
                                    "trees_url": t.string(),
                                    "updated_at": t.string(),
                                    "url": t.string(),
                                    "use_squash_pr_title_as_default": t.boolean().optional(),
                                    "visibility": t.string(),
                                    "watchers": t.integer(),
                                    "watchers_count": t.integer(),
                                    "web_commit_signoff_required": t.boolean().optional(),
                                }
                            ).optional(),
                            "sha": t.string(),
                            "user": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                        }
                    ),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "issue_url": t.string(),
                    "labels": t.array(
                        t.struct(
                            {
                                "color": t.string(),
                                "default": t.boolean(),
                                "description": t.string().optional(),
                                "id": t.integer(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "locked": t.boolean(),
                    "maintainer_can_modify": t.boolean().optional(),
                    "merge_commit_sha": t.string().optional(),
                    "mergeable": t.boolean().optional(),
                    "mergeable_state": t.string().optional(),
                    "merged": t.boolean().optional(),
                    "merged_at": t.string().optional(),
                    "merged_by": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "milestone": t.struct(
                        {
                            "closed_at": t.string().optional(),
                            "closed_issues": t.integer(),
                            "created_at": t.string(),
                            "creator": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "description": t.string().optional(),
                            "due_on": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "labels_url": t.string(),
                            "node_id": t.string(),
                            "number": t.integer(),
                            "open_issues": t.integer(),
                            "state": t.string(),
                            "title": t.string(),
                            "updated_at": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "patch_url": t.string(),
                    "rebaseable": t.boolean().optional(),
                    "requested_reviewers": t.array(
                        t.either(
                            [
                                t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                t.struct(
                                    {
                                        "deleted": t.boolean().optional(),
                                        "description": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "members_url": t.string().optional(),
                                        "name": t.string(),
                                        "node_id": t.string().optional(),
                                        "parent": t.struct(
                                            {
                                                "description": t.string().optional(),
                                                "html_url": t.string(),
                                                "id": t.integer(),
                                                "members_url": t.string(),
                                                "name": t.string(),
                                                "node_id": t.string(),
                                                "permission": t.string(),
                                                "privacy": t.string(),
                                                "repositories_url": t.string(),
                                                "slug": t.string(),
                                                "url": t.string(),
                                            }
                                        ).optional(),
                                        "permission": t.string().optional(),
                                        "privacy": t.string().optional(),
                                        "repositories_url": t.string().optional(),
                                        "slug": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ),
                            ]
                        )
                    ),
                    "requested_teams": t.array(
                        t.struct(
                            {
                                "deleted": t.boolean().optional(),
                                "description": t.string().optional(),
                                "html_url": t.string().optional(),
                                "id": t.integer(),
                                "members_url": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string().optional(),
                                "parent": t.struct(
                                    {
                                        "description": t.string().optional(),
                                        "html_url": t.string(),
                                        "id": t.integer(),
                                        "members_url": t.string(),
                                        "name": t.string(),
                                        "node_id": t.string(),
                                        "permission": t.string(),
                                        "privacy": t.string(),
                                        "repositories_url": t.string(),
                                        "slug": t.string(),
                                        "url": t.string(),
                                    }
                                ).optional(),
                                "permission": t.string().optional(),
                                "privacy": t.string().optional(),
                                "repositories_url": t.string().optional(),
                                "slug": t.string().optional(),
                                "url": t.string().optional(),
                            }
                        )
                    ),
                    "review_comment_url": t.string(),
                    "review_comments": t.integer().optional(),
                    "review_comments_url": t.string(),
                    "state": t.string(),
                    "statuses_url": t.string(),
                    "title": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "user": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_pull_request_unlocked"])
    types["webhook_push"] = t.struct(
        {
            "after": t.string(),
            "base_ref": t.string().optional(),
            "before": t.string(),
            "commits": t.array(
                t.struct(
                    {
                        "added": t.array(t.string()).optional(),
                        "author": t.struct(
                            {
                                "date": t.string().optional(),
                                "email": t.string().optional(),
                                "name": t.string(),
                                "username": t.string().optional(),
                            }
                        ),
                        "committer": t.struct(
                            {
                                "date": t.string().optional(),
                                "email": t.string().optional(),
                                "name": t.string(),
                                "username": t.string().optional(),
                            }
                        ),
                        "distinct": t.boolean(),
                        "id": t.string(),
                        "message": t.string(),
                        "modified": t.array(t.string()).optional(),
                        "removed": t.array(t.string()).optional(),
                        "timestamp": t.string(),
                        "tree_id": t.string(),
                        "url": t.string(),
                    }
                )
            ),
            "compare": t.string(),
            "created": t.boolean(),
            "deleted": t.boolean(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "forced": t.boolean(),
            "head_commit": t.struct(
                {
                    "added": t.array(t.string()).optional(),
                    "author": t.struct(
                        {
                            "date": t.string().optional(),
                            "email": t.string().optional(),
                            "name": t.string(),
                            "username": t.string().optional(),
                        }
                    ),
                    "committer": t.struct(
                        {
                            "date": t.string().optional(),
                            "email": t.string().optional(),
                            "name": t.string(),
                            "username": t.string().optional(),
                        }
                    ),
                    "distinct": t.boolean(),
                    "id": t.string(),
                    "message": t.string(),
                    "modified": t.array(t.string()).optional(),
                    "removed": t.array(t.string()).optional(),
                    "timestamp": t.string(),
                    "tree_id": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "pusher": t.struct(
                {
                    "date": t.string().optional(),
                    "email": t.string().optional(),
                    "name": t.string(),
                    "username": t.string().optional(),
                }
            ),
            "ref": t.string(),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "has_discussions": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                    "web_commit_signoff_required": t.boolean().optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_push"])
    types["webhook_registry_package_published"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "registry_package": t.struct(
                {
                    "created_at": t.string().optional(),
                    "description": t.string().optional(),
                    "ecosystem": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "namespace": t.string(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string(),
                            "events_url": t.string(),
                            "followers_url": t.string(),
                            "following_url": t.string(),
                            "gists_url": t.string(),
                            "gravatar_id": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organizations_url": t.string(),
                            "received_events_url": t.string(),
                            "repos_url": t.string(),
                            "site_admin": t.boolean(),
                            "starred_url": t.string(),
                            "subscriptions_url": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "package_type": t.string(),
                    "package_version": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "node_id": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "body": t.either([t.string(), t.struct({})]).optional(),
                            "body_html": t.string().optional(),
                            "container_metadata": t.struct(
                                {
                                    "labels": t.struct({}).optional(),
                                    "manifest": t.struct({}).optional(),
                                    "tag": t.struct(
                                        {
                                            "digest": t.string().optional(),
                                            "name": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            ).optional(),
                            "created_at": t.string().optional(),
                            "description": t.string(),
                            "docker_metadata": t.array(
                                t.struct({"tags": t.array(t.string()).optional()})
                            ).optional(),
                            "draft": t.boolean().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "installation_command": t.string(),
                            "manifest": t.string().optional(),
                            "metadata": t.array(t.struct({})),
                            "name": t.string(),
                            "npm_metadata": t.struct(
                                {
                                    "name": t.string().optional(),
                                    "version": t.string().optional(),
                                    "npm_user": t.string().optional(),
                                    "author": t.either(
                                        [t.string(), t.struct({})]
                                    ).optional(),
                                    "bugs": t.either(
                                        [t.string(), t.struct({})]
                                    ).optional(),
                                    "dependencies": t.struct({}).optional(),
                                    "dev_dependencies": t.struct({}).optional(),
                                    "peer_dependencies": t.struct({}).optional(),
                                    "optional_dependencies": t.struct({}).optional(),
                                    "description": t.string().optional(),
                                    "dist": t.either(
                                        [t.string(), t.struct({})]
                                    ).optional(),
                                    "git_head": t.string().optional(),
                                    "homepage": t.string().optional(),
                                    "license": t.string().optional(),
                                    "main": t.string().optional(),
                                    "repository": t.either(
                                        [t.string(), t.struct({})]
                                    ).optional(),
                                    "scripts": t.struct({}).optional(),
                                    "id": t.string().optional(),
                                    "node_version": t.string().optional(),
                                    "npm_version": t.string().optional(),
                                    "has_shrinkwrap": t.boolean().optional(),
                                    "maintainers": t.array(t.string()).optional(),
                                    "contributors": t.array(t.string()).optional(),
                                    "engines": t.struct({}).optional(),
                                    "keywords": t.array(t.string()).optional(),
                                    "files": t.array(t.string()).optional(),
                                    "bin": t.struct({}).optional(),
                                    "man": t.struct({}).optional(),
                                    "directories": t.either(
                                        [t.string(), t.struct({})]
                                    ).optional(),
                                    "os": t.array(t.string()).optional(),
                                    "cpu": t.array(t.string()).optional(),
                                    "readme": t.string().optional(),
                                    "installation_command": t.string().optional(),
                                    "release_id": t.integer().optional(),
                                    "commit_oid": t.string().optional(),
                                    "published_via_actions": t.boolean().optional(),
                                    "deleted_by_id": t.integer().optional(),
                                }
                            ).optional(),
                            "nuget_metadata": t.array(
                                t.struct(
                                    {
                                        "id": t.either(
                                            [t.string(), t.struct({}), t.integer()]
                                        ).optional(),
                                        "name": t.string().optional(),
                                        "value": t.either(
                                            [
                                                t.boolean(),
                                                t.string(),
                                                t.integer(),
                                                t.struct(
                                                    {
                                                        "url": t.string().optional(),
                                                        "branch": t.string().optional(),
                                                        "commit": t.string().optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ),
                                            ]
                                        ).optional(),
                                    }
                                )
                            ).optional(),
                            "package_files": t.array(
                                t.struct(
                                    {
                                        "content_type": t.string(),
                                        "created_at": t.string(),
                                        "download_url": t.string(),
                                        "id": t.integer(),
                                        "md5": t.string().optional(),
                                        "name": t.string(),
                                        "sha1": t.string().optional(),
                                        "sha256": t.string().optional(),
                                        "size": t.integer(),
                                        "state": t.string().optional(),
                                        "updated_at": t.string(),
                                    }
                                )
                            ),
                            "package_url": t.string(),
                            "prerelease": t.boolean().optional(),
                            "release": t.struct(
                                {
                                    "author": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer().optional(),
                                            "login": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                    "created_at": t.string().optional(),
                                    "draft": t.boolean().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer().optional(),
                                    "name": t.string().optional(),
                                    "prerelease": t.boolean().optional(),
                                    "published_at": t.string().optional(),
                                    "tag_name": t.string().optional(),
                                    "target_commitish": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "rubygems_metadata": t.array(
                                t.proxy(renames["webhook_rubygems_metadata"])
                            ).optional(),
                            "summary": t.string(),
                            "tag_name": t.string().optional(),
                            "target_commitish": t.string().optional(),
                            "target_oid": t.string().optional(),
                            "updated_at": t.string().optional(),
                            "version": t.string(),
                        }
                    ).optional(),
                    "registry": t.struct(
                        {
                            "about_url": t.string().optional(),
                            "name": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                            "vendor": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_registry_package_published"])
    types["webhook_registry_package_updated"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "registry_package": t.struct(
                {
                    "created_at": t.string(),
                    "description": t.struct({"_": t.string().optional()}).optional(),
                    "ecosystem": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "namespace": t.string(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string(),
                            "events_url": t.string(),
                            "followers_url": t.string(),
                            "following_url": t.string(),
                            "gists_url": t.string(),
                            "gravatar_id": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "login": t.string(),
                            "node_id": t.string(),
                            "organizations_url": t.string(),
                            "received_events_url": t.string(),
                            "repos_url": t.string(),
                            "site_admin": t.boolean(),
                            "starred_url": t.string(),
                            "subscriptions_url": t.string(),
                            "type": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "package_type": t.string(),
                    "package_version": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "avatar_url": t.string(),
                                    "events_url": t.string(),
                                    "followers_url": t.string(),
                                    "following_url": t.string(),
                                    "gists_url": t.string(),
                                    "gravatar_id": t.string(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "node_id": t.string(),
                                    "organizations_url": t.string(),
                                    "received_events_url": t.string(),
                                    "repos_url": t.string(),
                                    "site_admin": t.boolean(),
                                    "starred_url": t.string(),
                                    "subscriptions_url": t.string(),
                                    "type": t.string(),
                                    "url": t.string(),
                                }
                            ),
                            "body": t.string(),
                            "body_html": t.string(),
                            "created_at": t.string(),
                            "description": t.string(),
                            "docker_metadata": t.array(
                                t.struct(
                                    {"tags": t.array(t.string()).optional()}
                                ).optional()
                            ).optional(),
                            "draft": t.boolean().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "installation_command": t.string(),
                            "manifest": t.string().optional(),
                            "metadata": t.array(t.struct({})),
                            "name": t.string(),
                            "package_files": t.array(
                                t.struct(
                                    {
                                        "content_type": t.string().optional(),
                                        "created_at": t.string().optional(),
                                        "download_url": t.string().optional(),
                                        "id": t.integer().optional(),
                                        "md5": t.string().optional(),
                                        "name": t.string().optional(),
                                        "sha1": t.string().optional(),
                                        "sha256": t.string().optional(),
                                        "size": t.integer().optional(),
                                        "state": t.string().optional(),
                                        "updated_at": t.string().optional(),
                                    }
                                )
                            ),
                            "package_url": t.string(),
                            "prerelease": t.boolean().optional(),
                            "release": t.struct(
                                {
                                    "author": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "events_url": t.string(),
                                            "followers_url": t.string(),
                                            "following_url": t.string(),
                                            "gists_url": t.string(),
                                            "gravatar_id": t.string(),
                                            "html_url": t.string(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "node_id": t.string(),
                                            "organizations_url": t.string(),
                                            "received_events_url": t.string(),
                                            "repos_url": t.string(),
                                            "site_admin": t.boolean(),
                                            "starred_url": t.string(),
                                            "subscriptions_url": t.string(),
                                            "type": t.string(),
                                            "url": t.string(),
                                        }
                                    ),
                                    "created_at": t.string(),
                                    "draft": t.boolean(),
                                    "html_url": t.string(),
                                    "id": t.integer(),
                                    "name": t.string(),
                                    "prerelease": t.boolean(),
                                    "published_at": t.string(),
                                    "tag_name": t.string(),
                                    "target_commitish": t.string(),
                                    "url": t.string(),
                                }
                            ).optional(),
                            "rubygems_metadata": t.array(
                                t.proxy(renames["webhook_rubygems_metadata"])
                            ).optional(),
                            "summary": t.string(),
                            "tag_name": t.string().optional(),
                            "target_commitish": t.string(),
                            "target_oid": t.string(),
                            "updated_at": t.string(),
                            "version": t.string(),
                        }
                    ),
                    "registry": t.struct({}).optional(),
                    "updated_at": t.string(),
                }
            ),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_registry_package_updated"])
    types["webhook_release_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_release_created"])
    types["webhook_release_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_release_deleted"])
    types["webhook_release_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "body": t.struct({"from": t.string()}).optional(),
                    "name": t.struct({"from": t.string()}).optional(),
                    "make_latest": t.struct({"to": t.boolean()}).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_release_edited"])
    types["webhook_release_prereleased"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        ).optional()
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_release_prereleased"])
    types["webhook_release_published"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        ).optional()
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_release_published"])
    types["webhook_release_released"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_release_released"])
    types["webhook_release_unpublished"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "release": t.struct(
                {
                    "assets": t.array(
                        t.struct(
                            {
                                "browser_download_url": t.string(),
                                "content_type": t.string(),
                                "created_at": t.string(),
                                "download_count": t.integer(),
                                "id": t.integer(),
                                "label": t.string().optional(),
                                "name": t.string(),
                                "node_id": t.string(),
                                "size": t.integer(),
                                "state": t.string(),
                                "updated_at": t.string(),
                                "uploader": t.struct(
                                    {
                                        "avatar_url": t.string().optional(),
                                        "deleted": t.boolean().optional(),
                                        "email": t.string().optional(),
                                        "events_url": t.string().optional(),
                                        "followers_url": t.string().optional(),
                                        "following_url": t.string().optional(),
                                        "gists_url": t.string().optional(),
                                        "gravatar_id": t.string().optional(),
                                        "html_url": t.string().optional(),
                                        "id": t.integer(),
                                        "login": t.string(),
                                        "name": t.string().optional(),
                                        "node_id": t.string().optional(),
                                        "organizations_url": t.string().optional(),
                                        "received_events_url": t.string().optional(),
                                        "repos_url": t.string().optional(),
                                        "site_admin": t.boolean().optional(),
                                        "starred_url": t.string().optional(),
                                        "subscriptions_url": t.string().optional(),
                                        "type": t.string().optional(),
                                        "url": t.string().optional(),
                                    }
                                ).optional(),
                                "url": t.string(),
                            }
                        ).optional()
                    ),
                    "assets_url": t.string(),
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "body": t.string().optional(),
                    "created_at": t.string().optional(),
                    "discussion_url": t.string().optional(),
                    "draft": t.boolean(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "prerelease": t.boolean(),
                    "published_at": t.string().optional(),
                    "reactions": t.struct(
                        {
                            "+1": t.integer(),
                            "-1": t.integer(),
                            "confused": t.integer(),
                            "eyes": t.integer(),
                            "heart": t.integer(),
                            "hooray": t.integer(),
                            "laugh": t.integer(),
                            "rocket": t.integer(),
                            "total_count": t.integer(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "tag_name": t.string(),
                    "tarball_url": t.string().optional(),
                    "target_commitish": t.string(),
                    "upload_url": t.string(),
                    "url": t.string(),
                    "zipball_url": t.string().optional(),
                }
            ),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_release_unpublished"])
    types["webhook_repository_advisory_published"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "repository_advisory": t.proxy(renames["repository_advisory"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_repository_advisory_published"])
    types["webhook_repository_advisory_reported"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "repository_advisory": t.proxy(renames["repository_advisory"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_repository_advisory_reported"])
    types["webhook_repository_archived"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_archived"])
    types["webhook_repository_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_created"])
    types["webhook_repository_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_deleted"])
    types["webhook_repository_dispatch_sample"] = t.struct(
        {
            "action": t.string(),
            "branch": t.string(),
            "client_payload": t.struct({}).optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_dispatch_sample"])
    types["webhook_repository_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "default_branch": t.struct({"from": t.string()}).optional(),
                    "description": t.struct({"from": t.string().optional()}).optional(),
                    "homepage": t.struct({"from": t.string().optional()}).optional(),
                    "topics": t.struct(
                        {"from": t.array(t.string()).optional()}
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_edited"])
    types["webhook_repository_import"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "status": t.string(),
        }
    ).named(renames["webhook_repository_import"])
    types["webhook_repository_privatized"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_privatized"])
    types["webhook_repository_publicized"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_publicized"])
    types["webhook_repository_renamed"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {"repository": t.struct({"name": t.struct({"from": t.string()})})}
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_renamed"])
    types["webhook_repository_transferred"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "owner": t.struct(
                        {
                            "from": t.struct(
                                {
                                    "organization": t.struct(
                                        {
                                            "avatar_url": t.string(),
                                            "description": t.string().optional(),
                                            "events_url": t.string(),
                                            "hooks_url": t.string(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "issues_url": t.string(),
                                            "login": t.string(),
                                            "members_url": t.string(),
                                            "node_id": t.string(),
                                            "public_members_url": t.string(),
                                            "repos_url": t.string(),
                                            "url": t.string(),
                                        }
                                    ).optional(),
                                    "user": t.struct(
                                        {
                                            "avatar_url": t.string().optional(),
                                            "deleted": t.boolean().optional(),
                                            "email": t.string().optional(),
                                            "events_url": t.string().optional(),
                                            "followers_url": t.string().optional(),
                                            "following_url": t.string().optional(),
                                            "gists_url": t.string().optional(),
                                            "gravatar_id": t.string().optional(),
                                            "html_url": t.string().optional(),
                                            "id": t.integer(),
                                            "login": t.string(),
                                            "name": t.string().optional(),
                                            "node_id": t.string().optional(),
                                            "organizations_url": t.string().optional(),
                                            "received_events_url": t.string().optional(),
                                            "repos_url": t.string().optional(),
                                            "site_admin": t.boolean().optional(),
                                            "starred_url": t.string().optional(),
                                            "subscriptions_url": t.string().optional(),
                                            "type": t.string().optional(),
                                            "url": t.string().optional(),
                                        }
                                    ).optional(),
                                }
                            )
                        }
                    )
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_transferred"])
    types["webhook_repository_unarchived"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_unarchived"])
    types["webhook_repository_vulnerability_alert_create"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "affected_package_name": t.string(),
                    "affected_range": t.string(),
                    "created_at": t.string(),
                    "dismiss_reason": t.string().optional(),
                    "dismissed_at": t.string().optional(),
                    "dismisser": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "external_identifier": t.string(),
                    "external_reference": t.string().optional(),
                    "fix_reason": t.string().optional(),
                    "fixed_at": t.string().optional(),
                    "fixed_in": t.string().optional(),
                    "ghsa_id": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "severity": t.string(),
                    "state": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_vulnerability_alert_create"])
    types["webhook_repository_vulnerability_alert_dismiss"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "affected_package_name": t.string(),
                    "affected_range": t.string(),
                    "created_at": t.string(),
                    "dismiss_comment": t.string().optional(),
                    "dismiss_reason": t.string(),
                    "dismissed_at": t.string(),
                    "dismisser": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "external_identifier": t.string(),
                    "external_reference": t.string().optional(),
                    "fix_reason": t.string().optional(),
                    "fixed_at": t.string().optional(),
                    "fixed_in": t.string().optional(),
                    "ghsa_id": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "severity": t.string(),
                    "state": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_vulnerability_alert_dismiss"])
    types["webhook_repository_vulnerability_alert_reopen"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "affected_package_name": t.string(),
                    "affected_range": t.string(),
                    "created_at": t.string(),
                    "dismiss_reason": t.string().optional(),
                    "dismissed_at": t.string().optional(),
                    "dismisser": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "external_identifier": t.string(),
                    "external_reference": t.string().optional(),
                    "fix_reason": t.string().optional(),
                    "fixed_at": t.string().optional(),
                    "fixed_in": t.string().optional(),
                    "ghsa_id": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "severity": t.string(),
                    "state": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_vulnerability_alert_reopen"])
    types["webhook_repository_vulnerability_alert_resolve"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "affected_package_name": t.string(),
                    "affected_range": t.string(),
                    "created_at": t.string(),
                    "dismiss_reason": t.string().optional(),
                    "dismissed_at": t.string().optional(),
                    "dismisser": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "external_identifier": t.string(),
                    "external_reference": t.string().optional(),
                    "fix_reason": t.string().optional(),
                    "fixed_at": t.string().optional(),
                    "fixed_in": t.string().optional(),
                    "ghsa_id": t.string(),
                    "id": t.integer(),
                    "node_id": t.string(),
                    "number": t.integer(),
                    "severity": t.string(),
                    "state": t.string(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_repository_vulnerability_alert_resolve"])
    types["webhook_secret_scanning_alert_created"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["secret_scanning_alert"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_secret_scanning_alert_created"])
    types["webhook_secret_scanning_alert_location_created"] = t.struct(
        {
            "action": t.string().optional(),
            "alert": t.proxy(renames["secret_scanning_alert"]),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "location": t.proxy(renames["secret_scanning_location"]),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_secret_scanning_alert_location_created"])
    types["webhook_secret_scanning_alert_location_created_form_encoded"] = t.struct(
        {"payload": t.string()}
    ).named(renames["webhook_secret_scanning_alert_location_created_form_encoded"])
    types["webhook_secret_scanning_alert_reopened"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["secret_scanning_alert"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_secret_scanning_alert_reopened"])
    types["webhook_secret_scanning_alert_resolved"] = t.struct(
        {
            "action": t.string(),
            "alert": t.struct(
                {
                    "created_at": t.proxy(renames["alert_created_at"]).optional(),
                    "html_url": t.proxy(renames["alert_html_url"]).optional(),
                    "locations_url": t.string().optional(),
                    "number": t.proxy(renames["alert_number"]).optional(),
                    "push_protection_bypassed": t.boolean().optional(),
                    "push_protection_bypassed_at": t.string().optional(),
                    "push_protection_bypassed_by": t.proxy(
                        renames["nullable_simple_user"]
                    ).optional(),
                    "resolution": t.string().optional(),
                    "resolved_at": t.string().optional(),
                    "resolved_by": t.proxy(renames["nullable_simple_user"]).optional(),
                    "resolution_comment": t.string().optional(),
                    "secret": t.string().optional(),
                    "secret_type": t.string().optional(),
                    "secret_type_display_name": t.string().optional(),
                    "state": t.proxy(renames["secret_scanning_alert_state"]).optional(),
                    "updated_at": t.proxy(renames["alert_updated_at"]).optional(),
                    "url": t.proxy(renames["alert_url"]).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_secret_scanning_alert_resolved"])
    types["webhook_secret_scanning_alert_revoked"] = t.struct(
        {
            "action": t.string(),
            "alert": t.proxy(renames["secret_scanning_alert"]),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_secret_scanning_alert_revoked"])
    types["webhook_security_advisory_published"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "security_advisory": t.struct(
                {
                    "cvss": t.struct(
                        {"score": t.number(), "vector_string": t.string().optional()}
                    ),
                    "cwes": t.array(
                        t.struct({"cwe_id": t.string(), "name": t.string()})
                    ),
                    "description": t.string(),
                    "ghsa_id": t.string(),
                    "identifiers": t.array(
                        t.struct({"type": t.string(), "value": t.string()})
                    ),
                    "published_at": t.string(),
                    "references": t.array(t.struct({"url": t.string()})),
                    "severity": t.string(),
                    "summary": t.string(),
                    "updated_at": t.string(),
                    "vulnerabilities": t.array(
                        t.struct(
                            {
                                "first_patched_version": t.struct(
                                    {"identifier": t.string()}
                                ).optional(),
                                "package": t.struct(
                                    {"ecosystem": t.string(), "name": t.string()}
                                ),
                                "severity": t.string(),
                                "vulnerable_version_range": t.string(),
                            }
                        )
                    ),
                    "withdrawn_at": t.string().optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_security_advisory_published"])
    types["webhook_security_advisory_updated"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "security_advisory": t.struct(
                {
                    "cvss": t.struct(
                        {"score": t.number(), "vector_string": t.string().optional()}
                    ),
                    "cwes": t.array(
                        t.struct({"cwe_id": t.string(), "name": t.string()})
                    ),
                    "description": t.string(),
                    "ghsa_id": t.string(),
                    "identifiers": t.array(
                        t.struct({"type": t.string(), "value": t.string()})
                    ),
                    "published_at": t.string(),
                    "references": t.array(t.struct({"url": t.string()})),
                    "severity": t.string(),
                    "summary": t.string(),
                    "updated_at": t.string(),
                    "vulnerabilities": t.array(
                        t.struct(
                            {
                                "first_patched_version": t.struct(
                                    {"identifier": t.string()}
                                ).optional(),
                                "package": t.struct(
                                    {"ecosystem": t.string(), "name": t.string()}
                                ),
                                "severity": t.string(),
                                "vulnerable_version_range": t.string(),
                            }
                        )
                    ),
                    "withdrawn_at": t.string().optional(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_security_advisory_updated"])
    types["webhook_security_advisory_withdrawn"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "security_advisory": t.struct(
                {
                    "cvss": t.struct(
                        {"score": t.number(), "vector_string": t.string().optional()}
                    ),
                    "cwes": t.array(
                        t.struct({"cwe_id": t.string(), "name": t.string()})
                    ),
                    "description": t.string(),
                    "ghsa_id": t.string(),
                    "identifiers": t.array(
                        t.struct({"type": t.string(), "value": t.string()})
                    ),
                    "published_at": t.string(),
                    "references": t.array(t.struct({"url": t.string()})),
                    "severity": t.string(),
                    "summary": t.string(),
                    "updated_at": t.string(),
                    "vulnerabilities": t.array(
                        t.struct(
                            {
                                "first_patched_version": t.struct(
                                    {"identifier": t.string()}
                                ).optional(),
                                "package": t.struct(
                                    {"ecosystem": t.string(), "name": t.string()}
                                ),
                                "severity": t.string(),
                                "vulnerable_version_range": t.string(),
                            }
                        )
                    ),
                    "withdrawn_at": t.string(),
                }
            ),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_security_advisory_withdrawn"])
    types["webhook_security_and_analysis"] = t.struct(
        {
            "changes": t.struct(
                {
                    "from": t.struct(
                        {
                            "security_and_analysis": t.proxy(
                                renames["security_and_analysis"]
                            ).optional()
                        }
                    ).optional()
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["full_repository"]),
            "sender": t.proxy(renames["simple_user"]).optional(),
        }
    ).named(renames["webhook_security_and_analysis"])
    types["webhook_sponsorship_cancelled"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_cancelled"])
    types["webhook_sponsorship_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_created"])
    types["webhook_sponsorship_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {"privacy_level": t.struct({"from": t.string()}).optional()}
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_edited"])
    types["webhook_sponsorship_pending_cancellation"] = t.struct(
        {
            "action": t.string(),
            "effective_date": t.string().optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_pending_cancellation"])
    types["webhook_sponsorship_pending_tier_change"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "tier": t.struct(
                        {
                            "from": t.struct(
                                {
                                    "created_at": t.string(),
                                    "description": t.string(),
                                    "is_custom_ammount": t.boolean().optional(),
                                    "is_custom_amount": t.boolean().optional(),
                                    "is_one_time": t.boolean(),
                                    "monthly_price_in_cents": t.integer(),
                                    "monthly_price_in_dollars": t.integer(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                }
                            )
                        }
                    )
                }
            ),
            "effective_date": t.string().optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_pending_tier_change"])
    types["webhook_sponsorship_tier_changed"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "tier": t.struct(
                        {
                            "from": t.struct(
                                {
                                    "created_at": t.string(),
                                    "description": t.string(),
                                    "is_custom_ammount": t.boolean().optional(),
                                    "is_custom_amount": t.boolean().optional(),
                                    "is_one_time": t.boolean(),
                                    "monthly_price_in_cents": t.integer(),
                                    "monthly_price_in_dollars": t.integer(),
                                    "name": t.string(),
                                    "node_id": t.string(),
                                }
                            )
                        }
                    )
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "sponsorship": t.struct(
                {
                    "created_at": t.string(),
                    "maintainer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "node_id": t.string(),
                    "privacy_level": t.string(),
                    "sponsor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "sponsorable": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "tier": t.struct(
                        {
                            "created_at": t.string(),
                            "description": t.string(),
                            "is_custom_ammount": t.boolean().optional(),
                            "is_custom_amount": t.boolean().optional(),
                            "is_one_time": t.boolean(),
                            "monthly_price_in_cents": t.integer(),
                            "monthly_price_in_dollars": t.integer(),
                            "name": t.string(),
                            "node_id": t.string(),
                        }
                    ),
                }
            ),
        }
    ).named(renames["webhook_sponsorship_tier_changed"])
    types["webhook_star_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "starred_at": t.string().optional(),
        }
    ).named(renames["webhook_star_created"])
    types["webhook_star_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "starred_at": t.string().optional(),
        }
    ).named(renames["webhook_star_deleted"])
    types["webhook_status"] = t.struct(
        {
            "avatar_url": t.string().optional(),
            "branches": t.array(
                t.struct(
                    {
                        "commit": t.struct(
                            {"sha": t.string().optional(), "url": t.string().optional()}
                        ),
                        "name": t.string(),
                        "protected": t.boolean(),
                    }
                )
            ),
            "commit": t.struct(
                {
                    "author": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "comments_url": t.string(),
                    "commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "comment_count": t.integer(),
                            "committer": t.struct(
                                {
                                    "date": t.string(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "message": t.string(),
                            "tree": t.struct({"sha": t.string(), "url": t.string()}),
                            "url": t.string(),
                            "verification": t.struct(
                                {
                                    "payload": t.string().optional(),
                                    "reason": t.string(),
                                    "signature": t.string().optional(),
                                    "verified": t.boolean(),
                                }
                            ),
                        }
                    ),
                    "committer": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer().optional(),
                            "login": t.string().optional(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "html_url": t.string(),
                    "node_id": t.string(),
                    "parents": t.array(
                        t.struct(
                            {
                                "html_url": t.string(),
                                "sha": t.string(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "sha": t.string(),
                    "url": t.string(),
                }
            ),
            "context": t.string(),
            "created_at": t.string(),
            "description": t.string().optional(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "id": t.integer(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "name": t.string(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "sha": t.string(),
            "state": t.string(),
            "target_url": t.string().optional(),
            "updated_at": t.string(),
        }
    ).named(renames["webhook_status"])
    types["webhook_team_add"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_add"])
    types["webhook_team_added_to_repository"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_added_to_repository"])
    types["webhook_team_created"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_created"])
    types["webhook_team_deleted"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]).optional(),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_deleted"])
    types["webhook_team_edited"] = t.struct(
        {
            "action": t.string(),
            "changes": t.struct(
                {
                    "description": t.struct({"from": t.string()}).optional(),
                    "name": t.struct({"from": t.string()}).optional(),
                    "privacy": t.struct({"from": t.string()}).optional(),
                    "notification_setting": t.struct({"from": t.string()}).optional(),
                    "repository": t.struct(
                        {
                            "permissions": t.struct(
                                {
                                    "from": t.struct(
                                        {
                                            "admin": t.boolean().optional(),
                                            "pull": t.boolean().optional(),
                                            "push": t.boolean().optional(),
                                        }
                                    )
                                }
                            )
                        }
                    ).optional(),
                }
            ),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_edited"])
    types["webhook_team_removed_from_repository"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]),
            "repository": t.struct(
                {
                    "allow_auto_merge": t.boolean().optional(),
                    "allow_forking": t.boolean().optional(),
                    "allow_merge_commit": t.boolean().optional(),
                    "allow_rebase_merge": t.boolean().optional(),
                    "allow_squash_merge": t.boolean().optional(),
                    "allow_update_branch": t.boolean().optional(),
                    "archive_url": t.string(),
                    "archived": t.boolean(),
                    "assignees_url": t.string(),
                    "blobs_url": t.string(),
                    "branches_url": t.string(),
                    "clone_url": t.string(),
                    "collaborators_url": t.string(),
                    "comments_url": t.string(),
                    "commits_url": t.string(),
                    "compare_url": t.string(),
                    "contents_url": t.string(),
                    "contributors_url": t.string(),
                    "created_at": t.either([t.integer(), t.string()]),
                    "default_branch": t.string(),
                    "delete_branch_on_merge": t.boolean().optional(),
                    "deployments_url": t.string(),
                    "description": t.string().optional(),
                    "disabled": t.boolean().optional(),
                    "downloads_url": t.string(),
                    "events_url": t.string(),
                    "fork": t.boolean(),
                    "forks": t.integer(),
                    "forks_count": t.integer(),
                    "forks_url": t.string(),
                    "full_name": t.string(),
                    "git_commits_url": t.string(),
                    "git_refs_url": t.string(),
                    "git_tags_url": t.string(),
                    "git_url": t.string(),
                    "has_downloads": t.boolean(),
                    "has_issues": t.boolean(),
                    "has_pages": t.boolean(),
                    "has_projects": t.boolean(),
                    "has_wiki": t.boolean(),
                    "homepage": t.string().optional(),
                    "hooks_url": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "is_template": t.boolean().optional(),
                    "issue_comment_url": t.string(),
                    "issue_events_url": t.string(),
                    "issues_url": t.string(),
                    "keys_url": t.string(),
                    "labels_url": t.string(),
                    "language": t.string().optional(),
                    "languages_url": t.string(),
                    "license": t.struct(
                        {
                            "key": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "spdx_id": t.string(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "master_branch": t.string().optional(),
                    "merges_url": t.string(),
                    "milestones_url": t.string(),
                    "mirror_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "notifications_url": t.string(),
                    "open_issues": t.integer(),
                    "open_issues_count": t.integer(),
                    "organization": t.string().optional(),
                    "owner": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "permissions": t.struct(
                        {
                            "admin": t.boolean(),
                            "maintain": t.boolean().optional(),
                            "pull": t.boolean(),
                            "push": t.boolean(),
                            "triage": t.boolean().optional(),
                        }
                    ).optional(),
                    "private": t.boolean(),
                    "public": t.boolean().optional(),
                    "pulls_url": t.string(),
                    "pushed_at": t.either([t.integer(), t.string()]).optional(),
                    "releases_url": t.string(),
                    "role_name": t.string().optional(),
                    "size": t.integer(),
                    "ssh_url": t.string(),
                    "stargazers": t.integer().optional(),
                    "stargazers_count": t.integer(),
                    "stargazers_url": t.string(),
                    "statuses_url": t.string(),
                    "subscribers_url": t.string(),
                    "subscription_url": t.string(),
                    "svn_url": t.string(),
                    "tags_url": t.string(),
                    "teams_url": t.string(),
                    "topics": t.array(t.string()),
                    "trees_url": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "visibility": t.string(),
                    "watchers": t.integer(),
                    "watchers_count": t.integer(),
                }
            ).optional(),
            "sender": t.proxy(renames["simple_user"]),
            "team": t.struct(
                {
                    "deleted": t.boolean().optional(),
                    "description": t.string().optional(),
                    "html_url": t.string().optional(),
                    "id": t.integer(),
                    "members_url": t.string().optional(),
                    "name": t.string(),
                    "node_id": t.string().optional(),
                    "parent": t.struct(
                        {
                            "description": t.string().optional(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "members_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "permission": t.string(),
                            "privacy": t.string(),
                            "notification_setting": t.string(),
                            "repositories_url": t.string(),
                            "slug": t.string(),
                            "url": t.string(),
                        }
                    ).optional(),
                    "permission": t.string().optional(),
                    "privacy": t.string().optional(),
                    "notification_setting": t.string().optional(),
                    "repositories_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "url": t.string().optional(),
                }
            ),
        }
    ).named(renames["webhook_team_removed_from_repository"])
    types["webhook_watch_started"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
        }
    ).named(renames["webhook_watch_started"])
    types["webhook_workflow_dispatch"] = t.struct(
        {
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "inputs": t.struct({}).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "ref": t.string(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.string(),
        }
    ).named(renames["webhook_workflow_dispatch"])
    types["webhook_workflow_job_completed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow_job": t.struct(
                {
                    "check_run_url": t.string(),
                    "completed_at": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(t.string().optional()),
                    "name": t.string(),
                    "node_id": t.string(),
                    "run_attempt": t.integer(),
                    "run_id": t.integer(),
                    "run_url": t.string(),
                    "runner_group_id": t.number().optional(),
                    "runner_group_name": t.string().optional(),
                    "runner_id": t.number().optional(),
                    "runner_name": t.string().optional(),
                    "started_at": t.string(),
                    "status": t.string(),
                    "head_branch": t.string().optional(),
                    "workflow_name": t.string().optional(),
                    "steps": t.array(
                        t.struct(
                            {
                                "completed_at": t.string().optional(),
                                "conclusion": t.string().optional(),
                                "name": t.string(),
                                "number": t.integer(),
                                "started_at": t.string().optional(),
                                "status": t.string(),
                            }
                        ).optional()
                    ),
                    "url": t.string(),
                }
            ),
            "deployment": t.proxy(renames["deployment"]).optional(),
        }
    ).named(renames["webhook_workflow_job_completed"])
    types["webhook_workflow_job_in_progress"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow_job": t.struct(
                {
                    "check_run_url": t.string(),
                    "completed_at": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(t.string()),
                    "name": t.string(),
                    "node_id": t.string(),
                    "run_attempt": t.integer(),
                    "run_id": t.integer(),
                    "run_url": t.string(),
                    "runner_group_id": t.number().optional(),
                    "runner_group_name": t.string().optional(),
                    "runner_id": t.number().optional(),
                    "runner_name": t.string().optional(),
                    "started_at": t.string(),
                    "status": t.string(),
                    "head_branch": t.string().optional(),
                    "workflow_name": t.string().optional(),
                    "steps": t.array(
                        t.struct(
                            {
                                "completed_at": t.string().optional(),
                                "conclusion": t.string().optional(),
                                "name": t.string(),
                                "number": t.integer(),
                                "started_at": t.string().optional(),
                                "status": t.string(),
                            }
                        )
                    ),
                    "url": t.string(),
                }
            ),
            "deployment": t.proxy(renames["deployment"]).optional(),
        }
    ).named(renames["webhook_workflow_job_in_progress"])
    types["webhook_workflow_job_queued"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow_job": t.struct(
                {
                    "check_run_url": t.string(),
                    "completed_at": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(t.string()),
                    "name": t.string(),
                    "node_id": t.string(),
                    "run_attempt": t.integer(),
                    "run_id": t.number(),
                    "run_url": t.string(),
                    "runner_group_id": t.integer().optional(),
                    "runner_group_name": t.string().optional(),
                    "runner_id": t.integer().optional(),
                    "runner_name": t.string().optional(),
                    "started_at": t.string(),
                    "status": t.string(),
                    "head_branch": t.string().optional(),
                    "workflow_name": t.string().optional(),
                    "steps": t.array(
                        t.struct(
                            {
                                "completed_at": t.string().optional(),
                                "conclusion": t.string().optional(),
                                "name": t.string(),
                                "number": t.integer(),
                                "started_at": t.string().optional(),
                                "status": t.string(),
                            }
                        )
                    ),
                    "url": t.string(),
                }
            ),
            "deployment": t.proxy(renames["deployment"]).optional(),
        }
    ).named(renames["webhook_workflow_job_queued"])
    types["webhook_workflow_job_waiting"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow_job": t.struct(
                {
                    "check_run_url": t.string(),
                    "completed_at": t.string().optional(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "labels": t.array(t.string()),
                    "name": t.string(),
                    "node_id": t.string(),
                    "run_attempt": t.integer(),
                    "run_id": t.number(),
                    "run_url": t.string(),
                    "runner_group_id": t.integer().optional(),
                    "runner_group_name": t.string().optional(),
                    "runner_id": t.integer().optional(),
                    "runner_name": t.string().optional(),
                    "started_at": t.string(),
                    "head_branch": t.string().optional(),
                    "workflow_name": t.string().optional(),
                    "status": t.string(),
                    "steps": t.array(
                        t.struct(
                            {
                                "completed_at": t.string().optional(),
                                "conclusion": t.string().optional(),
                                "name": t.string(),
                                "number": t.integer(),
                                "started_at": t.string().optional(),
                                "status": t.string(),
                            }
                        )
                    ),
                    "url": t.string(),
                }
            ),
            "deployment": t.proxy(renames["deployment"]).optional(),
        }
    ).named(renames["webhook_workflow_job_waiting"])
    types["webhook_workflow_run_completed"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.struct(
                {
                    "badge_url": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "workflow_run": t.struct(
                {
                    "actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "artifacts_url": t.string(),
                    "cancel_url": t.string(),
                    "check_suite_id": t.integer(),
                    "check_suite_node_id": t.string(),
                    "check_suite_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "event": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "jobs_url": t.string(),
                    "logs_url": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "previous_attempt_url": t.string().optional(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.number(),
                                "number": t.number(),
                                "url": t.string(),
                            }
                        ).optional()
                    ),
                    "referenced_workflows": t.array(
                        t.struct(
                            {
                                "path": t.string(),
                                "ref": t.string().optional(),
                                "sha": t.string(),
                            }
                        )
                    ).optional(),
                    "repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "rerun_url": t.string(),
                    "run_attempt": t.integer(),
                    "run_number": t.integer(),
                    "run_started_at": t.string(),
                    "status": t.string(),
                    "triggering_actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "workflow_id": t.integer(),
                    "workflow_url": t.string(),
                }
            ),
        }
    ).named(renames["webhook_workflow_run_completed"])
    types["webhook_workflow_run_in_progress"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.struct(
                {
                    "badge_url": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "workflow_run": t.struct(
                {
                    "actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "artifacts_url": t.string(),
                    "cancel_url": t.string(),
                    "check_suite_id": t.integer(),
                    "check_suite_node_id": t.string(),
                    "check_suite_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "event": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "jobs_url": t.string(),
                    "logs_url": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "previous_attempt_url": t.string().optional(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.number(),
                                "number": t.number(),
                                "url": t.string(),
                            }
                        ).optional()
                    ),
                    "referenced_workflows": t.array(
                        t.struct(
                            {
                                "path": t.string(),
                                "ref": t.string().optional(),
                                "sha": t.string(),
                            }
                        )
                    ).optional(),
                    "repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "rerun_url": t.string(),
                    "run_attempt": t.integer(),
                    "run_number": t.integer(),
                    "run_started_at": t.string(),
                    "status": t.string(),
                    "triggering_actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "workflow_id": t.integer(),
                    "workflow_url": t.string(),
                }
            ),
        }
    ).named(renames["webhook_workflow_run_in_progress"])
    types["webhook_workflow_run_requested"] = t.struct(
        {
            "action": t.string(),
            "enterprise": t.proxy(renames["enterprise"]).optional(),
            "installation": t.proxy(renames["simple_installation"]).optional(),
            "organization": t.proxy(renames["organization_simple"]).optional(),
            "repository": t.proxy(renames["repository"]),
            "sender": t.proxy(renames["simple_user"]),
            "workflow": t.struct(
                {
                    "badge_url": t.string(),
                    "created_at": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "name": t.string(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "state": t.string(),
                    "updated_at": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "workflow_run": t.struct(
                {
                    "actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "artifacts_url": t.string(),
                    "cancel_url": t.string(),
                    "check_suite_id": t.integer(),
                    "check_suite_node_id": t.string(),
                    "check_suite_url": t.string(),
                    "conclusion": t.string().optional(),
                    "created_at": t.string(),
                    "event": t.string(),
                    "head_branch": t.string().optional(),
                    "head_commit": t.struct(
                        {
                            "author": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "committer": t.struct(
                                {
                                    "date": t.string().optional(),
                                    "email": t.string().optional(),
                                    "name": t.string(),
                                    "username": t.string().optional(),
                                }
                            ),
                            "id": t.string(),
                            "message": t.string(),
                            "timestamp": t.string(),
                            "tree_id": t.string(),
                        }
                    ),
                    "head_repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "head_sha": t.string(),
                    "html_url": t.string(),
                    "id": t.integer(),
                    "jobs_url": t.string(),
                    "logs_url": t.string(),
                    "name": t.string().optional(),
                    "node_id": t.string(),
                    "path": t.string(),
                    "previous_attempt_url": t.string().optional(),
                    "pull_requests": t.array(
                        t.struct(
                            {
                                "base": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "head": t.struct(
                                    {
                                        "ref": t.string(),
                                        "repo": t.struct(
                                            {
                                                "id": t.integer(),
                                                "name": t.string(),
                                                "url": t.string(),
                                            }
                                        ),
                                        "sha": t.string(),
                                    }
                                ),
                                "id": t.number(),
                                "number": t.number(),
                                "url": t.string(),
                            }
                        )
                    ),
                    "referenced_workflows": t.array(
                        t.struct(
                            {
                                "path": t.string(),
                                "ref": t.string().optional(),
                                "sha": t.string(),
                            }
                        )
                    ).optional(),
                    "repository": t.struct(
                        {
                            "archive_url": t.string(),
                            "assignees_url": t.string(),
                            "blobs_url": t.string(),
                            "branches_url": t.string(),
                            "collaborators_url": t.string(),
                            "comments_url": t.string(),
                            "commits_url": t.string(),
                            "compare_url": t.string(),
                            "contents_url": t.string(),
                            "contributors_url": t.string(),
                            "deployments_url": t.string(),
                            "description": t.string().optional(),
                            "downloads_url": t.string(),
                            "events_url": t.string(),
                            "fork": t.boolean(),
                            "forks_url": t.string(),
                            "full_name": t.string(),
                            "git_commits_url": t.string(),
                            "git_refs_url": t.string(),
                            "git_tags_url": t.string(),
                            "hooks_url": t.string(),
                            "html_url": t.string(),
                            "id": t.integer(),
                            "issue_comment_url": t.string(),
                            "issue_events_url": t.string(),
                            "issues_url": t.string(),
                            "keys_url": t.string(),
                            "labels_url": t.string(),
                            "languages_url": t.string(),
                            "merges_url": t.string(),
                            "milestones_url": t.string(),
                            "name": t.string(),
                            "node_id": t.string(),
                            "notifications_url": t.string(),
                            "owner": t.struct(
                                {
                                    "avatar_url": t.string().optional(),
                                    "deleted": t.boolean().optional(),
                                    "email": t.string().optional(),
                                    "events_url": t.string().optional(),
                                    "followers_url": t.string().optional(),
                                    "following_url": t.string().optional(),
                                    "gists_url": t.string().optional(),
                                    "gravatar_id": t.string().optional(),
                                    "html_url": t.string().optional(),
                                    "id": t.integer(),
                                    "login": t.string(),
                                    "name": t.string().optional(),
                                    "node_id": t.string().optional(),
                                    "organizations_url": t.string().optional(),
                                    "received_events_url": t.string().optional(),
                                    "repos_url": t.string().optional(),
                                    "site_admin": t.boolean().optional(),
                                    "starred_url": t.string().optional(),
                                    "subscriptions_url": t.string().optional(),
                                    "type": t.string().optional(),
                                    "url": t.string().optional(),
                                }
                            ).optional(),
                            "private": t.boolean(),
                            "pulls_url": t.string(),
                            "releases_url": t.string(),
                            "stargazers_url": t.string(),
                            "statuses_url": t.string(),
                            "subscribers_url": t.string(),
                            "subscription_url": t.string(),
                            "tags_url": t.string(),
                            "teams_url": t.string(),
                            "trees_url": t.string(),
                            "url": t.string(),
                        }
                    ),
                    "rerun_url": t.string(),
                    "run_attempt": t.integer(),
                    "run_number": t.integer(),
                    "run_started_at": t.string(),
                    "status": t.string(),
                    "triggering_actor": t.struct(
                        {
                            "avatar_url": t.string().optional(),
                            "deleted": t.boolean().optional(),
                            "email": t.string().optional(),
                            "events_url": t.string().optional(),
                            "followers_url": t.string().optional(),
                            "following_url": t.string().optional(),
                            "gists_url": t.string().optional(),
                            "gravatar_id": t.string().optional(),
                            "html_url": t.string().optional(),
                            "id": t.integer(),
                            "login": t.string(),
                            "name": t.string().optional(),
                            "node_id": t.string().optional(),
                            "organizations_url": t.string().optional(),
                            "received_events_url": t.string().optional(),
                            "repos_url": t.string().optional(),
                            "site_admin": t.boolean().optional(),
                            "starred_url": t.string().optional(),
                            "subscriptions_url": t.string().optional(),
                            "type": t.string().optional(),
                            "url": t.string().optional(),
                        }
                    ).optional(),
                    "updated_at": t.string(),
                    "url": t.string(),
                    "workflow_id": t.integer(),
                    "workflow_url": t.string(),
                    "display_title": t.string(),
                }
            ),
        }
    ).named(renames["webhook_workflow_run_requested"])

    functions = {}
    functions["meta_root"] = github.get(
        "/",
        t.struct({}),
        t.proxy(renames["root"]),
    )
    functions["apps_get_authenticated"] = github.get(
        "/app",
        t.struct({}),
        t.proxy(renames["integration"]),
    )
    functions["apps_create_from_manifest"] = github.post(
        "/app-manifests/{code}/conversions",
        t.struct({"code": t.string()}),
        t.struct(
            {
                "id": t.integer(),
                "slug": t.string().optional(),
                "node_id": t.string(),
                "owner": t.proxy(renames["nullable_simple_user"]),
                "name": t.string(),
                "description": t.string().optional(),
                "external_url": t.string(),
                "html_url": t.string(),
                "created_at": t.string(),
                "updated_at": t.string(),
                "permissions": t.struct(
                    {
                        "issues": t.string().optional(),
                        "checks": t.string().optional(),
                        "metadata": t.string().optional(),
                        "contents": t.string().optional(),
                        "deployments": t.string().optional(),
                    }
                ),
                "events": t.array(t.string()),
                "installations_count": t.integer().optional(),
                "client_id": t.string(),
                "client_secret": t.string(),
                "webhook_secret": t.string().optional(),
                "pem": t.string(),
            }
        ).optional(),
    )
    functions["apps_get_webhook_config_for_app"] = github.get(
        "/app/hook/config",
        t.struct({}),
        t.proxy(renames["webhook_config"]),
    )
    functions["apps_update_webhook_config_for_app"] = github.patch(
        "/app/hook/config",
        t.struct(
            {
                "url": t.proxy(renames["webhook_config_url"]).optional(),
                "content_type": t.proxy(
                    renames["webhook_config_content_type"]
                ).optional(),
                "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                "insecure_ssl": t.proxy(
                    renames["webhook_config_insecure_ssl"]
                ).optional(),
            }
        ),
        t.proxy(renames["webhook_config"]),
        content_type="application/json",
        body_fields=("url", "content_type", "secret", "insecure_ssl"),
    )
    functions["apps_list_webhook_deliveries"] = github.get(
        "/app/hook/deliveries",
        t.struct(
            {"per_page": t.integer(), "cursor": t.string(), "redelivery": t.boolean()}
        ),
        t.array(t.proxy(renames["hook_delivery_item"])),
    )
    functions["apps_get_webhook_delivery"] = github.get(
        "/app/hook/deliveries/{delivery_id}",
        t.struct({"delivery_id": t.integer()}),
        t.proxy(renames["hook_delivery"]),
    )
    functions["apps_redeliver_webhook_delivery"] = github.post(
        "/app/hook/deliveries/{delivery_id}/attempts",
        t.struct({"delivery_id": t.integer()}),
        t.struct({}),
    )
    functions["apps_list_installation_requests_for_authenticated_app"] = github.get(
        "/app/installation-requests",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["integration_installation_request"])),
    )
    functions["apps_list_installations"] = github.get(
        "/app/installations",
        t.struct(
            {
                "per_page": t.integer(),
                "page": t.integer(),
                "since": t.string(),
                "outdated": t.string(),
            }
        ),
        t.array(t.proxy(renames["installation"])),
    )
    functions["apps_get_installation"] = github.get(
        "/app/installations/{installation_id}",
        t.struct({"installation_id": t.integer()}),
        t.proxy(renames["installation"]).optional(),
    )
    functions["apps_delete_installation"] = github.delete(
        "/app/installations/{installation_id}",
        t.struct({"installation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_create_installation_access_token"] = github.post(
        "/app/installations/{installation_id}/access_tokens",
        t.struct(
            {
                "installation_id": t.integer(),
                "repositories": t.array(t.string()).optional(),
                "repository_ids": t.array(t.integer()).optional(),
                "permissions": t.proxy(renames["app_permissions"]).optional(),
            }
        ),
        t.proxy(renames["installation_token"]).optional(),
        content_type="application/json",
        body_fields=("repositories", "repository_ids", "permissions"),
    )
    functions["apps_suspend_installation"] = github.put(
        "/app/installations/{installation_id}/suspended",
        t.struct({"installation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_unsuspend_installation"] = github.delete(
        "/app/installations/{installation_id}/suspended",
        t.struct({"installation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_delete_authorization"] = github.delete(
        "/applications/{client_id}/grant",
        t.struct({"client_id": t.string(), "access_token": t.string()}),
        t.boolean(),
        content_type="application/json",
        body_fields=("access_token",),
    )
    functions["apps_check_token"] = github.post(
        "/applications/{client_id}/token",
        t.struct({"client_id": t.string(), "access_token": t.string()}),
        t.proxy(renames["authorization"]).optional(),
        content_type="application/json",
        body_fields=("access_token",),
    )
    functions["apps_reset_token"] = github.patch(
        "/applications/{client_id}/token",
        t.struct({"client_id": t.string(), "access_token": t.string()}),
        t.proxy(renames["authorization"]),
        content_type="application/json",
        body_fields=("access_token",),
    )
    functions["apps_delete_token"] = github.delete(
        "/applications/{client_id}/token",
        t.struct({"client_id": t.string(), "access_token": t.string()}),
        t.boolean(),
        content_type="application/json",
        body_fields=("access_token",),
    )
    functions["apps_scope_token"] = github.post(
        "/applications/{client_id}/token/scoped",
        t.struct(
            {
                "client_id": t.string(),
                "access_token": t.string(),
                "target": t.string().optional(),
                "target_id": t.integer().optional(),
                "repositories": t.array(t.string()).optional(),
                "repository_ids": t.array(t.integer()).optional(),
                "permissions": t.proxy(renames["app_permissions"]).optional(),
            }
        ),
        t.proxy(renames["authorization"]).optional(),
        content_type="application/json",
        body_fields=(
            "access_token",
            "target",
            "target_id",
            "repositories",
            "repository_ids",
            "permissions",
        ),
    )
    functions["apps_get_by_slug"] = github.get(
        "/apps/{app_slug}",
        t.struct({"app_slug": t.string()}),
        t.proxy(renames["integration"]).optional(),
    )
    functions["codes_of_conduct_get_all_codes_of_conduct"] = github.get(
        "/codes_of_conduct",
        t.struct({}),
        t.array(t.proxy(renames["code_of_conduct"])),
    )
    functions["codes_of_conduct_get_conduct_code"] = github.get(
        "/codes_of_conduct/{key}",
        t.struct({"key": t.string()}),
        t.proxy(renames["code_of_conduct"]).optional(),
    )
    functions["emojis_get"] = github.get(
        "/emojis",
        t.struct({}),
        t.struct({}),
    )
    functions["dependabot_list_alerts_for_enterprise"] = github.get(
        "/enterprises/{enterprise}/dependabot/alerts",
        t.struct(
            {
                "enterprise": t.string(),
                "state": t.string(),
                "severity": t.string(),
                "ecosystem": t.string(),
                "package": t.string(),
                "scope": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "before": t.string(),
                "after": t.string(),
                "first": t.integer(),
                "last": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["dependabot_alert_with_repository"])).optional(),
    )
    functions["secret_scanning_list_alerts_for_enterprise"] = github.get(
        "/enterprises/{enterprise}/secret-scanning/alerts",
        t.struct(
            {
                "enterprise": t.string(),
                "state": t.string(),
                "secret_type": t.string(),
                "resolution": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "before": t.string(),
                "after": t.string(),
            }
        ),
        t.array(t.proxy(renames["organization_secret_scanning_alert"])).optional(),
    )
    functions["activity_list_public_events"] = github.get(
        "/events",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["event"])),
    )
    functions["activity_get_feeds"] = github.get(
        "/feeds",
        t.struct({}),
        t.proxy(renames["feed"]),
    )
    functions["gists_list"] = github.get(
        "/gists",
        t.struct({"since": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["base_gist"])),
    )
    functions["gists_create"] = github.post(
        "/gists",
        t.struct(
            {
                "description": t.string().optional(),
                "files": t.struct({}),
                "public": t.either([t.boolean(), t.string()]).optional(),
            }
        ),
        t.proxy(renames["gist_simple"]).optional(),
        content_type="application/json",
        body_fields=("description", "files", "public"),
    )
    functions["gists_list_public"] = github.get(
        "/gists/public",
        t.struct({"since": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["base_gist"])),
    )
    functions["gists_list_starred"] = github.get(
        "/gists/starred",
        t.struct({"since": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["base_gist"])),
    )
    functions["gists_get"] = github.get(
        "/gists/{gist_id}",
        t.struct({"gist_id": t.string()}),
        t.proxy(renames["gist_simple"]).optional(),
    )
    functions["gists_delete"] = github.delete(
        "/gists/{gist_id}",
        t.struct({"gist_id": t.string()}),
        t.boolean().optional(),
    )
    functions["gists_list_comments"] = github.get(
        "/gists/{gist_id}/comments",
        t.struct({"gist_id": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["gist_comment"])).optional(),
    )
    functions["gists_create_comment"] = github.post(
        "/gists/{gist_id}/comments",
        t.struct({"gist_id": t.string(), "body": t.string()}),
        t.proxy(renames["gist_comment"]).optional(),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["gists_get_comment"] = github.get(
        "/gists/{gist_id}/comments/{comment_id}",
        t.struct({"gist_id": t.string(), "comment_id": t.integer()}),
        t.proxy(renames["gist_comment"]).optional(),
    )
    functions["gists_update_comment"] = github.patch(
        "/gists/{gist_id}/comments/{comment_id}",
        t.struct(
            {"gist_id": t.string(), "comment_id": t.integer(), "body": t.string()}
        ),
        t.proxy(renames["gist_comment"]).optional(),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["gists_delete_comment"] = github.delete(
        "/gists/{gist_id}/comments/{comment_id}",
        t.struct({"gist_id": t.string(), "comment_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["gists_list_commits"] = github.get(
        "/gists/{gist_id}/commits",
        t.struct({"gist_id": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["gist_commit"])).optional(),
    )
    functions["gists_list_forks"] = github.get(
        "/gists/{gist_id}/forks",
        t.struct({"gist_id": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["gist_simple"])).optional(),
    )
    functions["gists_fork"] = github.post(
        "/gists/{gist_id}/forks",
        t.struct({"gist_id": t.string()}),
        t.proxy(renames["base_gist"]).optional(),
    )
    functions["gists_check_is_starred"] = github.get(
        "/gists/{gist_id}/star",
        t.struct({"gist_id": t.string()}),
        t.boolean().optional(),
    )
    functions["gists_star"] = github.put(
        "/gists/{gist_id}/star",
        t.struct({"gist_id": t.string()}),
        t.boolean().optional(),
    )
    functions["gists_unstar"] = github.delete(
        "/gists/{gist_id}/star",
        t.struct({"gist_id": t.string()}),
        t.boolean().optional(),
    )
    functions["gists_get_revision"] = github.get(
        "/gists/{gist_id}/{sha}",
        t.struct({"gist_id": t.string(), "sha": t.string()}),
        t.proxy(renames["gist_simple"]).optional(),
    )
    functions["gitignore_get_all_templates"] = github.get(
        "/gitignore/templates",
        t.struct({}),
        t.array(t.string()),
    )
    functions["gitignore_get_template"] = github.get(
        "/gitignore/templates/{name}",
        t.struct({"name": t.string()}),
        t.proxy(renames["gitignore_template"]),
    )
    functions["apps_list_repos_accessible_to_installation"] = github.get(
        "/installation/repositories",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["repository"])),
                "repository_selection": t.string().optional(),
            }
        ),
    )
    functions["apps_revoke_installation_access_token"] = github.delete(
        "/installation/token",
        t.struct({}),
        t.boolean(),
    )
    functions["issues_list"] = github.get(
        "/issues",
        t.struct(
            {
                "filter": t.string(),
                "state": t.string(),
                "labels": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "collab": t.boolean(),
                "orgs": t.boolean(),
                "owned": t.boolean(),
                "pulls": t.boolean(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue"])).optional(),
    )
    functions["licenses_get_all_commonly_used"] = github.get(
        "/licenses",
        t.struct(
            {"featured": t.boolean(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["license_simple"])),
    )
    functions["licenses_get"] = github.get(
        "/licenses/{license}",
        t.struct({"license": t.string()}),
        t.proxy(renames["license"]).optional(),
    )
    functions["apps_get_subscription_plan_for_account"] = github.get(
        "/marketplace_listing/accounts/{account_id}",
        t.struct({"account_id": t.integer()}),
        t.proxy(renames["marketplace_purchase"]).optional(),
    )
    functions["apps_list_plans"] = github.get(
        "/marketplace_listing/plans",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["marketplace_listing_plan"])).optional(),
    )
    functions["apps_list_accounts_for_plan"] = github.get(
        "/marketplace_listing/plans/{plan_id}/accounts",
        t.struct(
            {
                "plan_id": t.integer(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["marketplace_purchase"])).optional(),
    )
    functions["apps_get_subscription_plan_for_account_stubbed"] = github.get(
        "/marketplace_listing/stubbed/accounts/{account_id}",
        t.struct({"account_id": t.integer()}),
        t.proxy(renames["marketplace_purchase"]).optional(),
    )
    functions["apps_list_plans_stubbed"] = github.get(
        "/marketplace_listing/stubbed/plans",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["marketplace_listing_plan"])),
    )
    functions["apps_list_accounts_for_plan_stubbed"] = github.get(
        "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
        t.struct(
            {
                "plan_id": t.integer(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["marketplace_purchase"])),
    )
    functions["meta_get"] = github.get(
        "/meta",
        t.struct({}),
        t.proxy(renames["api_overview"]),
    )
    functions["activity_list_public_events_for_repo_network"] = github.get(
        "/networks/{owner}/{repo}/events",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["event"])).optional(),
    )
    functions["activity_list_notifications_for_authenticated_user"] = github.get(
        "/notifications",
        t.struct(
            {
                "all": t.boolean(),
                "participating": t.boolean(),
                "since": t.string(),
                "before": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["thread"])),
    )
    functions["activity_mark_notifications_as_read"] = github.put(
        "/notifications",
        t.struct(
            {"last_read_at": t.string().optional(), "read": t.boolean().optional()}
        ),
        t.struct({"message": t.string().optional()}),
        content_type="application/json",
        body_fields=("last_read_at", "read"),
    )
    functions["activity_get_thread"] = github.get(
        "/notifications/threads/{thread_id}",
        t.struct({"thread_id": t.integer()}),
        t.proxy(renames["thread"]),
    )
    functions["activity_mark_thread_as_read"] = github.patch(
        "/notifications/threads/{thread_id}",
        t.struct({"thread_id": t.integer()}),
        t.struct({}),
    )
    functions["activity_get_thread_subscription_for_authenticated_user"] = github.get(
        "/notifications/threads/{thread_id}/subscription",
        t.struct({"thread_id": t.integer()}),
        t.proxy(renames["thread_subscription"]),
    )
    functions["activity_set_thread_subscription"] = github.put(
        "/notifications/threads/{thread_id}/subscription",
        t.struct({"thread_id": t.integer(), "ignored": t.boolean().optional()}),
        t.proxy(renames["thread_subscription"]),
        content_type="application/json",
        body_fields=("ignored",),
    )
    functions["activity_delete_thread_subscription"] = github.delete(
        "/notifications/threads/{thread_id}/subscription",
        t.struct({"thread_id": t.integer()}),
        t.boolean(),
    )
    functions["orgs_list"] = github.get(
        "/organizations",
        t.struct({"since": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["organization_simple"])),
    )
    functions["orgs_list_pat_grant_requests"] = github.get(
        "/organizations/{org}/personal-access-token-requests",
        t.struct(
            {
                "org": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "sort": t.string(),
                "direction": t.string(),
                "owner": t.array(t.string()),
                "repository": t.string(),
                "permission": t.string(),
                "last_used_before": t.string(),
                "last_used_after": t.string(),
            }
        ),
        t.array(
            t.proxy(renames["organization_programmatic_access_grant_request"])
        ).optional(),
    )
    functions["orgs_review_pat_grant_requests_in_bulk"] = github.post(
        "/organizations/{org}/personal-access-token-requests",
        t.struct(
            {
                "org": t.string(),
                "pat_request_ids": t.array(t.integer()).optional(),
                "action": t.string(),
                "reason": t.string().optional(),
            }
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("pat_request_ids", "action", "reason"),
    )
    functions["orgs_review_pat_grant_request"] = github.post(
        "/organizations/{org}/personal-access-token-requests/{pat_request_id}",
        t.struct(
            {
                "org": t.string(),
                "pat_request_id": t.integer(),
                "action": t.string(),
                "reason": t.string().optional(),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("action", "reason"),
    )
    functions["orgs_list_pat_grant_request_repositories"] = github.get(
        "/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories",
        t.struct(
            {
                "org": t.string(),
                "pat_request_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])).optional(),
    )
    functions["orgs_list_pat_grants"] = github.get(
        "/organizations/{org}/personal-access-tokens",
        t.struct(
            {
                "org": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "sort": t.string(),
                "direction": t.string(),
                "owner": t.array(t.string()),
                "repository": t.string(),
                "permission": t.string(),
                "last_used_before": t.string(),
                "last_used_after": t.string(),
            }
        ),
        t.array(t.proxy(renames["organization_programmatic_access_grant"])).optional(),
    )
    functions["orgs_update_pat_accesses"] = github.post(
        "/organizations/{org}/personal-access-tokens",
        t.struct(
            {"org": t.string(), "action": t.string(), "pat_ids": t.array(t.integer())}
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("action", "pat_ids"),
    )
    functions["orgs_update_pat_access"] = github.post(
        "/organizations/{org}/personal-access-tokens/{pat_id}",
        t.struct({"org": t.string(), "pat_id": t.integer(), "action": t.string()}),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("action",),
    )
    functions["orgs_list_pat_grant_repositories"] = github.get(
        "/organizations/{org}/personal-access-tokens/{pat_id}/repositories",
        t.struct(
            {
                "org": t.string(),
                "pat_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])).optional(),
    )
    functions["orgs_get"] = github.get(
        "/orgs/{org}",
        t.struct({"org": t.string()}),
        t.proxy(renames["organization_full"]).optional(),
    )
    functions["orgs_update"] = github.patch(
        "/orgs/{org}",
        t.struct(
            {
                "org": t.string(),
                "billing_email": t.string().optional(),
                "company": t.string().optional(),
                "email": t.string().optional(),
                "twitter_username": t.string().optional(),
                "location": t.string().optional(),
                "name": t.string().optional(),
                "description": t.string().optional(),
                "has_organization_projects": t.boolean().optional(),
                "has_repository_projects": t.boolean().optional(),
                "default_repository_permission": t.string().optional(),
                "members_can_create_repositories": t.boolean().optional(),
                "members_can_create_internal_repositories": t.boolean().optional(),
                "members_can_create_private_repositories": t.boolean().optional(),
                "members_can_create_public_repositories": t.boolean().optional(),
                "members_allowed_repository_creation_type": t.string().optional(),
                "members_can_create_pages": t.boolean().optional(),
                "members_can_create_public_pages": t.boolean().optional(),
                "members_can_create_private_pages": t.boolean().optional(),
                "members_can_fork_private_repositories": t.boolean().optional(),
                "web_commit_signoff_required": t.boolean().optional(),
                "blog": t.string().optional(),
                "advanced_security_enabled_for_new_repositories": t.boolean().optional(),
                "dependabot_alerts_enabled_for_new_repositories": t.boolean().optional(),
                "dependabot_security_updates_enabled_for_new_repositories": t.boolean().optional(),
                "dependency_graph_enabled_for_new_repositories": t.boolean().optional(),
                "secret_scanning_enabled_for_new_repositories": t.boolean().optional(),
                "secret_scanning_push_protection_enabled_for_new_repositories": t.boolean().optional(),
                "secret_scanning_push_protection_custom_link_enabled": t.boolean().optional(),
                "secret_scanning_push_protection_custom_link": t.string().optional(),
            }
        ),
        t.proxy(renames["organization_full"]),
        content_type="application/json",
        body_fields=(
            "billing_email",
            "company",
            "email",
            "twitter_username",
            "location",
            "name",
            "description",
            "has_organization_projects",
            "has_repository_projects",
            "default_repository_permission",
            "members_can_create_repositories",
            "members_can_create_internal_repositories",
            "members_can_create_private_repositories",
            "members_can_create_public_repositories",
            "members_allowed_repository_creation_type",
            "members_can_create_pages",
            "members_can_create_public_pages",
            "members_can_create_private_pages",
            "members_can_fork_private_repositories",
            "web_commit_signoff_required",
            "blog",
            "advanced_security_enabled_for_new_repositories",
            "dependabot_alerts_enabled_for_new_repositories",
            "dependabot_security_updates_enabled_for_new_repositories",
            "dependency_graph_enabled_for_new_repositories",
            "secret_scanning_enabled_for_new_repositories",
            "secret_scanning_push_protection_enabled_for_new_repositories",
            "secret_scanning_push_protection_custom_link_enabled",
            "secret_scanning_push_protection_custom_link",
        ),
    )
    functions["orgs_delete"] = github.delete(
        "/orgs/{org}",
        t.struct({"org": t.string()}),
        t.struct({}).optional(),
    )
    functions["actions_get_actions_cache_usage_for_org"] = github.get(
        "/orgs/{org}/actions/cache/usage",
        t.struct({"org": t.string()}),
        t.proxy(renames["actions_cache_usage_org_enterprise"]),
    )
    functions["actions_get_actions_cache_usage_by_repo_for_org"] = github.get(
        "/orgs/{org}/actions/cache/usage-by-repository",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "repository_cache_usages": t.array(
                    t.proxy(renames["actions_cache_usage_by_repository"])
                ),
            }
        ),
    )
    functions["oidc_get_oidc_custom_sub_template_for_org"] = github.get(
        "/orgs/{org}/actions/oidc/customization/sub",
        t.struct({"org": t.string()}),
        t.proxy(renames["oidc_custom_sub"]),
    )
    functions["oidc_update_oidc_custom_sub_template_for_org"] = github.put(
        "/orgs/{org}/actions/oidc/customization/sub",
        t.struct({"org": t.string(), "include_claim_keys": t.array(t.string())}),
        t.proxy(renames["empty_object"]).optional(),
        content_type="application/json",
        body_fields=("include_claim_keys",),
    )
    functions["actions_get_github_actions_permissions_organization"] = github.get(
        "/orgs/{org}/actions/permissions",
        t.struct({"org": t.string()}),
        t.proxy(renames["actions_organization_permissions"]),
    )
    functions["actions_set_github_actions_permissions_organization"] = github.put(
        "/orgs/{org}/actions/permissions",
        t.struct(
            {
                "org": t.string(),
                "enabled_repositories": t.proxy(renames["enabled_repositories"]),
                "allowed_actions": t.proxy(renames["allowed_actions"]).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("enabled_repositories", "allowed_actions"),
    )
    functions[
        "actions_list_selected_repositories_enabled_github_actions_organization"
    ] = github.get(
        "/orgs/{org}/actions/permissions/repositories",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.number(),
                "repositories": t.array(t.proxy(renames["repository"])),
            }
        ),
    )
    functions[
        "actions_set_selected_repositories_enabled_github_actions_organization"
    ] = github.put(
        "/orgs/{org}/actions/permissions/repositories",
        t.struct({"org": t.string(), "selected_repository_ids": t.array(t.integer())}),
        t.boolean(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions[
        "actions_enable_selected_repository_github_actions_organization"
    ] = github.put(
        "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        t.struct({"org": t.string(), "repository_id": t.integer()}),
        t.boolean(),
    )
    functions[
        "actions_disable_selected_repository_github_actions_organization"
    ] = github.delete(
        "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        t.struct({"org": t.string(), "repository_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_get_allowed_actions_organization"] = github.get(
        "/orgs/{org}/actions/permissions/selected-actions",
        t.struct({"org": t.string()}),
        t.proxy(renames["selected_actions"]),
    )
    functions["actions_set_allowed_actions_organization"] = github.put(
        "/orgs/{org}/actions/permissions/selected-actions",
        t.struct(
            {
                "org": t.string(),
                "github_owned_allowed": t.boolean().optional(),
                "verified_allowed": t.boolean().optional(),
                "patterns_allowed": t.array(t.string()).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("github_owned_allowed", "verified_allowed", "patterns_allowed"),
    )
    functions[
        "actions_get_github_actions_default_workflow_permissions_organization"
    ] = github.get(
        "/orgs/{org}/actions/permissions/workflow",
        t.struct({"org": t.string()}),
        t.proxy(renames["actions_get_default_workflow_permissions"]),
    )
    functions[
        "actions_set_github_actions_default_workflow_permissions_organization"
    ] = github.put(
        "/orgs/{org}/actions/permissions/workflow",
        t.struct(
            {
                "org": t.string(),
                "default_workflow_permissions": t.proxy(
                    renames["actions_default_workflow_permissions"]
                ).optional(),
                "can_approve_pull_request_reviews": t.proxy(
                    renames["actions_can_approve_pull_request_reviews"]
                ).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=(
            "default_workflow_permissions",
            "can_approve_pull_request_reviews",
        ),
    )
    functions["actions_list_required_workflows"] = github.get(
        "/orgs/{org}/actions/required_workflows",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "required_workflows": t.array(t.proxy(renames["required_workflow"])),
            }
        ),
    )
    functions["actions_create_required_workflow"] = github.post(
        "/orgs/{org}/actions/required_workflows",
        t.struct(
            {
                "org": t.string(),
                "workflow_file_path": t.string(),
                "repository_id": t.string(),
                "scope": t.string().optional(),
                "selected_repository_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["required_workflow"]),
        content_type="application/json",
        body_fields=(
            "workflow_file_path",
            "repository_id",
            "scope",
            "selected_repository_ids",
        ),
    )
    functions["actions_get_required_workflow"] = github.get(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        t.struct({"org": t.string(), "required_workflow_id": t.integer()}),
        t.proxy(renames["required_workflow"]),
    )
    functions["actions_update_required_workflow"] = github.patch(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        t.struct(
            {
                "org": t.string(),
                "required_workflow_id": t.integer(),
                "workflow_file_path": t.string().optional(),
                "repository_id": t.string().optional(),
                "scope": t.string().optional(),
                "selected_repository_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["required_workflow"]),
        content_type="application/json",
        body_fields=(
            "workflow_file_path",
            "repository_id",
            "scope",
            "selected_repository_ids",
        ),
    )
    functions["actions_delete_required_workflow"] = github.delete(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        t.struct({"org": t.string(), "required_workflow_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_list_selected_repositories_required_workflow"] = github.get(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories",
        t.struct({"org": t.string(), "required_workflow_id": t.integer()}),
        t.struct(
            {
                "total_count": t.number(),
                "repositories": t.array(t.proxy(renames["repository"])),
            }
        ).optional(),
    )
    functions["actions_set_selected_repos_to_required_workflow"] = github.put(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories",
        t.struct(
            {
                "org": t.string(),
                "required_workflow_id": t.integer(),
                "selected_repository_ids": t.array(t.integer()),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions["actions_add_selected_repo_to_required_workflow"] = github.put(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}",
        t.struct(
            {
                "org": t.string(),
                "required_workflow_id": t.integer(),
                "repository_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["actions_remove_selected_repo_from_required_workflow"] = github.delete(
        "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}",
        t.struct(
            {
                "org": t.string(),
                "required_workflow_id": t.integer(),
                "repository_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["actions_list_self_hosted_runners_for_org"] = github.get(
        "/orgs/{org}/actions/runners",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {"total_count": t.integer(), "runners": t.array(t.proxy(renames["runner"]))}
        ),
    )
    functions["actions_list_runner_applications_for_org"] = github.get(
        "/orgs/{org}/actions/runners/downloads",
        t.struct({"org": t.string()}),
        t.array(t.proxy(renames["runner_application"])),
    )
    functions["actions_create_registration_token_for_org"] = github.post(
        "/orgs/{org}/actions/runners/registration-token",
        t.struct({"org": t.string()}),
        t.proxy(renames["authentication_token"]),
    )
    functions["actions_create_remove_token_for_org"] = github.post(
        "/orgs/{org}/actions/runners/remove-token",
        t.struct({"org": t.string()}),
        t.proxy(renames["authentication_token"]),
    )
    functions["actions_get_self_hosted_runner_for_org"] = github.get(
        "/orgs/{org}/actions/runners/{runner_id}",
        t.struct({"org": t.string(), "runner_id": t.integer()}),
        t.proxy(renames["runner"]),
    )
    functions["actions_delete_self_hosted_runner_from_org"] = github.delete(
        "/orgs/{org}/actions/runners/{runner_id}",
        t.struct({"org": t.string(), "runner_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_list_labels_for_self_hosted_runner_for_org"] = github.get(
        "/orgs/{org}/actions/runners/{runner_id}/labels",
        t.struct({"org": t.string(), "runner_id": t.integer()}),
        t.struct({}).optional(),
    )
    functions["actions_add_custom_labels_to_self_hosted_runner_for_org"] = github.post(
        "/orgs/{org}/actions/runners/{runner_id}/labels",
        t.struct(
            {"org": t.string(), "runner_id": t.integer(), "labels": t.array(t.string())}
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("labels",),
    )
    functions["actions_set_custom_labels_for_self_hosted_runner_for_org"] = github.put(
        "/orgs/{org}/actions/runners/{runner_id}/labels",
        t.struct(
            {"org": t.string(), "runner_id": t.integer(), "labels": t.array(t.string())}
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("labels",),
    )
    functions[
        "actions_remove_all_custom_labels_from_self_hosted_runner_for_org"
    ] = github.delete(
        "/orgs/{org}/actions/runners/{runner_id}/labels",
        t.struct({"org": t.string(), "runner_id": t.integer()}),
        t.struct({}).optional(),
    )
    functions[
        "actions_remove_custom_label_from_self_hosted_runner_for_org"
    ] = github.delete(
        "/orgs/{org}/actions/runners/{runner_id}/labels/{name}",
        t.struct({"org": t.string(), "runner_id": t.integer(), "name": t.string()}),
        t.struct({}).optional(),
    )
    functions["actions_list_org_secrets"] = github.get(
        "/orgs/{org}/actions/secrets",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["organization_actions_secret"])),
            }
        ),
    )
    functions["actions_get_org_public_key"] = github.get(
        "/orgs/{org}/actions/secrets/public-key",
        t.struct({"org": t.string()}),
        t.proxy(renames["actions_public_key"]),
    )
    functions["actions_get_org_secret"] = github.get(
        "/orgs/{org}/actions/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.proxy(renames["organization_actions_secret"]),
    )
    functions["actions_create_or_update_org_secret"] = github.put(
        "/orgs/{org}/actions/secrets/{secret_name}",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
                "visibility": t.string(),
                "selected_repository_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=(
            "encrypted_value",
            "key_id",
            "visibility",
            "selected_repository_ids",
        ),
    )
    functions["actions_delete_org_secret"] = github.delete(
        "/orgs/{org}/actions/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.boolean(),
    )
    functions["actions_list_selected_repos_for_org_secret"] = github.get(
        "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["minimal_repository"])),
            }
        ),
    )
    functions["actions_set_selected_repos_for_org_secret"] = github.put(
        "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "selected_repository_ids": t.array(t.integer()),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions["actions_add_selected_repo_to_org_secret"] = github.put(
        "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean(),
    )
    functions["actions_remove_selected_repo_from_org_secret"] = github.delete(
        "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean(),
    )
    functions["actions_list_org_variables"] = github.get(
        "/orgs/{org}/actions/variables",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "variables": t.array(t.proxy(renames["organization_actions_variable"])),
            }
        ),
    )
    functions["actions_create_org_variable"] = github.post(
        "/orgs/{org}/actions/variables",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "value": t.string(),
                "visibility": t.string(),
                "selected_repository_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("name", "value", "visibility", "selected_repository_ids"),
    )
    functions["actions_get_org_variable"] = github.get(
        "/orgs/{org}/actions/variables/{name}",
        t.struct({"org": t.string(), "name": t.string()}),
        t.proxy(renames["organization_actions_variable"]),
    )
    functions["actions_delete_org_variable"] = github.delete(
        "/orgs/{org}/actions/variables/{name}",
        t.struct({"org": t.string(), "name": t.string()}),
        t.boolean(),
    )
    functions["actions_list_selected_repos_for_org_variable"] = github.get(
        "/orgs/{org}/actions/variables/{name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["minimal_repository"])),
            }
        ),
    )
    functions["actions_set_selected_repos_for_org_variable"] = github.put(
        "/orgs/{org}/actions/variables/{name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "selected_repository_ids": t.array(t.integer()),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions["actions_add_selected_repo_to_org_variable"] = github.put(
        "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        t.struct({"org": t.string(), "name": t.string(), "repository_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_remove_selected_repo_from_org_variable"] = github.delete(
        "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        t.struct({"org": t.string(), "name": t.string(), "repository_id": t.integer()}),
        t.boolean(),
    )
    functions["orgs_list_blocked_users"] = github.get(
        "/orgs/{org}/blocks",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["orgs_check_blocked_user"] = github.get(
        "/orgs/{org}/blocks/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["orgs_block_user"] = github.put(
        "/orgs/{org}/blocks/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["orgs_unblock_user"] = github.delete(
        "/orgs/{org}/blocks/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["code_scanning_list_alerts_for_org"] = github.get(
        "/orgs/{org}/code-scanning/alerts",
        t.struct(
            {
                "org": t.string(),
                "tool_name": t.proxy(renames["code_scanning_analysis_tool_name"]),
                "tool_guid": t.proxy(renames["code_scanning_analysis_tool_guid"]),
                "before": t.string(),
                "after": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "direction": t.string(),
                "state": t.proxy(renames["code_scanning_alert_state"]),
                "sort": t.string(),
                "severity": t.proxy(renames["code_scanning_alert_severity"]),
            }
        ),
        t.array(t.proxy(renames["code_scanning_organization_alert_items"])).optional(),
    )
    functions["codespaces_list_in_organization"] = github.get(
        "/orgs/{org}/codespaces",
        t.struct({"per_page": t.integer(), "page": t.integer(), "org": t.string()}),
        t.struct(
            {
                "total_count": t.integer(),
                "codespaces": t.array(t.proxy(renames["codespace"])),
            }
        ).optional(),
    )
    functions["codespaces_set_codespaces_billing"] = github.put(
        "/orgs/{org}/codespaces/billing",
        t.struct(
            {
                "org": t.string(),
                "visibility": t.string(),
                "selected_usernames": t.array(t.string()).optional(),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("visibility", "selected_usernames"),
    )
    functions["codespaces_set_codespaces_billing_users"] = github.post(
        "/orgs/{org}/codespaces/billing/selected_users",
        t.struct({"org": t.string(), "selected_usernames": t.array(t.string())}),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("selected_usernames",),
    )
    functions["codespaces_delete_codespaces_billing_users"] = github.delete(
        "/orgs/{org}/codespaces/billing/selected_users",
        t.struct({"org": t.string(), "selected_usernames": t.array(t.string())}),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("selected_usernames",),
    )
    functions["codespaces_list_org_secrets"] = github.get(
        "/orgs/{org}/codespaces/secrets",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["codespaces_org_secret"])),
            }
        ),
    )
    functions["codespaces_get_org_public_key"] = github.get(
        "/orgs/{org}/codespaces/secrets/public-key",
        t.struct({"org": t.string()}),
        t.proxy(renames["codespaces_public_key"]),
    )
    functions["codespaces_get_org_secret"] = github.get(
        "/orgs/{org}/codespaces/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.proxy(renames["codespaces_org_secret"]),
    )
    functions["codespaces_create_or_update_org_secret"] = github.put(
        "/orgs/{org}/codespaces/secrets/{secret_name}",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
                "visibility": t.string(),
                "selected_repository_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["empty_object"]).optional(),
        content_type="application/json",
        body_fields=(
            "encrypted_value",
            "key_id",
            "visibility",
            "selected_repository_ids",
        ),
    )
    functions["codespaces_delete_org_secret"] = github.delete(
        "/orgs/{org}/codespaces/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.boolean().optional(),
    )
    functions["codespaces_list_selected_repos_for_org_secret"] = github.get(
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["minimal_repository"])),
            }
        ).optional(),
    )
    functions["codespaces_set_selected_repos_for_org_secret"] = github.put(
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "selected_repository_ids": t.array(t.integer()),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions["codespaces_add_selected_repo_to_org_secret"] = github.put(
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["codespaces_remove_selected_repo_from_org_secret"] = github.delete(
        "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["dependabot_list_alerts_for_org"] = github.get(
        "/orgs/{org}/dependabot/alerts",
        t.struct(
            {
                "org": t.string(),
                "state": t.string(),
                "severity": t.string(),
                "ecosystem": t.string(),
                "package": t.string(),
                "scope": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "before": t.string(),
                "after": t.string(),
                "first": t.integer(),
                "last": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["dependabot_alert_with_repository"])).optional(),
    )
    functions["dependabot_list_org_secrets"] = github.get(
        "/orgs/{org}/dependabot/secrets",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["organization_dependabot_secret"])),
            }
        ),
    )
    functions["dependabot_get_org_public_key"] = github.get(
        "/orgs/{org}/dependabot/secrets/public-key",
        t.struct({"org": t.string()}),
        t.proxy(renames["dependabot_public_key"]),
    )
    functions["dependabot_get_org_secret"] = github.get(
        "/orgs/{org}/dependabot/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.proxy(renames["organization_dependabot_secret"]),
    )
    functions["dependabot_create_or_update_org_secret"] = github.put(
        "/orgs/{org}/dependabot/secrets/{secret_name}",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
                "visibility": t.string(),
                "selected_repository_ids": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=(
            "encrypted_value",
            "key_id",
            "visibility",
            "selected_repository_ids",
        ),
    )
    functions["dependabot_delete_org_secret"] = github.delete(
        "/orgs/{org}/dependabot/secrets/{secret_name}",
        t.struct({"org": t.string(), "secret_name": t.string()}),
        t.boolean(),
    )
    functions["dependabot_list_selected_repos_for_org_secret"] = github.get(
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["minimal_repository"])),
            }
        ),
    )
    functions["dependabot_set_selected_repos_for_org_secret"] = github.put(
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        t.struct(
            {
                "org": t.string(),
                "secret_name": t.string(),
                "selected_repository_ids": t.array(t.integer()),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions["dependabot_add_selected_repo_to_org_secret"] = github.put(
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean(),
    )
    functions["dependabot_remove_selected_repo_from_org_secret"] = github.delete(
        "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        t.struct(
            {"org": t.string(), "secret_name": t.string(), "repository_id": t.integer()}
        ),
        t.boolean(),
    )
    functions[
        "packages_list_docker_migration_conflicting_packages_for_organization"
    ] = github.get(
        "/orgs/{org}/docker/conflicts",
        t.struct({"org": t.string()}),
        t.array(t.proxy(renames["package"])),
    )
    functions["activity_list_public_org_events"] = github.get(
        "/orgs/{org}/events",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["event"])),
    )
    functions["orgs_list_failed_invitations"] = github.get(
        "/orgs/{org}/failed_invitations",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["organization_invitation"])).optional(),
    )
    functions["orgs_list_webhooks"] = github.get(
        "/orgs/{org}/hooks",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["org_hook"])).optional(),
    )
    functions["orgs_create_webhook"] = github.post(
        "/orgs/{org}/hooks",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "config": t.struct(
                    {
                        "url": t.proxy(renames["webhook_config_url"]),
                        "content_type": t.proxy(
                            renames["webhook_config_content_type"]
                        ).optional(),
                        "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                        "insecure_ssl": t.proxy(
                            renames["webhook_config_insecure_ssl"]
                        ).optional(),
                        "username": t.string().optional(),
                        "password": t.string().optional(),
                    }
                ),
                "events": t.array(t.string()).optional(),
                "active": t.boolean().optional(),
            }
        ),
        t.proxy(renames["org_hook"]).optional(),
        content_type="application/json",
        body_fields=("name", "config", "events", "active"),
    )
    functions["orgs_get_webhook"] = github.get(
        "/orgs/{org}/hooks/{hook_id}",
        t.struct({"org": t.string(), "hook_id": t.integer()}),
        t.proxy(renames["org_hook"]).optional(),
    )
    functions["orgs_update_webhook"] = github.patch(
        "/orgs/{org}/hooks/{hook_id}",
        t.struct(
            {
                "org": t.string(),
                "hook_id": t.integer(),
                "config": t.struct(
                    {
                        "url": t.proxy(renames["webhook_config_url"]),
                        "content_type": t.proxy(
                            renames["webhook_config_content_type"]
                        ).optional(),
                        "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                        "insecure_ssl": t.proxy(
                            renames["webhook_config_insecure_ssl"]
                        ).optional(),
                    }
                ).optional(),
                "events": t.array(t.string()).optional(),
                "active": t.boolean().optional(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["org_hook"]).optional(),
        content_type="application/json",
        body_fields=("config", "events", "active", "name"),
    )
    functions["orgs_delete_webhook"] = github.delete(
        "/orgs/{org}/hooks/{hook_id}",
        t.struct({"org": t.string(), "hook_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["orgs_get_webhook_config_for_org"] = github.get(
        "/orgs/{org}/hooks/{hook_id}/config",
        t.struct({"org": t.string(), "hook_id": t.integer()}),
        t.proxy(renames["webhook_config"]),
    )
    functions["orgs_update_webhook_config_for_org"] = github.patch(
        "/orgs/{org}/hooks/{hook_id}/config",
        t.struct(
            {
                "org": t.string(),
                "hook_id": t.integer(),
                "url": t.proxy(renames["webhook_config_url"]).optional(),
                "content_type": t.proxy(
                    renames["webhook_config_content_type"]
                ).optional(),
                "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                "insecure_ssl": t.proxy(
                    renames["webhook_config_insecure_ssl"]
                ).optional(),
            }
        ),
        t.proxy(renames["webhook_config"]),
        content_type="application/json",
        body_fields=("url", "content_type", "secret", "insecure_ssl"),
    )
    functions["orgs_list_webhook_deliveries"] = github.get(
        "/orgs/{org}/hooks/{hook_id}/deliveries",
        t.struct(
            {
                "org": t.string(),
                "hook_id": t.integer(),
                "per_page": t.integer(),
                "cursor": t.string(),
                "redelivery": t.boolean(),
            }
        ),
        t.array(t.proxy(renames["hook_delivery_item"])),
    )
    functions["orgs_get_webhook_delivery"] = github.get(
        "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
        t.struct(
            {"org": t.string(), "hook_id": t.integer(), "delivery_id": t.integer()}
        ),
        t.proxy(renames["hook_delivery"]),
    )
    functions["orgs_redeliver_webhook_delivery"] = github.post(
        "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        t.struct(
            {"org": t.string(), "hook_id": t.integer(), "delivery_id": t.integer()}
        ),
        t.struct({}),
    )
    functions["orgs_ping_webhook"] = github.post(
        "/orgs/{org}/hooks/{hook_id}/pings",
        t.struct({"org": t.string(), "hook_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_get_org_installation"] = github.get(
        "/orgs/{org}/installation",
        t.struct({"org": t.string()}),
        t.proxy(renames["installation"]),
    )
    functions["orgs_list_app_installations"] = github.get(
        "/orgs/{org}/installations",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "installations": t.array(t.proxy(renames["installation"])),
            }
        ),
    )
    functions["interactions_get_restrictions_for_org"] = github.get(
        "/orgs/{org}/interaction-limits",
        t.struct({"org": t.string()}),
        t.union([t.proxy(renames["interaction_limit_response"]), t.struct({})]),
    )
    functions["interactions_set_restrictions_for_org"] = github.put(
        "/orgs/{org}/interaction-limits",
        t.struct(
            {
                "org": t.string(),
                "limit": t.proxy(renames["interaction_group"]),
                "expiry": t.proxy(renames["interaction_expiry"]).optional(),
            }
        ),
        t.proxy(renames["interaction_limit_response"]),
        content_type="application/json",
        body_fields=("limit", "expiry"),
    )
    functions["interactions_remove_restrictions_for_org"] = github.delete(
        "/orgs/{org}/interaction-limits",
        t.struct({"org": t.string()}),
        t.boolean(),
    )
    functions["orgs_list_pending_invitations"] = github.get(
        "/orgs/{org}/invitations",
        t.struct(
            {
                "org": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "role": t.string(),
                "invitation_source": t.string(),
            }
        ),
        t.array(t.proxy(renames["organization_invitation"])).optional(),
    )
    functions["orgs_create_invitation"] = github.post(
        "/orgs/{org}/invitations",
        t.struct(
            {
                "org": t.string(),
                "invitee_id": t.integer().optional(),
                "email": t.string().optional(),
                "role": t.string().optional(),
                "team_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["organization_invitation"]).optional(),
        content_type="application/json",
        body_fields=("invitee_id", "email", "role", "team_ids"),
    )
    functions["orgs_cancel_invitation"] = github.delete(
        "/orgs/{org}/invitations/{invitation_id}",
        t.struct({"org": t.string(), "invitation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["orgs_list_invitation_teams"] = github.get(
        "/orgs/{org}/invitations/{invitation_id}/teams",
        t.struct(
            {
                "org": t.string(),
                "invitation_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team"])).optional(),
    )
    functions["issues_list_for_org"] = github.get(
        "/orgs/{org}/issues",
        t.struct(
            {
                "org": t.string(),
                "filter": t.string(),
                "state": t.string(),
                "labels": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue"])).optional(),
    )
    functions["orgs_list_members"] = github.get(
        "/orgs/{org}/members",
        t.struct(
            {
                "org": t.string(),
                "filter": t.string(),
                "role": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["orgs_check_membership_for_user"] = github.get(
        "/orgs/{org}/members/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["orgs_remove_member"] = github.delete(
        "/orgs/{org}/members/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["codespaces_get_codespaces_for_user_in_org"] = github.get(
        "/orgs/{org}/members/{username}/codespaces",
        t.struct(
            {
                "per_page": t.integer(),
                "page": t.integer(),
                "org": t.string(),
                "username": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "codespaces": t.array(t.proxy(renames["codespace"])),
            }
        ).optional(),
    )
    functions["codespaces_delete_from_organization"] = github.delete(
        "/orgs/{org}/members/{username}/codespaces/{codespace_name}",
        t.struct(
            {"org": t.string(), "username": t.string(), "codespace_name": t.string()}
        ),
        t.struct({}).optional(),
    )
    functions["codespaces_stop_in_organization"] = github.post(
        "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop",
        t.struct(
            {"org": t.string(), "username": t.string(), "codespace_name": t.string()}
        ),
        t.proxy(renames["codespace"]).optional(),
    )
    functions["orgs_get_membership_for_user"] = github.get(
        "/orgs/{org}/memberships/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.proxy(renames["org_membership"]).optional(),
    )
    functions["orgs_set_membership_for_user"] = github.put(
        "/orgs/{org}/memberships/{username}",
        t.struct(
            {"org": t.string(), "username": t.string(), "role": t.string().optional()}
        ),
        t.proxy(renames["org_membership"]),
        content_type="application/json",
        body_fields=("role",),
    )
    functions["orgs_remove_membership_for_user"] = github.delete(
        "/orgs/{org}/memberships/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["migrations_list_for_org"] = github.get(
        "/orgs/{org}/migrations",
        t.struct(
            {
                "org": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "exclude": t.array(t.string()),
            }
        ),
        t.array(t.proxy(renames["migration"])),
    )
    functions["migrations_start_for_org"] = github.post(
        "/orgs/{org}/migrations",
        t.struct(
            {
                "org": t.string(),
                "repositories": t.array(t.string()),
                "lock_repositories": t.boolean().optional(),
                "exclude_metadata": t.boolean().optional(),
                "exclude_git_data": t.boolean().optional(),
                "exclude_attachments": t.boolean().optional(),
                "exclude_releases": t.boolean().optional(),
                "exclude_owner_projects": t.boolean().optional(),
                "org_metadata_only": t.boolean().optional(),
                "exclude": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["migration"]).optional(),
        content_type="application/json",
        body_fields=(
            "repositories",
            "lock_repositories",
            "exclude_metadata",
            "exclude_git_data",
            "exclude_attachments",
            "exclude_releases",
            "exclude_owner_projects",
            "org_metadata_only",
            "exclude",
        ),
    )
    functions["migrations_get_status_for_org"] = github.get(
        "/orgs/{org}/migrations/{migration_id}",
        t.struct(
            {
                "org": t.string(),
                "migration_id": t.integer(),
                "exclude": t.array(t.string()),
            }
        ),
        t.proxy(renames["migration"]).optional(),
    )
    functions["migrations_download_archive_for_org"] = github.get(
        "/orgs/{org}/migrations/{migration_id}/archive",
        t.struct({"org": t.string(), "migration_id": t.integer()}),
        t.struct({}).optional(),
    )
    functions["migrations_delete_archive_for_org"] = github.delete(
        "/orgs/{org}/migrations/{migration_id}/archive",
        t.struct({"org": t.string(), "migration_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["migrations_unlock_repo_for_org"] = github.delete(
        "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
        t.struct(
            {"org": t.string(), "migration_id": t.integer(), "repo_name": t.string()}
        ),
        t.boolean().optional(),
    )
    functions["migrations_list_repos_for_org"] = github.get(
        "/orgs/{org}/migrations/{migration_id}/repositories",
        t.struct(
            {
                "org": t.string(),
                "migration_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])).optional(),
    )
    functions["orgs_list_outside_collaborators"] = github.get(
        "/orgs/{org}/outside_collaborators",
        t.struct(
            {
                "org": t.string(),
                "filter": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["orgs_convert_member_to_outside_collaborator"] = github.put(
        "/orgs/{org}/outside_collaborators/{username}",
        t.struct(
            {"org": t.string(), "username": t.string(), "async": t.boolean().optional()}
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("async",),
    )
    functions["orgs_remove_outside_collaborator"] = github.delete(
        "/orgs/{org}/outside_collaborators/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["packages_list_packages_for_organization"] = github.get(
        "/orgs/{org}/packages",
        t.struct(
            {
                "package_type": t.string(),
                "org": t.string(),
                "visibility": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["package"])),
    )
    functions["packages_get_package_for_organization"] = github.get(
        "/orgs/{org}/packages/{package_type}/{package_name}",
        t.struct(
            {"package_type": t.string(), "package_name": t.string(), "org": t.string()}
        ),
        t.proxy(renames["package"]),
    )
    functions["packages_delete_package_for_org"] = github.delete(
        "/orgs/{org}/packages/{package_type}/{package_name}",
        t.struct(
            {"package_type": t.string(), "package_name": t.string(), "org": t.string()}
        ),
        t.boolean().optional(),
    )
    functions["packages_restore_package_for_org"] = github.post(
        "/orgs/{org}/packages/{package_type}/{package_name}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "org": t.string(),
                "token": t.string(),
            }
        ),
        t.boolean().optional(),
    )
    functions[
        "packages_get_all_package_versions_for_package_owned_by_org"
    ] = github.get(
        "/orgs/{org}/packages/{package_type}/{package_name}/versions",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "org": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "state": t.string(),
            }
        ),
        t.array(t.proxy(renames["package_version"])).optional(),
    )
    functions["packages_get_package_version_for_organization"] = github.get(
        "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "org": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.proxy(renames["package_version"]),
    )
    functions["packages_delete_package_version_for_org"] = github.delete(
        "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "org": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["packages_restore_package_version_for_org"] = github.post(
        "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "org": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["projects_list_for_org"] = github.get(
        "/orgs/{org}/projects",
        t.struct(
            {
                "org": t.string(),
                "state": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["project"])),
    )
    functions["projects_create_for_org"] = github.post(
        "/orgs/{org}/projects",
        t.struct(
            {"org": t.string(), "name": t.string(), "body": t.string().optional()}
        ),
        t.proxy(renames["project"]).optional(),
        content_type="application/json",
        body_fields=("name", "body"),
    )
    functions["orgs_list_public_members"] = github.get(
        "/orgs/{org}/public_members",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["orgs_check_public_membership_for_user"] = github.get(
        "/orgs/{org}/public_members/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["orgs_set_public_membership_for_authenticated_user"] = github.put(
        "/orgs/{org}/public_members/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["orgs_remove_public_membership_for_authenticated_user"] = github.delete(
        "/orgs/{org}/public_members/{username}",
        t.struct({"org": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["repos_list_for_org"] = github.get(
        "/orgs/{org}/repos",
        t.struct(
            {
                "org": t.string(),
                "type": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["repos_create_in_org"] = github.post(
        "/orgs/{org}/repos",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "description": t.string().optional(),
                "homepage": t.string().optional(),
                "private": t.boolean().optional(),
                "visibility": t.string().optional(),
                "has_issues": t.boolean().optional(),
                "has_projects": t.boolean().optional(),
                "has_wiki": t.boolean().optional(),
                "has_downloads": t.boolean().optional(),
                "is_template": t.boolean().optional(),
                "team_id": t.integer().optional(),
                "auto_init": t.boolean().optional(),
                "gitignore_template": t.string().optional(),
                "license_template": t.string().optional(),
                "allow_squash_merge": t.boolean().optional(),
                "allow_merge_commit": t.boolean().optional(),
                "allow_rebase_merge": t.boolean().optional(),
                "allow_auto_merge": t.boolean().optional(),
                "delete_branch_on_merge": t.boolean().optional(),
                "use_squash_pr_title_as_default": t.boolean().optional(),
                "squash_merge_commit_title": t.string().optional(),
                "squash_merge_commit_message": t.string().optional(),
                "merge_commit_title": t.string().optional(),
                "merge_commit_message": t.string().optional(),
            }
        ),
        t.proxy(renames["repository"]),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "homepage",
            "private",
            "visibility",
            "has_issues",
            "has_projects",
            "has_wiki",
            "has_downloads",
            "is_template",
            "team_id",
            "auto_init",
            "gitignore_template",
            "license_template",
            "allow_squash_merge",
            "allow_merge_commit",
            "allow_rebase_merge",
            "allow_auto_merge",
            "delete_branch_on_merge",
            "use_squash_pr_title_as_default",
            "squash_merge_commit_title",
            "squash_merge_commit_message",
            "merge_commit_title",
            "merge_commit_message",
        ),
    )
    functions["repos_get_org_rulesets"] = github.get(
        "/orgs/{org}/rulesets",
        t.struct({"org": t.string()}),
        t.array(t.proxy(renames["repository_ruleset"])).optional(),
    )
    functions["repos_create_org_ruleset"] = github.post(
        "/orgs/{org}/rulesets",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "target": t.string().optional(),
                "enforcement": t.proxy(renames["repository_rule_enforcement"]),
                "bypass_actors": t.array(
                    t.proxy(renames["repository_ruleset_bypass_actor"])
                ).optional(),
                "conditions": t.proxy(renames["org_ruleset_conditions"]).optional(),
                "rules": t.array(t.proxy(renames["repository_rule"])).optional(),
            }
        ),
        t.proxy(renames["repository_ruleset"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "target",
            "enforcement",
            "bypass_actors",
            "conditions",
            "rules",
        ),
    )
    functions["repos_get_org_ruleset"] = github.get(
        "/orgs/{org}/rulesets/{ruleset_id}",
        t.struct({"org": t.string(), "ruleset_id": t.integer()}),
        t.proxy(renames["repository_ruleset"]).optional(),
    )
    functions["repos_update_org_ruleset"] = github.put(
        "/orgs/{org}/rulesets/{ruleset_id}",
        t.struct(
            {
                "org": t.string(),
                "ruleset_id": t.integer(),
                "name": t.string().optional(),
                "target": t.string().optional(),
                "enforcement": t.proxy(
                    renames["repository_rule_enforcement"]
                ).optional(),
                "bypass_actors": t.array(
                    t.proxy(renames["repository_ruleset_bypass_actor"])
                ).optional(),
                "conditions": t.proxy(renames["org_ruleset_conditions"]).optional(),
                "rules": t.array(t.proxy(renames["repository_rule"])).optional(),
            }
        ),
        t.proxy(renames["repository_ruleset"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "target",
            "enforcement",
            "bypass_actors",
            "conditions",
            "rules",
        ),
    )
    functions["repos_delete_org_ruleset"] = github.delete(
        "/orgs/{org}/rulesets/{ruleset_id}",
        t.struct({"org": t.string(), "ruleset_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["secret_scanning_list_alerts_for_org"] = github.get(
        "/orgs/{org}/secret-scanning/alerts",
        t.struct(
            {
                "org": t.string(),
                "state": t.string(),
                "secret_type": t.string(),
                "resolution": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "before": t.string(),
                "after": t.string(),
            }
        ),
        t.array(t.proxy(renames["organization_secret_scanning_alert"])).optional(),
    )
    functions["orgs_list_security_manager_teams"] = github.get(
        "/orgs/{org}/security-managers",
        t.struct({"org": t.string()}),
        t.array(t.proxy(renames["team_simple"])),
    )
    functions["orgs_add_security_manager_team"] = github.put(
        "/orgs/{org}/security-managers/teams/{team_slug}",
        t.struct({"org": t.string(), "team_slug": t.string()}),
        t.boolean(),
    )
    functions["orgs_remove_security_manager_team"] = github.delete(
        "/orgs/{org}/security-managers/teams/{team_slug}",
        t.struct({"org": t.string(), "team_slug": t.string()}),
        t.boolean(),
    )
    functions["billing_get_github_actions_billing_org"] = github.get(
        "/orgs/{org}/settings/billing/actions",
        t.struct({"org": t.string()}),
        t.proxy(renames["actions_billing_usage"]),
    )
    functions["billing_get_github_packages_billing_org"] = github.get(
        "/orgs/{org}/settings/billing/packages",
        t.struct({"org": t.string()}),
        t.proxy(renames["packages_billing_usage"]),
    )
    functions["billing_get_shared_storage_billing_org"] = github.get(
        "/orgs/{org}/settings/billing/shared-storage",
        t.struct({"org": t.string()}),
        t.proxy(renames["combined_billing_usage"]),
    )
    functions["teams_list"] = github.get(
        "/orgs/{org}/teams",
        t.struct({"org": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["team"])),
    )
    functions["teams_create"] = github.post(
        "/orgs/{org}/teams",
        t.struct(
            {
                "org": t.string(),
                "name": t.string(),
                "description": t.string().optional(),
                "maintainers": t.array(t.string()).optional(),
                "repo_names": t.array(t.string()).optional(),
                "privacy": t.string().optional(),
                "notification_setting": t.string().optional(),
                "permission": t.string().optional(),
                "parent_team_id": t.integer().optional(),
            }
        ),
        t.proxy(renames["team_full"]),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "maintainers",
            "repo_names",
            "privacy",
            "notification_setting",
            "permission",
            "parent_team_id",
        ),
    )
    functions["teams_get_by_name"] = github.get(
        "/orgs/{org}/teams/{team_slug}",
        t.struct({"org": t.string(), "team_slug": t.string()}),
        t.proxy(renames["team_full"]).optional(),
    )
    functions["teams_update_in_org"] = github.patch(
        "/orgs/{org}/teams/{team_slug}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "name": t.string().optional(),
                "description": t.string().optional(),
                "privacy": t.string().optional(),
                "notification_setting": t.string().optional(),
                "permission": t.string().optional(),
                "parent_team_id": t.integer().optional(),
            }
        ),
        t.proxy(renames["team_full"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "privacy",
            "notification_setting",
            "permission",
            "parent_team_id",
        ),
    )
    functions["teams_delete_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}",
        t.struct({"org": t.string(), "team_slug": t.string()}),
        t.boolean(),
    )
    functions["teams_list_discussions_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "pinned": t.string(),
            }
        ),
        t.array(t.proxy(renames["team_discussion"])),
    )
    functions["teams_create_discussion_in_org"] = github.post(
        "/orgs/{org}/teams/{team_slug}/discussions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "title": t.string(),
                "body": t.string(),
                "private": t.boolean().optional(),
            }
        ),
        t.proxy(renames["team_discussion"]),
        content_type="application/json",
        body_fields=("title", "body", "private"),
    )
    functions["teams_get_discussion_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
            }
        ),
        t.proxy(renames["team_discussion"]),
    )
    functions["teams_update_discussion_in_org"] = github.patch(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "title": t.string().optional(),
                "body": t.string().optional(),
            }
        ),
        t.proxy(renames["team_discussion"]),
        content_type="application/json",
        body_fields=("title", "body"),
    )
    functions["teams_delete_discussion_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["teams_list_discussion_comments_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team_discussion_comment"])),
    )
    functions["teams_create_discussion_comment_in_org"] = github.post(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["teams_get_discussion_comment_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
    )
    functions["teams_update_discussion_comment_in_org"] = github.patch(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["teams_delete_discussion_comment_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["reactions_list_for_team_discussion_comment_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])),
    )
    functions["reactions_create_for_team_discussion_comment_in_org"] = github.post(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_team_discussion_comment"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["reactions_list_for_team_discussion_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])),
    )
    functions["reactions_create_for_team_discussion_in_org"] = github.post(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_team_discussion"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "discussion_number": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["teams_list_pending_invitations_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/invitations",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["organization_invitation"])),
    )
    functions["teams_list_members_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/members",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "role": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["teams_get_membership_for_user_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        t.struct({"org": t.string(), "team_slug": t.string(), "username": t.string()}),
        t.proxy(renames["team_membership"]).optional(),
    )
    functions["teams_add_or_update_membership_for_user_in_org"] = github.put(
        "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "username": t.string(),
                "role": t.string().optional(),
            }
        ),
        t.proxy(renames["team_membership"]),
        content_type="application/json",
        body_fields=("role",),
    )
    functions["teams_remove_membership_for_user_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        t.struct({"org": t.string(), "team_slug": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["teams_list_projects_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/projects",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team_project"])),
    )
    functions["teams_check_permissions_for_project_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        t.struct(
            {"org": t.string(), "team_slug": t.string(), "project_id": t.integer()}
        ),
        t.proxy(renames["team_project"]).optional(),
    )
    functions["teams_add_or_update_project_permissions_in_org"] = github.put(
        "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "project_id": t.integer(),
                "permission": t.string().optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["teams_remove_project_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        t.struct(
            {"org": t.string(), "team_slug": t.string(), "project_id": t.integer()}
        ),
        t.boolean(),
    )
    functions["teams_list_repos_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/repos",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["teams_check_permissions_for_repo_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "owner": t.string(),
                "repo": t.string(),
            }
        ),
        t.proxy(renames["team_repository"]).optional(),
    )
    functions["teams_add_or_update_repo_permissions_in_org"] = github.put(
        "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "owner": t.string(),
                "repo": t.string(),
                "permission": t.string().optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["teams_remove_repo_in_org"] = github.delete(
        "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "owner": t.string(),
                "repo": t.string(),
            }
        ),
        t.boolean(),
    )
    functions["teams_list_child_in_org"] = github.get(
        "/orgs/{org}/teams/{team_slug}/teams",
        t.struct(
            {
                "org": t.string(),
                "team_slug": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team"])),
    )
    functions["orgs_enable_or_disable_security_product_on_all_org_repos"] = github.post(
        "/orgs/{org}/{security_product}/{enablement}",
        t.struct(
            {
                "org": t.string(),
                "security_product": t.string(),
                "enablement": t.string(),
            }
        ),
        t.boolean(),
    )
    functions["projects_get_card"] = github.get(
        "/projects/columns/cards/{card_id}",
        t.struct({"card_id": t.integer()}),
        t.proxy(renames["project_card"]).optional(),
    )
    functions["projects_update_card"] = github.patch(
        "/projects/columns/cards/{card_id}",
        t.struct(
            {
                "card_id": t.integer(),
                "note": t.string().optional(),
                "archived": t.boolean().optional(),
            }
        ),
        t.proxy(renames["project_card"]).optional(),
        content_type="application/json",
        body_fields=("note", "archived"),
    )
    functions["projects_delete_card"] = github.delete(
        "/projects/columns/cards/{card_id}",
        t.struct({"card_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["projects_move_card"] = github.post(
        "/projects/columns/cards/{card_id}/moves",
        t.struct(
            {
                "card_id": t.integer(),
                "position": t.string(),
                "column_id": t.integer().optional(),
            }
        ),
        t.struct({}),
        content_type="application/json",
        body_fields=("position", "column_id"),
    )
    functions["projects_get_column"] = github.get(
        "/projects/columns/{column_id}",
        t.struct({"column_id": t.integer()}),
        t.proxy(renames["project_column"]).optional(),
    )
    functions["projects_update_column"] = github.patch(
        "/projects/columns/{column_id}",
        t.struct({"column_id": t.integer(), "name": t.string()}),
        t.proxy(renames["project_column"]),
        content_type="application/json",
        body_fields=("name",),
    )
    functions["projects_delete_column"] = github.delete(
        "/projects/columns/{column_id}",
        t.struct({"column_id": t.integer()}),
        t.boolean(),
    )
    functions["projects_list_cards"] = github.get(
        "/projects/columns/{column_id}/cards",
        t.struct(
            {
                "column_id": t.integer(),
                "archived_state": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["project_card"])),
    )
    functions["projects_move_column"] = github.post(
        "/projects/columns/{column_id}/moves",
        t.struct({"column_id": t.integer(), "position": t.string()}),
        t.struct({}),
        content_type="application/json",
        body_fields=("position",),
    )
    functions["projects_get"] = github.get(
        "/projects/{project_id}",
        t.struct({"project_id": t.integer()}),
        t.proxy(renames["project"]),
    )
    functions["projects_update"] = github.patch(
        "/projects/{project_id}",
        t.struct(
            {
                "project_id": t.integer(),
                "name": t.string().optional(),
                "body": t.string().optional(),
                "state": t.string().optional(),
                "organization_permission": t.string().optional(),
                "private": t.boolean().optional(),
            }
        ),
        t.proxy(renames["project"]).optional(),
        content_type="application/json",
        body_fields=("name", "body", "state", "organization_permission", "private"),
    )
    functions["projects_delete"] = github.delete(
        "/projects/{project_id}",
        t.struct({"project_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["projects_list_collaborators"] = github.get(
        "/projects/{project_id}/collaborators",
        t.struct(
            {
                "project_id": t.integer(),
                "affiliation": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])).optional(),
    )
    functions["projects_add_collaborator"] = github.put(
        "/projects/{project_id}/collaborators/{username}",
        t.struct(
            {
                "project_id": t.integer(),
                "username": t.string(),
                "permission": t.string().optional(),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["projects_remove_collaborator"] = github.delete(
        "/projects/{project_id}/collaborators/{username}",
        t.struct({"project_id": t.integer(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["projects_get_permission_for_user"] = github.get(
        "/projects/{project_id}/collaborators/{username}/permission",
        t.struct({"project_id": t.integer(), "username": t.string()}),
        t.proxy(renames["project_collaborator_permission"]).optional(),
    )
    functions["projects_list_columns"] = github.get(
        "/projects/{project_id}/columns",
        t.struct(
            {"project_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["project_column"])),
    )
    functions["projects_create_column"] = github.post(
        "/projects/{project_id}/columns",
        t.struct({"project_id": t.integer(), "name": t.string()}),
        t.proxy(renames["project_column"]),
        content_type="application/json",
        body_fields=("name",),
    )
    functions["rate_limit_get"] = github.get(
        "/rate_limit",
        t.struct({}),
        t.proxy(renames["rate_limit_overview"]).optional(),
    )
    functions["actions_list_repo_required_workflows"] = github.get(
        "/repos/{org}/{repo}/actions/required_workflows",
        t.struct(
            {
                "org": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "required_workflows": t.array(
                    t.proxy(renames["repo_required_workflow"])
                ),
            }
        ).optional(),
    )
    functions["actions_get_repo_required_workflow"] = github.get(
        "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}",
        t.struct(
            {
                "org": t.string(),
                "repo": t.string(),
                "required_workflow_id_for_repo": t.integer(),
            }
        ),
        t.proxy(renames["repo_required_workflow"]).optional(),
    )
    functions["actions_get_repo_required_workflow_usage"] = github.get(
        "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing",
        t.struct(
            {
                "org": t.string(),
                "repo": t.string(),
                "required_workflow_id_for_repo": t.integer(),
            }
        ),
        t.proxy(renames["workflow_usage"]).optional(),
    )
    functions["repos_get"] = github.get(
        "/repos/{owner}/{repo}",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["full_repository"]).optional(),
    )
    functions["repos_update"] = github.patch(
        "/repos/{owner}/{repo}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string().optional(),
                "description": t.string().optional(),
                "homepage": t.string().optional(),
                "private": t.boolean().optional(),
                "visibility": t.string().optional(),
                "security_and_analysis": t.struct(
                    {
                        "advanced_security": t.struct(
                            {"status": t.string().optional()}
                        ).optional(),
                        "secret_scanning": t.struct(
                            {"status": t.string().optional()}
                        ).optional(),
                        "secret_scanning_push_protection": t.struct(
                            {"status": t.string().optional()}
                        ).optional(),
                    }
                ).optional(),
                "has_issues": t.boolean().optional(),
                "has_projects": t.boolean().optional(),
                "has_wiki": t.boolean().optional(),
                "is_template": t.boolean().optional(),
                "default_branch": t.string().optional(),
                "allow_squash_merge": t.boolean().optional(),
                "allow_merge_commit": t.boolean().optional(),
                "allow_rebase_merge": t.boolean().optional(),
                "allow_auto_merge": t.boolean().optional(),
                "delete_branch_on_merge": t.boolean().optional(),
                "allow_update_branch": t.boolean().optional(),
                "use_squash_pr_title_as_default": t.boolean().optional(),
                "squash_merge_commit_title": t.string().optional(),
                "squash_merge_commit_message": t.string().optional(),
                "merge_commit_title": t.string().optional(),
                "merge_commit_message": t.string().optional(),
                "archived": t.boolean().optional(),
                "allow_forking": t.boolean().optional(),
                "web_commit_signoff_required": t.boolean().optional(),
            }
        ),
        t.proxy(renames["full_repository"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "homepage",
            "private",
            "visibility",
            "security_and_analysis",
            "has_issues",
            "has_projects",
            "has_wiki",
            "is_template",
            "default_branch",
            "allow_squash_merge",
            "allow_merge_commit",
            "allow_rebase_merge",
            "allow_auto_merge",
            "delete_branch_on_merge",
            "allow_update_branch",
            "use_squash_pr_title_as_default",
            "squash_merge_commit_title",
            "squash_merge_commit_message",
            "merge_commit_title",
            "merge_commit_message",
            "archived",
            "allow_forking",
            "web_commit_signoff_required",
        ),
    )
    functions["repos_delete"] = github.delete(
        "/repos/{owner}/{repo}",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["actions_list_artifacts_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/artifacts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "name": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "artifacts": t.array(t.proxy(renames["artifact"])),
            }
        ),
    )
    functions["actions_get_artifact"] = github.get(
        "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "artifact_id": t.integer()}),
        t.proxy(renames["artifact"]),
    )
    functions["actions_delete_artifact"] = github.delete(
        "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "artifact_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_download_artifact"] = github.get(
        "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "artifact_id": t.integer(),
                "archive_format": t.string(),
            }
        ),
        t.struct({}),
    )
    functions["actions_get_actions_cache_usage"] = github.get(
        "/repos/{owner}/{repo}/actions/cache/usage",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["actions_cache_usage_by_repository"]),
    )
    functions["actions_get_actions_cache_list"] = github.get(
        "/repos/{owner}/{repo}/actions/caches",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "ref": t.string(),
                "key": t.string(),
                "sort": t.string(),
                "direction": t.string(),
            }
        ),
        t.proxy(renames["actions_cache_list"]),
    )
    functions["actions_delete_actions_cache_by_key"] = github.delete(
        "/repos/{owner}/{repo}/actions/caches",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "key": t.string(),
                "ref": t.string(),
            }
        ),
        t.proxy(renames["actions_cache_list"]),
    )
    functions["actions_delete_actions_cache_by_id"] = github.delete(
        "/repos/{owner}/{repo}/actions/caches/{cache_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "cache_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_get_job_for_workflow_run"] = github.get(
        "/repos/{owner}/{repo}/actions/jobs/{job_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "job_id": t.integer()}),
        t.proxy(renames["job"]),
    )
    functions["actions_download_job_logs_for_workflow_run"] = github.get(
        "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
        t.struct({"owner": t.string(), "repo": t.string(), "job_id": t.integer()}),
        t.struct({}),
    )
    functions["actions_re_run_job_for_workflow_run"] = github.post(
        "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "job_id": t.integer(),
                "enable_debug_logging": t.boolean().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("enable_debug_logging",),
    )
    functions["actions_get_custom_oidc_sub_claim_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/oidc/customization/sub",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["oidc_custom_sub_repo"]).optional(),
    )
    functions["actions_set_custom_oidc_sub_claim_for_repo"] = github.put(
        "/repos/{owner}/{repo}/actions/oidc/customization/sub",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "use_default": t.boolean(),
                "include_claim_keys": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["empty_object"]).optional(),
        content_type="application/json",
        body_fields=("use_default", "include_claim_keys"),
    )
    functions["actions_list_repo_organization_secrets"] = github.get(
        "/repos/{owner}/{repo}/actions/organization-secrets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["actions_secret"])),
            }
        ),
    )
    functions["actions_list_repo_organization_variables"] = github.get(
        "/repos/{owner}/{repo}/actions/organization-variables",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "variables": t.array(t.proxy(renames["actions_variable"])),
            }
        ),
    )
    functions["actions_get_github_actions_permissions_repository"] = github.get(
        "/repos/{owner}/{repo}/actions/permissions",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["actions_repository_permissions"]),
    )
    functions["actions_set_github_actions_permissions_repository"] = github.put(
        "/repos/{owner}/{repo}/actions/permissions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "enabled": t.proxy(renames["actions_enabled"]),
                "allowed_actions": t.proxy(renames["allowed_actions"]).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("enabled", "allowed_actions"),
    )
    functions["actions_get_workflow_access_to_repository"] = github.get(
        "/repos/{owner}/{repo}/actions/permissions/access",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["actions_workflow_access_to_repository"]),
    )
    functions["actions_set_workflow_access_to_repository"] = github.put(
        "/repos/{owner}/{repo}/actions/permissions/access",
        t.struct({"owner": t.string(), "repo": t.string(), "access_level": t.string()}),
        t.boolean(),
        content_type="application/json",
        body_fields=("access_level",),
    )
    functions["actions_get_allowed_actions_repository"] = github.get(
        "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["selected_actions"]),
    )
    functions["actions_set_allowed_actions_repository"] = github.put(
        "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "github_owned_allowed": t.boolean().optional(),
                "verified_allowed": t.boolean().optional(),
                "patterns_allowed": t.array(t.string()).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("github_owned_allowed", "verified_allowed", "patterns_allowed"),
    )
    functions[
        "actions_get_github_actions_default_workflow_permissions_repository"
    ] = github.get(
        "/repos/{owner}/{repo}/actions/permissions/workflow",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["actions_get_default_workflow_permissions"]),
    )
    functions[
        "actions_set_github_actions_default_workflow_permissions_repository"
    ] = github.put(
        "/repos/{owner}/{repo}/actions/permissions/workflow",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "default_workflow_permissions": t.proxy(
                    renames["actions_default_workflow_permissions"]
                ).optional(),
                "can_approve_pull_request_reviews": t.proxy(
                    renames["actions_can_approve_pull_request_reviews"]
                ).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=(
            "default_workflow_permissions",
            "can_approve_pull_request_reviews",
        ),
    )
    functions["actions_list_required_workflow_runs"] = github.get(
        "/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "required_workflow_id_for_repo": t.integer(),
                "actor": t.string(),
                "branch": t.string(),
                "event": t.string(),
                "status": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "created": t.string(),
                "exclude_pull_requests": t.boolean(),
                "check_suite_id": t.integer(),
                "head_sha": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "workflow_runs": t.array(t.proxy(renames["workflow_run"])),
            }
        ),
    )
    functions["actions_list_self_hosted_runners_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/runners",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {"total_count": t.integer(), "runners": t.array(t.proxy(renames["runner"]))}
        ),
    )
    functions["actions_list_runner_applications_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/runners/downloads",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["runner_application"])),
    )
    functions["actions_create_registration_token_for_repo"] = github.post(
        "/repos/{owner}/{repo}/actions/runners/registration-token",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["authentication_token"]),
    )
    functions["actions_create_remove_token_for_repo"] = github.post(
        "/repos/{owner}/{repo}/actions/runners/remove-token",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["authentication_token"]),
    )
    functions["actions_get_self_hosted_runner_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "runner_id": t.integer()}),
        t.proxy(renames["runner"]),
    )
    functions["actions_delete_self_hosted_runner_from_repo"] = github.delete(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "runner_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_list_labels_for_self_hosted_runner_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        t.struct({"owner": t.string(), "repo": t.string(), "runner_id": t.integer()}),
        t.struct({}).optional(),
    )
    functions["actions_add_custom_labels_to_self_hosted_runner_for_repo"] = github.post(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "runner_id": t.integer(),
                "labels": t.array(t.string()),
            }
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("labels",),
    )
    functions["actions_set_custom_labels_for_self_hosted_runner_for_repo"] = github.put(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "runner_id": t.integer(),
                "labels": t.array(t.string()),
            }
        ),
        t.struct({}).optional(),
        content_type="application/json",
        body_fields=("labels",),
    )
    functions[
        "actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
    ] = github.delete(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        t.struct({"owner": t.string(), "repo": t.string(), "runner_id": t.integer()}),
        t.struct({}).optional(),
    )
    functions[
        "actions_remove_custom_label_from_self_hosted_runner_for_repo"
    ] = github.delete(
        "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "runner_id": t.integer(),
                "name": t.string(),
            }
        ),
        t.struct({}).optional(),
    )
    functions["actions_list_workflow_runs_for_repo"] = github.get(
        "/repos/{owner}/{repo}/actions/runs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "actor": t.string(),
                "branch": t.string(),
                "event": t.string(),
                "status": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "created": t.string(),
                "exclude_pull_requests": t.boolean(),
                "check_suite_id": t.integer(),
                "head_sha": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "workflow_runs": t.array(t.proxy(renames["workflow_run"])),
            }
        ),
    )
    functions["actions_get_workflow_run"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "exclude_pull_requests": t.boolean(),
            }
        ),
        t.proxy(renames["workflow_run"]),
    )
    functions["actions_delete_workflow_run"] = github.delete(
        "/repos/{owner}/{repo}/actions/runs/{run_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_get_reviews_for_run"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.array(t.proxy(renames["environment_approvals"])),
    )
    functions["actions_approve_workflow_run"] = github.post(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/approve",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.proxy(renames["empty_object"]).optional(),
    )
    functions["actions_list_workflow_run_artifacts"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "artifacts": t.array(t.proxy(renames["artifact"])),
            }
        ),
    )
    functions["actions_get_workflow_run_attempt"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "attempt_number": t.integer(),
                "exclude_pull_requests": t.boolean(),
            }
        ),
        t.proxy(renames["workflow_run"]),
    )
    functions["actions_list_jobs_for_workflow_run_attempt"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "attempt_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {"total_count": t.integer(), "jobs": t.array(t.proxy(renames["job"]))}
        ).optional(),
    )
    functions["actions_download_workflow_run_attempt_logs"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "attempt_number": t.integer(),
            }
        ),
        t.struct({}),
    )
    functions["actions_cancel_workflow_run"] = github.post(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.proxy(renames["empty_object"]),
    )
    functions["actions_list_jobs_for_workflow_run"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "filter": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {"total_count": t.integer(), "jobs": t.array(t.proxy(renames["job"]))}
        ),
    )
    functions["actions_download_workflow_run_logs"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.struct({}),
    )
    functions["actions_delete_workflow_run_logs"] = github.delete(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.boolean(),
    )
    functions["actions_get_pending_deployments_for_run"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.array(t.proxy(renames["pending_deployment"])),
    )
    functions["actions_review_pending_deployments_for_run"] = github.post(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "environment_ids": t.array(t.integer()),
                "state": t.string(),
                "comment": t.string(),
            }
        ),
        t.array(t.proxy(renames["deployment"])),
        content_type="application/json",
        body_fields=("environment_ids", "state", "comment"),
    )
    functions["actions_re_run_workflow"] = github.post(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "enable_debug_logging": t.boolean().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("enable_debug_logging",),
    )
    functions["actions_re_run_workflow_failed_jobs"] = github.post(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "run_id": t.integer(),
                "enable_debug_logging": t.boolean().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("enable_debug_logging",),
    )
    functions["actions_get_workflow_run_usage"] = github.get(
        "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
        t.struct({"owner": t.string(), "repo": t.string(), "run_id": t.integer()}),
        t.proxy(renames["workflow_run_usage"]),
    )
    functions["actions_list_repo_secrets"] = github.get(
        "/repos/{owner}/{repo}/actions/secrets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["actions_secret"])),
            }
        ),
    )
    functions["actions_get_repo_public_key"] = github.get(
        "/repos/{owner}/{repo}/actions/secrets/public-key",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["actions_public_key"]),
    )
    functions["actions_get_repo_secret"] = github.get(
        "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.proxy(renames["actions_secret"]),
    )
    functions["actions_create_or_update_repo_secret"] = github.put(
        "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("encrypted_value", "key_id"),
    )
    functions["actions_delete_repo_secret"] = github.delete(
        "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.boolean(),
    )
    functions["actions_list_repo_variables"] = github.get(
        "/repos/{owner}/{repo}/actions/variables",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "variables": t.array(t.proxy(renames["actions_variable"])),
            }
        ),
    )
    functions["actions_create_repo_variable"] = github.post(
        "/repos/{owner}/{repo}/actions/variables",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string(),
                "value": t.string(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("name", "value"),
    )
    functions["actions_get_repo_variable"] = github.get(
        "/repos/{owner}/{repo}/actions/variables/{name}",
        t.struct({"owner": t.string(), "repo": t.string(), "name": t.string()}),
        t.proxy(renames["actions_variable"]),
    )
    functions["actions_delete_repo_variable"] = github.delete(
        "/repos/{owner}/{repo}/actions/variables/{name}",
        t.struct({"owner": t.string(), "repo": t.string(), "name": t.string()}),
        t.boolean(),
    )
    functions["actions_list_repo_workflows"] = github.get(
        "/repos/{owner}/{repo}/actions/workflows",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "workflows": t.array(t.proxy(renames["workflow"])),
            }
        ),
    )
    functions["actions_get_workflow"] = github.get(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
            }
        ),
        t.proxy(renames["workflow"]),
    )
    functions["actions_disable_workflow"] = github.put(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
            }
        ),
        t.boolean(),
    )
    functions["actions_create_workflow_dispatch"] = github.post(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
                "ref": t.string(),
                "inputs": t.struct({}).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("ref", "inputs"),
    )
    functions["actions_enable_workflow"] = github.put(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
            }
        ),
        t.boolean(),
    )
    functions["actions_list_workflow_runs"] = github.get(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
                "actor": t.string(),
                "branch": t.string(),
                "event": t.string(),
                "status": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "created": t.string(),
                "exclude_pull_requests": t.boolean(),
                "check_suite_id": t.integer(),
                "head_sha": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "workflow_runs": t.array(t.proxy(renames["workflow_run"])),
            }
        ),
    )
    functions["actions_get_workflow_usage"] = github.get(
        "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "workflow_id": t.either([t.integer(), t.string()]),
            }
        ),
        t.proxy(renames["workflow_usage"]),
    )
    functions["issues_list_assignees"] = github.get(
        "/repos/{owner}/{repo}/assignees",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])).optional(),
    )
    functions["issues_check_user_can_be_assigned"] = github.get(
        "/repos/{owner}/{repo}/assignees/{assignee}",
        t.struct({"owner": t.string(), "repo": t.string(), "assignee": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_list_autolinks"] = github.get(
        "/repos/{owner}/{repo}/autolinks",
        t.struct({"owner": t.string(), "repo": t.string(), "page": t.integer()}),
        t.array(t.proxy(renames["autolink"])),
    )
    functions["repos_create_autolink"] = github.post(
        "/repos/{owner}/{repo}/autolinks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "key_prefix": t.string(),
                "url_template": t.string(),
                "is_alphanumeric": t.boolean().optional(),
            }
        ),
        t.proxy(renames["autolink"]),
        content_type="application/json",
        body_fields=("key_prefix", "url_template", "is_alphanumeric"),
    )
    functions["repos_get_autolink"] = github.get(
        "/repos/{owner}/{repo}/autolinks/{autolink_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "autolink_id": t.integer()}),
        t.proxy(renames["autolink"]).optional(),
    )
    functions["repos_delete_autolink"] = github.delete(
        "/repos/{owner}/{repo}/autolinks/{autolink_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "autolink_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["repos_enable_automated_security_fixes"] = github.put(
        "/repos/{owner}/{repo}/automated-security-fixes",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_disable_automated_security_fixes"] = github.delete(
        "/repos/{owner}/{repo}/automated-security-fixes",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_list_branches"] = github.get(
        "/repos/{owner}/{repo}/branches",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "protected": t.boolean(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["short_branch"])).optional(),
    )
    functions["repos_get_branch"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["branch_with_protection"]).optional(),
    )
    functions["repos_get_branch_protection"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["branch_protection"]).optional(),
    )
    functions["repos_update_branch_protection"] = github.put(
        "/repos/{owner}/{repo}/branches/{branch}/protection",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "branch": t.string(),
                "required_status_checks": t.struct(
                    {
                        "strict": t.boolean(),
                        "contexts": t.array(t.string()),
                        "checks": t.array(
                            t.struct(
                                {
                                    "context": t.string(),
                                    "app_id": t.integer().optional(),
                                }
                            )
                        ).optional(),
                    }
                ).optional(),
                "enforce_admins": t.boolean().optional(),
                "required_pull_request_reviews": t.struct(
                    {
                        "dismissal_restrictions": t.struct(
                            {
                                "users": t.array(t.string()).optional(),
                                "teams": t.array(t.string()).optional(),
                                "apps": t.array(t.string()).optional(),
                            }
                        ).optional(),
                        "dismiss_stale_reviews": t.boolean().optional(),
                        "require_code_owner_reviews": t.boolean().optional(),
                        "required_approving_review_count": t.integer().optional(),
                        "require_last_push_approval": t.boolean().optional(),
                        "bypass_pull_request_allowances": t.struct(
                            {
                                "users": t.array(t.string()).optional(),
                                "teams": t.array(t.string()).optional(),
                                "apps": t.array(t.string()).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "restrictions": t.struct(
                    {
                        "users": t.array(t.string()),
                        "teams": t.array(t.string()),
                        "apps": t.array(t.string()).optional(),
                    }
                ).optional(),
                "required_linear_history": t.boolean().optional(),
                "allow_force_pushes": t.boolean().optional(),
                "allow_deletions": t.boolean().optional(),
                "block_creations": t.boolean().optional(),
                "required_conversation_resolution": t.boolean().optional(),
                "lock_branch": t.boolean().optional(),
                "allow_fork_syncing": t.boolean().optional(),
            }
        ),
        t.proxy(renames["protected_branch"]).optional(),
        content_type="application/json",
        body_fields=(
            "required_status_checks",
            "enforce_admins",
            "required_pull_request_reviews",
            "restrictions",
            "required_linear_history",
            "allow_force_pushes",
            "allow_deletions",
            "block_creations",
            "required_conversation_resolution",
            "lock_branch",
            "allow_fork_syncing",
        ),
    )
    functions["repos_delete_branch_protection"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean(),
    )
    functions["repos_get_admin_branch_protection"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["protected_branch_admin_enforced"]),
    )
    functions["repos_set_admin_branch_protection"] = github.post(
        "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["protected_branch_admin_enforced"]),
    )
    functions["repos_delete_admin_branch_protection"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_get_pull_request_review_protection"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["protected_branch_pull_request_review"]),
    )
    functions["repos_update_pull_request_review_protection"] = github.patch(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "branch": t.string(),
                "dismissal_restrictions": t.struct(
                    {
                        "users": t.array(t.string()).optional(),
                        "teams": t.array(t.string()).optional(),
                        "apps": t.array(t.string()).optional(),
                    }
                ).optional(),
                "dismiss_stale_reviews": t.boolean().optional(),
                "require_code_owner_reviews": t.boolean().optional(),
                "required_approving_review_count": t.integer().optional(),
                "require_last_push_approval": t.boolean().optional(),
                "bypass_pull_request_allowances": t.struct(
                    {
                        "users": t.array(t.string()).optional(),
                        "teams": t.array(t.string()).optional(),
                        "apps": t.array(t.string()).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["protected_branch_pull_request_review"]),
        content_type="application/json",
        body_fields=(
            "dismissal_restrictions",
            "dismiss_stale_reviews",
            "require_code_owner_reviews",
            "required_approving_review_count",
            "require_last_push_approval",
            "bypass_pull_request_allowances",
        ),
    )
    functions["repos_delete_pull_request_review_protection"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_get_commit_signature_protection"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["protected_branch_admin_enforced"]).optional(),
    )
    functions["repos_create_commit_signature_protection"] = github.post(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["protected_branch_admin_enforced"]).optional(),
    )
    functions["repos_delete_commit_signature_protection"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_get_status_checks_protection"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["status_check_policy"]).optional(),
    )
    functions["repos_update_status_check_protection"] = github.patch(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "branch": t.string(),
                "strict": t.boolean().optional(),
                "contexts": t.array(t.string()).optional(),
                "checks": t.array(
                    t.struct({"context": t.string(), "app_id": t.integer().optional()})
                ).optional(),
            }
        ),
        t.proxy(renames["status_check_policy"]).optional(),
        content_type="application/json",
        body_fields=("strict", "contexts", "checks"),
    )
    functions["repos_remove_status_check_protection"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean(),
    )
    functions["repos_get_all_status_check_contexts"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.array(t.string()).optional(),
    )
    functions["repos_get_access_restrictions"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["branch_restriction_policy"]).optional(),
    )
    functions["repos_delete_access_restrictions"] = github.delete(
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.boolean(),
    )
    functions["repos_get_apps_with_access_to_protected_branch"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.array(t.proxy(renames["integration"])).optional(),
    )
    functions["repos_get_teams_with_access_to_protected_branch"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.array(t.proxy(renames["team"])).optional(),
    )
    functions["repos_get_users_with_access_to_protected_branch"] = github.get(
        "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.array(t.proxy(renames["simple_user"])).optional(),
    )
    functions["repos_rename_branch"] = github.post(
        "/repos/{owner}/{repo}/branches/{branch}/rename",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "branch": t.string(),
                "new_name": t.string(),
            }
        ),
        t.proxy(renames["branch_with_protection"]).optional(),
        content_type="application/json",
        body_fields=("new_name",),
    )
    functions["checks_get"] = github.get(
        "/repos/{owner}/{repo}/check-runs/{check_run_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "check_run_id": t.integer()}
        ),
        t.proxy(renames["check_run"]),
    )
    functions["checks_list_annotations"] = github.get(
        "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "check_run_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["check_annotation"])),
    )
    functions["checks_rerequest_run"] = github.post(
        "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "check_run_id": t.integer()}
        ),
        t.proxy(renames["empty_object"]).optional(),
    )
    functions["checks_create_suite"] = github.post(
        "/repos/{owner}/{repo}/check-suites",
        t.struct({"owner": t.string(), "repo": t.string(), "head_sha": t.string()}),
        t.proxy(renames["check_suite"]),
        content_type="application/json",
        body_fields=("head_sha",),
    )
    functions["checks_set_suites_preferences"] = github.patch(
        "/repos/{owner}/{repo}/check-suites/preferences",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "auto_trigger_checks": t.array(
                    t.struct({"app_id": t.integer(), "setting": t.boolean()})
                ).optional(),
            }
        ),
        t.proxy(renames["check_suite_preference"]),
        content_type="application/json",
        body_fields=("auto_trigger_checks",),
    )
    functions["checks_get_suite"] = github.get(
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "check_suite_id": t.integer()}
        ),
        t.proxy(renames["check_suite"]),
    )
    functions["checks_list_for_suite"] = github.get(
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "check_suite_id": t.integer(),
                "check_name": t.string(),
                "status": t.string(),
                "filter": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "check_runs": t.array(t.proxy(renames["check_run"])),
            }
        ),
    )
    functions["checks_rerequest_suite"] = github.post(
        "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "check_suite_id": t.integer()}
        ),
        t.proxy(renames["empty_object"]),
    )
    functions["code_scanning_list_alerts_for_repo"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/alerts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tool_name": t.proxy(renames["code_scanning_analysis_tool_name"]),
                "tool_guid": t.proxy(renames["code_scanning_analysis_tool_guid"]),
                "page": t.integer(),
                "per_page": t.integer(),
                "ref": t.proxy(renames["code_scanning_ref"]),
                "direction": t.string(),
                "sort": t.string(),
                "state": t.proxy(renames["code_scanning_alert_state"]),
                "severity": t.proxy(renames["code_scanning_alert_severity"]),
            }
        ),
        t.array(t.proxy(renames["code_scanning_alert_items"])).optional(),
    )
    functions["code_scanning_get_alert"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
            }
        ),
        t.proxy(renames["code_scanning_alert"]).optional(),
    )
    functions["code_scanning_update_alert"] = github.patch(
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
                "state": t.proxy(renames["code_scanning_alert_set_state"]),
                "dismissed_reason": t.proxy(
                    renames["code_scanning_alert_dismissed_reason"]
                ).optional(),
                "dismissed_comment": t.proxy(
                    renames["code_scanning_alert_dismissed_comment"]
                ).optional(),
            }
        ),
        t.proxy(renames["code_scanning_alert"]).optional(),
        content_type="application/json",
        body_fields=("state", "dismissed_reason", "dismissed_comment"),
    )
    functions["code_scanning_list_alert_instances"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
                "page": t.integer(),
                "per_page": t.integer(),
                "ref": t.proxy(renames["code_scanning_ref"]),
            }
        ),
        t.array(t.proxy(renames["code_scanning_alert_instance"])).optional(),
    )
    functions["code_scanning_list_recent_analyses"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/analyses",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tool_name": t.proxy(renames["code_scanning_analysis_tool_name"]),
                "tool_guid": t.proxy(renames["code_scanning_analysis_tool_guid"]),
                "page": t.integer(),
                "per_page": t.integer(),
                "ref": t.proxy(renames["code_scanning_ref"]),
                "sarif_id": t.proxy(renames["code_scanning_analysis_sarif_id"]),
                "direction": t.string(),
                "sort": t.string(),
            }
        ),
        t.array(t.proxy(renames["code_scanning_analysis"])).optional(),
    )
    functions["code_scanning_get_analysis"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "analysis_id": t.integer()}),
        t.proxy(renames["code_scanning_analysis"]).optional(),
    )
    functions["code_scanning_delete_analysis"] = github.delete(
        "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "analysis_id": t.integer(),
                "confirm_delete": t.string().optional(),
            }
        ),
        t.proxy(renames["code_scanning_analysis_deletion"]).optional(),
    )
    functions["code_scanning_list_codeql_databases"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/codeql/databases",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["code_scanning_codeql_database"])).optional(),
    )
    functions["code_scanning_get_codeql_database"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
        t.struct({"owner": t.string(), "repo": t.string(), "language": t.string()}),
        t.proxy(renames["code_scanning_codeql_database"]).optional(),
    )
    functions["code_scanning_get_default_setup"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/default-setup",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["code_scanning_default_setup"]).optional(),
    )
    functions["code_scanning_update_default_setup"] = github.patch(
        "/repos/{owner}/{repo}/code-scanning/default-setup",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "query_suite": t.string().optional(),
            }
        ),
        t.proxy(renames["empty_object"]).optional(),
        content_type="application/json",
        body_fields=("state", "query_suite"),
    )
    functions["code_scanning_upload_sarif"] = github.post(
        "/repos/{owner}/{repo}/code-scanning/sarifs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "commit_sha": t.proxy(renames["code_scanning_analysis_commit_sha"]),
                "ref": t.proxy(renames["code_scanning_ref"]),
                "sarif": t.proxy(renames["code_scanning_analysis_sarif_file"]),
                "checkout_uri": t.string().optional(),
                "started_at": t.string().optional(),
                "tool_name": t.string().optional(),
                "validate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["code_scanning_sarifs_receipt"]).optional(),
        content_type="application/json",
        body_fields=(
            "commit_sha",
            "ref",
            "sarif",
            "checkout_uri",
            "started_at",
            "tool_name",
            "validate",
        ),
    )
    functions["code_scanning_get_sarif"] = github.get(
        "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "sarif_id": t.string()}),
        t.proxy(renames["code_scanning_sarifs_status"]).optional(),
    )
    functions["repos_codeowners_errors"] = github.get(
        "/repos/{owner}/{repo}/codeowners/errors",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.proxy(renames["codeowners_errors"]).optional(),
    )
    functions["codespaces_list_in_repository_for_authenticated_user"] = github.get(
        "/repos/{owner}/{repo}/codespaces",
        t.struct(
            {
                "per_page": t.integer(),
                "page": t.integer(),
                "owner": t.string(),
                "repo": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "codespaces": t.array(t.proxy(renames["codespace"])),
            }
        ).optional(),
    )
    functions["codespaces_create_with_repo_for_authenticated_user"] = github.post(
        "/repos/{owner}/{repo}/codespaces",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string().optional(),
                "location": t.string().optional(),
                "geo": t.string().optional(),
                "client_ip": t.string().optional(),
                "machine": t.string().optional(),
                "devcontainer_path": t.string().optional(),
                "multi_repo_permissions_opt_out": t.boolean().optional(),
                "working_directory": t.string().optional(),
                "idle_timeout_minutes": t.integer().optional(),
                "display_name": t.string().optional(),
                "retention_period_minutes": t.integer().optional(),
            }
        ),
        t.proxy(renames["codespace"]).optional(),
        content_type="application/json",
        body_fields=(
            "ref",
            "location",
            "geo",
            "client_ip",
            "machine",
            "devcontainer_path",
            "multi_repo_permissions_opt_out",
            "working_directory",
            "idle_timeout_minutes",
            "display_name",
            "retention_period_minutes",
        ),
    )
    functions[
        "codespaces_list_devcontainers_in_repository_for_authenticated_user"
    ] = github.get(
        "/repos/{owner}/{repo}/codespaces/devcontainers",
        t.struct(
            {
                "per_page": t.integer(),
                "page": t.integer(),
                "owner": t.string(),
                "repo": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "devcontainers": t.array(
                    t.struct(
                        {
                            "path": t.string(),
                            "name": t.string().optional(),
                            "display_name": t.string().optional(),
                        }
                    )
                ),
            }
        ).optional(),
    )
    functions["codespaces_repo_machines_for_authenticated_user"] = github.get(
        "/repos/{owner}/{repo}/codespaces/machines",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "location": t.string(),
                "client_ip": t.string(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "machines": t.array(t.proxy(renames["codespace_machine"])),
            }
        ).optional(),
    )
    functions["codespaces_pre_flight_with_repo_for_authenticated_user"] = github.get(
        "/repos/{owner}/{repo}/codespaces/new",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "client_ip": t.string(),
            }
        ),
        t.struct(
            {
                "billable_owner": t.proxy(renames["simple_user"]).optional(),
                "defaults": t.struct(
                    {"location": t.string(), "devcontainer_path": t.string().optional()}
                ).optional(),
            }
        ).optional(),
    )
    functions["codespaces_list_repo_secrets"] = github.get(
        "/repos/{owner}/{repo}/codespaces/secrets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["repo_codespaces_secret"])),
            }
        ),
    )
    functions["codespaces_get_repo_public_key"] = github.get(
        "/repos/{owner}/{repo}/codespaces/secrets/public-key",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["codespaces_public_key"]),
    )
    functions["codespaces_get_repo_secret"] = github.get(
        "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.proxy(renames["repo_codespaces_secret"]),
    )
    functions["codespaces_create_or_update_repo_secret"] = github.put(
        "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("encrypted_value", "key_id"),
    )
    functions["codespaces_delete_repo_secret"] = github.delete(
        "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.boolean(),
    )
    functions["repos_list_collaborators"] = github.get(
        "/repos/{owner}/{repo}/collaborators",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "affiliation": t.string(),
                "permission": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["collaborator"])).optional(),
    )
    functions["repos_check_collaborator"] = github.get(
        "/repos/{owner}/{repo}/collaborators/{username}",
        t.struct({"owner": t.string(), "repo": t.string(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_add_collaborator"] = github.put(
        "/repos/{owner}/{repo}/collaborators/{username}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "username": t.string(),
                "permission": t.string().optional(),
            }
        ),
        t.proxy(renames["repository_invitation"]),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["repos_remove_collaborator"] = github.delete(
        "/repos/{owner}/{repo}/collaborators/{username}",
        t.struct({"owner": t.string(), "repo": t.string(), "username": t.string()}),
        t.boolean(),
    )
    functions["repos_get_collaborator_permission_level"] = github.get(
        "/repos/{owner}/{repo}/collaborators/{username}/permission",
        t.struct({"owner": t.string(), "repo": t.string(), "username": t.string()}),
        t.proxy(renames["repository_collaborator_permission"]).optional(),
    )
    functions["repos_list_commit_comments_for_repo"] = github.get(
        "/repos/{owner}/{repo}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["commit_comment"])),
    )
    functions["repos_get_commit_comment"] = github.get(
        "/repos/{owner}/{repo}/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.proxy(renames["commit_comment"]).optional(),
    )
    functions["repos_update_commit_comment"] = github.patch(
        "/repos/{owner}/{repo}/comments/{comment_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["commit_comment"]).optional(),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["repos_delete_commit_comment"] = github.delete(
        "/repos/{owner}/{repo}/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["reactions_list_for_commit_comment"] = github.get(
        "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])).optional(),
    )
    functions["reactions_create_for_commit_comment"] = github.post(
        "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_commit_comment"] = github.delete(
        "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["repos_list_commits"] = github.get(
        "/repos/{owner}/{repo}/commits",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sha": t.string(),
                "path": t.string(),
                "author": t.string(),
                "committer": t.string(),
                "since": t.string(),
                "until": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["commit"])).optional(),
    )
    functions["repos_list_branches_for_head_commit"] = github.get(
        "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        t.struct({"owner": t.string(), "repo": t.string(), "commit_sha": t.string()}),
        t.array(t.proxy(renames["branch_short"])),
    )
    functions["repos_list_comments_for_commit"] = github.get(
        "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "commit_sha": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["commit_comment"])),
    )
    functions["repos_create_commit_comment"] = github.post(
        "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "commit_sha": t.string(),
                "body": t.string(),
                "path": t.string().optional(),
                "position": t.integer().optional(),
                "line": t.integer().optional(),
            }
        ),
        t.proxy(renames["commit_comment"]),
        content_type="application/json",
        body_fields=("body", "path", "position", "line"),
    )
    functions["repos_list_pull_requests_associated_with_commit"] = github.get(
        "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "commit_sha": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["pull_request_simple"])),
    )
    functions["repos_get_commit"] = github.get(
        "/repos/{owner}/{repo}/commits/{ref}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "ref": t.string(),
            }
        ),
        t.proxy(renames["commit"]).optional(),
    )
    functions["checks_list_for_ref"] = github.get(
        "/repos/{owner}/{repo}/commits/{ref}/check-runs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "check_name": t.string(),
                "status": t.string(),
                "filter": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "app_id": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "check_runs": t.array(t.proxy(renames["check_run"])),
            }
        ),
    )
    functions["checks_list_suites_for_ref"] = github.get(
        "/repos/{owner}/{repo}/commits/{ref}/check-suites",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "app_id": t.integer(),
                "check_name": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "check_suites": t.array(t.proxy(renames["check_suite"])),
            }
        ),
    )
    functions["repos_get_combined_status_for_ref"] = github.get(
        "/repos/{owner}/{repo}/commits/{ref}/status",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.proxy(renames["combined_commit_status"]).optional(),
    )
    functions["repos_list_commit_statuses_for_ref"] = github.get(
        "/repos/{owner}/{repo}/commits/{ref}/statuses",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["status"])),
    )
    functions["repos_get_community_profile_metrics"] = github.get(
        "/repos/{owner}/{repo}/community/profile",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["community_profile"]),
    )
    functions["repos_compare_commits"] = github.get(
        "/repos/{owner}/{repo}/compare/{basehead}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "basehead": t.string(),
            }
        ),
        t.proxy(renames["commit_comparison"]).optional(),
    )
    functions["repos_get_content"] = github.get(
        "/repos/{owner}/{repo}/contents/{path}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "path": t.string(),
                "ref": t.string(),
            }
        ),
        t.either(
            [
                t.proxy(renames["content_directory"]),
                t.proxy(renames["content_file"]),
                t.proxy(renames["content_symlink"]),
                t.proxy(renames["content_submodule"]),
            ]
        ).optional(),
    )
    functions["repos_create_or_update_file_contents"] = github.put(
        "/repos/{owner}/{repo}/contents/{path}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "path": t.string(),
                "message": t.string(),
                "content": t.string(),
                "sha": t.string().optional(),
                "branch": t.string().optional(),
                "committer": t.struct(
                    {
                        "name": t.string(),
                        "email": t.string(),
                        "date": t.string().optional(),
                    }
                ).optional(),
                "author": t.struct(
                    {
                        "name": t.string(),
                        "email": t.string(),
                        "date": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["file_commit"]).optional(),
        content_type="application/json",
        body_fields=("message", "content", "sha", "branch", "committer", "author"),
    )
    functions["repos_delete_file"] = github.delete(
        "/repos/{owner}/{repo}/contents/{path}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "path": t.string(),
                "message": t.string(),
                "sha": t.string(),
                "branch": t.string().optional(),
                "committer": t.struct(
                    {"name": t.string().optional(), "email": t.string().optional()}
                ).optional(),
                "author": t.struct(
                    {"name": t.string().optional(), "email": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["file_commit"]).optional(),
        content_type="application/json",
        body_fields=("message", "sha", "branch", "committer", "author"),
    )
    functions["repos_list_contributors"] = github.get(
        "/repos/{owner}/{repo}/contributors",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "anon": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["contributor"])).optional(),
    )
    functions["dependabot_list_alerts_for_repo"] = github.get(
        "/repos/{owner}/{repo}/dependabot/alerts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "severity": t.string(),
                "ecosystem": t.string(),
                "package": t.string(),
                "manifest": t.string(),
                "scope": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "before": t.string(),
                "after": t.string(),
                "first": t.integer(),
                "last": t.integer(),
            }
        ),
        t.array(t.proxy(renames["dependabot_alert"])).optional(),
    )
    functions["dependabot_get_alert"] = github.get(
        "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
            }
        ),
        t.proxy(renames["dependabot_alert"]).optional(),
    )
    functions["dependabot_update_alert"] = github.patch(
        "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
                "state": t.string(),
                "dismissed_reason": t.string().optional(),
                "dismissed_comment": t.string().optional(),
            }
        ),
        t.proxy(renames["dependabot_alert"]).optional(),
        content_type="application/json",
        body_fields=("state", "dismissed_reason", "dismissed_comment"),
    )
    functions["dependabot_list_repo_secrets"] = github.get(
        "/repos/{owner}/{repo}/dependabot/secrets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["dependabot_secret"])),
            }
        ),
    )
    functions["dependabot_get_repo_public_key"] = github.get(
        "/repos/{owner}/{repo}/dependabot/secrets/public-key",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["dependabot_public_key"]),
    )
    functions["dependabot_get_repo_secret"] = github.get(
        "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.proxy(renames["dependabot_secret"]),
    )
    functions["dependabot_create_or_update_repo_secret"] = github.put(
        "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string().optional(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("encrypted_value", "key_id"),
    )
    functions["dependabot_delete_repo_secret"] = github.delete(
        "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        t.struct({"owner": t.string(), "repo": t.string(), "secret_name": t.string()}),
        t.boolean(),
    )
    functions["dependency_graph_diff_range"] = github.get(
        "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "basehead": t.string(),
                "name": t.string(),
            }
        ),
        t.proxy(renames["dependency_graph_diff"]).optional(),
    )
    functions["dependency_graph_export_sbom"] = github.get(
        "/repos/{owner}/{repo}/dependency-graph/sbom",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["dependency_graph_spdx_sbom"]).optional(),
    )
    functions["dependency_graph_create_repository_snapshot"] = github.post(
        "/repos/{owner}/{repo}/dependency-graph/snapshots",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "version": t.integer(),
                "job": t.struct(
                    {
                        "id": t.string(),
                        "correlator": t.string(),
                        "html_url": t.string().optional(),
                    }
                ),
                "sha": t.string(),
                "ref": t.string(),
                "detector": t.struct(
                    {"name": t.string(), "version": t.string(), "url": t.string()}
                ),
                "metadata": t.proxy(renames["metadata"]).optional(),
                "manifests": t.struct({}).optional(),
                "scanned": t.string(),
            }
        ),
        t.struct(
            {
                "id": t.integer(),
                "created_at": t.string(),
                "result": t.string(),
                "message": t.string(),
            }
        ),
        content_type="application/json",
        body_fields=(
            "version",
            "job",
            "sha",
            "ref",
            "detector",
            "metadata",
            "manifests",
            "scanned",
        ),
    )
    functions["repos_list_deployments"] = github.get(
        "/repos/{owner}/{repo}/deployments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sha": t.string(),
                "ref": t.string(),
                "task": t.string(),
                "environment": t.string().optional(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["deployment"])),
    )
    functions["repos_create_deployment"] = github.post(
        "/repos/{owner}/{repo}/deployments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "task": t.string().optional(),
                "auto_merge": t.boolean().optional(),
                "required_contexts": t.array(t.string()).optional(),
                "payload": t.either([t.struct({}), t.string()]).optional(),
                "environment": t.string().optional(),
                "description": t.string().optional(),
                "transient_environment": t.boolean().optional(),
                "production_environment": t.boolean().optional(),
            }
        ),
        t.proxy(renames["deployment"]),
        content_type="application/json",
        body_fields=(
            "ref",
            "task",
            "auto_merge",
            "required_contexts",
            "payload",
            "environment",
            "description",
            "transient_environment",
            "production_environment",
        ),
    )
    functions["repos_get_deployment"] = github.get(
        "/repos/{owner}/{repo}/deployments/{deployment_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "deployment_id": t.integer()}
        ),
        t.proxy(renames["deployment"]).optional(),
    )
    functions["repos_delete_deployment"] = github.delete(
        "/repos/{owner}/{repo}/deployments/{deployment_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "deployment_id": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["repos_list_deployment_statuses"] = github.get(
        "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "deployment_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["deployment_status"])).optional(),
    )
    functions["repos_create_deployment_status"] = github.post(
        "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "deployment_id": t.integer(),
                "state": t.string(),
                "target_url": t.string().optional(),
                "log_url": t.string().optional(),
                "description": t.string().optional(),
                "environment": t.string().optional(),
                "environment_url": t.string().optional(),
                "auto_inactive": t.boolean().optional(),
            }
        ),
        t.proxy(renames["deployment_status"]),
        content_type="application/json",
        body_fields=(
            "state",
            "target_url",
            "log_url",
            "description",
            "environment",
            "environment_url",
            "auto_inactive",
        ),
    )
    functions["repos_get_deployment_status"] = github.get(
        "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "deployment_id": t.integer(),
                "status_id": t.integer(),
            }
        ),
        t.proxy(renames["deployment_status"]).optional(),
    )
    functions["repos_create_dispatch_event"] = github.post(
        "/repos/{owner}/{repo}/dispatches",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "event_type": t.string(),
                "client_payload": t.struct({}).optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("event_type", "client_payload"),
    )
    functions["repos_get_all_environments"] = github.get(
        "/repos/{owner}/{repo}/environments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer().optional(),
                "environments": t.array(t.proxy(renames["environment"])).optional(),
            }
        ),
    )
    functions["repos_get_environment"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "environment_name": t.string()}
        ),
        t.proxy(renames["environment"]),
    )
    functions["repos_create_or_update_environment"] = github.put(
        "/repos/{owner}/{repo}/environments/{environment_name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "wait_timer": t.proxy(renames["wait_timer"]).optional(),
                "reviewers": t.array(
                    t.struct(
                        {
                            "type": t.proxy(
                                renames["deployment_reviewer_type"]
                            ).optional(),
                            "id": t.integer().optional(),
                        }
                    )
                ).optional(),
                "deployment_branch_policy": t.proxy(
                    renames["deployment_branch_policy_settings"]
                ).optional(),
            }
        ),
        t.proxy(renames["environment"]),
        content_type="application/json",
        body_fields=("wait_timer", "reviewers", "deployment_branch_policy"),
    )
    functions["repos_delete_an_environment"] = github.delete(
        "/repos/{owner}/{repo}/environments/{environment_name}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "environment_name": t.string()}
        ),
        t.boolean(),
    )
    functions["repos_list_deployment_branch_policies"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "branch_policies": t.array(
                    t.proxy(renames["deployment_branch_policy"])
                ),
            }
        ),
    )
    functions["repos_create_deployment_branch_policy"] = github.post(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "name": t.string(),
            }
        ),
        t.proxy(renames["deployment_branch_policy"]).optional(),
        content_type="application/json",
        body_fields=("name",),
    )
    functions["repos_get_deployment_branch_policy"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "branch_policy_id": t.integer(),
            }
        ),
        t.proxy(renames["deployment_branch_policy"]),
    )
    functions["repos_update_deployment_branch_policy"] = github.put(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "branch_policy_id": t.integer(),
                "name": t.string(),
            }
        ),
        t.proxy(renames["deployment_branch_policy"]),
        content_type="application/json",
        body_fields=("name",),
    )
    functions["repos_delete_deployment_branch_policy"] = github.delete(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "branch_policy_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["repos_get_all_deployment_protection_rules"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        t.struct(
            {"environment_name": t.string(), "repo": t.string(), "owner": t.string()}
        ),
        t.struct(
            {
                "total_count": t.integer().optional(),
                "custom_deployment_protection_rules": t.array(
                    t.proxy(renames["deployment_protection_rule"])
                ).optional(),
            }
        ),
    )
    functions["repos_create_deployment_protection_rule"] = github.post(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        t.struct(
            {
                "environment_name": t.string(),
                "repo": t.string(),
                "owner": t.string(),
                "integration_id": t.integer().optional(),
            }
        ),
        t.proxy(renames["deployment_protection_rule"]),
        content_type="application/json",
        body_fields=("integration_id",),
    )
    functions["repos_list_custom_deployment_rule_integrations"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
        t.struct(
            {
                "environment_name": t.string(),
                "repo": t.string(),
                "owner": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer().optional(),
                "available_custom_deployment_protection_rule_integrations": t.array(
                    t.proxy(renames["custom_deployment_rule_app"])
                ).optional(),
            }
        ),
    )
    functions["repos_get_custom_deployment_protection_rule"] = github.get(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "environment_name": t.string(),
                "protection_rule_id": t.integer(),
            }
        ),
        t.proxy(renames["deployment_protection_rule"]),
    )
    functions["repos_disable_deployment_protection_rule"] = github.delete(
        "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        t.struct(
            {
                "environment_name": t.string(),
                "repo": t.string(),
                "owner": t.string(),
                "protection_rule_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["activity_list_repo_events"] = github.get(
        "/repos/{owner}/{repo}/events",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["repos_list_forks"] = github.get(
        "/repos/{owner}/{repo}/forks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sort": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["repos_create_fork"] = github.post(
        "/repos/{owner}/{repo}/forks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "organization": t.string().optional(),
                "name": t.string().optional(),
                "default_branch_only": t.boolean().optional(),
            }
        ),
        t.proxy(renames["full_repository"]).optional(),
        content_type="application/json",
        body_fields=("organization", "name", "default_branch_only"),
    )
    functions["git_create_blob"] = github.post(
        "/repos/{owner}/{repo}/git/blobs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "content": t.string(),
                "encoding": t.string().optional(),
            }
        ),
        t.proxy(renames["short_blob"]).optional(),
        content_type="application/json",
        body_fields=("content", "encoding"),
    )
    functions["git_get_blob"] = github.get(
        "/repos/{owner}/{repo}/git/blobs/{file_sha}",
        t.struct({"owner": t.string(), "repo": t.string(), "file_sha": t.string()}),
        t.proxy(renames["blob"]).optional(),
    )
    functions["git_create_commit"] = github.post(
        "/repos/{owner}/{repo}/git/commits",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "message": t.string(),
                "tree": t.string(),
                "parents": t.array(t.string()).optional(),
                "author": t.struct(
                    {
                        "name": t.string(),
                        "email": t.string(),
                        "date": t.string().optional(),
                    }
                ).optional(),
                "committer": t.struct(
                    {
                        "name": t.string().optional(),
                        "email": t.string().optional(),
                        "date": t.string().optional(),
                    }
                ).optional(),
                "signature": t.string().optional(),
            }
        ),
        t.proxy(renames["git_commit"]).optional(),
        content_type="application/json",
        body_fields=("message", "tree", "parents", "author", "committer", "signature"),
    )
    functions["git_get_commit"] = github.get(
        "/repos/{owner}/{repo}/git/commits/{commit_sha}",
        t.struct({"owner": t.string(), "repo": t.string(), "commit_sha": t.string()}),
        t.proxy(renames["git_commit"]).optional(),
    )
    functions["git_list_matching_refs"] = github.get(
        "/repos/{owner}/{repo}/git/matching-refs/{ref}",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.array(t.proxy(renames["git_ref"])),
    )
    functions["git_get_ref"] = github.get(
        "/repos/{owner}/{repo}/git/ref/{ref}",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.proxy(renames["git_ref"]).optional(),
    )
    functions["git_create_ref"] = github.post(
        "/repos/{owner}/{repo}/git/refs",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "sha": t.string(),
            }
        ),
        t.proxy(renames["git_ref"]),
        content_type="application/json",
        body_fields=("ref", "sha"),
    )
    functions["git_update_ref"] = github.patch(
        "/repos/{owner}/{repo}/git/refs/{ref}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ref": t.string(),
                "sha": t.string(),
                "force": t.boolean().optional(),
            }
        ),
        t.proxy(renames["git_ref"]),
        content_type="application/json",
        body_fields=("sha", "force"),
    )
    functions["git_delete_ref"] = github.delete(
        "/repos/{owner}/{repo}/git/refs/{ref}",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.boolean(),
    )
    functions["git_create_tag"] = github.post(
        "/repos/{owner}/{repo}/git/tags",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tag": t.string(),
                "message": t.string(),
                "object": t.string(),
                "type": t.string(),
                "tagger": t.struct(
                    {
                        "name": t.string(),
                        "email": t.string(),
                        "date": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["git_tag"]),
        content_type="application/json",
        body_fields=("tag", "message", "object", "type", "tagger"),
    )
    functions["git_get_tag"] = github.get(
        "/repos/{owner}/{repo}/git/tags/{tag_sha}",
        t.struct({"owner": t.string(), "repo": t.string(), "tag_sha": t.string()}),
        t.proxy(renames["git_tag"]).optional(),
    )
    functions["git_create_tree"] = github.post(
        "/repos/{owner}/{repo}/git/trees",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tree": t.array(
                    t.struct(
                        {
                            "path": t.string().optional(),
                            "mode": t.string().optional(),
                            "type": t.string().optional(),
                            "sha": t.string().optional(),
                            "content": t.string().optional(),
                        }
                    )
                ),
                "base_tree": t.string().optional(),
            }
        ),
        t.proxy(renames["git_tree"]).optional(),
        content_type="application/json",
        body_fields=("tree", "base_tree"),
    )
    functions["git_get_tree"] = github.get(
        "/repos/{owner}/{repo}/git/trees/{tree_sha}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tree_sha": t.string(),
                "recursive": t.string(),
            }
        ),
        t.proxy(renames["git_tree"]).optional(),
    )
    functions["repos_list_webhooks"] = github.get(
        "/repos/{owner}/{repo}/hooks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["hook"])).optional(),
    )
    functions["repos_create_webhook"] = github.post(
        "/repos/{owner}/{repo}/hooks",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string().optional(),
                "config": t.struct(
                    {
                        "url": t.proxy(renames["webhook_config_url"]).optional(),
                        "content_type": t.proxy(
                            renames["webhook_config_content_type"]
                        ).optional(),
                        "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                        "insecure_ssl": t.proxy(
                            renames["webhook_config_insecure_ssl"]
                        ).optional(),
                        "token": t.string().optional(),
                        "digest": t.string().optional(),
                    }
                ).optional(),
                "events": t.array(t.string()).optional(),
                "active": t.boolean().optional(),
            }
        ),
        t.proxy(renames["hook"]).optional(),
        content_type="application/json",
        body_fields=("name", "config", "events", "active"),
    )
    functions["repos_get_webhook"] = github.get(
        "/repos/{owner}/{repo}/hooks/{hook_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "hook_id": t.integer()}),
        t.proxy(renames["hook"]).optional(),
    )
    functions["repos_update_webhook"] = github.patch(
        "/repos/{owner}/{repo}/hooks/{hook_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "hook_id": t.integer(),
                "config": t.struct(
                    {
                        "url": t.proxy(renames["webhook_config_url"]),
                        "content_type": t.proxy(
                            renames["webhook_config_content_type"]
                        ).optional(),
                        "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                        "insecure_ssl": t.proxy(
                            renames["webhook_config_insecure_ssl"]
                        ).optional(),
                        "address": t.string().optional(),
                        "room": t.string().optional(),
                    }
                ).optional(),
                "events": t.array(t.string()).optional(),
                "add_events": t.array(t.string()).optional(),
                "remove_events": t.array(t.string()).optional(),
                "active": t.boolean().optional(),
            }
        ),
        t.proxy(renames["hook"]).optional(),
        content_type="application/json",
        body_fields=("config", "events", "add_events", "remove_events", "active"),
    )
    functions["repos_delete_webhook"] = github.delete(
        "/repos/{owner}/{repo}/hooks/{hook_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "hook_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["repos_get_webhook_config_for_repo"] = github.get(
        "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        t.struct({"owner": t.string(), "repo": t.string(), "hook_id": t.integer()}),
        t.proxy(renames["webhook_config"]),
    )
    functions["repos_update_webhook_config_for_repo"] = github.patch(
        "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "hook_id": t.integer(),
                "url": t.proxy(renames["webhook_config_url"]).optional(),
                "content_type": t.proxy(
                    renames["webhook_config_content_type"]
                ).optional(),
                "secret": t.proxy(renames["webhook_config_secret"]).optional(),
                "insecure_ssl": t.proxy(
                    renames["webhook_config_insecure_ssl"]
                ).optional(),
            }
        ),
        t.proxy(renames["webhook_config"]),
        content_type="application/json",
        body_fields=("url", "content_type", "secret", "insecure_ssl"),
    )
    functions["repos_list_webhook_deliveries"] = github.get(
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "hook_id": t.integer(),
                "per_page": t.integer(),
                "cursor": t.string(),
                "redelivery": t.boolean(),
            }
        ),
        t.array(t.proxy(renames["hook_delivery_item"])),
    )
    functions["repos_get_webhook_delivery"] = github.get(
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "hook_id": t.integer(),
                "delivery_id": t.integer(),
            }
        ),
        t.proxy(renames["hook_delivery"]),
    )
    functions["repos_redeliver_webhook_delivery"] = github.post(
        "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "hook_id": t.integer(),
                "delivery_id": t.integer(),
            }
        ),
        t.struct({}),
    )
    functions["repos_ping_webhook"] = github.post(
        "/repos/{owner}/{repo}/hooks/{hook_id}/pings",
        t.struct({"owner": t.string(), "repo": t.string(), "hook_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["repos_test_push_webhook"] = github.post(
        "/repos/{owner}/{repo}/hooks/{hook_id}/tests",
        t.struct({"owner": t.string(), "repo": t.string(), "hook_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["migrations_get_import_status"] = github.get(
        "/repos/{owner}/{repo}/import",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["ximport"]).optional(),
    )
    functions["migrations_start_import"] = github.put(
        "/repos/{owner}/{repo}/import",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "vcs_url": t.string(),
                "vcs": t.string().optional(),
                "vcs_username": t.string().optional(),
                "vcs_password": t.string().optional(),
                "tfvc_project": t.string().optional(),
            }
        ),
        t.proxy(renames["ximport"]).optional(),
        content_type="application/json",
        body_fields=("vcs_url", "vcs", "vcs_username", "vcs_password", "tfvc_project"),
    )
    functions["migrations_update_import"] = github.patch(
        "/repos/{owner}/{repo}/import",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "vcs_username": t.string().optional(),
                "vcs_password": t.string().optional(),
                "vcs": t.string().optional(),
                "tfvc_project": t.string().optional(),
            }
        ),
        t.proxy(renames["ximport"]),
        content_type="application/json",
        body_fields=("vcs_username", "vcs_password", "vcs", "tfvc_project"),
    )
    functions["migrations_cancel_import"] = github.delete(
        "/repos/{owner}/{repo}/import",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["migrations_get_commit_authors"] = github.get(
        "/repos/{owner}/{repo}/import/authors",
        t.struct({"owner": t.string(), "repo": t.string(), "since": t.integer()}),
        t.array(t.proxy(renames["porter_author"])).optional(),
    )
    functions["migrations_map_commit_author"] = github.patch(
        "/repos/{owner}/{repo}/import/authors/{author_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "author_id": t.integer(),
                "email": t.string().optional(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["porter_author"]).optional(),
        content_type="application/json",
        body_fields=("email", "name"),
    )
    functions["migrations_get_large_files"] = github.get(
        "/repos/{owner}/{repo}/import/large_files",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["porter_large_file"])),
    )
    functions["migrations_set_lfs_preference"] = github.patch(
        "/repos/{owner}/{repo}/import/lfs",
        t.struct({"owner": t.string(), "repo": t.string(), "use_lfs": t.string()}),
        t.proxy(renames["ximport"]),
        content_type="application/json",
        body_fields=("use_lfs",),
    )
    functions["apps_get_repo_installation"] = github.get(
        "/repos/{owner}/{repo}/installation",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["installation"]).optional(),
    )
    functions["interactions_get_restrictions_for_repo"] = github.get(
        "/repos/{owner}/{repo}/interaction-limits",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.union([t.proxy(renames["interaction_limit_response"]), t.struct({})]),
    )
    functions["interactions_set_restrictions_for_repo"] = github.put(
        "/repos/{owner}/{repo}/interaction-limits",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "limit": t.proxy(renames["interaction_group"]),
                "expiry": t.proxy(renames["interaction_expiry"]).optional(),
            }
        ),
        t.proxy(renames["interaction_limit_response"]),
        content_type="application/json",
        body_fields=("limit", "expiry"),
    )
    functions["interactions_remove_restrictions_for_repo"] = github.delete(
        "/repos/{owner}/{repo}/interaction-limits",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_list_invitations"] = github.get(
        "/repos/{owner}/{repo}/invitations",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["repository_invitation"])),
    )
    functions["repos_update_invitation"] = github.patch(
        "/repos/{owner}/{repo}/invitations/{invitation_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "invitation_id": t.integer(),
                "permissions": t.string().optional(),
            }
        ),
        t.proxy(renames["repository_invitation"]),
        content_type="application/json",
        body_fields=("permissions",),
    )
    functions["repos_delete_invitation"] = github.delete(
        "/repos/{owner}/{repo}/invitations/{invitation_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "invitation_id": t.integer()}
        ),
        t.boolean(),
    )
    functions["issues_list_for_repo"] = github.get(
        "/repos/{owner}/{repo}/issues",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "milestone": t.string(),
                "state": t.string(),
                "assignee": t.string(),
                "creator": t.string(),
                "mentioned": t.string(),
                "labels": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue"])).optional(),
    )
    functions["issues_create"] = github.post(
        "/repos/{owner}/{repo}/issues",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "title": t.either([t.string(), t.integer()]),
                "body": t.string().optional(),
                "assignee": t.string().optional(),
                "milestone": t.either([t.string(), t.integer()]).optional(),
                "labels": t.array(
                    t.either(
                        [
                            t.string(),
                            t.struct(
                                {
                                    "id": t.integer().optional(),
                                    "name": t.string().optional(),
                                    "description": t.string().optional(),
                                    "color": t.string().optional(),
                                }
                            ),
                        ]
                    )
                ).optional(),
                "assignees": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["issue"]).optional(),
        content_type="application/json",
        body_fields=("title", "body", "assignee", "milestone", "labels", "assignees"),
    )
    functions["issues_list_comments_for_repo"] = github.get(
        "/repos/{owner}/{repo}/issues/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue_comment"])).optional(),
    )
    functions["issues_get_comment"] = github.get(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.proxy(renames["issue_comment"]).optional(),
    )
    functions["issues_update_comment"] = github.patch(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["issue_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["issues_delete_comment"] = github.delete(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.boolean(),
    )
    functions["reactions_list_for_issue_comment"] = github.get(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])).optional(),
    )
    functions["reactions_create_for_issue_comment"] = github.post(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_issue_comment"] = github.delete(
        "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["issues_list_events_for_repo"] = github.get(
        "/repos/{owner}/{repo}/issues/events",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue_event"])),
    )
    functions["issues_get_event"] = github.get(
        "/repos/{owner}/{repo}/issues/events/{event_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "event_id": t.integer()}),
        t.proxy(renames["issue_event"]).optional(),
    )
    functions["issues_get"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "issue_number": t.integer()}
        ),
        t.proxy(renames["issue"]).optional(),
    )
    functions["issues_update"] = github.patch(
        "/repos/{owner}/{repo}/issues/{issue_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "title": t.either([t.string(), t.integer()]).optional(),
                "body": t.string().optional(),
                "assignee": t.string().optional(),
                "state": t.string().optional(),
                "state_reason": t.string().optional(),
                "milestone": t.either([t.string(), t.integer()]).optional(),
                "labels": t.array(
                    t.either(
                        [
                            t.string(),
                            t.struct(
                                {
                                    "id": t.integer().optional(),
                                    "name": t.string().optional(),
                                    "description": t.string().optional(),
                                    "color": t.string().optional(),
                                }
                            ),
                        ]
                    )
                ).optional(),
                "assignees": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["issue"]).optional(),
        content_type="application/json",
        body_fields=(
            "title",
            "body",
            "assignee",
            "state",
            "state_reason",
            "milestone",
            "labels",
            "assignees",
        ),
    )
    functions["issues_add_assignees"] = github.post(
        "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "assignees": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["issue"]),
        content_type="application/json",
        body_fields=("assignees",),
    )
    functions["issues_remove_assignees"] = github.delete(
        "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "assignees": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["issue"]),
        content_type="application/json",
        body_fields=("assignees",),
    )
    functions["issues_check_user_can_be_assigned_to_issue"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "assignee": t.string(),
            }
        ),
        t.boolean().optional(),
    )
    functions["issues_list_comments"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue_comment"])).optional(),
    )
    functions["issues_create_comment"] = github.post(
        "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["issue_comment"]).optional(),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["issues_list_events"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/events",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue_event_for_issue"])),
    )
    functions["issues_list_labels_on_issue"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["label"])).optional(),
    )
    functions["issues_remove_all_labels"] = github.delete(
        "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "issue_number": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["issues_remove_label"] = github.delete(
        "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "name": t.string(),
            }
        ),
        t.array(t.proxy(renames["label"])).optional(),
    )
    functions["issues_lock"] = github.put(
        "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "lock_reason": t.string().optional(),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("lock_reason",),
    )
    functions["issues_unlock"] = github.delete(
        "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "issue_number": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["reactions_list_for_issue"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])).optional(),
    )
    functions["reactions_create_for_issue"] = github.post(
        "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_issue"] = github.delete(
        "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["issues_list_events_for_timeline"] = github.get(
        "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "issue_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["timeline_issue_events"])).optional(),
    )
    functions["repos_list_deploy_keys"] = github.get(
        "/repos/{owner}/{repo}/keys",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["deploy_key"])),
    )
    functions["repos_create_deploy_key"] = github.post(
        "/repos/{owner}/{repo}/keys",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "title": t.string().optional(),
                "key": t.string(),
                "read_only": t.boolean().optional(),
            }
        ),
        t.proxy(renames["deploy_key"]),
        content_type="application/json",
        body_fields=("title", "key", "read_only"),
    )
    functions["repos_get_deploy_key"] = github.get(
        "/repos/{owner}/{repo}/keys/{key_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "key_id": t.integer()}),
        t.proxy(renames["deploy_key"]).optional(),
    )
    functions["repos_delete_deploy_key"] = github.delete(
        "/repos/{owner}/{repo}/keys/{key_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "key_id": t.integer()}),
        t.boolean(),
    )
    functions["issues_list_labels_for_repo"] = github.get(
        "/repos/{owner}/{repo}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["label"])).optional(),
    )
    functions["issues_create_label"] = github.post(
        "/repos/{owner}/{repo}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string(),
                "color": t.string().optional(),
                "description": t.string().optional(),
            }
        ),
        t.proxy(renames["label"]).optional(),
        content_type="application/json",
        body_fields=("name", "color", "description"),
    )
    functions["issues_get_label"] = github.get(
        "/repos/{owner}/{repo}/labels/{name}",
        t.struct({"owner": t.string(), "repo": t.string(), "name": t.string()}),
        t.proxy(renames["label"]).optional(),
    )
    functions["issues_update_label"] = github.patch(
        "/repos/{owner}/{repo}/labels/{name}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string(),
                "new_name": t.string().optional(),
                "color": t.string().optional(),
                "description": t.string().optional(),
            }
        ),
        t.proxy(renames["label"]),
        content_type="application/json",
        body_fields=("new_name", "color", "description"),
    )
    functions["issues_delete_label"] = github.delete(
        "/repos/{owner}/{repo}/labels/{name}",
        t.struct({"owner": t.string(), "repo": t.string(), "name": t.string()}),
        t.boolean(),
    )
    functions["repos_list_languages"] = github.get(
        "/repos/{owner}/{repo}/languages",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["language"]),
    )
    functions["repos_enable_lfs_for_repo"] = github.put(
        "/repos/{owner}/{repo}/lfs",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.struct({}),
    )
    functions["repos_disable_lfs_for_repo"] = github.delete(
        "/repos/{owner}/{repo}/lfs",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["licenses_get_for_repo"] = github.get(
        "/repos/{owner}/{repo}/license",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["license_content"]),
    )
    functions["repos_merge_upstream"] = github.post(
        "/repos/{owner}/{repo}/merge-upstream",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.proxy(renames["merged_upstream"]),
        content_type="application/json",
        body_fields=("branch",),
    )
    functions["repos_merge"] = github.post(
        "/repos/{owner}/{repo}/merges",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "base": t.string(),
                "head": t.string(),
                "commit_message": t.string().optional(),
            }
        ),
        t.proxy(renames["commit"]).optional(),
        content_type="application/json",
        body_fields=("base", "head", "commit_message"),
    )
    functions["issues_list_milestones"] = github.get(
        "/repos/{owner}/{repo}/milestones",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["milestone"])).optional(),
    )
    functions["issues_create_milestone"] = github.post(
        "/repos/{owner}/{repo}/milestones",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "title": t.string(),
                "state": t.string().optional(),
                "description": t.string().optional(),
                "due_on": t.string().optional(),
            }
        ),
        t.proxy(renames["milestone"]).optional(),
        content_type="application/json",
        body_fields=("title", "state", "description", "due_on"),
    )
    functions["issues_get_milestone"] = github.get(
        "/repos/{owner}/{repo}/milestones/{milestone_number}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "milestone_number": t.integer()}
        ),
        t.proxy(renames["milestone"]).optional(),
    )
    functions["issues_update_milestone"] = github.patch(
        "/repos/{owner}/{repo}/milestones/{milestone_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "milestone_number": t.integer(),
                "title": t.string().optional(),
                "state": t.string().optional(),
                "description": t.string().optional(),
                "due_on": t.string().optional(),
            }
        ),
        t.proxy(renames["milestone"]),
        content_type="application/json",
        body_fields=("title", "state", "description", "due_on"),
    )
    functions["issues_delete_milestone"] = github.delete(
        "/repos/{owner}/{repo}/milestones/{milestone_number}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "milestone_number": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["issues_list_labels_for_milestone"] = github.get(
        "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "milestone_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["label"])),
    )
    functions["activity_list_repo_notifications_for_authenticated_user"] = github.get(
        "/repos/{owner}/{repo}/notifications",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "all": t.boolean(),
                "participating": t.boolean(),
                "since": t.string(),
                "before": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["thread"])),
    )
    functions["activity_mark_repo_notifications_as_read"] = github.put(
        "/repos/{owner}/{repo}/notifications",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "last_read_at": t.string().optional(),
            }
        ),
        t.struct({"message": t.string().optional(), "url": t.string().optional()}),
        content_type="application/json",
        body_fields=("last_read_at",),
    )
    functions["repos_get_pages"] = github.get(
        "/repos/{owner}/{repo}/pages",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["page"]).optional(),
    )
    functions["repos_delete_pages_site"] = github.delete(
        "/repos/{owner}/{repo}/pages",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_list_pages_builds"] = github.get(
        "/repos/{owner}/{repo}/pages/builds",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["page_build"])),
    )
    functions["repos_request_pages_build"] = github.post(
        "/repos/{owner}/{repo}/pages/builds",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["page_build_status"]),
    )
    functions["repos_get_latest_pages_build"] = github.get(
        "/repos/{owner}/{repo}/pages/builds/latest",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["page_build"]),
    )
    functions["repos_get_pages_build"] = github.get(
        "/repos/{owner}/{repo}/pages/builds/{build_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "build_id": t.integer()}),
        t.proxy(renames["page_build"]),
    )
    functions["repos_create_pages_deployment"] = github.post(
        "/repos/{owner}/{repo}/pages/deployment",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "artifact_url": t.string(),
                "environment": t.string().optional(),
                "pages_build_version": t.string(),
                "oidc_token": t.string(),
            }
        ),
        t.proxy(renames["page_deployment"]).optional(),
        content_type="application/json",
        body_fields=(
            "artifact_url",
            "environment",
            "pages_build_version",
            "oidc_token",
        ),
    )
    functions["repos_get_pages_health_check"] = github.get(
        "/repos/{owner}/{repo}/pages/health",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["pages_health_check"]).optional(),
    )
    functions["projects_list_for_repo"] = github.get(
        "/repos/{owner}/{repo}/projects",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["project"])).optional(),
    )
    functions["projects_create_for_repo"] = github.post(
        "/repos/{owner}/{repo}/projects",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string(),
                "body": t.string().optional(),
            }
        ),
        t.proxy(renames["project"]).optional(),
        content_type="application/json",
        body_fields=("name", "body"),
    )
    functions["pulls_list"] = github.get(
        "/repos/{owner}/{repo}/pulls",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "head": t.string(),
                "base": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["pull_request_simple"])),
    )
    functions["pulls_create"] = github.post(
        "/repos/{owner}/{repo}/pulls",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "title": t.string().optional(),
                "head": t.string(),
                "head_repo": t.string().optional(),
                "base": t.string(),
                "body": t.string().optional(),
                "maintainer_can_modify": t.boolean().optional(),
                "draft": t.boolean().optional(),
                "issue": t.integer().optional(),
            }
        ),
        t.proxy(renames["pull_request"]),
        content_type="application/json",
        body_fields=(
            "title",
            "head",
            "head_repo",
            "base",
            "body",
            "maintainer_can_modify",
            "draft",
            "issue",
        ),
    )
    functions["pulls_list_review_comments_for_repo"] = github.get(
        "/repos/{owner}/{repo}/pulls/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["pull_request_review_comment"])),
    )
    functions["pulls_get_review_comment"] = github.get(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.proxy(renames["pull_request_review_comment"]).optional(),
    )
    functions["pulls_update_review_comment"] = github.patch(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["pull_request_review_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["pulls_delete_review_comment"] = github.delete(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "comment_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["reactions_list_for_pull_request_review_comment"] = github.get(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])).optional(),
    )
    functions["reactions_create_for_pull_request_review_comment"] = github.post(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_pull_request_comment"] = github.delete(
        "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "comment_id": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["pulls_get"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}",
        t.struct({"owner": t.string(), "repo": t.string(), "pull_number": t.integer()}),
        t.proxy(renames["pull_request"]).optional(),
    )
    functions["pulls_update"] = github.patch(
        "/repos/{owner}/{repo}/pulls/{pull_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "title": t.string().optional(),
                "body": t.string().optional(),
                "state": t.string().optional(),
                "base": t.string().optional(),
                "maintainer_can_modify": t.boolean().optional(),
            }
        ),
        t.proxy(renames["pull_request"]),
        content_type="application/json",
        body_fields=("title", "body", "state", "base", "maintainer_can_modify"),
    )
    functions["codespaces_create_with_pr_for_authenticated_user"] = github.post(
        "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "location": t.string().optional(),
                "geo": t.string().optional(),
                "client_ip": t.string().optional(),
                "machine": t.string().optional(),
                "devcontainer_path": t.string().optional(),
                "multi_repo_permissions_opt_out": t.boolean().optional(),
                "working_directory": t.string().optional(),
                "idle_timeout_minutes": t.integer().optional(),
                "display_name": t.string().optional(),
                "retention_period_minutes": t.integer().optional(),
            }
        ),
        t.proxy(renames["codespace"]).optional(),
        content_type="application/json",
        body_fields=(
            "location",
            "geo",
            "client_ip",
            "machine",
            "devcontainer_path",
            "multi_repo_permissions_opt_out",
            "working_directory",
            "idle_timeout_minutes",
            "display_name",
            "retention_period_minutes",
        ),
    )
    functions["pulls_list_review_comments"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["pull_request_review_comment"])),
    )
    functions["pulls_create_review_comment"] = github.post(
        "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "body": t.string(),
                "commit_id": t.string(),
                "path": t.string(),
                "position": t.integer().optional(),
                "side": t.string().optional(),
                "line": t.integer().optional(),
                "start_line": t.integer().optional(),
                "start_side": t.string().optional(),
                "in_reply_to": t.integer().optional(),
                "subject_type": t.string().optional(),
            }
        ),
        t.proxy(renames["pull_request_review_comment"]),
        content_type="application/json",
        body_fields=(
            "body",
            "commit_id",
            "path",
            "position",
            "side",
            "line",
            "start_line",
            "start_side",
            "in_reply_to",
            "subject_type",
        ),
    )
    functions["pulls_create_reply_for_review_comment"] = github.post(
        "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "comment_id": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["pull_request_review_comment"]).optional(),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["pulls_list_commits"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["commit"])),
    )
    functions["pulls_list_files"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/files",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["diff_entry"])),
    )
    functions["pulls_check_if_merged"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        t.struct({"owner": t.string(), "repo": t.string(), "pull_number": t.integer()}),
        t.boolean().optional(),
    )
    functions["pulls_merge"] = github.put(
        "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "commit_title": t.string().optional(),
                "commit_message": t.string().optional(),
                "sha": t.string().optional(),
                "merge_method": t.string().optional(),
            }
        ),
        t.proxy(renames["pull_request_merge_result"]).optional(),
        content_type="application/json",
        body_fields=("commit_title", "commit_message", "sha", "merge_method"),
    )
    functions["pulls_list_requested_reviewers"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        t.struct({"owner": t.string(), "repo": t.string(), "pull_number": t.integer()}),
        t.proxy(renames["pull_request_review_request"]),
    )
    functions["pulls_remove_requested_reviewers"] = github.delete(
        "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "reviewers": t.array(t.string()),
                "team_reviewers": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["pull_request_simple"]),
        content_type="application/json",
        body_fields=("reviewers", "team_reviewers"),
    )
    functions["pulls_list_reviews"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["pull_request_review"])),
    )
    functions["pulls_create_review"] = github.post(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "commit_id": t.string().optional(),
                "body": t.string().optional(),
                "event": t.string().optional(),
                "comments": t.array(
                    t.struct(
                        {
                            "path": t.string(),
                            "position": t.integer().optional(),
                            "body": t.string(),
                            "line": t.integer().optional(),
                            "side": t.string().optional(),
                            "start_line": t.integer().optional(),
                            "start_side": t.string().optional(),
                        }
                    )
                ).optional(),
            }
        ),
        t.proxy(renames["pull_request_review"]),
        content_type="application/json",
        body_fields=("commit_id", "body", "event", "comments"),
    )
    functions["pulls_get_review"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
            }
        ),
        t.proxy(renames["pull_request_review"]).optional(),
    )
    functions["pulls_update_review"] = github.put(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["pull_request_review"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["pulls_delete_pending_review"] = github.delete(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
            }
        ),
        t.proxy(renames["pull_request_review"]).optional(),
    )
    functions["pulls_list_comments_for_review"] = github.get(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["review_comment"])).optional(),
    )
    functions["pulls_dismiss_review"] = github.put(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
                "message": t.string(),
                "event": t.string().optional(),
            }
        ),
        t.proxy(renames["pull_request_review"]).optional(),
        content_type="application/json",
        body_fields=("message", "event"),
    )
    functions["pulls_submit_review"] = github.post(
        "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "review_id": t.integer(),
                "body": t.string().optional(),
                "event": t.string(),
            }
        ),
        t.proxy(renames["pull_request_review"]).optional(),
        content_type="application/json",
        body_fields=("body", "event"),
    )
    functions["pulls_update_branch"] = github.put(
        "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "pull_number": t.integer(),
                "expected_head_sha": t.string().optional(),
            }
        ),
        t.struct({"message": t.string().optional(), "url": t.string().optional()}),
        content_type="application/json",
        body_fields=("expected_head_sha",),
    )
    functions["repos_get_readme"] = github.get(
        "/repos/{owner}/{repo}/readme",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.proxy(renames["content_file"]).optional(),
    )
    functions["repos_get_readme_in_directory"] = github.get(
        "/repos/{owner}/{repo}/readme/{dir}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "dir": t.string(),
                "ref": t.string(),
            }
        ),
        t.proxy(renames["content_file"]).optional(),
    )
    functions["repos_list_releases"] = github.get(
        "/repos/{owner}/{repo}/releases",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["release"])).optional(),
    )
    functions["repos_create_release"] = github.post(
        "/repos/{owner}/{repo}/releases",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tag_name": t.string(),
                "target_commitish": t.string().optional(),
                "name": t.string().optional(),
                "body": t.string().optional(),
                "draft": t.boolean().optional(),
                "prerelease": t.boolean().optional(),
                "discussion_category_name": t.string().optional(),
                "generate_release_notes": t.boolean().optional(),
                "make_latest": t.string().optional(),
            }
        ),
        t.proxy(renames["release"]).optional(),
        content_type="application/json",
        body_fields=(
            "tag_name",
            "target_commitish",
            "name",
            "body",
            "draft",
            "prerelease",
            "discussion_category_name",
            "generate_release_notes",
            "make_latest",
        ),
    )
    functions["repos_get_release_asset"] = github.get(
        "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "asset_id": t.integer()}),
        t.proxy(renames["release_asset"]).optional(),
    )
    functions["repos_update_release_asset"] = github.patch(
        "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "asset_id": t.integer(),
                "name": t.string().optional(),
                "label": t.string().optional(),
                "state": t.string().optional(),
            }
        ),
        t.proxy(renames["release_asset"]),
        content_type="application/json",
        body_fields=("name", "label", "state"),
    )
    functions["repos_delete_release_asset"] = github.delete(
        "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "asset_id": t.integer()}),
        t.boolean(),
    )
    functions["repos_generate_release_notes"] = github.post(
        "/repos/{owner}/{repo}/releases/generate-notes",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "tag_name": t.string(),
                "target_commitish": t.string().optional(),
                "previous_tag_name": t.string().optional(),
                "configuration_file_path": t.string().optional(),
            }
        ),
        t.proxy(renames["release_notes_content"]).optional(),
        content_type="application/json",
        body_fields=(
            "tag_name",
            "target_commitish",
            "previous_tag_name",
            "configuration_file_path",
        ),
    )
    functions["repos_get_latest_release"] = github.get(
        "/repos/{owner}/{repo}/releases/latest",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["release"]),
    )
    functions["repos_get_release_by_tag"] = github.get(
        "/repos/{owner}/{repo}/releases/tags/{tag}",
        t.struct({"owner": t.string(), "repo": t.string(), "tag": t.string()}),
        t.proxy(renames["release"]).optional(),
    )
    functions["repos_get_release"] = github.get(
        "/repos/{owner}/{repo}/releases/{release_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "release_id": t.integer()}),
        t.proxy(renames["release"]).optional(),
    )
    functions["repos_update_release"] = github.patch(
        "/repos/{owner}/{repo}/releases/{release_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "release_id": t.integer(),
                "tag_name": t.string().optional(),
                "target_commitish": t.string().optional(),
                "name": t.string().optional(),
                "body": t.string().optional(),
                "draft": t.boolean().optional(),
                "prerelease": t.boolean().optional(),
                "make_latest": t.string().optional(),
                "discussion_category_name": t.string().optional(),
            }
        ),
        t.proxy(renames["release"]).optional(),
        content_type="application/json",
        body_fields=(
            "tag_name",
            "target_commitish",
            "name",
            "body",
            "draft",
            "prerelease",
            "make_latest",
            "discussion_category_name",
        ),
    )
    functions["repos_delete_release"] = github.delete(
        "/repos/{owner}/{repo}/releases/{release_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "release_id": t.integer()}),
        t.boolean(),
    )
    functions["repos_list_release_assets"] = github.get(
        "/repos/{owner}/{repo}/releases/{release_id}/assets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "release_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["release_asset"])),
    )
    functions["reactions_list_for_release"] = github.get(
        "/repos/{owner}/{repo}/releases/{release_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "release_id": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])).optional(),
    )
    functions["reactions_create_for_release"] = github.post(
        "/repos/{owner}/{repo}/releases/{release_id}/reactions",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "release_id": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_delete_for_release"] = github.delete(
        "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "release_id": t.integer(),
                "reaction_id": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["repos_get_branch_rules"] = github.get(
        "/repos/{owner}/{repo}/rules/branches/{branch}",
        t.struct({"owner": t.string(), "repo": t.string(), "branch": t.string()}),
        t.array(t.proxy(renames["repository_rule"])),
    )
    functions["repos_get_repo_rulesets"] = github.get(
        "/repos/{owner}/{repo}/rulesets",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "includes_parents": t.boolean()}
        ),
        t.array(t.proxy(renames["repository_ruleset"])).optional(),
    )
    functions["repos_create_repo_ruleset"] = github.post(
        "/repos/{owner}/{repo}/rulesets",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "name": t.string(),
                "target": t.string().optional(),
                "enforcement": t.proxy(renames["repository_rule_enforcement"]),
                "bypass_mode": t.string().optional(),
                "bypass_actors": t.array(
                    t.proxy(renames["repository_ruleset_bypass_actor"])
                ).optional(),
                "conditions": t.proxy(
                    renames["repository_ruleset_conditions"]
                ).optional(),
                "rules": t.array(t.proxy(renames["repository_rule"])).optional(),
            }
        ),
        t.proxy(renames["repository_ruleset"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "target",
            "enforcement",
            "bypass_mode",
            "bypass_actors",
            "conditions",
            "rules",
        ),
    )
    functions["repos_get_repo_ruleset"] = github.get(
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ruleset_id": t.integer(),
                "includes_parents": t.boolean(),
            }
        ),
        t.proxy(renames["repository_ruleset"]).optional(),
    )
    functions["repos_update_repo_ruleset"] = github.put(
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ruleset_id": t.integer(),
                "name": t.string().optional(),
                "target": t.string().optional(),
                "enforcement": t.proxy(
                    renames["repository_rule_enforcement"]
                ).optional(),
                "bypass_mode": t.string().optional(),
                "bypass_actors": t.array(
                    t.proxy(renames["repository_ruleset_bypass_actor"])
                ).optional(),
                "conditions": t.proxy(
                    renames["repository_ruleset_conditions"]
                ).optional(),
                "rules": t.array(t.proxy(renames["repository_rule"])).optional(),
            }
        ),
        t.proxy(renames["repository_ruleset"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "target",
            "enforcement",
            "bypass_mode",
            "bypass_actors",
            "conditions",
            "rules",
        ),
    )
    functions["repos_delete_repo_ruleset"] = github.delete(
        "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "ruleset_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["secret_scanning_list_alerts_for_repo"] = github.get(
        "/repos/{owner}/{repo}/secret-scanning/alerts",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "state": t.string(),
                "secret_type": t.string(),
                "resolution": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "before": t.string(),
                "after": t.string(),
            }
        ),
        t.array(t.proxy(renames["secret_scanning_alert"])).optional(),
    )
    functions["secret_scanning_get_alert"] = github.get(
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
            }
        ),
        t.proxy(renames["secret_scanning_alert"]).optional(),
    )
    functions["secret_scanning_update_alert"] = github.patch(
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
                "state": t.proxy(renames["secret_scanning_alert_state"]),
                "resolution": t.proxy(
                    renames["secret_scanning_alert_resolution"]
                ).optional(),
                "resolution_comment": t.proxy(
                    renames["secret_scanning_alert_resolution_comment"]
                ).optional(),
            }
        ),
        t.proxy(renames["secret_scanning_alert"]).optional(),
        content_type="application/json",
        body_fields=("state", "resolution", "resolution_comment"),
    )
    functions["secret_scanning_list_locations_for_alert"] = github.get(
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "alert_number": t.proxy(renames["alert_number"]),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["secret_scanning_location"])).optional(),
    )
    functions["security_advisories_list_repository_advisories"] = github.get(
        "/repos/{owner}/{repo}/security-advisories",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "direction": t.string(),
                "sort": t.string(),
                "before": t.string(),
                "after": t.string(),
                "per_page": t.integer(),
                "state": t.string(),
            }
        ),
        t.array(t.proxy(renames["repository_advisory"])).optional(),
    )
    functions["security_advisories_create_repository_advisory"] = github.post(
        "/repos/{owner}/{repo}/security-advisories",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "summary": t.string(),
                "description": t.string(),
                "cve_id": t.string().optional(),
                "vulnerabilities": t.array(
                    t.struct(
                        {
                            "package": t.struct(
                                {
                                    "ecosystem": t.proxy(
                                        renames["security_advisory_ecosystems"]
                                    ),
                                    "name": t.string().optional(),
                                }
                            ),
                            "vulnerable_version_range": t.string().optional(),
                            "patched_versions": t.string().optional(),
                            "vulnerable_functions": t.array(t.string()).optional(),
                        }
                    )
                ),
                "cwe_ids": t.array(t.string()).optional(),
                "credits": t.array(
                    t.struct(
                        {
                            "login": t.string(),
                            "type": t.proxy(renames["security_advisory_credit_types"]),
                        }
                    )
                ).optional(),
                "severity": t.string().optional(),
                "cvss_vector_string": t.string().optional(),
            }
        ),
        t.proxy(renames["repository_advisory"]).optional(),
        content_type="application/json",
        body_fields=(
            "summary",
            "description",
            "cve_id",
            "vulnerabilities",
            "cwe_ids",
            "credits",
            "severity",
            "cvss_vector_string",
        ),
    )
    functions["security_advisories_create_private_vulnerability_report"] = github.post(
        "/repos/{owner}/{repo}/security-advisories/reports",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "summary": t.string(),
                "description": t.string(),
                "vulnerabilities": t.array(
                    t.struct(
                        {
                            "package": t.struct(
                                {
                                    "ecosystem": t.proxy(
                                        renames["security_advisory_ecosystems"]
                                    ),
                                    "name": t.string().optional(),
                                }
                            ),
                            "vulnerable_version_range": t.string().optional(),
                            "patched_versions": t.string().optional(),
                            "vulnerable_functions": t.array(t.string()).optional(),
                        }
                    )
                ).optional(),
                "cwe_ids": t.array(t.string()).optional(),
                "severity": t.string().optional(),
                "cvss_vector_string": t.string().optional(),
            }
        ),
        t.proxy(renames["repository_advisory"]).optional(),
        content_type="application/json",
        body_fields=(
            "summary",
            "description",
            "vulnerabilities",
            "cwe_ids",
            "severity",
            "cvss_vector_string",
        ),
    )
    functions["security_advisories_get_repository_advisory"] = github.get(
        "/repos/{owner}/{repo}/security-advisories/{ghsa_id}",
        t.struct({"owner": t.string(), "repo": t.string(), "ghsa_id": t.string()}),
        t.proxy(renames["repository_advisory"]).optional(),
    )
    functions["security_advisories_update_repository_advisory"] = github.patch(
        "/repos/{owner}/{repo}/security-advisories/{ghsa_id}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "ghsa_id": t.string(),
                "summary": t.string().optional(),
                "description": t.string().optional(),
                "cve_id": t.string().optional(),
                "vulnerabilities": t.array(
                    t.struct(
                        {
                            "package": t.struct(
                                {
                                    "ecosystem": t.proxy(
                                        renames["security_advisory_ecosystems"]
                                    ),
                                    "name": t.string().optional(),
                                }
                            ),
                            "vulnerable_version_range": t.string().optional(),
                            "patched_versions": t.string().optional(),
                            "vulnerable_functions": t.array(t.string()).optional(),
                        }
                    )
                ).optional(),
                "cwe_ids": t.array(t.string()).optional(),
                "credits": t.array(
                    t.struct(
                        {
                            "login": t.string(),
                            "type": t.proxy(renames["security_advisory_credit_types"]),
                        }
                    )
                ).optional(),
                "severity": t.string().optional(),
                "cvss_vector_string": t.string().optional(),
                "state": t.string().optional(),
            }
        ),
        t.proxy(renames["repository_advisory"]).optional(),
        content_type="application/json",
        body_fields=(
            "summary",
            "description",
            "cve_id",
            "vulnerabilities",
            "cwe_ids",
            "credits",
            "severity",
            "cvss_vector_string",
            "state",
        ),
    )
    functions["activity_list_stargazers_for_repo"] = github.get(
        "/repos/{owner}/{repo}/stargazers",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.union(
            [
                t.array(t.proxy(renames["simple_user"])),
                t.array(t.proxy(renames["stargazer"])),
            ]
        ),
    )
    functions["repos_get_code_frequency_stats"] = github.get(
        "/repos/{owner}/{repo}/stats/code_frequency",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["code_frequency_stat"])),
    )
    functions["repos_get_commit_activity_stats"] = github.get(
        "/repos/{owner}/{repo}/stats/commit_activity",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["commit_activity"])),
    )
    functions["repos_get_contributors_stats"] = github.get(
        "/repos/{owner}/{repo}/stats/contributors",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["contributor_activity"])),
    )
    functions["repos_get_participation_stats"] = github.get(
        "/repos/{owner}/{repo}/stats/participation",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["participation_stats"]).optional(),
    )
    functions["repos_get_punch_card_stats"] = github.get(
        "/repos/{owner}/{repo}/stats/punch_card",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["code_frequency_stat"])),
    )
    functions["repos_create_commit_status"] = github.post(
        "/repos/{owner}/{repo}/statuses/{sha}",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "sha": t.string(),
                "state": t.string(),
                "target_url": t.string().optional(),
                "description": t.string().optional(),
                "context": t.string().optional(),
            }
        ),
        t.proxy(renames["status"]),
        content_type="application/json",
        body_fields=("state", "target_url", "description", "context"),
    )
    functions["activity_list_watchers_for_repo"] = github.get(
        "/repos/{owner}/{repo}/subscribers",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["activity_get_repo_subscription"] = github.get(
        "/repos/{owner}/{repo}/subscription",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.proxy(renames["repository_subscription"]).optional(),
    )
    functions["activity_set_repo_subscription"] = github.put(
        "/repos/{owner}/{repo}/subscription",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "subscribed": t.boolean().optional(),
                "ignored": t.boolean().optional(),
            }
        ),
        t.proxy(renames["repository_subscription"]),
        content_type="application/json",
        body_fields=("subscribed", "ignored"),
    )
    functions["activity_delete_repo_subscription"] = github.delete(
        "/repos/{owner}/{repo}/subscription",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_list_tags"] = github.get(
        "/repos/{owner}/{repo}/tags",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["tag"])),
    )
    functions["repos_list_tag_protection"] = github.get(
        "/repos/{owner}/{repo}/tags/protection",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["tag_protection"])).optional(),
    )
    functions["repos_create_tag_protection"] = github.post(
        "/repos/{owner}/{repo}/tags/protection",
        t.struct({"owner": t.string(), "repo": t.string(), "pattern": t.string()}),
        t.proxy(renames["tag_protection"]).optional(),
        content_type="application/json",
        body_fields=("pattern",),
    )
    functions["repos_delete_tag_protection"] = github.delete(
        "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "tag_protection_id": t.integer()}
        ),
        t.boolean().optional(),
    )
    functions["repos_download_tarball_archive"] = github.get(
        "/repos/{owner}/{repo}/tarball/{ref}",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.struct({}),
    )
    functions["repos_list_teams"] = github.get(
        "/repos/{owner}/{repo}/teams",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team"])),
    )
    functions["repos_get_all_topics"] = github.get(
        "/repos/{owner}/{repo}/topics",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.proxy(renames["topic"]).optional(),
    )
    functions["repos_replace_all_topics"] = github.put(
        "/repos/{owner}/{repo}/topics",
        t.struct(
            {"owner": t.string(), "repo": t.string(), "names": t.array(t.string())}
        ),
        t.proxy(renames["topic"]).optional(),
        content_type="application/json",
        body_fields=("names",),
    )
    functions["repos_get_clones"] = github.get(
        "/repos/{owner}/{repo}/traffic/clones",
        t.struct({"owner": t.string(), "repo": t.string(), "per": t.string()}),
        t.proxy(renames["clone_traffic"]),
    )
    functions["repos_get_top_paths"] = github.get(
        "/repos/{owner}/{repo}/traffic/popular/paths",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["content_traffic"])),
    )
    functions["repos_get_top_referrers"] = github.get(
        "/repos/{owner}/{repo}/traffic/popular/referrers",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.array(t.proxy(renames["referrer_traffic"])),
    )
    functions["repos_get_views"] = github.get(
        "/repos/{owner}/{repo}/traffic/views",
        t.struct({"owner": t.string(), "repo": t.string(), "per": t.string()}),
        t.proxy(renames["view_traffic"]),
    )
    functions["repos_transfer"] = github.post(
        "/repos/{owner}/{repo}/transfer",
        t.struct(
            {
                "owner": t.string(),
                "repo": t.string(),
                "new_owner": t.string(),
                "new_name": t.string().optional(),
                "team_ids": t.array(t.integer()).optional(),
            }
        ),
        t.proxy(renames["minimal_repository"]),
        content_type="application/json",
        body_fields=("new_owner", "new_name", "team_ids"),
    )
    functions["repos_check_vulnerability_alerts"] = github.get(
        "/repos/{owner}/{repo}/vulnerability-alerts",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["repos_enable_vulnerability_alerts"] = github.put(
        "/repos/{owner}/{repo}/vulnerability-alerts",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_disable_vulnerability_alerts"] = github.delete(
        "/repos/{owner}/{repo}/vulnerability-alerts",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["repos_download_zipball_archive"] = github.get(
        "/repos/{owner}/{repo}/zipball/{ref}",
        t.struct({"owner": t.string(), "repo": t.string(), "ref": t.string()}),
        t.struct({}),
    )
    functions["repos_create_using_template"] = github.post(
        "/repos/{template_owner}/{template_repo}/generate",
        t.struct(
            {
                "template_owner": t.string(),
                "template_repo": t.string(),
                "owner": t.string().optional(),
                "name": t.string(),
                "description": t.string().optional(),
                "include_all_branches": t.boolean().optional(),
                "private": t.boolean().optional(),
            }
        ),
        t.proxy(renames["repository"]),
        content_type="application/json",
        body_fields=("owner", "name", "description", "include_all_branches", "private"),
    )
    functions["repos_list_public"] = github.get(
        "/repositories",
        t.struct({"since": t.integer()}),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["actions_list_environment_secrets"] = github.get(
        "/repositories/{repository_id}/environments/{environment_name}/secrets",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["actions_secret"])),
            }
        ),
    )
    functions["actions_get_environment_public_key"] = github.get(
        "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
        t.struct({"repository_id": t.integer(), "environment_name": t.string()}),
        t.proxy(renames["actions_public_key"]),
    )
    functions["actions_get_environment_secret"] = github.get(
        "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "secret_name": t.string(),
            }
        ),
        t.proxy(renames["actions_secret"]),
    )
    functions["actions_create_or_update_environment_secret"] = github.put(
        "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "secret_name": t.string(),
                "encrypted_value": t.string(),
                "key_id": t.string(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("encrypted_value", "key_id"),
    )
    functions["actions_delete_environment_secret"] = github.delete(
        "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "secret_name": t.string(),
            }
        ),
        t.boolean(),
    )
    functions["actions_list_environment_variables"] = github.get(
        "/repositories/{repository_id}/environments/{environment_name}/variables",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "variables": t.array(t.proxy(renames["actions_variable"])),
            }
        ),
    )
    functions["actions_create_environment_variable"] = github.post(
        "/repositories/{repository_id}/environments/{environment_name}/variables",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "name": t.string(),
                "value": t.string(),
            }
        ),
        t.proxy(renames["empty_object"]),
        content_type="application/json",
        body_fields=("name", "value"),
    )
    functions["actions_get_environment_variable"] = github.get(
        "/repositories/{repository_id}/environments/{environment_name}/variables/{name}",
        t.struct(
            {
                "repository_id": t.integer(),
                "environment_name": t.string(),
                "name": t.string(),
            }
        ),
        t.proxy(renames["actions_variable"]),
    )
    functions["actions_delete_environment_variable"] = github.delete(
        "/repositories/{repository_id}/environments/{environment_name}/variables/{name}",
        t.struct(
            {
                "repository_id": t.integer(),
                "name": t.string(),
                "environment_name": t.string(),
            }
        ),
        t.boolean(),
    )
    functions["search_code"] = github.get(
        "/search/code",
        t.struct(
            {
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["code_search_result_item"])),
            }
        ),
    )
    functions["search_commits"] = github.get(
        "/search/commits",
        t.struct(
            {
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["commit_search_result_item"])),
            }
        ),
    )
    functions["search_issues_and_pull_requests"] = github.get(
        "/search/issues",
        t.struct(
            {
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["issue_search_result_item"])),
            }
        ),
    )
    functions["search_labels"] = github.get(
        "/search/labels",
        t.struct(
            {
                "repository_id": t.integer(),
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["label_search_result_item"])),
            }
        ).optional(),
    )
    functions["search_repos"] = github.get(
        "/search/repositories",
        t.struct(
            {
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["repo_search_result_item"])),
            }
        ),
    )
    functions["search_topics"] = github.get(
        "/search/topics",
        t.struct({"q": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["topic_search_result_item"])),
            }
        ),
    )
    functions["search_users"] = github.get(
        "/search/users",
        t.struct(
            {
                "q": t.string(),
                "sort": t.string(),
                "order": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "incomplete_results": t.boolean(),
                "items": t.array(t.proxy(renames["user_search_result_item"])),
            }
        ),
    )
    functions["teams_get_legacy"] = github.get(
        "/teams/{team_id}",
        t.struct({"team_id": t.integer()}),
        t.proxy(renames["team_full"]).optional(),
    )
    functions["teams_update_legacy"] = github.patch(
        "/teams/{team_id}",
        t.struct(
            {
                "team_id": t.integer(),
                "name": t.string(),
                "description": t.string().optional(),
                "privacy": t.string().optional(),
                "notification_setting": t.string().optional(),
                "permission": t.string().optional(),
                "parent_team_id": t.integer().optional(),
            }
        ),
        t.proxy(renames["team_full"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "privacy",
            "notification_setting",
            "permission",
            "parent_team_id",
        ),
    )
    functions["teams_delete_legacy"] = github.delete(
        "/teams/{team_id}",
        t.struct({"team_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["teams_list_discussions_legacy"] = github.get(
        "/teams/{team_id}/discussions",
        t.struct(
            {
                "team_id": t.integer(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team_discussion"])),
    )
    functions["teams_create_discussion_legacy"] = github.post(
        "/teams/{team_id}/discussions",
        t.struct(
            {
                "team_id": t.integer(),
                "title": t.string(),
                "body": t.string(),
                "private": t.boolean().optional(),
            }
        ),
        t.proxy(renames["team_discussion"]),
        content_type="application/json",
        body_fields=("title", "body", "private"),
    )
    functions["teams_get_discussion_legacy"] = github.get(
        "/teams/{team_id}/discussions/{discussion_number}",
        t.struct({"team_id": t.integer(), "discussion_number": t.integer()}),
        t.proxy(renames["team_discussion"]),
    )
    functions["teams_update_discussion_legacy"] = github.patch(
        "/teams/{team_id}/discussions/{discussion_number}",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "title": t.string().optional(),
                "body": t.string().optional(),
            }
        ),
        t.proxy(renames["team_discussion"]),
        content_type="application/json",
        body_fields=("title", "body"),
    )
    functions["teams_delete_discussion_legacy"] = github.delete(
        "/teams/{team_id}/discussions/{discussion_number}",
        t.struct({"team_id": t.integer(), "discussion_number": t.integer()}),
        t.boolean(),
    )
    functions["teams_list_discussion_comments_legacy"] = github.get(
        "/teams/{team_id}/discussions/{discussion_number}/comments",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["team_discussion_comment"])),
    )
    functions["teams_create_discussion_comment_legacy"] = github.post(
        "/teams/{team_id}/discussions/{discussion_number}/comments",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["teams_get_discussion_comment_legacy"] = github.get(
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
    )
    functions["teams_update_discussion_comment_legacy"] = github.patch(
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "body": t.string(),
            }
        ),
        t.proxy(renames["team_discussion_comment"]),
        content_type="application/json",
        body_fields=("body",),
    )
    functions["teams_delete_discussion_comment_legacy"] = github.delete(
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
            }
        ),
        t.boolean(),
    )
    functions["reactions_list_for_team_discussion_comment_legacy"] = github.get(
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])),
    )
    functions["reactions_create_for_team_discussion_comment_legacy"] = github.post(
        "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "comment_number": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["reactions_list_for_team_discussion_legacy"] = github.get(
        "/teams/{team_id}/discussions/{discussion_number}/reactions",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "content": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["reaction"])),
    )
    functions["reactions_create_for_team_discussion_legacy"] = github.post(
        "/teams/{team_id}/discussions/{discussion_number}/reactions",
        t.struct(
            {
                "team_id": t.integer(),
                "discussion_number": t.integer(),
                "content": t.string(),
            }
        ),
        t.proxy(renames["reaction"]),
        content_type="application/json",
        body_fields=("content",),
    )
    functions["teams_list_pending_invitations_legacy"] = github.get(
        "/teams/{team_id}/invitations",
        t.struct(
            {"team_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["organization_invitation"])),
    )
    functions["teams_list_members_legacy"] = github.get(
        "/teams/{team_id}/members",
        t.struct(
            {
                "team_id": t.integer(),
                "role": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["simple_user"])).optional(),
    )
    functions["teams_get_member_legacy"] = github.get(
        "/teams/{team_id}/members/{username}",
        t.struct({"team_id": t.integer(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["teams_add_member_legacy"] = github.put(
        "/teams/{team_id}/members/{username}",
        t.struct({"team_id": t.integer(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["teams_remove_member_legacy"] = github.delete(
        "/teams/{team_id}/members/{username}",
        t.struct({"team_id": t.integer(), "username": t.string()}),
        t.boolean().optional(),
    )
    functions["teams_get_membership_for_user_legacy"] = github.get(
        "/teams/{team_id}/memberships/{username}",
        t.struct({"team_id": t.integer(), "username": t.string()}),
        t.proxy(renames["team_membership"]).optional(),
    )
    functions["teams_add_or_update_membership_for_user_legacy"] = github.put(
        "/teams/{team_id}/memberships/{username}",
        t.struct(
            {
                "team_id": t.integer(),
                "username": t.string(),
                "role": t.string().optional(),
            }
        ),
        t.proxy(renames["team_membership"]).optional(),
        content_type="application/json",
        body_fields=("role",),
    )
    functions["teams_remove_membership_for_user_legacy"] = github.delete(
        "/teams/{team_id}/memberships/{username}",
        t.struct({"team_id": t.integer(), "username": t.string()}),
        t.boolean(),
    )
    functions["teams_list_projects_legacy"] = github.get(
        "/teams/{team_id}/projects",
        t.struct(
            {"team_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["team_project"])).optional(),
    )
    functions["teams_check_permissions_for_project_legacy"] = github.get(
        "/teams/{team_id}/projects/{project_id}",
        t.struct({"team_id": t.integer(), "project_id": t.integer()}),
        t.proxy(renames["team_project"]).optional(),
    )
    functions["teams_add_or_update_project_permissions_legacy"] = github.put(
        "/teams/{team_id}/projects/{project_id}",
        t.struct(
            {
                "team_id": t.integer(),
                "project_id": t.integer(),
                "permission": t.string().optional(),
            }
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["teams_remove_project_legacy"] = github.delete(
        "/teams/{team_id}/projects/{project_id}",
        t.struct({"team_id": t.integer(), "project_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["teams_list_repos_legacy"] = github.get(
        "/teams/{team_id}/repos",
        t.struct(
            {"team_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["minimal_repository"])).optional(),
    )
    functions["teams_check_permissions_for_repo_legacy"] = github.get(
        "/teams/{team_id}/repos/{owner}/{repo}",
        t.struct({"team_id": t.integer(), "owner": t.string(), "repo": t.string()}),
        t.proxy(renames["team_repository"]).optional(),
    )
    functions["teams_add_or_update_repo_permissions_legacy"] = github.put(
        "/teams/{team_id}/repos/{owner}/{repo}",
        t.struct(
            {
                "team_id": t.integer(),
                "owner": t.string(),
                "repo": t.string(),
                "permission": t.string().optional(),
            }
        ),
        t.boolean(),
        content_type="application/json",
        body_fields=("permission",),
    )
    functions["teams_remove_repo_legacy"] = github.delete(
        "/teams/{team_id}/repos/{owner}/{repo}",
        t.struct({"team_id": t.integer(), "owner": t.string(), "repo": t.string()}),
        t.boolean(),
    )
    functions["teams_list_child_legacy"] = github.get(
        "/teams/{team_id}/teams",
        t.struct(
            {"team_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["team"])).optional(),
    )
    functions["users_get_authenticated"] = github.get(
        "/user",
        t.struct({}),
        t.either([t.proxy(renames["private_user"]), t.proxy(renames["public_user"])]),
    )
    functions["users_update_authenticated"] = github.patch(
        "/user",
        t.struct(
            {
                "name": t.string().optional(),
                "email": t.string().optional(),
                "blog": t.string().optional(),
                "twitter_username": t.string().optional(),
                "company": t.string().optional(),
                "location": t.string().optional(),
                "hireable": t.boolean().optional(),
                "bio": t.string().optional(),
            }
        ),
        t.proxy(renames["private_user"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "email",
            "blog",
            "twitter_username",
            "company",
            "location",
            "hireable",
            "bio",
        ),
    )
    functions["users_list_blocked_by_authenticated_user"] = github.get(
        "/user/blocks",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])).optional(),
    )
    functions["users_check_blocked"] = github.get(
        "/user/blocks/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["users_block"] = github.put(
        "/user/blocks/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["users_unblock"] = github.delete(
        "/user/blocks/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["codespaces_list_for_authenticated_user"] = github.get(
        "/user/codespaces",
        t.struct(
            {"per_page": t.integer(), "page": t.integer(), "repository_id": t.integer()}
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "codespaces": t.array(t.proxy(renames["codespace"])),
            }
        ).optional(),
    )
    functions["codespaces_list_secrets_for_authenticated_user"] = github.get(
        "/user/codespaces/secrets",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "secrets": t.array(t.proxy(renames["codespaces_secret"])),
            }
        ),
    )
    functions["codespaces_get_public_key_for_authenticated_user"] = github.get(
        "/user/codespaces/secrets/public-key",
        t.struct({}),
        t.proxy(renames["codespaces_user_public_key"]),
    )
    functions["codespaces_get_secret_for_authenticated_user"] = github.get(
        "/user/codespaces/secrets/{secret_name}",
        t.struct({"secret_name": t.string()}),
        t.proxy(renames["codespaces_secret"]),
    )
    functions["codespaces_create_or_update_secret_for_authenticated_user"] = github.put(
        "/user/codespaces/secrets/{secret_name}",
        t.struct(
            {
                "secret_name": t.string(),
                "encrypted_value": t.string().optional(),
                "key_id": t.string(),
                "selected_repository_ids": t.array(
                    t.union([t.integer(), t.string()])
                ).optional(),
            }
        ),
        t.proxy(renames["empty_object"]).optional(),
        content_type="application/json",
        body_fields=("encrypted_value", "key_id", "selected_repository_ids"),
    )
    functions["codespaces_delete_secret_for_authenticated_user"] = github.delete(
        "/user/codespaces/secrets/{secret_name}",
        t.struct({"secret_name": t.string()}),
        t.boolean(),
    )
    functions[
        "codespaces_list_repositories_for_secret_for_authenticated_user"
    ] = github.get(
        "/user/codespaces/secrets/{secret_name}/repositories",
        t.struct({"secret_name": t.string()}),
        t.struct(
            {
                "total_count": t.integer(),
                "repositories": t.array(t.proxy(renames["minimal_repository"])),
            }
        ).optional(),
    )
    functions[
        "codespaces_set_repositories_for_secret_for_authenticated_user"
    ] = github.put(
        "/user/codespaces/secrets/{secret_name}/repositories",
        t.struct(
            {"secret_name": t.string(), "selected_repository_ids": t.array(t.integer())}
        ),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("selected_repository_ids",),
    )
    functions[
        "codespaces_add_repository_for_secret_for_authenticated_user"
    ] = github.put(
        "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        t.struct({"secret_name": t.string(), "repository_id": t.integer()}),
        t.boolean().optional(),
    )
    functions[
        "codespaces_remove_repository_for_secret_for_authenticated_user"
    ] = github.delete(
        "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        t.struct({"secret_name": t.string(), "repository_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["codespaces_get_for_authenticated_user"] = github.get(
        "/user/codespaces/{codespace_name}",
        t.struct({"codespace_name": t.string()}),
        t.proxy(renames["codespace"]).optional(),
    )
    functions["codespaces_update_for_authenticated_user"] = github.patch(
        "/user/codespaces/{codespace_name}",
        t.struct(
            {
                "codespace_name": t.string(),
                "machine": t.string().optional(),
                "display_name": t.string().optional(),
                "recent_folders": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["codespace"]).optional(),
        content_type="application/json",
        body_fields=("machine", "display_name", "recent_folders"),
    )
    functions["codespaces_delete_for_authenticated_user"] = github.delete(
        "/user/codespaces/{codespace_name}",
        t.struct({"codespace_name": t.string()}),
        t.struct({}).optional(),
    )
    functions["codespaces_export_for_authenticated_user"] = github.post(
        "/user/codespaces/{codespace_name}/exports",
        t.struct({"codespace_name": t.string()}),
        t.proxy(renames["codespace_export_details"]).optional(),
    )
    functions["codespaces_get_export_details_for_authenticated_user"] = github.get(
        "/user/codespaces/{codespace_name}/exports/{export_id}",
        t.struct({"codespace_name": t.string(), "export_id": t.string()}),
        t.proxy(renames["codespace_export_details"]).optional(),
    )
    functions["codespaces_codespace_machines_for_authenticated_user"] = github.get(
        "/user/codespaces/{codespace_name}/machines",
        t.struct({"codespace_name": t.string()}),
        t.struct(
            {
                "total_count": t.integer(),
                "machines": t.array(t.proxy(renames["codespace_machine"])),
            }
        ).optional(),
    )
    functions["codespaces_publish_for_authenticated_user"] = github.post(
        "/user/codespaces/{codespace_name}/publish",
        t.struct(
            {
                "codespace_name": t.string(),
                "name": t.string().optional(),
                "private": t.boolean().optional(),
            }
        ),
        t.proxy(renames["codespace_with_full_repository"]).optional(),
        content_type="application/json",
        body_fields=("name", "private"),
    )
    functions["codespaces_start_for_authenticated_user"] = github.post(
        "/user/codespaces/{codespace_name}/start",
        t.struct({"codespace_name": t.string()}),
        t.proxy(renames["codespace"]).optional(),
    )
    functions["codespaces_stop_for_authenticated_user"] = github.post(
        "/user/codespaces/{codespace_name}/stop",
        t.struct({"codespace_name": t.string()}),
        t.proxy(renames["codespace"]).optional(),
    )
    functions[
        "packages_list_docker_migration_conflicting_packages_for_authenticated_user"
    ] = github.get(
        "/user/docker/conflicts",
        t.struct({}),
        t.array(t.proxy(renames["package"])),
    )
    functions[
        "users_set_primary_email_visibility_for_authenticated_user"
    ] = github.patch(
        "/user/email/visibility",
        t.struct({"visibility": t.string()}),
        t.array(t.proxy(renames["email"])).optional(),
        content_type="application/json",
        body_fields=("visibility",),
    )
    functions["users_list_emails_for_authenticated_user"] = github.get(
        "/user/emails",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["email"])).optional(),
    )
    functions["users_list_followers_for_authenticated_user"] = github.get(
        "/user/followers",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["users_list_followed_by_authenticated_user"] = github.get(
        "/user/following",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["users_check_person_is_followed_by_authenticated"] = github.get(
        "/user/following/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["users_follow"] = github.put(
        "/user/following/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["users_unfollow"] = github.delete(
        "/user/following/{username}",
        t.struct({"username": t.string()}),
        t.boolean().optional(),
    )
    functions["users_list_gpg_keys_for_authenticated_user"] = github.get(
        "/user/gpg_keys",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["gpg_key"])).optional(),
    )
    functions["users_create_gpg_key_for_authenticated_user"] = github.post(
        "/user/gpg_keys",
        t.struct({"name": t.string().optional(), "armored_public_key": t.string()}),
        t.proxy(renames["gpg_key"]).optional(),
        content_type="application/json",
        body_fields=("name", "armored_public_key"),
    )
    functions["users_get_gpg_key_for_authenticated_user"] = github.get(
        "/user/gpg_keys/{gpg_key_id}",
        t.struct({"gpg_key_id": t.integer()}),
        t.proxy(renames["gpg_key"]).optional(),
    )
    functions["users_delete_gpg_key_for_authenticated_user"] = github.delete(
        "/user/gpg_keys/{gpg_key_id}",
        t.struct({"gpg_key_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_list_installations_for_authenticated_user"] = github.get(
        "/user/installations",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.struct(
            {
                "total_count": t.integer(),
                "installations": t.array(t.proxy(renames["installation"])),
            }
        ),
    )
    functions["apps_list_installation_repos_for_authenticated_user"] = github.get(
        "/user/installations/{installation_id}/repositories",
        t.struct(
            {
                "installation_id": t.integer(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.struct(
            {
                "total_count": t.integer(),
                "repository_selection": t.string().optional(),
                "repositories": t.array(t.proxy(renames["repository"])),
            }
        ).optional(),
    )
    functions["apps_add_repo_to_installation_for_authenticated_user"] = github.put(
        "/user/installations/{installation_id}/repositories/{repository_id}",
        t.struct({"installation_id": t.integer(), "repository_id": t.integer()}),
        t.boolean().optional(),
    )
    functions[
        "apps_remove_repo_from_installation_for_authenticated_user"
    ] = github.delete(
        "/user/installations/{installation_id}/repositories/{repository_id}",
        t.struct({"installation_id": t.integer(), "repository_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["interactions_get_restrictions_for_authenticated_user"] = github.get(
        "/user/interaction-limits",
        t.struct({}),
        t.union([t.proxy(renames["interaction_limit_response"]), t.struct({})]),
    )
    functions["interactions_set_restrictions_for_authenticated_user"] = github.put(
        "/user/interaction-limits",
        t.struct(
            {
                "limit": t.proxy(renames["interaction_group"]),
                "expiry": t.proxy(renames["interaction_expiry"]).optional(),
            }
        ),
        t.proxy(renames["interaction_limit_response"]),
        content_type="application/json",
        body_fields=("limit", "expiry"),
    )
    functions[
        "interactions_remove_restrictions_for_authenticated_user"
    ] = github.delete(
        "/user/interaction-limits",
        t.struct({}),
        t.boolean(),
    )
    functions["issues_list_for_authenticated_user"] = github.get(
        "/user/issues",
        t.struct(
            {
                "filter": t.string(),
                "state": t.string(),
                "labels": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["issue"])).optional(),
    )
    functions["users_list_public_ssh_keys_for_authenticated_user"] = github.get(
        "/user/keys",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["key"])).optional(),
    )
    functions["users_create_public_ssh_key_for_authenticated_user"] = github.post(
        "/user/keys",
        t.struct({"title": t.string().optional(), "key": t.string()}),
        t.proxy(renames["key"]).optional(),
        content_type="application/json",
        body_fields=("title", "key"),
    )
    functions["users_get_public_ssh_key_for_authenticated_user"] = github.get(
        "/user/keys/{key_id}",
        t.struct({"key_id": t.integer()}),
        t.proxy(renames["key"]).optional(),
    )
    functions["users_delete_public_ssh_key_for_authenticated_user"] = github.delete(
        "/user/keys/{key_id}",
        t.struct({"key_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["apps_list_subscriptions_for_authenticated_user"] = github.get(
        "/user/marketplace_purchases",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["user_marketplace_purchase"])).optional(),
    )
    functions["apps_list_subscriptions_for_authenticated_user_stubbed"] = github.get(
        "/user/marketplace_purchases/stubbed",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["user_marketplace_purchase"])),
    )
    functions["orgs_list_memberships_for_authenticated_user"] = github.get(
        "/user/memberships/orgs",
        t.struct({"state": t.string(), "per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["org_membership"])),
    )
    functions["orgs_get_membership_for_authenticated_user"] = github.get(
        "/user/memberships/orgs/{org}",
        t.struct({"org": t.string()}),
        t.proxy(renames["org_membership"]).optional(),
    )
    functions["orgs_update_membership_for_authenticated_user"] = github.patch(
        "/user/memberships/orgs/{org}",
        t.struct({"org": t.string(), "state": t.string()}),
        t.proxy(renames["org_membership"]).optional(),
        content_type="application/json",
        body_fields=("state",),
    )
    functions["migrations_list_for_authenticated_user"] = github.get(
        "/user/migrations",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["migration"])),
    )
    functions["migrations_start_for_authenticated_user"] = github.post(
        "/user/migrations",
        t.struct(
            {
                "lock_repositories": t.boolean().optional(),
                "exclude_metadata": t.boolean().optional(),
                "exclude_git_data": t.boolean().optional(),
                "exclude_attachments": t.boolean().optional(),
                "exclude_releases": t.boolean().optional(),
                "exclude_owner_projects": t.boolean().optional(),
                "org_metadata_only": t.boolean().optional(),
                "exclude": t.array(t.string()).optional(),
                "repositories": t.array(t.string()),
            }
        ),
        t.proxy(renames["migration"]),
        content_type="application/json",
        body_fields=(
            "lock_repositories",
            "exclude_metadata",
            "exclude_git_data",
            "exclude_attachments",
            "exclude_releases",
            "exclude_owner_projects",
            "org_metadata_only",
            "exclude",
            "repositories",
        ),
    )
    functions["migrations_get_status_for_authenticated_user"] = github.get(
        "/user/migrations/{migration_id}",
        t.struct({"migration_id": t.integer(), "exclude": t.array(t.string())}),
        t.proxy(renames["migration"]).optional(),
    )
    functions["migrations_get_archive_for_authenticated_user"] = github.get(
        "/user/migrations/{migration_id}/archive",
        t.struct({"migration_id": t.integer()}),
        t.struct({}),
    )
    functions["migrations_delete_archive_for_authenticated_user"] = github.delete(
        "/user/migrations/{migration_id}/archive",
        t.struct({"migration_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["migrations_unlock_repo_for_authenticated_user"] = github.delete(
        "/user/migrations/{migration_id}/repos/{repo_name}/lock",
        t.struct({"migration_id": t.integer(), "repo_name": t.string()}),
        t.boolean().optional(),
    )
    functions["migrations_list_repos_for_authenticated_user"] = github.get(
        "/user/migrations/{migration_id}/repositories",
        t.struct(
            {"migration_id": t.integer(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["minimal_repository"])).optional(),
    )
    functions["orgs_list_for_authenticated_user"] = github.get(
        "/user/orgs",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["organization_simple"])),
    )
    functions["packages_list_packages_for_authenticated_user"] = github.get(
        "/user/packages",
        t.struct(
            {
                "package_type": t.string(),
                "visibility": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["package"])),
    )
    functions["packages_get_package_for_authenticated_user"] = github.get(
        "/user/packages/{package_type}/{package_name}",
        t.struct({"package_type": t.string(), "package_name": t.string()}),
        t.proxy(renames["package"]),
    )
    functions["packages_delete_package_for_authenticated_user"] = github.delete(
        "/user/packages/{package_type}/{package_name}",
        t.struct({"package_type": t.string(), "package_name": t.string()}),
        t.boolean().optional(),
    )
    functions["packages_restore_package_for_authenticated_user"] = github.post(
        "/user/packages/{package_type}/{package_name}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "token": t.string(),
            }
        ),
        t.boolean().optional(),
    )
    functions[
        "packages_get_all_package_versions_for_package_owned_by_authenticated_user"
    ] = github.get(
        "/user/packages/{package_type}/{package_name}/versions",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "state": t.string(),
            }
        ),
        t.array(t.proxy(renames["package_version"])).optional(),
    )
    functions["packages_get_package_version_for_authenticated_user"] = github.get(
        "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.proxy(renames["package_version"]),
    )
    functions["packages_delete_package_version_for_authenticated_user"] = github.delete(
        "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["packages_restore_package_version_for_authenticated_user"] = github.post(
        "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["projects_create_for_authenticated_user"] = github.post(
        "/user/projects",
        t.struct({"name": t.string(), "body": t.string().optional()}),
        t.proxy(renames["project"]),
        content_type="application/json",
        body_fields=("name", "body"),
    )
    functions["users_list_public_emails_for_authenticated_user"] = github.get(
        "/user/public_emails",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["email"])).optional(),
    )
    functions["repos_list_for_authenticated_user"] = github.get(
        "/user/repos",
        t.struct(
            {
                "visibility": t.string(),
                "affiliation": t.string(),
                "type": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
                "since": t.string(),
                "before": t.string(),
            }
        ),
        t.array(t.proxy(renames["repository"])),
    )
    functions["repos_create_for_authenticated_user"] = github.post(
        "/user/repos",
        t.struct(
            {
                "name": t.string(),
                "description": t.string().optional(),
                "homepage": t.string().optional(),
                "private": t.boolean().optional(),
                "has_issues": t.boolean().optional(),
                "has_projects": t.boolean().optional(),
                "has_wiki": t.boolean().optional(),
                "has_discussions": t.boolean().optional(),
                "team_id": t.integer().optional(),
                "auto_init": t.boolean().optional(),
                "gitignore_template": t.string().optional(),
                "license_template": t.string().optional(),
                "allow_squash_merge": t.boolean().optional(),
                "allow_merge_commit": t.boolean().optional(),
                "allow_rebase_merge": t.boolean().optional(),
                "allow_auto_merge": t.boolean().optional(),
                "delete_branch_on_merge": t.boolean().optional(),
                "squash_merge_commit_title": t.string().optional(),
                "squash_merge_commit_message": t.string().optional(),
                "merge_commit_title": t.string().optional(),
                "merge_commit_message": t.string().optional(),
                "has_downloads": t.boolean().optional(),
                "is_template": t.boolean().optional(),
            }
        ),
        t.proxy(renames["repository"]).optional(),
        content_type="application/json",
        body_fields=(
            "name",
            "description",
            "homepage",
            "private",
            "has_issues",
            "has_projects",
            "has_wiki",
            "has_discussions",
            "team_id",
            "auto_init",
            "gitignore_template",
            "license_template",
            "allow_squash_merge",
            "allow_merge_commit",
            "allow_rebase_merge",
            "allow_auto_merge",
            "delete_branch_on_merge",
            "squash_merge_commit_title",
            "squash_merge_commit_message",
            "merge_commit_title",
            "merge_commit_message",
            "has_downloads",
            "is_template",
        ),
    )
    functions["repos_list_invitations_for_authenticated_user"] = github.get(
        "/user/repository_invitations",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["repository_invitation"])).optional(),
    )
    functions["repos_accept_invitation_for_authenticated_user"] = github.patch(
        "/user/repository_invitations/{invitation_id}",
        t.struct({"invitation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["repos_decline_invitation_for_authenticated_user"] = github.delete(
        "/user/repository_invitations/{invitation_id}",
        t.struct({"invitation_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["users_list_social_accounts_for_authenticated_user"] = github.get(
        "/user/social_accounts",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["social_account"])).optional(),
    )
    functions["users_add_social_account_for_authenticated_user"] = github.post(
        "/user/social_accounts",
        t.struct({"account_urls": t.array(t.string())}),
        t.array(t.proxy(renames["social_account"])).optional(),
        content_type="application/json",
        body_fields=("account_urls",),
    )
    functions["users_delete_social_account_for_authenticated_user"] = github.delete(
        "/user/social_accounts",
        t.struct({"account_urls": t.array(t.string())}),
        t.boolean().optional(),
        content_type="application/json",
        body_fields=("account_urls",),
    )
    functions["users_list_ssh_signing_keys_for_authenticated_user"] = github.get(
        "/user/ssh_signing_keys",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["ssh_signing_key"])).optional(),
    )
    functions["users_create_ssh_signing_key_for_authenticated_user"] = github.post(
        "/user/ssh_signing_keys",
        t.struct({"title": t.string().optional(), "key": t.string()}),
        t.proxy(renames["ssh_signing_key"]).optional(),
        content_type="application/json",
        body_fields=("title", "key"),
    )
    functions["users_get_ssh_signing_key_for_authenticated_user"] = github.get(
        "/user/ssh_signing_keys/{ssh_signing_key_id}",
        t.struct({"ssh_signing_key_id": t.integer()}),
        t.proxy(renames["ssh_signing_key"]).optional(),
    )
    functions["users_delete_ssh_signing_key_for_authenticated_user"] = github.delete(
        "/user/ssh_signing_keys/{ssh_signing_key_id}",
        t.struct({"ssh_signing_key_id": t.integer()}),
        t.boolean().optional(),
    )
    functions["activity_list_repos_starred_by_authenticated_user"] = github.get(
        "/user/starred",
        t.struct(
            {
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["repository"])),
    )
    functions["activity_check_repo_is_starred_by_authenticated_user"] = github.get(
        "/user/starred/{owner}/{repo}",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["activity_star_repo_for_authenticated_user"] = github.put(
        "/user/starred/{owner}/{repo}",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["activity_unstar_repo_for_authenticated_user"] = github.delete(
        "/user/starred/{owner}/{repo}",
        t.struct({"owner": t.string(), "repo": t.string()}),
        t.boolean().optional(),
    )
    functions["activity_list_watched_repos_for_authenticated_user"] = github.get(
        "/user/subscriptions",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["teams_list_for_authenticated_user"] = github.get(
        "/user/teams",
        t.struct({"per_page": t.integer(), "page": t.integer()}),
        t.array(t.proxy(renames["team_full"])).optional(),
    )
    functions["users_list"] = github.get(
        "/users",
        t.struct({"since": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["users_get_by_username"] = github.get(
        "/users/{username}",
        t.struct({"username": t.string()}),
        t.either(
            [t.proxy(renames["private_user"]), t.proxy(renames["public_user"])]
        ).optional(),
    )
    functions[
        "packages_list_docker_migration_conflicting_packages_for_user"
    ] = github.get(
        "/users/{username}/docker/conflicts",
        t.struct({"username": t.string()}),
        t.array(t.proxy(renames["package"])),
    )
    functions["activity_list_events_for_authenticated_user"] = github.get(
        "/users/{username}/events",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["activity_list_org_events_for_authenticated_user"] = github.get(
        "/users/{username}/events/orgs/{org}",
        t.struct(
            {
                "username": t.string(),
                "org": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["activity_list_public_events_for_user"] = github.get(
        "/users/{username}/events/public",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["users_list_followers_for_user"] = github.get(
        "/users/{username}/followers",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["users_list_following_for_user"] = github.get(
        "/users/{username}/following",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["simple_user"])),
    )
    functions["users_check_following_for_user"] = github.get(
        "/users/{username}/following/{target_user}",
        t.struct({"username": t.string(), "target_user": t.string()}),
        t.boolean().optional(),
    )
    functions["gists_list_for_user"] = github.get(
        "/users/{username}/gists",
        t.struct(
            {
                "username": t.string(),
                "since": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["base_gist"])),
    )
    functions["users_list_gpg_keys_for_user"] = github.get(
        "/users/{username}/gpg_keys",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["gpg_key"])),
    )
    functions["users_get_context_for_user"] = github.get(
        "/users/{username}/hovercard",
        t.struct(
            {
                "username": t.string(),
                "subject_type": t.string(),
                "subject_id": t.string(),
            }
        ),
        t.proxy(renames["hovercard"]).optional(),
    )
    functions["apps_get_user_installation"] = github.get(
        "/users/{username}/installation",
        t.struct({"username": t.string()}),
        t.proxy(renames["installation"]),
    )
    functions["users_list_public_keys_for_user"] = github.get(
        "/users/{username}/keys",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["key_simple"])),
    )
    functions["orgs_list_for_user"] = github.get(
        "/users/{username}/orgs",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["organization_simple"])),
    )
    functions["packages_list_packages_for_user"] = github.get(
        "/users/{username}/packages",
        t.struct(
            {
                "package_type": t.string(),
                "visibility": t.string(),
                "username": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["package"])),
    )
    functions["packages_get_package_for_user"] = github.get(
        "/users/{username}/packages/{package_type}/{package_name}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
            }
        ),
        t.proxy(renames["package"]),
    )
    functions["packages_delete_package_for_user"] = github.delete(
        "/users/{username}/packages/{package_type}/{package_name}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
            }
        ),
        t.boolean().optional(),
    )
    functions["packages_restore_package_for_user"] = github.post(
        "/users/{username}/packages/{package_type}/{package_name}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
                "token": t.string(),
            }
        ),
        t.boolean().optional(),
    )
    functions[
        "packages_get_all_package_versions_for_package_owned_by_user"
    ] = github.get(
        "/users/{username}/packages/{package_type}/{package_name}/versions",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
            }
        ),
        t.array(t.proxy(renames["package_version"])).optional(),
    )
    functions["packages_get_package_version_for_user"] = github.get(
        "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "package_version_id": t.integer(),
                "username": t.string(),
            }
        ),
        t.proxy(renames["package_version"]),
    )
    functions["packages_delete_package_version_for_user"] = github.delete(
        "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["packages_restore_package_version_for_user"] = github.post(
        "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        t.struct(
            {
                "package_type": t.string(),
                "package_name": t.string(),
                "username": t.string(),
                "package_version_id": t.integer(),
            }
        ),
        t.boolean().optional(),
    )
    functions["projects_list_for_user"] = github.get(
        "/users/{username}/projects",
        t.struct(
            {
                "username": t.string(),
                "state": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["project"])),
    )
    functions["activity_list_received_events_for_user"] = github.get(
        "/users/{username}/received_events",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["activity_list_received_public_events_for_user"] = github.get(
        "/users/{username}/received_events/public",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["event"])),
    )
    functions["repos_list_for_user"] = github.get(
        "/users/{username}/repos",
        t.struct(
            {
                "username": t.string(),
                "type": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["billing_get_github_actions_billing_user"] = github.get(
        "/users/{username}/settings/billing/actions",
        t.struct({"username": t.string()}),
        t.proxy(renames["actions_billing_usage"]),
    )
    functions["billing_get_github_packages_billing_user"] = github.get(
        "/users/{username}/settings/billing/packages",
        t.struct({"username": t.string()}),
        t.proxy(renames["packages_billing_usage"]),
    )
    functions["billing_get_shared_storage_billing_user"] = github.get(
        "/users/{username}/settings/billing/shared-storage",
        t.struct({"username": t.string()}),
        t.proxy(renames["combined_billing_usage"]),
    )
    functions["users_list_social_accounts_for_user"] = github.get(
        "/users/{username}/social_accounts",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["social_account"])),
    )
    functions["users_list_ssh_signing_keys_for_user"] = github.get(
        "/users/{username}/ssh_signing_keys",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["ssh_signing_key"])),
    )
    functions["activity_list_repos_starred_by_user"] = github.get(
        "/users/{username}/starred",
        t.struct(
            {
                "username": t.string(),
                "sort": t.string(),
                "direction": t.string(),
                "per_page": t.integer(),
                "page": t.integer(),
            }
        ),
        t.union(
            [
                t.array(t.proxy(renames["starred_repository"])),
                t.array(t.proxy(renames["repository"])),
            ]
        ),
    )
    functions["activity_list_repos_watched_by_user"] = github.get(
        "/users/{username}/subscriptions",
        t.struct(
            {"username": t.string(), "per_page": t.integer(), "page": t.integer()}
        ),
        t.array(t.proxy(renames["minimal_repository"])),
    )
    functions["meta_get_all_versions"] = github.get(
        "/versions",
        t.struct({}),
        t.array(t.string()).optional(),
    )

    return Import(
        importer="github", renames=renames, types=Box(types), functions=Box(functions)
    )
