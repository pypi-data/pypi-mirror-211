from typegraph.runtimes.http import HTTPRuntime
from box import Box
from typegraph.importers.base.importer import Import
from typegraph import t
from typegraph.utils.sanitizers import inject_params


def import_spec3_sdk(params=None):
    target_url = inject_params("https://api.stripe.com/", params)
    spec3_sdk = HTTPRuntime(target_url)

    renames = {
        "account": "_spec3_sdk_1_account",
        "account_bacs_debit_payments_settings": "_spec3_sdk_2_account_bacs_debit_payments_settings",
        "account_branding_settings": "_spec3_sdk_3_account_branding_settings",
        "account_business_profile": "_spec3_sdk_4_account_business_profile",
        "account_capabilities": "_spec3_sdk_5_account_capabilities",
        "account_capability_future_requirements": "_spec3_sdk_6_account_capability_future_requirements",
        "account_capability_requirements": "_spec3_sdk_7_account_capability_requirements",
        "account_card_issuing_settings": "_spec3_sdk_8_account_card_issuing_settings",
        "account_card_payments_settings": "_spec3_sdk_9_account_card_payments_settings",
        "account_dashboard_settings": "_spec3_sdk_10_account_dashboard_settings",
        "account_decline_charge_on": "_spec3_sdk_11_account_decline_charge_on",
        "account_future_requirements": "_spec3_sdk_12_account_future_requirements",
        "account_link": "_spec3_sdk_13_account_link",
        "account_payments_settings": "_spec3_sdk_14_account_payments_settings",
        "account_payout_settings": "_spec3_sdk_15_account_payout_settings",
        "account_requirements": "_spec3_sdk_16_account_requirements",
        "account_requirements_alternative": "_spec3_sdk_17_account_requirements_alternative",
        "account_requirements_error": "_spec3_sdk_18_account_requirements_error",
        "account_sepa_debit_payments_settings": "_spec3_sdk_19_account_sepa_debit_payments_settings",
        "account_settings": "_spec3_sdk_20_account_settings",
        "account_terms_of_service": "_spec3_sdk_21_account_terms_of_service",
        "account_tos_acceptance": "_spec3_sdk_22_account_tos_acceptance",
        "account_treasury_settings": "_spec3_sdk_23_account_treasury_settings",
        "account_unification_account_controller": "_spec3_sdk_24_account_unification_account_controller",
        "address": "_spec3_sdk_25_address",
        "alternate_statement_descriptors": "_spec3_sdk_26_alternate_statement_descriptors",
        "api_errors": "_spec3_sdk_27_api_errors",
        "apple_pay_domain": "_spec3_sdk_28_apple_pay_domain",
        "application": "_spec3_sdk_29_application",
        "application_fee": "_spec3_sdk_30_application_fee",
        "apps.secret": "_spec3_sdk_31_apps.secret",
        "automatic_tax": "_spec3_sdk_32_automatic_tax",
        "balance": "_spec3_sdk_33_balance",
        "balance_amount": "_spec3_sdk_34_balance_amount",
        "balance_amount_by_source_type": "_spec3_sdk_35_balance_amount_by_source_type",
        "balance_detail": "_spec3_sdk_36_balance_detail",
        "balance_transaction": "_spec3_sdk_37_balance_transaction",
        "balance_transaction_source": "_spec3_sdk_38_balance_transaction_source",
        "bank_account": "_spec3_sdk_39_bank_account",
        "bank_connections_resource_accountholder": "_spec3_sdk_40_bank_connections_resource_accountholder",
        "bank_connections_resource_balance": "_spec3_sdk_41_bank_connections_resource_balance",
        "bank_connections_resource_balance_api_resource_cash_balance": "_spec3_sdk_42_bank_connections_resource_balance_api_resource_cash_balance",
        "bank_connections_resource_balance_api_resource_credit_balance": "_spec3_sdk_43_bank_connections_resource_balance_api_resource_credit_balance",
        "bank_connections_resource_balance_refresh": "_spec3_sdk_44_bank_connections_resource_balance_refresh",
        "bank_connections_resource_link_account_session_filters": "_spec3_sdk_45_bank_connections_resource_link_account_session_filters",
        "bank_connections_resource_ownership_refresh": "_spec3_sdk_46_bank_connections_resource_ownership_refresh",
        "billing_details": "_spec3_sdk_47_billing_details",
        "billing_portal.configuration": "_spec3_sdk_48_billing_portal.configuration",
        "billing_portal.session": "_spec3_sdk_49_billing_portal.session",
        "cancellation_details": "_spec3_sdk_50_cancellation_details",
        "capability": "_spec3_sdk_51_capability",
        "card": "_spec3_sdk_52_card",
        "card_issuing_account_terms_of_service": "_spec3_sdk_53_card_issuing_account_terms_of_service",
        "card_mandate_payment_method_details": "_spec3_sdk_54_card_mandate_payment_method_details",
        "cash_balance": "_spec3_sdk_55_cash_balance",
        "charge": "_spec3_sdk_56_charge",
        "charge_fraud_details": "_spec3_sdk_57_charge_fraud_details",
        "charge_outcome": "_spec3_sdk_58_charge_outcome",
        "charge_transfer_data": "_spec3_sdk_59_charge_transfer_data",
        "checkout.session": "_spec3_sdk_60_checkout.session",
        "checkout_acss_debit_mandate_options": "_spec3_sdk_61_checkout_acss_debit_mandate_options",
        "checkout_acss_debit_payment_method_options": "_spec3_sdk_62_checkout_acss_debit_payment_method_options",
        "checkout_affirm_payment_method_options": "_spec3_sdk_63_checkout_affirm_payment_method_options",
        "checkout_afterpay_clearpay_payment_method_options": "_spec3_sdk_64_checkout_afterpay_clearpay_payment_method_options",
        "checkout_alipay_payment_method_options": "_spec3_sdk_65_checkout_alipay_payment_method_options",
        "checkout_au_becs_debit_payment_method_options": "_spec3_sdk_66_checkout_au_becs_debit_payment_method_options",
        "checkout_bacs_debit_payment_method_options": "_spec3_sdk_67_checkout_bacs_debit_payment_method_options",
        "checkout_bancontact_payment_method_options": "_spec3_sdk_68_checkout_bancontact_payment_method_options",
        "checkout_boleto_payment_method_options": "_spec3_sdk_69_checkout_boleto_payment_method_options",
        "checkout_card_installments_options": "_spec3_sdk_70_checkout_card_installments_options",
        "checkout_card_payment_method_options": "_spec3_sdk_71_checkout_card_payment_method_options",
        "checkout_cashapp_payment_method_options": "_spec3_sdk_72_checkout_cashapp_payment_method_options",
        "checkout_customer_balance_bank_transfer_payment_method_options": "_spec3_sdk_73_checkout_customer_balance_bank_transfer_payment_method_options",
        "checkout_customer_balance_payment_method_options": "_spec3_sdk_74_checkout_customer_balance_payment_method_options",
        "checkout_eps_payment_method_options": "_spec3_sdk_75_checkout_eps_payment_method_options",
        "checkout_fpx_payment_method_options": "_spec3_sdk_76_checkout_fpx_payment_method_options",
        "checkout_giropay_payment_method_options": "_spec3_sdk_77_checkout_giropay_payment_method_options",
        "checkout_grab_pay_payment_method_options": "_spec3_sdk_78_checkout_grab_pay_payment_method_options",
        "checkout_ideal_payment_method_options": "_spec3_sdk_79_checkout_ideal_payment_method_options",
        "checkout_klarna_payment_method_options": "_spec3_sdk_80_checkout_klarna_payment_method_options",
        "checkout_konbini_payment_method_options": "_spec3_sdk_81_checkout_konbini_payment_method_options",
        "checkout_link_payment_method_options": "_spec3_sdk_82_checkout_link_payment_method_options",
        "checkout_oxxo_payment_method_options": "_spec3_sdk_83_checkout_oxxo_payment_method_options",
        "checkout_p24_payment_method_options": "_spec3_sdk_84_checkout_p24_payment_method_options",
        "checkout_paynow_payment_method_options": "_spec3_sdk_85_checkout_paynow_payment_method_options",
        "checkout_pix_payment_method_options": "_spec3_sdk_86_checkout_pix_payment_method_options",
        "checkout_sepa_debit_payment_method_options": "_spec3_sdk_87_checkout_sepa_debit_payment_method_options",
        "checkout_session_payment_method_options": "_spec3_sdk_88_checkout_session_payment_method_options",
        "checkout_sofort_payment_method_options": "_spec3_sdk_89_checkout_sofort_payment_method_options",
        "checkout_us_bank_account_payment_method_options": "_spec3_sdk_90_checkout_us_bank_account_payment_method_options",
        "connect_collection_transfer": "_spec3_sdk_91_connect_collection_transfer",
        "country_spec": "_spec3_sdk_92_country_spec",
        "country_spec_verification_field_details": "_spec3_sdk_93_country_spec_verification_field_details",
        "country_spec_verification_fields": "_spec3_sdk_94_country_spec_verification_fields",
        "coupon": "_spec3_sdk_95_coupon",
        "coupon_applies_to": "_spec3_sdk_96_coupon_applies_to",
        "coupon_currency_option": "_spec3_sdk_97_coupon_currency_option",
        "credit_note": "_spec3_sdk_98_credit_note",
        "credit_note_line_item": "_spec3_sdk_99_credit_note_line_item",
        "credit_note_tax_amount": "_spec3_sdk_100_credit_note_tax_amount",
        "currency_option": "_spec3_sdk_101_currency_option",
        "custom_unit_amount": "_spec3_sdk_102_custom_unit_amount",
        "customer": "_spec3_sdk_103_customer",
        "customer_acceptance": "_spec3_sdk_104_customer_acceptance",
        "customer_balance_customer_balance_settings": "_spec3_sdk_105_customer_balance_customer_balance_settings",
        "customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction": "_spec3_sdk_106_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction",
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction": "_spec3_sdk_107_customer_balance_resource_cash_balance_transaction_resource_funded_transaction",
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer": "_spec3_sdk_108_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer",
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer": "_spec3_sdk_109_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer",
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer": "_spec3_sdk_110_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer",
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer": "_spec3_sdk_111_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer",
        "customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction": "_spec3_sdk_112_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction",
        "customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction": "_spec3_sdk_113_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction",
        "customer_balance_transaction": "_spec3_sdk_114_customer_balance_transaction",
        "customer_cash_balance_transaction": "_spec3_sdk_115_customer_cash_balance_transaction",
        "customer_tax": "_spec3_sdk_116_customer_tax",
        "customer_tax_location": "_spec3_sdk_117_customer_tax_location",
        "deleted_account": "_spec3_sdk_118_deleted_account",
        "deleted_apple_pay_domain": "_spec3_sdk_119_deleted_apple_pay_domain",
        "deleted_application": "_spec3_sdk_120_deleted_application",
        "deleted_bank_account": "_spec3_sdk_121_deleted_bank_account",
        "deleted_card": "_spec3_sdk_122_deleted_card",
        "deleted_coupon": "_spec3_sdk_123_deleted_coupon",
        "deleted_customer": "_spec3_sdk_124_deleted_customer",
        "deleted_discount": "_spec3_sdk_125_deleted_discount",
        "deleted_external_account": "_spec3_sdk_126_deleted_external_account",
        "deleted_invoice": "_spec3_sdk_127_deleted_invoice",
        "deleted_invoiceitem": "_spec3_sdk_128_deleted_invoiceitem",
        "deleted_payment_source": "_spec3_sdk_129_deleted_payment_source",
        "deleted_person": "_spec3_sdk_130_deleted_person",
        "deleted_plan": "_spec3_sdk_131_deleted_plan",
        "deleted_price": "_spec3_sdk_132_deleted_price",
        "deleted_product": "_spec3_sdk_133_deleted_product",
        "deleted_radar.value_list": "_spec3_sdk_134_deleted_radar.value_list",
        "deleted_radar.value_list_item": "_spec3_sdk_135_deleted_radar.value_list_item",
        "deleted_subscription_item": "_spec3_sdk_136_deleted_subscription_item",
        "deleted_tax_id": "_spec3_sdk_137_deleted_tax_id",
        "deleted_terminal.configuration": "_spec3_sdk_138_deleted_terminal.configuration",
        "deleted_terminal.location": "_spec3_sdk_139_deleted_terminal.location",
        "deleted_terminal.reader": "_spec3_sdk_140_deleted_terminal.reader",
        "deleted_test_helpers.test_clock": "_spec3_sdk_141_deleted_test_helpers.test_clock",
        "deleted_webhook_endpoint": "_spec3_sdk_142_deleted_webhook_endpoint",
        "discount": "_spec3_sdk_143_discount",
        "discounts_resource_discount_amount": "_spec3_sdk_144_discounts_resource_discount_amount",
        "dispute": "_spec3_sdk_145_dispute",
        "dispute_evidence": "_spec3_sdk_146_dispute_evidence",
        "dispute_evidence_details": "_spec3_sdk_147_dispute_evidence_details",
        "email_sent": "_spec3_sdk_148_email_sent",
        "ephemeral_key": "_spec3_sdk_149_ephemeral_key",
        "error": "_spec3_sdk_150_error",
        "event": "_spec3_sdk_151_event",
        "exchange_rate": "_spec3_sdk_152_exchange_rate",
        "external_account": "_spec3_sdk_153_external_account",
        "external_account_requirements": "_spec3_sdk_154_external_account_requirements",
        "fee": "_spec3_sdk_155_fee",
        "fee_refund": "_spec3_sdk_156_fee_refund",
        "file": "_spec3_sdk_157_file",
        "file_link": "_spec3_sdk_158_file_link",
        "financial_connections.account": "_spec3_sdk_159_financial_connections.account",
        "financial_connections.account_owner": "_spec3_sdk_160_financial_connections.account_owner",
        "financial_connections.account_ownership": "_spec3_sdk_161_financial_connections.account_ownership",
        "financial_connections.session": "_spec3_sdk_162_financial_connections.session",
        "financial_reporting_finance_report_run_run_parameters": "_spec3_sdk_163_financial_reporting_finance_report_run_run_parameters",
        "funding_instructions": "_spec3_sdk_164_funding_instructions",
        "funding_instructions_bank_transfer": "_spec3_sdk_165_funding_instructions_bank_transfer",
        "funding_instructions_bank_transfer_financial_address": "_spec3_sdk_166_funding_instructions_bank_transfer_financial_address",
        "funding_instructions_bank_transfer_iban_record": "_spec3_sdk_167_funding_instructions_bank_transfer_iban_record",
        "funding_instructions_bank_transfer_sort_code_record": "_spec3_sdk_168_funding_instructions_bank_transfer_sort_code_record",
        "funding_instructions_bank_transfer_spei_record": "_spec3_sdk_169_funding_instructions_bank_transfer_spei_record",
        "funding_instructions_bank_transfer_zengin_record": "_spec3_sdk_170_funding_instructions_bank_transfer_zengin_record",
        "gelato_data_document_report_date_of_birth": "_spec3_sdk_171_gelato_data_document_report_date_of_birth",
        "gelato_data_document_report_expiration_date": "_spec3_sdk_172_gelato_data_document_report_expiration_date",
        "gelato_data_document_report_issued_date": "_spec3_sdk_173_gelato_data_document_report_issued_date",
        "gelato_data_id_number_report_date": "_spec3_sdk_174_gelato_data_id_number_report_date",
        "gelato_data_verified_outputs_date": "_spec3_sdk_175_gelato_data_verified_outputs_date",
        "gelato_document_report": "_spec3_sdk_176_gelato_document_report",
        "gelato_document_report_error": "_spec3_sdk_177_gelato_document_report_error",
        "gelato_id_number_report": "_spec3_sdk_178_gelato_id_number_report",
        "gelato_id_number_report_error": "_spec3_sdk_179_gelato_id_number_report_error",
        "gelato_report_document_options": "_spec3_sdk_180_gelato_report_document_options",
        "gelato_report_id_number_options": "_spec3_sdk_181_gelato_report_id_number_options",
        "gelato_selfie_report": "_spec3_sdk_182_gelato_selfie_report",
        "gelato_selfie_report_error": "_spec3_sdk_183_gelato_selfie_report_error",
        "gelato_session_document_options": "_spec3_sdk_184_gelato_session_document_options",
        "gelato_session_id_number_options": "_spec3_sdk_185_gelato_session_id_number_options",
        "gelato_session_last_error": "_spec3_sdk_186_gelato_session_last_error",
        "gelato_verification_report_options": "_spec3_sdk_187_gelato_verification_report_options",
        "gelato_verification_session_options": "_spec3_sdk_188_gelato_verification_session_options",
        "gelato_verified_outputs": "_spec3_sdk_189_gelato_verified_outputs",
        "identity.verification_report": "_spec3_sdk_190_identity.verification_report",
        "identity.verification_session": "_spec3_sdk_191_identity.verification_session",
        "inbound_transfers": "_spec3_sdk_192_inbound_transfers",
        "inbound_transfers_payment_method_details_us_bank_account": "_spec3_sdk_193_inbound_transfers_payment_method_details_us_bank_account",
        "invoice": "_spec3_sdk_194_invoice",
        "invoice_installments_card": "_spec3_sdk_195_invoice_installments_card",
        "invoice_item_threshold_reason": "_spec3_sdk_196_invoice_item_threshold_reason",
        "invoice_line_item_period": "_spec3_sdk_197_invoice_line_item_period",
        "invoice_mandate_options_card": "_spec3_sdk_198_invoice_mandate_options_card",
        "invoice_payment_method_options_acss_debit": "_spec3_sdk_199_invoice_payment_method_options_acss_debit",
        "invoice_payment_method_options_acss_debit_mandate_options": "_spec3_sdk_200_invoice_payment_method_options_acss_debit_mandate_options",
        "invoice_payment_method_options_bancontact": "_spec3_sdk_201_invoice_payment_method_options_bancontact",
        "invoice_payment_method_options_card": "_spec3_sdk_202_invoice_payment_method_options_card",
        "invoice_payment_method_options_customer_balance": "_spec3_sdk_203_invoice_payment_method_options_customer_balance",
        "invoice_payment_method_options_customer_balance_bank_transfer": "_spec3_sdk_204_invoice_payment_method_options_customer_balance_bank_transfer",
        "invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer": "_spec3_sdk_205_invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer",
        "invoice_payment_method_options_konbini": "_spec3_sdk_206_invoice_payment_method_options_konbini",
        "invoice_payment_method_options_us_bank_account": "_spec3_sdk_207_invoice_payment_method_options_us_bank_account",
        "invoice_payment_method_options_us_bank_account_linked_account_options": "_spec3_sdk_208_invoice_payment_method_options_us_bank_account_linked_account_options",
        "invoice_setting_custom_field": "_spec3_sdk_209_invoice_setting_custom_field",
        "invoice_setting_customer_setting": "_spec3_sdk_210_invoice_setting_customer_setting",
        "invoice_setting_phase_setting": "_spec3_sdk_211_invoice_setting_phase_setting",
        "invoice_setting_quote_setting": "_spec3_sdk_212_invoice_setting_quote_setting",
        "invoice_setting_rendering_options": "_spec3_sdk_213_invoice_setting_rendering_options",
        "invoice_setting_subscription_schedule_setting": "_spec3_sdk_214_invoice_setting_subscription_schedule_setting",
        "invoice_tax_amount": "_spec3_sdk_215_invoice_tax_amount",
        "invoice_threshold_reason": "_spec3_sdk_216_invoice_threshold_reason",
        "invoice_transfer_data": "_spec3_sdk_217_invoice_transfer_data",
        "invoiceitem": "_spec3_sdk_218_invoiceitem",
        "invoices_from_invoice": "_spec3_sdk_219_invoices_from_invoice",
        "invoices_line_items_credited_items": "_spec3_sdk_220_invoices_line_items_credited_items",
        "invoices_line_items_proration_details": "_spec3_sdk_221_invoices_line_items_proration_details",
        "invoices_payment_method_options": "_spec3_sdk_222_invoices_payment_method_options",
        "invoices_payment_settings": "_spec3_sdk_223_invoices_payment_settings",
        "invoices_resource_invoice_tax_id": "_spec3_sdk_224_invoices_resource_invoice_tax_id",
        "invoices_shipping_cost": "_spec3_sdk_225_invoices_shipping_cost",
        "invoices_status_transitions": "_spec3_sdk_226_invoices_status_transitions",
        "issuing.authorization": "_spec3_sdk_227_issuing.authorization",
        "issuing.card": "_spec3_sdk_228_issuing.card",
        "issuing.cardholder": "_spec3_sdk_229_issuing.cardholder",
        "issuing.dispute": "_spec3_sdk_230_issuing.dispute",
        "issuing.transaction": "_spec3_sdk_231_issuing.transaction",
        "issuing_authorization_amount_details": "_spec3_sdk_232_issuing_authorization_amount_details",
        "issuing_authorization_merchant_data": "_spec3_sdk_233_issuing_authorization_merchant_data",
        "issuing_authorization_network_data": "_spec3_sdk_234_issuing_authorization_network_data",
        "issuing_authorization_pending_request": "_spec3_sdk_235_issuing_authorization_pending_request",
        "issuing_authorization_request": "_spec3_sdk_236_issuing_authorization_request",
        "issuing_authorization_treasury": "_spec3_sdk_237_issuing_authorization_treasury",
        "issuing_authorization_verification_data": "_spec3_sdk_238_issuing_authorization_verification_data",
        "issuing_card_apple_pay": "_spec3_sdk_239_issuing_card_apple_pay",
        "issuing_card_authorization_controls": "_spec3_sdk_240_issuing_card_authorization_controls",
        "issuing_card_google_pay": "_spec3_sdk_241_issuing_card_google_pay",
        "issuing_card_shipping": "_spec3_sdk_242_issuing_card_shipping",
        "issuing_card_shipping_customs": "_spec3_sdk_243_issuing_card_shipping_customs",
        "issuing_card_spending_limit": "_spec3_sdk_244_issuing_card_spending_limit",
        "issuing_card_wallets": "_spec3_sdk_245_issuing_card_wallets",
        "issuing_cardholder_address": "_spec3_sdk_246_issuing_cardholder_address",
        "issuing_cardholder_authorization_controls": "_spec3_sdk_247_issuing_cardholder_authorization_controls",
        "issuing_cardholder_card_issuing": "_spec3_sdk_248_issuing_cardholder_card_issuing",
        "issuing_cardholder_company": "_spec3_sdk_249_issuing_cardholder_company",
        "issuing_cardholder_id_document": "_spec3_sdk_250_issuing_cardholder_id_document",
        "issuing_cardholder_individual": "_spec3_sdk_251_issuing_cardholder_individual",
        "issuing_cardholder_individual_dob": "_spec3_sdk_252_issuing_cardholder_individual_dob",
        "issuing_cardholder_requirements": "_spec3_sdk_253_issuing_cardholder_requirements",
        "issuing_cardholder_spending_limit": "_spec3_sdk_254_issuing_cardholder_spending_limit",
        "issuing_cardholder_user_terms_acceptance": "_spec3_sdk_255_issuing_cardholder_user_terms_acceptance",
        "issuing_cardholder_verification": "_spec3_sdk_256_issuing_cardholder_verification",
        "issuing_dispute_canceled_evidence": "_spec3_sdk_257_issuing_dispute_canceled_evidence",
        "issuing_dispute_duplicate_evidence": "_spec3_sdk_258_issuing_dispute_duplicate_evidence",
        "issuing_dispute_evidence": "_spec3_sdk_259_issuing_dispute_evidence",
        "issuing_dispute_fraudulent_evidence": "_spec3_sdk_260_issuing_dispute_fraudulent_evidence",
        "issuing_dispute_merchandise_not_as_described_evidence": "_spec3_sdk_261_issuing_dispute_merchandise_not_as_described_evidence",
        "issuing_dispute_not_received_evidence": "_spec3_sdk_262_issuing_dispute_not_received_evidence",
        "issuing_dispute_other_evidence": "_spec3_sdk_263_issuing_dispute_other_evidence",
        "issuing_dispute_service_not_as_described_evidence": "_spec3_sdk_264_issuing_dispute_service_not_as_described_evidence",
        "issuing_dispute_treasury": "_spec3_sdk_265_issuing_dispute_treasury",
        "issuing_transaction_amount_details": "_spec3_sdk_266_issuing_transaction_amount_details",
        "issuing_transaction_flight_data": "_spec3_sdk_267_issuing_transaction_flight_data",
        "issuing_transaction_flight_data_leg": "_spec3_sdk_268_issuing_transaction_flight_data_leg",
        "issuing_transaction_fuel_data": "_spec3_sdk_269_issuing_transaction_fuel_data",
        "issuing_transaction_lodging_data": "_spec3_sdk_270_issuing_transaction_lodging_data",
        "issuing_transaction_purchase_details": "_spec3_sdk_271_issuing_transaction_purchase_details",
        "issuing_transaction_receipt_data": "_spec3_sdk_272_issuing_transaction_receipt_data",
        "issuing_transaction_treasury": "_spec3_sdk_273_issuing_transaction_treasury",
        "item": "_spec3_sdk_274_item",
        "legal_entity_company": "_spec3_sdk_275_legal_entity_company",
        "legal_entity_company_verification": "_spec3_sdk_276_legal_entity_company_verification",
        "legal_entity_company_verification_document": "_spec3_sdk_277_legal_entity_company_verification_document",
        "legal_entity_dob": "_spec3_sdk_278_legal_entity_dob",
        "legal_entity_japan_address": "_spec3_sdk_279_legal_entity_japan_address",
        "legal_entity_person_verification": "_spec3_sdk_280_legal_entity_person_verification",
        "legal_entity_person_verification_document": "_spec3_sdk_281_legal_entity_person_verification_document",
        "legal_entity_ubo_declaration": "_spec3_sdk_282_legal_entity_ubo_declaration",
        "level3": "_spec3_sdk_283_level3",
        "level3_line_items": "_spec3_sdk_284_level3_line_items",
        "line_item": "_spec3_sdk_285_line_item",
        "line_items_discount_amount": "_spec3_sdk_286_line_items_discount_amount",
        "line_items_tax_amount": "_spec3_sdk_287_line_items_tax_amount",
        "linked_account_options_us_bank_account": "_spec3_sdk_288_linked_account_options_us_bank_account",
        "login_link": "_spec3_sdk_289_login_link",
        "mandate": "_spec3_sdk_290_mandate",
        "mandate_acss_debit": "_spec3_sdk_291_mandate_acss_debit",
        "mandate_au_becs_debit": "_spec3_sdk_292_mandate_au_becs_debit",
        "mandate_bacs_debit": "_spec3_sdk_293_mandate_bacs_debit",
        "mandate_blik": "_spec3_sdk_294_mandate_blik",
        "mandate_cashapp": "_spec3_sdk_295_mandate_cashapp",
        "mandate_link": "_spec3_sdk_296_mandate_link",
        "mandate_multi_use": "_spec3_sdk_297_mandate_multi_use",
        "mandate_options_off_session_details_blik": "_spec3_sdk_298_mandate_options_off_session_details_blik",
        "mandate_payment_method_details": "_spec3_sdk_299_mandate_payment_method_details",
        "mandate_paypal": "_spec3_sdk_300_mandate_paypal",
        "mandate_sepa_debit": "_spec3_sdk_301_mandate_sepa_debit",
        "mandate_single_use": "_spec3_sdk_302_mandate_single_use",
        "mandate_us_bank_account": "_spec3_sdk_303_mandate_us_bank_account",
        "networks": "_spec3_sdk_304_networks",
        "notification_event_data": "_spec3_sdk_305_notification_event_data",
        "notification_event_request": "_spec3_sdk_306_notification_event_request",
        "offline_acceptance": "_spec3_sdk_307_offline_acceptance",
        "online_acceptance": "_spec3_sdk_308_online_acceptance",
        "outbound_payments_payment_method_details": "_spec3_sdk_309_outbound_payments_payment_method_details",
        "outbound_payments_payment_method_details_financial_account": "_spec3_sdk_310_outbound_payments_payment_method_details_financial_account",
        "outbound_payments_payment_method_details_us_bank_account": "_spec3_sdk_311_outbound_payments_payment_method_details_us_bank_account",
        "outbound_transfers_payment_method_details": "_spec3_sdk_312_outbound_transfers_payment_method_details",
        "outbound_transfers_payment_method_details_us_bank_account": "_spec3_sdk_313_outbound_transfers_payment_method_details_us_bank_account",
        "package_dimensions": "_spec3_sdk_314_package_dimensions",
        "payment_flows_amount_details": "_spec3_sdk_315_payment_flows_amount_details",
        "payment_flows_amount_details_resource_tip": "_spec3_sdk_316_payment_flows_amount_details_resource_tip",
        "payment_flows_automatic_payment_methods_payment_intent": "_spec3_sdk_317_payment_flows_automatic_payment_methods_payment_intent",
        "payment_flows_automatic_payment_methods_setup_intent": "_spec3_sdk_318_payment_flows_automatic_payment_methods_setup_intent",
        "payment_flows_installment_options": "_spec3_sdk_319_payment_flows_installment_options",
        "payment_flows_private_payment_methods_alipay": "_spec3_sdk_320_payment_flows_private_payment_methods_alipay",
        "payment_flows_private_payment_methods_alipay_details": "_spec3_sdk_321_payment_flows_private_payment_methods_alipay_details",
        "payment_flows_private_payment_methods_klarna_dob": "_spec3_sdk_322_payment_flows_private_payment_methods_klarna_dob",
        "payment_intent": "_spec3_sdk_323_payment_intent",
        "payment_intent_card_processing": "_spec3_sdk_324_payment_intent_card_processing",
        "payment_intent_next_action": "_spec3_sdk_325_payment_intent_next_action",
        "payment_intent_next_action_alipay_handle_redirect": "_spec3_sdk_326_payment_intent_next_action_alipay_handle_redirect",
        "payment_intent_next_action_boleto": "_spec3_sdk_327_payment_intent_next_action_boleto",
        "payment_intent_next_action_card_await_notification": "_spec3_sdk_328_payment_intent_next_action_card_await_notification",
        "payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code": "_spec3_sdk_329_payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code",
        "payment_intent_next_action_cashapp_qr_code": "_spec3_sdk_330_payment_intent_next_action_cashapp_qr_code",
        "payment_intent_next_action_display_bank_transfer_instructions": "_spec3_sdk_331_payment_intent_next_action_display_bank_transfer_instructions",
        "payment_intent_next_action_display_oxxo_details": "_spec3_sdk_332_payment_intent_next_action_display_oxxo_details",
        "payment_intent_next_action_konbini": "_spec3_sdk_333_payment_intent_next_action_konbini",
        "payment_intent_next_action_konbini_familymart": "_spec3_sdk_334_payment_intent_next_action_konbini_familymart",
        "payment_intent_next_action_konbini_lawson": "_spec3_sdk_335_payment_intent_next_action_konbini_lawson",
        "payment_intent_next_action_konbini_ministop": "_spec3_sdk_336_payment_intent_next_action_konbini_ministop",
        "payment_intent_next_action_konbini_seicomart": "_spec3_sdk_337_payment_intent_next_action_konbini_seicomart",
        "payment_intent_next_action_konbini_stores": "_spec3_sdk_338_payment_intent_next_action_konbini_stores",
        "payment_intent_next_action_paynow_display_qr_code": "_spec3_sdk_339_payment_intent_next_action_paynow_display_qr_code",
        "payment_intent_next_action_pix_display_qr_code": "_spec3_sdk_340_payment_intent_next_action_pix_display_qr_code",
        "payment_intent_next_action_promptpay_display_qr_code": "_spec3_sdk_341_payment_intent_next_action_promptpay_display_qr_code",
        "payment_intent_next_action_redirect_to_url": "_spec3_sdk_342_payment_intent_next_action_redirect_to_url",
        "payment_intent_next_action_verify_with_microdeposits": "_spec3_sdk_343_payment_intent_next_action_verify_with_microdeposits",
        "payment_intent_next_action_wechat_pay_display_qr_code": "_spec3_sdk_344_payment_intent_next_action_wechat_pay_display_qr_code",
        "payment_intent_next_action_wechat_pay_redirect_to_android_app": "_spec3_sdk_345_payment_intent_next_action_wechat_pay_redirect_to_android_app",
        "payment_intent_next_action_wechat_pay_redirect_to_ios_app": "_spec3_sdk_346_payment_intent_next_action_wechat_pay_redirect_to_ios_app",
        "payment_intent_payment_method_options": "_spec3_sdk_347_payment_intent_payment_method_options",
        "payment_intent_payment_method_options_acss_debit": "_spec3_sdk_348_payment_intent_payment_method_options_acss_debit",
        "payment_intent_payment_method_options_au_becs_debit": "_spec3_sdk_349_payment_intent_payment_method_options_au_becs_debit",
        "payment_intent_payment_method_options_blik": "_spec3_sdk_350_payment_intent_payment_method_options_blik",
        "payment_intent_payment_method_options_card": "_spec3_sdk_351_payment_intent_payment_method_options_card",
        "payment_intent_payment_method_options_eps": "_spec3_sdk_352_payment_intent_payment_method_options_eps",
        "payment_intent_payment_method_options_link": "_spec3_sdk_353_payment_intent_payment_method_options_link",
        "payment_intent_payment_method_options_mandate_options_acss_debit": "_spec3_sdk_354_payment_intent_payment_method_options_mandate_options_acss_debit",
        "payment_intent_payment_method_options_mandate_options_sepa_debit": "_spec3_sdk_355_payment_intent_payment_method_options_mandate_options_sepa_debit",
        "payment_intent_payment_method_options_sepa_debit": "_spec3_sdk_356_payment_intent_payment_method_options_sepa_debit",
        "payment_intent_payment_method_options_us_bank_account": "_spec3_sdk_357_payment_intent_payment_method_options_us_bank_account",
        "payment_intent_processing": "_spec3_sdk_358_payment_intent_processing",
        "payment_intent_processing_customer_notification": "_spec3_sdk_359_payment_intent_processing_customer_notification",
        "payment_intent_type_specific_payment_method_options_client": "_spec3_sdk_360_payment_intent_type_specific_payment_method_options_client",
        "payment_link": "_spec3_sdk_361_payment_link",
        "payment_links_resource_after_completion": "_spec3_sdk_362_payment_links_resource_after_completion",
        "payment_links_resource_automatic_tax": "_spec3_sdk_363_payment_links_resource_automatic_tax",
        "payment_links_resource_completion_behavior_confirmation_page": "_spec3_sdk_364_payment_links_resource_completion_behavior_confirmation_page",
        "payment_links_resource_completion_behavior_redirect": "_spec3_sdk_365_payment_links_resource_completion_behavior_redirect",
        "payment_links_resource_consent_collection": "_spec3_sdk_366_payment_links_resource_consent_collection",
        "payment_links_resource_custom_fields": "_spec3_sdk_367_payment_links_resource_custom_fields",
        "payment_links_resource_custom_fields_dropdown": "_spec3_sdk_368_payment_links_resource_custom_fields_dropdown",
        "payment_links_resource_custom_fields_dropdown_option": "_spec3_sdk_369_payment_links_resource_custom_fields_dropdown_option",
        "payment_links_resource_custom_fields_label": "_spec3_sdk_370_payment_links_resource_custom_fields_label",
        "payment_links_resource_custom_text": "_spec3_sdk_371_payment_links_resource_custom_text",
        "payment_links_resource_custom_text_position": "_spec3_sdk_372_payment_links_resource_custom_text_position",
        "payment_links_resource_invoice_creation": "_spec3_sdk_373_payment_links_resource_invoice_creation",
        "payment_links_resource_invoice_settings": "_spec3_sdk_374_payment_links_resource_invoice_settings",
        "payment_links_resource_payment_intent_data": "_spec3_sdk_375_payment_links_resource_payment_intent_data",
        "payment_links_resource_phone_number_collection": "_spec3_sdk_376_payment_links_resource_phone_number_collection",
        "payment_links_resource_shipping_address_collection": "_spec3_sdk_377_payment_links_resource_shipping_address_collection",
        "payment_links_resource_shipping_option": "_spec3_sdk_378_payment_links_resource_shipping_option",
        "payment_links_resource_subscription_data": "_spec3_sdk_379_payment_links_resource_subscription_data",
        "payment_links_resource_tax_id_collection": "_spec3_sdk_380_payment_links_resource_tax_id_collection",
        "payment_links_resource_transfer_data": "_spec3_sdk_381_payment_links_resource_transfer_data",
        "payment_method": "_spec3_sdk_382_payment_method",
        "payment_method_acss_debit": "_spec3_sdk_383_payment_method_acss_debit",
        "payment_method_affirm": "_spec3_sdk_384_payment_method_affirm",
        "payment_method_afterpay_clearpay": "_spec3_sdk_385_payment_method_afterpay_clearpay",
        "payment_method_au_becs_debit": "_spec3_sdk_386_payment_method_au_becs_debit",
        "payment_method_bacs_debit": "_spec3_sdk_387_payment_method_bacs_debit",
        "payment_method_bancontact": "_spec3_sdk_388_payment_method_bancontact",
        "payment_method_blik": "_spec3_sdk_389_payment_method_blik",
        "payment_method_boleto": "_spec3_sdk_390_payment_method_boleto",
        "payment_method_card": "_spec3_sdk_391_payment_method_card",
        "payment_method_card_checks": "_spec3_sdk_392_payment_method_card_checks",
        "payment_method_card_present": "_spec3_sdk_393_payment_method_card_present",
        "payment_method_card_present_networks": "_spec3_sdk_394_payment_method_card_present_networks",
        "payment_method_card_wallet": "_spec3_sdk_395_payment_method_card_wallet",
        "payment_method_card_wallet_amex_express_checkout": "_spec3_sdk_396_payment_method_card_wallet_amex_express_checkout",
        "payment_method_card_wallet_apple_pay": "_spec3_sdk_397_payment_method_card_wallet_apple_pay",
        "payment_method_card_wallet_google_pay": "_spec3_sdk_398_payment_method_card_wallet_google_pay",
        "payment_method_card_wallet_link": "_spec3_sdk_399_payment_method_card_wallet_link",
        "payment_method_card_wallet_masterpass": "_spec3_sdk_400_payment_method_card_wallet_masterpass",
        "payment_method_card_wallet_samsung_pay": "_spec3_sdk_401_payment_method_card_wallet_samsung_pay",
        "payment_method_card_wallet_visa_checkout": "_spec3_sdk_402_payment_method_card_wallet_visa_checkout",
        "payment_method_cashapp": "_spec3_sdk_403_payment_method_cashapp",
        "payment_method_customer_balance": "_spec3_sdk_404_payment_method_customer_balance",
        "payment_method_details": "_spec3_sdk_405_payment_method_details",
        "payment_method_details_ach_credit_transfer": "_spec3_sdk_406_payment_method_details_ach_credit_transfer",
        "payment_method_details_ach_debit": "_spec3_sdk_407_payment_method_details_ach_debit",
        "payment_method_details_acss_debit": "_spec3_sdk_408_payment_method_details_acss_debit",
        "payment_method_details_affirm": "_spec3_sdk_409_payment_method_details_affirm",
        "payment_method_details_afterpay_clearpay": "_spec3_sdk_410_payment_method_details_afterpay_clearpay",
        "payment_method_details_au_becs_debit": "_spec3_sdk_411_payment_method_details_au_becs_debit",
        "payment_method_details_bacs_debit": "_spec3_sdk_412_payment_method_details_bacs_debit",
        "payment_method_details_bancontact": "_spec3_sdk_413_payment_method_details_bancontact",
        "payment_method_details_blik": "_spec3_sdk_414_payment_method_details_blik",
        "payment_method_details_boleto": "_spec3_sdk_415_payment_method_details_boleto",
        "payment_method_details_card": "_spec3_sdk_416_payment_method_details_card",
        "payment_method_details_card_checks": "_spec3_sdk_417_payment_method_details_card_checks",
        "payment_method_details_card_installments": "_spec3_sdk_418_payment_method_details_card_installments",
        "payment_method_details_card_installments_plan": "_spec3_sdk_419_payment_method_details_card_installments_plan",
        "payment_method_details_card_network_token": "_spec3_sdk_420_payment_method_details_card_network_token",
        "payment_method_details_card_present": "_spec3_sdk_421_payment_method_details_card_present",
        "payment_method_details_card_present_receipt": "_spec3_sdk_422_payment_method_details_card_present_receipt",
        "payment_method_details_card_wallet": "_spec3_sdk_423_payment_method_details_card_wallet",
        "payment_method_details_card_wallet_amex_express_checkout": "_spec3_sdk_424_payment_method_details_card_wallet_amex_express_checkout",
        "payment_method_details_card_wallet_apple_pay": "_spec3_sdk_425_payment_method_details_card_wallet_apple_pay",
        "payment_method_details_card_wallet_google_pay": "_spec3_sdk_426_payment_method_details_card_wallet_google_pay",
        "payment_method_details_card_wallet_link": "_spec3_sdk_427_payment_method_details_card_wallet_link",
        "payment_method_details_card_wallet_masterpass": "_spec3_sdk_428_payment_method_details_card_wallet_masterpass",
        "payment_method_details_card_wallet_samsung_pay": "_spec3_sdk_429_payment_method_details_card_wallet_samsung_pay",
        "payment_method_details_card_wallet_visa_checkout": "_spec3_sdk_430_payment_method_details_card_wallet_visa_checkout",
        "payment_method_details_cashapp": "_spec3_sdk_431_payment_method_details_cashapp",
        "payment_method_details_customer_balance": "_spec3_sdk_432_payment_method_details_customer_balance",
        "payment_method_details_eps": "_spec3_sdk_433_payment_method_details_eps",
        "payment_method_details_fpx": "_spec3_sdk_434_payment_method_details_fpx",
        "payment_method_details_giropay": "_spec3_sdk_435_payment_method_details_giropay",
        "payment_method_details_grabpay": "_spec3_sdk_436_payment_method_details_grabpay",
        "payment_method_details_ideal": "_spec3_sdk_437_payment_method_details_ideal",
        "payment_method_details_interac_present": "_spec3_sdk_438_payment_method_details_interac_present",
        "payment_method_details_interac_present_receipt": "_spec3_sdk_439_payment_method_details_interac_present_receipt",
        "payment_method_details_klarna": "_spec3_sdk_440_payment_method_details_klarna",
        "payment_method_details_konbini": "_spec3_sdk_441_payment_method_details_konbini",
        "payment_method_details_konbini_store": "_spec3_sdk_442_payment_method_details_konbini_store",
        "payment_method_details_link": "_spec3_sdk_443_payment_method_details_link",
        "payment_method_details_multibanco": "_spec3_sdk_444_payment_method_details_multibanco",
        "payment_method_details_oxxo": "_spec3_sdk_445_payment_method_details_oxxo",
        "payment_method_details_p24": "_spec3_sdk_446_payment_method_details_p24",
        "payment_method_details_paynow": "_spec3_sdk_447_payment_method_details_paynow",
        "payment_method_details_paypal": "_spec3_sdk_448_payment_method_details_paypal",
        "payment_method_details_pix": "_spec3_sdk_449_payment_method_details_pix",
        "payment_method_details_promptpay": "_spec3_sdk_450_payment_method_details_promptpay",
        "payment_method_details_sepa_credit_transfer": "_spec3_sdk_451_payment_method_details_sepa_credit_transfer",
        "payment_method_details_sepa_debit": "_spec3_sdk_452_payment_method_details_sepa_debit",
        "payment_method_details_sofort": "_spec3_sdk_453_payment_method_details_sofort",
        "payment_method_details_stripe_account": "_spec3_sdk_454_payment_method_details_stripe_account",
        "payment_method_details_us_bank_account": "_spec3_sdk_455_payment_method_details_us_bank_account",
        "payment_method_details_wechat": "_spec3_sdk_456_payment_method_details_wechat",
        "payment_method_details_wechat_pay": "_spec3_sdk_457_payment_method_details_wechat_pay",
        "payment_method_eps": "_spec3_sdk_458_payment_method_eps",
        "payment_method_fpx": "_spec3_sdk_459_payment_method_fpx",
        "payment_method_giropay": "_spec3_sdk_460_payment_method_giropay",
        "payment_method_grabpay": "_spec3_sdk_461_payment_method_grabpay",
        "payment_method_ideal": "_spec3_sdk_462_payment_method_ideal",
        "payment_method_interac_present": "_spec3_sdk_463_payment_method_interac_present",
        "payment_method_klarna": "_spec3_sdk_464_payment_method_klarna",
        "payment_method_konbini": "_spec3_sdk_465_payment_method_konbini",
        "payment_method_link": "_spec3_sdk_466_payment_method_link",
        "payment_method_options_affirm": "_spec3_sdk_467_payment_method_options_affirm",
        "payment_method_options_afterpay_clearpay": "_spec3_sdk_468_payment_method_options_afterpay_clearpay",
        "payment_method_options_alipay": "_spec3_sdk_469_payment_method_options_alipay",
        "payment_method_options_bacs_debit": "_spec3_sdk_470_payment_method_options_bacs_debit",
        "payment_method_options_bancontact": "_spec3_sdk_471_payment_method_options_bancontact",
        "payment_method_options_boleto": "_spec3_sdk_472_payment_method_options_boleto",
        "payment_method_options_card_installments": "_spec3_sdk_473_payment_method_options_card_installments",
        "payment_method_options_card_mandate_options": "_spec3_sdk_474_payment_method_options_card_mandate_options",
        "payment_method_options_card_present": "_spec3_sdk_475_payment_method_options_card_present",
        "payment_method_options_cashapp": "_spec3_sdk_476_payment_method_options_cashapp",
        "payment_method_options_customer_balance": "_spec3_sdk_477_payment_method_options_customer_balance",
        "payment_method_options_customer_balance_bank_transfer": "_spec3_sdk_478_payment_method_options_customer_balance_bank_transfer",
        "payment_method_options_customer_balance_eu_bank_account": "_spec3_sdk_479_payment_method_options_customer_balance_eu_bank_account",
        "payment_method_options_fpx": "_spec3_sdk_480_payment_method_options_fpx",
        "payment_method_options_giropay": "_spec3_sdk_481_payment_method_options_giropay",
        "payment_method_options_grabpay": "_spec3_sdk_482_payment_method_options_grabpay",
        "payment_method_options_ideal": "_spec3_sdk_483_payment_method_options_ideal",
        "payment_method_options_interac_present": "_spec3_sdk_484_payment_method_options_interac_present",
        "payment_method_options_klarna": "_spec3_sdk_485_payment_method_options_klarna",
        "payment_method_options_konbini": "_spec3_sdk_486_payment_method_options_konbini",
        "payment_method_options_oxxo": "_spec3_sdk_487_payment_method_options_oxxo",
        "payment_method_options_p24": "_spec3_sdk_488_payment_method_options_p24",
        "payment_method_options_paynow": "_spec3_sdk_489_payment_method_options_paynow",
        "payment_method_options_paypal": "_spec3_sdk_490_payment_method_options_paypal",
        "payment_method_options_pix": "_spec3_sdk_491_payment_method_options_pix",
        "payment_method_options_promptpay": "_spec3_sdk_492_payment_method_options_promptpay",
        "payment_method_options_sofort": "_spec3_sdk_493_payment_method_options_sofort",
        "payment_method_options_wechat_pay": "_spec3_sdk_494_payment_method_options_wechat_pay",
        "payment_method_oxxo": "_spec3_sdk_495_payment_method_oxxo",
        "payment_method_p24": "_spec3_sdk_496_payment_method_p24",
        "payment_method_paynow": "_spec3_sdk_497_payment_method_paynow",
        "payment_method_paypal": "_spec3_sdk_498_payment_method_paypal",
        "payment_method_pix": "_spec3_sdk_499_payment_method_pix",
        "payment_method_promptpay": "_spec3_sdk_500_payment_method_promptpay",
        "payment_method_sepa_debit": "_spec3_sdk_501_payment_method_sepa_debit",
        "payment_method_sofort": "_spec3_sdk_502_payment_method_sofort",
        "payment_method_us_bank_account": "_spec3_sdk_503_payment_method_us_bank_account",
        "payment_method_us_bank_account_blocked": "_spec3_sdk_504_payment_method_us_bank_account_blocked",
        "payment_method_us_bank_account_status_details": "_spec3_sdk_505_payment_method_us_bank_account_status_details",
        "payment_method_wechat_pay": "_spec3_sdk_506_payment_method_wechat_pay",
        "payment_pages_checkout_session_after_expiration": "_spec3_sdk_507_payment_pages_checkout_session_after_expiration",
        "payment_pages_checkout_session_after_expiration_recovery": "_spec3_sdk_508_payment_pages_checkout_session_after_expiration_recovery",
        "payment_pages_checkout_session_automatic_tax": "_spec3_sdk_509_payment_pages_checkout_session_automatic_tax",
        "payment_pages_checkout_session_consent": "_spec3_sdk_510_payment_pages_checkout_session_consent",
        "payment_pages_checkout_session_consent_collection": "_spec3_sdk_511_payment_pages_checkout_session_consent_collection",
        "payment_pages_checkout_session_currency_conversion": "_spec3_sdk_512_payment_pages_checkout_session_currency_conversion",
        "payment_pages_checkout_session_custom_fields": "_spec3_sdk_513_payment_pages_checkout_session_custom_fields",
        "payment_pages_checkout_session_custom_fields_dropdown": "_spec3_sdk_514_payment_pages_checkout_session_custom_fields_dropdown",
        "payment_pages_checkout_session_custom_fields_label": "_spec3_sdk_515_payment_pages_checkout_session_custom_fields_label",
        "payment_pages_checkout_session_custom_fields_numeric": "_spec3_sdk_516_payment_pages_checkout_session_custom_fields_numeric",
        "payment_pages_checkout_session_custom_fields_option": "_spec3_sdk_517_payment_pages_checkout_session_custom_fields_option",
        "payment_pages_checkout_session_custom_fields_text": "_spec3_sdk_518_payment_pages_checkout_session_custom_fields_text",
        "payment_pages_checkout_session_custom_text": "_spec3_sdk_519_payment_pages_checkout_session_custom_text",
        "payment_pages_checkout_session_custom_text_position": "_spec3_sdk_520_payment_pages_checkout_session_custom_text_position",
        "payment_pages_checkout_session_customer_details": "_spec3_sdk_521_payment_pages_checkout_session_customer_details",
        "payment_pages_checkout_session_invoice_creation": "_spec3_sdk_522_payment_pages_checkout_session_invoice_creation",
        "payment_pages_checkout_session_invoice_settings": "_spec3_sdk_523_payment_pages_checkout_session_invoice_settings",
        "payment_pages_checkout_session_phone_number_collection": "_spec3_sdk_524_payment_pages_checkout_session_phone_number_collection",
        "payment_pages_checkout_session_shipping_address_collection": "_spec3_sdk_525_payment_pages_checkout_session_shipping_address_collection",
        "payment_pages_checkout_session_shipping_cost": "_spec3_sdk_526_payment_pages_checkout_session_shipping_cost",
        "payment_pages_checkout_session_shipping_option": "_spec3_sdk_527_payment_pages_checkout_session_shipping_option",
        "payment_pages_checkout_session_tax_id": "_spec3_sdk_528_payment_pages_checkout_session_tax_id",
        "payment_pages_checkout_session_tax_id_collection": "_spec3_sdk_529_payment_pages_checkout_session_tax_id_collection",
        "payment_pages_checkout_session_total_details": "_spec3_sdk_530_payment_pages_checkout_session_total_details",
        "payment_pages_checkout_session_total_details_resource_breakdown": "_spec3_sdk_531_payment_pages_checkout_session_total_details_resource_breakdown",
        "payment_source": "_spec3_sdk_532_payment_source",
        "payout": "_spec3_sdk_533_payout",
        "paypal_seller_protection": "_spec3_sdk_534_paypal_seller_protection",
        "period": "_spec3_sdk_535_period",
        "person": "_spec3_sdk_536_person",
        "person_future_requirements": "_spec3_sdk_537_person_future_requirements",
        "person_relationship": "_spec3_sdk_538_person_relationship",
        "person_requirements": "_spec3_sdk_539_person_requirements",
        "plan": "_spec3_sdk_540_plan",
        "plan_tier": "_spec3_sdk_541_plan_tier",
        "platform_tax_fee": "_spec3_sdk_542_platform_tax_fee",
        "portal_business_profile": "_spec3_sdk_543_portal_business_profile",
        "portal_customer_update": "_spec3_sdk_544_portal_customer_update",
        "portal_features": "_spec3_sdk_545_portal_features",
        "portal_flows_after_completion_hosted_confirmation": "_spec3_sdk_546_portal_flows_after_completion_hosted_confirmation",
        "portal_flows_after_completion_redirect": "_spec3_sdk_547_portal_flows_after_completion_redirect",
        "portal_flows_flow": "_spec3_sdk_548_portal_flows_flow",
        "portal_flows_flow_after_completion": "_spec3_sdk_549_portal_flows_flow_after_completion",
        "portal_flows_flow_subscription_cancel": "_spec3_sdk_550_portal_flows_flow_subscription_cancel",
        "portal_flows_flow_subscription_update": "_spec3_sdk_551_portal_flows_flow_subscription_update",
        "portal_flows_flow_subscription_update_confirm": "_spec3_sdk_552_portal_flows_flow_subscription_update_confirm",
        "portal_flows_subscription_update_confirm_discount": "_spec3_sdk_553_portal_flows_subscription_update_confirm_discount",
        "portal_flows_subscription_update_confirm_item": "_spec3_sdk_554_portal_flows_subscription_update_confirm_item",
        "portal_invoice_list": "_spec3_sdk_555_portal_invoice_list",
        "portal_login_page": "_spec3_sdk_556_portal_login_page",
        "portal_payment_method_update": "_spec3_sdk_557_portal_payment_method_update",
        "portal_subscription_cancel": "_spec3_sdk_558_portal_subscription_cancel",
        "portal_subscription_cancellation_reason": "_spec3_sdk_559_portal_subscription_cancellation_reason",
        "portal_subscription_pause": "_spec3_sdk_560_portal_subscription_pause",
        "portal_subscription_update": "_spec3_sdk_561_portal_subscription_update",
        "portal_subscription_update_product": "_spec3_sdk_562_portal_subscription_update_product",
        "price": "_spec3_sdk_563_price",
        "price_tier": "_spec3_sdk_564_price_tier",
        "product": "_spec3_sdk_565_product",
        "promotion_code": "_spec3_sdk_566_promotion_code",
        "promotion_code_currency_option": "_spec3_sdk_567_promotion_code_currency_option",
        "promotion_codes_resource_restrictions": "_spec3_sdk_568_promotion_codes_resource_restrictions",
        "quote": "_spec3_sdk_569_quote",
        "quotes_resource_automatic_tax": "_spec3_sdk_570_quotes_resource_automatic_tax",
        "quotes_resource_computed": "_spec3_sdk_571_quotes_resource_computed",
        "quotes_resource_from_quote": "_spec3_sdk_572_quotes_resource_from_quote",
        "quotes_resource_recurring": "_spec3_sdk_573_quotes_resource_recurring",
        "quotes_resource_status_transitions": "_spec3_sdk_574_quotes_resource_status_transitions",
        "quotes_resource_subscription_data_subscription_data": "_spec3_sdk_575_quotes_resource_subscription_data_subscription_data",
        "quotes_resource_total_details": "_spec3_sdk_576_quotes_resource_total_details",
        "quotes_resource_total_details_resource_breakdown": "_spec3_sdk_577_quotes_resource_total_details_resource_breakdown",
        "quotes_resource_transfer_data": "_spec3_sdk_578_quotes_resource_transfer_data",
        "quotes_resource_upfront": "_spec3_sdk_579_quotes_resource_upfront",
        "radar.early_fraud_warning": "_spec3_sdk_580_radar.early_fraud_warning",
        "radar.value_list": "_spec3_sdk_581_radar.value_list",
        "radar.value_list_item": "_spec3_sdk_582_radar.value_list_item",
        "radar_radar_options": "_spec3_sdk_583_radar_radar_options",
        "radar_review_resource_location": "_spec3_sdk_584_radar_review_resource_location",
        "radar_review_resource_session": "_spec3_sdk_585_radar_review_resource_session",
        "received_payment_method_details_financial_account": "_spec3_sdk_586_received_payment_method_details_financial_account",
        "recurring": "_spec3_sdk_587_recurring",
        "refund": "_spec3_sdk_588_refund",
        "refund_next_action": "_spec3_sdk_589_refund_next_action",
        "refund_next_action_display_details": "_spec3_sdk_590_refund_next_action_display_details",
        "reporting.report_run": "_spec3_sdk_591_reporting.report_run",
        "reporting.report_type": "_spec3_sdk_592_reporting.report_type",
        "reserve_transaction": "_spec3_sdk_593_reserve_transaction",
        "review": "_spec3_sdk_594_review",
        "rule": "_spec3_sdk_595_rule",
        "scheduled_query_run": "_spec3_sdk_596_scheduled_query_run",
        "schedules_phase_automatic_tax": "_spec3_sdk_597_schedules_phase_automatic_tax",
        "secret_service_resource_scope": "_spec3_sdk_598_secret_service_resource_scope",
        "sepa_debit_generated_from": "_spec3_sdk_599_sepa_debit_generated_from",
        "setup_attempt": "_spec3_sdk_600_setup_attempt",
        "setup_attempt_payment_method_details": "_spec3_sdk_601_setup_attempt_payment_method_details",
        "setup_attempt_payment_method_details_acss_debit": "_spec3_sdk_602_setup_attempt_payment_method_details_acss_debit",
        "setup_attempt_payment_method_details_au_becs_debit": "_spec3_sdk_603_setup_attempt_payment_method_details_au_becs_debit",
        "setup_attempt_payment_method_details_bacs_debit": "_spec3_sdk_604_setup_attempt_payment_method_details_bacs_debit",
        "setup_attempt_payment_method_details_bancontact": "_spec3_sdk_605_setup_attempt_payment_method_details_bancontact",
        "setup_attempt_payment_method_details_blik": "_spec3_sdk_606_setup_attempt_payment_method_details_blik",
        "setup_attempt_payment_method_details_boleto": "_spec3_sdk_607_setup_attempt_payment_method_details_boleto",
        "setup_attempt_payment_method_details_card": "_spec3_sdk_608_setup_attempt_payment_method_details_card",
        "setup_attempt_payment_method_details_card_present": "_spec3_sdk_609_setup_attempt_payment_method_details_card_present",
        "setup_attempt_payment_method_details_card_wallet": "_spec3_sdk_610_setup_attempt_payment_method_details_card_wallet",
        "setup_attempt_payment_method_details_cashapp": "_spec3_sdk_611_setup_attempt_payment_method_details_cashapp",
        "setup_attempt_payment_method_details_ideal": "_spec3_sdk_612_setup_attempt_payment_method_details_ideal",
        "setup_attempt_payment_method_details_klarna": "_spec3_sdk_613_setup_attempt_payment_method_details_klarna",
        "setup_attempt_payment_method_details_link": "_spec3_sdk_614_setup_attempt_payment_method_details_link",
        "setup_attempt_payment_method_details_paypal": "_spec3_sdk_615_setup_attempt_payment_method_details_paypal",
        "setup_attempt_payment_method_details_sepa_debit": "_spec3_sdk_616_setup_attempt_payment_method_details_sepa_debit",
        "setup_attempt_payment_method_details_sofort": "_spec3_sdk_617_setup_attempt_payment_method_details_sofort",
        "setup_attempt_payment_method_details_us_bank_account": "_spec3_sdk_618_setup_attempt_payment_method_details_us_bank_account",
        "setup_intent": "_spec3_sdk_619_setup_intent",
        "setup_intent_next_action": "_spec3_sdk_620_setup_intent_next_action",
        "setup_intent_next_action_redirect_to_url": "_spec3_sdk_621_setup_intent_next_action_redirect_to_url",
        "setup_intent_next_action_verify_with_microdeposits": "_spec3_sdk_622_setup_intent_next_action_verify_with_microdeposits",
        "setup_intent_payment_method_options": "_spec3_sdk_623_setup_intent_payment_method_options",
        "setup_intent_payment_method_options_acss_debit": "_spec3_sdk_624_setup_intent_payment_method_options_acss_debit",
        "setup_intent_payment_method_options_blik": "_spec3_sdk_625_setup_intent_payment_method_options_blik",
        "setup_intent_payment_method_options_card": "_spec3_sdk_626_setup_intent_payment_method_options_card",
        "setup_intent_payment_method_options_card_mandate_options": "_spec3_sdk_627_setup_intent_payment_method_options_card_mandate_options",
        "setup_intent_payment_method_options_link": "_spec3_sdk_628_setup_intent_payment_method_options_link",
        "setup_intent_payment_method_options_mandate_options_acss_debit": "_spec3_sdk_629_setup_intent_payment_method_options_mandate_options_acss_debit",
        "setup_intent_payment_method_options_mandate_options_blik": "_spec3_sdk_630_setup_intent_payment_method_options_mandate_options_blik",
        "setup_intent_payment_method_options_mandate_options_sepa_debit": "_spec3_sdk_631_setup_intent_payment_method_options_mandate_options_sepa_debit",
        "setup_intent_payment_method_options_paypal": "_spec3_sdk_632_setup_intent_payment_method_options_paypal",
        "setup_intent_payment_method_options_sepa_debit": "_spec3_sdk_633_setup_intent_payment_method_options_sepa_debit",
        "setup_intent_payment_method_options_us_bank_account": "_spec3_sdk_634_setup_intent_payment_method_options_us_bank_account",
        "setup_intent_type_specific_payment_method_options_client": "_spec3_sdk_635_setup_intent_type_specific_payment_method_options_client",
        "shipping": "_spec3_sdk_636_shipping",
        "shipping_rate": "_spec3_sdk_637_shipping_rate",
        "shipping_rate_currency_option": "_spec3_sdk_638_shipping_rate_currency_option",
        "shipping_rate_delivery_estimate": "_spec3_sdk_639_shipping_rate_delivery_estimate",
        "shipping_rate_delivery_estimate_bound": "_spec3_sdk_640_shipping_rate_delivery_estimate_bound",
        "shipping_rate_fixed_amount": "_spec3_sdk_641_shipping_rate_fixed_amount",
        "sigma_scheduled_query_run_error": "_spec3_sdk_642_sigma_scheduled_query_run_error",
        "source": "_spec3_sdk_643_source",
        "source_code_verification_flow": "_spec3_sdk_644_source_code_verification_flow",
        "source_mandate_notification": "_spec3_sdk_645_source_mandate_notification",
        "source_mandate_notification_acss_debit_data": "_spec3_sdk_646_source_mandate_notification_acss_debit_data",
        "source_mandate_notification_bacs_debit_data": "_spec3_sdk_647_source_mandate_notification_bacs_debit_data",
        "source_mandate_notification_sepa_debit_data": "_spec3_sdk_648_source_mandate_notification_sepa_debit_data",
        "source_order": "_spec3_sdk_649_source_order",
        "source_order_item": "_spec3_sdk_650_source_order_item",
        "source_owner": "_spec3_sdk_651_source_owner",
        "source_receiver_flow": "_spec3_sdk_652_source_receiver_flow",
        "source_redirect_flow": "_spec3_sdk_653_source_redirect_flow",
        "source_transaction": "_spec3_sdk_654_source_transaction",
        "source_transaction_ach_credit_transfer_data": "_spec3_sdk_655_source_transaction_ach_credit_transfer_data",
        "source_transaction_chf_credit_transfer_data": "_spec3_sdk_656_source_transaction_chf_credit_transfer_data",
        "source_transaction_gbp_credit_transfer_data": "_spec3_sdk_657_source_transaction_gbp_credit_transfer_data",
        "source_transaction_paper_check_data": "_spec3_sdk_658_source_transaction_paper_check_data",
        "source_transaction_sepa_credit_transfer_data": "_spec3_sdk_659_source_transaction_sepa_credit_transfer_data",
        "source_type_ach_credit_transfer": "_spec3_sdk_660_source_type_ach_credit_transfer",
        "source_type_ach_debit": "_spec3_sdk_661_source_type_ach_debit",
        "source_type_acss_debit": "_spec3_sdk_662_source_type_acss_debit",
        "source_type_alipay": "_spec3_sdk_663_source_type_alipay",
        "source_type_au_becs_debit": "_spec3_sdk_664_source_type_au_becs_debit",
        "source_type_bancontact": "_spec3_sdk_665_source_type_bancontact",
        "source_type_card": "_spec3_sdk_666_source_type_card",
        "source_type_card_present": "_spec3_sdk_667_source_type_card_present",
        "source_type_eps": "_spec3_sdk_668_source_type_eps",
        "source_type_giropay": "_spec3_sdk_669_source_type_giropay",
        "source_type_ideal": "_spec3_sdk_670_source_type_ideal",
        "source_type_klarna": "_spec3_sdk_671_source_type_klarna",
        "source_type_multibanco": "_spec3_sdk_672_source_type_multibanco",
        "source_type_p24": "_spec3_sdk_673_source_type_p24",
        "source_type_sepa_credit_transfer": "_spec3_sdk_674_source_type_sepa_credit_transfer",
        "source_type_sepa_debit": "_spec3_sdk_675_source_type_sepa_debit",
        "source_type_sofort": "_spec3_sdk_676_source_type_sofort",
        "source_type_three_d_secure": "_spec3_sdk_677_source_type_three_d_secure",
        "source_type_wechat": "_spec3_sdk_678_source_type_wechat",
        "subscription": "_spec3_sdk_679_subscription",
        "subscription_automatic_tax": "_spec3_sdk_680_subscription_automatic_tax",
        "subscription_billing_thresholds": "_spec3_sdk_681_subscription_billing_thresholds",
        "subscription_item": "_spec3_sdk_682_subscription_item",
        "subscription_item_billing_thresholds": "_spec3_sdk_683_subscription_item_billing_thresholds",
        "subscription_payment_method_options_card": "_spec3_sdk_684_subscription_payment_method_options_card",
        "subscription_pending_invoice_item_interval": "_spec3_sdk_685_subscription_pending_invoice_item_interval",
        "subscription_schedule": "_spec3_sdk_686_subscription_schedule",
        "subscription_schedule_add_invoice_item": "_spec3_sdk_687_subscription_schedule_add_invoice_item",
        "subscription_schedule_configuration_item": "_spec3_sdk_688_subscription_schedule_configuration_item",
        "subscription_schedule_current_phase": "_spec3_sdk_689_subscription_schedule_current_phase",
        "subscription_schedule_phase_configuration": "_spec3_sdk_690_subscription_schedule_phase_configuration",
        "subscription_schedules_resource_default_settings": "_spec3_sdk_691_subscription_schedules_resource_default_settings",
        "subscription_schedules_resource_default_settings_automatic_tax": "_spec3_sdk_692_subscription_schedules_resource_default_settings_automatic_tax",
        "subscription_transfer_data": "_spec3_sdk_693_subscription_transfer_data",
        "subscriptions_resource_pause_collection": "_spec3_sdk_694_subscriptions_resource_pause_collection",
        "subscriptions_resource_payment_method_options": "_spec3_sdk_695_subscriptions_resource_payment_method_options",
        "subscriptions_resource_payment_settings": "_spec3_sdk_696_subscriptions_resource_payment_settings",
        "subscriptions_resource_pending_update": "_spec3_sdk_697_subscriptions_resource_pending_update",
        "subscriptions_trials_resource_end_behavior": "_spec3_sdk_698_subscriptions_trials_resource_end_behavior",
        "subscriptions_trials_resource_trial_settings": "_spec3_sdk_699_subscriptions_trials_resource_trial_settings",
        "tax.calculation": "_spec3_sdk_700_tax.calculation",
        "tax.calculation_line_item": "_spec3_sdk_701_tax.calculation_line_item",
        "tax.transaction": "_spec3_sdk_702_tax.transaction",
        "tax.transaction_line_item": "_spec3_sdk_703_tax.transaction_line_item",
        "tax_code": "_spec3_sdk_704_tax_code",
        "tax_deducted_at_source": "_spec3_sdk_705_tax_deducted_at_source",
        "tax_id": "_spec3_sdk_706_tax_id",
        "tax_id_verification": "_spec3_sdk_707_tax_id_verification",
        "tax_product_resource_customer_details": "_spec3_sdk_708_tax_product_resource_customer_details",
        "tax_product_resource_customer_details_resource_tax_id": "_spec3_sdk_709_tax_product_resource_customer_details_resource_tax_id",
        "tax_product_resource_jurisdiction": "_spec3_sdk_710_tax_product_resource_jurisdiction",
        "tax_product_resource_line_item_tax_breakdown": "_spec3_sdk_711_tax_product_resource_line_item_tax_breakdown",
        "tax_product_resource_line_item_tax_rate_details": "_spec3_sdk_712_tax_product_resource_line_item_tax_rate_details",
        "tax_product_resource_postal_address": "_spec3_sdk_713_tax_product_resource_postal_address",
        "tax_product_resource_tax_breakdown": "_spec3_sdk_714_tax_product_resource_tax_breakdown",
        "tax_product_resource_tax_calculation_shipping_cost": "_spec3_sdk_715_tax_product_resource_tax_calculation_shipping_cost",
        "tax_product_resource_tax_rate_details": "_spec3_sdk_716_tax_product_resource_tax_rate_details",
        "tax_product_resource_tax_transaction_line_item_resource_reversal": "_spec3_sdk_717_tax_product_resource_tax_transaction_line_item_resource_reversal",
        "tax_product_resource_tax_transaction_resource_reversal": "_spec3_sdk_718_tax_product_resource_tax_transaction_resource_reversal",
        "tax_product_resource_tax_transaction_shipping_cost": "_spec3_sdk_719_tax_product_resource_tax_transaction_shipping_cost",
        "tax_rate": "_spec3_sdk_720_tax_rate",
        "terminal.configuration": "_spec3_sdk_721_terminal.configuration",
        "terminal.connection_token": "_spec3_sdk_722_terminal.connection_token",
        "terminal.location": "_spec3_sdk_723_terminal.location",
        "terminal.reader": "_spec3_sdk_724_terminal.reader",
        "terminal_configuration_configuration_resource_currency_specific_config": "_spec3_sdk_725_terminal_configuration_configuration_resource_currency_specific_config",
        "terminal_configuration_configuration_resource_device_type_specific_config": "_spec3_sdk_726_terminal_configuration_configuration_resource_device_type_specific_config",
        "terminal_configuration_configuration_resource_tipping": "_spec3_sdk_727_terminal_configuration_configuration_resource_tipping",
        "terminal_reader_reader_resource_cart": "_spec3_sdk_728_terminal_reader_reader_resource_cart",
        "terminal_reader_reader_resource_line_item": "_spec3_sdk_729_terminal_reader_reader_resource_line_item",
        "terminal_reader_reader_resource_process_config": "_spec3_sdk_730_terminal_reader_reader_resource_process_config",
        "terminal_reader_reader_resource_process_payment_intent_action": "_spec3_sdk_731_terminal_reader_reader_resource_process_payment_intent_action",
        "terminal_reader_reader_resource_process_setup_intent_action": "_spec3_sdk_732_terminal_reader_reader_resource_process_setup_intent_action",
        "terminal_reader_reader_resource_reader_action": "_spec3_sdk_733_terminal_reader_reader_resource_reader_action",
        "terminal_reader_reader_resource_refund_payment_action": "_spec3_sdk_734_terminal_reader_reader_resource_refund_payment_action",
        "terminal_reader_reader_resource_set_reader_display_action": "_spec3_sdk_735_terminal_reader_reader_resource_set_reader_display_action",
        "terminal_reader_reader_resource_tipping_config": "_spec3_sdk_736_terminal_reader_reader_resource_tipping_config",
        "test_helpers.test_clock": "_spec3_sdk_737_test_helpers.test_clock",
        "three_d_secure_details": "_spec3_sdk_738_three_d_secure_details",
        "three_d_secure_usage": "_spec3_sdk_739_three_d_secure_usage",
        "token": "_spec3_sdk_740_token",
        "topup": "_spec3_sdk_741_topup",
        "transfer": "_spec3_sdk_742_transfer",
        "transfer_data": "_spec3_sdk_743_transfer_data",
        "transfer_reversal": "_spec3_sdk_744_transfer_reversal",
        "transfer_schedule": "_spec3_sdk_745_transfer_schedule",
        "transform_quantity": "_spec3_sdk_746_transform_quantity",
        "transform_usage": "_spec3_sdk_747_transform_usage",
        "treasury.credit_reversal": "_spec3_sdk_748_treasury.credit_reversal",
        "treasury.debit_reversal": "_spec3_sdk_749_treasury.debit_reversal",
        "treasury.financial_account": "_spec3_sdk_750_treasury.financial_account",
        "treasury.financial_account_features": "_spec3_sdk_751_treasury.financial_account_features",
        "treasury.inbound_transfer": "_spec3_sdk_752_treasury.inbound_transfer",
        "treasury.outbound_payment": "_spec3_sdk_753_treasury.outbound_payment",
        "treasury.outbound_transfer": "_spec3_sdk_754_treasury.outbound_transfer",
        "treasury.received_credit": "_spec3_sdk_755_treasury.received_credit",
        "treasury.received_debit": "_spec3_sdk_756_treasury.received_debit",
        "treasury.transaction": "_spec3_sdk_757_treasury.transaction",
        "treasury.transaction_entry": "_spec3_sdk_758_treasury.transaction_entry",
        "treasury_financial_accounts_resource_aba_record": "_spec3_sdk_759_treasury_financial_accounts_resource_aba_record",
        "treasury_financial_accounts_resource_ach_toggle_settings": "_spec3_sdk_760_treasury_financial_accounts_resource_ach_toggle_settings",
        "treasury_financial_accounts_resource_balance": "_spec3_sdk_761_treasury_financial_accounts_resource_balance",
        "treasury_financial_accounts_resource_closed_status_details": "_spec3_sdk_762_treasury_financial_accounts_resource_closed_status_details",
        "treasury_financial_accounts_resource_financial_address": "_spec3_sdk_763_treasury_financial_accounts_resource_financial_address",
        "treasury_financial_accounts_resource_financial_addresses_features": "_spec3_sdk_764_treasury_financial_accounts_resource_financial_addresses_features",
        "treasury_financial_accounts_resource_inbound_transfers": "_spec3_sdk_765_treasury_financial_accounts_resource_inbound_transfers",
        "treasury_financial_accounts_resource_outbound_payments": "_spec3_sdk_766_treasury_financial_accounts_resource_outbound_payments",
        "treasury_financial_accounts_resource_outbound_transfers": "_spec3_sdk_767_treasury_financial_accounts_resource_outbound_transfers",
        "treasury_financial_accounts_resource_platform_restrictions": "_spec3_sdk_768_treasury_financial_accounts_resource_platform_restrictions",
        "treasury_financial_accounts_resource_status_details": "_spec3_sdk_769_treasury_financial_accounts_resource_status_details",
        "treasury_financial_accounts_resource_toggle_settings": "_spec3_sdk_770_treasury_financial_accounts_resource_toggle_settings",
        "treasury_financial_accounts_resource_toggles_setting_status_details": "_spec3_sdk_771_treasury_financial_accounts_resource_toggles_setting_status_details",
        "treasury_inbound_transfers_resource_failure_details": "_spec3_sdk_772_treasury_inbound_transfers_resource_failure_details",
        "treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows": "_spec3_sdk_773_treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows",
        "treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions": "_spec3_sdk_774_treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions",
        "treasury_outbound_payments_resource_outbound_payment_resource_end_user_details": "_spec3_sdk_775_treasury_outbound_payments_resource_outbound_payment_resource_end_user_details",
        "treasury_outbound_payments_resource_outbound_payment_resource_status_transitions": "_spec3_sdk_776_treasury_outbound_payments_resource_outbound_payment_resource_status_transitions",
        "treasury_outbound_payments_resource_returned_status": "_spec3_sdk_777_treasury_outbound_payments_resource_returned_status",
        "treasury_outbound_transfers_resource_returned_details": "_spec3_sdk_778_treasury_outbound_transfers_resource_returned_details",
        "treasury_outbound_transfers_resource_status_transitions": "_spec3_sdk_779_treasury_outbound_transfers_resource_status_transitions",
        "treasury_received_credits_resource_linked_flows": "_spec3_sdk_780_treasury_received_credits_resource_linked_flows",
        "treasury_received_credits_resource_reversal_details": "_spec3_sdk_781_treasury_received_credits_resource_reversal_details",
        "treasury_received_credits_resource_source_flows_details": "_spec3_sdk_782_treasury_received_credits_resource_source_flows_details",
        "treasury_received_credits_resource_status_transitions": "_spec3_sdk_783_treasury_received_credits_resource_status_transitions",
        "treasury_received_debits_resource_debit_reversal_linked_flows": "_spec3_sdk_784_treasury_received_debits_resource_debit_reversal_linked_flows",
        "treasury_received_debits_resource_linked_flows": "_spec3_sdk_785_treasury_received_debits_resource_linked_flows",
        "treasury_received_debits_resource_reversal_details": "_spec3_sdk_786_treasury_received_debits_resource_reversal_details",
        "treasury_received_debits_resource_status_transitions": "_spec3_sdk_787_treasury_received_debits_resource_status_transitions",
        "treasury_shared_resource_billing_details": "_spec3_sdk_788_treasury_shared_resource_billing_details",
        "treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details": "_spec3_sdk_789_treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details",
        "treasury_shared_resource_initiating_payment_method_details_us_bank_account": "_spec3_sdk_790_treasury_shared_resource_initiating_payment_method_details_us_bank_account",
        "treasury_transactions_resource_abstract_transaction_resource_status_transitions": "_spec3_sdk_791_treasury_transactions_resource_abstract_transaction_resource_status_transitions",
        "treasury_transactions_resource_balance_impact": "_spec3_sdk_792_treasury_transactions_resource_balance_impact",
        "treasury_transactions_resource_flow_details": "_spec3_sdk_793_treasury_transactions_resource_flow_details",
        "us_bank_account_networks": "_spec3_sdk_794_us_bank_account_networks",
        "usage_record": "_spec3_sdk_795_usage_record",
        "usage_record_summary": "_spec3_sdk_796_usage_record_summary",
        "verification_session_redaction": "_spec3_sdk_797_verification_session_redaction",
        "webhook_endpoint": "_spec3_sdk_798_webhook_endpoint",
    }

    types = {}
    types["account"] = t.struct(
        {
            "business_profile": t.proxy(renames["account_business_profile"]).optional(),
            "business_type": t.string().optional(),
            "capabilities": t.proxy(renames["account_capabilities"]).optional(),
            "charges_enabled": t.boolean().optional(),
            "company": t.proxy(renames["legal_entity_company"]).optional(),
            "controller": t.proxy(
                renames["account_unification_account_controller"]
            ).optional(),
            "country": t.string().optional(),
            "created": t.integer().optional(),
            "default_currency": t.string().optional(),
            "details_submitted": t.boolean().optional(),
            "email": t.string().optional(),
            "external_accounts": t.struct(
                {
                    "data": t.array(t.proxy(renames["external_account"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "future_requirements": t.proxy(
                renames["account_future_requirements"]
            ).optional(),
            "id": t.string(),
            "individual": t.proxy(renames["person"]).optional(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "payouts_enabled": t.boolean().optional(),
            "requirements": t.proxy(renames["account_requirements"]).optional(),
            "settings": t.proxy(renames["account_settings"]).optional(),
            "tos_acceptance": t.proxy(renames["account_tos_acceptance"]).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["account"])
    types["account_bacs_debit_payments_settings"] = t.struct(
        {"display_name": t.string().optional()}
    ).named(renames["account_bacs_debit_payments_settings"])
    types["account_branding_settings"] = t.struct(
        {
            "icon": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "logo": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "primary_color": t.string().optional(),
            "secondary_color": t.string().optional(),
        }
    ).named(renames["account_branding_settings"])
    types["account_business_profile"] = t.struct(
        {
            "mcc": t.string().optional(),
            "name": t.string().optional(),
            "product_description": t.string().optional(),
            "support_address": t.proxy(renames["address"]).optional(),
            "support_email": t.string().optional(),
            "support_phone": t.string().optional(),
            "support_url": t.string().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["account_business_profile"])
    types["account_capabilities"] = t.struct(
        {
            "acss_debit_payments": t.string().optional(),
            "affirm_payments": t.string().optional(),
            "afterpay_clearpay_payments": t.string().optional(),
            "au_becs_debit_payments": t.string().optional(),
            "bacs_debit_payments": t.string().optional(),
            "bancontact_payments": t.string().optional(),
            "bank_transfer_payments": t.string().optional(),
            "blik_payments": t.string().optional(),
            "boleto_payments": t.string().optional(),
            "card_issuing": t.string().optional(),
            "card_payments": t.string().optional(),
            "cartes_bancaires_payments": t.string().optional(),
            "cashapp_payments": t.string().optional(),
            "eps_payments": t.string().optional(),
            "fpx_payments": t.string().optional(),
            "giropay_payments": t.string().optional(),
            "grabpay_payments": t.string().optional(),
            "ideal_payments": t.string().optional(),
            "india_international_payments": t.string().optional(),
            "jcb_payments": t.string().optional(),
            "klarna_payments": t.string().optional(),
            "konbini_payments": t.string().optional(),
            "legacy_payments": t.string().optional(),
            "link_payments": t.string().optional(),
            "oxxo_payments": t.string().optional(),
            "p24_payments": t.string().optional(),
            "paynow_payments": t.string().optional(),
            "promptpay_payments": t.string().optional(),
            "sepa_debit_payments": t.string().optional(),
            "sofort_payments": t.string().optional(),
            "tax_reporting_us_1099_k": t.string().optional(),
            "tax_reporting_us_1099_misc": t.string().optional(),
            "transfers": t.string().optional(),
            "treasury": t.string().optional(),
            "us_bank_account_ach_payments": t.string().optional(),
        }
    ).named(renames["account_capabilities"])
    types["account_capability_future_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "current_deadline": t.integer().optional(),
            "currently_due": t.array(t.string()),
            "disabled_reason": t.string().optional(),
            "errors": t.array(t.proxy(renames["account_requirements_error"])),
            "eventually_due": t.array(t.string()),
            "past_due": t.array(t.string()),
            "pending_verification": t.array(t.string()),
        }
    ).named(renames["account_capability_future_requirements"])
    types["account_capability_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "current_deadline": t.integer().optional(),
            "currently_due": t.array(t.string()),
            "disabled_reason": t.string().optional(),
            "errors": t.array(t.proxy(renames["account_requirements_error"])),
            "eventually_due": t.array(t.string()),
            "past_due": t.array(t.string()),
            "pending_verification": t.array(t.string()),
        }
    ).named(renames["account_capability_requirements"])
    types["account_card_issuing_settings"] = t.struct(
        {
            "tos_acceptance": t.proxy(
                renames["card_issuing_account_terms_of_service"]
            ).optional()
        }
    ).named(renames["account_card_issuing_settings"])
    types["account_card_payments_settings"] = t.struct(
        {
            "decline_on": t.proxy(renames["account_decline_charge_on"]).optional(),
            "statement_descriptor_prefix": t.string().optional(),
            "statement_descriptor_prefix_kana": t.string().optional(),
            "statement_descriptor_prefix_kanji": t.string().optional(),
        }
    ).named(renames["account_card_payments_settings"])
    types["account_dashboard_settings"] = t.struct(
        {"display_name": t.string().optional(), "timezone": t.string().optional()}
    ).named(renames["account_dashboard_settings"])
    types["account_decline_charge_on"] = t.struct(
        {"avs_failure": t.boolean(), "cvc_failure": t.boolean()}
    ).named(renames["account_decline_charge_on"])
    types["account_future_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "current_deadline": t.integer().optional(),
            "currently_due": t.array(t.string()).optional(),
            "disabled_reason": t.string().optional(),
            "errors": t.array(
                t.proxy(renames["account_requirements_error"])
            ).optional(),
            "eventually_due": t.array(t.string()).optional(),
            "past_due": t.array(t.string()).optional(),
            "pending_verification": t.array(t.string()).optional(),
        }
    ).named(renames["account_future_requirements"])
    types["account_link"] = t.struct(
        {
            "created": t.integer(),
            "expires_at": t.integer(),
            "object": t.string(),
            "url": t.string(),
        }
    ).named(renames["account_link"])
    types["account_payments_settings"] = t.struct(
        {
            "statement_descriptor": t.string().optional(),
            "statement_descriptor_kana": t.string().optional(),
            "statement_descriptor_kanji": t.string().optional(),
            "statement_descriptor_prefix_kana": t.string().optional(),
            "statement_descriptor_prefix_kanji": t.string().optional(),
        }
    ).named(renames["account_payments_settings"])
    types["account_payout_settings"] = t.struct(
        {
            "debit_negative_balances": t.boolean(),
            "schedule": t.proxy(renames["transfer_schedule"]),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["account_payout_settings"])
    types["account_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "current_deadline": t.integer().optional(),
            "currently_due": t.array(t.string()).optional(),
            "disabled_reason": t.string().optional(),
            "errors": t.array(
                t.proxy(renames["account_requirements_error"])
            ).optional(),
            "eventually_due": t.array(t.string()).optional(),
            "past_due": t.array(t.string()).optional(),
            "pending_verification": t.array(t.string()).optional(),
        }
    ).named(renames["account_requirements"])
    types["account_requirements_alternative"] = t.struct(
        {
            "alternative_fields_due": t.array(t.string()),
            "original_fields_due": t.array(t.string()),
        }
    ).named(renames["account_requirements_alternative"])
    types["account_requirements_error"] = t.struct(
        {"code": t.string(), "reason": t.string(), "requirement": t.string()}
    ).named(renames["account_requirements_error"])
    types["account_sepa_debit_payments_settings"] = t.struct(
        {"creditor_id": t.string().optional()}
    ).named(renames["account_sepa_debit_payments_settings"])
    types["account_settings"] = t.struct(
        {
            "bacs_debit_payments": t.proxy(
                renames["account_bacs_debit_payments_settings"]
            ).optional(),
            "branding": t.proxy(renames["account_branding_settings"]),
            "card_issuing": t.proxy(
                renames["account_card_issuing_settings"]
            ).optional(),
            "card_payments": t.proxy(renames["account_card_payments_settings"]),
            "dashboard": t.proxy(renames["account_dashboard_settings"]),
            "payments": t.proxy(renames["account_payments_settings"]),
            "payouts": t.proxy(renames["account_payout_settings"]).optional(),
            "sepa_debit_payments": t.proxy(
                renames["account_sepa_debit_payments_settings"]
            ).optional(),
            "treasury": t.proxy(renames["account_treasury_settings"]).optional(),
        }
    ).named(renames["account_settings"])
    types["account_terms_of_service"] = t.struct(
        {
            "date": t.integer().optional(),
            "ip": t.string().optional(),
            "user_agent": t.string().optional(),
        }
    ).named(renames["account_terms_of_service"])
    types["account_tos_acceptance"] = t.struct(
        {
            "date": t.integer().optional(),
            "ip": t.string().optional(),
            "service_agreement": t.string().optional(),
            "user_agent": t.string().optional(),
        }
    ).named(renames["account_tos_acceptance"])
    types["account_treasury_settings"] = t.struct(
        {"tos_acceptance": t.proxy(renames["account_terms_of_service"]).optional()}
    ).named(renames["account_treasury_settings"])
    types["account_unification_account_controller"] = t.struct(
        {"is_controller": t.boolean().optional(), "type": t.string()}
    ).named(renames["account_unification_account_controller"])
    types["address"] = t.struct(
        {
            "city": t.string().optional(),
            "country": t.string().optional(),
            "line1": t.string().optional(),
            "line2": t.string().optional(),
            "postal_code": t.string().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["address"])
    types["alternate_statement_descriptors"] = t.struct(
        {"kana": t.string().optional(), "kanji": t.string().optional()}
    ).named(renames["alternate_statement_descriptors"])
    types["api_errors"] = t.struct(
        {
            "charge": t.string().optional(),
            "code": t.string().optional(),
            "decline_code": t.string().optional(),
            "doc_url": t.string().optional(),
            "message": t.string().optional(),
            "param": t.string().optional(),
            "payment_intent": t.proxy(renames["payment_intent"]).optional(),
            "payment_method": t.proxy(renames["payment_method"]).optional(),
            "payment_method_type": t.string().optional(),
            "request_log_url": t.string().optional(),
            "setup_intent": t.proxy(renames["setup_intent"]).optional(),
            "source": t.proxy(renames["payment_source"]).optional(),
            "type": t.string(),
        }
    ).named(renames["api_errors"])
    types["apple_pay_domain"] = t.struct(
        {
            "created": t.integer(),
            "domain_name": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
        }
    ).named(renames["apple_pay_domain"])
    types["application"] = t.struct(
        {"id": t.string(), "name": t.string().optional(), "object": t.string()}
    ).named(renames["application"])
    types["application_fee"] = t.struct(
        {
            "account": t.union([t.string(), t.proxy(renames["account"])]),
            "amount": t.integer(),
            "amount_refunded": t.integer(),
            "application": t.union([t.string(), t.proxy(renames["application"])]),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]),
            "created": t.integer(),
            "currency": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "originating_transaction": t.union(
                [t.string(), t.proxy(renames["charge"])]
            ).optional(),
            "refunded": t.boolean(),
            "refunds": t.struct(
                {
                    "data": t.array(t.proxy(renames["fee_refund"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
        }
    ).named(renames["application_fee"])
    types["apps.secret"] = t.struct(
        {
            "created": t.integer(),
            "deleted": t.boolean().optional(),
            "expires_at": t.integer().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "name": t.string(),
            "object": t.string(),
            "payload": t.string().optional(),
            "scope": t.proxy(renames["secret_service_resource_scope"]),
        }
    ).named(renames["apps.secret"])
    types["automatic_tax"] = t.struct(
        {"enabled": t.boolean(), "status": t.string().optional()}
    ).named(renames["automatic_tax"])
    types["balance"] = t.struct(
        {
            "available": t.array(t.proxy(renames["balance_amount"])),
            "connect_reserved": t.array(t.proxy(renames["balance_amount"])).optional(),
            "instant_available": t.array(t.proxy(renames["balance_amount"])).optional(),
            "issuing": t.proxy(renames["balance_detail"]).optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "pending": t.array(t.proxy(renames["balance_amount"])),
        }
    ).named(renames["balance"])
    types["balance_amount"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "source_types": t.proxy(
                renames["balance_amount_by_source_type"]
            ).optional(),
        }
    ).named(renames["balance_amount"])
    types["balance_amount_by_source_type"] = t.struct(
        {
            "bank_account": t.integer().optional(),
            "card": t.integer().optional(),
            "fpx": t.integer().optional(),
        }
    ).named(renames["balance_amount_by_source_type"])
    types["balance_detail"] = t.struct(
        {"available": t.array(t.proxy(renames["balance_amount"]))}
    ).named(renames["balance_detail"])
    types["balance_transaction"] = t.struct(
        {
            "amount": t.integer(),
            "available_on": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "exchange_rate": t.number().optional(),
            "fee": t.integer(),
            "fee_details": t.array(t.proxy(renames["fee"])),
            "id": t.string(),
            "net": t.integer(),
            "object": t.string(),
            "reporting_category": t.string(),
            "source": t.union(
                [t.string(), t.proxy(renames["balance_transaction_source"])]
            ).optional(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["balance_transaction"])
    types["balance_transaction_source"] = t.union(
        [
            t.proxy(renames["application_fee"]),
            t.proxy(renames["charge"]),
            t.proxy(renames["connect_collection_transfer"]),
            t.proxy(renames["dispute"]),
            t.proxy(renames["fee_refund"]),
            t.proxy(renames["issuing.authorization"]),
            t.proxy(renames["issuing.dispute"]),
            t.proxy(renames["issuing.transaction"]),
            t.proxy(renames["payout"]),
            t.proxy(renames["platform_tax_fee"]),
            t.proxy(renames["refund"]),
            t.proxy(renames["reserve_transaction"]),
            t.proxy(renames["tax_deducted_at_source"]),
            t.proxy(renames["topup"]),
            t.proxy(renames["transfer"]),
            t.proxy(renames["transfer_reversal"]),
        ]
    ).named(renames["balance_transaction_source"])
    types["bank_account"] = t.struct(
        {
            "account": t.union([t.string(), t.proxy(renames["account"])]).optional(),
            "account_holder_name": t.string().optional(),
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "available_payout_methods": t.array(t.string()).optional(),
            "bank_name": t.string().optional(),
            "country": t.string(),
            "currency": t.string(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "default_for_currency": t.boolean().optional(),
            "fingerprint": t.string().optional(),
            "future_requirements": t.proxy(
                renames["external_account_requirements"]
            ).optional(),
            "id": t.string(),
            "last4": t.string(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "requirements": t.proxy(
                renames["external_account_requirements"]
            ).optional(),
            "routing_number": t.string().optional(),
            "status": t.string(),
        }
    ).named(renames["bank_account"])
    types["bank_connections_resource_accountholder"] = t.struct(
        {
            "account": t.union([t.string(), t.proxy(renames["account"])]).optional(),
            "customer": t.union([t.string(), t.proxy(renames["customer"])]).optional(),
            "type": t.string(),
        }
    ).named(renames["bank_connections_resource_accountholder"])
    types["bank_connections_resource_balance"] = t.struct(
        {
            "as_of": t.integer(),
            "cash": t.proxy(
                renames["bank_connections_resource_balance_api_resource_cash_balance"]
            ).optional(),
            "credit": t.proxy(
                renames["bank_connections_resource_balance_api_resource_credit_balance"]
            ).optional(),
            "current": t.struct({}),
            "type": t.string(),
        }
    ).named(renames["bank_connections_resource_balance"])
    types["bank_connections_resource_balance_api_resource_cash_balance"] = t.struct(
        {"available": t.struct({}).optional()}
    ).named(renames["bank_connections_resource_balance_api_resource_cash_balance"])
    types["bank_connections_resource_balance_api_resource_credit_balance"] = t.struct(
        {"used": t.struct({}).optional()}
    ).named(renames["bank_connections_resource_balance_api_resource_credit_balance"])
    types["bank_connections_resource_balance_refresh"] = t.struct(
        {"last_attempted_at": t.integer(), "status": t.string()}
    ).named(renames["bank_connections_resource_balance_refresh"])
    types["bank_connections_resource_link_account_session_filters"] = t.struct(
        {"countries": t.array(t.string()).optional()}
    ).named(renames["bank_connections_resource_link_account_session_filters"])
    types["bank_connections_resource_ownership_refresh"] = t.struct(
        {"last_attempted_at": t.integer(), "status": t.string()}
    ).named(renames["bank_connections_resource_ownership_refresh"])
    types["billing_details"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "phone": t.string().optional(),
        }
    ).named(renames["billing_details"])
    types["billing_portal.configuration"] = t.struct(
        {
            "active": t.boolean(),
            "application": t.union(
                [
                    t.string(),
                    t.proxy(renames["application"]),
                    t.proxy(renames["deleted_application"]),
                ]
            ).optional(),
            "business_profile": t.proxy(renames["portal_business_profile"]),
            "created": t.integer(),
            "default_return_url": t.string().optional(),
            "features": t.proxy(renames["portal_features"]),
            "id": t.string(),
            "is_default": t.boolean(),
            "livemode": t.boolean(),
            "login_page": t.proxy(renames["portal_login_page"]),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "updated": t.integer(),
        }
    ).named(renames["billing_portal.configuration"])
    types["billing_portal.session"] = t.struct(
        {
            "configuration": t.union(
                [t.string(), t.proxy(renames["billing_portal.configuration"])]
            ),
            "created": t.integer(),
            "customer": t.string(),
            "flow": t.proxy(renames["portal_flows_flow"]).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "locale": t.string().optional(),
            "object": t.string(),
            "on_behalf_of": t.string().optional(),
            "return_url": t.string().optional(),
            "url": t.string(),
        }
    ).named(renames["billing_portal.session"])
    types["cancellation_details"] = t.struct(
        {
            "comment": t.string().optional(),
            "feedback": t.string().optional(),
            "reason": t.string().optional(),
        }
    ).named(renames["cancellation_details"])
    types["capability"] = t.struct(
        {
            "account": t.union([t.string(), t.proxy(renames["account"])]),
            "future_requirements": t.proxy(
                renames["account_capability_future_requirements"]
            ).optional(),
            "id": t.string(),
            "object": t.string(),
            "requested": t.boolean(),
            "requested_at": t.integer().optional(),
            "requirements": t.proxy(
                renames["account_capability_requirements"]
            ).optional(),
            "status": t.string(),
        }
    ).named(renames["capability"])
    types["card"] = t.struct(
        {
            "account": t.union([t.string(), t.proxy(renames["account"])]).optional(),
            "address_city": t.string().optional(),
            "address_country": t.string().optional(),
            "address_line1": t.string().optional(),
            "address_line1_check": t.string().optional(),
            "address_line2": t.string().optional(),
            "address_state": t.string().optional(),
            "address_zip": t.string().optional(),
            "address_zip_check": t.string().optional(),
            "available_payout_methods": t.array(t.string()).optional(),
            "brand": t.string(),
            "country": t.string().optional(),
            "currency": t.string().optional(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "cvc_check": t.string().optional(),
            "default_for_currency": t.boolean().optional(),
            "description": t.string().optional(),
            "dynamic_last4": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string(),
            "id": t.string(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string(),
            "metadata": t.struct({}).optional(),
            "name": t.string().optional(),
            "object": t.string(),
            "status": t.string().optional(),
            "tokenization_method": t.string().optional(),
        }
    ).named(renames["card"])
    types["card_issuing_account_terms_of_service"] = t.struct(
        {
            "date": t.integer().optional(),
            "ip": t.string().optional(),
            "user_agent": t.string().optional(),
        }
    ).named(renames["card_issuing_account_terms_of_service"])
    types["card_mandate_payment_method_details"] = t.struct({}).named(
        renames["card_mandate_payment_method_details"]
    )
    types["cash_balance"] = t.struct(
        {
            "available": t.struct({}).optional(),
            "customer": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "settings": t.proxy(renames["customer_balance_customer_balance_settings"]),
        }
    ).named(renames["cash_balance"])
    types["charge"] = t.struct(
        {
            "alternate_statement_descriptors": t.proxy(
                renames["alternate_statement_descriptors"]
            ).optional(),
            "amount": t.integer(),
            "amount_captured": t.integer(),
            "amount_refunded": t.integer(),
            "application": t.union(
                [t.string(), t.proxy(renames["application"])]
            ).optional(),
            "application_fee": t.union(
                [t.string(), t.proxy(renames["application_fee"])]
            ).optional(),
            "application_fee_amount": t.integer().optional(),
            "authorization_code": t.string().optional(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "billing_details": t.proxy(renames["billing_details"]),
            "calculated_statement_descriptor": t.string().optional(),
            "captured": t.boolean(),
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "description": t.string().optional(),
            "destination": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "dispute": t.union([t.string(), t.proxy(renames["dispute"])]).optional(),
            "disputed": t.boolean(),
            "failure_balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "failure_code": t.string().optional(),
            "failure_message": t.string().optional(),
            "fraud_details": t.proxy(renames["charge_fraud_details"]).optional(),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]).optional(),
            "level3": t.proxy(renames["level3"]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "outcome": t.proxy(renames["charge_outcome"]).optional(),
            "paid": t.boolean(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "payment_method": t.string().optional(),
            "payment_method_details": t.proxy(
                renames["payment_method_details"]
            ).optional(),
            "radar_options": t.proxy(renames["radar_radar_options"]).optional(),
            "receipt_email": t.string().optional(),
            "receipt_number": t.string().optional(),
            "receipt_url": t.string().optional(),
            "refunded": t.boolean(),
            "refunds": t.struct(
                {
                    "data": t.array(t.proxy(renames["refund"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "review": t.union([t.string(), t.proxy(renames["review"])]).optional(),
            "shipping": t.proxy(renames["shipping"]).optional(),
            "source": t.proxy(renames["payment_source"]).optional(),
            "source_transfer": t.union(
                [t.string(), t.proxy(renames["transfer"])]
            ).optional(),
            "statement_descriptor": t.string().optional(),
            "statement_descriptor_suffix": t.string().optional(),
            "status": t.string(),
            "transfer": t.union([t.string(), t.proxy(renames["transfer"])]).optional(),
            "transfer_data": t.proxy(renames["charge_transfer_data"]).optional(),
            "transfer_group": t.string().optional(),
        }
    ).named(renames["charge"])
    types["charge_fraud_details"] = t.struct(
        {"stripe_report": t.string().optional(), "user_report": t.string().optional()}
    ).named(renames["charge_fraud_details"])
    types["charge_outcome"] = t.struct(
        {
            "network_status": t.string().optional(),
            "reason": t.string().optional(),
            "risk_level": t.string().optional(),
            "risk_score": t.integer().optional(),
            "rule": t.union([t.string(), t.proxy(renames["rule"])]).optional(),
            "seller_message": t.string().optional(),
            "type": t.string(),
        }
    ).named(renames["charge_outcome"])
    types["charge_transfer_data"] = t.struct(
        {
            "amount": t.integer().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["charge_transfer_data"])
    types["checkout.session"] = t.struct(
        {
            "after_expiration": t.proxy(
                renames["payment_pages_checkout_session_after_expiration"]
            ).optional(),
            "allow_promotion_codes": t.boolean().optional(),
            "amount_subtotal": t.integer().optional(),
            "amount_total": t.integer().optional(),
            "automatic_tax": t.proxy(
                renames["payment_pages_checkout_session_automatic_tax"]
            ),
            "billing_address_collection": t.string().optional(),
            "cancel_url": t.string().optional(),
            "client_reference_id": t.string().optional(),
            "consent": t.proxy(
                renames["payment_pages_checkout_session_consent"]
            ).optional(),
            "consent_collection": t.proxy(
                renames["payment_pages_checkout_session_consent_collection"]
            ).optional(),
            "created": t.integer(),
            "currency": t.string().optional(),
            "currency_conversion": t.proxy(
                renames["payment_pages_checkout_session_currency_conversion"]
            ).optional(),
            "custom_fields": t.array(
                t.proxy(renames["payment_pages_checkout_session_custom_fields"])
            ),
            "custom_text": t.proxy(
                renames["payment_pages_checkout_session_custom_text"]
            ),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "customer_creation": t.string().optional(),
            "customer_details": t.proxy(
                renames["payment_pages_checkout_session_customer_details"]
            ).optional(),
            "customer_email": t.string().optional(),
            "expires_at": t.integer(),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]).optional(),
            "invoice_creation": t.proxy(
                renames["payment_pages_checkout_session_invoice_creation"]
            ).optional(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "livemode": t.boolean(),
            "locale": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "mode": t.string(),
            "object": t.string(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "payment_link": t.union(
                [t.string(), t.proxy(renames["payment_link"])]
            ).optional(),
            "payment_method_collection": t.string().optional(),
            "payment_method_options": t.proxy(
                renames["checkout_session_payment_method_options"]
            ).optional(),
            "payment_method_types": t.array(t.string()),
            "payment_status": t.string(),
            "phone_number_collection": t.proxy(
                renames["payment_pages_checkout_session_phone_number_collection"]
            ).optional(),
            "recovered_from": t.string().optional(),
            "setup_intent": t.union(
                [t.string(), t.proxy(renames["setup_intent"])]
            ).optional(),
            "shipping_address_collection": t.proxy(
                renames["payment_pages_checkout_session_shipping_address_collection"]
            ).optional(),
            "shipping_cost": t.proxy(
                renames["payment_pages_checkout_session_shipping_cost"]
            ).optional(),
            "shipping_details": t.proxy(renames["shipping"]).optional(),
            "shipping_options": t.array(
                t.proxy(renames["payment_pages_checkout_session_shipping_option"])
            ),
            "status": t.string().optional(),
            "submit_type": t.string().optional(),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "success_url": t.string(),
            "tax_id_collection": t.proxy(
                renames["payment_pages_checkout_session_tax_id_collection"]
            ).optional(),
            "total_details": t.proxy(
                renames["payment_pages_checkout_session_total_details"]
            ).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["checkout.session"])
    types["checkout_acss_debit_mandate_options"] = t.struct(
        {
            "custom_mandate_url": t.string().optional(),
            "default_for": t.array(t.string()).optional(),
            "interval_description": t.string().optional(),
            "payment_schedule": t.string().optional(),
            "transaction_type": t.string().optional(),
        }
    ).named(renames["checkout_acss_debit_mandate_options"])
    types["checkout_acss_debit_payment_method_options"] = t.struct(
        {
            "currency": t.string().optional(),
            "mandate_options": t.proxy(
                renames["checkout_acss_debit_mandate_options"]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["checkout_acss_debit_payment_method_options"])
    types["checkout_affirm_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_affirm_payment_method_options"])
    types["checkout_afterpay_clearpay_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_afterpay_clearpay_payment_method_options"])
    types["checkout_alipay_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_alipay_payment_method_options"])
    types["checkout_au_becs_debit_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_au_becs_debit_payment_method_options"])
    types["checkout_bacs_debit_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_bacs_debit_payment_method_options"])
    types["checkout_bancontact_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_bancontact_payment_method_options"])
    types["checkout_boleto_payment_method_options"] = t.struct(
        {"expires_after_days": t.integer(), "setup_future_usage": t.string().optional()}
    ).named(renames["checkout_boleto_payment_method_options"])
    types["checkout_card_installments_options"] = t.struct(
        {"enabled": t.boolean().optional()}
    ).named(renames["checkout_card_installments_options"])
    types["checkout_card_payment_method_options"] = t.struct(
        {
            "installments": t.proxy(
                renames["checkout_card_installments_options"]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "statement_descriptor_suffix_kana": t.string().optional(),
            "statement_descriptor_suffix_kanji": t.string().optional(),
        }
    ).named(renames["checkout_card_payment_method_options"])
    types["checkout_cashapp_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_cashapp_payment_method_options"])
    types["checkout_customer_balance_bank_transfer_payment_method_options"] = t.struct(
        {
            "eu_bank_transfer": t.proxy(
                renames["payment_method_options_customer_balance_eu_bank_account"]
            ).optional(),
            "requested_address_types": t.array(t.string()).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["checkout_customer_balance_bank_transfer_payment_method_options"])
    types["checkout_customer_balance_payment_method_options"] = t.struct(
        {
            "bank_transfer": t.proxy(
                renames[
                    "checkout_customer_balance_bank_transfer_payment_method_options"
                ]
            ).optional(),
            "funding_type": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["checkout_customer_balance_payment_method_options"])
    types["checkout_eps_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_eps_payment_method_options"])
    types["checkout_fpx_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_fpx_payment_method_options"])
    types["checkout_giropay_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_giropay_payment_method_options"])
    types["checkout_grab_pay_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_grab_pay_payment_method_options"])
    types["checkout_ideal_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_ideal_payment_method_options"])
    types["checkout_klarna_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_klarna_payment_method_options"])
    types["checkout_konbini_payment_method_options"] = t.struct(
        {
            "expires_after_days": t.integer().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["checkout_konbini_payment_method_options"])
    types["checkout_link_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_link_payment_method_options"])
    types["checkout_oxxo_payment_method_options"] = t.struct(
        {"expires_after_days": t.integer(), "setup_future_usage": t.string().optional()}
    ).named(renames["checkout_oxxo_payment_method_options"])
    types["checkout_p24_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_p24_payment_method_options"])
    types["checkout_paynow_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_paynow_payment_method_options"])
    types["checkout_pix_payment_method_options"] = t.struct(
        {"expires_after_seconds": t.integer().optional()}
    ).named(renames["checkout_pix_payment_method_options"])
    types["checkout_sepa_debit_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_sepa_debit_payment_method_options"])
    types["checkout_session_payment_method_options"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["checkout_acss_debit_payment_method_options"]
            ).optional(),
            "affirm": t.proxy(
                renames["checkout_affirm_payment_method_options"]
            ).optional(),
            "afterpay_clearpay": t.proxy(
                renames["checkout_afterpay_clearpay_payment_method_options"]
            ).optional(),
            "alipay": t.proxy(
                renames["checkout_alipay_payment_method_options"]
            ).optional(),
            "au_becs_debit": t.proxy(
                renames["checkout_au_becs_debit_payment_method_options"]
            ).optional(),
            "bacs_debit": t.proxy(
                renames["checkout_bacs_debit_payment_method_options"]
            ).optional(),
            "bancontact": t.proxy(
                renames["checkout_bancontact_payment_method_options"]
            ).optional(),
            "boleto": t.proxy(
                renames["checkout_boleto_payment_method_options"]
            ).optional(),
            "card": t.proxy(renames["checkout_card_payment_method_options"]).optional(),
            "cashapp": t.proxy(
                renames["checkout_cashapp_payment_method_options"]
            ).optional(),
            "customer_balance": t.proxy(
                renames["checkout_customer_balance_payment_method_options"]
            ).optional(),
            "eps": t.proxy(renames["checkout_eps_payment_method_options"]).optional(),
            "fpx": t.proxy(renames["checkout_fpx_payment_method_options"]).optional(),
            "giropay": t.proxy(
                renames["checkout_giropay_payment_method_options"]
            ).optional(),
            "grabpay": t.proxy(
                renames["checkout_grab_pay_payment_method_options"]
            ).optional(),
            "ideal": t.proxy(
                renames["checkout_ideal_payment_method_options"]
            ).optional(),
            "klarna": t.proxy(
                renames["checkout_klarna_payment_method_options"]
            ).optional(),
            "konbini": t.proxy(
                renames["checkout_konbini_payment_method_options"]
            ).optional(),
            "link": t.proxy(renames["checkout_link_payment_method_options"]).optional(),
            "oxxo": t.proxy(renames["checkout_oxxo_payment_method_options"]).optional(),
            "p24": t.proxy(renames["checkout_p24_payment_method_options"]).optional(),
            "paynow": t.proxy(
                renames["checkout_paynow_payment_method_options"]
            ).optional(),
            "pix": t.proxy(renames["checkout_pix_payment_method_options"]).optional(),
            "sepa_debit": t.proxy(
                renames["checkout_sepa_debit_payment_method_options"]
            ).optional(),
            "sofort": t.proxy(
                renames["checkout_sofort_payment_method_options"]
            ).optional(),
            "us_bank_account": t.proxy(
                renames["checkout_us_bank_account_payment_method_options"]
            ).optional(),
        }
    ).named(renames["checkout_session_payment_method_options"])
    types["checkout_sofort_payment_method_options"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["checkout_sofort_payment_method_options"])
    types["checkout_us_bank_account_payment_method_options"] = t.struct(
        {
            "financial_connections": t.proxy(
                renames["linked_account_options_us_bank_account"]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["checkout_us_bank_account_payment_method_options"])
    types["connect_collection_transfer"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
        }
    ).named(renames["connect_collection_transfer"])
    types["country_spec"] = t.struct(
        {
            "default_currency": t.string(),
            "id": t.string(),
            "object": t.string(),
            "supported_bank_account_currencies": t.struct({}),
            "supported_payment_currencies": t.array(t.string()),
            "supported_payment_methods": t.array(t.string()),
            "supported_transfer_countries": t.array(t.string()),
            "verification_fields": t.proxy(renames["country_spec_verification_fields"]),
        }
    ).named(renames["country_spec"])
    types["country_spec_verification_field_details"] = t.struct(
        {"additional": t.array(t.string()), "minimum": t.array(t.string())}
    ).named(renames["country_spec_verification_field_details"])
    types["country_spec_verification_fields"] = t.struct(
        {
            "company": t.proxy(renames["country_spec_verification_field_details"]),
            "individual": t.proxy(renames["country_spec_verification_field_details"]),
        }
    ).named(renames["country_spec_verification_fields"])
    types["coupon"] = t.struct(
        {
            "amount_off": t.integer().optional(),
            "applies_to": t.proxy(renames["coupon_applies_to"]).optional(),
            "created": t.integer(),
            "currency": t.string().optional(),
            "currency_options": t.struct({}).optional(),
            "duration": t.string(),
            "duration_in_months": t.integer().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "max_redemptions": t.integer().optional(),
            "metadata": t.struct({}).optional(),
            "name": t.string().optional(),
            "object": t.string(),
            "percent_off": t.number().optional(),
            "redeem_by": t.integer().optional(),
            "times_redeemed": t.integer(),
            "valid": t.boolean(),
        }
    ).named(renames["coupon"])
    types["coupon_applies_to"] = t.struct({"products": t.array(t.string())}).named(
        renames["coupon_applies_to"]
    )
    types["coupon_currency_option"] = t.struct({"amount_off": t.integer()}).named(
        renames["coupon_currency_option"]
    )
    types["credit_note"] = t.struct(
        {
            "amount": t.integer(),
            "amount_shipping": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ),
            "customer_balance_transaction": t.union(
                [t.string(), t.proxy(renames["customer_balance_transaction"])]
            ).optional(),
            "discount_amount": t.integer(),
            "discount_amounts": t.array(
                t.proxy(renames["discounts_resource_discount_amount"])
            ),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]),
            "lines": t.struct(
                {
                    "data": t.array(t.proxy(renames["credit_note_line_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "livemode": t.boolean(),
            "memo": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "number": t.string(),
            "object": t.string(),
            "out_of_band_amount": t.integer().optional(),
            "pdf": t.string(),
            "reason": t.string().optional(),
            "refund": t.union([t.string(), t.proxy(renames["refund"])]).optional(),
            "shipping_cost": t.proxy(renames["invoices_shipping_cost"]).optional(),
            "status": t.string(),
            "subtotal": t.integer(),
            "subtotal_excluding_tax": t.integer().optional(),
            "tax_amounts": t.array(t.proxy(renames["credit_note_tax_amount"])),
            "total": t.integer(),
            "total_excluding_tax": t.integer().optional(),
            "type": t.string(),
            "voided_at": t.integer().optional(),
        }
    ).named(renames["credit_note"])
    types["credit_note_line_item"] = t.struct(
        {
            "amount": t.integer(),
            "amount_excluding_tax": t.integer().optional(),
            "description": t.string().optional(),
            "discount_amount": t.integer(),
            "discount_amounts": t.array(
                t.proxy(renames["discounts_resource_discount_amount"])
            ),
            "id": t.string(),
            "invoice_line_item": t.string().optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "quantity": t.integer().optional(),
            "tax_amounts": t.array(t.proxy(renames["credit_note_tax_amount"])),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])),
            "type": t.string(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
            "unit_amount_excluding_tax": t.string().optional(),
        }
    ).named(renames["credit_note_line_item"])
    types["credit_note_tax_amount"] = t.struct(
        {
            "amount": t.integer(),
            "inclusive": t.boolean(),
            "tax_rate": t.union([t.string(), t.proxy(renames["tax_rate"])]),
            "taxability_reason": t.string().optional(),
            "taxable_amount": t.integer().optional(),
        }
    ).named(renames["credit_note_tax_amount"])
    types["currency_option"] = t.struct(
        {
            "custom_unit_amount": t.proxy(renames["custom_unit_amount"]).optional(),
            "tax_behavior": t.string().optional(),
            "tiers": t.array(t.proxy(renames["price_tier"])).optional(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
        }
    ).named(renames["currency_option"])
    types["custom_unit_amount"] = t.struct(
        {
            "maximum": t.integer().optional(),
            "minimum": t.integer().optional(),
            "preset": t.integer().optional(),
        }
    ).named(renames["custom_unit_amount"])
    types["customer"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "balance": t.integer().optional(),
            "cash_balance": t.proxy(renames["cash_balance"]).optional(),
            "created": t.integer(),
            "currency": t.string().optional(),
            "default_source": t.union(
                [t.string(), t.proxy(renames["payment_source"])]
            ).optional(),
            "delinquent": t.boolean().optional(),
            "description": t.string().optional(),
            "discount": t.proxy(renames["discount"]).optional(),
            "email": t.string().optional(),
            "id": t.string(),
            "invoice_credit_balance": t.struct({}).optional(),
            "invoice_prefix": t.string().optional(),
            "invoice_settings": t.proxy(
                renames["invoice_setting_customer_setting"]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "name": t.string().optional(),
            "next_invoice_sequence": t.integer().optional(),
            "object": t.string(),
            "phone": t.string().optional(),
            "preferred_locales": t.array(t.string()).optional(),
            "shipping": t.proxy(renames["shipping"]).optional(),
            "sources": t.struct(
                {
                    "data": t.array(t.proxy(renames["payment_source"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "subscriptions": t.struct(
                {
                    "data": t.array(t.proxy(renames["subscription"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "tax": t.proxy(renames["customer_tax"]).optional(),
            "tax_exempt": t.string().optional(),
            "tax_ids": t.struct(
                {
                    "data": t.array(t.proxy(renames["tax_id"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
        }
    ).named(renames["customer"])
    types["customer_acceptance"] = t.struct(
        {
            "accepted_at": t.integer().optional(),
            "offline": t.proxy(renames["offline_acceptance"]).optional(),
            "online": t.proxy(renames["online_acceptance"]).optional(),
            "type": t.string(),
        }
    ).named(renames["customer_acceptance"])
    types["customer_balance_customer_balance_settings"] = t.struct(
        {"reconciliation_mode": t.string(), "using_merchant_default": t.boolean()}
    ).named(renames["customer_balance_customer_balance_settings"])
    types[
        "customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"
    ] = t.struct(
        {"payment_intent": t.union([t.string(), t.proxy(renames["payment_intent"])])}
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction"
    ] = t.struct(
        {
            "bank_transfer": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer"
                ]
            )
        }
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_funded_transaction"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer"
    ] = t.struct(
        {
            "eu_bank_transfer": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"
                ]
            ).optional(),
            "gb_bank_transfer": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"
                ]
            ).optional(),
            "jp_bank_transfer": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"
                ]
            ).optional(),
            "reference": t.string().optional(),
            "type": t.string(),
        }
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"
    ] = t.struct(
        {
            "bic": t.string().optional(),
            "iban_last4": t.string().optional(),
            "sender_name": t.string().optional(),
        }
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"
    ] = t.struct(
        {
            "account_number_last4": t.string().optional(),
            "sender_name": t.string().optional(),
            "sort_code": t.string().optional(),
        }
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"
    ] = t.struct(
        {
            "sender_bank": t.string().optional(),
            "sender_branch": t.string().optional(),
            "sender_name": t.string().optional(),
        }
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"
    ] = t.struct({"refund": t.union([t.string(), t.proxy(renames["refund"])])}).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"
        ]
    )
    types[
        "customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"
    ] = t.struct(
        {"payment_intent": t.union([t.string(), t.proxy(renames["payment_intent"])])}
    ).named(
        renames[
            "customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"
        ]
    )
    types["customer_balance_transaction"] = t.struct(
        {
            "amount": t.integer(),
            "created": t.integer(),
            "credit_note": t.union(
                [t.string(), t.proxy(renames["credit_note"])]
            ).optional(),
            "currency": t.string(),
            "customer": t.union([t.string(), t.proxy(renames["customer"])]),
            "description": t.string().optional(),
            "ending_balance": t.integer(),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "type": t.string(),
        }
    ).named(renames["customer_balance_transaction"])
    types["customer_cash_balance_transaction"] = t.struct(
        {
            "applied_to_payment": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"
                ]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.union([t.string(), t.proxy(renames["customer"])]),
            "ending_balance": t.integer(),
            "funded": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_funded_transaction"
                ]
            ).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "net_amount": t.integer(),
            "object": t.string(),
            "refunded_from_payment": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"
                ]
            ).optional(),
            "type": t.string(),
            "unapplied_from_payment": t.proxy(
                renames[
                    "customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"
                ]
            ).optional(),
        }
    ).named(renames["customer_cash_balance_transaction"])
    types["customer_tax"] = t.struct(
        {
            "automatic_tax": t.string(),
            "ip_address": t.string().optional(),
            "location": t.proxy(renames["customer_tax_location"]).optional(),
        }
    ).named(renames["customer_tax"])
    types["customer_tax_location"] = t.struct(
        {"country": t.string(), "source": t.string(), "state": t.string().optional()}
    ).named(renames["customer_tax_location"])
    types["deleted_account"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_account"])
    types["deleted_apple_pay_domain"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_apple_pay_domain"])
    types["deleted_application"] = t.struct(
        {
            "deleted": t.boolean(),
            "id": t.string(),
            "name": t.string().optional(),
            "object": t.string(),
        }
    ).named(renames["deleted_application"])
    types["deleted_bank_account"] = t.struct(
        {
            "currency": t.string().optional(),
            "deleted": t.boolean(),
            "id": t.string(),
            "object": t.string(),
        }
    ).named(renames["deleted_bank_account"])
    types["deleted_card"] = t.struct(
        {
            "currency": t.string().optional(),
            "deleted": t.boolean(),
            "id": t.string(),
            "object": t.string(),
        }
    ).named(renames["deleted_card"])
    types["deleted_coupon"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_coupon"])
    types["deleted_customer"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_customer"])
    types["deleted_discount"] = t.struct(
        {
            "checkout_session": t.string().optional(),
            "coupon": t.proxy(renames["coupon"]),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "deleted": t.boolean(),
            "id": t.string(),
            "invoice": t.string().optional(),
            "invoice_item": t.string().optional(),
            "object": t.string(),
            "promotion_code": t.union(
                [t.string(), t.proxy(renames["promotion_code"])]
            ).optional(),
            "start": t.integer(),
            "subscription": t.string().optional(),
        }
    ).named(renames["deleted_discount"])
    types["deleted_external_account"] = t.union(
        [t.proxy(renames["deleted_bank_account"]), t.proxy(renames["deleted_card"])]
    ).named(renames["deleted_external_account"])
    types["deleted_invoice"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_invoice"])
    types["deleted_invoiceitem"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_invoiceitem"])
    types["deleted_payment_source"] = t.union(
        [t.proxy(renames["deleted_bank_account"]), t.proxy(renames["deleted_card"])]
    ).named(renames["deleted_payment_source"])
    types["deleted_person"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_person"])
    types["deleted_plan"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_plan"])
    types["deleted_price"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_price"])
    types["deleted_product"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_product"])
    types["deleted_radar.value_list"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_radar.value_list"])
    types["deleted_radar.value_list_item"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_radar.value_list_item"])
    types["deleted_subscription_item"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_subscription_item"])
    types["deleted_tax_id"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_tax_id"])
    types["deleted_terminal.configuration"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_terminal.configuration"])
    types["deleted_terminal.location"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_terminal.location"])
    types["deleted_terminal.reader"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_terminal.reader"])
    types["deleted_test_helpers.test_clock"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_test_helpers.test_clock"])
    types["deleted_webhook_endpoint"] = t.struct(
        {"deleted": t.boolean(), "id": t.string(), "object": t.string()}
    ).named(renames["deleted_webhook_endpoint"])
    types["discount"] = t.struct(
        {
            "checkout_session": t.string().optional(),
            "coupon": t.proxy(renames["coupon"]),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "end": t.integer().optional(),
            "id": t.string(),
            "invoice": t.string().optional(),
            "invoice_item": t.string().optional(),
            "object": t.string(),
            "promotion_code": t.union(
                [t.string(), t.proxy(renames["promotion_code"])]
            ).optional(),
            "start": t.integer(),
            "subscription": t.string().optional(),
        }
    ).named(renames["discount"])
    types["discounts_resource_discount_amount"] = t.struct(
        {
            "amount": t.integer(),
            "discount": t.union(
                [
                    t.string(),
                    t.proxy(renames["discount"]),
                    t.proxy(renames["deleted_discount"]),
                ]
            ),
        }
    ).named(renames["discounts_resource_discount_amount"])
    types["dispute"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transactions": t.array(t.proxy(renames["balance_transaction"])),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]),
            "created": t.integer(),
            "currency": t.string(),
            "evidence": t.proxy(renames["dispute_evidence"]),
            "evidence_details": t.proxy(renames["dispute_evidence_details"]),
            "id": t.string(),
            "is_charge_refundable": t.boolean(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "network_reason_code": t.string().optional(),
            "object": t.string(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "reason": t.string(),
            "status": t.string(),
        }
    ).named(renames["dispute"])
    types["dispute_evidence"] = t.struct(
        {
            "access_activity_log": t.string().optional(),
            "billing_address": t.string().optional(),
            "cancellation_policy": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "cancellation_policy_disclosure": t.string().optional(),
            "cancellation_rebuttal": t.string().optional(),
            "customer_communication": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "customer_email_address": t.string().optional(),
            "customer_name": t.string().optional(),
            "customer_purchase_ip": t.string().optional(),
            "customer_signature": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "duplicate_charge_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "duplicate_charge_explanation": t.string().optional(),
            "duplicate_charge_id": t.string().optional(),
            "product_description": t.string().optional(),
            "receipt": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "refund_policy": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "refund_policy_disclosure": t.string().optional(),
            "refund_refusal_explanation": t.string().optional(),
            "service_date": t.string().optional(),
            "service_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "shipping_address": t.string().optional(),
            "shipping_carrier": t.string().optional(),
            "shipping_date": t.string().optional(),
            "shipping_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "shipping_tracking_number": t.string().optional(),
            "uncategorized_file": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "uncategorized_text": t.string().optional(),
        }
    ).named(renames["dispute_evidence"])
    types["dispute_evidence_details"] = t.struct(
        {
            "due_by": t.integer().optional(),
            "has_evidence": t.boolean(),
            "past_due": t.boolean(),
            "submission_count": t.integer(),
        }
    ).named(renames["dispute_evidence_details"])
    types["email_sent"] = t.struct(
        {"email_sent_at": t.integer(), "email_sent_to": t.string()}
    ).named(renames["email_sent"])
    types["ephemeral_key"] = t.struct(
        {
            "created": t.integer(),
            "expires": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "secret": t.string().optional(),
        }
    ).named(renames["ephemeral_key"])
    types["error"] = t.struct({"error": t.proxy(renames["api_errors"])}).named(
        renames["error"]
    )
    types["event"] = t.struct(
        {
            "account": t.string().optional(),
            "api_version": t.string().optional(),
            "created": t.integer(),
            "data": t.proxy(renames["notification_event_data"]),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "pending_webhooks": t.integer(),
            "request": t.proxy(renames["notification_event_request"]).optional(),
            "type": t.string(),
        }
    ).named(renames["event"])
    types["exchange_rate"] = t.struct(
        {"id": t.string(), "object": t.string(), "rates": t.struct({})}
    ).named(renames["exchange_rate"])
    types["external_account"] = t.union(
        [t.proxy(renames["bank_account"]), t.proxy(renames["card"])]
    ).named(renames["external_account"])
    types["external_account_requirements"] = t.struct(
        {
            "currently_due": t.array(t.string()).optional(),
            "errors": t.array(
                t.proxy(renames["account_requirements_error"])
            ).optional(),
            "past_due": t.array(t.string()).optional(),
            "pending_verification": t.array(t.string()).optional(),
        }
    ).named(renames["external_account_requirements"])
    types["fee"] = t.struct(
        {
            "amount": t.integer(),
            "application": t.string().optional(),
            "currency": t.string(),
            "description": t.string().optional(),
            "type": t.string(),
        }
    ).named(renames["fee"])
    types["fee_refund"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "fee": t.union([t.string(), t.proxy(renames["application_fee"])]),
            "id": t.string(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
        }
    ).named(renames["fee_refund"])
    types["file"] = t.struct(
        {
            "created": t.integer(),
            "expires_at": t.integer().optional(),
            "filename": t.string().optional(),
            "id": t.string(),
            "links": t.struct(
                {
                    "data": t.array(t.proxy(renames["file_link"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "object": t.string(),
            "purpose": t.string(),
            "size": t.integer(),
            "title": t.string().optional(),
            "type": t.string().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["file"])
    types["file_link"] = t.struct(
        {
            "created": t.integer(),
            "expired": t.boolean(),
            "expires_at": t.integer().optional(),
            "file": t.union([t.string(), t.proxy(renames["file"])]),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "url": t.string().optional(),
        }
    ).named(renames["file_link"])
    types["financial_connections.account"] = t.struct(
        {
            "account_holder": t.proxy(
                renames["bank_connections_resource_accountholder"]
            ).optional(),
            "balance": t.proxy(renames["bank_connections_resource_balance"]).optional(),
            "balance_refresh": t.proxy(
                renames["bank_connections_resource_balance_refresh"]
            ).optional(),
            "category": t.string(),
            "created": t.integer(),
            "display_name": t.string().optional(),
            "id": t.string(),
            "institution_name": t.string(),
            "last4": t.string().optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "ownership": t.union(
                [
                    t.string(),
                    t.proxy(renames["financial_connections.account_ownership"]),
                ]
            ).optional(),
            "ownership_refresh": t.proxy(
                renames["bank_connections_resource_ownership_refresh"]
            ).optional(),
            "permissions": t.array(t.string()).optional(),
            "status": t.string(),
            "subcategory": t.string(),
            "supported_payment_method_types": t.array(t.string()),
        }
    ).named(renames["financial_connections.account"])
    types["financial_connections.account_owner"] = t.struct(
        {
            "email": t.string().optional(),
            "id": t.string(),
            "name": t.string(),
            "object": t.string(),
            "ownership": t.string(),
            "phone": t.string().optional(),
            "raw_address": t.string().optional(),
            "refreshed_at": t.integer().optional(),
        }
    ).named(renames["financial_connections.account_owner"])
    types["financial_connections.account_ownership"] = t.struct(
        {
            "created": t.integer(),
            "id": t.string(),
            "object": t.string(),
            "owners": t.struct(
                {
                    "data": t.array(
                        t.proxy(renames["financial_connections.account_owner"])
                    ),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
        }
    ).named(renames["financial_connections.account_ownership"])
    types["financial_connections.session"] = t.struct(
        {
            "account_holder": t.proxy(
                renames["bank_connections_resource_accountholder"]
            ).optional(),
            "accounts": t.struct(
                {
                    "data": t.array(t.proxy(renames["financial_connections.account"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "client_secret": t.string(),
            "filters": t.proxy(
                renames["bank_connections_resource_link_account_session_filters"]
            ).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "permissions": t.array(t.string()),
            "return_url": t.string().optional(),
        }
    ).named(renames["financial_connections.session"])
    types["financial_reporting_finance_report_run_run_parameters"] = t.struct(
        {
            "columns": t.array(t.string()).optional(),
            "connected_account": t.string().optional(),
            "currency": t.string().optional(),
            "interval_end": t.integer().optional(),
            "interval_start": t.integer().optional(),
            "payout": t.string().optional(),
            "reporting_category": t.string().optional(),
            "timezone": t.string().optional(),
        }
    ).named(renames["financial_reporting_finance_report_run_run_parameters"])
    types["funding_instructions"] = t.struct(
        {
            "bank_transfer": t.proxy(renames["funding_instructions_bank_transfer"]),
            "currency": t.string(),
            "funding_type": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
        }
    ).named(renames["funding_instructions"])
    types["funding_instructions_bank_transfer"] = t.struct(
        {
            "country": t.string(),
            "financial_addresses": t.array(
                t.proxy(renames["funding_instructions_bank_transfer_financial_address"])
            ),
            "type": t.string(),
        }
    ).named(renames["funding_instructions_bank_transfer"])
    types["funding_instructions_bank_transfer_financial_address"] = t.struct(
        {
            "iban": t.proxy(
                renames["funding_instructions_bank_transfer_iban_record"]
            ).optional(),
            "sort_code": t.proxy(
                renames["funding_instructions_bank_transfer_sort_code_record"]
            ).optional(),
            "spei": t.proxy(
                renames["funding_instructions_bank_transfer_spei_record"]
            ).optional(),
            "supported_networks": t.array(t.string()).optional(),
            "type": t.string(),
            "zengin": t.proxy(
                renames["funding_instructions_bank_transfer_zengin_record"]
            ).optional(),
        }
    ).named(renames["funding_instructions_bank_transfer_financial_address"])
    types["funding_instructions_bank_transfer_iban_record"] = t.struct(
        {
            "account_holder_name": t.string(),
            "bic": t.string(),
            "country": t.string(),
            "iban": t.string(),
        }
    ).named(renames["funding_instructions_bank_transfer_iban_record"])
    types["funding_instructions_bank_transfer_sort_code_record"] = t.struct(
        {
            "account_holder_name": t.string(),
            "account_number": t.string(),
            "sort_code": t.string(),
        }
    ).named(renames["funding_instructions_bank_transfer_sort_code_record"])
    types["funding_instructions_bank_transfer_spei_record"] = t.struct(
        {"bank_code": t.string(), "bank_name": t.string(), "clabe": t.string()}
    ).named(renames["funding_instructions_bank_transfer_spei_record"])
    types["funding_instructions_bank_transfer_zengin_record"] = t.struct(
        {
            "account_holder_name": t.string().optional(),
            "account_number": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "branch_code": t.string().optional(),
            "branch_name": t.string().optional(),
        }
    ).named(renames["funding_instructions_bank_transfer_zengin_record"])
    types["gelato_data_document_report_date_of_birth"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["gelato_data_document_report_date_of_birth"])
    types["gelato_data_document_report_expiration_date"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["gelato_data_document_report_expiration_date"])
    types["gelato_data_document_report_issued_date"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["gelato_data_document_report_issued_date"])
    types["gelato_data_id_number_report_date"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["gelato_data_id_number_report_date"])
    types["gelato_data_verified_outputs_date"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["gelato_data_verified_outputs_date"])
    types["gelato_document_report"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "dob": t.proxy(
                renames["gelato_data_document_report_date_of_birth"]
            ).optional(),
            "error": t.proxy(renames["gelato_document_report_error"]).optional(),
            "expiration_date": t.proxy(
                renames["gelato_data_document_report_expiration_date"]
            ).optional(),
            "files": t.array(t.string()).optional(),
            "first_name": t.string().optional(),
            "issued_date": t.proxy(
                renames["gelato_data_document_report_issued_date"]
            ).optional(),
            "issuing_country": t.string().optional(),
            "last_name": t.string().optional(),
            "number": t.string().optional(),
            "status": t.string(),
            "type": t.string().optional(),
        }
    ).named(renames["gelato_document_report"])
    types["gelato_document_report_error"] = t.struct(
        {"code": t.string().optional(), "reason": t.string().optional()}
    ).named(renames["gelato_document_report_error"])
    types["gelato_id_number_report"] = t.struct(
        {
            "dob": t.proxy(renames["gelato_data_id_number_report_date"]).optional(),
            "error": t.proxy(renames["gelato_id_number_report_error"]).optional(),
            "first_name": t.string().optional(),
            "id_number": t.string().optional(),
            "id_number_type": t.string().optional(),
            "last_name": t.string().optional(),
            "status": t.string(),
        }
    ).named(renames["gelato_id_number_report"])
    types["gelato_id_number_report_error"] = t.struct(
        {"code": t.string().optional(), "reason": t.string().optional()}
    ).named(renames["gelato_id_number_report_error"])
    types["gelato_report_document_options"] = t.struct(
        {
            "allowed_types": t.array(t.string()).optional(),
            "require_id_number": t.boolean().optional(),
            "require_live_capture": t.boolean().optional(),
            "require_matching_selfie": t.boolean().optional(),
        }
    ).named(renames["gelato_report_document_options"])
    types["gelato_report_id_number_options"] = t.struct({}).named(
        renames["gelato_report_id_number_options"]
    )
    types["gelato_selfie_report"] = t.struct(
        {
            "document": t.string().optional(),
            "error": t.proxy(renames["gelato_selfie_report_error"]).optional(),
            "selfie": t.string().optional(),
            "status": t.string(),
        }
    ).named(renames["gelato_selfie_report"])
    types["gelato_selfie_report_error"] = t.struct(
        {"code": t.string().optional(), "reason": t.string().optional()}
    ).named(renames["gelato_selfie_report_error"])
    types["gelato_session_document_options"] = t.struct(
        {
            "allowed_types": t.array(t.string()).optional(),
            "require_id_number": t.boolean().optional(),
            "require_live_capture": t.boolean().optional(),
            "require_matching_selfie": t.boolean().optional(),
        }
    ).named(renames["gelato_session_document_options"])
    types["gelato_session_id_number_options"] = t.struct({}).named(
        renames["gelato_session_id_number_options"]
    )
    types["gelato_session_last_error"] = t.struct(
        {"code": t.string().optional(), "reason": t.string().optional()}
    ).named(renames["gelato_session_last_error"])
    types["gelato_verification_report_options"] = t.struct(
        {
            "document": t.proxy(renames["gelato_report_document_options"]).optional(),
            "id_number": t.proxy(renames["gelato_report_id_number_options"]).optional(),
        }
    ).named(renames["gelato_verification_report_options"])
    types["gelato_verification_session_options"] = t.struct(
        {
            "document": t.proxy(renames["gelato_session_document_options"]).optional(),
            "id_number": t.proxy(
                renames["gelato_session_id_number_options"]
            ).optional(),
        }
    ).named(renames["gelato_verification_session_options"])
    types["gelato_verified_outputs"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "dob": t.proxy(renames["gelato_data_verified_outputs_date"]).optional(),
            "first_name": t.string().optional(),
            "id_number": t.string().optional(),
            "id_number_type": t.string().optional(),
            "last_name": t.string().optional(),
        }
    ).named(renames["gelato_verified_outputs"])
    types["identity.verification_report"] = t.struct(
        {
            "created": t.integer(),
            "document": t.proxy(renames["gelato_document_report"]).optional(),
            "id": t.string(),
            "id_number": t.proxy(renames["gelato_id_number_report"]).optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "options": t.proxy(
                renames["gelato_verification_report_options"]
            ).optional(),
            "selfie": t.proxy(renames["gelato_selfie_report"]).optional(),
            "type": t.string().optional(),
            "verification_session": t.string().optional(),
        }
    ).named(renames["identity.verification_report"])
    types["identity.verification_session"] = t.struct(
        {
            "client_secret": t.string().optional(),
            "created": t.integer(),
            "id": t.string(),
            "last_error": t.proxy(renames["gelato_session_last_error"]).optional(),
            "last_verification_report": t.union(
                [t.string(), t.proxy(renames["identity.verification_report"])]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "options": t.proxy(
                renames["gelato_verification_session_options"]
            ).optional(),
            "redaction": t.proxy(renames["verification_session_redaction"]).optional(),
            "status": t.string(),
            "type": t.string().optional(),
            "url": t.string().optional(),
            "verified_outputs": t.proxy(renames["gelato_verified_outputs"]).optional(),
        }
    ).named(renames["identity.verification_session"])
    types["inbound_transfers"] = t.struct(
        {
            "billing_details": t.proxy(
                renames["treasury_shared_resource_billing_details"]
            ),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["inbound_transfers_payment_method_details_us_bank_account"]
            ).optional(),
        }
    ).named(renames["inbound_transfers"])
    types["inbound_transfers_payment_method_details_us_bank_account"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["inbound_transfers_payment_method_details_us_bank_account"])
    types["invoice"] = t.struct(
        {
            "account_country": t.string().optional(),
            "account_name": t.string().optional(),
            "account_tax_ids": t.array(
                t.union(
                    [
                        t.string(),
                        t.proxy(renames["tax_id"]),
                        t.proxy(renames["deleted_tax_id"]),
                    ]
                )
            ).optional(),
            "amount_due": t.integer(),
            "amount_paid": t.integer(),
            "amount_remaining": t.integer(),
            "amount_shipping": t.integer(),
            "application": t.union(
                [
                    t.string(),
                    t.proxy(renames["application"]),
                    t.proxy(renames["deleted_application"]),
                ]
            ).optional(),
            "application_fee_amount": t.integer().optional(),
            "attempt_count": t.integer(),
            "attempted": t.boolean(),
            "auto_advance": t.boolean().optional(),
            "automatic_tax": t.proxy(renames["automatic_tax"]),
            "billing_reason": t.string().optional(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]).optional(),
            "collection_method": t.string(),
            "created": t.integer(),
            "currency": t.string(),
            "custom_fields": t.array(
                t.proxy(renames["invoice_setting_custom_field"])
            ).optional(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "customer_address": t.proxy(renames["address"]).optional(),
            "customer_email": t.string().optional(),
            "customer_name": t.string().optional(),
            "customer_phone": t.string().optional(),
            "customer_shipping": t.proxy(renames["shipping"]).optional(),
            "customer_tax_exempt": t.string().optional(),
            "customer_tax_ids": t.array(
                t.proxy(renames["invoices_resource_invoice_tax_id"])
            ).optional(),
            "default_payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "default_source": t.union(
                [t.string(), t.proxy(renames["payment_source"])]
            ).optional(),
            "default_tax_rates": t.array(t.proxy(renames["tax_rate"])),
            "description": t.string().optional(),
            "discount": t.proxy(renames["discount"]).optional(),
            "discounts": t.array(
                t.union(
                    [
                        t.string(),
                        t.proxy(renames["discount"]),
                        t.proxy(renames["deleted_discount"]),
                    ]
                )
            ).optional(),
            "due_date": t.integer().optional(),
            "ending_balance": t.integer().optional(),
            "footer": t.string().optional(),
            "from_invoice": t.proxy(renames["invoices_from_invoice"]).optional(),
            "hosted_invoice_url": t.string().optional(),
            "id": t.string().optional(),
            "invoice_pdf": t.string().optional(),
            "last_finalization_error": t.proxy(renames["api_errors"]).optional(),
            "latest_revision": t.union(
                [t.string(), t.proxy(renames["invoice"])]
            ).optional(),
            "lines": t.struct(
                {
                    "data": t.array(t.proxy(renames["line_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "next_payment_attempt": t.integer().optional(),
            "number": t.string().optional(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "paid": t.boolean(),
            "paid_out_of_band": t.boolean(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "payment_settings": t.proxy(renames["invoices_payment_settings"]),
            "period_end": t.integer(),
            "period_start": t.integer(),
            "post_payment_credit_notes_amount": t.integer(),
            "pre_payment_credit_notes_amount": t.integer(),
            "quote": t.union([t.string(), t.proxy(renames["quote"])]).optional(),
            "receipt_number": t.string().optional(),
            "rendering_options": t.proxy(
                renames["invoice_setting_rendering_options"]
            ).optional(),
            "shipping_cost": t.proxy(renames["invoices_shipping_cost"]).optional(),
            "shipping_details": t.proxy(renames["shipping"]).optional(),
            "starting_balance": t.integer(),
            "statement_descriptor": t.string().optional(),
            "status": t.string().optional(),
            "status_transitions": t.proxy(renames["invoices_status_transitions"]),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "subscription_proration_date": t.integer().optional(),
            "subtotal": t.integer(),
            "subtotal_excluding_tax": t.integer().optional(),
            "tax": t.integer().optional(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
            "threshold_reason": t.proxy(renames["invoice_threshold_reason"]).optional(),
            "total": t.integer(),
            "total_discount_amounts": t.array(
                t.proxy(renames["discounts_resource_discount_amount"])
            ).optional(),
            "total_excluding_tax": t.integer().optional(),
            "total_tax_amounts": t.array(t.proxy(renames["invoice_tax_amount"])),
            "transfer_data": t.proxy(renames["invoice_transfer_data"]).optional(),
            "webhooks_delivered_at": t.integer().optional(),
        }
    ).named(renames["invoice"])
    types["invoice_installments_card"] = t.struct(
        {"enabled": t.boolean().optional()}
    ).named(renames["invoice_installments_card"])
    types["invoice_item_threshold_reason"] = t.struct(
        {"line_item_ids": t.array(t.string()), "usage_gte": t.integer()}
    ).named(renames["invoice_item_threshold_reason"])
    types["invoice_line_item_period"] = t.struct(
        {"end": t.integer(), "start": t.integer()}
    ).named(renames["invoice_line_item_period"])
    types["invoice_mandate_options_card"] = t.struct(
        {
            "amount": t.integer().optional(),
            "amount_type": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["invoice_mandate_options_card"])
    types["invoice_payment_method_options_acss_debit"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames["invoice_payment_method_options_acss_debit_mandate_options"]
            ).optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["invoice_payment_method_options_acss_debit"])
    types["invoice_payment_method_options_acss_debit_mandate_options"] = t.struct(
        {"transaction_type": t.string().optional()}
    ).named(renames["invoice_payment_method_options_acss_debit_mandate_options"])
    types["invoice_payment_method_options_bancontact"] = t.struct(
        {"preferred_language": t.string()}
    ).named(renames["invoice_payment_method_options_bancontact"])
    types["invoice_payment_method_options_card"] = t.struct(
        {
            "installments": t.proxy(renames["invoice_installments_card"]).optional(),
            "request_three_d_secure": t.string().optional(),
        }
    ).named(renames["invoice_payment_method_options_card"])
    types["invoice_payment_method_options_customer_balance"] = t.struct(
        {
            "bank_transfer": t.proxy(
                renames["invoice_payment_method_options_customer_balance_bank_transfer"]
            ).optional(),
            "funding_type": t.string().optional(),
        }
    ).named(renames["invoice_payment_method_options_customer_balance"])
    types["invoice_payment_method_options_customer_balance_bank_transfer"] = t.struct(
        {
            "eu_bank_transfer": t.proxy(
                renames[
                    "invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer"
                ]
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["invoice_payment_method_options_customer_balance_bank_transfer"])
    types[
        "invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer"
    ] = t.struct({"country": t.string()}).named(
        renames[
            "invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer"
        ]
    )
    types["invoice_payment_method_options_konbini"] = t.struct({}).named(
        renames["invoice_payment_method_options_konbini"]
    )
    types["invoice_payment_method_options_us_bank_account"] = t.struct(
        {
            "financial_connections": t.proxy(
                renames[
                    "invoice_payment_method_options_us_bank_account_linked_account_options"
                ]
            ).optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["invoice_payment_method_options_us_bank_account"])
    types[
        "invoice_payment_method_options_us_bank_account_linked_account_options"
    ] = t.struct({"permissions": t.array(t.string()).optional()}).named(
        renames["invoice_payment_method_options_us_bank_account_linked_account_options"]
    )
    types["invoice_setting_custom_field"] = t.struct(
        {"name": t.string(), "value": t.string()}
    ).named(renames["invoice_setting_custom_field"])
    types["invoice_setting_customer_setting"] = t.struct(
        {
            "custom_fields": t.array(
                t.proxy(renames["invoice_setting_custom_field"])
            ).optional(),
            "default_payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "footer": t.string().optional(),
            "rendering_options": t.proxy(
                renames["invoice_setting_rendering_options"]
            ).optional(),
        }
    ).named(renames["invoice_setting_customer_setting"])
    types["invoice_setting_phase_setting"] = t.struct(
        {"days_until_due": t.integer().optional()}
    ).named(renames["invoice_setting_phase_setting"])
    types["invoice_setting_quote_setting"] = t.struct(
        {"days_until_due": t.integer().optional()}
    ).named(renames["invoice_setting_quote_setting"])
    types["invoice_setting_rendering_options"] = t.struct(
        {"amount_tax_display": t.string().optional()}
    ).named(renames["invoice_setting_rendering_options"])
    types["invoice_setting_subscription_schedule_setting"] = t.struct(
        {"days_until_due": t.integer().optional()}
    ).named(renames["invoice_setting_subscription_schedule_setting"])
    types["invoice_tax_amount"] = t.struct(
        {
            "amount": t.integer(),
            "inclusive": t.boolean(),
            "tax_rate": t.union([t.string(), t.proxy(renames["tax_rate"])]),
            "taxability_reason": t.string().optional(),
            "taxable_amount": t.integer().optional(),
        }
    ).named(renames["invoice_tax_amount"])
    types["invoice_threshold_reason"] = t.struct(
        {
            "amount_gte": t.integer().optional(),
            "item_reasons": t.array(t.proxy(renames["invoice_item_threshold_reason"])),
        }
    ).named(renames["invoice_threshold_reason"])
    types["invoice_transfer_data"] = t.struct(
        {
            "amount": t.integer().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["invoice_transfer_data"])
    types["invoiceitem"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ),
            "date": t.integer(),
            "description": t.string().optional(),
            "discountable": t.boolean(),
            "discounts": t.array(
                t.union([t.string(), t.proxy(renames["discount"])])
            ).optional(),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "period": t.proxy(renames["invoice_line_item_period"]),
            "plan": t.proxy(renames["plan"]).optional(),
            "price": t.proxy(renames["price"]).optional(),
            "proration": t.boolean(),
            "quantity": t.integer(),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "subscription_item": t.string().optional(),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
        }
    ).named(renames["invoiceitem"])
    types["invoices_from_invoice"] = t.struct(
        {
            "action": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]),
        }
    ).named(renames["invoices_from_invoice"])
    types["invoices_line_items_credited_items"] = t.struct(
        {"invoice": t.string(), "invoice_line_items": t.array(t.string())}
    ).named(renames["invoices_line_items_credited_items"])
    types["invoices_line_items_proration_details"] = t.struct(
        {
            "credited_items": t.proxy(
                renames["invoices_line_items_credited_items"]
            ).optional()
        }
    ).named(renames["invoices_line_items_proration_details"])
    types["invoices_payment_method_options"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["invoice_payment_method_options_acss_debit"]
            ).optional(),
            "bancontact": t.proxy(
                renames["invoice_payment_method_options_bancontact"]
            ).optional(),
            "card": t.proxy(renames["invoice_payment_method_options_card"]).optional(),
            "customer_balance": t.proxy(
                renames["invoice_payment_method_options_customer_balance"]
            ).optional(),
            "konbini": t.proxy(
                renames["invoice_payment_method_options_konbini"]
            ).optional(),
            "us_bank_account": t.proxy(
                renames["invoice_payment_method_options_us_bank_account"]
            ).optional(),
        }
    ).named(renames["invoices_payment_method_options"])
    types["invoices_payment_settings"] = t.struct(
        {
            "default_mandate": t.string().optional(),
            "payment_method_options": t.proxy(
                renames["invoices_payment_method_options"]
            ).optional(),
            "payment_method_types": t.array(t.string()).optional(),
        }
    ).named(renames["invoices_payment_settings"])
    types["invoices_resource_invoice_tax_id"] = t.struct(
        {"type": t.string(), "value": t.string().optional()}
    ).named(renames["invoices_resource_invoice_tax_id"])
    types["invoices_shipping_cost"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_tax": t.integer(),
            "amount_total": t.integer(),
            "shipping_rate": t.union(
                [t.string(), t.proxy(renames["shipping_rate"])]
            ).optional(),
            "taxes": t.array(t.proxy(renames["line_items_tax_amount"])).optional(),
        }
    ).named(renames["invoices_shipping_cost"])
    types["invoices_status_transitions"] = t.struct(
        {
            "finalized_at": t.integer().optional(),
            "marked_uncollectible_at": t.integer().optional(),
            "paid_at": t.integer().optional(),
            "voided_at": t.integer().optional(),
        }
    ).named(renames["invoices_status_transitions"])
    types["issuing.authorization"] = t.struct(
        {
            "amount": t.integer(),
            "amount_details": t.proxy(
                renames["issuing_authorization_amount_details"]
            ).optional(),
            "approved": t.boolean(),
            "authorization_method": t.string(),
            "balance_transactions": t.array(t.proxy(renames["balance_transaction"])),
            "card": t.proxy(renames["issuing.card"]),
            "cardholder": t.union(
                [t.string(), t.proxy(renames["issuing.cardholder"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "merchant_amount": t.integer(),
            "merchant_currency": t.string(),
            "merchant_data": t.proxy(renames["issuing_authorization_merchant_data"]),
            "metadata": t.struct({}),
            "network_data": t.proxy(
                renames["issuing_authorization_network_data"]
            ).optional(),
            "object": t.string(),
            "pending_request": t.proxy(
                renames["issuing_authorization_pending_request"]
            ).optional(),
            "request_history": t.array(
                t.proxy(renames["issuing_authorization_request"])
            ),
            "status": t.string(),
            "transactions": t.array(t.proxy(renames["issuing.transaction"])),
            "treasury": t.proxy(renames["issuing_authorization_treasury"]).optional(),
            "verification_data": t.proxy(
                renames["issuing_authorization_verification_data"]
            ),
            "wallet": t.string().optional(),
        }
    ).named(renames["issuing.authorization"])
    types["issuing.card"] = t.struct(
        {
            "brand": t.string(),
            "cancellation_reason": t.string().optional(),
            "cardholder": t.proxy(renames["issuing.cardholder"]),
            "created": t.integer(),
            "currency": t.string(),
            "cvc": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "financial_account": t.string().optional(),
            "id": t.string(),
            "last4": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "number": t.string().optional(),
            "object": t.string(),
            "replaced_by": t.union(
                [t.string(), t.proxy(renames["issuing.card"])]
            ).optional(),
            "replacement_for": t.union(
                [t.string(), t.proxy(renames["issuing.card"])]
            ).optional(),
            "replacement_reason": t.string().optional(),
            "shipping": t.proxy(renames["issuing_card_shipping"]).optional(),
            "spending_controls": t.proxy(
                renames["issuing_card_authorization_controls"]
            ),
            "status": t.string(),
            "type": t.string(),
            "wallets": t.proxy(renames["issuing_card_wallets"]).optional(),
        }
    ).named(renames["issuing.card"])
    types["issuing.cardholder"] = t.struct(
        {
            "billing": t.proxy(renames["issuing_cardholder_address"]),
            "company": t.proxy(renames["issuing_cardholder_company"]).optional(),
            "created": t.integer(),
            "email": t.string().optional(),
            "id": t.string(),
            "individual": t.proxy(renames["issuing_cardholder_individual"]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "name": t.string(),
            "object": t.string(),
            "phone_number": t.string().optional(),
            "requirements": t.proxy(renames["issuing_cardholder_requirements"]),
            "spending_controls": t.proxy(
                renames["issuing_cardholder_authorization_controls"]
            ).optional(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["issuing.cardholder"])
    types["issuing.dispute"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transactions": t.array(
                t.proxy(renames["balance_transaction"])
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "evidence": t.proxy(renames["issuing_dispute_evidence"]),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "status": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["issuing.transaction"])]
            ),
            "treasury": t.proxy(renames["issuing_dispute_treasury"]).optional(),
        }
    ).named(renames["issuing.dispute"])
    types["issuing.transaction"] = t.struct(
        {
            "amount": t.integer(),
            "amount_details": t.proxy(
                renames["issuing_transaction_amount_details"]
            ).optional(),
            "authorization": t.union(
                [t.string(), t.proxy(renames["issuing.authorization"])]
            ).optional(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "card": t.union([t.string(), t.proxy(renames["issuing.card"])]),
            "cardholder": t.union(
                [t.string(), t.proxy(renames["issuing.cardholder"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "dispute": t.union(
                [t.string(), t.proxy(renames["issuing.dispute"])]
            ).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "merchant_amount": t.integer(),
            "merchant_currency": t.string(),
            "merchant_data": t.proxy(renames["issuing_authorization_merchant_data"]),
            "metadata": t.struct({}),
            "object": t.string(),
            "purchase_details": t.proxy(
                renames["issuing_transaction_purchase_details"]
            ).optional(),
            "treasury": t.proxy(renames["issuing_transaction_treasury"]).optional(),
            "type": t.string(),
            "wallet": t.string().optional(),
        }
    ).named(renames["issuing.transaction"])
    types["issuing_authorization_amount_details"] = t.struct(
        {"atm_fee": t.integer().optional()}
    ).named(renames["issuing_authorization_amount_details"])
    types["issuing_authorization_merchant_data"] = t.struct(
        {
            "category": t.string(),
            "category_code": t.string(),
            "city": t.string().optional(),
            "country": t.string().optional(),
            "name": t.string().optional(),
            "network_id": t.string(),
            "postal_code": t.string().optional(),
            "state": t.string().optional(),
            "terminal_id": t.string().optional(),
        }
    ).named(renames["issuing_authorization_merchant_data"])
    types["issuing_authorization_network_data"] = t.struct(
        {"acquiring_institution_id": t.string().optional()}
    ).named(renames["issuing_authorization_network_data"])
    types["issuing_authorization_pending_request"] = t.struct(
        {
            "amount": t.integer(),
            "amount_details": t.proxy(
                renames["issuing_authorization_amount_details"]
            ).optional(),
            "currency": t.string(),
            "is_amount_controllable": t.boolean(),
            "merchant_amount": t.integer(),
            "merchant_currency": t.string(),
        }
    ).named(renames["issuing_authorization_pending_request"])
    types["issuing_authorization_request"] = t.struct(
        {
            "amount": t.integer(),
            "amount_details": t.proxy(
                renames["issuing_authorization_amount_details"]
            ).optional(),
            "approved": t.boolean(),
            "created": t.integer(),
            "currency": t.string(),
            "merchant_amount": t.integer(),
            "merchant_currency": t.string(),
            "reason": t.string(),
            "reason_message": t.string().optional(),
        }
    ).named(renames["issuing_authorization_request"])
    types["issuing_authorization_treasury"] = t.struct(
        {
            "received_credits": t.array(t.string()),
            "received_debits": t.array(t.string()),
            "transaction": t.string().optional(),
        }
    ).named(renames["issuing_authorization_treasury"])
    types["issuing_authorization_verification_data"] = t.struct(
        {
            "address_line1_check": t.string(),
            "address_postal_code_check": t.string(),
            "cvc_check": t.string(),
            "expiry_check": t.string(),
        }
    ).named(renames["issuing_authorization_verification_data"])
    types["issuing_card_apple_pay"] = t.struct(
        {"eligible": t.boolean(), "ineligible_reason": t.string().optional()}
    ).named(renames["issuing_card_apple_pay"])
    types["issuing_card_authorization_controls"] = t.struct(
        {
            "allowed_categories": t.array(t.string()).optional(),
            "blocked_categories": t.array(t.string()).optional(),
            "spending_limits": t.array(
                t.proxy(renames["issuing_card_spending_limit"])
            ).optional(),
            "spending_limits_currency": t.string().optional(),
        }
    ).named(renames["issuing_card_authorization_controls"])
    types["issuing_card_google_pay"] = t.struct(
        {"eligible": t.boolean(), "ineligible_reason": t.string().optional()}
    ).named(renames["issuing_card_google_pay"])
    types["issuing_card_shipping"] = t.struct(
        {
            "address": t.proxy(renames["address"]),
            "carrier": t.string().optional(),
            "customs": t.proxy(renames["issuing_card_shipping_customs"]).optional(),
            "eta": t.integer().optional(),
            "name": t.string(),
            "phone_number": t.string().optional(),
            "require_signature": t.boolean().optional(),
            "service": t.string(),
            "status": t.string().optional(),
            "tracking_number": t.string().optional(),
            "tracking_url": t.string().optional(),
            "type": t.string(),
        }
    ).named(renames["issuing_card_shipping"])
    types["issuing_card_shipping_customs"] = t.struct(
        {"eori_number": t.string().optional()}
    ).named(renames["issuing_card_shipping_customs"])
    types["issuing_card_spending_limit"] = t.struct(
        {
            "amount": t.integer(),
            "categories": t.array(t.string()).optional(),
            "interval": t.string(),
        }
    ).named(renames["issuing_card_spending_limit"])
    types["issuing_card_wallets"] = t.struct(
        {
            "apple_pay": t.proxy(renames["issuing_card_apple_pay"]),
            "google_pay": t.proxy(renames["issuing_card_google_pay"]),
            "primary_account_identifier": t.string().optional(),
        }
    ).named(renames["issuing_card_wallets"])
    types["issuing_cardholder_address"] = t.struct(
        {"address": t.proxy(renames["address"])}
    ).named(renames["issuing_cardholder_address"])
    types["issuing_cardholder_authorization_controls"] = t.struct(
        {
            "allowed_categories": t.array(t.string()).optional(),
            "blocked_categories": t.array(t.string()).optional(),
            "spending_limits": t.array(
                t.proxy(renames["issuing_cardholder_spending_limit"])
            ).optional(),
            "spending_limits_currency": t.string().optional(),
        }
    ).named(renames["issuing_cardholder_authorization_controls"])
    types["issuing_cardholder_card_issuing"] = t.struct(
        {
            "user_terms_acceptance": t.proxy(
                renames["issuing_cardholder_user_terms_acceptance"]
            ).optional()
        }
    ).named(renames["issuing_cardholder_card_issuing"])
    types["issuing_cardholder_company"] = t.struct(
        {"tax_id_provided": t.boolean()}
    ).named(renames["issuing_cardholder_company"])
    types["issuing_cardholder_id_document"] = t.struct(
        {
            "back": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "front": t.union([t.string(), t.proxy(renames["file"])]).optional(),
        }
    ).named(renames["issuing_cardholder_id_document"])
    types["issuing_cardholder_individual"] = t.struct(
        {
            "card_issuing": t.proxy(
                renames["issuing_cardholder_card_issuing"]
            ).optional(),
            "dob": t.proxy(renames["issuing_cardholder_individual_dob"]).optional(),
            "first_name": t.string().optional(),
            "last_name": t.string().optional(),
            "verification": t.proxy(
                renames["issuing_cardholder_verification"]
            ).optional(),
        }
    ).named(renames["issuing_cardholder_individual"])
    types["issuing_cardholder_individual_dob"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["issuing_cardholder_individual_dob"])
    types["issuing_cardholder_requirements"] = t.struct(
        {
            "disabled_reason": t.string().optional(),
            "past_due": t.array(t.string()).optional(),
        }
    ).named(renames["issuing_cardholder_requirements"])
    types["issuing_cardholder_spending_limit"] = t.struct(
        {
            "amount": t.integer(),
            "categories": t.array(t.string()).optional(),
            "interval": t.string(),
        }
    ).named(renames["issuing_cardholder_spending_limit"])
    types["issuing_cardholder_user_terms_acceptance"] = t.struct(
        {
            "date": t.integer().optional(),
            "ip": t.string().optional(),
            "user_agent": t.string().optional(),
        }
    ).named(renames["issuing_cardholder_user_terms_acceptance"])
    types["issuing_cardholder_verification"] = t.struct(
        {"document": t.proxy(renames["issuing_cardholder_id_document"]).optional()}
    ).named(renames["issuing_cardholder_verification"])
    types["issuing_dispute_canceled_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "canceled_at": t.integer().optional(),
            "cancellation_policy_provided": t.boolean().optional(),
            "cancellation_reason": t.string().optional(),
            "expected_at": t.integer().optional(),
            "explanation": t.string().optional(),
            "product_description": t.string().optional(),
            "product_type": t.string().optional(),
            "return_status": t.string().optional(),
            "returned_at": t.integer().optional(),
        }
    ).named(renames["issuing_dispute_canceled_evidence"])
    types["issuing_dispute_duplicate_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "card_statement": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "cash_receipt": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "check_image": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "explanation": t.string().optional(),
            "original_transaction": t.string().optional(),
        }
    ).named(renames["issuing_dispute_duplicate_evidence"])
    types["issuing_dispute_evidence"] = t.struct(
        {
            "canceled": t.proxy(
                renames["issuing_dispute_canceled_evidence"]
            ).optional(),
            "duplicate": t.proxy(
                renames["issuing_dispute_duplicate_evidence"]
            ).optional(),
            "fraudulent": t.proxy(
                renames["issuing_dispute_fraudulent_evidence"]
            ).optional(),
            "merchandise_not_as_described": t.proxy(
                renames["issuing_dispute_merchandise_not_as_described_evidence"]
            ).optional(),
            "not_received": t.proxy(
                renames["issuing_dispute_not_received_evidence"]
            ).optional(),
            "other": t.proxy(renames["issuing_dispute_other_evidence"]).optional(),
            "reason": t.string(),
            "service_not_as_described": t.proxy(
                renames["issuing_dispute_service_not_as_described_evidence"]
            ).optional(),
        }
    ).named(renames["issuing_dispute_evidence"])
    types["issuing_dispute_fraudulent_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "explanation": t.string().optional(),
        }
    ).named(renames["issuing_dispute_fraudulent_evidence"])
    types["issuing_dispute_merchandise_not_as_described_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "explanation": t.string().optional(),
            "received_at": t.integer().optional(),
            "return_description": t.string().optional(),
            "return_status": t.string().optional(),
            "returned_at": t.integer().optional(),
        }
    ).named(renames["issuing_dispute_merchandise_not_as_described_evidence"])
    types["issuing_dispute_not_received_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "expected_at": t.integer().optional(),
            "explanation": t.string().optional(),
            "product_description": t.string().optional(),
            "product_type": t.string().optional(),
        }
    ).named(renames["issuing_dispute_not_received_evidence"])
    types["issuing_dispute_other_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "explanation": t.string().optional(),
            "product_description": t.string().optional(),
            "product_type": t.string().optional(),
        }
    ).named(renames["issuing_dispute_other_evidence"])
    types["issuing_dispute_service_not_as_described_evidence"] = t.struct(
        {
            "additional_documentation": t.union(
                [t.string(), t.proxy(renames["file"])]
            ).optional(),
            "canceled_at": t.integer().optional(),
            "cancellation_reason": t.string().optional(),
            "explanation": t.string().optional(),
            "received_at": t.integer().optional(),
        }
    ).named(renames["issuing_dispute_service_not_as_described_evidence"])
    types["issuing_dispute_treasury"] = t.struct(
        {"debit_reversal": t.string().optional(), "received_debit": t.string()}
    ).named(renames["issuing_dispute_treasury"])
    types["issuing_transaction_amount_details"] = t.struct(
        {"atm_fee": t.integer().optional()}
    ).named(renames["issuing_transaction_amount_details"])
    types["issuing_transaction_flight_data"] = t.struct(
        {
            "departure_at": t.integer().optional(),
            "passenger_name": t.string().optional(),
            "refundable": t.boolean().optional(),
            "segments": t.array(
                t.proxy(renames["issuing_transaction_flight_data_leg"])
            ).optional(),
            "travel_agency": t.string().optional(),
        }
    ).named(renames["issuing_transaction_flight_data"])
    types["issuing_transaction_flight_data_leg"] = t.struct(
        {
            "arrival_airport_code": t.string().optional(),
            "carrier": t.string().optional(),
            "departure_airport_code": t.string().optional(),
            "flight_number": t.string().optional(),
            "service_class": t.string().optional(),
            "stopover_allowed": t.boolean().optional(),
        }
    ).named(renames["issuing_transaction_flight_data_leg"])
    types["issuing_transaction_fuel_data"] = t.struct(
        {
            "type": t.string(),
            "unit": t.string(),
            "unit_cost_decimal": t.string(),
            "volume_decimal": t.string().optional(),
        }
    ).named(renames["issuing_transaction_fuel_data"])
    types["issuing_transaction_lodging_data"] = t.struct(
        {"check_in_at": t.integer().optional(), "nights": t.integer().optional()}
    ).named(renames["issuing_transaction_lodging_data"])
    types["issuing_transaction_purchase_details"] = t.struct(
        {
            "flight": t.proxy(renames["issuing_transaction_flight_data"]).optional(),
            "fuel": t.proxy(renames["issuing_transaction_fuel_data"]).optional(),
            "lodging": t.proxy(renames["issuing_transaction_lodging_data"]).optional(),
            "receipt": t.array(
                t.proxy(renames["issuing_transaction_receipt_data"])
            ).optional(),
            "reference": t.string().optional(),
        }
    ).named(renames["issuing_transaction_purchase_details"])
    types["issuing_transaction_receipt_data"] = t.struct(
        {
            "description": t.string().optional(),
            "quantity": t.number().optional(),
            "total": t.integer().optional(),
            "unit_cost": t.integer().optional(),
        }
    ).named(renames["issuing_transaction_receipt_data"])
    types["issuing_transaction_treasury"] = t.struct(
        {
            "received_credit": t.string().optional(),
            "received_debit": t.string().optional(),
        }
    ).named(renames["issuing_transaction_treasury"])
    types["item"] = t.struct(
        {
            "amount_discount": t.integer(),
            "amount_subtotal": t.integer(),
            "amount_tax": t.integer(),
            "amount_total": t.integer(),
            "currency": t.string(),
            "description": t.string(),
            "discounts": t.array(
                t.proxy(renames["line_items_discount_amount"])
            ).optional(),
            "id": t.string(),
            "object": t.string(),
            "price": t.proxy(renames["price"]).optional(),
            "quantity": t.integer().optional(),
            "taxes": t.array(t.proxy(renames["line_items_tax_amount"])).optional(),
        }
    ).named(renames["item"])
    types["legal_entity_company"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "address_kana": t.proxy(renames["legal_entity_japan_address"]).optional(),
            "address_kanji": t.proxy(renames["legal_entity_japan_address"]).optional(),
            "directors_provided": t.boolean().optional(),
            "executives_provided": t.boolean().optional(),
            "export_license_id": t.string().optional(),
            "export_purpose_code": t.string().optional(),
            "name": t.string().optional(),
            "name_kana": t.string().optional(),
            "name_kanji": t.string().optional(),
            "owners_provided": t.boolean().optional(),
            "ownership_declaration": t.proxy(
                renames["legal_entity_ubo_declaration"]
            ).optional(),
            "phone": t.string().optional(),
            "structure": t.string().optional(),
            "tax_id_provided": t.boolean().optional(),
            "tax_id_registrar": t.string().optional(),
            "vat_id_provided": t.boolean().optional(),
            "verification": t.proxy(
                renames["legal_entity_company_verification"]
            ).optional(),
        }
    ).named(renames["legal_entity_company"])
    types["legal_entity_company_verification"] = t.struct(
        {"document": t.proxy(renames["legal_entity_company_verification_document"])}
    ).named(renames["legal_entity_company_verification"])
    types["legal_entity_company_verification_document"] = t.struct(
        {
            "back": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "details": t.string().optional(),
            "details_code": t.string().optional(),
            "front": t.union([t.string(), t.proxy(renames["file"])]).optional(),
        }
    ).named(renames["legal_entity_company_verification_document"])
    types["legal_entity_dob"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["legal_entity_dob"])
    types["legal_entity_japan_address"] = t.struct(
        {
            "city": t.string().optional(),
            "country": t.string().optional(),
            "line1": t.string().optional(),
            "line2": t.string().optional(),
            "postal_code": t.string().optional(),
            "state": t.string().optional(),
            "town": t.string().optional(),
        }
    ).named(renames["legal_entity_japan_address"])
    types["legal_entity_person_verification"] = t.struct(
        {
            "additional_document": t.proxy(
                renames["legal_entity_person_verification_document"]
            ).optional(),
            "details": t.string().optional(),
            "details_code": t.string().optional(),
            "document": t.proxy(
                renames["legal_entity_person_verification_document"]
            ).optional(),
            "status": t.string(),
        }
    ).named(renames["legal_entity_person_verification"])
    types["legal_entity_person_verification_document"] = t.struct(
        {
            "back": t.union([t.string(), t.proxy(renames["file"])]).optional(),
            "details": t.string().optional(),
            "details_code": t.string().optional(),
            "front": t.union([t.string(), t.proxy(renames["file"])]).optional(),
        }
    ).named(renames["legal_entity_person_verification_document"])
    types["legal_entity_ubo_declaration"] = t.struct(
        {
            "date": t.integer().optional(),
            "ip": t.string().optional(),
            "user_agent": t.string().optional(),
        }
    ).named(renames["legal_entity_ubo_declaration"])
    types["level3"] = t.struct(
        {
            "customer_reference": t.string().optional(),
            "line_items": t.array(t.proxy(renames["level3_line_items"])),
            "merchant_reference": t.string(),
            "shipping_address_zip": t.string().optional(),
            "shipping_amount": t.integer().optional(),
            "shipping_from_zip": t.string().optional(),
        }
    ).named(renames["level3"])
    types["level3_line_items"] = t.struct(
        {
            "discount_amount": t.integer().optional(),
            "product_code": t.string(),
            "product_description": t.string(),
            "quantity": t.integer().optional(),
            "tax_amount": t.integer().optional(),
            "unit_cost": t.integer().optional(),
        }
    ).named(renames["level3_line_items"])
    types["line_item"] = t.struct(
        {
            "amount": t.integer(),
            "amount_excluding_tax": t.integer().optional(),
            "currency": t.string(),
            "description": t.string().optional(),
            "discount_amounts": t.array(
                t.proxy(renames["discounts_resource_discount_amount"])
            ).optional(),
            "discountable": t.boolean(),
            "discounts": t.array(
                t.union([t.string(), t.proxy(renames["discount"])])
            ).optional(),
            "id": t.string(),
            "invoice_item": t.union(
                [t.string(), t.proxy(renames["invoiceitem"])]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "period": t.proxy(renames["invoice_line_item_period"]),
            "plan": t.proxy(renames["plan"]).optional(),
            "price": t.proxy(renames["price"]).optional(),
            "proration": t.boolean(),
            "proration_details": t.proxy(
                renames["invoices_line_items_proration_details"]
            ).optional(),
            "quantity": t.integer().optional(),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "subscription_item": t.union(
                [t.string(), t.proxy(renames["subscription_item"])]
            ).optional(),
            "tax_amounts": t.array(t.proxy(renames["invoice_tax_amount"])).optional(),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
            "type": t.string(),
            "unit_amount_excluding_tax": t.string().optional(),
        }
    ).named(renames["line_item"])
    types["line_items_discount_amount"] = t.struct(
        {"amount": t.integer(), "discount": t.proxy(renames["discount"])}
    ).named(renames["line_items_discount_amount"])
    types["line_items_tax_amount"] = t.struct(
        {
            "amount": t.integer(),
            "rate": t.proxy(renames["tax_rate"]),
            "taxability_reason": t.string().optional(),
            "taxable_amount": t.integer().optional(),
        }
    ).named(renames["line_items_tax_amount"])
    types["linked_account_options_us_bank_account"] = t.struct(
        {
            "permissions": t.array(t.string()).optional(),
            "return_url": t.string().optional(),
        }
    ).named(renames["linked_account_options_us_bank_account"])
    types["login_link"] = t.struct(
        {"created": t.integer(), "object": t.string(), "url": t.string()}
    ).named(renames["login_link"])
    types["mandate"] = t.struct(
        {
            "customer_acceptance": t.proxy(renames["customer_acceptance"]),
            "id": t.string(),
            "livemode": t.boolean(),
            "multi_use": t.proxy(renames["mandate_multi_use"]).optional(),
            "object": t.string(),
            "payment_method": t.union([t.string(), t.proxy(renames["payment_method"])]),
            "payment_method_details": t.proxy(
                renames["mandate_payment_method_details"]
            ),
            "single_use": t.proxy(renames["mandate_single_use"]).optional(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["mandate"])
    types["mandate_acss_debit"] = t.struct(
        {
            "default_for": t.array(t.string()).optional(),
            "interval_description": t.string().optional(),
            "payment_schedule": t.string(),
            "transaction_type": t.string(),
        }
    ).named(renames["mandate_acss_debit"])
    types["mandate_au_becs_debit"] = t.struct({"url": t.string()}).named(
        renames["mandate_au_becs_debit"]
    )
    types["mandate_bacs_debit"] = t.struct(
        {"network_status": t.string(), "reference": t.string(), "url": t.string()}
    ).named(renames["mandate_bacs_debit"])
    types["mandate_blik"] = t.struct(
        {
            "expires_after": t.integer().optional(),
            "off_session": t.proxy(
                renames["mandate_options_off_session_details_blik"]
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["mandate_blik"])
    types["mandate_cashapp"] = t.struct({}).named(renames["mandate_cashapp"])
    types["mandate_link"] = t.struct({}).named(renames["mandate_link"])
    types["mandate_multi_use"] = t.struct({}).named(renames["mandate_multi_use"])
    types["mandate_options_off_session_details_blik"] = t.struct(
        {
            "amount": t.integer().optional(),
            "currency": t.string().optional(),
            "interval": t.string().optional(),
            "interval_count": t.integer().optional(),
        }
    ).named(renames["mandate_options_off_session_details_blik"])
    types["mandate_payment_method_details"] = t.struct(
        {
            "acss_debit": t.proxy(renames["mandate_acss_debit"]).optional(),
            "au_becs_debit": t.proxy(renames["mandate_au_becs_debit"]).optional(),
            "bacs_debit": t.proxy(renames["mandate_bacs_debit"]).optional(),
            "blik": t.proxy(renames["mandate_blik"]).optional(),
            "card": t.proxy(renames["card_mandate_payment_method_details"]).optional(),
            "cashapp": t.proxy(renames["mandate_cashapp"]).optional(),
            "link": t.proxy(renames["mandate_link"]).optional(),
            "paypal": t.proxy(renames["mandate_paypal"]).optional(),
            "sepa_debit": t.proxy(renames["mandate_sepa_debit"]).optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(renames["mandate_us_bank_account"]).optional(),
        }
    ).named(renames["mandate_payment_method_details"])
    types["mandate_paypal"] = t.struct(
        {
            "billing_agreement_id": t.string().optional(),
            "payer_id": t.string().optional(),
        }
    ).named(renames["mandate_paypal"])
    types["mandate_sepa_debit"] = t.struct(
        {"reference": t.string(), "url": t.string()}
    ).named(renames["mandate_sepa_debit"])
    types["mandate_single_use"] = t.struct(
        {"amount": t.integer(), "currency": t.string()}
    ).named(renames["mandate_single_use"])
    types["mandate_us_bank_account"] = t.struct({}).named(
        renames["mandate_us_bank_account"]
    )
    types["networks"] = t.struct(
        {"available": t.array(t.string()), "preferred": t.string().optional()}
    ).named(renames["networks"])
    types["notification_event_data"] = t.struct(
        {"object": t.struct({}), "previous_attributes": t.struct({}).optional()}
    ).named(renames["notification_event_data"])
    types["notification_event_request"] = t.struct(
        {"id": t.string().optional(), "idempotency_key": t.string().optional()}
    ).named(renames["notification_event_request"])
    types["offline_acceptance"] = t.struct({}).named(renames["offline_acceptance"])
    types["online_acceptance"] = t.struct(
        {"ip_address": t.string().optional(), "user_agent": t.string().optional()}
    ).named(renames["online_acceptance"])
    types["outbound_payments_payment_method_details"] = t.struct(
        {
            "billing_details": t.proxy(
                renames["treasury_shared_resource_billing_details"]
            ),
            "financial_account": t.proxy(
                renames["outbound_payments_payment_method_details_financial_account"]
            ).optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["outbound_payments_payment_method_details_us_bank_account"]
            ).optional(),
        }
    ).named(renames["outbound_payments_payment_method_details"])
    types["outbound_payments_payment_method_details_financial_account"] = t.struct(
        {"id": t.string(), "network": t.string()}
    ).named(renames["outbound_payments_payment_method_details_financial_account"])
    types["outbound_payments_payment_method_details_us_bank_account"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["outbound_payments_payment_method_details_us_bank_account"])
    types["outbound_transfers_payment_method_details"] = t.struct(
        {
            "billing_details": t.proxy(
                renames["treasury_shared_resource_billing_details"]
            ),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["outbound_transfers_payment_method_details_us_bank_account"]
            ).optional(),
        }
    ).named(renames["outbound_transfers_payment_method_details"])
    types["outbound_transfers_payment_method_details_us_bank_account"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["outbound_transfers_payment_method_details_us_bank_account"])
    types["package_dimensions"] = t.struct(
        {
            "height": t.number(),
            "length": t.number(),
            "weight": t.number(),
            "width": t.number(),
        }
    ).named(renames["package_dimensions"])
    types["payment_flows_amount_details"] = t.struct(
        {
            "tip": t.proxy(
                renames["payment_flows_amount_details_resource_tip"]
            ).optional()
        }
    ).named(renames["payment_flows_amount_details"])
    types["payment_flows_amount_details_resource_tip"] = t.struct(
        {"amount": t.integer().optional()}
    ).named(renames["payment_flows_amount_details_resource_tip"])
    types["payment_flows_automatic_payment_methods_payment_intent"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_flows_automatic_payment_methods_payment_intent"])
    types["payment_flows_automatic_payment_methods_setup_intent"] = t.struct(
        {"enabled": t.boolean().optional()}
    ).named(renames["payment_flows_automatic_payment_methods_setup_intent"])
    types["payment_flows_installment_options"] = t.struct(
        {
            "enabled": t.boolean(),
            "plan": t.proxy(
                renames["payment_method_details_card_installments_plan"]
            ).optional(),
        }
    ).named(renames["payment_flows_installment_options"])
    types["payment_flows_private_payment_methods_alipay"] = t.struct({}).named(
        renames["payment_flows_private_payment_methods_alipay"]
    )
    types["payment_flows_private_payment_methods_alipay_details"] = t.struct(
        {
            "buyer_id": t.string().optional(),
            "fingerprint": t.string().optional(),
            "transaction_id": t.string().optional(),
        }
    ).named(renames["payment_flows_private_payment_methods_alipay_details"])
    types["payment_flows_private_payment_methods_klarna_dob"] = t.struct(
        {
            "day": t.integer().optional(),
            "month": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["payment_flows_private_payment_methods_klarna_dob"])
    types["payment_intent"] = t.struct(
        {
            "amount": t.integer(),
            "amount_capturable": t.integer(),
            "amount_details": t.proxy(
                renames["payment_flows_amount_details"]
            ).optional(),
            "amount_received": t.integer(),
            "application": t.union(
                [t.string(), t.proxy(renames["application"])]
            ).optional(),
            "application_fee_amount": t.integer().optional(),
            "automatic_payment_methods": t.proxy(
                renames["payment_flows_automatic_payment_methods_payment_intent"]
            ).optional(),
            "canceled_at": t.integer().optional(),
            "cancellation_reason": t.string().optional(),
            "capture_method": t.string(),
            "client_secret": t.string().optional(),
            "confirmation_method": t.string(),
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "description": t.string().optional(),
            "id": t.string(),
            "invoice": t.union([t.string(), t.proxy(renames["invoice"])]).optional(),
            "last_payment_error": t.proxy(renames["api_errors"]).optional(),
            "latest_charge": t.union(
                [t.string(), t.proxy(renames["charge"])]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "next_action": t.proxy(renames["payment_intent_next_action"]).optional(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "payment_method_options": t.proxy(
                renames["payment_intent_payment_method_options"]
            ).optional(),
            "payment_method_types": t.array(t.string()),
            "processing": t.proxy(renames["payment_intent_processing"]).optional(),
            "receipt_email": t.string().optional(),
            "review": t.union([t.string(), t.proxy(renames["review"])]).optional(),
            "setup_future_usage": t.string().optional(),
            "shipping": t.proxy(renames["shipping"]).optional(),
            "source": t.union(
                [
                    t.string(),
                    t.proxy(renames["payment_source"]),
                    t.proxy(renames["deleted_payment_source"]),
                ]
            ).optional(),
            "statement_descriptor": t.string().optional(),
            "statement_descriptor_suffix": t.string().optional(),
            "status": t.string(),
            "transfer_data": t.proxy(renames["transfer_data"]).optional(),
            "transfer_group": t.string().optional(),
        }
    ).named(renames["payment_intent"])
    types["payment_intent_card_processing"] = t.struct(
        {
            "customer_notification": t.proxy(
                renames["payment_intent_processing_customer_notification"]
            ).optional()
        }
    ).named(renames["payment_intent_card_processing"])
    types["payment_intent_next_action"] = t.struct(
        {
            "alipay_handle_redirect": t.proxy(
                renames["payment_intent_next_action_alipay_handle_redirect"]
            ).optional(),
            "boleto_display_details": t.proxy(
                renames["payment_intent_next_action_boleto"]
            ).optional(),
            "card_await_notification": t.proxy(
                renames["payment_intent_next_action_card_await_notification"]
            ).optional(),
            "cashapp_handle_redirect_or_display_qr_code": t.proxy(
                renames[
                    "payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"
                ]
            ).optional(),
            "display_bank_transfer_instructions": t.proxy(
                renames["payment_intent_next_action_display_bank_transfer_instructions"]
            ).optional(),
            "konbini_display_details": t.proxy(
                renames["payment_intent_next_action_konbini"]
            ).optional(),
            "oxxo_display_details": t.proxy(
                renames["payment_intent_next_action_display_oxxo_details"]
            ).optional(),
            "paynow_display_qr_code": t.proxy(
                renames["payment_intent_next_action_paynow_display_qr_code"]
            ).optional(),
            "pix_display_qr_code": t.proxy(
                renames["payment_intent_next_action_pix_display_qr_code"]
            ).optional(),
            "promptpay_display_qr_code": t.proxy(
                renames["payment_intent_next_action_promptpay_display_qr_code"]
            ).optional(),
            "redirect_to_url": t.proxy(
                renames["payment_intent_next_action_redirect_to_url"]
            ).optional(),
            "type": t.string(),
            "use_stripe_sdk": t.struct({}).optional(),
            "verify_with_microdeposits": t.proxy(
                renames["payment_intent_next_action_verify_with_microdeposits"]
            ).optional(),
            "wechat_pay_display_qr_code": t.proxy(
                renames["payment_intent_next_action_wechat_pay_display_qr_code"]
            ).optional(),
            "wechat_pay_redirect_to_android_app": t.proxy(
                renames["payment_intent_next_action_wechat_pay_redirect_to_android_app"]
            ).optional(),
            "wechat_pay_redirect_to_ios_app": t.proxy(
                renames["payment_intent_next_action_wechat_pay_redirect_to_ios_app"]
            ).optional(),
        }
    ).named(renames["payment_intent_next_action"])
    types["payment_intent_next_action_alipay_handle_redirect"] = t.struct(
        {
            "native_data": t.string().optional(),
            "native_url": t.string().optional(),
            "return_url": t.string().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["payment_intent_next_action_alipay_handle_redirect"])
    types["payment_intent_next_action_boleto"] = t.struct(
        {
            "expires_at": t.integer().optional(),
            "hosted_voucher_url": t.string().optional(),
            "number": t.string().optional(),
            "pdf": t.string().optional(),
        }
    ).named(renames["payment_intent_next_action_boleto"])
    types["payment_intent_next_action_card_await_notification"] = t.struct(
        {
            "charge_attempt_at": t.integer().optional(),
            "customer_approval_required": t.boolean().optional(),
        }
    ).named(renames["payment_intent_next_action_card_await_notification"])
    types[
        "payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"
    ] = t.struct(
        {
            "hosted_instructions_url": t.string(),
            "mobile_auth_url": t.string(),
            "qr_code": t.proxy(renames["payment_intent_next_action_cashapp_qr_code"]),
        }
    ).named(
        renames["payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"]
    )
    types["payment_intent_next_action_cashapp_qr_code"] = t.struct(
        {
            "expires_at": t.integer(),
            "image_url_png": t.string(),
            "image_url_svg": t.string(),
        }
    ).named(renames["payment_intent_next_action_cashapp_qr_code"])
    types["payment_intent_next_action_display_bank_transfer_instructions"] = t.struct(
        {
            "amount_remaining": t.integer().optional(),
            "currency": t.string().optional(),
            "financial_addresses": t.array(
                t.proxy(renames["funding_instructions_bank_transfer_financial_address"])
            ).optional(),
            "hosted_instructions_url": t.string().optional(),
            "reference": t.string().optional(),
            "type": t.string(),
        }
    ).named(renames["payment_intent_next_action_display_bank_transfer_instructions"])
    types["payment_intent_next_action_display_oxxo_details"] = t.struct(
        {
            "expires_after": t.integer().optional(),
            "hosted_voucher_url": t.string().optional(),
            "number": t.string().optional(),
        }
    ).named(renames["payment_intent_next_action_display_oxxo_details"])
    types["payment_intent_next_action_konbini"] = t.struct(
        {
            "expires_at": t.integer(),
            "hosted_voucher_url": t.string().optional(),
            "stores": t.proxy(renames["payment_intent_next_action_konbini_stores"]),
        }
    ).named(renames["payment_intent_next_action_konbini"])
    types["payment_intent_next_action_konbini_familymart"] = t.struct(
        {"confirmation_number": t.string().optional(), "payment_code": t.string()}
    ).named(renames["payment_intent_next_action_konbini_familymart"])
    types["payment_intent_next_action_konbini_lawson"] = t.struct(
        {"confirmation_number": t.string().optional(), "payment_code": t.string()}
    ).named(renames["payment_intent_next_action_konbini_lawson"])
    types["payment_intent_next_action_konbini_ministop"] = t.struct(
        {"confirmation_number": t.string().optional(), "payment_code": t.string()}
    ).named(renames["payment_intent_next_action_konbini_ministop"])
    types["payment_intent_next_action_konbini_seicomart"] = t.struct(
        {"confirmation_number": t.string().optional(), "payment_code": t.string()}
    ).named(renames["payment_intent_next_action_konbini_seicomart"])
    types["payment_intent_next_action_konbini_stores"] = t.struct(
        {
            "familymart": t.proxy(
                renames["payment_intent_next_action_konbini_familymart"]
            ).optional(),
            "lawson": t.proxy(
                renames["payment_intent_next_action_konbini_lawson"]
            ).optional(),
            "ministop": t.proxy(
                renames["payment_intent_next_action_konbini_ministop"]
            ).optional(),
            "seicomart": t.proxy(
                renames["payment_intent_next_action_konbini_seicomart"]
            ).optional(),
        }
    ).named(renames["payment_intent_next_action_konbini_stores"])
    types["payment_intent_next_action_paynow_display_qr_code"] = t.struct(
        {
            "data": t.string(),
            "hosted_instructions_url": t.string().optional(),
            "image_url_png": t.string(),
            "image_url_svg": t.string(),
        }
    ).named(renames["payment_intent_next_action_paynow_display_qr_code"])
    types["payment_intent_next_action_pix_display_qr_code"] = t.struct(
        {
            "data": t.string().optional(),
            "expires_at": t.integer().optional(),
            "hosted_instructions_url": t.string().optional(),
            "image_url_png": t.string().optional(),
            "image_url_svg": t.string().optional(),
        }
    ).named(renames["payment_intent_next_action_pix_display_qr_code"])
    types["payment_intent_next_action_promptpay_display_qr_code"] = t.struct(
        {
            "data": t.string(),
            "hosted_instructions_url": t.string(),
            "image_url_png": t.string(),
            "image_url_svg": t.string(),
        }
    ).named(renames["payment_intent_next_action_promptpay_display_qr_code"])
    types["payment_intent_next_action_redirect_to_url"] = t.struct(
        {"return_url": t.string().optional(), "url": t.string().optional()}
    ).named(renames["payment_intent_next_action_redirect_to_url"])
    types["payment_intent_next_action_verify_with_microdeposits"] = t.struct(
        {
            "arrival_date": t.integer(),
            "hosted_verification_url": t.string(),
            "microdeposit_type": t.string().optional(),
        }
    ).named(renames["payment_intent_next_action_verify_with_microdeposits"])
    types["payment_intent_next_action_wechat_pay_display_qr_code"] = t.struct(
        {
            "data": t.string(),
            "hosted_instructions_url": t.string(),
            "image_data_url": t.string(),
            "image_url_png": t.string(),
            "image_url_svg": t.string(),
        }
    ).named(renames["payment_intent_next_action_wechat_pay_display_qr_code"])
    types["payment_intent_next_action_wechat_pay_redirect_to_android_app"] = t.struct(
        {
            "app_id": t.string(),
            "nonce_str": t.string(),
            "package": t.string(),
            "partner_id": t.string(),
            "prepay_id": t.string(),
            "sign": t.string(),
            "timestamp": t.string(),
        }
    ).named(renames["payment_intent_next_action_wechat_pay_redirect_to_android_app"])
    types["payment_intent_next_action_wechat_pay_redirect_to_ios_app"] = t.struct(
        {"native_url": t.string()}
    ).named(renames["payment_intent_next_action_wechat_pay_redirect_to_ios_app"])
    types["payment_intent_payment_method_options"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["payment_intent_payment_method_options_acss_debit"]
            ).optional(),
            "affirm": t.proxy(renames["payment_method_options_affirm"]).optional(),
            "afterpay_clearpay": t.proxy(
                renames["payment_method_options_afterpay_clearpay"]
            ).optional(),
            "alipay": t.proxy(renames["payment_method_options_alipay"]).optional(),
            "au_becs_debit": t.proxy(
                renames["payment_intent_payment_method_options_au_becs_debit"]
            ).optional(),
            "bacs_debit": t.proxy(
                renames["payment_method_options_bacs_debit"]
            ).optional(),
            "bancontact": t.proxy(
                renames["payment_method_options_bancontact"]
            ).optional(),
            "blik": t.proxy(
                renames["payment_intent_payment_method_options_blik"]
            ).optional(),
            "boleto": t.proxy(renames["payment_method_options_boleto"]).optional(),
            "card": t.proxy(
                renames["payment_intent_payment_method_options_card"]
            ).optional(),
            "card_present": t.proxy(
                renames["payment_method_options_card_present"]
            ).optional(),
            "cashapp": t.proxy(renames["payment_method_options_cashapp"]).optional(),
            "customer_balance": t.proxy(
                renames["payment_method_options_customer_balance"]
            ).optional(),
            "eps": t.proxy(
                renames["payment_intent_payment_method_options_eps"]
            ).optional(),
            "fpx": t.proxy(renames["payment_method_options_fpx"]).optional(),
            "giropay": t.proxy(renames["payment_method_options_giropay"]).optional(),
            "grabpay": t.proxy(renames["payment_method_options_grabpay"]).optional(),
            "ideal": t.proxy(renames["payment_method_options_ideal"]).optional(),
            "interac_present": t.proxy(
                renames["payment_method_options_interac_present"]
            ).optional(),
            "klarna": t.proxy(renames["payment_method_options_klarna"]).optional(),
            "konbini": t.proxy(renames["payment_method_options_konbini"]).optional(),
            "link": t.proxy(
                renames["payment_intent_payment_method_options_link"]
            ).optional(),
            "oxxo": t.proxy(renames["payment_method_options_oxxo"]).optional(),
            "p24": t.proxy(renames["payment_method_options_p24"]).optional(),
            "paynow": t.proxy(renames["payment_method_options_paynow"]).optional(),
            "paypal": t.proxy(renames["payment_method_options_paypal"]).optional(),
            "pix": t.proxy(renames["payment_method_options_pix"]).optional(),
            "promptpay": t.proxy(
                renames["payment_method_options_promptpay"]
            ).optional(),
            "sepa_debit": t.proxy(
                renames["payment_intent_payment_method_options_sepa_debit"]
            ).optional(),
            "sofort": t.proxy(renames["payment_method_options_sofort"]).optional(),
            "us_bank_account": t.proxy(
                renames["payment_intent_payment_method_options_us_bank_account"]
            ).optional(),
            "wechat_pay": t.proxy(
                renames["payment_method_options_wechat_pay"]
            ).optional(),
        }
    ).named(renames["payment_intent_payment_method_options"])
    types["payment_intent_payment_method_options_acss_debit"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames[
                    "payment_intent_payment_method_options_mandate_options_acss_debit"
                ]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["payment_intent_payment_method_options_acss_debit"])
    types["payment_intent_payment_method_options_au_becs_debit"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_intent_payment_method_options_au_becs_debit"])
    types["payment_intent_payment_method_options_blik"] = t.struct({}).named(
        renames["payment_intent_payment_method_options_blik"]
    )
    types["payment_intent_payment_method_options_card"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "installments": t.proxy(
                renames["payment_method_options_card_installments"]
            ).optional(),
            "mandate_options": t.proxy(
                renames["payment_method_options_card_mandate_options"]
            ).optional(),
            "network": t.string().optional(),
            "request_three_d_secure": t.string().optional(),
            "setup_future_usage": t.string().optional(),
            "statement_descriptor_suffix_kana": t.string().optional(),
            "statement_descriptor_suffix_kanji": t.string().optional(),
        }
    ).named(renames["payment_intent_payment_method_options_card"])
    types["payment_intent_payment_method_options_eps"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_intent_payment_method_options_eps"])
    types["payment_intent_payment_method_options_link"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "persistent_token": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_intent_payment_method_options_link"])
    types[
        "payment_intent_payment_method_options_mandate_options_acss_debit"
    ] = t.struct(
        {
            "custom_mandate_url": t.string().optional(),
            "interval_description": t.string().optional(),
            "payment_schedule": t.string().optional(),
            "transaction_type": t.string().optional(),
        }
    ).named(
        renames["payment_intent_payment_method_options_mandate_options_acss_debit"]
    )
    types[
        "payment_intent_payment_method_options_mandate_options_sepa_debit"
    ] = t.struct({}).named(
        renames["payment_intent_payment_method_options_mandate_options_sepa_debit"]
    )
    types["payment_intent_payment_method_options_sepa_debit"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames[
                    "payment_intent_payment_method_options_mandate_options_sepa_debit"
                ]
            ).optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_intent_payment_method_options_sepa_debit"])
    types["payment_intent_payment_method_options_us_bank_account"] = t.struct(
        {
            "financial_connections": t.proxy(
                renames["linked_account_options_us_bank_account"]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["payment_intent_payment_method_options_us_bank_account"])
    types["payment_intent_processing"] = t.struct(
        {
            "card": t.proxy(renames["payment_intent_card_processing"]).optional(),
            "type": t.string(),
        }
    ).named(renames["payment_intent_processing"])
    types["payment_intent_processing_customer_notification"] = t.struct(
        {
            "approval_requested": t.boolean().optional(),
            "completes_at": t.integer().optional(),
        }
    ).named(renames["payment_intent_processing_customer_notification"])
    types["payment_intent_type_specific_payment_method_options_client"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "installments": t.proxy(
                renames["payment_flows_installment_options"]
            ).optional(),
            "setup_future_usage": t.string().optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["payment_intent_type_specific_payment_method_options_client"])
    types["payment_link"] = t.struct(
        {
            "active": t.boolean(),
            "after_completion": t.proxy(
                renames["payment_links_resource_after_completion"]
            ),
            "allow_promotion_codes": t.boolean(),
            "application_fee_amount": t.integer().optional(),
            "application_fee_percent": t.number().optional(),
            "automatic_tax": t.proxy(renames["payment_links_resource_automatic_tax"]),
            "billing_address_collection": t.string(),
            "consent_collection": t.proxy(
                renames["payment_links_resource_consent_collection"]
            ).optional(),
            "currency": t.string(),
            "custom_fields": t.array(
                t.proxy(renames["payment_links_resource_custom_fields"])
            ),
            "custom_text": t.proxy(renames["payment_links_resource_custom_text"]),
            "customer_creation": t.string(),
            "id": t.string(),
            "invoice_creation": t.proxy(
                renames["payment_links_resource_invoice_creation"]
            ).optional(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "payment_intent_data": t.proxy(
                renames["payment_links_resource_payment_intent_data"]
            ).optional(),
            "payment_method_collection": t.string(),
            "payment_method_types": t.array(t.string()).optional(),
            "phone_number_collection": t.proxy(
                renames["payment_links_resource_phone_number_collection"]
            ),
            "shipping_address_collection": t.proxy(
                renames["payment_links_resource_shipping_address_collection"]
            ).optional(),
            "shipping_options": t.array(
                t.proxy(renames["payment_links_resource_shipping_option"])
            ),
            "submit_type": t.string(),
            "subscription_data": t.proxy(
                renames["payment_links_resource_subscription_data"]
            ).optional(),
            "tax_id_collection": t.proxy(
                renames["payment_links_resource_tax_id_collection"]
            ),
            "transfer_data": t.proxy(
                renames["payment_links_resource_transfer_data"]
            ).optional(),
            "url": t.string(),
        }
    ).named(renames["payment_link"])
    types["payment_links_resource_after_completion"] = t.struct(
        {
            "hosted_confirmation": t.proxy(
                renames["payment_links_resource_completion_behavior_confirmation_page"]
            ).optional(),
            "redirect": t.proxy(
                renames["payment_links_resource_completion_behavior_redirect"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["payment_links_resource_after_completion"])
    types["payment_links_resource_automatic_tax"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_links_resource_automatic_tax"])
    types["payment_links_resource_completion_behavior_confirmation_page"] = t.struct(
        {"custom_message": t.string().optional()}
    ).named(renames["payment_links_resource_completion_behavior_confirmation_page"])
    types["payment_links_resource_completion_behavior_redirect"] = t.struct(
        {"url": t.string()}
    ).named(renames["payment_links_resource_completion_behavior_redirect"])
    types["payment_links_resource_consent_collection"] = t.struct(
        {"promotions": t.string().optional(), "terms_of_service": t.string().optional()}
    ).named(renames["payment_links_resource_consent_collection"])
    types["payment_links_resource_custom_fields"] = t.struct(
        {
            "dropdown": t.proxy(
                renames["payment_links_resource_custom_fields_dropdown"]
            ).optional(),
            "key": t.string(),
            "label": t.proxy(renames["payment_links_resource_custom_fields_label"]),
            "optional": t.boolean(),
            "type": t.string(),
        }
    ).named(renames["payment_links_resource_custom_fields"])
    types["payment_links_resource_custom_fields_dropdown"] = t.struct(
        {
            "options": t.array(
                t.proxy(renames["payment_links_resource_custom_fields_dropdown_option"])
            )
        }
    ).named(renames["payment_links_resource_custom_fields_dropdown"])
    types["payment_links_resource_custom_fields_dropdown_option"] = t.struct(
        {"label": t.string(), "value": t.string()}
    ).named(renames["payment_links_resource_custom_fields_dropdown_option"])
    types["payment_links_resource_custom_fields_label"] = t.struct(
        {"custom": t.string().optional(), "type": t.string()}
    ).named(renames["payment_links_resource_custom_fields_label"])
    types["payment_links_resource_custom_text"] = t.struct(
        {
            "shipping_address": t.proxy(
                renames["payment_links_resource_custom_text_position"]
            ).optional(),
            "submit": t.proxy(
                renames["payment_links_resource_custom_text_position"]
            ).optional(),
        }
    ).named(renames["payment_links_resource_custom_text"])
    types["payment_links_resource_custom_text_position"] = t.struct(
        {"message": t.string()}
    ).named(renames["payment_links_resource_custom_text_position"])
    types["payment_links_resource_invoice_creation"] = t.struct(
        {
            "enabled": t.boolean(),
            "invoice_data": t.proxy(
                renames["payment_links_resource_invoice_settings"]
            ).optional(),
        }
    ).named(renames["payment_links_resource_invoice_creation"])
    types["payment_links_resource_invoice_settings"] = t.struct(
        {
            "account_tax_ids": t.array(
                t.union(
                    [
                        t.string(),
                        t.proxy(renames["tax_id"]),
                        t.proxy(renames["deleted_tax_id"]),
                    ]
                )
            ).optional(),
            "custom_fields": t.array(
                t.proxy(renames["invoice_setting_custom_field"])
            ).optional(),
            "description": t.string().optional(),
            "footer": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "rendering_options": t.proxy(
                renames["invoice_setting_rendering_options"]
            ).optional(),
        }
    ).named(renames["payment_links_resource_invoice_settings"])
    types["payment_links_resource_payment_intent_data"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_links_resource_payment_intent_data"])
    types["payment_links_resource_phone_number_collection"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_links_resource_phone_number_collection"])
    types["payment_links_resource_shipping_address_collection"] = t.struct(
        {"allowed_countries": t.array(t.string())}
    ).named(renames["payment_links_resource_shipping_address_collection"])
    types["payment_links_resource_shipping_option"] = t.struct(
        {
            "shipping_amount": t.integer(),
            "shipping_rate": t.union([t.string(), t.proxy(renames["shipping_rate"])]),
        }
    ).named(renames["payment_links_resource_shipping_option"])
    types["payment_links_resource_subscription_data"] = t.struct(
        {
            "description": t.string().optional(),
            "trial_period_days": t.integer().optional(),
        }
    ).named(renames["payment_links_resource_subscription_data"])
    types["payment_links_resource_tax_id_collection"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_links_resource_tax_id_collection"])
    types["payment_links_resource_transfer_data"] = t.struct(
        {
            "amount": t.integer().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["payment_links_resource_transfer_data"])
    types["payment_method"] = t.struct(
        {
            "acss_debit": t.proxy(renames["payment_method_acss_debit"]).optional(),
            "affirm": t.proxy(renames["payment_method_affirm"]).optional(),
            "afterpay_clearpay": t.proxy(
                renames["payment_method_afterpay_clearpay"]
            ).optional(),
            "alipay": t.proxy(
                renames["payment_flows_private_payment_methods_alipay"]
            ).optional(),
            "au_becs_debit": t.proxy(
                renames["payment_method_au_becs_debit"]
            ).optional(),
            "bacs_debit": t.proxy(renames["payment_method_bacs_debit"]).optional(),
            "bancontact": t.proxy(renames["payment_method_bancontact"]).optional(),
            "billing_details": t.proxy(renames["billing_details"]),
            "blik": t.proxy(renames["payment_method_blik"]).optional(),
            "boleto": t.proxy(renames["payment_method_boleto"]).optional(),
            "card": t.proxy(renames["payment_method_card"]).optional(),
            "card_present": t.proxy(renames["payment_method_card_present"]).optional(),
            "cashapp": t.proxy(renames["payment_method_cashapp"]).optional(),
            "created": t.integer(),
            "customer": t.union([t.string(), t.proxy(renames["customer"])]).optional(),
            "customer_balance": t.proxy(
                renames["payment_method_customer_balance"]
            ).optional(),
            "eps": t.proxy(renames["payment_method_eps"]).optional(),
            "fpx": t.proxy(renames["payment_method_fpx"]).optional(),
            "giropay": t.proxy(renames["payment_method_giropay"]).optional(),
            "grabpay": t.proxy(renames["payment_method_grabpay"]).optional(),
            "id": t.string(),
            "ideal": t.proxy(renames["payment_method_ideal"]).optional(),
            "interac_present": t.proxy(
                renames["payment_method_interac_present"]
            ).optional(),
            "klarna": t.proxy(renames["payment_method_klarna"]).optional(),
            "konbini": t.proxy(renames["payment_method_konbini"]).optional(),
            "link": t.proxy(renames["payment_method_link"]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "oxxo": t.proxy(renames["payment_method_oxxo"]).optional(),
            "p24": t.proxy(renames["payment_method_p24"]).optional(),
            "paynow": t.proxy(renames["payment_method_paynow"]).optional(),
            "paypal": t.proxy(renames["payment_method_paypal"]).optional(),
            "pix": t.proxy(renames["payment_method_pix"]).optional(),
            "promptpay": t.proxy(renames["payment_method_promptpay"]).optional(),
            "radar_options": t.proxy(renames["radar_radar_options"]).optional(),
            "sepa_debit": t.proxy(renames["payment_method_sepa_debit"]).optional(),
            "sofort": t.proxy(renames["payment_method_sofort"]).optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["payment_method_us_bank_account"]
            ).optional(),
            "wechat_pay": t.proxy(renames["payment_method_wechat_pay"]).optional(),
        }
    ).named(renames["payment_method"])
    types["payment_method_acss_debit"] = t.struct(
        {
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "institution_number": t.string().optional(),
            "last4": t.string().optional(),
            "transit_number": t.string().optional(),
        }
    ).named(renames["payment_method_acss_debit"])
    types["payment_method_affirm"] = t.struct({}).named(
        renames["payment_method_affirm"]
    )
    types["payment_method_afterpay_clearpay"] = t.struct({}).named(
        renames["payment_method_afterpay_clearpay"]
    )
    types["payment_method_au_becs_debit"] = t.struct(
        {
            "bsb_number": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
        }
    ).named(renames["payment_method_au_becs_debit"])
    types["payment_method_bacs_debit"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "sort_code": t.string().optional(),
        }
    ).named(renames["payment_method_bacs_debit"])
    types["payment_method_bancontact"] = t.struct({}).named(
        renames["payment_method_bancontact"]
    )
    types["payment_method_blik"] = t.struct({}).named(renames["payment_method_blik"])
    types["payment_method_boleto"] = t.struct({"tax_id": t.string()}).named(
        renames["payment_method_boleto"]
    )
    types["payment_method_card"] = t.struct(
        {
            "brand": t.string(),
            "checks": t.proxy(renames["payment_method_card_checks"]).optional(),
            "country": t.string().optional(),
            "description": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string(),
            "networks": t.proxy(renames["networks"]).optional(),
            "three_d_secure_usage": t.proxy(renames["three_d_secure_usage"]).optional(),
            "wallet": t.proxy(renames["payment_method_card_wallet"]).optional(),
        }
    ).named(renames["payment_method_card"])
    types["payment_method_card_checks"] = t.struct(
        {
            "address_line1_check": t.string().optional(),
            "address_postal_code_check": t.string().optional(),
            "cvc_check": t.string().optional(),
        }
    ).named(renames["payment_method_card_checks"])
    types["payment_method_card_present"] = t.struct(
        {
            "brand": t.string().optional(),
            "cardholder_name": t.string().optional(),
            "country": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "last4": t.string().optional(),
            "networks": t.proxy(
                renames["payment_method_card_present_networks"]
            ).optional(),
            "read_method": t.string().optional(),
        }
    ).named(renames["payment_method_card_present"])
    types["payment_method_card_present_networks"] = t.struct(
        {"available": t.array(t.string()), "preferred": t.string().optional()}
    ).named(renames["payment_method_card_present_networks"])
    types["payment_method_card_wallet"] = t.struct(
        {
            "amex_express_checkout": t.proxy(
                renames["payment_method_card_wallet_amex_express_checkout"]
            ).optional(),
            "apple_pay": t.proxy(
                renames["payment_method_card_wallet_apple_pay"]
            ).optional(),
            "dynamic_last4": t.string().optional(),
            "google_pay": t.proxy(
                renames["payment_method_card_wallet_google_pay"]
            ).optional(),
            "link": t.proxy(renames["payment_method_card_wallet_link"]).optional(),
            "masterpass": t.proxy(
                renames["payment_method_card_wallet_masterpass"]
            ).optional(),
            "samsung_pay": t.proxy(
                renames["payment_method_card_wallet_samsung_pay"]
            ).optional(),
            "type": t.string(),
            "visa_checkout": t.proxy(
                renames["payment_method_card_wallet_visa_checkout"]
            ).optional(),
        }
    ).named(renames["payment_method_card_wallet"])
    types["payment_method_card_wallet_amex_express_checkout"] = t.struct({}).named(
        renames["payment_method_card_wallet_amex_express_checkout"]
    )
    types["payment_method_card_wallet_apple_pay"] = t.struct({}).named(
        renames["payment_method_card_wallet_apple_pay"]
    )
    types["payment_method_card_wallet_google_pay"] = t.struct({}).named(
        renames["payment_method_card_wallet_google_pay"]
    )
    types["payment_method_card_wallet_link"] = t.struct({}).named(
        renames["payment_method_card_wallet_link"]
    )
    types["payment_method_card_wallet_masterpass"] = t.struct(
        {
            "billing_address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "shipping_address": t.proxy(renames["address"]).optional(),
        }
    ).named(renames["payment_method_card_wallet_masterpass"])
    types["payment_method_card_wallet_samsung_pay"] = t.struct({}).named(
        renames["payment_method_card_wallet_samsung_pay"]
    )
    types["payment_method_card_wallet_visa_checkout"] = t.struct(
        {
            "billing_address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "shipping_address": t.proxy(renames["address"]).optional(),
        }
    ).named(renames["payment_method_card_wallet_visa_checkout"])
    types["payment_method_cashapp"] = t.struct(
        {"buyer_id": t.string().optional(), "cashtag": t.string().optional()}
    ).named(renames["payment_method_cashapp"])
    types["payment_method_customer_balance"] = t.struct({}).named(
        renames["payment_method_customer_balance"]
    )
    types["payment_method_details"] = t.struct(
        {
            "ach_credit_transfer": t.proxy(
                renames["payment_method_details_ach_credit_transfer"]
            ).optional(),
            "ach_debit": t.proxy(
                renames["payment_method_details_ach_debit"]
            ).optional(),
            "acss_debit": t.proxy(
                renames["payment_method_details_acss_debit"]
            ).optional(),
            "affirm": t.proxy(renames["payment_method_details_affirm"]).optional(),
            "afterpay_clearpay": t.proxy(
                renames["payment_method_details_afterpay_clearpay"]
            ).optional(),
            "alipay": t.proxy(
                renames["payment_flows_private_payment_methods_alipay_details"]
            ).optional(),
            "au_becs_debit": t.proxy(
                renames["payment_method_details_au_becs_debit"]
            ).optional(),
            "bacs_debit": t.proxy(
                renames["payment_method_details_bacs_debit"]
            ).optional(),
            "bancontact": t.proxy(
                renames["payment_method_details_bancontact"]
            ).optional(),
            "blik": t.proxy(renames["payment_method_details_blik"]).optional(),
            "boleto": t.proxy(renames["payment_method_details_boleto"]).optional(),
            "card": t.proxy(renames["payment_method_details_card"]).optional(),
            "card_present": t.proxy(
                renames["payment_method_details_card_present"]
            ).optional(),
            "cashapp": t.proxy(renames["payment_method_details_cashapp"]).optional(),
            "customer_balance": t.proxy(
                renames["payment_method_details_customer_balance"]
            ).optional(),
            "eps": t.proxy(renames["payment_method_details_eps"]).optional(),
            "fpx": t.proxy(renames["payment_method_details_fpx"]).optional(),
            "giropay": t.proxy(renames["payment_method_details_giropay"]).optional(),
            "grabpay": t.proxy(renames["payment_method_details_grabpay"]).optional(),
            "ideal": t.proxy(renames["payment_method_details_ideal"]).optional(),
            "interac_present": t.proxy(
                renames["payment_method_details_interac_present"]
            ).optional(),
            "klarna": t.proxy(renames["payment_method_details_klarna"]).optional(),
            "konbini": t.proxy(renames["payment_method_details_konbini"]).optional(),
            "link": t.proxy(renames["payment_method_details_link"]).optional(),
            "multibanco": t.proxy(
                renames["payment_method_details_multibanco"]
            ).optional(),
            "oxxo": t.proxy(renames["payment_method_details_oxxo"]).optional(),
            "p24": t.proxy(renames["payment_method_details_p24"]).optional(),
            "paynow": t.proxy(renames["payment_method_details_paynow"]).optional(),
            "paypal": t.proxy(renames["payment_method_details_paypal"]).optional(),
            "pix": t.proxy(renames["payment_method_details_pix"]).optional(),
            "promptpay": t.proxy(
                renames["payment_method_details_promptpay"]
            ).optional(),
            "sepa_credit_transfer": t.proxy(
                renames["payment_method_details_sepa_credit_transfer"]
            ).optional(),
            "sepa_debit": t.proxy(
                renames["payment_method_details_sepa_debit"]
            ).optional(),
            "sofort": t.proxy(renames["payment_method_details_sofort"]).optional(),
            "stripe_account": t.proxy(
                renames["payment_method_details_stripe_account"]
            ).optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["payment_method_details_us_bank_account"]
            ).optional(),
            "wechat": t.proxy(renames["payment_method_details_wechat"]).optional(),
            "wechat_pay": t.proxy(
                renames["payment_method_details_wechat_pay"]
            ).optional(),
        }
    ).named(renames["payment_method_details"])
    types["payment_method_details_ach_credit_transfer"] = t.struct(
        {
            "account_number": t.string().optional(),
            "bank_name": t.string().optional(),
            "routing_number": t.string().optional(),
            "swift_code": t.string().optional(),
        }
    ).named(renames["payment_method_details_ach_credit_transfer"])
    types["payment_method_details_ach_debit"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["payment_method_details_ach_debit"])
    types["payment_method_details_acss_debit"] = t.struct(
        {
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "institution_number": t.string().optional(),
            "last4": t.string().optional(),
            "mandate": t.string().optional(),
            "transit_number": t.string().optional(),
        }
    ).named(renames["payment_method_details_acss_debit"])
    types["payment_method_details_affirm"] = t.struct({}).named(
        renames["payment_method_details_affirm"]
    )
    types["payment_method_details_afterpay_clearpay"] = t.struct(
        {"reference": t.string().optional()}
    ).named(renames["payment_method_details_afterpay_clearpay"])
    types["payment_method_details_au_becs_debit"] = t.struct(
        {
            "bsb_number": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "mandate": t.string().optional(),
        }
    ).named(renames["payment_method_details_au_becs_debit"])
    types["payment_method_details_bacs_debit"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "mandate": t.string().optional(),
            "sort_code": t.string().optional(),
        }
    ).named(renames["payment_method_details_bacs_debit"])
    types["payment_method_details_bancontact"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["payment_method_details_bancontact"])
    types["payment_method_details_blik"] = t.struct({}).named(
        renames["payment_method_details_blik"]
    )
    types["payment_method_details_boleto"] = t.struct({"tax_id": t.string()}).named(
        renames["payment_method_details_boleto"]
    )
    types["payment_method_details_card"] = t.struct(
        {
            "brand": t.string().optional(),
            "checks": t.proxy(renames["payment_method_details_card_checks"]).optional(),
            "country": t.string().optional(),
            "description": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "iin": t.string().optional(),
            "installments": t.proxy(
                renames["payment_method_details_card_installments"]
            ).optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "mandate": t.string().optional(),
            "moto": t.boolean().optional(),
            "network": t.string().optional(),
            "network_token": t.proxy(
                renames["payment_method_details_card_network_token"]
            ).optional(),
            "three_d_secure": t.proxy(renames["three_d_secure_details"]).optional(),
            "wallet": t.proxy(renames["payment_method_details_card_wallet"]).optional(),
        }
    ).named(renames["payment_method_details_card"])
    types["payment_method_details_card_checks"] = t.struct(
        {
            "address_line1_check": t.string().optional(),
            "address_postal_code_check": t.string().optional(),
            "cvc_check": t.string().optional(),
        }
    ).named(renames["payment_method_details_card_checks"])
    types["payment_method_details_card_installments"] = t.struct(
        {
            "plan": t.proxy(
                renames["payment_method_details_card_installments_plan"]
            ).optional()
        }
    ).named(renames["payment_method_details_card_installments"])
    types["payment_method_details_card_installments_plan"] = t.struct(
        {
            "count": t.integer().optional(),
            "interval": t.string().optional(),
            "type": t.string(),
        }
    ).named(renames["payment_method_details_card_installments_plan"])
    types["payment_method_details_card_network_token"] = t.struct(
        {"used": t.boolean()}
    ).named(renames["payment_method_details_card_network_token"])
    types["payment_method_details_card_present"] = t.struct(
        {
            "amount_authorized": t.integer().optional(),
            "brand": t.string().optional(),
            "capture_before": t.integer().optional(),
            "cardholder_name": t.string().optional(),
            "country": t.string().optional(),
            "description": t.string().optional(),
            "emv_auth_data": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "generated_card": t.string().optional(),
            "iin": t.string().optional(),
            "incremental_authorization_supported": t.boolean(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string().optional(),
            "overcapture_supported": t.boolean(),
            "read_method": t.string().optional(),
            "receipt": t.proxy(
                renames["payment_method_details_card_present_receipt"]
            ).optional(),
        }
    ).named(renames["payment_method_details_card_present"])
    types["payment_method_details_card_present_receipt"] = t.struct(
        {
            "account_type": t.string().optional(),
            "application_cryptogram": t.string().optional(),
            "application_preferred_name": t.string().optional(),
            "authorization_code": t.string().optional(),
            "authorization_response_code": t.string().optional(),
            "cardholder_verification_method": t.string().optional(),
            "dedicated_file_name": t.string().optional(),
            "terminal_verification_results": t.string().optional(),
            "transaction_status_information": t.string().optional(),
        }
    ).named(renames["payment_method_details_card_present_receipt"])
    types["payment_method_details_card_wallet"] = t.struct(
        {
            "amex_express_checkout": t.proxy(
                renames["payment_method_details_card_wallet_amex_express_checkout"]
            ).optional(),
            "apple_pay": t.proxy(
                renames["payment_method_details_card_wallet_apple_pay"]
            ).optional(),
            "dynamic_last4": t.string().optional(),
            "google_pay": t.proxy(
                renames["payment_method_details_card_wallet_google_pay"]
            ).optional(),
            "link": t.proxy(
                renames["payment_method_details_card_wallet_link"]
            ).optional(),
            "masterpass": t.proxy(
                renames["payment_method_details_card_wallet_masterpass"]
            ).optional(),
            "samsung_pay": t.proxy(
                renames["payment_method_details_card_wallet_samsung_pay"]
            ).optional(),
            "type": t.string(),
            "visa_checkout": t.proxy(
                renames["payment_method_details_card_wallet_visa_checkout"]
            ).optional(),
        }
    ).named(renames["payment_method_details_card_wallet"])
    types["payment_method_details_card_wallet_amex_express_checkout"] = t.struct(
        {}
    ).named(renames["payment_method_details_card_wallet_amex_express_checkout"])
    types["payment_method_details_card_wallet_apple_pay"] = t.struct({}).named(
        renames["payment_method_details_card_wallet_apple_pay"]
    )
    types["payment_method_details_card_wallet_google_pay"] = t.struct({}).named(
        renames["payment_method_details_card_wallet_google_pay"]
    )
    types["payment_method_details_card_wallet_link"] = t.struct({}).named(
        renames["payment_method_details_card_wallet_link"]
    )
    types["payment_method_details_card_wallet_masterpass"] = t.struct(
        {
            "billing_address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "shipping_address": t.proxy(renames["address"]).optional(),
        }
    ).named(renames["payment_method_details_card_wallet_masterpass"])
    types["payment_method_details_card_wallet_samsung_pay"] = t.struct({}).named(
        renames["payment_method_details_card_wallet_samsung_pay"]
    )
    types["payment_method_details_card_wallet_visa_checkout"] = t.struct(
        {
            "billing_address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "shipping_address": t.proxy(renames["address"]).optional(),
        }
    ).named(renames["payment_method_details_card_wallet_visa_checkout"])
    types["payment_method_details_cashapp"] = t.struct(
        {"buyer_id": t.string().optional(), "cashtag": t.string().optional()}
    ).named(renames["payment_method_details_cashapp"])
    types["payment_method_details_customer_balance"] = t.struct({}).named(
        renames["payment_method_details_customer_balance"]
    )
    types["payment_method_details_eps"] = t.struct(
        {"bank": t.string().optional(), "verified_name": t.string().optional()}
    ).named(renames["payment_method_details_eps"])
    types["payment_method_details_fpx"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "bank": t.string(),
            "transaction_id": t.string().optional(),
        }
    ).named(renames["payment_method_details_fpx"])
    types["payment_method_details_giropay"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["payment_method_details_giropay"])
    types["payment_method_details_grabpay"] = t.struct(
        {"transaction_id": t.string().optional()}
    ).named(renames["payment_method_details_grabpay"])
    types["payment_method_details_ideal"] = t.struct(
        {
            "bank": t.string().optional(),
            "bic": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["payment_method_details_ideal"])
    types["payment_method_details_interac_present"] = t.struct(
        {
            "brand": t.string().optional(),
            "cardholder_name": t.string().optional(),
            "country": t.string().optional(),
            "description": t.string().optional(),
            "emv_auth_data": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "generated_card": t.string().optional(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string().optional(),
            "preferred_locales": t.array(t.string()).optional(),
            "read_method": t.string().optional(),
            "receipt": t.proxy(
                renames["payment_method_details_interac_present_receipt"]
            ).optional(),
        }
    ).named(renames["payment_method_details_interac_present"])
    types["payment_method_details_interac_present_receipt"] = t.struct(
        {
            "account_type": t.string().optional(),
            "application_cryptogram": t.string().optional(),
            "application_preferred_name": t.string().optional(),
            "authorization_code": t.string().optional(),
            "authorization_response_code": t.string().optional(),
            "cardholder_verification_method": t.string().optional(),
            "dedicated_file_name": t.string().optional(),
            "terminal_verification_results": t.string().optional(),
            "transaction_status_information": t.string().optional(),
        }
    ).named(renames["payment_method_details_interac_present_receipt"])
    types["payment_method_details_klarna"] = t.struct(
        {
            "payment_method_category": t.string().optional(),
            "preferred_locale": t.string().optional(),
        }
    ).named(renames["payment_method_details_klarna"])
    types["payment_method_details_konbini"] = t.struct(
        {"store": t.proxy(renames["payment_method_details_konbini_store"]).optional()}
    ).named(renames["payment_method_details_konbini"])
    types["payment_method_details_konbini_store"] = t.struct(
        {"chain": t.string().optional()}
    ).named(renames["payment_method_details_konbini_store"])
    types["payment_method_details_link"] = t.struct(
        {"country": t.string().optional()}
    ).named(renames["payment_method_details_link"])
    types["payment_method_details_multibanco"] = t.struct(
        {"entity": t.string().optional(), "reference": t.string().optional()}
    ).named(renames["payment_method_details_multibanco"])
    types["payment_method_details_oxxo"] = t.struct(
        {"number": t.string().optional()}
    ).named(renames["payment_method_details_oxxo"])
    types["payment_method_details_p24"] = t.struct(
        {
            "bank": t.string().optional(),
            "reference": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["payment_method_details_p24"])
    types["payment_method_details_paynow"] = t.struct(
        {"reference": t.string().optional()}
    ).named(renames["payment_method_details_paynow"])
    types["payment_method_details_paypal"] = t.struct(
        {
            "payer_email": t.string().optional(),
            "payer_id": t.string().optional(),
            "payer_name": t.string().optional(),
            "seller_protection": t.proxy(
                renames["paypal_seller_protection"]
            ).optional(),
            "transaction_id": t.string().optional(),
        }
    ).named(renames["payment_method_details_paypal"])
    types["payment_method_details_pix"] = t.struct(
        {"bank_transaction_id": t.string().optional()}
    ).named(renames["payment_method_details_pix"])
    types["payment_method_details_promptpay"] = t.struct(
        {"reference": t.string().optional()}
    ).named(renames["payment_method_details_promptpay"])
    types["payment_method_details_sepa_credit_transfer"] = t.struct(
        {
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "iban": t.string().optional(),
        }
    ).named(renames["payment_method_details_sepa_credit_transfer"])
    types["payment_method_details_sepa_debit"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "branch_code": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "mandate": t.string().optional(),
        }
    ).named(renames["payment_method_details_sepa_debit"])
    types["payment_method_details_sofort"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "country": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["payment_method_details_sofort"])
    types["payment_method_details_stripe_account"] = t.struct({}).named(
        renames["payment_method_details_stripe_account"]
    )
    types["payment_method_details_us_bank_account"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["payment_method_details_us_bank_account"])
    types["payment_method_details_wechat"] = t.struct({}).named(
        renames["payment_method_details_wechat"]
    )
    types["payment_method_details_wechat_pay"] = t.struct(
        {"fingerprint": t.string().optional(), "transaction_id": t.string().optional()}
    ).named(renames["payment_method_details_wechat_pay"])
    types["payment_method_eps"] = t.struct({"bank": t.string().optional()}).named(
        renames["payment_method_eps"]
    )
    types["payment_method_fpx"] = t.struct(
        {"account_holder_type": t.string().optional(), "bank": t.string()}
    ).named(renames["payment_method_fpx"])
    types["payment_method_giropay"] = t.struct({}).named(
        renames["payment_method_giropay"]
    )
    types["payment_method_grabpay"] = t.struct({}).named(
        renames["payment_method_grabpay"]
    )
    types["payment_method_ideal"] = t.struct(
        {"bank": t.string().optional(), "bic": t.string().optional()}
    ).named(renames["payment_method_ideal"])
    types["payment_method_interac_present"] = t.struct(
        {
            "brand": t.string().optional(),
            "cardholder_name": t.string().optional(),
            "country": t.string().optional(),
            "exp_month": t.integer(),
            "exp_year": t.integer(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "last4": t.string().optional(),
            "networks": t.proxy(
                renames["payment_method_card_present_networks"]
            ).optional(),
            "preferred_locales": t.array(t.string()).optional(),
            "read_method": t.string().optional(),
        }
    ).named(renames["payment_method_interac_present"])
    types["payment_method_klarna"] = t.struct(
        {
            "dob": t.proxy(
                renames["payment_flows_private_payment_methods_klarna_dob"]
            ).optional()
        }
    ).named(renames["payment_method_klarna"])
    types["payment_method_konbini"] = t.struct({}).named(
        renames["payment_method_konbini"]
    )
    types["payment_method_link"] = t.struct(
        {
            "country": t.string().optional(),
            "email": t.string().optional(),
            "persistent_token": t.string().optional(),
        }
    ).named(renames["payment_method_link"])
    types["payment_method_options_affirm"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "preferred_locale": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_affirm"])
    types["payment_method_options_afterpay_clearpay"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "reference": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_afterpay_clearpay"])
    types["payment_method_options_alipay"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_alipay"])
    types["payment_method_options_bacs_debit"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_bacs_debit"])
    types["payment_method_options_bancontact"] = t.struct(
        {"preferred_language": t.string(), "setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_bancontact"])
    types["payment_method_options_boleto"] = t.struct(
        {"expires_after_days": t.integer(), "setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_boleto"])
    types["payment_method_options_card_installments"] = t.struct(
        {
            "available_plans": t.array(
                t.proxy(renames["payment_method_details_card_installments_plan"])
            ).optional(),
            "enabled": t.boolean(),
            "plan": t.proxy(
                renames["payment_method_details_card_installments_plan"]
            ).optional(),
        }
    ).named(renames["payment_method_options_card_installments"])
    types["payment_method_options_card_mandate_options"] = t.struct(
        {
            "amount": t.integer(),
            "amount_type": t.string(),
            "description": t.string().optional(),
            "end_date": t.integer().optional(),
            "interval": t.string(),
            "interval_count": t.integer().optional(),
            "reference": t.string(),
            "start_date": t.integer(),
            "supported_types": t.array(t.string()).optional(),
        }
    ).named(renames["payment_method_options_card_mandate_options"])
    types["payment_method_options_card_present"] = t.struct(
        {
            "request_extended_authorization": t.boolean().optional(),
            "request_incremental_authorization_support": t.boolean().optional(),
        }
    ).named(renames["payment_method_options_card_present"])
    types["payment_method_options_cashapp"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_cashapp"])
    types["payment_method_options_customer_balance"] = t.struct(
        {
            "bank_transfer": t.proxy(
                renames["payment_method_options_customer_balance_bank_transfer"]
            ).optional(),
            "funding_type": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_customer_balance"])
    types["payment_method_options_customer_balance_bank_transfer"] = t.struct(
        {
            "eu_bank_transfer": t.proxy(
                renames["payment_method_options_customer_balance_eu_bank_account"]
            ).optional(),
            "requested_address_types": t.array(t.string()).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["payment_method_options_customer_balance_bank_transfer"])
    types["payment_method_options_customer_balance_eu_bank_account"] = t.struct(
        {"country": t.string()}
    ).named(renames["payment_method_options_customer_balance_eu_bank_account"])
    types["payment_method_options_fpx"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_fpx"])
    types["payment_method_options_giropay"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_giropay"])
    types["payment_method_options_grabpay"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_grabpay"])
    types["payment_method_options_ideal"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_ideal"])
    types["payment_method_options_interac_present"] = t.struct({}).named(
        renames["payment_method_options_interac_present"]
    )
    types["payment_method_options_klarna"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "preferred_locale": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_klarna"])
    types["payment_method_options_konbini"] = t.struct(
        {
            "confirmation_number": t.string().optional(),
            "expires_after_days": t.integer().optional(),
            "expires_at": t.integer().optional(),
            "product_description": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_konbini"])
    types["payment_method_options_oxxo"] = t.struct(
        {"expires_after_days": t.integer(), "setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_oxxo"])
    types["payment_method_options_p24"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_p24"])
    types["payment_method_options_paynow"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_paynow"])
    types["payment_method_options_paypal"] = t.struct(
        {
            "capture_method": t.string().optional(),
            "preferred_locale": t.string().optional(),
            "reference": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_paypal"])
    types["payment_method_options_pix"] = t.struct(
        {
            "expires_after_seconds": t.integer().optional(),
            "expires_at": t.integer().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_pix"])
    types["payment_method_options_promptpay"] = t.struct(
        {"setup_future_usage": t.string().optional()}
    ).named(renames["payment_method_options_promptpay"])
    types["payment_method_options_sofort"] = t.struct(
        {
            "preferred_language": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_sofort"])
    types["payment_method_options_wechat_pay"] = t.struct(
        {
            "app_id": t.string().optional(),
            "client": t.string().optional(),
            "setup_future_usage": t.string().optional(),
        }
    ).named(renames["payment_method_options_wechat_pay"])
    types["payment_method_oxxo"] = t.struct({}).named(renames["payment_method_oxxo"])
    types["payment_method_p24"] = t.struct({"bank": t.string().optional()}).named(
        renames["payment_method_p24"]
    )
    types["payment_method_paynow"] = t.struct({}).named(
        renames["payment_method_paynow"]
    )
    types["payment_method_paypal"] = t.struct(
        {"payer_id": t.string().optional()}
    ).named(renames["payment_method_paypal"])
    types["payment_method_pix"] = t.struct({}).named(renames["payment_method_pix"])
    types["payment_method_promptpay"] = t.struct({}).named(
        renames["payment_method_promptpay"]
    )
    types["payment_method_sepa_debit"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "branch_code": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "generated_from": t.proxy(renames["sepa_debit_generated_from"]).optional(),
            "last4": t.string().optional(),
        }
    ).named(renames["payment_method_sepa_debit"])
    types["payment_method_sofort"] = t.struct({"country": t.string().optional()}).named(
        renames["payment_method_sofort"]
    )
    types["payment_method_us_bank_account"] = t.struct(
        {
            "account_holder_type": t.string().optional(),
            "account_type": t.string().optional(),
            "bank_name": t.string().optional(),
            "financial_connections_account": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "networks": t.proxy(renames["us_bank_account_networks"]).optional(),
            "routing_number": t.string().optional(),
            "status_details": t.proxy(
                renames["payment_method_us_bank_account_status_details"]
            ).optional(),
        }
    ).named(renames["payment_method_us_bank_account"])
    types["payment_method_us_bank_account_blocked"] = t.struct(
        {"network_code": t.string().optional(), "reason": t.string().optional()}
    ).named(renames["payment_method_us_bank_account_blocked"])
    types["payment_method_us_bank_account_status_details"] = t.struct(
        {
            "blocked": t.proxy(
                renames["payment_method_us_bank_account_blocked"]
            ).optional()
        }
    ).named(renames["payment_method_us_bank_account_status_details"])
    types["payment_method_wechat_pay"] = t.struct({}).named(
        renames["payment_method_wechat_pay"]
    )
    types["payment_pages_checkout_session_after_expiration"] = t.struct(
        {
            "recovery": t.proxy(
                renames["payment_pages_checkout_session_after_expiration_recovery"]
            ).optional()
        }
    ).named(renames["payment_pages_checkout_session_after_expiration"])
    types["payment_pages_checkout_session_after_expiration_recovery"] = t.struct(
        {
            "allow_promotion_codes": t.boolean(),
            "enabled": t.boolean(),
            "expires_at": t.integer().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["payment_pages_checkout_session_after_expiration_recovery"])
    types["payment_pages_checkout_session_automatic_tax"] = t.struct(
        {"enabled": t.boolean(), "status": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_automatic_tax"])
    types["payment_pages_checkout_session_consent"] = t.struct(
        {"promotions": t.string().optional(), "terms_of_service": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_consent"])
    types["payment_pages_checkout_session_consent_collection"] = t.struct(
        {"promotions": t.string().optional(), "terms_of_service": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_consent_collection"])
    types["payment_pages_checkout_session_currency_conversion"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_total": t.integer(),
            "fx_rate": t.string(),
            "source_currency": t.string(),
        }
    ).named(renames["payment_pages_checkout_session_currency_conversion"])
    types["payment_pages_checkout_session_custom_fields"] = t.struct(
        {
            "dropdown": t.proxy(
                renames["payment_pages_checkout_session_custom_fields_dropdown"]
            ).optional(),
            "key": t.string(),
            "label": t.proxy(
                renames["payment_pages_checkout_session_custom_fields_label"]
            ),
            "numeric": t.proxy(
                renames["payment_pages_checkout_session_custom_fields_numeric"]
            ).optional(),
            "optional": t.boolean(),
            "text": t.proxy(
                renames["payment_pages_checkout_session_custom_fields_text"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["payment_pages_checkout_session_custom_fields"])
    types["payment_pages_checkout_session_custom_fields_dropdown"] = t.struct(
        {
            "options": t.array(
                t.proxy(renames["payment_pages_checkout_session_custom_fields_option"])
            ),
            "value": t.string().optional(),
        }
    ).named(renames["payment_pages_checkout_session_custom_fields_dropdown"])
    types["payment_pages_checkout_session_custom_fields_label"] = t.struct(
        {"custom": t.string().optional(), "type": t.string()}
    ).named(renames["payment_pages_checkout_session_custom_fields_label"])
    types["payment_pages_checkout_session_custom_fields_numeric"] = t.struct(
        {"value": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_custom_fields_numeric"])
    types["payment_pages_checkout_session_custom_fields_option"] = t.struct(
        {"label": t.string(), "value": t.string()}
    ).named(renames["payment_pages_checkout_session_custom_fields_option"])
    types["payment_pages_checkout_session_custom_fields_text"] = t.struct(
        {"value": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_custom_fields_text"])
    types["payment_pages_checkout_session_custom_text"] = t.struct(
        {
            "shipping_address": t.proxy(
                renames["payment_pages_checkout_session_custom_text_position"]
            ).optional(),
            "submit": t.proxy(
                renames["payment_pages_checkout_session_custom_text_position"]
            ).optional(),
        }
    ).named(renames["payment_pages_checkout_session_custom_text"])
    types["payment_pages_checkout_session_custom_text_position"] = t.struct(
        {"message": t.string()}
    ).named(renames["payment_pages_checkout_session_custom_text_position"])
    types["payment_pages_checkout_session_customer_details"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "phone": t.string().optional(),
            "tax_exempt": t.string().optional(),
            "tax_ids": t.array(
                t.proxy(renames["payment_pages_checkout_session_tax_id"])
            ).optional(),
        }
    ).named(renames["payment_pages_checkout_session_customer_details"])
    types["payment_pages_checkout_session_invoice_creation"] = t.struct(
        {
            "enabled": t.boolean(),
            "invoice_data": t.proxy(
                renames["payment_pages_checkout_session_invoice_settings"]
            ),
        }
    ).named(renames["payment_pages_checkout_session_invoice_creation"])
    types["payment_pages_checkout_session_invoice_settings"] = t.struct(
        {
            "account_tax_ids": t.array(
                t.union(
                    [
                        t.string(),
                        t.proxy(renames["tax_id"]),
                        t.proxy(renames["deleted_tax_id"]),
                    ]
                )
            ).optional(),
            "custom_fields": t.array(
                t.proxy(renames["invoice_setting_custom_field"])
            ).optional(),
            "description": t.string().optional(),
            "footer": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "rendering_options": t.proxy(
                renames["invoice_setting_rendering_options"]
            ).optional(),
        }
    ).named(renames["payment_pages_checkout_session_invoice_settings"])
    types["payment_pages_checkout_session_phone_number_collection"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_pages_checkout_session_phone_number_collection"])
    types["payment_pages_checkout_session_shipping_address_collection"] = t.struct(
        {"allowed_countries": t.array(t.string())}
    ).named(renames["payment_pages_checkout_session_shipping_address_collection"])
    types["payment_pages_checkout_session_shipping_cost"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_tax": t.integer(),
            "amount_total": t.integer(),
            "shipping_rate": t.union(
                [t.string(), t.proxy(renames["shipping_rate"])]
            ).optional(),
            "taxes": t.array(t.proxy(renames["line_items_tax_amount"])).optional(),
        }
    ).named(renames["payment_pages_checkout_session_shipping_cost"])
    types["payment_pages_checkout_session_shipping_option"] = t.struct(
        {
            "shipping_amount": t.integer(),
            "shipping_rate": t.union([t.string(), t.proxy(renames["shipping_rate"])]),
        }
    ).named(renames["payment_pages_checkout_session_shipping_option"])
    types["payment_pages_checkout_session_tax_id"] = t.struct(
        {"type": t.string(), "value": t.string().optional()}
    ).named(renames["payment_pages_checkout_session_tax_id"])
    types["payment_pages_checkout_session_tax_id_collection"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["payment_pages_checkout_session_tax_id_collection"])
    types["payment_pages_checkout_session_total_details"] = t.struct(
        {
            "amount_discount": t.integer(),
            "amount_shipping": t.integer().optional(),
            "amount_tax": t.integer(),
            "breakdown": t.proxy(
                renames[
                    "payment_pages_checkout_session_total_details_resource_breakdown"
                ]
            ).optional(),
        }
    ).named(renames["payment_pages_checkout_session_total_details"])
    types["payment_pages_checkout_session_total_details_resource_breakdown"] = t.struct(
        {
            "discounts": t.array(t.proxy(renames["line_items_discount_amount"])),
            "taxes": t.array(t.proxy(renames["line_items_tax_amount"])),
        }
    ).named(renames["payment_pages_checkout_session_total_details_resource_breakdown"])
    types["payment_source"] = t.union(
        [
            t.proxy(renames["account"]),
            t.proxy(renames["bank_account"]),
            t.proxy(renames["card"]),
            t.proxy(renames["source"]),
        ]
    ).named(renames["payment_source"])
    types["payout"] = t.struct(
        {
            "amount": t.integer(),
            "arrival_date": t.integer(),
            "automatic": t.boolean(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "destination": t.union(
                [
                    t.string(),
                    t.proxy(renames["external_account"]),
                    t.proxy(renames["deleted_external_account"]),
                ]
            ).optional(),
            "failure_balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "failure_code": t.string().optional(),
            "failure_message": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "method": t.string(),
            "object": t.string(),
            "original_payout": t.union(
                [t.string(), t.proxy(renames["payout"])]
            ).optional(),
            "reconciliation_status": t.string(),
            "reversed_by": t.union([t.string(), t.proxy(renames["payout"])]).optional(),
            "source_type": t.string(),
            "statement_descriptor": t.string().optional(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["payout"])
    types["paypal_seller_protection"] = t.struct(
        {"dispute_categories": t.array(t.string()).optional(), "status": t.string()}
    ).named(renames["paypal_seller_protection"])
    types["period"] = t.struct(
        {"end": t.integer().optional(), "start": t.integer().optional()}
    ).named(renames["period"])
    types["person"] = t.struct(
        {
            "account": t.string().optional(),
            "address": t.proxy(renames["address"]).optional(),
            "address_kana": t.proxy(renames["legal_entity_japan_address"]).optional(),
            "address_kanji": t.proxy(renames["legal_entity_japan_address"]).optional(),
            "created": t.integer(),
            "dob": t.proxy(renames["legal_entity_dob"]).optional(),
            "email": t.string().optional(),
            "first_name": t.string().optional(),
            "first_name_kana": t.string().optional(),
            "first_name_kanji": t.string().optional(),
            "full_name_aliases": t.array(t.string()).optional(),
            "future_requirements": t.proxy(
                renames["person_future_requirements"]
            ).optional(),
            "gender": t.string().optional(),
            "id": t.string(),
            "id_number_provided": t.boolean().optional(),
            "id_number_secondary_provided": t.boolean().optional(),
            "last_name": t.string().optional(),
            "last_name_kana": t.string().optional(),
            "last_name_kanji": t.string().optional(),
            "maiden_name": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "nationality": t.string().optional(),
            "object": t.string(),
            "phone": t.string().optional(),
            "political_exposure": t.string().optional(),
            "registered_address": t.proxy(renames["address"]).optional(),
            "relationship": t.proxy(renames["person_relationship"]).optional(),
            "requirements": t.proxy(renames["person_requirements"]).optional(),
            "ssn_last_4_provided": t.boolean().optional(),
            "verification": t.proxy(
                renames["legal_entity_person_verification"]
            ).optional(),
        }
    ).named(renames["person"])
    types["person_future_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "currently_due": t.array(t.string()),
            "errors": t.array(t.proxy(renames["account_requirements_error"])),
            "eventually_due": t.array(t.string()),
            "past_due": t.array(t.string()),
            "pending_verification": t.array(t.string()),
        }
    ).named(renames["person_future_requirements"])
    types["person_relationship"] = t.struct(
        {
            "director": t.boolean().optional(),
            "executive": t.boolean().optional(),
            "owner": t.boolean().optional(),
            "percent_ownership": t.number().optional(),
            "representative": t.boolean().optional(),
            "title": t.string().optional(),
        }
    ).named(renames["person_relationship"])
    types["person_requirements"] = t.struct(
        {
            "alternatives": t.array(
                t.proxy(renames["account_requirements_alternative"])
            ).optional(),
            "currently_due": t.array(t.string()),
            "errors": t.array(t.proxy(renames["account_requirements_error"])),
            "eventually_due": t.array(t.string()),
            "past_due": t.array(t.string()),
            "pending_verification": t.array(t.string()),
        }
    ).named(renames["person_requirements"])
    types["plan"] = t.struct(
        {
            "active": t.boolean(),
            "aggregate_usage": t.string().optional(),
            "amount": t.integer().optional(),
            "amount_decimal": t.string().optional(),
            "billing_scheme": t.string(),
            "created": t.integer(),
            "currency": t.string(),
            "id": t.string(),
            "interval": t.string(),
            "interval_count": t.integer(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "nickname": t.string().optional(),
            "object": t.string(),
            "product": t.union(
                [
                    t.string(),
                    t.proxy(renames["product"]),
                    t.proxy(renames["deleted_product"]),
                ]
            ).optional(),
            "tiers": t.array(t.proxy(renames["plan_tier"])).optional(),
            "tiers_mode": t.string().optional(),
            "transform_usage": t.proxy(renames["transform_usage"]).optional(),
            "trial_period_days": t.integer().optional(),
            "usage_type": t.string(),
        }
    ).named(renames["plan"])
    types["plan_tier"] = t.struct(
        {
            "flat_amount": t.integer().optional(),
            "flat_amount_decimal": t.string().optional(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
            "up_to": t.integer().optional(),
        }
    ).named(renames["plan_tier"])
    types["platform_tax_fee"] = t.struct(
        {
            "account": t.string(),
            "id": t.string(),
            "object": t.string(),
            "source_transaction": t.string(),
            "type": t.string(),
        }
    ).named(renames["platform_tax_fee"])
    types["portal_business_profile"] = t.struct(
        {
            "headline": t.string().optional(),
            "privacy_policy_url": t.string().optional(),
            "terms_of_service_url": t.string().optional(),
        }
    ).named(renames["portal_business_profile"])
    types["portal_customer_update"] = t.struct(
        {"allowed_updates": t.array(t.string()), "enabled": t.boolean()}
    ).named(renames["portal_customer_update"])
    types["portal_features"] = t.struct(
        {
            "customer_update": t.proxy(renames["portal_customer_update"]),
            "invoice_history": t.proxy(renames["portal_invoice_list"]),
            "payment_method_update": t.proxy(renames["portal_payment_method_update"]),
            "subscription_cancel": t.proxy(renames["portal_subscription_cancel"]),
            "subscription_pause": t.proxy(renames["portal_subscription_pause"]),
            "subscription_update": t.proxy(renames["portal_subscription_update"]),
        }
    ).named(renames["portal_features"])
    types["portal_flows_after_completion_hosted_confirmation"] = t.struct(
        {"custom_message": t.string().optional()}
    ).named(renames["portal_flows_after_completion_hosted_confirmation"])
    types["portal_flows_after_completion_redirect"] = t.struct(
        {"return_url": t.string()}
    ).named(renames["portal_flows_after_completion_redirect"])
    types["portal_flows_flow"] = t.struct(
        {
            "after_completion": t.proxy(renames["portal_flows_flow_after_completion"]),
            "subscription_cancel": t.proxy(
                renames["portal_flows_flow_subscription_cancel"]
            ).optional(),
            "subscription_update": t.proxy(
                renames["portal_flows_flow_subscription_update"]
            ).optional(),
            "subscription_update_confirm": t.proxy(
                renames["portal_flows_flow_subscription_update_confirm"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["portal_flows_flow"])
    types["portal_flows_flow_after_completion"] = t.struct(
        {
            "hosted_confirmation": t.proxy(
                renames["portal_flows_after_completion_hosted_confirmation"]
            ).optional(),
            "redirect": t.proxy(
                renames["portal_flows_after_completion_redirect"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["portal_flows_flow_after_completion"])
    types["portal_flows_flow_subscription_cancel"] = t.struct(
        {"subscription": t.string()}
    ).named(renames["portal_flows_flow_subscription_cancel"])
    types["portal_flows_flow_subscription_update"] = t.struct(
        {"subscription": t.string()}
    ).named(renames["portal_flows_flow_subscription_update"])
    types["portal_flows_flow_subscription_update_confirm"] = t.struct(
        {
            "discounts": t.array(
                t.proxy(renames["portal_flows_subscription_update_confirm_discount"])
            ).optional(),
            "items": t.array(
                t.proxy(renames["portal_flows_subscription_update_confirm_item"])
            ),
            "subscription": t.string(),
        }
    ).named(renames["portal_flows_flow_subscription_update_confirm"])
    types["portal_flows_subscription_update_confirm_discount"] = t.struct(
        {"coupon": t.string().optional(), "promotion_code": t.string().optional()}
    ).named(renames["portal_flows_subscription_update_confirm_discount"])
    types["portal_flows_subscription_update_confirm_item"] = t.struct(
        {
            "id": t.string().optional(),
            "price": t.string().optional(),
            "quantity": t.integer().optional(),
        }
    ).named(renames["portal_flows_subscription_update_confirm_item"])
    types["portal_invoice_list"] = t.struct({"enabled": t.boolean()}).named(
        renames["portal_invoice_list"]
    )
    types["portal_login_page"] = t.struct(
        {"enabled": t.boolean(), "url": t.string().optional()}
    ).named(renames["portal_login_page"])
    types["portal_payment_method_update"] = t.struct({"enabled": t.boolean()}).named(
        renames["portal_payment_method_update"]
    )
    types["portal_subscription_cancel"] = t.struct(
        {
            "cancellation_reason": t.proxy(
                renames["portal_subscription_cancellation_reason"]
            ),
            "enabled": t.boolean(),
            "mode": t.string(),
            "proration_behavior": t.string(),
        }
    ).named(renames["portal_subscription_cancel"])
    types["portal_subscription_cancellation_reason"] = t.struct(
        {"enabled": t.boolean(), "options": t.array(t.string())}
    ).named(renames["portal_subscription_cancellation_reason"])
    types["portal_subscription_pause"] = t.struct({"enabled": t.boolean()}).named(
        renames["portal_subscription_pause"]
    )
    types["portal_subscription_update"] = t.struct(
        {
            "default_allowed_updates": t.array(t.string()),
            "enabled": t.boolean(),
            "products": t.array(
                t.proxy(renames["portal_subscription_update_product"])
            ).optional(),
            "proration_behavior": t.string(),
        }
    ).named(renames["portal_subscription_update"])
    types["portal_subscription_update_product"] = t.struct(
        {"prices": t.array(t.string()), "product": t.string()}
    ).named(renames["portal_subscription_update_product"])
    types["price"] = t.struct(
        {
            "active": t.boolean(),
            "billing_scheme": t.string(),
            "created": t.integer(),
            "currency": t.string(),
            "currency_options": t.struct({}).optional(),
            "custom_unit_amount": t.proxy(renames["custom_unit_amount"]).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "lookup_key": t.string().optional(),
            "metadata": t.struct({}),
            "nickname": t.string().optional(),
            "object": t.string(),
            "product": t.union(
                [
                    t.string(),
                    t.proxy(renames["product"]),
                    t.proxy(renames["deleted_product"]),
                ]
            ),
            "recurring": t.proxy(renames["recurring"]).optional(),
            "tax_behavior": t.string().optional(),
            "tiers": t.array(t.proxy(renames["price_tier"])).optional(),
            "tiers_mode": t.string().optional(),
            "transform_quantity": t.proxy(renames["transform_quantity"]).optional(),
            "type": t.string(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
        }
    ).named(renames["price"])
    types["price_tier"] = t.struct(
        {
            "flat_amount": t.integer().optional(),
            "flat_amount_decimal": t.string().optional(),
            "unit_amount": t.integer().optional(),
            "unit_amount_decimal": t.string().optional(),
            "up_to": t.integer().optional(),
        }
    ).named(renames["price_tier"])
    types["product"] = t.struct(
        {
            "active": t.boolean(),
            "attributes": t.array(t.string()).optional(),
            "caption": t.string().optional(),
            "created": t.integer(),
            "deactivate_on": t.array(t.string()).optional(),
            "default_price": t.union(
                [t.string(), t.proxy(renames["price"])]
            ).optional(),
            "description": t.string().optional(),
            "id": t.string(),
            "images": t.array(t.string()),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "name": t.string(),
            "object": t.string(),
            "package_dimensions": t.proxy(renames["package_dimensions"]).optional(),
            "shippable": t.boolean().optional(),
            "statement_descriptor": t.string().optional(),
            "tax_code": t.union([t.string(), t.proxy(renames["tax_code"])]).optional(),
            "type": t.string(),
            "unit_label": t.string().optional(),
            "updated": t.integer(),
            "url": t.string().optional(),
        }
    ).named(renames["product"])
    types["promotion_code"] = t.struct(
        {
            "active": t.boolean(),
            "code": t.string(),
            "coupon": t.proxy(renames["coupon"]),
            "created": t.integer(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "expires_at": t.integer().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "max_redemptions": t.integer().optional(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "restrictions": t.proxy(renames["promotion_codes_resource_restrictions"]),
            "times_redeemed": t.integer(),
        }
    ).named(renames["promotion_code"])
    types["promotion_code_currency_option"] = t.struct(
        {"minimum_amount": t.integer()}
    ).named(renames["promotion_code_currency_option"])
    types["promotion_codes_resource_restrictions"] = t.struct(
        {
            "currency_options": t.struct({}).optional(),
            "first_time_transaction": t.boolean(),
            "minimum_amount": t.integer().optional(),
            "minimum_amount_currency": t.string().optional(),
        }
    ).named(renames["promotion_codes_resource_restrictions"])
    types["quote"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_total": t.integer(),
            "application": t.union(
                [
                    t.string(),
                    t.proxy(renames["application"]),
                    t.proxy(renames["deleted_application"]),
                ]
            ).optional(),
            "application_fee_amount": t.integer().optional(),
            "application_fee_percent": t.number().optional(),
            "automatic_tax": t.proxy(renames["quotes_resource_automatic_tax"]),
            "collection_method": t.string(),
            "computed": t.proxy(renames["quotes_resource_computed"]),
            "created": t.integer(),
            "currency": t.string().optional(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "default_tax_rates": t.array(
                t.union([t.string(), t.proxy(renames["tax_rate"])])
            ).optional(),
            "description": t.string().optional(),
            "discounts": t.array(t.union([t.string(), t.proxy(renames["discount"])])),
            "expires_at": t.integer(),
            "footer": t.string().optional(),
            "from_quote": t.proxy(renames["quotes_resource_from_quote"]).optional(),
            "header": t.string().optional(),
            "id": t.string(),
            "invoice": t.union(
                [
                    t.string(),
                    t.proxy(renames["invoice"]),
                    t.proxy(renames["deleted_invoice"]),
                ]
            ).optional(),
            "invoice_settings": t.proxy(
                renames["invoice_setting_quote_setting"]
            ).optional(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "number": t.string().optional(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames["quotes_resource_status_transitions"]
            ),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "subscription_data": t.proxy(
                renames["quotes_resource_subscription_data_subscription_data"]
            ),
            "subscription_schedule": t.union(
                [t.string(), t.proxy(renames["subscription_schedule"])]
            ).optional(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
            "total_details": t.proxy(renames["quotes_resource_total_details"]),
            "transfer_data": t.proxy(
                renames["quotes_resource_transfer_data"]
            ).optional(),
        }
    ).named(renames["quote"])
    types["quotes_resource_automatic_tax"] = t.struct(
        {"enabled": t.boolean(), "status": t.string().optional()}
    ).named(renames["quotes_resource_automatic_tax"])
    types["quotes_resource_computed"] = t.struct(
        {
            "recurring": t.proxy(renames["quotes_resource_recurring"]).optional(),
            "upfront": t.proxy(renames["quotes_resource_upfront"]),
        }
    ).named(renames["quotes_resource_computed"])
    types["quotes_resource_from_quote"] = t.struct(
        {
            "is_revision": t.boolean(),
            "quote": t.union([t.string(), t.proxy(renames["quote"])]),
        }
    ).named(renames["quotes_resource_from_quote"])
    types["quotes_resource_recurring"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_total": t.integer(),
            "interval": t.string(),
            "interval_count": t.integer(),
            "total_details": t.proxy(renames["quotes_resource_total_details"]),
        }
    ).named(renames["quotes_resource_recurring"])
    types["quotes_resource_status_transitions"] = t.struct(
        {
            "accepted_at": t.integer().optional(),
            "canceled_at": t.integer().optional(),
            "finalized_at": t.integer().optional(),
        }
    ).named(renames["quotes_resource_status_transitions"])
    types["quotes_resource_subscription_data_subscription_data"] = t.struct(
        {
            "description": t.string().optional(),
            "effective_date": t.integer().optional(),
            "trial_period_days": t.integer().optional(),
        }
    ).named(renames["quotes_resource_subscription_data_subscription_data"])
    types["quotes_resource_total_details"] = t.struct(
        {
            "amount_discount": t.integer(),
            "amount_shipping": t.integer().optional(),
            "amount_tax": t.integer(),
            "breakdown": t.proxy(
                renames["quotes_resource_total_details_resource_breakdown"]
            ).optional(),
        }
    ).named(renames["quotes_resource_total_details"])
    types["quotes_resource_total_details_resource_breakdown"] = t.struct(
        {
            "discounts": t.array(t.proxy(renames["line_items_discount_amount"])),
            "taxes": t.array(t.proxy(renames["line_items_tax_amount"])),
        }
    ).named(renames["quotes_resource_total_details_resource_breakdown"])
    types["quotes_resource_transfer_data"] = t.struct(
        {
            "amount": t.integer().optional(),
            "amount_percent": t.number().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["quotes_resource_transfer_data"])
    types["quotes_resource_upfront"] = t.struct(
        {
            "amount_subtotal": t.integer(),
            "amount_total": t.integer(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "total_details": t.proxy(renames["quotes_resource_total_details"]),
        }
    ).named(renames["quotes_resource_upfront"])
    types["radar.early_fraud_warning"] = t.struct(
        {
            "actionable": t.boolean(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]),
            "created": t.integer(),
            "fraud_type": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
        }
    ).named(renames["radar.early_fraud_warning"])
    types["radar.value_list"] = t.struct(
        {
            "alias": t.string(),
            "created": t.integer(),
            "created_by": t.string(),
            "id": t.string(),
            "item_type": t.string(),
            "list_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["radar.value_list_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "name": t.string(),
            "object": t.string(),
        }
    ).named(renames["radar.value_list"])
    types["radar.value_list_item"] = t.struct(
        {
            "created": t.integer(),
            "created_by": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "value": t.string(),
            "value_list": t.string(),
        }
    ).named(renames["radar.value_list_item"])
    types["radar_radar_options"] = t.struct({"session": t.string().optional()}).named(
        renames["radar_radar_options"]
    )
    types["radar_review_resource_location"] = t.struct(
        {
            "city": t.string().optional(),
            "country": t.string().optional(),
            "latitude": t.number().optional(),
            "longitude": t.number().optional(),
            "region": t.string().optional(),
        }
    ).named(renames["radar_review_resource_location"])
    types["radar_review_resource_session"] = t.struct(
        {
            "browser": t.string().optional(),
            "device": t.string().optional(),
            "platform": t.string().optional(),
            "version": t.string().optional(),
        }
    ).named(renames["radar_review_resource_session"])
    types["received_payment_method_details_financial_account"] = t.struct(
        {"id": t.string(), "network": t.string()}
    ).named(renames["received_payment_method_details_financial_account"])
    types["recurring"] = t.struct(
        {
            "aggregate_usage": t.string().optional(),
            "interval": t.string(),
            "interval_count": t.integer(),
            "trial_period_days": t.integer().optional(),
            "usage_type": t.string(),
        }
    ).named(renames["recurring"])
    types["refund"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "failure_balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "failure_reason": t.string().optional(),
            "id": t.string(),
            "instructions_email": t.string().optional(),
            "metadata": t.struct({}).optional(),
            "next_action": t.proxy(renames["refund_next_action"]).optional(),
            "object": t.string(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "reason": t.string().optional(),
            "receipt_number": t.string().optional(),
            "source_transfer_reversal": t.union(
                [t.string(), t.proxy(renames["transfer_reversal"])]
            ).optional(),
            "status": t.string().optional(),
            "transfer_reversal": t.union(
                [t.string(), t.proxy(renames["transfer_reversal"])]
            ).optional(),
        }
    ).named(renames["refund"])
    types["refund_next_action"] = t.struct(
        {
            "display_details": t.proxy(
                renames["refund_next_action_display_details"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["refund_next_action"])
    types["refund_next_action_display_details"] = t.struct(
        {"email_sent": t.proxy(renames["email_sent"]), "expires_at": t.integer()}
    ).named(renames["refund_next_action_display_details"])
    types["reporting.report_run"] = t.struct(
        {
            "created": t.integer(),
            "error": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "parameters": t.proxy(
                renames["financial_reporting_finance_report_run_run_parameters"]
            ),
            "report_type": t.string(),
            "result": t.proxy(renames["file"]).optional(),
            "status": t.string(),
            "succeeded_at": t.integer().optional(),
        }
    ).named(renames["reporting.report_run"])
    types["reporting.report_type"] = t.struct(
        {
            "data_available_end": t.integer(),
            "data_available_start": t.integer(),
            "default_columns": t.array(t.string()).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "name": t.string(),
            "object": t.string(),
            "updated": t.integer(),
            "version": t.integer(),
        }
    ).named(renames["reporting.report_type"])
    types["reserve_transaction"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "id": t.string(),
            "object": t.string(),
        }
    ).named(renames["reserve_transaction"])
    types["review"] = t.struct(
        {
            "billing_zip": t.string().optional(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]).optional(),
            "closed_reason": t.string().optional(),
            "created": t.integer(),
            "id": t.string(),
            "ip_address": t.string().optional(),
            "ip_address_location": t.proxy(
                renames["radar_review_resource_location"]
            ).optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "open": t.boolean(),
            "opened_reason": t.string(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "reason": t.string(),
            "session": t.proxy(renames["radar_review_resource_session"]).optional(),
        }
    ).named(renames["review"])
    types["rule"] = t.struct(
        {"action": t.string(), "id": t.string(), "predicate": t.string()}
    ).named(renames["rule"])
    types["scheduled_query_run"] = t.struct(
        {
            "created": t.integer(),
            "data_load_time": t.integer(),
            "error": t.proxy(renames["sigma_scheduled_query_run_error"]).optional(),
            "file": t.proxy(renames["file"]).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "result_available_until": t.integer(),
            "sql": t.string(),
            "status": t.string(),
            "title": t.string(),
        }
    ).named(renames["scheduled_query_run"])
    types["schedules_phase_automatic_tax"] = t.struct({"enabled": t.boolean()}).named(
        renames["schedules_phase_automatic_tax"]
    )
    types["secret_service_resource_scope"] = t.struct(
        {"type": t.string(), "user": t.string().optional()}
    ).named(renames["secret_service_resource_scope"])
    types["sepa_debit_generated_from"] = t.struct(
        {
            "charge": t.union([t.string(), t.proxy(renames["charge"])]).optional(),
            "setup_attempt": t.union(
                [t.string(), t.proxy(renames["setup_attempt"])]
            ).optional(),
        }
    ).named(renames["sepa_debit_generated_from"])
    types["setup_attempt"] = t.struct(
        {
            "application": t.union(
                [t.string(), t.proxy(renames["application"])]
            ).optional(),
            "attach_to_self": t.boolean().optional(),
            "created": t.integer(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "flow_directions": t.array(t.string()).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "payment_method": t.union([t.string(), t.proxy(renames["payment_method"])]),
            "payment_method_details": t.proxy(
                renames["setup_attempt_payment_method_details"]
            ),
            "setup_error": t.proxy(renames["api_errors"]).optional(),
            "setup_intent": t.union([t.string(), t.proxy(renames["setup_intent"])]),
            "status": t.string(),
            "usage": t.string(),
        }
    ).named(renames["setup_attempt"])
    types["setup_attempt_payment_method_details"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["setup_attempt_payment_method_details_acss_debit"]
            ).optional(),
            "au_becs_debit": t.proxy(
                renames["setup_attempt_payment_method_details_au_becs_debit"]
            ).optional(),
            "bacs_debit": t.proxy(
                renames["setup_attempt_payment_method_details_bacs_debit"]
            ).optional(),
            "bancontact": t.proxy(
                renames["setup_attempt_payment_method_details_bancontact"]
            ).optional(),
            "blik": t.proxy(
                renames["setup_attempt_payment_method_details_blik"]
            ).optional(),
            "boleto": t.proxy(
                renames["setup_attempt_payment_method_details_boleto"]
            ).optional(),
            "card": t.proxy(
                renames["setup_attempt_payment_method_details_card"]
            ).optional(),
            "card_present": t.proxy(
                renames["setup_attempt_payment_method_details_card_present"]
            ).optional(),
            "cashapp": t.proxy(
                renames["setup_attempt_payment_method_details_cashapp"]
            ).optional(),
            "ideal": t.proxy(
                renames["setup_attempt_payment_method_details_ideal"]
            ).optional(),
            "klarna": t.proxy(
                renames["setup_attempt_payment_method_details_klarna"]
            ).optional(),
            "link": t.proxy(
                renames["setup_attempt_payment_method_details_link"]
            ).optional(),
            "paypal": t.proxy(
                renames["setup_attempt_payment_method_details_paypal"]
            ).optional(),
            "sepa_debit": t.proxy(
                renames["setup_attempt_payment_method_details_sepa_debit"]
            ).optional(),
            "sofort": t.proxy(
                renames["setup_attempt_payment_method_details_sofort"]
            ).optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames["setup_attempt_payment_method_details_us_bank_account"]
            ).optional(),
        }
    ).named(renames["setup_attempt_payment_method_details"])
    types["setup_attempt_payment_method_details_acss_debit"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_acss_debit"]
    )
    types["setup_attempt_payment_method_details_au_becs_debit"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_au_becs_debit"]
    )
    types["setup_attempt_payment_method_details_bacs_debit"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_bacs_debit"]
    )
    types["setup_attempt_payment_method_details_bancontact"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["setup_attempt_payment_method_details_bancontact"])
    types["setup_attempt_payment_method_details_blik"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_blik"]
    )
    types["setup_attempt_payment_method_details_boleto"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_boleto"]
    )
    types["setup_attempt_payment_method_details_card"] = t.struct(
        {
            "brand": t.string().optional(),
            "checks": t.proxy(renames["payment_method_details_card_checks"]).optional(),
            "country": t.string().optional(),
            "description": t.string().optional(),
            "exp_month": t.integer().optional(),
            "exp_year": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "network": t.string().optional(),
            "three_d_secure": t.proxy(renames["three_d_secure_details"]).optional(),
            "wallet": t.proxy(
                renames["setup_attempt_payment_method_details_card_wallet"]
            ).optional(),
        }
    ).named(renames["setup_attempt_payment_method_details_card"])
    types["setup_attempt_payment_method_details_card_present"] = t.struct(
        {
            "generated_card": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional()
        }
    ).named(renames["setup_attempt_payment_method_details_card_present"])
    types["setup_attempt_payment_method_details_card_wallet"] = t.struct(
        {
            "apple_pay": t.proxy(
                renames["payment_method_details_card_wallet_apple_pay"]
            ).optional(),
            "google_pay": t.proxy(
                renames["payment_method_details_card_wallet_google_pay"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["setup_attempt_payment_method_details_card_wallet"])
    types["setup_attempt_payment_method_details_cashapp"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_cashapp"]
    )
    types["setup_attempt_payment_method_details_ideal"] = t.struct(
        {
            "bank": t.string().optional(),
            "bic": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["setup_attempt_payment_method_details_ideal"])
    types["setup_attempt_payment_method_details_klarna"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_klarna"]
    )
    types["setup_attempt_payment_method_details_link"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_link"]
    )
    types["setup_attempt_payment_method_details_paypal"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_paypal"]
    )
    types["setup_attempt_payment_method_details_sepa_debit"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_sepa_debit"]
    )
    types["setup_attempt_payment_method_details_sofort"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "generated_sepa_debit": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "generated_sepa_debit_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["setup_attempt_payment_method_details_sofort"])
    types["setup_attempt_payment_method_details_us_bank_account"] = t.struct({}).named(
        renames["setup_attempt_payment_method_details_us_bank_account"]
    )
    types["setup_intent"] = t.struct(
        {
            "application": t.union(
                [t.string(), t.proxy(renames["application"])]
            ).optional(),
            "attach_to_self": t.boolean().optional(),
            "automatic_payment_methods": t.proxy(
                renames["payment_flows_automatic_payment_methods_setup_intent"]
            ).optional(),
            "cancellation_reason": t.string().optional(),
            "client_secret": t.string().optional(),
            "created": t.integer(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ).optional(),
            "description": t.string().optional(),
            "flow_directions": t.array(t.string()).optional(),
            "id": t.string(),
            "last_setup_error": t.proxy(renames["api_errors"]).optional(),
            "latest_attempt": t.union(
                [t.string(), t.proxy(renames["setup_attempt"])]
            ).optional(),
            "livemode": t.boolean(),
            "mandate": t.union([t.string(), t.proxy(renames["mandate"])]).optional(),
            "metadata": t.struct({}).optional(),
            "next_action": t.proxy(renames["setup_intent_next_action"]).optional(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "payment_method_options": t.proxy(
                renames["setup_intent_payment_method_options"]
            ).optional(),
            "payment_method_types": t.array(t.string()),
            "single_use_mandate": t.union(
                [t.string(), t.proxy(renames["mandate"])]
            ).optional(),
            "status": t.string(),
            "usage": t.string(),
        }
    ).named(renames["setup_intent"])
    types["setup_intent_next_action"] = t.struct(
        {
            "cashapp_handle_redirect_or_display_qr_code": t.proxy(
                renames[
                    "payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"
                ]
            ).optional(),
            "redirect_to_url": t.proxy(
                renames["setup_intent_next_action_redirect_to_url"]
            ).optional(),
            "type": t.string(),
            "use_stripe_sdk": t.struct({}).optional(),
            "verify_with_microdeposits": t.proxy(
                renames["setup_intent_next_action_verify_with_microdeposits"]
            ).optional(),
        }
    ).named(renames["setup_intent_next_action"])
    types["setup_intent_next_action_redirect_to_url"] = t.struct(
        {"return_url": t.string().optional(), "url": t.string().optional()}
    ).named(renames["setup_intent_next_action_redirect_to_url"])
    types["setup_intent_next_action_verify_with_microdeposits"] = t.struct(
        {
            "arrival_date": t.integer(),
            "hosted_verification_url": t.string(),
            "microdeposit_type": t.string().optional(),
        }
    ).named(renames["setup_intent_next_action_verify_with_microdeposits"])
    types["setup_intent_payment_method_options"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["setup_intent_payment_method_options_acss_debit"]
            ).optional(),
            "blik": t.proxy(
                renames["setup_intent_payment_method_options_blik"]
            ).optional(),
            "card": t.proxy(
                renames["setup_intent_payment_method_options_card"]
            ).optional(),
            "link": t.proxy(
                renames["setup_intent_payment_method_options_link"]
            ).optional(),
            "paypal": t.proxy(
                renames["setup_intent_payment_method_options_paypal"]
            ).optional(),
            "sepa_debit": t.proxy(
                renames["setup_intent_payment_method_options_sepa_debit"]
            ).optional(),
            "us_bank_account": t.proxy(
                renames["setup_intent_payment_method_options_us_bank_account"]
            ).optional(),
        }
    ).named(renames["setup_intent_payment_method_options"])
    types["setup_intent_payment_method_options_acss_debit"] = t.struct(
        {
            "currency": t.string().optional(),
            "mandate_options": t.proxy(
                renames[
                    "setup_intent_payment_method_options_mandate_options_acss_debit"
                ]
            ).optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["setup_intent_payment_method_options_acss_debit"])
    types["setup_intent_payment_method_options_blik"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames["setup_intent_payment_method_options_mandate_options_blik"]
            ).optional()
        }
    ).named(renames["setup_intent_payment_method_options_blik"])
    types["setup_intent_payment_method_options_card"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames["setup_intent_payment_method_options_card_mandate_options"]
            ).optional(),
            "network": t.string().optional(),
            "request_three_d_secure": t.string().optional(),
        }
    ).named(renames["setup_intent_payment_method_options_card"])
    types["setup_intent_payment_method_options_card_mandate_options"] = t.struct(
        {
            "amount": t.integer(),
            "amount_type": t.string(),
            "currency": t.string(),
            "description": t.string().optional(),
            "end_date": t.integer().optional(),
            "interval": t.string(),
            "interval_count": t.integer().optional(),
            "reference": t.string(),
            "start_date": t.integer(),
            "supported_types": t.array(t.string()).optional(),
        }
    ).named(renames["setup_intent_payment_method_options_card_mandate_options"])
    types["setup_intent_payment_method_options_link"] = t.struct(
        {"persistent_token": t.string().optional()}
    ).named(renames["setup_intent_payment_method_options_link"])
    types["setup_intent_payment_method_options_mandate_options_acss_debit"] = t.struct(
        {
            "custom_mandate_url": t.string().optional(),
            "default_for": t.array(t.string()).optional(),
            "interval_description": t.string().optional(),
            "payment_schedule": t.string().optional(),
            "transaction_type": t.string().optional(),
        }
    ).named(renames["setup_intent_payment_method_options_mandate_options_acss_debit"])
    types["setup_intent_payment_method_options_mandate_options_blik"] = t.struct(
        {
            "expires_after": t.integer().optional(),
            "off_session": t.proxy(
                renames["mandate_options_off_session_details_blik"]
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["setup_intent_payment_method_options_mandate_options_blik"])
    types["setup_intent_payment_method_options_mandate_options_sepa_debit"] = t.struct(
        {}
    ).named(renames["setup_intent_payment_method_options_mandate_options_sepa_debit"])
    types["setup_intent_payment_method_options_paypal"] = t.struct(
        {"billing_agreement_id": t.string().optional()}
    ).named(renames["setup_intent_payment_method_options_paypal"])
    types["setup_intent_payment_method_options_sepa_debit"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames[
                    "setup_intent_payment_method_options_mandate_options_sepa_debit"
                ]
            ).optional()
        }
    ).named(renames["setup_intent_payment_method_options_sepa_debit"])
    types["setup_intent_payment_method_options_us_bank_account"] = t.struct(
        {
            "financial_connections": t.proxy(
                renames["linked_account_options_us_bank_account"]
            ).optional(),
            "verification_method": t.string().optional(),
        }
    ).named(renames["setup_intent_payment_method_options_us_bank_account"])
    types["setup_intent_type_specific_payment_method_options_client"] = t.struct(
        {"verification_method": t.string().optional()}
    ).named(renames["setup_intent_type_specific_payment_method_options_client"])
    types["shipping"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "carrier": t.string().optional(),
            "name": t.string().optional(),
            "phone": t.string().optional(),
            "tracking_number": t.string().optional(),
        }
    ).named(renames["shipping"])
    types["shipping_rate"] = t.struct(
        {
            "active": t.boolean(),
            "created": t.integer(),
            "delivery_estimate": t.proxy(
                renames["shipping_rate_delivery_estimate"]
            ).optional(),
            "display_name": t.string().optional(),
            "fixed_amount": t.proxy(renames["shipping_rate_fixed_amount"]).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "tax_behavior": t.string().optional(),
            "tax_code": t.union([t.string(), t.proxy(renames["tax_code"])]).optional(),
            "type": t.string(),
        }
    ).named(renames["shipping_rate"])
    types["shipping_rate_currency_option"] = t.struct(
        {"amount": t.integer(), "tax_behavior": t.string()}
    ).named(renames["shipping_rate_currency_option"])
    types["shipping_rate_delivery_estimate"] = t.struct(
        {
            "maximum": t.proxy(
                renames["shipping_rate_delivery_estimate_bound"]
            ).optional(),
            "minimum": t.proxy(
                renames["shipping_rate_delivery_estimate_bound"]
            ).optional(),
        }
    ).named(renames["shipping_rate_delivery_estimate"])
    types["shipping_rate_delivery_estimate_bound"] = t.struct(
        {"unit": t.string(), "value": t.integer()}
    ).named(renames["shipping_rate_delivery_estimate_bound"])
    types["shipping_rate_fixed_amount"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "currency_options": t.struct({}).optional(),
        }
    ).named(renames["shipping_rate_fixed_amount"])
    types["sigma_scheduled_query_run_error"] = t.struct({"message": t.string()}).named(
        renames["sigma_scheduled_query_run_error"]
    )
    types["source"] = t.struct(
        {
            "ach_credit_transfer": t.proxy(
                renames["source_type_ach_credit_transfer"]
            ).optional(),
            "ach_debit": t.proxy(renames["source_type_ach_debit"]).optional(),
            "acss_debit": t.proxy(renames["source_type_acss_debit"]).optional(),
            "alipay": t.proxy(renames["source_type_alipay"]).optional(),
            "amount": t.integer().optional(),
            "au_becs_debit": t.proxy(renames["source_type_au_becs_debit"]).optional(),
            "bancontact": t.proxy(renames["source_type_bancontact"]).optional(),
            "card": t.proxy(renames["source_type_card"]).optional(),
            "card_present": t.proxy(renames["source_type_card_present"]).optional(),
            "client_secret": t.string(),
            "code_verification": t.proxy(
                renames["source_code_verification_flow"]
            ).optional(),
            "created": t.integer(),
            "currency": t.string().optional(),
            "customer": t.string().optional(),
            "eps": t.proxy(renames["source_type_eps"]).optional(),
            "flow": t.string(),
            "giropay": t.proxy(renames["source_type_giropay"]).optional(),
            "id": t.string(),
            "ideal": t.proxy(renames["source_type_ideal"]).optional(),
            "klarna": t.proxy(renames["source_type_klarna"]).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "multibanco": t.proxy(renames["source_type_multibanco"]).optional(),
            "object": t.string(),
            "owner": t.proxy(renames["source_owner"]).optional(),
            "p24": t.proxy(renames["source_type_p24"]).optional(),
            "receiver": t.proxy(renames["source_receiver_flow"]).optional(),
            "redirect": t.proxy(renames["source_redirect_flow"]).optional(),
            "sepa_credit_transfer": t.proxy(
                renames["source_type_sepa_credit_transfer"]
            ).optional(),
            "sepa_debit": t.proxy(renames["source_type_sepa_debit"]).optional(),
            "sofort": t.proxy(renames["source_type_sofort"]).optional(),
            "source_order": t.proxy(renames["source_order"]).optional(),
            "statement_descriptor": t.string().optional(),
            "status": t.string(),
            "three_d_secure": t.proxy(renames["source_type_three_d_secure"]).optional(),
            "type": t.string(),
            "usage": t.string().optional(),
            "wechat": t.proxy(renames["source_type_wechat"]).optional(),
        }
    ).named(renames["source"])
    types["source_code_verification_flow"] = t.struct(
        {"attempts_remaining": t.integer(), "status": t.string()}
    ).named(renames["source_code_verification_flow"])
    types["source_mandate_notification"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["source_mandate_notification_acss_debit_data"]
            ).optional(),
            "amount": t.integer().optional(),
            "bacs_debit": t.proxy(
                renames["source_mandate_notification_bacs_debit_data"]
            ).optional(),
            "created": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "reason": t.string(),
            "sepa_debit": t.proxy(
                renames["source_mandate_notification_sepa_debit_data"]
            ).optional(),
            "source": t.proxy(renames["source"]),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["source_mandate_notification"])
    types["source_mandate_notification_acss_debit_data"] = t.struct(
        {"statement_descriptor": t.string().optional()}
    ).named(renames["source_mandate_notification_acss_debit_data"])
    types["source_mandate_notification_bacs_debit_data"] = t.struct(
        {"last4": t.string().optional()}
    ).named(renames["source_mandate_notification_bacs_debit_data"])
    types["source_mandate_notification_sepa_debit_data"] = t.struct(
        {
            "creditor_identifier": t.string().optional(),
            "last4": t.string().optional(),
            "mandate_reference": t.string().optional(),
        }
    ).named(renames["source_mandate_notification_sepa_debit_data"])
    types["source_order"] = t.struct(
        {
            "amount": t.integer(),
            "currency": t.string(),
            "email": t.string().optional(),
            "items": t.array(t.proxy(renames["source_order_item"])).optional(),
            "shipping": t.proxy(renames["shipping"]).optional(),
        }
    ).named(renames["source_order"])
    types["source_order_item"] = t.struct(
        {
            "amount": t.integer().optional(),
            "currency": t.string().optional(),
            "description": t.string().optional(),
            "parent": t.string().optional(),
            "quantity": t.integer().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["source_order_item"])
    types["source_owner"] = t.struct(
        {
            "address": t.proxy(renames["address"]).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "phone": t.string().optional(),
            "verified_address": t.proxy(renames["address"]).optional(),
            "verified_email": t.string().optional(),
            "verified_name": t.string().optional(),
            "verified_phone": t.string().optional(),
        }
    ).named(renames["source_owner"])
    types["source_receiver_flow"] = t.struct(
        {
            "address": t.string().optional(),
            "amount_charged": t.integer(),
            "amount_received": t.integer(),
            "amount_returned": t.integer(),
            "refund_attributes_method": t.string(),
            "refund_attributes_status": t.string(),
        }
    ).named(renames["source_receiver_flow"])
    types["source_redirect_flow"] = t.struct(
        {
            "failure_reason": t.string().optional(),
            "return_url": t.string(),
            "status": t.string(),
            "url": t.string(),
        }
    ).named(renames["source_redirect_flow"])
    types["source_transaction"] = t.struct(
        {
            "ach_credit_transfer": t.proxy(
                renames["source_transaction_ach_credit_transfer_data"]
            ).optional(),
            "amount": t.integer(),
            "chf_credit_transfer": t.proxy(
                renames["source_transaction_chf_credit_transfer_data"]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "gbp_credit_transfer": t.proxy(
                renames["source_transaction_gbp_credit_transfer_data"]
            ).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "paper_check": t.proxy(
                renames["source_transaction_paper_check_data"]
            ).optional(),
            "sepa_credit_transfer": t.proxy(
                renames["source_transaction_sepa_credit_transfer_data"]
            ).optional(),
            "source": t.string(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["source_transaction"])
    types["source_transaction_ach_credit_transfer_data"] = t.struct(
        {
            "customer_data": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["source_transaction_ach_credit_transfer_data"])
    types["source_transaction_chf_credit_transfer_data"] = t.struct(
        {
            "reference": t.string().optional(),
            "sender_address_country": t.string().optional(),
            "sender_address_line1": t.string().optional(),
            "sender_iban": t.string().optional(),
            "sender_name": t.string().optional(),
        }
    ).named(renames["source_transaction_chf_credit_transfer_data"])
    types["source_transaction_gbp_credit_transfer_data"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "funding_method": t.string().optional(),
            "last4": t.string().optional(),
            "reference": t.string().optional(),
            "sender_account_number": t.string().optional(),
            "sender_name": t.string().optional(),
            "sender_sort_code": t.string().optional(),
        }
    ).named(renames["source_transaction_gbp_credit_transfer_data"])
    types["source_transaction_paper_check_data"] = t.struct(
        {"available_at": t.string().optional(), "invoices": t.string().optional()}
    ).named(renames["source_transaction_paper_check_data"])
    types["source_transaction_sepa_credit_transfer_data"] = t.struct(
        {
            "reference": t.string().optional(),
            "sender_iban": t.string().optional(),
            "sender_name": t.string().optional(),
        }
    ).named(renames["source_transaction_sepa_credit_transfer_data"])
    types["source_type_ach_credit_transfer"] = t.struct(
        {
            "account_number": t.string().optional(),
            "bank_name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "refund_account_holder_name": t.string().optional(),
            "refund_account_holder_type": t.string().optional(),
            "refund_routing_number": t.string().optional(),
            "routing_number": t.string().optional(),
            "swift_code": t.string().optional(),
        }
    ).named(renames["source_type_ach_credit_transfer"])
    types["source_type_ach_debit"] = t.struct(
        {
            "bank_name": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["source_type_ach_debit"])
    types["source_type_acss_debit"] = t.struct(
        {
            "bank_address_city": t.string().optional(),
            "bank_address_line_1": t.string().optional(),
            "bank_address_line_2": t.string().optional(),
            "bank_address_postal_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "category": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
        }
    ).named(renames["source_type_acss_debit"])
    types["source_type_alipay"] = t.struct(
        {
            "data_string": t.string().optional(),
            "native_url": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_alipay"])
    types["source_type_au_becs_debit"] = t.struct(
        {
            "bsb_number": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
        }
    ).named(renames["source_type_au_becs_debit"])
    types["source_type_bancontact"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_bancontact"])
    types["source_type_card"] = t.struct(
        {
            "address_line1_check": t.string().optional(),
            "address_zip_check": t.string().optional(),
            "brand": t.string().optional(),
            "country": t.string().optional(),
            "cvc_check": t.string().optional(),
            "description": t.string().optional(),
            "dynamic_last4": t.string().optional(),
            "exp_month": t.integer().optional(),
            "exp_year": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "name": t.string().optional(),
            "three_d_secure": t.string().optional(),
            "tokenization_method": t.string().optional(),
        }
    ).named(renames["source_type_card"])
    types["source_type_card_present"] = t.struct(
        {
            "application_cryptogram": t.string().optional(),
            "application_preferred_name": t.string().optional(),
            "authorization_code": t.string().optional(),
            "authorization_response_code": t.string().optional(),
            "brand": t.string().optional(),
            "country": t.string().optional(),
            "cvm_type": t.string().optional(),
            "data_type": t.string().optional(),
            "dedicated_file_name": t.string().optional(),
            "description": t.string().optional(),
            "emv_auth_data": t.string().optional(),
            "evidence_customer_signature": t.string().optional(),
            "evidence_transaction_certificate": t.string().optional(),
            "exp_month": t.integer().optional(),
            "exp_year": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "pos_device_id": t.string().optional(),
            "pos_entry_mode": t.string().optional(),
            "read_method": t.string().optional(),
            "reader": t.string().optional(),
            "terminal_verification_results": t.string().optional(),
            "transaction_status_information": t.string().optional(),
        }
    ).named(renames["source_type_card_present"])
    types["source_type_eps"] = t.struct(
        {
            "reference": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_eps"])
    types["source_type_giropay"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_giropay"])
    types["source_type_ideal"] = t.struct(
        {
            "bank": t.string().optional(),
            "bic": t.string().optional(),
            "iban_last4": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_ideal"])
    types["source_type_klarna"] = t.struct(
        {
            "background_image_url": t.string().optional(),
            "client_token": t.string().optional(),
            "first_name": t.string().optional(),
            "last_name": t.string().optional(),
            "locale": t.string().optional(),
            "logo_url": t.string().optional(),
            "page_title": t.string().optional(),
            "pay_later_asset_urls_descriptive": t.string().optional(),
            "pay_later_asset_urls_standard": t.string().optional(),
            "pay_later_name": t.string().optional(),
            "pay_later_redirect_url": t.string().optional(),
            "pay_now_asset_urls_descriptive": t.string().optional(),
            "pay_now_asset_urls_standard": t.string().optional(),
            "pay_now_name": t.string().optional(),
            "pay_now_redirect_url": t.string().optional(),
            "pay_over_time_asset_urls_descriptive": t.string().optional(),
            "pay_over_time_asset_urls_standard": t.string().optional(),
            "pay_over_time_name": t.string().optional(),
            "pay_over_time_redirect_url": t.string().optional(),
            "payment_method_categories": t.string().optional(),
            "purchase_country": t.string().optional(),
            "purchase_type": t.string().optional(),
            "redirect_url": t.string().optional(),
            "shipping_delay": t.integer().optional(),
            "shipping_first_name": t.string().optional(),
            "shipping_last_name": t.string().optional(),
        }
    ).named(renames["source_type_klarna"])
    types["source_type_multibanco"] = t.struct(
        {
            "entity": t.string().optional(),
            "reference": t.string().optional(),
            "refund_account_holder_address_city": t.string().optional(),
            "refund_account_holder_address_country": t.string().optional(),
            "refund_account_holder_address_line1": t.string().optional(),
            "refund_account_holder_address_line2": t.string().optional(),
            "refund_account_holder_address_postal_code": t.string().optional(),
            "refund_account_holder_address_state": t.string().optional(),
            "refund_account_holder_name": t.string().optional(),
            "refund_iban": t.string().optional(),
        }
    ).named(renames["source_type_multibanco"])
    types["source_type_p24"] = t.struct({"reference": t.string().optional()}).named(
        renames["source_type_p24"]
    )
    types["source_type_sepa_credit_transfer"] = t.struct(
        {
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "iban": t.string().optional(),
            "refund_account_holder_address_city": t.string().optional(),
            "refund_account_holder_address_country": t.string().optional(),
            "refund_account_holder_address_line1": t.string().optional(),
            "refund_account_holder_address_line2": t.string().optional(),
            "refund_account_holder_address_postal_code": t.string().optional(),
            "refund_account_holder_address_state": t.string().optional(),
            "refund_account_holder_name": t.string().optional(),
            "refund_iban": t.string().optional(),
        }
    ).named(renames["source_type_sepa_credit_transfer"])
    types["source_type_sepa_debit"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "branch_code": t.string().optional(),
            "country": t.string().optional(),
            "fingerprint": t.string().optional(),
            "last4": t.string().optional(),
            "mandate_reference": t.string().optional(),
            "mandate_url": t.string().optional(),
        }
    ).named(renames["source_type_sepa_debit"])
    types["source_type_sofort"] = t.struct(
        {
            "bank_code": t.string().optional(),
            "bank_name": t.string().optional(),
            "bic": t.string().optional(),
            "country": t.string().optional(),
            "iban_last4": t.string().optional(),
            "preferred_language": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_sofort"])
    types["source_type_three_d_secure"] = t.struct(
        {
            "address_line1_check": t.string().optional(),
            "address_zip_check": t.string().optional(),
            "authenticated": t.boolean().optional(),
            "brand": t.string().optional(),
            "card": t.string().optional(),
            "country": t.string().optional(),
            "customer": t.string().optional(),
            "cvc_check": t.string().optional(),
            "description": t.string().optional(),
            "dynamic_last4": t.string().optional(),
            "exp_month": t.integer().optional(),
            "exp_year": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "funding": t.string().optional(),
            "iin": t.string().optional(),
            "issuer": t.string().optional(),
            "last4": t.string().optional(),
            "name": t.string().optional(),
            "three_d_secure": t.string().optional(),
            "tokenization_method": t.string().optional(),
        }
    ).named(renames["source_type_three_d_secure"])
    types["source_type_wechat"] = t.struct(
        {
            "prepay_id": t.string().optional(),
            "qr_code_url": t.string().optional(),
            "statement_descriptor": t.string().optional(),
        }
    ).named(renames["source_type_wechat"])
    types["subscription"] = t.struct(
        {
            "application": t.union(
                [
                    t.string(),
                    t.proxy(renames["application"]),
                    t.proxy(renames["deleted_application"]),
                ]
            ).optional(),
            "application_fee_percent": t.number().optional(),
            "automatic_tax": t.proxy(renames["subscription_automatic_tax"]),
            "billing_cycle_anchor": t.integer(),
            "billing_thresholds": t.proxy(
                renames["subscription_billing_thresholds"]
            ).optional(),
            "cancel_at": t.integer().optional(),
            "cancel_at_period_end": t.boolean(),
            "canceled_at": t.integer().optional(),
            "cancellation_details": t.proxy(renames["cancellation_details"]).optional(),
            "collection_method": t.string(),
            "created": t.integer(),
            "currency": t.string(),
            "current_period_end": t.integer(),
            "current_period_start": t.integer(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ),
            "days_until_due": t.integer().optional(),
            "default_payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "default_source": t.union(
                [t.string(), t.proxy(renames["payment_source"])]
            ).optional(),
            "default_tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
            "description": t.string().optional(),
            "discount": t.proxy(renames["discount"]).optional(),
            "ended_at": t.integer().optional(),
            "id": t.string(),
            "items": t.struct(
                {
                    "data": t.array(t.proxy(renames["subscription_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "latest_invoice": t.union(
                [t.string(), t.proxy(renames["invoice"])]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "next_pending_invoice_item_invoice": t.integer().optional(),
            "object": t.string(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "pause_collection": t.proxy(
                renames["subscriptions_resource_pause_collection"]
            ).optional(),
            "payment_settings": t.proxy(
                renames["subscriptions_resource_payment_settings"]
            ).optional(),
            "pending_invoice_item_interval": t.proxy(
                renames["subscription_pending_invoice_item_interval"]
            ).optional(),
            "pending_setup_intent": t.union(
                [t.string(), t.proxy(renames["setup_intent"])]
            ).optional(),
            "pending_update": t.proxy(
                renames["subscriptions_resource_pending_update"]
            ).optional(),
            "schedule": t.union(
                [t.string(), t.proxy(renames["subscription_schedule"])]
            ).optional(),
            "start_date": t.integer(),
            "status": t.string(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
            "transfer_data": t.proxy(renames["subscription_transfer_data"]).optional(),
            "trial_end": t.integer().optional(),
            "trial_settings": t.proxy(
                renames["subscriptions_trials_resource_trial_settings"]
            ).optional(),
            "trial_start": t.integer().optional(),
        }
    ).named(renames["subscription"])
    types["subscription_automatic_tax"] = t.struct({"enabled": t.boolean()}).named(
        renames["subscription_automatic_tax"]
    )
    types["subscription_billing_thresholds"] = t.struct(
        {
            "amount_gte": t.integer().optional(),
            "reset_billing_cycle_anchor": t.boolean().optional(),
        }
    ).named(renames["subscription_billing_thresholds"])
    types["subscription_item"] = t.struct(
        {
            "billing_thresholds": t.proxy(
                renames["subscription_item_billing_thresholds"]
            ).optional(),
            "created": t.integer(),
            "id": t.string(),
            "metadata": t.struct({}),
            "object": t.string(),
            "plan": t.proxy(renames["plan"]),
            "price": t.proxy(renames["price"]),
            "quantity": t.integer().optional(),
            "subscription": t.string(),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
        }
    ).named(renames["subscription_item"])
    types["subscription_item_billing_thresholds"] = t.struct(
        {"usage_gte": t.integer().optional()}
    ).named(renames["subscription_item_billing_thresholds"])
    types["subscription_payment_method_options_card"] = t.struct(
        {
            "mandate_options": t.proxy(
                renames["invoice_mandate_options_card"]
            ).optional(),
            "network": t.string().optional(),
            "request_three_d_secure": t.string().optional(),
        }
    ).named(renames["subscription_payment_method_options_card"])
    types["subscription_pending_invoice_item_interval"] = t.struct(
        {"interval": t.string(), "interval_count": t.integer()}
    ).named(renames["subscription_pending_invoice_item_interval"])
    types["subscription_schedule"] = t.struct(
        {
            "application": t.union(
                [
                    t.string(),
                    t.proxy(renames["application"]),
                    t.proxy(renames["deleted_application"]),
                ]
            ).optional(),
            "canceled_at": t.integer().optional(),
            "completed_at": t.integer().optional(),
            "created": t.integer(),
            "current_phase": t.proxy(
                renames["subscription_schedule_current_phase"]
            ).optional(),
            "customer": t.union(
                [
                    t.string(),
                    t.proxy(renames["customer"]),
                    t.proxy(renames["deleted_customer"]),
                ]
            ),
            "default_settings": t.proxy(
                renames["subscription_schedules_resource_default_settings"]
            ),
            "end_behavior": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "phases": t.array(
                t.proxy(renames["subscription_schedule_phase_configuration"])
            ),
            "released_at": t.integer().optional(),
            "released_subscription": t.string().optional(),
            "status": t.string(),
            "subscription": t.union(
                [t.string(), t.proxy(renames["subscription"])]
            ).optional(),
            "test_clock": t.union(
                [t.string(), t.proxy(renames["test_helpers.test_clock"])]
            ).optional(),
        }
    ).named(renames["subscription_schedule"])
    types["subscription_schedule_add_invoice_item"] = t.struct(
        {
            "price": t.union(
                [
                    t.string(),
                    t.proxy(renames["price"]),
                    t.proxy(renames["deleted_price"]),
                ]
            ),
            "quantity": t.integer().optional(),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
        }
    ).named(renames["subscription_schedule_add_invoice_item"])
    types["subscription_schedule_configuration_item"] = t.struct(
        {
            "billing_thresholds": t.proxy(
                renames["subscription_item_billing_thresholds"]
            ).optional(),
            "metadata": t.struct({}).optional(),
            "plan": t.union(
                [t.string(), t.proxy(renames["plan"]), t.proxy(renames["deleted_plan"])]
            ),
            "price": t.union(
                [
                    t.string(),
                    t.proxy(renames["price"]),
                    t.proxy(renames["deleted_price"]),
                ]
            ),
            "quantity": t.integer().optional(),
            "tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
        }
    ).named(renames["subscription_schedule_configuration_item"])
    types["subscription_schedule_current_phase"] = t.struct(
        {"end_date": t.integer(), "start_date": t.integer()}
    ).named(renames["subscription_schedule_current_phase"])
    types["subscription_schedule_phase_configuration"] = t.struct(
        {
            "add_invoice_items": t.array(
                t.proxy(renames["subscription_schedule_add_invoice_item"])
            ),
            "application_fee_percent": t.number().optional(),
            "automatic_tax": t.proxy(
                renames["schedules_phase_automatic_tax"]
            ).optional(),
            "billing_cycle_anchor": t.string().optional(),
            "billing_thresholds": t.proxy(
                renames["subscription_billing_thresholds"]
            ).optional(),
            "collection_method": t.string().optional(),
            "coupon": t.union(
                [
                    t.string(),
                    t.proxy(renames["coupon"]),
                    t.proxy(renames["deleted_coupon"]),
                ]
            ).optional(),
            "currency": t.string(),
            "default_payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "default_tax_rates": t.array(t.proxy(renames["tax_rate"])).optional(),
            "description": t.string().optional(),
            "end_date": t.integer(),
            "invoice_settings": t.proxy(
                renames["invoice_setting_phase_setting"]
            ).optional(),
            "items": t.array(
                t.proxy(renames["subscription_schedule_configuration_item"])
            ),
            "metadata": t.struct({}).optional(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "proration_behavior": t.string(),
            "start_date": t.integer(),
            "transfer_data": t.proxy(renames["subscription_transfer_data"]).optional(),
            "trial_end": t.integer().optional(),
        }
    ).named(renames["subscription_schedule_phase_configuration"])
    types["subscription_schedules_resource_default_settings"] = t.struct(
        {
            "application_fee_percent": t.number().optional(),
            "automatic_tax": t.proxy(
                renames[
                    "subscription_schedules_resource_default_settings_automatic_tax"
                ]
            ).optional(),
            "billing_cycle_anchor": t.string(),
            "billing_thresholds": t.proxy(
                renames["subscription_billing_thresholds"]
            ).optional(),
            "collection_method": t.string().optional(),
            "default_payment_method": t.union(
                [t.string(), t.proxy(renames["payment_method"])]
            ).optional(),
            "description": t.string().optional(),
            "invoice_settings": t.proxy(
                renames["invoice_setting_subscription_schedule_setting"]
            ).optional(),
            "on_behalf_of": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "transfer_data": t.proxy(renames["subscription_transfer_data"]).optional(),
        }
    ).named(renames["subscription_schedules_resource_default_settings"])
    types["subscription_schedules_resource_default_settings_automatic_tax"] = t.struct(
        {"enabled": t.boolean()}
    ).named(renames["subscription_schedules_resource_default_settings_automatic_tax"])
    types["subscription_transfer_data"] = t.struct(
        {
            "amount_percent": t.number().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["subscription_transfer_data"])
    types["subscriptions_resource_pause_collection"] = t.struct(
        {"behavior": t.string(), "resumes_at": t.integer().optional()}
    ).named(renames["subscriptions_resource_pause_collection"])
    types["subscriptions_resource_payment_method_options"] = t.struct(
        {
            "acss_debit": t.proxy(
                renames["invoice_payment_method_options_acss_debit"]
            ).optional(),
            "bancontact": t.proxy(
                renames["invoice_payment_method_options_bancontact"]
            ).optional(),
            "card": t.proxy(
                renames["subscription_payment_method_options_card"]
            ).optional(),
            "customer_balance": t.proxy(
                renames["invoice_payment_method_options_customer_balance"]
            ).optional(),
            "konbini": t.proxy(
                renames["invoice_payment_method_options_konbini"]
            ).optional(),
            "us_bank_account": t.proxy(
                renames["invoice_payment_method_options_us_bank_account"]
            ).optional(),
        }
    ).named(renames["subscriptions_resource_payment_method_options"])
    types["subscriptions_resource_payment_settings"] = t.struct(
        {
            "payment_method_options": t.proxy(
                renames["subscriptions_resource_payment_method_options"]
            ).optional(),
            "payment_method_types": t.array(t.string()).optional(),
            "save_default_payment_method": t.string().optional(),
        }
    ).named(renames["subscriptions_resource_payment_settings"])
    types["subscriptions_resource_pending_update"] = t.struct(
        {
            "billing_cycle_anchor": t.integer().optional(),
            "expires_at": t.integer(),
            "subscription_items": t.array(
                t.proxy(renames["subscription_item"])
            ).optional(),
            "trial_end": t.integer().optional(),
            "trial_from_plan": t.boolean().optional(),
        }
    ).named(renames["subscriptions_resource_pending_update"])
    types["subscriptions_trials_resource_end_behavior"] = t.struct(
        {"missing_payment_method": t.string()}
    ).named(renames["subscriptions_trials_resource_end_behavior"])
    types["subscriptions_trials_resource_trial_settings"] = t.struct(
        {"end_behavior": t.proxy(renames["subscriptions_trials_resource_end_behavior"])}
    ).named(renames["subscriptions_trials_resource_trial_settings"])
    types["tax.calculation"] = t.struct(
        {
            "amount_total": t.integer(),
            "currency": t.string(),
            "customer": t.string().optional(),
            "customer_details": t.proxy(
                renames["tax_product_resource_customer_details"]
            ),
            "expires_at": t.integer().optional(),
            "id": t.string().optional(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["tax.calculation_line_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "shipping_cost": t.proxy(
                renames["tax_product_resource_tax_calculation_shipping_cost"]
            ).optional(),
            "tax_amount_exclusive": t.integer(),
            "tax_amount_inclusive": t.integer(),
            "tax_breakdown": t.array(
                t.proxy(renames["tax_product_resource_tax_breakdown"])
            ),
            "tax_date": t.integer(),
        }
    ).named(renames["tax.calculation"])
    types["tax.calculation_line_item"] = t.struct(
        {
            "amount": t.integer(),
            "amount_tax": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "product": t.string().optional(),
            "quantity": t.integer(),
            "reference": t.string().optional(),
            "tax_behavior": t.string(),
            "tax_breakdown": t.array(
                t.proxy(renames["tax_product_resource_line_item_tax_breakdown"])
            ).optional(),
            "tax_code": t.string(),
        }
    ).named(renames["tax.calculation_line_item"])
    types["tax.transaction"] = t.struct(
        {
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.string().optional(),
            "customer_details": t.proxy(
                renames["tax_product_resource_customer_details"]
            ),
            "id": t.string(),
            "line_items": t.struct(
                {
                    "data": t.array(t.proxy(renames["tax.transaction_line_item"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "reference": t.string(),
            "reversal": t.proxy(
                renames["tax_product_resource_tax_transaction_resource_reversal"]
            ).optional(),
            "shipping_cost": t.proxy(
                renames["tax_product_resource_tax_transaction_shipping_cost"]
            ).optional(),
            "tax_date": t.integer(),
            "type": t.string(),
        }
    ).named(renames["tax.transaction"])
    types["tax.transaction_line_item"] = t.struct(
        {
            "amount": t.integer(),
            "amount_tax": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "quantity": t.integer(),
            "reference": t.string(),
            "reversal": t.proxy(
                renames[
                    "tax_product_resource_tax_transaction_line_item_resource_reversal"
                ]
            ).optional(),
            "tax_behavior": t.string(),
            "tax_code": t.string(),
            "type": t.string(),
        }
    ).named(renames["tax.transaction_line_item"])
    types["tax_code"] = t.struct(
        {
            "description": t.string(),
            "id": t.string(),
            "name": t.string(),
            "object": t.string(),
        }
    ).named(renames["tax_code"])
    types["tax_deducted_at_source"] = t.struct(
        {
            "id": t.string(),
            "object": t.string(),
            "period_end": t.integer(),
            "period_start": t.integer(),
            "tax_deduction_account_number": t.string(),
        }
    ).named(renames["tax_deducted_at_source"])
    types["tax_id"] = t.struct(
        {
            "country": t.string().optional(),
            "created": t.integer(),
            "customer": t.union([t.string(), t.proxy(renames["customer"])]).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "type": t.string(),
            "value": t.string(),
            "verification": t.proxy(renames["tax_id_verification"]).optional(),
        }
    ).named(renames["tax_id"])
    types["tax_id_verification"] = t.struct(
        {
            "status": t.string(),
            "verified_address": t.string().optional(),
            "verified_name": t.string().optional(),
        }
    ).named(renames["tax_id_verification"])
    types["tax_product_resource_customer_details"] = t.struct(
        {
            "address": t.proxy(
                renames["tax_product_resource_postal_address"]
            ).optional(),
            "address_source": t.string().optional(),
            "ip_address": t.string().optional(),
            "tax_ids": t.array(
                t.proxy(
                    renames["tax_product_resource_customer_details_resource_tax_id"]
                )
            ),
            "taxability_override": t.string(),
        }
    ).named(renames["tax_product_resource_customer_details"])
    types["tax_product_resource_customer_details_resource_tax_id"] = t.struct(
        {"type": t.string(), "value": t.string()}
    ).named(renames["tax_product_resource_customer_details_resource_tax_id"])
    types["tax_product_resource_jurisdiction"] = t.struct(
        {
            "country": t.string(),
            "display_name": t.string(),
            "level": t.string(),
            "state": t.string().optional(),
        }
    ).named(renames["tax_product_resource_jurisdiction"])
    types["tax_product_resource_line_item_tax_breakdown"] = t.struct(
        {
            "amount": t.integer(),
            "jurisdiction": t.proxy(renames["tax_product_resource_jurisdiction"]),
            "sourcing": t.string(),
            "tax_rate_details": t.proxy(
                renames["tax_product_resource_line_item_tax_rate_details"]
            ).optional(),
            "taxability_reason": t.string(),
            "taxable_amount": t.integer(),
        }
    ).named(renames["tax_product_resource_line_item_tax_breakdown"])
    types["tax_product_resource_line_item_tax_rate_details"] = t.struct(
        {
            "display_name": t.string(),
            "percentage_decimal": t.string(),
            "tax_type": t.string(),
        }
    ).named(renames["tax_product_resource_line_item_tax_rate_details"])
    types["tax_product_resource_postal_address"] = t.struct(
        {
            "city": t.string().optional(),
            "country": t.string(),
            "line1": t.string().optional(),
            "line2": t.string().optional(),
            "postal_code": t.string().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["tax_product_resource_postal_address"])
    types["tax_product_resource_tax_breakdown"] = t.struct(
        {
            "amount": t.integer(),
            "inclusive": t.boolean(),
            "tax_rate_details": t.proxy(
                renames["tax_product_resource_tax_rate_details"]
            ),
            "taxable_amount": t.integer(),
        }
    ).named(renames["tax_product_resource_tax_breakdown"])
    types["tax_product_resource_tax_calculation_shipping_cost"] = t.struct(
        {
            "amount": t.integer(),
            "amount_tax": t.integer(),
            "shipping_rate": t.string().optional(),
            "tax_behavior": t.string(),
            "tax_breakdown": t.array(
                t.proxy(renames["tax_product_resource_line_item_tax_breakdown"])
            ).optional(),
            "tax_code": t.string(),
        }
    ).named(renames["tax_product_resource_tax_calculation_shipping_cost"])
    types["tax_product_resource_tax_rate_details"] = t.struct(
        {
            "country": t.string().optional(),
            "percentage_decimal": t.string(),
            "state": t.string().optional(),
            "tax_type": t.string().optional(),
        }
    ).named(renames["tax_product_resource_tax_rate_details"])
    types[
        "tax_product_resource_tax_transaction_line_item_resource_reversal"
    ] = t.struct({"original_line_item": t.string()}).named(
        renames["tax_product_resource_tax_transaction_line_item_resource_reversal"]
    )
    types["tax_product_resource_tax_transaction_resource_reversal"] = t.struct(
        {"original_transaction": t.string().optional()}
    ).named(renames["tax_product_resource_tax_transaction_resource_reversal"])
    types["tax_product_resource_tax_transaction_shipping_cost"] = t.struct(
        {
            "amount": t.integer(),
            "amount_tax": t.integer(),
            "shipping_rate": t.string().optional(),
            "tax_behavior": t.string(),
            "tax_breakdown": t.array(
                t.proxy(renames["tax_product_resource_line_item_tax_breakdown"])
            ).optional(),
            "tax_code": t.string(),
        }
    ).named(renames["tax_product_resource_tax_transaction_shipping_cost"])
    types["tax_rate"] = t.struct(
        {
            "active": t.boolean(),
            "country": t.string().optional(),
            "created": t.integer(),
            "description": t.string().optional(),
            "display_name": t.string(),
            "effective_percentage": t.number().optional(),
            "id": t.string(),
            "inclusive": t.boolean(),
            "jurisdiction": t.string().optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "percentage": t.number(),
            "state": t.string().optional(),
            "tax_type": t.string().optional(),
        }
    ).named(renames["tax_rate"])
    types["terminal.configuration"] = t.struct(
        {
            "bbpos_wisepos_e": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_device_type_specific_config"
                ]
            ).optional(),
            "id": t.string(),
            "is_account_default": t.boolean().optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "tipping": t.proxy(
                renames["terminal_configuration_configuration_resource_tipping"]
            ).optional(),
            "verifone_p400": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_device_type_specific_config"
                ]
            ).optional(),
        }
    ).named(renames["terminal.configuration"])
    types["terminal.connection_token"] = t.struct(
        {"location": t.string().optional(), "object": t.string(), "secret": t.string()}
    ).named(renames["terminal.connection_token"])
    types["terminal.location"] = t.struct(
        {
            "address": t.proxy(renames["address"]),
            "configuration_overrides": t.string().optional(),
            "display_name": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
        }
    ).named(renames["terminal.location"])
    types["terminal.reader"] = t.struct(
        {
            "action": t.proxy(
                renames["terminal_reader_reader_resource_reader_action"]
            ).optional(),
            "device_sw_version": t.string().optional(),
            "device_type": t.string(),
            "id": t.string(),
            "ip_address": t.string().optional(),
            "label": t.string(),
            "livemode": t.boolean(),
            "location": t.union(
                [t.string(), t.proxy(renames["terminal.location"])]
            ).optional(),
            "metadata": t.struct({}),
            "object": t.string(),
            "serial_number": t.string(),
            "status": t.string().optional(),
        }
    ).named(renames["terminal.reader"])
    types[
        "terminal_configuration_configuration_resource_currency_specific_config"
    ] = t.struct(
        {
            "fixed_amounts": t.array(t.integer()).optional(),
            "percentages": t.array(t.integer()).optional(),
            "smart_tip_threshold": t.integer().optional(),
        }
    ).named(
        renames[
            "terminal_configuration_configuration_resource_currency_specific_config"
        ]
    )
    types[
        "terminal_configuration_configuration_resource_device_type_specific_config"
    ] = t.struct(
        {"splashscreen": t.union([t.string(), t.proxy(renames["file"])]).optional()}
    ).named(
        renames[
            "terminal_configuration_configuration_resource_device_type_specific_config"
        ]
    )
    types["terminal_configuration_configuration_resource_tipping"] = t.struct(
        {
            "aud": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "cad": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "chf": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "czk": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "dkk": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "eur": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "gbp": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "hkd": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "myr": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "nok": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "nzd": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "sek": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "sgd": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
            "usd": t.proxy(
                renames[
                    "terminal_configuration_configuration_resource_currency_specific_config"
                ]
            ).optional(),
        }
    ).named(renames["terminal_configuration_configuration_resource_tipping"])
    types["terminal_reader_reader_resource_cart"] = t.struct(
        {
            "currency": t.string(),
            "line_items": t.array(
                t.proxy(renames["terminal_reader_reader_resource_line_item"])
            ),
            "tax": t.integer().optional(),
            "total": t.integer(),
        }
    ).named(renames["terminal_reader_reader_resource_cart"])
    types["terminal_reader_reader_resource_line_item"] = t.struct(
        {"amount": t.integer(), "description": t.string(), "quantity": t.integer()}
    ).named(renames["terminal_reader_reader_resource_line_item"])
    types["terminal_reader_reader_resource_process_config"] = t.struct(
        {
            "skip_tipping": t.boolean().optional(),
            "tipping": t.proxy(
                renames["terminal_reader_reader_resource_tipping_config"]
            ).optional(),
        }
    ).named(renames["terminal_reader_reader_resource_process_config"])
    types["terminal_reader_reader_resource_process_payment_intent_action"] = t.struct(
        {
            "payment_intent": t.union([t.string(), t.proxy(renames["payment_intent"])]),
            "process_config": t.proxy(
                renames["terminal_reader_reader_resource_process_config"]
            ).optional(),
        }
    ).named(renames["terminal_reader_reader_resource_process_payment_intent_action"])
    types["terminal_reader_reader_resource_process_setup_intent_action"] = t.struct(
        {
            "generated_card": t.string().optional(),
            "setup_intent": t.union([t.string(), t.proxy(renames["setup_intent"])]),
        }
    ).named(renames["terminal_reader_reader_resource_process_setup_intent_action"])
    types["terminal_reader_reader_resource_reader_action"] = t.struct(
        {
            "failure_code": t.string().optional(),
            "failure_message": t.string().optional(),
            "process_payment_intent": t.proxy(
                renames["terminal_reader_reader_resource_process_payment_intent_action"]
            ).optional(),
            "process_setup_intent": t.proxy(
                renames["terminal_reader_reader_resource_process_setup_intent_action"]
            ).optional(),
            "refund_payment": t.proxy(
                renames["terminal_reader_reader_resource_refund_payment_action"]
            ).optional(),
            "set_reader_display": t.proxy(
                renames["terminal_reader_reader_resource_set_reader_display_action"]
            ).optional(),
            "status": t.string(),
            "type": t.string(),
        }
    ).named(renames["terminal_reader_reader_resource_reader_action"])
    types["terminal_reader_reader_resource_refund_payment_action"] = t.struct(
        {
            "amount": t.integer().optional(),
            "charge": t.union([t.string(), t.proxy(renames["charge"])]).optional(),
            "metadata": t.struct({}).optional(),
            "payment_intent": t.union(
                [t.string(), t.proxy(renames["payment_intent"])]
            ).optional(),
            "reason": t.string().optional(),
            "refund": t.union([t.string(), t.proxy(renames["refund"])]).optional(),
            "refund_application_fee": t.boolean().optional(),
            "reverse_transfer": t.boolean().optional(),
        }
    ).named(renames["terminal_reader_reader_resource_refund_payment_action"])
    types["terminal_reader_reader_resource_set_reader_display_action"] = t.struct(
        {
            "cart": t.proxy(renames["terminal_reader_reader_resource_cart"]).optional(),
            "type": t.string(),
        }
    ).named(renames["terminal_reader_reader_resource_set_reader_display_action"])
    types["terminal_reader_reader_resource_tipping_config"] = t.struct(
        {"amount_eligible": t.integer().optional()}
    ).named(renames["terminal_reader_reader_resource_tipping_config"])
    types["test_helpers.test_clock"] = t.struct(
        {
            "created": t.integer(),
            "deletes_after": t.integer(),
            "frozen_time": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "name": t.string().optional(),
            "object": t.string(),
            "status": t.string(),
        }
    ).named(renames["test_helpers.test_clock"])
    types["three_d_secure_details"] = t.struct(
        {
            "authentication_flow": t.string().optional(),
            "result": t.string().optional(),
            "result_reason": t.string().optional(),
            "version": t.string().optional(),
        }
    ).named(renames["three_d_secure_details"])
    types["three_d_secure_usage"] = t.struct({"supported": t.boolean()}).named(
        renames["three_d_secure_usage"]
    )
    types["token"] = t.struct(
        {
            "bank_account": t.proxy(renames["bank_account"]).optional(),
            "card": t.proxy(renames["card"]).optional(),
            "client_ip": t.string().optional(),
            "created": t.integer(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "type": t.string(),
            "used": t.boolean(),
        }
    ).named(renames["token"])
    types["topup"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "expected_availability_date": t.integer().optional(),
            "failure_code": t.string().optional(),
            "failure_message": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "source": t.proxy(renames["source"]).optional(),
            "statement_descriptor": t.string().optional(),
            "status": t.string(),
            "transfer_group": t.string().optional(),
        }
    ).named(renames["topup"])
    types["transfer"] = t.struct(
        {
            "amount": t.integer(),
            "amount_reversed": t.integer(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "destination": t.union(
                [t.string(), t.proxy(renames["account"])]
            ).optional(),
            "destination_payment": t.union(
                [t.string(), t.proxy(renames["charge"])]
            ).optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "reversals": t.struct(
                {
                    "data": t.array(t.proxy(renames["transfer_reversal"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ),
            "reversed": t.boolean(),
            "source_transaction": t.union(
                [t.string(), t.proxy(renames["charge"])]
            ).optional(),
            "source_type": t.string().optional(),
            "transfer_group": t.string().optional(),
        }
    ).named(renames["transfer"])
    types["transfer_data"] = t.struct(
        {
            "amount": t.integer().optional(),
            "destination": t.union([t.string(), t.proxy(renames["account"])]),
        }
    ).named(renames["transfer_data"])
    types["transfer_reversal"] = t.struct(
        {
            "amount": t.integer(),
            "balance_transaction": t.union(
                [t.string(), t.proxy(renames["balance_transaction"])]
            ).optional(),
            "created": t.integer(),
            "currency": t.string(),
            "destination_payment_refund": t.union(
                [t.string(), t.proxy(renames["refund"])]
            ).optional(),
            "id": t.string(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "source_refund": t.union(
                [t.string(), t.proxy(renames["refund"])]
            ).optional(),
            "transfer": t.union([t.string(), t.proxy(renames["transfer"])]),
        }
    ).named(renames["transfer_reversal"])
    types["transfer_schedule"] = t.struct(
        {
            "delay_days": t.integer(),
            "interval": t.string(),
            "monthly_anchor": t.integer().optional(),
            "weekly_anchor": t.string().optional(),
        }
    ).named(renames["transfer_schedule"])
    types["transform_quantity"] = t.struct(
        {"divide_by": t.integer(), "round": t.string()}
    ).named(renames["transform_quantity"])
    types["transform_usage"] = t.struct(
        {"divide_by": t.integer(), "round": t.string()}
    ).named(renames["transform_usage"])
    types["treasury.credit_reversal"] = t.struct(
        {
            "amount": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "financial_account": t.string(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "network": t.string(),
            "object": t.string(),
            "received_credit": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames["treasury_received_credits_resource_status_transitions"]
            ),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ).optional(),
        }
    ).named(renames["treasury.credit_reversal"])
    types["treasury.debit_reversal"] = t.struct(
        {
            "amount": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "financial_account": t.string().optional(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "linked_flows": t.proxy(
                renames["treasury_received_debits_resource_debit_reversal_linked_flows"]
            ).optional(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "network": t.string(),
            "object": t.string(),
            "received_debit": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames["treasury_received_debits_resource_status_transitions"]
            ),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ).optional(),
        }
    ).named(renames["treasury.debit_reversal"])
    types["treasury.financial_account"] = t.struct(
        {
            "active_features": t.array(t.string()).optional(),
            "balance": t.proxy(renames["treasury_financial_accounts_resource_balance"]),
            "country": t.string(),
            "created": t.integer(),
            "features": t.proxy(
                renames["treasury.financial_account_features"]
            ).optional(),
            "financial_addresses": t.array(
                t.proxy(
                    renames["treasury_financial_accounts_resource_financial_address"]
                )
            ),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}).optional(),
            "object": t.string(),
            "pending_features": t.array(t.string()).optional(),
            "platform_restrictions": t.proxy(
                renames["treasury_financial_accounts_resource_platform_restrictions"]
            ).optional(),
            "restricted_features": t.array(t.string()).optional(),
            "status": t.string(),
            "status_details": t.proxy(
                renames["treasury_financial_accounts_resource_status_details"]
            ),
            "supported_currencies": t.array(t.string()),
        }
    ).named(renames["treasury.financial_account"])
    types["treasury.financial_account_features"] = t.struct(
        {
            "card_issuing": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional(),
            "deposit_insurance": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional(),
            "financial_addresses": t.proxy(
                renames[
                    "treasury_financial_accounts_resource_financial_addresses_features"
                ]
            ).optional(),
            "inbound_transfers": t.proxy(
                renames["treasury_financial_accounts_resource_inbound_transfers"]
            ).optional(),
            "intra_stripe_flows": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional(),
            "object": t.string(),
            "outbound_payments": t.proxy(
                renames["treasury_financial_accounts_resource_outbound_payments"]
            ).optional(),
            "outbound_transfers": t.proxy(
                renames["treasury_financial_accounts_resource_outbound_transfers"]
            ).optional(),
        }
    ).named(renames["treasury.financial_account_features"])
    types["treasury.inbound_transfer"] = t.struct(
        {
            "amount": t.integer(),
            "cancelable": t.boolean(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "failure_details": t.proxy(
                renames["treasury_inbound_transfers_resource_failure_details"]
            ).optional(),
            "financial_account": t.string(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "linked_flows": t.proxy(
                renames[
                    "treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows"
                ]
            ),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "origin_payment_method": t.string(),
            "origin_payment_method_details": t.proxy(
                renames["inbound_transfers"]
            ).optional(),
            "returned": t.boolean().optional(),
            "statement_descriptor": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames[
                    "treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions"
                ]
            ),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ).optional(),
        }
    ).named(renames["treasury.inbound_transfer"])
    types["treasury.outbound_payment"] = t.struct(
        {
            "amount": t.integer(),
            "cancelable": t.boolean(),
            "created": t.integer(),
            "currency": t.string(),
            "customer": t.string().optional(),
            "description": t.string().optional(),
            "destination_payment_method": t.string().optional(),
            "destination_payment_method_details": t.proxy(
                renames["outbound_payments_payment_method_details"]
            ).optional(),
            "end_user_details": t.proxy(
                renames[
                    "treasury_outbound_payments_resource_outbound_payment_resource_end_user_details"
                ]
            ).optional(),
            "expected_arrival_date": t.integer(),
            "financial_account": t.string(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "returned_details": t.proxy(
                renames["treasury_outbound_payments_resource_returned_status"]
            ).optional(),
            "statement_descriptor": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames[
                    "treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"
                ]
            ),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ),
        }
    ).named(renames["treasury.outbound_payment"])
    types["treasury.outbound_transfer"] = t.struct(
        {
            "amount": t.integer(),
            "cancelable": t.boolean(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string().optional(),
            "destination_payment_method": t.string().optional(),
            "destination_payment_method_details": t.proxy(
                renames["outbound_transfers_payment_method_details"]
            ),
            "expected_arrival_date": t.integer(),
            "financial_account": t.string(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "returned_details": t.proxy(
                renames["treasury_outbound_transfers_resource_returned_details"]
            ).optional(),
            "statement_descriptor": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames["treasury_outbound_transfers_resource_status_transitions"]
            ),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ),
        }
    ).named(renames["treasury.outbound_transfer"])
    types["treasury.received_credit"] = t.struct(
        {
            "amount": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string(),
            "failure_code": t.string().optional(),
            "financial_account": t.string().optional(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "initiating_payment_method_details": t.proxy(
                renames[
                    "treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"
                ]
            ),
            "linked_flows": t.proxy(
                renames["treasury_received_credits_resource_linked_flows"]
            ),
            "livemode": t.boolean(),
            "network": t.string(),
            "object": t.string(),
            "reversal_details": t.proxy(
                renames["treasury_received_credits_resource_reversal_details"]
            ).optional(),
            "status": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ).optional(),
        }
    ).named(renames["treasury.received_credit"])
    types["treasury.received_debit"] = t.struct(
        {
            "amount": t.integer(),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string(),
            "failure_code": t.string().optional(),
            "financial_account": t.string().optional(),
            "hosted_regulatory_receipt_url": t.string().optional(),
            "id": t.string(),
            "initiating_payment_method_details": t.proxy(
                renames[
                    "treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"
                ]
            ).optional(),
            "linked_flows": t.proxy(
                renames["treasury_received_debits_resource_linked_flows"]
            ),
            "livemode": t.boolean(),
            "network": t.string(),
            "object": t.string(),
            "reversal_details": t.proxy(
                renames["treasury_received_debits_resource_reversal_details"]
            ).optional(),
            "status": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ).optional(),
        }
    ).named(renames["treasury.received_debit"])
    types["treasury.transaction"] = t.struct(
        {
            "amount": t.integer(),
            "balance_impact": t.proxy(
                renames["treasury_transactions_resource_balance_impact"]
            ),
            "created": t.integer(),
            "currency": t.string(),
            "description": t.string(),
            "entries": t.struct(
                {
                    "data": t.array(t.proxy(renames["treasury.transaction_entry"])),
                    "has_more": t.boolean(),
                    "object": t.string(),
                    "url": t.string(),
                }
            ).optional(),
            "financial_account": t.string(),
            "flow": t.string().optional(),
            "flow_details": t.proxy(
                renames["treasury_transactions_resource_flow_details"]
            ).optional(),
            "flow_type": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "status": t.string(),
            "status_transitions": t.proxy(
                renames[
                    "treasury_transactions_resource_abstract_transaction_resource_status_transitions"
                ]
            ),
        }
    ).named(renames["treasury.transaction"])
    types["treasury.transaction_entry"] = t.struct(
        {
            "balance_impact": t.proxy(
                renames["treasury_transactions_resource_balance_impact"]
            ),
            "created": t.integer(),
            "currency": t.string(),
            "effective_at": t.integer(),
            "financial_account": t.string(),
            "flow": t.string().optional(),
            "flow_details": t.proxy(
                renames["treasury_transactions_resource_flow_details"]
            ).optional(),
            "flow_type": t.string(),
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ),
            "type": t.string(),
        }
    ).named(renames["treasury.transaction_entry"])
    types["treasury_financial_accounts_resource_aba_record"] = t.struct(
        {
            "account_holder_name": t.string(),
            "account_number": t.string().optional(),
            "account_number_last4": t.string(),
            "bank_name": t.string(),
            "routing_number": t.string(),
        }
    ).named(renames["treasury_financial_accounts_resource_aba_record"])
    types["treasury_financial_accounts_resource_ach_toggle_settings"] = t.struct(
        {
            "requested": t.boolean(),
            "status": t.string(),
            "status_details": t.array(
                t.proxy(
                    renames[
                        "treasury_financial_accounts_resource_toggles_setting_status_details"
                    ]
                )
            ),
        }
    ).named(renames["treasury_financial_accounts_resource_ach_toggle_settings"])
    types["treasury_financial_accounts_resource_balance"] = t.struct(
        {
            "cash": t.struct({}),
            "inbound_pending": t.struct({}),
            "outbound_pending": t.struct({}),
        }
    ).named(renames["treasury_financial_accounts_resource_balance"])
    types["treasury_financial_accounts_resource_closed_status_details"] = t.struct(
        {"reasons": t.array(t.string())}
    ).named(renames["treasury_financial_accounts_resource_closed_status_details"])
    types["treasury_financial_accounts_resource_financial_address"] = t.struct(
        {
            "aba": t.proxy(
                renames["treasury_financial_accounts_resource_aba_record"]
            ).optional(),
            "supported_networks": t.array(t.string()).optional(),
            "type": t.string(),
        }
    ).named(renames["treasury_financial_accounts_resource_financial_address"])
    types[
        "treasury_financial_accounts_resource_financial_addresses_features"
    ] = t.struct(
        {
            "aba": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional()
        }
    ).named(
        renames["treasury_financial_accounts_resource_financial_addresses_features"]
    )
    types["treasury_financial_accounts_resource_inbound_transfers"] = t.struct(
        {
            "ach": t.proxy(
                renames["treasury_financial_accounts_resource_ach_toggle_settings"]
            ).optional()
        }
    ).named(renames["treasury_financial_accounts_resource_inbound_transfers"])
    types["treasury_financial_accounts_resource_outbound_payments"] = t.struct(
        {
            "ach": t.proxy(
                renames["treasury_financial_accounts_resource_ach_toggle_settings"]
            ).optional(),
            "us_domestic_wire": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional(),
        }
    ).named(renames["treasury_financial_accounts_resource_outbound_payments"])
    types["treasury_financial_accounts_resource_outbound_transfers"] = t.struct(
        {
            "ach": t.proxy(
                renames["treasury_financial_accounts_resource_ach_toggle_settings"]
            ).optional(),
            "us_domestic_wire": t.proxy(
                renames["treasury_financial_accounts_resource_toggle_settings"]
            ).optional(),
        }
    ).named(renames["treasury_financial_accounts_resource_outbound_transfers"])
    types["treasury_financial_accounts_resource_platform_restrictions"] = t.struct(
        {
            "inbound_flows": t.string().optional(),
            "outbound_flows": t.string().optional(),
        }
    ).named(renames["treasury_financial_accounts_resource_platform_restrictions"])
    types["treasury_financial_accounts_resource_status_details"] = t.struct(
        {
            "closed": t.proxy(
                renames["treasury_financial_accounts_resource_closed_status_details"]
            ).optional()
        }
    ).named(renames["treasury_financial_accounts_resource_status_details"])
    types["treasury_financial_accounts_resource_toggle_settings"] = t.struct(
        {
            "requested": t.boolean(),
            "status": t.string(),
            "status_details": t.array(
                t.proxy(
                    renames[
                        "treasury_financial_accounts_resource_toggles_setting_status_details"
                    ]
                )
            ),
        }
    ).named(renames["treasury_financial_accounts_resource_toggle_settings"])
    types[
        "treasury_financial_accounts_resource_toggles_setting_status_details"
    ] = t.struct(
        {
            "code": t.string(),
            "resolution": t.string().optional(),
            "restriction": t.string().optional(),
        }
    ).named(
        renames["treasury_financial_accounts_resource_toggles_setting_status_details"]
    )
    types["treasury_inbound_transfers_resource_failure_details"] = t.struct(
        {"code": t.string()}
    ).named(renames["treasury_inbound_transfers_resource_failure_details"])
    types[
        "treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows"
    ] = t.struct({"received_debit": t.string().optional()}).named(
        renames[
            "treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows"
        ]
    )
    types[
        "treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions"
    ] = t.struct(
        {
            "canceled_at": t.integer().optional(),
            "failed_at": t.integer().optional(),
            "succeeded_at": t.integer().optional(),
        }
    ).named(
        renames[
            "treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions"
        ]
    )
    types[
        "treasury_outbound_payments_resource_outbound_payment_resource_end_user_details"
    ] = t.struct({"ip_address": t.string().optional(), "present": t.boolean()}).named(
        renames[
            "treasury_outbound_payments_resource_outbound_payment_resource_end_user_details"
        ]
    )
    types[
        "treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"
    ] = t.struct(
        {
            "canceled_at": t.integer().optional(),
            "failed_at": t.integer().optional(),
            "posted_at": t.integer().optional(),
            "returned_at": t.integer().optional(),
        }
    ).named(
        renames[
            "treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"
        ]
    )
    types["treasury_outbound_payments_resource_returned_status"] = t.struct(
        {
            "code": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ),
        }
    ).named(renames["treasury_outbound_payments_resource_returned_status"])
    types["treasury_outbound_transfers_resource_returned_details"] = t.struct(
        {
            "code": t.string(),
            "transaction": t.union(
                [t.string(), t.proxy(renames["treasury.transaction"])]
            ),
        }
    ).named(renames["treasury_outbound_transfers_resource_returned_details"])
    types["treasury_outbound_transfers_resource_status_transitions"] = t.struct(
        {
            "canceled_at": t.integer().optional(),
            "failed_at": t.integer().optional(),
            "posted_at": t.integer().optional(),
            "returned_at": t.integer().optional(),
        }
    ).named(renames["treasury_outbound_transfers_resource_status_transitions"])
    types["treasury_received_credits_resource_linked_flows"] = t.struct(
        {
            "credit_reversal": t.string().optional(),
            "issuing_authorization": t.string().optional(),
            "issuing_transaction": t.string().optional(),
            "source_flow": t.string().optional(),
            "source_flow_details": t.proxy(
                renames["treasury_received_credits_resource_source_flows_details"]
            ).optional(),
            "source_flow_type": t.string().optional(),
        }
    ).named(renames["treasury_received_credits_resource_linked_flows"])
    types["treasury_received_credits_resource_reversal_details"] = t.struct(
        {"deadline": t.integer().optional(), "restricted_reason": t.string().optional()}
    ).named(renames["treasury_received_credits_resource_reversal_details"])
    types["treasury_received_credits_resource_source_flows_details"] = t.struct(
        {
            "credit_reversal": t.proxy(renames["treasury.credit_reversal"]).optional(),
            "outbound_payment": t.proxy(
                renames["treasury.outbound_payment"]
            ).optional(),
            "payout": t.proxy(renames["payout"]).optional(),
            "type": t.string(),
        }
    ).named(renames["treasury_received_credits_resource_source_flows_details"])
    types["treasury_received_credits_resource_status_transitions"] = t.struct(
        {"posted_at": t.integer().optional()}
    ).named(renames["treasury_received_credits_resource_status_transitions"])
    types["treasury_received_debits_resource_debit_reversal_linked_flows"] = t.struct(
        {"issuing_dispute": t.string().optional()}
    ).named(renames["treasury_received_debits_resource_debit_reversal_linked_flows"])
    types["treasury_received_debits_resource_linked_flows"] = t.struct(
        {
            "debit_reversal": t.string().optional(),
            "inbound_transfer": t.string().optional(),
            "issuing_authorization": t.string().optional(),
            "issuing_transaction": t.string().optional(),
        }
    ).named(renames["treasury_received_debits_resource_linked_flows"])
    types["treasury_received_debits_resource_reversal_details"] = t.struct(
        {"deadline": t.integer().optional(), "restricted_reason": t.string().optional()}
    ).named(renames["treasury_received_debits_resource_reversal_details"])
    types["treasury_received_debits_resource_status_transitions"] = t.struct(
        {"completed_at": t.integer().optional()}
    ).named(renames["treasury_received_debits_resource_status_transitions"])
    types["treasury_shared_resource_billing_details"] = t.struct(
        {
            "address": t.proxy(renames["address"]),
            "email": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["treasury_shared_resource_billing_details"])
    types[
        "treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"
    ] = t.struct(
        {
            "balance": t.string().optional(),
            "billing_details": t.proxy(
                renames["treasury_shared_resource_billing_details"]
            ),
            "financial_account": t.proxy(
                renames["received_payment_method_details_financial_account"]
            ).optional(),
            "issuing_card": t.string().optional(),
            "type": t.string(),
            "us_bank_account": t.proxy(
                renames[
                    "treasury_shared_resource_initiating_payment_method_details_us_bank_account"
                ]
            ).optional(),
        }
    ).named(
        renames[
            "treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"
        ]
    )
    types[
        "treasury_shared_resource_initiating_payment_method_details_us_bank_account"
    ] = t.struct(
        {
            "bank_name": t.string().optional(),
            "last4": t.string().optional(),
            "routing_number": t.string().optional(),
        }
    ).named(
        renames[
            "treasury_shared_resource_initiating_payment_method_details_us_bank_account"
        ]
    )
    types[
        "treasury_transactions_resource_abstract_transaction_resource_status_transitions"
    ] = t.struct(
        {"posted_at": t.integer().optional(), "void_at": t.integer().optional()}
    ).named(
        renames[
            "treasury_transactions_resource_abstract_transaction_resource_status_transitions"
        ]
    )
    types["treasury_transactions_resource_balance_impact"] = t.struct(
        {
            "cash": t.integer(),
            "inbound_pending": t.integer(),
            "outbound_pending": t.integer(),
        }
    ).named(renames["treasury_transactions_resource_balance_impact"])
    types["treasury_transactions_resource_flow_details"] = t.struct(
        {
            "credit_reversal": t.proxy(renames["treasury.credit_reversal"]).optional(),
            "debit_reversal": t.proxy(renames["treasury.debit_reversal"]).optional(),
            "inbound_transfer": t.proxy(
                renames["treasury.inbound_transfer"]
            ).optional(),
            "issuing_authorization": t.proxy(
                renames["issuing.authorization"]
            ).optional(),
            "outbound_payment": t.proxy(
                renames["treasury.outbound_payment"]
            ).optional(),
            "outbound_transfer": t.proxy(
                renames["treasury.outbound_transfer"]
            ).optional(),
            "received_credit": t.proxy(renames["treasury.received_credit"]).optional(),
            "received_debit": t.proxy(renames["treasury.received_debit"]).optional(),
            "type": t.string(),
        }
    ).named(renames["treasury_transactions_resource_flow_details"])
    types["us_bank_account_networks"] = t.struct(
        {"preferred": t.string().optional(), "supported": t.array(t.string())}
    ).named(renames["us_bank_account_networks"])
    types["usage_record"] = t.struct(
        {
            "id": t.string(),
            "livemode": t.boolean(),
            "object": t.string(),
            "quantity": t.integer(),
            "subscription_item": t.string(),
            "timestamp": t.integer(),
        }
    ).named(renames["usage_record"])
    types["usage_record_summary"] = t.struct(
        {
            "id": t.string(),
            "invoice": t.string().optional(),
            "livemode": t.boolean(),
            "object": t.string(),
            "period": t.proxy(renames["period"]),
            "subscription_item": t.string(),
            "total_usage": t.integer(),
        }
    ).named(renames["usage_record_summary"])
    types["verification_session_redaction"] = t.struct({"status": t.string()}).named(
        renames["verification_session_redaction"]
    )
    types["webhook_endpoint"] = t.struct(
        {
            "api_version": t.string().optional(),
            "application": t.string().optional(),
            "created": t.integer(),
            "description": t.string().optional(),
            "enabled_events": t.array(t.string()),
            "id": t.string(),
            "livemode": t.boolean(),
            "metadata": t.struct({}),
            "object": t.string(),
            "secret": t.string().optional(),
            "status": t.string(),
            "url": t.string(),
        }
    ).named(renames["webhook_endpoint"])

    functions = {}
    functions["GetAccount"] = spec3_sdk.get(
        "/v1/account",
        t.struct({"expand": t.array(t.string())}),
        t.proxy(renames["account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountLinks"] = spec3_sdk.post(
        "/v1/account_links",
        t.struct(
            {
                "account": t.string(),
                "collect": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "refresh_url": t.string().optional(),
                "return_url": t.string().optional(),
                "type": t.string(),
            }
        ),
        t.proxy(renames["account_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account",
            "collect",
            "expand",
            "refresh_url",
            "return_url",
            "type",
        ),
    )
    functions["GetAccounts"] = spec3_sdk.get(
        "/v1/accounts",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["account"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccounts"] = spec3_sdk.post(
        "/v1/accounts",
        t.struct(
            {
                "account_token": t.string().optional(),
                "business_profile": t.struct(
                    {
                        "mcc": t.string().optional(),
                        "name": t.string().optional(),
                        "product_description": t.string().optional(),
                        "support_address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "support_email": t.string().optional(),
                        "support_phone": t.string().optional(),
                        "support_url": t.union([t.string(), t.string()]).optional(),
                        "url": t.string().optional(),
                    }
                ).optional(),
                "business_type": t.string().optional(),
                "capabilities": t.struct(
                    {
                        "acss_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "affirm_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "afterpay_clearpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "au_becs_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bacs_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bancontact_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bank_transfer_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "blik_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "boleto_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "card_issuing": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "card_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "cartes_bancaires_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "cashapp_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "eps_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "fpx_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "giropay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "grabpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "ideal_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "india_international_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "jcb_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "klarna_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "konbini_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "legacy_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "link_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "oxxo_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "p24_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "paynow_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "promptpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "sepa_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "sofort_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "tax_reporting_us_1099_k": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "tax_reporting_us_1099_misc": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "transfers": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "treasury": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "us_bank_account_ach_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                    }
                ).optional(),
                "company": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_kana": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "address_kanji": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "directors_provided": t.boolean().optional(),
                        "executives_provided": t.boolean().optional(),
                        "export_license_id": t.string().optional(),
                        "export_purpose_code": t.string().optional(),
                        "name": t.string().optional(),
                        "name_kana": t.string().optional(),
                        "name_kanji": t.string().optional(),
                        "owners_provided": t.boolean().optional(),
                        "ownership_declaration": t.struct(
                            {
                                "date": t.integer().optional(),
                                "ip": t.string().optional(),
                                "user_agent": t.string().optional(),
                            }
                        ).optional(),
                        "phone": t.string().optional(),
                        "registration_number": t.string().optional(),
                        "structure": t.string().optional(),
                        "tax_id": t.string().optional(),
                        "tax_id_registrar": t.string().optional(),
                        "vat_id": t.string().optional(),
                        "verification": t.struct(
                            {
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "country": t.string().optional(),
                "default_currency": t.string().optional(),
                "documents": t.struct(
                    {
                        "bank_account_ownership_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_license": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_memorandum_of_association": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_ministerial_decree": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_registration_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_tax_id_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "proof_of_registration": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                    }
                ).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "external_account": t.string().optional(),
                "individual": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_kana": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "address_kanji": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "dob": t.union(
                            [
                                t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "email": t.string().optional(),
                        "first_name": t.string().optional(),
                        "first_name_kana": t.string().optional(),
                        "first_name_kanji": t.string().optional(),
                        "full_name_aliases": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                        "gender": t.string().optional(),
                        "id_number": t.string().optional(),
                        "id_number_secondary": t.string().optional(),
                        "last_name": t.string().optional(),
                        "last_name_kana": t.string().optional(),
                        "last_name_kanji": t.string().optional(),
                        "maiden_name": t.string().optional(),
                        "metadata": t.union([t.struct({}), t.string()]).optional(),
                        "phone": t.string().optional(),
                        "political_exposure": t.string().optional(),
                        "registered_address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "ssn_last_4": t.string().optional(),
                        "verification": t.struct(
                            {
                                "additional_document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "settings": t.struct(
                    {
                        "branding": t.struct(
                            {
                                "icon": t.string().optional(),
                                "logo": t.string().optional(),
                                "primary_color": t.string().optional(),
                                "secondary_color": t.string().optional(),
                            }
                        ).optional(),
                        "card_issuing": t.struct(
                            {
                                "tos_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "card_payments": t.struct(
                            {
                                "decline_on": t.struct(
                                    {
                                        "avs_failure": t.boolean().optional(),
                                        "cvc_failure": t.boolean().optional(),
                                    }
                                ).optional(),
                                "statement_descriptor_prefix": t.string().optional(),
                                "statement_descriptor_prefix_kana": t.union(
                                    [t.string(), t.string()]
                                ).optional(),
                                "statement_descriptor_prefix_kanji": t.union(
                                    [t.string(), t.string()]
                                ).optional(),
                            }
                        ).optional(),
                        "payments": t.struct(
                            {
                                "statement_descriptor": t.string().optional(),
                                "statement_descriptor_kana": t.string().optional(),
                                "statement_descriptor_kanji": t.string().optional(),
                            }
                        ).optional(),
                        "payouts": t.struct(
                            {
                                "debit_negative_balances": t.boolean().optional(),
                                "schedule": t.struct(
                                    {
                                        "delay_days": t.union(
                                            [t.string(), t.integer()]
                                        ).optional(),
                                        "interval": t.string().optional(),
                                        "monthly_anchor": t.integer().optional(),
                                        "weekly_anchor": t.string().optional(),
                                    }
                                ).optional(),
                                "statement_descriptor": t.string().optional(),
                            }
                        ).optional(),
                        "treasury": t.struct(
                            {
                                "tos_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "tos_acceptance": t.struct(
                    {
                        "date": t.integer().optional(),
                        "ip": t.string().optional(),
                        "service_agreement": t.string().optional(),
                        "user_agent": t.string().optional(),
                    }
                ).optional(),
                "type": t.string().optional(),
            }
        ),
        t.proxy(renames["account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_token",
            "business_profile",
            "business_type",
            "capabilities",
            "company",
            "country",
            "default_currency",
            "documents",
            "email",
            "expand",
            "external_account",
            "individual",
            "metadata",
            "settings",
            "tos_acceptance",
            "type",
        ),
    )
    functions["DeleteAccountsAccount"] = spec3_sdk.delete(
        "/v1/accounts/{account}",
        t.struct({"account": t.string()}),
        t.proxy(renames["deleted_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetAccountsAccount"] = spec3_sdk.get(
        "/v1/accounts/{account}",
        t.struct({"account": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccount"] = spec3_sdk.post(
        "/v1/accounts/{account}",
        t.struct(
            {
                "account": t.string(),
                "account_token": t.string().optional(),
                "business_profile": t.struct(
                    {
                        "mcc": t.string().optional(),
                        "name": t.string().optional(),
                        "product_description": t.string().optional(),
                        "support_address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "support_email": t.string().optional(),
                        "support_phone": t.string().optional(),
                        "support_url": t.union([t.string(), t.string()]).optional(),
                        "url": t.string().optional(),
                    }
                ).optional(),
                "business_type": t.string().optional(),
                "capabilities": t.struct(
                    {
                        "acss_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "affirm_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "afterpay_clearpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "au_becs_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bacs_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bancontact_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "bank_transfer_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "blik_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "boleto_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "card_issuing": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "card_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "cartes_bancaires_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "cashapp_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "eps_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "fpx_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "giropay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "grabpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "ideal_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "india_international_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "jcb_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "klarna_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "konbini_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "legacy_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "link_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "oxxo_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "p24_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "paynow_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "promptpay_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "sepa_debit_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "sofort_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "tax_reporting_us_1099_k": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "tax_reporting_us_1099_misc": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "transfers": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "treasury": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                        "us_bank_account_ach_payments": t.struct(
                            {"requested": t.boolean().optional()}
                        ).optional(),
                    }
                ).optional(),
                "company": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_kana": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "address_kanji": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "directors_provided": t.boolean().optional(),
                        "executives_provided": t.boolean().optional(),
                        "export_license_id": t.string().optional(),
                        "export_purpose_code": t.string().optional(),
                        "name": t.string().optional(),
                        "name_kana": t.string().optional(),
                        "name_kanji": t.string().optional(),
                        "owners_provided": t.boolean().optional(),
                        "ownership_declaration": t.struct(
                            {
                                "date": t.integer().optional(),
                                "ip": t.string().optional(),
                                "user_agent": t.string().optional(),
                            }
                        ).optional(),
                        "phone": t.string().optional(),
                        "registration_number": t.string().optional(),
                        "structure": t.string().optional(),
                        "tax_id": t.string().optional(),
                        "tax_id_registrar": t.string().optional(),
                        "vat_id": t.string().optional(),
                        "verification": t.struct(
                            {
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "default_currency": t.string().optional(),
                "documents": t.struct(
                    {
                        "bank_account_ownership_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_license": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_memorandum_of_association": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_ministerial_decree": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_registration_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "company_tax_id_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "proof_of_registration": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                    }
                ).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "external_account": t.string().optional(),
                "individual": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_kana": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "address_kanji": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "dob": t.union(
                            [
                                t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "email": t.string().optional(),
                        "first_name": t.string().optional(),
                        "first_name_kana": t.string().optional(),
                        "first_name_kanji": t.string().optional(),
                        "full_name_aliases": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                        "gender": t.string().optional(),
                        "id_number": t.string().optional(),
                        "id_number_secondary": t.string().optional(),
                        "last_name": t.string().optional(),
                        "last_name_kana": t.string().optional(),
                        "last_name_kanji": t.string().optional(),
                        "maiden_name": t.string().optional(),
                        "metadata": t.union([t.struct({}), t.string()]).optional(),
                        "phone": t.string().optional(),
                        "political_exposure": t.string().optional(),
                        "registered_address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "ssn_last_4": t.string().optional(),
                        "verification": t.struct(
                            {
                                "additional_document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "settings": t.struct(
                    {
                        "branding": t.struct(
                            {
                                "icon": t.string().optional(),
                                "logo": t.string().optional(),
                                "primary_color": t.string().optional(),
                                "secondary_color": t.string().optional(),
                            }
                        ).optional(),
                        "card_issuing": t.struct(
                            {
                                "tos_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "card_payments": t.struct(
                            {
                                "decline_on": t.struct(
                                    {
                                        "avs_failure": t.boolean().optional(),
                                        "cvc_failure": t.boolean().optional(),
                                    }
                                ).optional(),
                                "statement_descriptor_prefix": t.string().optional(),
                                "statement_descriptor_prefix_kana": t.union(
                                    [t.string(), t.string()]
                                ).optional(),
                                "statement_descriptor_prefix_kanji": t.union(
                                    [t.string(), t.string()]
                                ).optional(),
                            }
                        ).optional(),
                        "payments": t.struct(
                            {
                                "statement_descriptor": t.string().optional(),
                                "statement_descriptor_kana": t.string().optional(),
                                "statement_descriptor_kanji": t.string().optional(),
                            }
                        ).optional(),
                        "payouts": t.struct(
                            {
                                "debit_negative_balances": t.boolean().optional(),
                                "schedule": t.struct(
                                    {
                                        "delay_days": t.union(
                                            [t.string(), t.integer()]
                                        ).optional(),
                                        "interval": t.string().optional(),
                                        "monthly_anchor": t.integer().optional(),
                                        "weekly_anchor": t.string().optional(),
                                    }
                                ).optional(),
                                "statement_descriptor": t.string().optional(),
                            }
                        ).optional(),
                        "treasury": t.struct(
                            {
                                "tos_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "tos_acceptance": t.struct(
                    {
                        "date": t.integer().optional(),
                        "ip": t.string().optional(),
                        "service_agreement": t.string().optional(),
                        "user_agent": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_token",
            "business_profile",
            "business_type",
            "capabilities",
            "company",
            "default_currency",
            "documents",
            "email",
            "expand",
            "external_account",
            "individual",
            "metadata",
            "settings",
            "tos_acceptance",
        ),
    )
    functions["GetAccountsAccountCapabilities"] = spec3_sdk.get(
        "/v1/accounts/{account}/capabilities",
        t.struct({"account": t.string(), "expand": t.array(t.string())}),
        t.struct(
            {
                "data": t.array(t.proxy(renames["capability"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetAccountsAccountCapabilitiesCapability"] = spec3_sdk.get(
        "/v1/accounts/{account}/capabilities/{capability}",
        t.struct(
            {
                "account": t.string(),
                "capability": t.string(),
                "expand": t.array(t.string()),
            }
        ),
        t.proxy(renames["capability"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccountCapabilitiesCapability"] = spec3_sdk.post(
        "/v1/accounts/{account}/capabilities/{capability}",
        t.struct(
            {
                "account": t.string(),
                "capability": t.string(),
                "expand": t.array(t.string()).optional(),
                "requested": t.boolean().optional(),
            }
        ),
        t.proxy(renames["capability"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "requested"),
    )
    functions["GetAccountsAccountExternalAccounts"] = spec3_sdk.get(
        "/v1/accounts/{account}/external_accounts",
        t.struct(
            {
                "account": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["external_account"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccountExternalAccounts"] = spec3_sdk.post(
        "/v1/accounts/{account}/external_accounts",
        t.struct(
            {
                "account": t.string(),
                "default_for_currency": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "external_account": t.string(),
                "metadata": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["external_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("default_for_currency", "expand", "external_account", "metadata"),
    )
    functions["DeleteAccountsAccountExternalAccountsId"] = spec3_sdk.delete(
        "/v1/accounts/{account}/external_accounts/{id}",
        t.struct({"account": t.string(), "id": t.string()}),
        t.proxy(renames["deleted_external_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetAccountsAccountExternalAccountsId"] = spec3_sdk.get(
        "/v1/accounts/{account}/external_accounts/{id}",
        t.struct(
            {"account": t.string(), "expand": t.array(t.string()), "id": t.string()}
        ),
        t.proxy(renames["external_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccountExternalAccountsId"] = spec3_sdk.post(
        "/v1/accounts/{account}/external_accounts/{id}",
        t.struct(
            {
                "account": t.string(),
                "id": t.string(),
                "account_holder_name": t.string().optional(),
                "account_holder_type": t.string().optional(),
                "account_type": t.string().optional(),
                "address_city": t.string().optional(),
                "address_country": t.string().optional(),
                "address_line1": t.string().optional(),
                "address_line2": t.string().optional(),
                "address_state": t.string().optional(),
                "address_zip": t.string().optional(),
                "default_for_currency": t.boolean().optional(),
                "documents": t.struct(
                    {
                        "bank_account_ownership_verification": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional()
                    }
                ).optional(),
                "exp_month": t.string().optional(),
                "exp_year": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["external_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_holder_name",
            "account_holder_type",
            "account_type",
            "address_city",
            "address_country",
            "address_line1",
            "address_line2",
            "address_state",
            "address_zip",
            "default_for_currency",
            "documents",
            "exp_month",
            "exp_year",
            "expand",
            "metadata",
            "name",
        ),
    )
    functions["PostAccountsAccountLoginLinks"] = spec3_sdk.post(
        "/v1/accounts/{account}/login_links",
        t.struct({"account": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["login_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetAccountsAccountPersons"] = spec3_sdk.get(
        "/v1/accounts/{account}/persons",
        t.struct(
            {
                "account": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "relationship": t.struct(
                    {
                        "director": t.boolean().optional(),
                        "executive": t.boolean().optional(),
                        "owner": t.boolean().optional(),
                        "representative": t.boolean().optional(),
                    }
                ),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["person"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccountPersons"] = spec3_sdk.post(
        "/v1/accounts/{account}/persons",
        t.struct(
            {
                "account": t.string(),
                "address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ).optional(),
                "address_kana": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                        "town": t.string().optional(),
                    }
                ).optional(),
                "address_kanji": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                        "town": t.string().optional(),
                    }
                ).optional(),
                "dob": t.union(
                    [
                        t.struct(
                            {
                                "day": t.integer(),
                                "month": t.integer(),
                                "year": t.integer(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "documents": t.struct(
                    {
                        "company_authorization": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "passport": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "visa": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                    }
                ).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "first_name": t.string().optional(),
                "first_name_kana": t.string().optional(),
                "first_name_kanji": t.string().optional(),
                "full_name_aliases": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "gender": t.string().optional(),
                "id_number": t.string().optional(),
                "id_number_secondary": t.string().optional(),
                "last_name": t.string().optional(),
                "last_name_kana": t.string().optional(),
                "last_name_kanji": t.string().optional(),
                "maiden_name": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "nationality": t.string().optional(),
                "person_token": t.string().optional(),
                "phone": t.string().optional(),
                "political_exposure": t.string().optional(),
                "registered_address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ).optional(),
                "relationship": t.struct(
                    {
                        "director": t.boolean().optional(),
                        "executive": t.boolean().optional(),
                        "owner": t.boolean().optional(),
                        "percent_ownership": t.union(
                            [t.number(), t.string()]
                        ).optional(),
                        "representative": t.boolean().optional(),
                        "title": t.string().optional(),
                    }
                ).optional(),
                "ssn_last_4": t.string().optional(),
                "verification": t.struct(
                    {
                        "additional_document": t.struct(
                            {
                                "back": t.string().optional(),
                                "front": t.string().optional(),
                            }
                        ).optional(),
                        "document": t.struct(
                            {
                                "back": t.string().optional(),
                                "front": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["person"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "address_kana",
            "address_kanji",
            "dob",
            "documents",
            "email",
            "expand",
            "first_name",
            "first_name_kana",
            "first_name_kanji",
            "full_name_aliases",
            "gender",
            "id_number",
            "id_number_secondary",
            "last_name",
            "last_name_kana",
            "last_name_kanji",
            "maiden_name",
            "metadata",
            "nationality",
            "person_token",
            "phone",
            "political_exposure",
            "registered_address",
            "relationship",
            "ssn_last_4",
            "verification",
        ),
    )
    functions["DeleteAccountsAccountPersonsPerson"] = spec3_sdk.delete(
        "/v1/accounts/{account}/persons/{person}",
        t.struct({"account": t.string(), "person": t.string()}),
        t.proxy(renames["deleted_person"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetAccountsAccountPersonsPerson"] = spec3_sdk.get(
        "/v1/accounts/{account}/persons/{person}",
        t.struct(
            {"account": t.string(), "expand": t.array(t.string()), "person": t.string()}
        ),
        t.proxy(renames["person"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAccountsAccountPersonsPerson"] = spec3_sdk.post(
        "/v1/accounts/{account}/persons/{person}",
        t.struct(
            {
                "account": t.string(),
                "person": t.string(),
                "address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ).optional(),
                "address_kana": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                        "town": t.string().optional(),
                    }
                ).optional(),
                "address_kanji": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                        "town": t.string().optional(),
                    }
                ).optional(),
                "dob": t.union(
                    [
                        t.struct(
                            {
                                "day": t.integer(),
                                "month": t.integer(),
                                "year": t.integer(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "documents": t.struct(
                    {
                        "company_authorization": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "passport": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                        "visa": t.struct(
                            {"files": t.array(t.string()).optional()}
                        ).optional(),
                    }
                ).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "first_name": t.string().optional(),
                "first_name_kana": t.string().optional(),
                "first_name_kanji": t.string().optional(),
                "full_name_aliases": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "gender": t.string().optional(),
                "id_number": t.string().optional(),
                "id_number_secondary": t.string().optional(),
                "last_name": t.string().optional(),
                "last_name_kana": t.string().optional(),
                "last_name_kanji": t.string().optional(),
                "maiden_name": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "nationality": t.string().optional(),
                "person_token": t.string().optional(),
                "phone": t.string().optional(),
                "political_exposure": t.string().optional(),
                "registered_address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ).optional(),
                "relationship": t.struct(
                    {
                        "director": t.boolean().optional(),
                        "executive": t.boolean().optional(),
                        "owner": t.boolean().optional(),
                        "percent_ownership": t.union(
                            [t.number(), t.string()]
                        ).optional(),
                        "representative": t.boolean().optional(),
                        "title": t.string().optional(),
                    }
                ).optional(),
                "ssn_last_4": t.string().optional(),
                "verification": t.struct(
                    {
                        "additional_document": t.struct(
                            {
                                "back": t.string().optional(),
                                "front": t.string().optional(),
                            }
                        ).optional(),
                        "document": t.struct(
                            {
                                "back": t.string().optional(),
                                "front": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["person"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "address_kana",
            "address_kanji",
            "dob",
            "documents",
            "email",
            "expand",
            "first_name",
            "first_name_kana",
            "first_name_kanji",
            "full_name_aliases",
            "gender",
            "id_number",
            "id_number_secondary",
            "last_name",
            "last_name_kana",
            "last_name_kanji",
            "maiden_name",
            "metadata",
            "nationality",
            "person_token",
            "phone",
            "political_exposure",
            "registered_address",
            "relationship",
            "ssn_last_4",
            "verification",
        ),
    )
    functions["PostAccountsAccountReject"] = spec3_sdk.post(
        "/v1/accounts/{account}/reject",
        t.struct(
            {
                "account": t.string(),
                "expand": t.array(t.string()).optional(),
                "reason": t.string(),
            }
        ),
        t.proxy(renames["account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "reason"),
    )
    functions["GetApplePayDomains"] = spec3_sdk.get(
        "/v1/apple_pay/domains",
        t.struct(
            {
                "domain_name": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["apple_pay_domain"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostApplePayDomains"] = spec3_sdk.post(
        "/v1/apple_pay/domains",
        t.struct({"domain_name": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["apple_pay_domain"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("domain_name", "expand"),
    )
    functions["DeleteApplePayDomainsDomain"] = spec3_sdk.delete(
        "/v1/apple_pay/domains/{domain}",
        t.struct({"domain": t.string()}),
        t.proxy(renames["deleted_apple_pay_domain"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetApplePayDomainsDomain"] = spec3_sdk.get(
        "/v1/apple_pay/domains/{domain}",
        t.struct({"domain": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["apple_pay_domain"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetApplicationFees"] = spec3_sdk.get(
        "/v1/application_fees",
        t.struct(
            {
                "charge": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["application_fee"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetApplicationFeesFeeRefundsId"] = spec3_sdk.get(
        "/v1/application_fees/{fee}/refunds/{id}",
        t.struct({"expand": t.array(t.string()), "fee": t.string(), "id": t.string()}),
        t.proxy(renames["fee_refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostApplicationFeesFeeRefundsId"] = spec3_sdk.post(
        "/v1/application_fees/{fee}/refunds/{id}",
        t.struct(
            {
                "fee": t.string(),
                "id": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["fee_refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetApplicationFeesId"] = spec3_sdk.get(
        "/v1/application_fees/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["application_fee"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetApplicationFeesIdRefunds"] = spec3_sdk.get(
        "/v1/application_fees/{id}/refunds",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "id": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["fee_refund"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostApplicationFeesIdRefunds"] = spec3_sdk.post(
        "/v1/application_fees/{id}/refunds",
        t.struct(
            {
                "id": t.string(),
                "amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["fee_refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "expand", "metadata"),
    )
    functions["GetAppsSecrets"] = spec3_sdk.get(
        "/v1/apps/secrets",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "scope": t.struct({"type": t.string(), "user": t.string().optional()}),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["apps.secret"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostAppsSecrets"] = spec3_sdk.post(
        "/v1/apps/secrets",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "name": t.string(),
                "payload": t.string(),
                "scope": t.struct({"type": t.string(), "user": t.string().optional()}),
            }
        ),
        t.proxy(renames["apps.secret"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "expires_at", "name", "payload", "scope"),
    )
    functions["PostAppsSecretsDelete"] = spec3_sdk.post(
        "/v1/apps/secrets/delete",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "name": t.string(),
                "scope": t.struct({"type": t.string(), "user": t.string().optional()}),
            }
        ),
        t.proxy(renames["apps.secret"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "name", "scope"),
    )
    functions["GetAppsSecretsFind"] = spec3_sdk.get(
        "/v1/apps/secrets/find",
        t.struct(
            {
                "expand": t.array(t.string()),
                "name": t.string(),
                "scope": t.struct({"type": t.string(), "user": t.string().optional()}),
            }
        ),
        t.proxy(renames["apps.secret"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetBalance"] = spec3_sdk.get(
        "/v1/balance",
        t.struct({"expand": t.array(t.string())}),
        t.proxy(renames["balance"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetBalanceTransactions"] = spec3_sdk.get(
        "/v1/balance_transactions",
        t.struct(
            {
                "available_on": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "currency": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payout": t.string(),
                "source": t.string(),
                "starting_after": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["balance_transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetBalanceTransactionsId"] = spec3_sdk.get(
        "/v1/balance_transactions/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetBillingPortalConfigurations"] = spec3_sdk.get(
        "/v1/billing_portal/configurations",
        t.struct(
            {
                "active": t.boolean(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "is_default": t.boolean(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["billing_portal.configuration"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostBillingPortalConfigurations"] = spec3_sdk.post(
        "/v1/billing_portal/configurations",
        t.struct(
            {
                "business_profile": t.struct(
                    {
                        "headline": t.string().optional(),
                        "privacy_policy_url": t.string().optional(),
                        "terms_of_service_url": t.string().optional(),
                    }
                ),
                "default_return_url": t.union([t.string(), t.string()]).optional(),
                "expand": t.array(t.string()).optional(),
                "features": t.struct(
                    {
                        "customer_update": t.struct(
                            {
                                "allowed_updates": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "enabled": t.boolean(),
                            }
                        ).optional(),
                        "invoice_history": t.struct(
                            {"enabled": t.boolean()}
                        ).optional(),
                        "payment_method_update": t.struct(
                            {"enabled": t.boolean()}
                        ).optional(),
                        "subscription_cancel": t.struct(
                            {
                                "cancellation_reason": t.struct(
                                    {
                                        "enabled": t.boolean(),
                                        "options": t.union(
                                            [t.array(t.string()), t.string()]
                                        ),
                                    }
                                ).optional(),
                                "enabled": t.boolean(),
                                "mode": t.string().optional(),
                                "proration_behavior": t.string().optional(),
                            }
                        ).optional(),
                        "subscription_pause": t.struct(
                            {"enabled": t.boolean().optional()}
                        ).optional(),
                        "subscription_update": t.struct(
                            {
                                "default_allowed_updates": t.union(
                                    [t.array(t.string()), t.string()]
                                ),
                                "enabled": t.boolean(),
                                "products": t.union(
                                    [
                                        t.array(
                                            t.struct(
                                                {
                                                    "prices": t.array(t.string()),
                                                    "product": t.string(),
                                                }
                                            )
                                        ),
                                        t.string(),
                                    ]
                                ),
                                "proration_behavior": t.string().optional(),
                            }
                        ).optional(),
                    }
                ),
                "login_page": t.struct({"enabled": t.boolean()}).optional(),
                "metadata": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["billing_portal.configuration"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "business_profile",
            "default_return_url",
            "expand",
            "features",
            "login_page",
            "metadata",
        ),
    )
    functions["GetBillingPortalConfigurationsConfiguration"] = spec3_sdk.get(
        "/v1/billing_portal/configurations/{configuration}",
        t.struct({"configuration": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["billing_portal.configuration"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostBillingPortalConfigurationsConfiguration"] = spec3_sdk.post(
        "/v1/billing_portal/configurations/{configuration}",
        t.struct(
            {
                "configuration": t.string(),
                "active": t.boolean().optional(),
                "business_profile": t.struct(
                    {
                        "headline": t.string().optional(),
                        "privacy_policy_url": t.union(
                            [t.string(), t.string()]
                        ).optional(),
                        "terms_of_service_url": t.union(
                            [t.string(), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "default_return_url": t.union([t.string(), t.string()]).optional(),
                "expand": t.array(t.string()).optional(),
                "features": t.struct(
                    {
                        "customer_update": t.struct(
                            {
                                "allowed_updates": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "enabled": t.boolean().optional(),
                            }
                        ).optional(),
                        "invoice_history": t.struct(
                            {"enabled": t.boolean()}
                        ).optional(),
                        "payment_method_update": t.struct(
                            {"enabled": t.boolean()}
                        ).optional(),
                        "subscription_cancel": t.struct(
                            {
                                "cancellation_reason": t.struct(
                                    {
                                        "enabled": t.boolean(),
                                        "options": t.union(
                                            [t.array(t.string()), t.string()]
                                        ).optional(),
                                    }
                                ).optional(),
                                "enabled": t.boolean().optional(),
                                "mode": t.string().optional(),
                                "proration_behavior": t.string().optional(),
                            }
                        ).optional(),
                        "subscription_pause": t.struct(
                            {"enabled": t.boolean().optional()}
                        ).optional(),
                        "subscription_update": t.struct(
                            {
                                "default_allowed_updates": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "enabled": t.boolean().optional(),
                                "products": t.union(
                                    [
                                        t.array(
                                            t.struct(
                                                {
                                                    "prices": t.array(t.string()),
                                                    "product": t.string(),
                                                }
                                            )
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "proration_behavior": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "login_page": t.struct({"enabled": t.boolean()}).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["billing_portal.configuration"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "business_profile",
            "default_return_url",
            "expand",
            "features",
            "login_page",
            "metadata",
        ),
    )
    functions["PostBillingPortalSessions"] = spec3_sdk.post(
        "/v1/billing_portal/sessions",
        t.struct(
            {
                "configuration": t.string().optional(),
                "customer": t.string(),
                "expand": t.array(t.string()).optional(),
                "flow_data": t.struct(
                    {
                        "after_completion": t.struct(
                            {
                                "hosted_confirmation": t.struct(
                                    {"custom_message": t.string().optional()}
                                ).optional(),
                                "redirect": t.struct(
                                    {"return_url": t.string()}
                                ).optional(),
                                "type": t.string(),
                            }
                        ).optional(),
                        "subscription_cancel": t.struct(
                            {"subscription": t.string()}
                        ).optional(),
                        "subscription_update": t.struct(
                            {"subscription": t.string()}
                        ).optional(),
                        "subscription_update_confirm": t.struct(
                            {
                                "discounts": t.array(
                                    t.struct(
                                        {
                                            "coupon": t.string().optional(),
                                            "promotion_code": t.string().optional(),
                                        }
                                    )
                                ).optional(),
                                "items": t.array(
                                    t.struct(
                                        {
                                            "id": t.string(),
                                            "price": t.string().optional(),
                                            "quantity": t.integer().optional(),
                                        }
                                    )
                                ),
                                "subscription": t.string(),
                            }
                        ).optional(),
                        "type": t.string(),
                    }
                ).optional(),
                "locale": t.string().optional(),
                "on_behalf_of": t.string().optional(),
                "return_url": t.string().optional(),
            }
        ),
        t.proxy(renames["billing_portal.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "configuration",
            "customer",
            "expand",
            "flow_data",
            "locale",
            "on_behalf_of",
            "return_url",
        ),
    )
    functions["GetCharges"] = spec3_sdk.get(
        "/v1/charges",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_intent": t.string(),
                "starting_after": t.string(),
                "transfer_group": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["charge"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCharges"] = spec3_sdk.post(
        "/v1/charges",
        t.struct(
            {
                "amount": t.integer().optional(),
                "application_fee": t.integer().optional(),
                "application_fee_amount": t.integer().optional(),
                "capture": t.boolean().optional(),
                "currency": t.string().optional(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "destination": t.struct(
                    {"account": t.string(), "amount": t.integer().optional()}
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "on_behalf_of": t.string().optional(),
                "radar_options": t.struct(
                    {"session": t.string().optional()}
                ).optional(),
                "receipt_email": t.string().optional(),
                "shipping": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        "carrier": t.string().optional(),
                        "name": t.string(),
                        "phone": t.string().optional(),
                        "tracking_number": t.string().optional(),
                    }
                ).optional(),
                "source": t.string().optional(),
                "statement_descriptor": t.string().optional(),
                "statement_descriptor_suffix": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional(), "destination": t.string()}
                ).optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["charge"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "application_fee",
            "application_fee_amount",
            "capture",
            "currency",
            "customer",
            "description",
            "destination",
            "expand",
            "metadata",
            "on_behalf_of",
            "radar_options",
            "receipt_email",
            "shipping",
            "source",
            "statement_descriptor",
            "statement_descriptor_suffix",
            "transfer_data",
            "transfer_group",
        ),
    )
    functions["GetChargesSearch"] = spec3_sdk.get(
        "/v1/charges/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["charge"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetChargesCharge"] = spec3_sdk.get(
        "/v1/charges/{charge}",
        t.struct({"charge": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["charge"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostChargesCharge"] = spec3_sdk.post(
        "/v1/charges/{charge}",
        t.struct(
            {
                "charge": t.string(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "fraud_details": t.struct({"user_report": t.string()}).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "receipt_email": t.string().optional(),
                "shipping": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        "carrier": t.string().optional(),
                        "name": t.string(),
                        "phone": t.string().optional(),
                        "tracking_number": t.string().optional(),
                    }
                ).optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["charge"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "customer",
            "description",
            "expand",
            "fraud_details",
            "metadata",
            "receipt_email",
            "shipping",
            "transfer_group",
        ),
    )
    functions["PostChargesChargeCapture"] = spec3_sdk.post(
        "/v1/charges/{charge}/capture",
        t.struct(
            {
                "charge": t.string(),
                "amount": t.integer().optional(),
                "application_fee": t.integer().optional(),
                "application_fee_amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "receipt_email": t.string().optional(),
                "statement_descriptor": t.string().optional(),
                "statement_descriptor_suffix": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional()}
                ).optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["charge"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "application_fee",
            "application_fee_amount",
            "expand",
            "receipt_email",
            "statement_descriptor",
            "statement_descriptor_suffix",
            "transfer_data",
            "transfer_group",
        ),
    )
    functions["GetChargesChargeRefunds"] = spec3_sdk.get(
        "/v1/charges/{charge}/refunds",
        t.struct(
            {
                "charge": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["refund"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetChargesChargeRefundsRefund"] = spec3_sdk.get(
        "/v1/charges/{charge}/refunds/{refund}",
        t.struct(
            {"charge": t.string(), "expand": t.array(t.string()), "refund": t.string()}
        ),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCheckoutSessions"] = spec3_sdk.get(
        "/v1/checkout/sessions",
        t.struct(
            {
                "customer": t.string(),
                "customer_details": t.struct({"email": t.string()}),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_intent": t.string(),
                "payment_link": t.string(),
                "starting_after": t.string(),
                "subscription": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["checkout.session"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCheckoutSessions"] = spec3_sdk.post(
        "/v1/checkout/sessions",
        t.struct(
            {
                "after_expiration": t.struct(
                    {
                        "recovery": t.struct(
                            {
                                "allow_promotion_codes": t.boolean().optional(),
                                "enabled": t.boolean(),
                            }
                        ).optional()
                    }
                ).optional(),
                "allow_promotion_codes": t.boolean().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "billing_address_collection": t.string().optional(),
                "cancel_url": t.string().optional(),
                "client_reference_id": t.string().optional(),
                "consent_collection": t.struct(
                    {
                        "promotions": t.string().optional(),
                        "terms_of_service": t.string().optional(),
                    }
                ).optional(),
                "currency": t.string().optional(),
                "custom_fields": t.array(
                    t.struct(
                        {
                            "dropdown": t.struct(
                                {
                                    "options": t.array(
                                        t.struct(
                                            {"label": t.string(), "value": t.string()}
                                        )
                                    )
                                }
                            ).optional(),
                            "key": t.string(),
                            "label": t.struct(
                                {"custom": t.string(), "type": t.string()}
                            ),
                            "optional": t.boolean().optional(),
                            "type": t.string(),
                        }
                    )
                ).optional(),
                "custom_text": t.struct(
                    {
                        "shipping_address": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                        "submit": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "customer": t.string().optional(),
                "customer_creation": t.string().optional(),
                "customer_email": t.string().optional(),
                "customer_update": t.struct(
                    {
                        "address": t.string().optional(),
                        "name": t.string().optional(),
                        "shipping": t.string().optional(),
                    }
                ).optional(),
                "discounts": t.array(
                    t.struct(
                        {
                            "coupon": t.string().optional(),
                            "promotion_code": t.string().optional(),
                        }
                    )
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "invoice_creation": t.struct(
                    {
                        "enabled": t.boolean(),
                        "invoice_data": t.struct(
                            {
                                "account_tax_ids": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "custom_fields": t.union(
                                    [
                                        t.array(
                                            t.struct(
                                                {
                                                    "name": t.string(),
                                                    "value": t.string(),
                                                }
                                            )
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "description": t.string().optional(),
                                "footer": t.string().optional(),
                                "metadata": t.struct({}).optional(),
                                "rendering_options": t.union(
                                    [
                                        t.struct(
                                            {
                                                "amount_tax_display": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "adjustable_quantity": t.struct(
                                {
                                    "enabled": t.boolean(),
                                    "maximum": t.integer().optional(),
                                    "minimum": t.integer().optional(),
                                }
                            ).optional(),
                            "dynamic_tax_rates": t.array(t.string()).optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string().optional(),
                                    "product_data": t.struct(
                                        {
                                            "description": t.string().optional(),
                                            "images": t.array(t.string()).optional(),
                                            "metadata": t.struct({}).optional(),
                                            "name": t.string(),
                                            "tax_code": t.string().optional(),
                                        }
                                    ).optional(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ).optional(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.array(t.string()).optional(),
                        }
                    )
                ).optional(),
                "locale": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "mode": t.string().optional(),
                "payment_intent_data": t.struct(
                    {
                        "application_fee_amount": t.integer().optional(),
                        "capture_method": t.string().optional(),
                        "description": t.string().optional(),
                        "metadata": t.struct({}).optional(),
                        "on_behalf_of": t.string().optional(),
                        "receipt_email": t.string().optional(),
                        "setup_future_usage": t.string().optional(),
                        "shipping": t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "carrier": t.string().optional(),
                                "name": t.string(),
                                "phone": t.string().optional(),
                                "tracking_number": t.string().optional(),
                            }
                        ).optional(),
                        "statement_descriptor": t.string().optional(),
                        "statement_descriptor_suffix": t.string().optional(),
                        "transfer_data": t.struct(
                            {
                                "amount": t.integer().optional(),
                                "destination": t.string(),
                            }
                        ).optional(),
                        "transfer_group": t.string().optional(),
                    }
                ).optional(),
                "payment_method_collection": t.string().optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "currency": t.string().optional(),
                                "mandate_options": t.struct(
                                    {
                                        "custom_mandate_url": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "default_for": t.array(t.string()).optional(),
                                        "interval_description": t.string().optional(),
                                        "payment_schedule": t.string().optional(),
                                        "transaction_type": t.string().optional(),
                                    }
                                ).optional(),
                                "setup_future_usage": t.string().optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                        "affirm": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "afterpay_clearpay": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "alipay": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "au_becs_debit": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "bancontact": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "boleto": t.struct(
                            {
                                "expires_after_days": t.integer().optional(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                        "card": t.struct(
                            {
                                "installments": t.struct(
                                    {"enabled": t.boolean().optional()}
                                ).optional(),
                                "setup_future_usage": t.string().optional(),
                                "statement_descriptor_suffix_kana": t.string().optional(),
                                "statement_descriptor_suffix_kanji": t.string().optional(),
                            }
                        ).optional(),
                        "cashapp": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "customer_balance": t.struct(
                            {
                                "bank_transfer": t.struct(
                                    {
                                        "eu_bank_transfer": t.struct(
                                            {"country": t.string()}
                                        ).optional(),
                                        "requested_address_types": t.array(
                                            t.string()
                                        ).optional(),
                                        "type": t.string(),
                                    }
                                ).optional(),
                                "funding_type": t.string().optional(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                        "eps": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "fpx": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "giropay": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "grabpay": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "ideal": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "klarna": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "konbini": t.struct(
                            {
                                "expires_after_days": t.integer().optional(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                        "link": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "oxxo": t.struct(
                            {
                                "expires_after_days": t.integer().optional(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                        "p24": t.struct(
                            {
                                "setup_future_usage": t.string().optional(),
                                "tos_shown_and_accepted": t.boolean().optional(),
                            }
                        ).optional(),
                        "paynow": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "paypal": t.struct(
                            {
                                "capture_method": t.string().optional(),
                                "preferred_locale": t.string().optional(),
                                "reference": t.string().optional(),
                                "risk_correlation_id": t.string().optional(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                        "pix": t.struct(
                            {"expires_after_seconds": t.integer().optional()}
                        ).optional(),
                        "sepa_debit": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "sofort": t.struct(
                            {"setup_future_usage": t.string().optional()}
                        ).optional(),
                        "us_bank_account": t.struct(
                            {
                                "financial_connections": t.struct(
                                    {"permissions": t.array(t.string()).optional()}
                                ).optional(),
                                "setup_future_usage": t.string().optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct(
                            {
                                "app_id": t.string().optional(),
                                "client": t.string(),
                                "setup_future_usage": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "payment_method_types": t.array(t.string()).optional(),
                "phone_number_collection": t.struct(
                    {"enabled": t.boolean()}
                ).optional(),
                "setup_intent_data": t.struct(
                    {
                        "description": t.string().optional(),
                        "metadata": t.struct({}).optional(),
                        "on_behalf_of": t.string().optional(),
                    }
                ).optional(),
                "shipping_address_collection": t.struct(
                    {"allowed_countries": t.array(t.string())}
                ).optional(),
                "shipping_options": t.array(
                    t.struct(
                        {
                            "shipping_rate": t.string().optional(),
                            "shipping_rate_data": t.struct(
                                {
                                    "delivery_estimate": t.struct(
                                        {
                                            "maximum": t.struct(
                                                {
                                                    "unit": t.string(),
                                                    "value": t.integer(),
                                                }
                                            ).optional(),
                                            "minimum": t.struct(
                                                {
                                                    "unit": t.string(),
                                                    "value": t.integer(),
                                                }
                                            ).optional(),
                                        }
                                    ).optional(),
                                    "display_name": t.string(),
                                    "fixed_amount": t.struct(
                                        {
                                            "amount": t.integer(),
                                            "currency": t.string(),
                                            "currency_options": t.struct({}).optional(),
                                        }
                                    ).optional(),
                                    "metadata": t.struct({}).optional(),
                                    "tax_behavior": t.string().optional(),
                                    "tax_code": t.string().optional(),
                                    "type": t.string().optional(),
                                }
                            ).optional(),
                        }
                    )
                ).optional(),
                "shipping_rates": t.array(t.string()).optional(),
                "submit_type": t.string().optional(),
                "subscription_data": t.struct(
                    {
                        "application_fee_percent": t.number().optional(),
                        "billing_cycle_anchor": t.integer().optional(),
                        "coupon": t.string().optional(),
                        "default_tax_rates": t.array(t.string()).optional(),
                        "description": t.string().optional(),
                        "metadata": t.struct({}).optional(),
                        "on_behalf_of": t.string().optional(),
                        "proration_behavior": t.string().optional(),
                        "transfer_data": t.struct(
                            {
                                "amount_percent": t.number().optional(),
                                "destination": t.string(),
                            }
                        ).optional(),
                        "trial_end": t.integer().optional(),
                        "trial_from_plan": t.boolean().optional(),
                        "trial_period_days": t.integer().optional(),
                        "trial_settings": t.struct(
                            {
                                "end_behavior": t.struct(
                                    {"missing_payment_method": t.string()}
                                )
                            }
                        ).optional(),
                    }
                ).optional(),
                "success_url": t.string(),
                "tax_id_collection": t.struct({"enabled": t.boolean()}).optional(),
            }
        ),
        t.proxy(renames["checkout.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "after_expiration",
            "allow_promotion_codes",
            "automatic_tax",
            "billing_address_collection",
            "cancel_url",
            "client_reference_id",
            "consent_collection",
            "currency",
            "custom_fields",
            "custom_text",
            "customer",
            "customer_creation",
            "customer_email",
            "customer_update",
            "discounts",
            "expand",
            "expires_at",
            "invoice_creation",
            "line_items",
            "locale",
            "metadata",
            "mode",
            "payment_intent_data",
            "payment_method_collection",
            "payment_method_options",
            "payment_method_types",
            "phone_number_collection",
            "setup_intent_data",
            "shipping_address_collection",
            "shipping_options",
            "shipping_rates",
            "submit_type",
            "subscription_data",
            "success_url",
            "tax_id_collection",
        ),
    )
    functions["GetCheckoutSessionsSession"] = spec3_sdk.get(
        "/v1/checkout/sessions/{session}",
        t.struct({"expand": t.array(t.string()), "session": t.string()}),
        t.proxy(renames["checkout.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCheckoutSessionsSessionExpire"] = spec3_sdk.post(
        "/v1/checkout/sessions/{session}/expire",
        t.struct({"session": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["checkout.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetCheckoutSessionsSessionLineItems"] = spec3_sdk.get(
        "/v1/checkout/sessions/{session}/line_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "session": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCountrySpecs"] = spec3_sdk.get(
        "/v1/country_specs",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["country_spec"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCountrySpecsCountry"] = spec3_sdk.get(
        "/v1/country_specs/{country}",
        t.struct({"country": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["country_spec"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCoupons"] = spec3_sdk.get(
        "/v1/coupons",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["coupon"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCoupons"] = spec3_sdk.post(
        "/v1/coupons",
        t.struct(
            {
                "amount_off": t.integer().optional(),
                "applies_to": t.struct(
                    {"products": t.array(t.string()).optional()}
                ).optional(),
                "currency": t.string().optional(),
                "currency_options": t.struct({}).optional(),
                "duration": t.string().optional(),
                "duration_in_months": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "max_redemptions": t.integer().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
                "percent_off": t.number().optional(),
                "redeem_by": t.integer().optional(),
            }
        ),
        t.proxy(renames["coupon"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount_off",
            "applies_to",
            "currency",
            "currency_options",
            "duration",
            "duration_in_months",
            "expand",
            "id",
            "max_redemptions",
            "metadata",
            "name",
            "percent_off",
            "redeem_by",
        ),
    )
    functions["DeleteCouponsCoupon"] = spec3_sdk.delete(
        "/v1/coupons/{coupon}",
        t.struct({"coupon": t.string()}),
        t.proxy(renames["deleted_coupon"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCouponsCoupon"] = spec3_sdk.get(
        "/v1/coupons/{coupon}",
        t.struct({"coupon": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["coupon"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCouponsCoupon"] = spec3_sdk.post(
        "/v1/coupons/{coupon}",
        t.struct(
            {
                "coupon": t.string(),
                "currency_options": t.struct({}).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["coupon"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("currency_options", "expand", "metadata", "name"),
    )
    functions["GetCreditNotes"] = spec3_sdk.get(
        "/v1/credit_notes",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "invoice": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["credit_note"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCreditNotes"] = spec3_sdk.post(
        "/v1/credit_notes",
        t.struct(
            {
                "amount": t.integer().optional(),
                "credit_amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "invoice": t.string(),
                "lines": t.array(
                    t.struct(
                        {
                            "amount": t.integer().optional(),
                            "description": t.string().optional(),
                            "invoice_line_item": t.string().optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "type": t.string(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                        }
                    )
                ).optional(),
                "memo": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "out_of_band_amount": t.integer().optional(),
                "reason": t.string().optional(),
                "refund": t.string().optional(),
                "refund_amount": t.integer().optional(),
                "shipping_cost": t.struct(
                    {"shipping_rate": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["credit_note"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "credit_amount",
            "expand",
            "invoice",
            "lines",
            "memo",
            "metadata",
            "out_of_band_amount",
            "reason",
            "refund",
            "refund_amount",
            "shipping_cost",
        ),
    )
    functions["GetCreditNotesPreview"] = spec3_sdk.get(
        "/v1/credit_notes/preview",
        t.struct(
            {
                "amount": t.integer(),
                "credit_amount": t.integer(),
                "expand": t.array(t.string()),
                "invoice": t.string(),
                "lines": t.array(
                    t.struct(
                        {
                            "amount": t.integer().optional(),
                            "description": t.string().optional(),
                            "invoice_line_item": t.string().optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "type": t.string(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                        }
                    )
                ),
                "memo": t.string(),
                "metadata": t.struct({}),
                "out_of_band_amount": t.integer(),
                "reason": t.string(),
                "refund": t.string(),
                "refund_amount": t.integer(),
                "shipping_cost": t.struct({"shipping_rate": t.string().optional()}),
            }
        ),
        t.proxy(renames["credit_note"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCreditNotesPreviewLines"] = spec3_sdk.get(
        "/v1/credit_notes/preview/lines",
        t.struct(
            {
                "amount": t.integer(),
                "credit_amount": t.integer(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "invoice": t.string(),
                "limit": t.integer(),
                "lines": t.array(
                    t.struct(
                        {
                            "amount": t.integer().optional(),
                            "description": t.string().optional(),
                            "invoice_line_item": t.string().optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "type": t.string(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                        }
                    )
                ),
                "memo": t.string(),
                "metadata": t.struct({}),
                "out_of_band_amount": t.integer(),
                "reason": t.string(),
                "refund": t.string(),
                "refund_amount": t.integer(),
                "shipping_cost": t.struct({"shipping_rate": t.string().optional()}),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["credit_note_line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCreditNotesCreditNoteLines"] = spec3_sdk.get(
        "/v1/credit_notes/{credit_note}/lines",
        t.struct(
            {
                "credit_note": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["credit_note_line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCreditNotesId"] = spec3_sdk.get(
        "/v1/credit_notes/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["credit_note"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCreditNotesId"] = spec3_sdk.post(
        "/v1/credit_notes/{id}",
        t.struct(
            {
                "id": t.string(),
                "expand": t.array(t.string()).optional(),
                "memo": t.string().optional(),
                "metadata": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["credit_note"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "memo", "metadata"),
    )
    functions["PostCreditNotesIdVoid"] = spec3_sdk.post(
        "/v1/credit_notes/{id}/void",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["credit_note"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetCustomers"] = spec3_sdk.get(
        "/v1/customers",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "email": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "test_clock": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["customer"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomers"] = spec3_sdk.post(
        "/v1/customers",
        t.struct(
            {
                "address": t.union(
                    [
                        t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "balance": t.integer().optional(),
                "cash_balance": t.struct(
                    {
                        "settings": t.struct(
                            {"reconciliation_mode": t.string().optional()}
                        ).optional()
                    }
                ).optional(),
                "coupon": t.string().optional(),
                "description": t.string().optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "invoice_prefix": t.string().optional(),
                "invoice_settings": t.struct(
                    {
                        "custom_fields": t.union(
                            [
                                t.array(
                                    t.struct({"name": t.string(), "value": t.string()})
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "default_payment_method": t.string().optional(),
                        "footer": t.string().optional(),
                        "rendering_options": t.union(
                            [
                                t.struct({"amount_tax_display": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
                "next_invoice_sequence": t.integer().optional(),
                "payment_method": t.string().optional(),
                "phone": t.string().optional(),
                "preferred_locales": t.array(t.string()).optional(),
                "promotion_code": t.string().optional(),
                "shipping": t.union(
                    [
                        t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "name": t.string(),
                                "phone": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "source": t.string().optional(),
                "tax": t.struct(
                    {"ip_address": t.union([t.string(), t.string()]).optional()}
                ).optional(),
                "tax_exempt": t.string().optional(),
                "tax_id_data": t.array(
                    t.struct({"type": t.string(), "value": t.string()})
                ).optional(),
                "test_clock": t.string().optional(),
                "validate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["customer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "balance",
            "cash_balance",
            "coupon",
            "description",
            "email",
            "expand",
            "invoice_prefix",
            "invoice_settings",
            "metadata",
            "name",
            "next_invoice_sequence",
            "payment_method",
            "phone",
            "preferred_locales",
            "promotion_code",
            "shipping",
            "source",
            "tax",
            "tax_exempt",
            "tax_id_data",
            "test_clock",
            "validate",
        ),
    )
    functions["GetCustomersSearch"] = spec3_sdk.get(
        "/v1/customers/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["customer"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["DeleteCustomersCustomer"] = spec3_sdk.delete(
        "/v1/customers/{customer}",
        t.struct({"customer": t.string()}),
        t.proxy(renames["deleted_customer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCustomersCustomer"] = spec3_sdk.get(
        "/v1/customers/{customer}",
        t.struct({"customer": t.string(), "expand": t.array(t.string())}),
        t.union([t.proxy(renames["customer"]), t.proxy(renames["deleted_customer"])]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomer"] = spec3_sdk.post(
        "/v1/customers/{customer}",
        t.struct(
            {
                "customer": t.string(),
                "address": t.union(
                    [
                        t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "balance": t.integer().optional(),
                "cash_balance": t.struct(
                    {
                        "settings": t.struct(
                            {"reconciliation_mode": t.string().optional()}
                        ).optional()
                    }
                ).optional(),
                "coupon": t.string().optional(),
                "default_source": t.string().optional(),
                "description": t.string().optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "invoice_prefix": t.string().optional(),
                "invoice_settings": t.struct(
                    {
                        "custom_fields": t.union(
                            [
                                t.array(
                                    t.struct({"name": t.string(), "value": t.string()})
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "default_payment_method": t.string().optional(),
                        "footer": t.string().optional(),
                        "rendering_options": t.union(
                            [
                                t.struct({"amount_tax_display": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
                "next_invoice_sequence": t.integer().optional(),
                "phone": t.string().optional(),
                "preferred_locales": t.array(t.string()).optional(),
                "promotion_code": t.string().optional(),
                "shipping": t.union(
                    [
                        t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "name": t.string(),
                                "phone": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "source": t.string().optional(),
                "tax": t.struct(
                    {"ip_address": t.union([t.string(), t.string()]).optional()}
                ).optional(),
                "tax_exempt": t.string().optional(),
                "validate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["customer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "balance",
            "cash_balance",
            "coupon",
            "default_source",
            "description",
            "email",
            "expand",
            "invoice_prefix",
            "invoice_settings",
            "metadata",
            "name",
            "next_invoice_sequence",
            "phone",
            "preferred_locales",
            "promotion_code",
            "shipping",
            "source",
            "tax",
            "tax_exempt",
            "validate",
        ),
    )
    functions["GetCustomersCustomerBalanceTransactions"] = spec3_sdk.get(
        "/v1/customers/{customer}/balance_transactions",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["customer_balance_transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerBalanceTransactions"] = spec3_sdk.post(
        "/v1/customers/{customer}/balance_transactions",
        t.struct(
            {
                "customer": t.string(),
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["customer_balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "currency", "description", "expand", "metadata"),
    )
    functions["GetCustomersCustomerBalanceTransactionsTransaction"] = spec3_sdk.get(
        "/v1/customers/{customer}/balance_transactions/{transaction}",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()),
                "transaction": t.string(),
            }
        ),
        t.proxy(renames["customer_balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerBalanceTransactionsTransaction"] = spec3_sdk.post(
        "/v1/customers/{customer}/balance_transactions/{transaction}",
        t.struct(
            {
                "customer": t.string(),
                "transaction": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["customer_balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("description", "expand", "metadata"),
    )
    functions["GetCustomersCustomerCashBalance"] = spec3_sdk.get(
        "/v1/customers/{customer}/cash_balance",
        t.struct({"customer": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["cash_balance"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerCashBalance"] = spec3_sdk.post(
        "/v1/customers/{customer}/cash_balance",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()).optional(),
                "settings": t.struct(
                    {"reconciliation_mode": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["cash_balance"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "settings"),
    )
    functions["GetCustomersCustomerCashBalanceTransactions"] = spec3_sdk.get(
        "/v1/customers/{customer}/cash_balance_transactions",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["customer_cash_balance_transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCustomersCustomerCashBalanceTransactionsTransaction"] = spec3_sdk.get(
        "/v1/customers/{customer}/cash_balance_transactions/{transaction}",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()),
                "transaction": t.string(),
            }
        ),
        t.proxy(renames["customer_cash_balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["DeleteCustomersCustomerDiscount"] = spec3_sdk.delete(
        "/v1/customers/{customer}/discount",
        t.struct({"customer": t.string()}),
        t.proxy(renames["deleted_discount"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerFundingInstructions"] = spec3_sdk.post(
        "/v1/customers/{customer}/funding_instructions",
        t.struct(
            {
                "customer": t.string(),
                "bank_transfer": t.struct(
                    {
                        "eu_bank_transfer": t.struct(
                            {"country": t.string()}
                        ).optional(),
                        "requested_address_types": t.array(t.string()).optional(),
                        "type": t.string(),
                    }
                ),
                "currency": t.string(),
                "expand": t.array(t.string()).optional(),
                "funding_type": t.string(),
            }
        ),
        t.proxy(renames["funding_instructions"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("bank_transfer", "currency", "expand", "funding_type"),
    )
    functions["GetCustomersCustomerPaymentMethods"] = spec3_sdk.get(
        "/v1/customers/{customer}/payment_methods",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_method"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCustomersCustomerPaymentMethodsPaymentMethod"] = spec3_sdk.get(
        "/v1/customers/{customer}/payment_methods/{payment_method}",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()),
                "payment_method": t.string(),
            }
        ),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCustomersCustomerSources"] = spec3_sdk.get(
        "/v1/customers/{customer}/sources",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "object": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_source"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerSources"] = spec3_sdk.post(
        "/v1/customers/{customer}/sources",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "source": t.string(),
                "validate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["payment_source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata", "source", "validate"),
    )
    functions["DeleteCustomersCustomerSourcesId"] = spec3_sdk.delete(
        "/v1/customers/{customer}/sources/{id}",
        t.struct(
            {
                "customer": t.string(),
                "id": t.string(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.union(
            [
                t.proxy(renames["payment_source"]),
                t.proxy(renames["deleted_payment_source"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetCustomersCustomerSourcesId"] = spec3_sdk.get(
        "/v1/customers/{customer}/sources/{id}",
        t.struct(
            {"customer": t.string(), "expand": t.array(t.string()), "id": t.string()}
        ),
        t.proxy(renames["payment_source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerSourcesId"] = spec3_sdk.post(
        "/v1/customers/{customer}/sources/{id}",
        t.struct(
            {
                "customer": t.string(),
                "id": t.string(),
                "account_holder_name": t.string().optional(),
                "account_holder_type": t.string().optional(),
                "address_city": t.string().optional(),
                "address_country": t.string().optional(),
                "address_line1": t.string().optional(),
                "address_line2": t.string().optional(),
                "address_state": t.string().optional(),
                "address_zip": t.string().optional(),
                "exp_month": t.string().optional(),
                "exp_year": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
                "owner": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "email": t.string().optional(),
                        "name": t.string().optional(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.union(
            [
                t.proxy(renames["card"]),
                t.proxy(renames["bank_account"]),
                t.proxy(renames["source"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_holder_name",
            "account_holder_type",
            "address_city",
            "address_country",
            "address_line1",
            "address_line2",
            "address_state",
            "address_zip",
            "exp_month",
            "exp_year",
            "expand",
            "metadata",
            "name",
            "owner",
        ),
    )
    functions["PostCustomersCustomerSourcesIdVerify"] = spec3_sdk.post(
        "/v1/customers/{customer}/sources/{id}/verify",
        t.struct(
            {
                "customer": t.string(),
                "id": t.string(),
                "amounts": t.array(t.integer()).optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["bank_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amounts", "expand"),
    )
    functions["GetCustomersCustomerTaxIds"] = spec3_sdk.get(
        "/v1/customers/{customer}/tax_ids",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["tax_id"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostCustomersCustomerTaxIds"] = spec3_sdk.post(
        "/v1/customers/{customer}/tax_ids",
        t.struct(
            {
                "customer": t.string(),
                "expand": t.array(t.string()).optional(),
                "type": t.string(),
                "value": t.string(),
            }
        ),
        t.proxy(renames["tax_id"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "type", "value"),
    )
    functions["DeleteCustomersCustomerTaxIdsId"] = spec3_sdk.delete(
        "/v1/customers/{customer}/tax_ids/{id}",
        t.struct({"customer": t.string(), "id": t.string()}),
        t.proxy(renames["deleted_tax_id"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetCustomersCustomerTaxIdsId"] = spec3_sdk.get(
        "/v1/customers/{customer}/tax_ids/{id}",
        t.struct(
            {"customer": t.string(), "expand": t.array(t.string()), "id": t.string()}
        ),
        t.proxy(renames["tax_id"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetDisputes"] = spec3_sdk.get(
        "/v1/disputes",
        t.struct(
            {
                "charge": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_intent": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["dispute"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetDisputesDispute"] = spec3_sdk.get(
        "/v1/disputes/{dispute}",
        t.struct({"dispute": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostDisputesDispute"] = spec3_sdk.post(
        "/v1/disputes/{dispute}",
        t.struct(
            {
                "dispute": t.string(),
                "evidence": t.struct(
                    {
                        "access_activity_log": t.string().optional(),
                        "billing_address": t.string().optional(),
                        "cancellation_policy": t.string().optional(),
                        "cancellation_policy_disclosure": t.string().optional(),
                        "cancellation_rebuttal": t.string().optional(),
                        "customer_communication": t.string().optional(),
                        "customer_email_address": t.string().optional(),
                        "customer_name": t.string().optional(),
                        "customer_purchase_ip": t.string().optional(),
                        "customer_signature": t.string().optional(),
                        "duplicate_charge_documentation": t.string().optional(),
                        "duplicate_charge_explanation": t.string().optional(),
                        "duplicate_charge_id": t.string().optional(),
                        "product_description": t.string().optional(),
                        "receipt": t.string().optional(),
                        "refund_policy": t.string().optional(),
                        "refund_policy_disclosure": t.string().optional(),
                        "refund_refusal_explanation": t.string().optional(),
                        "service_date": t.string().optional(),
                        "service_documentation": t.string().optional(),
                        "shipping_address": t.string().optional(),
                        "shipping_carrier": t.string().optional(),
                        "shipping_date": t.string().optional(),
                        "shipping_documentation": t.string().optional(),
                        "shipping_tracking_number": t.string().optional(),
                        "uncategorized_file": t.string().optional(),
                        "uncategorized_text": t.string().optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "submit": t.boolean().optional(),
            }
        ),
        t.proxy(renames["dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("evidence", "expand", "metadata", "submit"),
    )
    functions["PostDisputesDisputeClose"] = spec3_sdk.post(
        "/v1/disputes/{dispute}/close",
        t.struct({"dispute": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostEphemeralKeys"] = spec3_sdk.post(
        "/v1/ephemeral_keys",
        t.struct(
            {
                "customer": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "issuing_card": t.string().optional(),
                "verification_session": t.string().optional(),
            }
        ),
        t.proxy(renames["ephemeral_key"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("customer", "expand", "issuing_card", "verification_session"),
    )
    functions["DeleteEphemeralKeysKey"] = spec3_sdk.delete(
        "/v1/ephemeral_keys/{key}",
        t.struct({"key": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["ephemeral_key"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetEvents"] = spec3_sdk.get(
        "/v1/events",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "delivery_success": t.boolean(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "type": t.string(),
                "types": t.array(t.string()),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["event"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetEventsId"] = spec3_sdk.get(
        "/v1/events/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["event"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetExchangeRates"] = spec3_sdk.get(
        "/v1/exchange_rates",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["exchange_rate"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetExchangeRatesRateId"] = spec3_sdk.get(
        "/v1/exchange_rates/{rate_id}",
        t.struct({"expand": t.array(t.string()), "rate_id": t.string()}),
        t.proxy(renames["exchange_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetFileLinks"] = spec3_sdk.get(
        "/v1/file_links",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "expired": t.boolean(),
                "file": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["file_link"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostFileLinks"] = spec3_sdk.post(
        "/v1/file_links",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "file": t.string(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["file_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "expires_at", "file", "metadata"),
    )
    functions["GetFileLinksLink"] = spec3_sdk.get(
        "/v1/file_links/{link}",
        t.struct({"expand": t.array(t.string()), "link": t.string()}),
        t.proxy(renames["file_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostFileLinksLink"] = spec3_sdk.post(
        "/v1/file_links/{link}",
        t.struct(
            {
                "link": t.string(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.union([t.string(), t.integer(), t.string()]).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["file_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "expires_at", "metadata"),
    )
    functions["GetFiles"] = spec3_sdk.get(
        "/v1/files",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "purpose": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["file"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostFiles"] = spec3_sdk.post(
        "/v1/files",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "file": t.string(),
                "file_link_data": t.struct(
                    {
                        "create": t.boolean(),
                        "expires_at": t.integer().optional(),
                        "metadata": t.union([t.struct({}), t.string()]).optional(),
                    }
                ).optional(),
                "purpose": t.string(),
            }
        ),
        t.proxy(renames["file"]),
        content_type="multipart/form-data",
        body_fields=("expand", "file", "file_link_data", "purpose"),
    )
    functions["GetFilesFile"] = spec3_sdk.get(
        "/v1/files/{file}",
        t.struct({"expand": t.array(t.string()), "file": t.string()}),
        t.proxy(renames["file"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetFinancialConnectionsAccounts"] = spec3_sdk.get(
        "/v1/financial_connections/accounts",
        t.struct(
            {
                "account_holder": t.struct(
                    {
                        "account": t.string().optional(),
                        "customer": t.string().optional(),
                    }
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "session": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["financial_connections.account"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetFinancialConnectionsAccountsAccount"] = spec3_sdk.get(
        "/v1/financial_connections/accounts/{account}",
        t.struct({"account": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["financial_connections.account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostFinancialConnectionsAccountsAccountDisconnect"] = spec3_sdk.post(
        "/v1/financial_connections/accounts/{account}/disconnect",
        t.struct({"account": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["financial_connections.account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetFinancialConnectionsAccountsAccountOwners"] = spec3_sdk.get(
        "/v1/financial_connections/accounts/{account}/owners",
        t.struct(
            {
                "account": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "ownership": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(
                    t.proxy(renames["financial_connections.account_owner"])
                ),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostFinancialConnectionsAccountsAccountRefresh"] = spec3_sdk.post(
        "/v1/financial_connections/accounts/{account}/refresh",
        t.struct(
            {
                "account": t.string(),
                "expand": t.array(t.string()).optional(),
                "features": t.array(t.string()),
            }
        ),
        t.proxy(renames["financial_connections.account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "features"),
    )
    functions["PostFinancialConnectionsSessions"] = spec3_sdk.post(
        "/v1/financial_connections/sessions",
        t.struct(
            {
                "account_holder": t.struct(
                    {
                        "account": t.string().optional(),
                        "customer": t.string().optional(),
                        "type": t.string(),
                    }
                ),
                "expand": t.array(t.string()).optional(),
                "filters": t.struct({"countries": t.array(t.string())}).optional(),
                "permissions": t.array(t.string()),
                "return_url": t.string().optional(),
            }
        ),
        t.proxy(renames["financial_connections.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_holder",
            "expand",
            "filters",
            "permissions",
            "return_url",
        ),
    )
    functions["GetFinancialConnectionsSessionsSession"] = spec3_sdk.get(
        "/v1/financial_connections/sessions/{session}",
        t.struct({"expand": t.array(t.string()), "session": t.string()}),
        t.proxy(renames["financial_connections.session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetIdentityVerificationReports"] = spec3_sdk.get(
        "/v1/identity/verification_reports",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "type": t.string(),
                "verification_session": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["identity.verification_report"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetIdentityVerificationReportsReport"] = spec3_sdk.get(
        "/v1/identity/verification_reports/{report}",
        t.struct({"expand": t.array(t.string()), "report": t.string()}),
        t.proxy(renames["identity.verification_report"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetIdentityVerificationSessions"] = spec3_sdk.get(
        "/v1/identity/verification_sessions",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["identity.verification_session"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIdentityVerificationSessions"] = spec3_sdk.post(
        "/v1/identity/verification_sessions",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "options": t.struct(
                    {
                        "document": t.union(
                            [
                                t.struct(
                                    {
                                        "allowed_types": t.array(t.string()).optional(),
                                        "require_id_number": t.boolean().optional(),
                                        "require_live_capture": t.boolean().optional(),
                                        "require_matching_selfie": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional()
                    }
                ).optional(),
                "return_url": t.string().optional(),
                "type": t.string(),
            }
        ),
        t.proxy(renames["identity.verification_session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata", "options", "return_url", "type"),
    )
    functions["GetIdentityVerificationSessionsSession"] = spec3_sdk.get(
        "/v1/identity/verification_sessions/{session}",
        t.struct({"expand": t.array(t.string()), "session": t.string()}),
        t.proxy(renames["identity.verification_session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIdentityVerificationSessionsSession"] = spec3_sdk.post(
        "/v1/identity/verification_sessions/{session}",
        t.struct(
            {
                "session": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "options": t.struct(
                    {
                        "document": t.union(
                            [
                                t.struct(
                                    {
                                        "allowed_types": t.array(t.string()).optional(),
                                        "require_id_number": t.boolean().optional(),
                                        "require_live_capture": t.boolean().optional(),
                                        "require_matching_selfie": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional()
                    }
                ).optional(),
                "type": t.string().optional(),
            }
        ),
        t.proxy(renames["identity.verification_session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata", "options", "type"),
    )
    functions["PostIdentityVerificationSessionsSessionCancel"] = spec3_sdk.post(
        "/v1/identity/verification_sessions/{session}/cancel",
        t.struct({"session": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["identity.verification_session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostIdentityVerificationSessionsSessionRedact"] = spec3_sdk.post(
        "/v1/identity/verification_sessions/{session}/redact",
        t.struct({"session": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["identity.verification_session"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetInvoiceitems"] = spec3_sdk.get(
        "/v1/invoiceitems",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "invoice": t.string(),
                "limit": t.integer(),
                "pending": t.boolean(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["invoiceitem"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostInvoiceitems"] = spec3_sdk.post(
        "/v1/invoiceitems",
        t.struct(
            {
                "amount": t.integer().optional(),
                "currency": t.string().optional(),
                "customer": t.string(),
                "description": t.string().optional(),
                "discountable": t.boolean().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "invoice": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "period": t.struct(
                    {"end": t.integer(), "start": t.integer()}
                ).optional(),
                "price": t.string().optional(),
                "price_data": t.struct(
                    {
                        "currency": t.string(),
                        "product": t.string(),
                        "tax_behavior": t.string().optional(),
                        "unit_amount": t.integer().optional(),
                        "unit_amount_decimal": t.string().optional(),
                    }
                ).optional(),
                "quantity": t.integer().optional(),
                "subscription": t.string().optional(),
                "tax_behavior": t.string().optional(),
                "tax_code": t.union([t.string(), t.string()]).optional(),
                "tax_rates": t.array(t.string()).optional(),
                "unit_amount": t.integer().optional(),
                "unit_amount_decimal": t.string().optional(),
            }
        ),
        t.proxy(renames["invoiceitem"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "customer",
            "description",
            "discountable",
            "discounts",
            "expand",
            "invoice",
            "metadata",
            "period",
            "price",
            "price_data",
            "quantity",
            "subscription",
            "tax_behavior",
            "tax_code",
            "tax_rates",
            "unit_amount",
            "unit_amount_decimal",
        ),
    )
    functions["DeleteInvoiceitemsInvoiceitem"] = spec3_sdk.delete(
        "/v1/invoiceitems/{invoiceitem}",
        t.struct({"invoiceitem": t.string()}),
        t.proxy(renames["deleted_invoiceitem"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetInvoiceitemsInvoiceitem"] = spec3_sdk.get(
        "/v1/invoiceitems/{invoiceitem}",
        t.struct({"expand": t.array(t.string()), "invoiceitem": t.string()}),
        t.proxy(renames["invoiceitem"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostInvoiceitemsInvoiceitem"] = spec3_sdk.post(
        "/v1/invoiceitems/{invoiceitem}",
        t.struct(
            {
                "invoiceitem": t.string(),
                "amount": t.integer().optional(),
                "description": t.string().optional(),
                "discountable": t.boolean().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "period": t.struct(
                    {"end": t.integer(), "start": t.integer()}
                ).optional(),
                "price": t.string().optional(),
                "price_data": t.struct(
                    {
                        "currency": t.string(),
                        "product": t.string(),
                        "tax_behavior": t.string().optional(),
                        "unit_amount": t.integer().optional(),
                        "unit_amount_decimal": t.string().optional(),
                    }
                ).optional(),
                "quantity": t.integer().optional(),
                "tax_behavior": t.string().optional(),
                "tax_code": t.union([t.string(), t.string()]).optional(),
                "tax_rates": t.union([t.array(t.string()), t.string()]).optional(),
                "unit_amount": t.integer().optional(),
                "unit_amount_decimal": t.string().optional(),
            }
        ),
        t.proxy(renames["invoiceitem"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "description",
            "discountable",
            "discounts",
            "expand",
            "metadata",
            "period",
            "price",
            "price_data",
            "quantity",
            "tax_behavior",
            "tax_code",
            "tax_rates",
            "unit_amount",
            "unit_amount_decimal",
        ),
    )
    functions["GetInvoices"] = spec3_sdk.get(
        "/v1/invoices",
        t.struct(
            {
                "collection_method": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "due_date": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
                "subscription": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["invoice"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostInvoices"] = spec3_sdk.post(
        "/v1/invoices",
        t.struct(
            {
                "account_tax_ids": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "application_fee_amount": t.integer().optional(),
                "auto_advance": t.boolean().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "collection_method": t.string().optional(),
                "currency": t.string().optional(),
                "custom_fields": t.union(
                    [
                        t.array(t.struct({"name": t.string(), "value": t.string()})),
                        t.string(),
                    ]
                ).optional(),
                "customer": t.string().optional(),
                "days_until_due": t.integer().optional(),
                "default_payment_method": t.string().optional(),
                "default_source": t.string().optional(),
                "default_tax_rates": t.array(t.string()).optional(),
                "description": t.string().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "due_date": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "footer": t.string().optional(),
                "from_invoice": t.struct(
                    {"action": t.string(), "invoice": t.string()}
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "on_behalf_of": t.string().optional(),
                "payment_settings": t.struct(
                    {
                        "default_mandate": t.string().optional(),
                        "payment_method_options": t.struct(
                            {
                                "acss_debit": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "transaction_type": t.string().optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "bancontact": t.union(
                                    [
                                        t.struct(
                                            {
                                                "preferred_language": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "card": t.union(
                                    [
                                        t.struct(
                                            {
                                                "installments": t.struct(
                                                    {
                                                        "enabled": t.boolean().optional(),
                                                        "plan": t.union(
                                                            [
                                                                t.struct(
                                                                    {
                                                                        "count": t.integer(),
                                                                        "interval": t.string(),
                                                                        "type": t.string(),
                                                                    }
                                                                ),
                                                                t.string(),
                                                            ]
                                                        ).optional(),
                                                    }
                                                ).optional(),
                                                "request_three_d_secure": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "customer_balance": t.union(
                                    [
                                        t.struct(
                                            {
                                                "bank_transfer": t.struct(
                                                    {
                                                        "eu_bank_transfer": t.struct(
                                                            {"country": t.string()}
                                                        ).optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "funding_type": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "konbini": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "us_bank_account": t.union(
                                    [
                                        t.struct(
                                            {
                                                "financial_connections": t.struct(
                                                    {
                                                        "permissions": t.array(
                                                            t.string()
                                                        ).optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                        "payment_method_types": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "pending_invoice_items_behavior": t.string().optional(),
                "rendering_options": t.union(
                    [
                        t.struct({"amount_tax_display": t.string().optional()}),
                        t.string(),
                    ]
                ).optional(),
                "shipping_cost": t.struct(
                    {
                        "shipping_rate": t.string().optional(),
                        "shipping_rate_data": t.struct(
                            {
                                "delivery_estimate": t.struct(
                                    {
                                        "maximum": t.struct(
                                            {"unit": t.string(), "value": t.integer()}
                                        ).optional(),
                                        "minimum": t.struct(
                                            {"unit": t.string(), "value": t.integer()}
                                        ).optional(),
                                    }
                                ).optional(),
                                "display_name": t.string(),
                                "fixed_amount": t.struct(
                                    {
                                        "amount": t.integer(),
                                        "currency": t.string(),
                                        "currency_options": t.struct({}).optional(),
                                    }
                                ).optional(),
                                "metadata": t.struct({}).optional(),
                                "tax_behavior": t.string().optional(),
                                "tax_code": t.string().optional(),
                                "type": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "shipping_details": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        "name": t.string(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
                "statement_descriptor": t.string().optional(),
                "subscription": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional(), "destination": t.string()}
                ).optional(),
            }
        ),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_tax_ids",
            "application_fee_amount",
            "auto_advance",
            "automatic_tax",
            "collection_method",
            "currency",
            "custom_fields",
            "customer",
            "days_until_due",
            "default_payment_method",
            "default_source",
            "default_tax_rates",
            "description",
            "discounts",
            "due_date",
            "expand",
            "footer",
            "from_invoice",
            "metadata",
            "on_behalf_of",
            "payment_settings",
            "pending_invoice_items_behavior",
            "rendering_options",
            "shipping_cost",
            "shipping_details",
            "statement_descriptor",
            "subscription",
            "transfer_data",
        ),
    )
    functions["GetInvoicesSearch"] = spec3_sdk.get(
        "/v1/invoices/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["invoice"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetInvoicesUpcoming"] = spec3_sdk.get(
        "/v1/invoices/upcoming",
        t.struct(
            {
                "automatic_tax": t.struct({"enabled": t.boolean()}),
                "coupon": t.string(),
                "currency": t.string(),
                "customer": t.string(),
                "customer_details": t.struct(
                    {
                        "address": t.union(
                            [
                                t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "shipping": t.union(
                            [
                                t.struct(
                                    {
                                        "address": t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        "name": t.string(),
                                        "phone": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "tax": t.struct(
                            {"ip_address": t.union([t.string(), t.string()]).optional()}
                        ).optional(),
                        "tax_exempt": t.string().optional(),
                        "tax_ids": t.array(
                            t.struct({"type": t.string(), "value": t.string()})
                        ).optional(),
                    }
                ),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ),
                "expand": t.array(t.string()),
                "invoice_items": t.array(
                    t.struct(
                        {
                            "amount": t.integer().optional(),
                            "currency": t.string().optional(),
                            "description": t.string().optional(),
                            "discountable": t.boolean().optional(),
                            "discounts": t.union(
                                [
                                    t.array(
                                        t.struct(
                                            {
                                                "coupon": t.string().optional(),
                                                "discount": t.string().optional(),
                                            }
                                        )
                                    ),
                                    t.string(),
                                ]
                            ).optional(),
                            "invoiceitem": t.string().optional(),
                            "metadata": t.union([t.struct({}), t.string()]).optional(),
                            "period": t.struct(
                                {"end": t.integer(), "start": t.integer()}
                            ).optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_behavior": t.string().optional(),
                            "tax_code": t.union([t.string(), t.string()]).optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                        }
                    )
                ),
                "schedule": t.string(),
                "subscription": t.string(),
                "subscription_billing_cycle_anchor": t.union([t.string(), t.integer()]),
                "subscription_cancel_at": t.union([t.integer(), t.string()]),
                "subscription_cancel_at_period_end": t.boolean(),
                "subscription_cancel_now": t.boolean(),
                "subscription_default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ),
                "subscription_items": t.array(
                    t.struct(
                        {
                            "billing_thresholds": t.union(
                                [t.struct({"usage_gte": t.integer()}), t.string()]
                            ).optional(),
                            "clear_usage": t.boolean().optional(),
                            "deleted": t.boolean().optional(),
                            "id": t.string().optional(),
                            "metadata": t.union([t.struct({}), t.string()]).optional(),
                            "plan": t.string().optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ),
                "subscription_proration_behavior": t.string(),
                "subscription_proration_date": t.integer(),
                "subscription_resume_at": t.string(),
                "subscription_start_date": t.integer(),
                "subscription_trial_end": t.union([t.string(), t.integer()]),
                "subscription_trial_from_plan": t.boolean(),
            }
        ),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetInvoicesUpcomingLines"] = spec3_sdk.get(
        "/v1/invoices/upcoming/lines",
        t.struct(
            {
                "automatic_tax": t.struct({"enabled": t.boolean()}),
                "coupon": t.string(),
                "currency": t.string(),
                "customer": t.string(),
                "customer_details": t.struct(
                    {
                        "address": t.union(
                            [
                                t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "shipping": t.union(
                            [
                                t.struct(
                                    {
                                        "address": t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        "name": t.string(),
                                        "phone": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "tax": t.struct(
                            {"ip_address": t.union([t.string(), t.string()]).optional()}
                        ).optional(),
                        "tax_exempt": t.string().optional(),
                        "tax_ids": t.array(
                            t.struct({"type": t.string(), "value": t.string()})
                        ).optional(),
                    }
                ),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "invoice_items": t.array(
                    t.struct(
                        {
                            "amount": t.integer().optional(),
                            "currency": t.string().optional(),
                            "description": t.string().optional(),
                            "discountable": t.boolean().optional(),
                            "discounts": t.union(
                                [
                                    t.array(
                                        t.struct(
                                            {
                                                "coupon": t.string().optional(),
                                                "discount": t.string().optional(),
                                            }
                                        )
                                    ),
                                    t.string(),
                                ]
                            ).optional(),
                            "invoiceitem": t.string().optional(),
                            "metadata": t.union([t.struct({}), t.string()]).optional(),
                            "period": t.struct(
                                {"end": t.integer(), "start": t.integer()}
                            ).optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_behavior": t.string().optional(),
                            "tax_code": t.union([t.string(), t.string()]).optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                        }
                    )
                ),
                "limit": t.integer(),
                "schedule": t.string(),
                "starting_after": t.string(),
                "subscription": t.string(),
                "subscription_billing_cycle_anchor": t.union([t.string(), t.integer()]),
                "subscription_cancel_at": t.union([t.integer(), t.string()]),
                "subscription_cancel_at_period_end": t.boolean(),
                "subscription_cancel_now": t.boolean(),
                "subscription_default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ),
                "subscription_items": t.array(
                    t.struct(
                        {
                            "billing_thresholds": t.union(
                                [t.struct({"usage_gte": t.integer()}), t.string()]
                            ).optional(),
                            "clear_usage": t.boolean().optional(),
                            "deleted": t.boolean().optional(),
                            "id": t.string().optional(),
                            "metadata": t.union([t.struct({}), t.string()]).optional(),
                            "plan": t.string().optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ),
                "subscription_proration_behavior": t.string(),
                "subscription_proration_date": t.integer(),
                "subscription_resume_at": t.string(),
                "subscription_start_date": t.integer(),
                "subscription_trial_end": t.union([t.string(), t.integer()]),
                "subscription_trial_from_plan": t.boolean(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["DeleteInvoicesInvoice"] = spec3_sdk.delete(
        "/v1/invoices/{invoice}",
        t.struct({"invoice": t.string()}),
        t.proxy(renames["deleted_invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetInvoicesInvoice"] = spec3_sdk.get(
        "/v1/invoices/{invoice}",
        t.struct({"expand": t.array(t.string()), "invoice": t.string()}),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostInvoicesInvoice"] = spec3_sdk.post(
        "/v1/invoices/{invoice}",
        t.struct(
            {
                "invoice": t.string(),
                "account_tax_ids": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "application_fee_amount": t.integer().optional(),
                "auto_advance": t.boolean().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "collection_method": t.string().optional(),
                "custom_fields": t.union(
                    [
                        t.array(t.struct({"name": t.string(), "value": t.string()})),
                        t.string(),
                    ]
                ).optional(),
                "days_until_due": t.integer().optional(),
                "default_payment_method": t.string().optional(),
                "default_source": t.string().optional(),
                "default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "description": t.string().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "due_date": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "footer": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                "payment_settings": t.struct(
                    {
                        "default_mandate": t.string().optional(),
                        "payment_method_options": t.struct(
                            {
                                "acss_debit": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "transaction_type": t.string().optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "bancontact": t.union(
                                    [
                                        t.struct(
                                            {
                                                "preferred_language": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "card": t.union(
                                    [
                                        t.struct(
                                            {
                                                "installments": t.struct(
                                                    {
                                                        "enabled": t.boolean().optional(),
                                                        "plan": t.union(
                                                            [
                                                                t.struct(
                                                                    {
                                                                        "count": t.integer(),
                                                                        "interval": t.string(),
                                                                        "type": t.string(),
                                                                    }
                                                                ),
                                                                t.string(),
                                                            ]
                                                        ).optional(),
                                                    }
                                                ).optional(),
                                                "request_three_d_secure": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "customer_balance": t.union(
                                    [
                                        t.struct(
                                            {
                                                "bank_transfer": t.struct(
                                                    {
                                                        "eu_bank_transfer": t.struct(
                                                            {"country": t.string()}
                                                        ).optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "funding_type": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "konbini": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "us_bank_account": t.union(
                                    [
                                        t.struct(
                                            {
                                                "financial_connections": t.struct(
                                                    {
                                                        "permissions": t.array(
                                                            t.string()
                                                        ).optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                        "payment_method_types": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "rendering_options": t.union(
                    [
                        t.struct({"amount_tax_display": t.string().optional()}),
                        t.string(),
                    ]
                ).optional(),
                "shipping_cost": t.union(
                    [
                        t.struct(
                            {
                                "shipping_rate": t.string().optional(),
                                "shipping_rate_data": t.struct(
                                    {
                                        "delivery_estimate": t.struct(
                                            {
                                                "maximum": t.struct(
                                                    {
                                                        "unit": t.string(),
                                                        "value": t.integer(),
                                                    }
                                                ).optional(),
                                                "minimum": t.struct(
                                                    {
                                                        "unit": t.string(),
                                                        "value": t.integer(),
                                                    }
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "display_name": t.string(),
                                        "fixed_amount": t.struct(
                                            {
                                                "amount": t.integer(),
                                                "currency": t.string(),
                                                "currency_options": t.struct(
                                                    {}
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "metadata": t.struct({}).optional(),
                                        "tax_behavior": t.string().optional(),
                                        "tax_code": t.string().optional(),
                                        "type": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "shipping_details": t.union(
                    [
                        t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "name": t.string(),
                                "phone": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "statement_descriptor": t.string().optional(),
                "transfer_data": t.union(
                    [
                        t.struct(
                            {
                                "amount": t.integer().optional(),
                                "destination": t.string(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
            }
        ),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account_tax_ids",
            "application_fee_amount",
            "auto_advance",
            "automatic_tax",
            "collection_method",
            "custom_fields",
            "days_until_due",
            "default_payment_method",
            "default_source",
            "default_tax_rates",
            "description",
            "discounts",
            "due_date",
            "expand",
            "footer",
            "metadata",
            "on_behalf_of",
            "payment_settings",
            "rendering_options",
            "shipping_cost",
            "shipping_details",
            "statement_descriptor",
            "transfer_data",
        ),
    )
    functions["PostInvoicesInvoiceFinalize"] = spec3_sdk.post(
        "/v1/invoices/{invoice}/finalize",
        t.struct(
            {
                "invoice": t.string(),
                "auto_advance": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("auto_advance", "expand"),
    )
    functions["GetInvoicesInvoiceLines"] = spec3_sdk.get(
        "/v1/invoices/{invoice}/lines",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "invoice": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostInvoicesInvoiceMarkUncollectible"] = spec3_sdk.post(
        "/v1/invoices/{invoice}/mark_uncollectible",
        t.struct({"invoice": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostInvoicesInvoicePay"] = spec3_sdk.post(
        "/v1/invoices/{invoice}/pay",
        t.struct(
            {
                "invoice": t.string(),
                "expand": t.array(t.string()).optional(),
                "forgive": t.boolean().optional(),
                "mandate": t.string().optional(),
                "off_session": t.boolean().optional(),
                "paid_out_of_band": t.boolean().optional(),
                "payment_method": t.string().optional(),
                "source": t.string().optional(),
            }
        ),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "expand",
            "forgive",
            "mandate",
            "off_session",
            "paid_out_of_band",
            "payment_method",
            "source",
        ),
    )
    functions["PostInvoicesInvoiceSend"] = spec3_sdk.post(
        "/v1/invoices/{invoice}/send",
        t.struct({"invoice": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostInvoicesInvoiceVoid"] = spec3_sdk.post(
        "/v1/invoices/{invoice}/void",
        t.struct({"invoice": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["invoice"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetIssuingAuthorizations"] = spec3_sdk.get(
        "/v1/issuing/authorizations",
        t.struct(
            {
                "card": t.string(),
                "cardholder": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["issuing.authorization"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetIssuingAuthorizationsAuthorization"] = spec3_sdk.get(
        "/v1/issuing/authorizations/{authorization}",
        t.struct({"authorization": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["issuing.authorization"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingAuthorizationsAuthorization"] = spec3_sdk.post(
        "/v1/issuing/authorizations/{authorization}",
        t.struct(
            {
                "authorization": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.authorization"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["PostIssuingAuthorizationsAuthorizationApprove"] = spec3_sdk.post(
        "/v1/issuing/authorizations/{authorization}/approve",
        t.struct(
            {
                "authorization": t.string(),
                "amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.authorization"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "expand", "metadata"),
    )
    functions["PostIssuingAuthorizationsAuthorizationDecline"] = spec3_sdk.post(
        "/v1/issuing/authorizations/{authorization}/decline",
        t.struct(
            {
                "authorization": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.authorization"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetIssuingCardholders"] = spec3_sdk.get(
        "/v1/issuing/cardholders",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "email": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "phone_number": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["issuing.cardholder"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingCardholders"] = spec3_sdk.post(
        "/v1/issuing/cardholders",
        t.struct(
            {
                "billing": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string(),
                                "country": t.string(),
                                "line1": t.string(),
                                "line2": t.string().optional(),
                                "postal_code": t.string(),
                                "state": t.string().optional(),
                            }
                        )
                    }
                ),
                "company": t.struct({"tax_id": t.string().optional()}).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "individual": t.struct(
                    {
                        "card_issuing": t.struct(
                            {
                                "user_terms_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "dob": t.struct(
                            {
                                "day": t.integer(),
                                "month": t.integer(),
                                "year": t.integer(),
                            }
                        ).optional(),
                        "first_name": t.string().optional(),
                        "last_name": t.string().optional(),
                        "verification": t.struct(
                            {
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "name": t.string(),
                "phone_number": t.string().optional(),
                "spending_controls": t.struct(
                    {
                        "allowed_categories": t.array(t.string()).optional(),
                        "blocked_categories": t.array(t.string()).optional(),
                        "spending_limits": t.array(
                            t.struct(
                                {
                                    "amount": t.integer(),
                                    "categories": t.array(t.string()).optional(),
                                    "interval": t.string(),
                                }
                            )
                        ).optional(),
                        "spending_limits_currency": t.string().optional(),
                    }
                ).optional(),
                "status": t.string().optional(),
                "type": t.string().optional(),
            }
        ),
        t.proxy(renames["issuing.cardholder"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "billing",
            "company",
            "email",
            "expand",
            "individual",
            "metadata",
            "name",
            "phone_number",
            "spending_controls",
            "status",
            "type",
        ),
    )
    functions["GetIssuingCardholdersCardholder"] = spec3_sdk.get(
        "/v1/issuing/cardholders/{cardholder}",
        t.struct({"cardholder": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["issuing.cardholder"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingCardholdersCardholder"] = spec3_sdk.post(
        "/v1/issuing/cardholders/{cardholder}",
        t.struct(
            {
                "cardholder": t.string(),
                "billing": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string(),
                                "country": t.string(),
                                "line1": t.string(),
                                "line2": t.string().optional(),
                                "postal_code": t.string(),
                                "state": t.string().optional(),
                            }
                        )
                    }
                ).optional(),
                "company": t.struct({"tax_id": t.string().optional()}).optional(),
                "email": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "individual": t.struct(
                    {
                        "card_issuing": t.struct(
                            {
                                "user_terms_acceptance": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "dob": t.struct(
                            {
                                "day": t.integer(),
                                "month": t.integer(),
                                "year": t.integer(),
                            }
                        ).optional(),
                        "first_name": t.string().optional(),
                        "last_name": t.string().optional(),
                        "verification": t.struct(
                            {
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "phone_number": t.string().optional(),
                "spending_controls": t.struct(
                    {
                        "allowed_categories": t.array(t.string()).optional(),
                        "blocked_categories": t.array(t.string()).optional(),
                        "spending_limits": t.array(
                            t.struct(
                                {
                                    "amount": t.integer(),
                                    "categories": t.array(t.string()).optional(),
                                    "interval": t.string(),
                                }
                            )
                        ).optional(),
                        "spending_limits_currency": t.string().optional(),
                    }
                ).optional(),
                "status": t.string().optional(),
            }
        ),
        t.proxy(renames["issuing.cardholder"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "billing",
            "company",
            "email",
            "expand",
            "individual",
            "metadata",
            "phone_number",
            "spending_controls",
            "status",
        ),
    )
    functions["GetIssuingCards"] = spec3_sdk.get(
        "/v1/issuing/cards",
        t.struct(
            {
                "cardholder": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "exp_month": t.integer(),
                "exp_year": t.integer(),
                "expand": t.array(t.string()),
                "last4": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["issuing.card"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingCards"] = spec3_sdk.post(
        "/v1/issuing/cards",
        t.struct(
            {
                "cardholder": t.string().optional(),
                "currency": t.string(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "replacement_for": t.string().optional(),
                "replacement_reason": t.string().optional(),
                "shipping": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string(),
                                "country": t.string(),
                                "line1": t.string(),
                                "line2": t.string().optional(),
                                "postal_code": t.string(),
                                "state": t.string().optional(),
                            }
                        ),
                        "customs": t.struct(
                            {"eori_number": t.string().optional()}
                        ).optional(),
                        "name": t.string(),
                        "phone_number": t.string().optional(),
                        "require_signature": t.boolean().optional(),
                        "service": t.string().optional(),
                        "type": t.string().optional(),
                    }
                ).optional(),
                "spending_controls": t.struct(
                    {
                        "allowed_categories": t.array(t.string()).optional(),
                        "blocked_categories": t.array(t.string()).optional(),
                        "spending_limits": t.array(
                            t.struct(
                                {
                                    "amount": t.integer(),
                                    "categories": t.array(t.string()).optional(),
                                    "interval": t.string(),
                                }
                            )
                        ).optional(),
                    }
                ).optional(),
                "status": t.string().optional(),
                "type": t.string(),
            }
        ),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "cardholder",
            "currency",
            "expand",
            "financial_account",
            "metadata",
            "replacement_for",
            "replacement_reason",
            "shipping",
            "spending_controls",
            "status",
            "type",
        ),
    )
    functions["GetIssuingCardsCard"] = spec3_sdk.get(
        "/v1/issuing/cards/{card}",
        t.struct({"card": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingCardsCard"] = spec3_sdk.post(
        "/v1/issuing/cards/{card}",
        t.struct(
            {
                "card": t.string(),
                "cancellation_reason": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "pin": t.struct({"encrypted_number": t.string().optional()}).optional(),
                "spending_controls": t.struct(
                    {
                        "allowed_categories": t.array(t.string()).optional(),
                        "blocked_categories": t.array(t.string()).optional(),
                        "spending_limits": t.array(
                            t.struct(
                                {
                                    "amount": t.integer(),
                                    "categories": t.array(t.string()).optional(),
                                    "interval": t.string(),
                                }
                            )
                        ).optional(),
                    }
                ).optional(),
                "status": t.string().optional(),
            }
        ),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "cancellation_reason",
            "expand",
            "metadata",
            "pin",
            "spending_controls",
            "status",
        ),
    )
    functions["GetIssuingDisputes"] = spec3_sdk.get(
        "/v1/issuing/disputes",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
                "transaction": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["issuing.dispute"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingDisputes"] = spec3_sdk.post(
        "/v1/issuing/disputes",
        t.struct(
            {
                "amount": t.integer().optional(),
                "evidence": t.struct(
                    {
                        "canceled": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "canceled_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "cancellation_policy_provided": t.union(
                                            [t.boolean(), t.string()]
                                        ).optional(),
                                        "cancellation_reason": t.string().optional(),
                                        "expected_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                        "return_status": t.string().optional(),
                                        "returned_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "duplicate": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "card_statement": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "cash_receipt": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "check_image": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "original_transaction": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "fraudulent": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "merchandise_not_as_described": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "received_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "return_description": t.string().optional(),
                                        "return_status": t.string().optional(),
                                        "returned_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "not_received": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "expected_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "other": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "reason": t.string().optional(),
                        "service_not_as_described": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "canceled_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "cancellation_reason": t.string().optional(),
                                        "explanation": t.string().optional(),
                                        "received_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "transaction": t.string().optional(),
                "treasury": t.struct({"received_debit": t.string()}).optional(),
            }
        ),
        t.proxy(renames["issuing.dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "evidence",
            "expand",
            "metadata",
            "transaction",
            "treasury",
        ),
    )
    functions["GetIssuingDisputesDispute"] = spec3_sdk.get(
        "/v1/issuing/disputes/{dispute}",
        t.struct({"dispute": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["issuing.dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingDisputesDispute"] = spec3_sdk.post(
        "/v1/issuing/disputes/{dispute}",
        t.struct(
            {
                "dispute": t.string(),
                "amount": t.integer().optional(),
                "evidence": t.struct(
                    {
                        "canceled": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "canceled_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "cancellation_policy_provided": t.union(
                                            [t.boolean(), t.string()]
                                        ).optional(),
                                        "cancellation_reason": t.string().optional(),
                                        "expected_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                        "return_status": t.string().optional(),
                                        "returned_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "duplicate": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "card_statement": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "cash_receipt": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "check_image": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "original_transaction": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "fraudulent": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "merchandise_not_as_described": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "received_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "return_description": t.string().optional(),
                                        "return_status": t.string().optional(),
                                        "returned_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "not_received": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "expected_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "other": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "explanation": t.string().optional(),
                                        "product_description": t.string().optional(),
                                        "product_type": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "reason": t.string().optional(),
                        "service_not_as_described": t.union(
                            [
                                t.struct(
                                    {
                                        "additional_documentation": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "canceled_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "cancellation_reason": t.string().optional(),
                                        "explanation": t.string().optional(),
                                        "received_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "evidence", "expand", "metadata"),
    )
    functions["PostIssuingDisputesDisputeSubmit"] = spec3_sdk.post(
        "/v1/issuing/disputes/{dispute}/submit",
        t.struct(
            {
                "dispute": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.dispute"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetIssuingTransactions"] = spec3_sdk.get(
        "/v1/issuing/transactions",
        t.struct(
            {
                "card": t.string(),
                "cardholder": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["issuing.transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetIssuingTransactionsTransaction"] = spec3_sdk.get(
        "/v1/issuing/transactions/{transaction}",
        t.struct({"expand": t.array(t.string()), "transaction": t.string()}),
        t.proxy(renames["issuing.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostIssuingTransactionsTransaction"] = spec3_sdk.post(
        "/v1/issuing/transactions/{transaction}",
        t.struct(
            {
                "transaction": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["issuing.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetMandatesMandate"] = spec3_sdk.get(
        "/v1/mandates/{mandate}",
        t.struct({"expand": t.array(t.string()), "mandate": t.string()}),
        t.proxy(renames["mandate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetPaymentIntents"] = spec3_sdk.get(
        "/v1/payment_intents",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_intent"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentIntents"] = spec3_sdk.post(
        "/v1/payment_intents",
        t.struct(
            {
                "amount": t.integer(),
                "application_fee_amount": t.integer().optional(),
                "automatic_payment_methods": t.struct(
                    {"enabled": t.boolean()}
                ).optional(),
                "capture_method": t.string().optional(),
                "confirm": t.boolean().optional(),
                "confirmation_method": t.string().optional(),
                "currency": t.string(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "error_on_requires_action": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "mandate": t.string().optional(),
                "mandate_data": t.struct(
                    {
                        "customer_acceptance": t.struct(
                            {
                                "accepted_at": t.integer().optional(),
                                "offline": t.struct({}).optional(),
                                "online": t.struct(
                                    {"ip_address": t.string(), "user_agent": t.string()}
                                ).optional(),
                                "type": t.string(),
                            }
                        )
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "off_session": t.union([t.boolean(), t.string()]).optional(),
                "on_behalf_of": t.string().optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct(
                                            {
                                                "custom_mandate_url": t.union(
                                                    [t.string(), t.string()]
                                                ).optional(),
                                                "interval_description": t.string().optional(),
                                                "payment_schedule": t.string().optional(),
                                                "transaction_type": t.string().optional(),
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "affirm": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "afterpay_clearpay": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "alipay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "au_becs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bacs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bancontact": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "blik": t.union(
                            [t.struct({"code": t.string().optional()}), t.string()]
                        ).optional(),
                        "boleto": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "cvc_token": t.string().optional(),
                                        "installments": t.struct(
                                            {
                                                "enabled": t.boolean().optional(),
                                                "plan": t.union(
                                                    [
                                                        t.struct(
                                                            {
                                                                "count": t.integer(),
                                                                "interval": t.string(),
                                                                "type": t.string(),
                                                            }
                                                        ),
                                                        t.string(),
                                                    ]
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "mandate_options": t.struct(
                                            {
                                                "amount": t.integer(),
                                                "amount_type": t.string(),
                                                "description": t.string().optional(),
                                                "end_date": t.integer().optional(),
                                                "interval": t.string(),
                                                "interval_count": t.integer().optional(),
                                                "reference": t.string(),
                                                "start_date": t.integer(),
                                                "supported_types": t.array(
                                                    t.string()
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "moto": t.boolean().optional(),
                                        "network": t.string().optional(),
                                        "request_three_d_secure": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "statement_descriptor_suffix_kana": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "statement_descriptor_suffix_kanji": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card_present": t.union(
                            [
                                t.struct(
                                    {
                                        "request_extended_authorization": t.boolean().optional(),
                                        "request_incremental_authorization_support": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "cashapp": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "customer_balance": t.union(
                            [
                                t.struct(
                                    {
                                        "bank_transfer": t.struct(
                                            {
                                                "eu_bank_transfer": t.struct(
                                                    {"country": t.string()}
                                                ).optional(),
                                                "requested_address_types": t.array(
                                                    t.string()
                                                ).optional(),
                                                "type": t.string(),
                                            }
                                        ).optional(),
                                        "funding_type": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "eps": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "fpx": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "giropay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "grabpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "ideal": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "interac_present": t.union(
                            [t.struct({}), t.string()]
                        ).optional(),
                        "klarna": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "konbini": t.union(
                            [
                                t.struct(
                                    {
                                        "confirmation_number": t.string().optional(),
                                        "expires_after_days": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "expires_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "product_description": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "link": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "persistent_token": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "oxxo": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "p24": t.union(
                            [
                                t.struct(
                                    {
                                        "setup_future_usage": t.string().optional(),
                                        "tos_shown_and_accepted": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "paynow": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "paypal": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "risk_correlation_id": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "pix": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_seconds": t.integer().optional(),
                                        "expires_at": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "promptpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "sepa_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct({}).optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "sofort": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "us_bank_account": t.union(
                            [
                                t.struct(
                                    {
                                        "financial_connections": t.struct(
                                            {
                                                "permissions": t.array(
                                                    t.string()
                                                ).optional(),
                                                "return_url": t.string().optional(),
                                            }
                                        ).optional(),
                                        "networks": t.struct(
                                            {
                                                "requested": t.array(
                                                    t.string()
                                                ).optional()
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "wechat_pay": t.union(
                            [
                                t.struct(
                                    {
                                        "app_id": t.string().optional(),
                                        "client": t.string(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "payment_method_types": t.array(t.string()).optional(),
                "radar_options": t.struct(
                    {"session": t.string().optional()}
                ).optional(),
                "receipt_email": t.string().optional(),
                "return_url": t.string().optional(),
                "setup_future_usage": t.string().optional(),
                "shipping": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ),
                        "carrier": t.string().optional(),
                        "name": t.string(),
                        "phone": t.string().optional(),
                        "tracking_number": t.string().optional(),
                    }
                ).optional(),
                "statement_descriptor": t.string().optional(),
                "statement_descriptor_suffix": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional(), "destination": t.string()}
                ).optional(),
                "transfer_group": t.string().optional(),
                "use_stripe_sdk": t.boolean().optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "application_fee_amount",
            "automatic_payment_methods",
            "capture_method",
            "confirm",
            "confirmation_method",
            "currency",
            "customer",
            "description",
            "error_on_requires_action",
            "expand",
            "mandate",
            "mandate_data",
            "metadata",
            "off_session",
            "on_behalf_of",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "payment_method_types",
            "radar_options",
            "receipt_email",
            "return_url",
            "setup_future_usage",
            "shipping",
            "statement_descriptor",
            "statement_descriptor_suffix",
            "transfer_data",
            "transfer_group",
            "use_stripe_sdk",
        ),
    )
    functions["GetPaymentIntentsSearch"] = spec3_sdk.get(
        "/v1/payment_intents/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_intent"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetPaymentIntentsIntent"] = spec3_sdk.get(
        "/v1/payment_intents/{intent}",
        t.struct(
            {
                "client_secret": t.string(),
                "expand": t.array(t.string()),
                "intent": t.string(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentIntentsIntent"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}",
        t.struct(
            {
                "intent": t.string(),
                "amount": t.integer().optional(),
                "application_fee_amount": t.union([t.integer(), t.string()]).optional(),
                "capture_method": t.string().optional(),
                "currency": t.string().optional(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct(
                                            {
                                                "custom_mandate_url": t.union(
                                                    [t.string(), t.string()]
                                                ).optional(),
                                                "interval_description": t.string().optional(),
                                                "payment_schedule": t.string().optional(),
                                                "transaction_type": t.string().optional(),
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "affirm": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "afterpay_clearpay": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "alipay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "au_becs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bacs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bancontact": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "blik": t.union(
                            [t.struct({"code": t.string().optional()}), t.string()]
                        ).optional(),
                        "boleto": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "cvc_token": t.string().optional(),
                                        "installments": t.struct(
                                            {
                                                "enabled": t.boolean().optional(),
                                                "plan": t.union(
                                                    [
                                                        t.struct(
                                                            {
                                                                "count": t.integer(),
                                                                "interval": t.string(),
                                                                "type": t.string(),
                                                            }
                                                        ),
                                                        t.string(),
                                                    ]
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "mandate_options": t.struct(
                                            {
                                                "amount": t.integer(),
                                                "amount_type": t.string(),
                                                "description": t.string().optional(),
                                                "end_date": t.integer().optional(),
                                                "interval": t.string(),
                                                "interval_count": t.integer().optional(),
                                                "reference": t.string(),
                                                "start_date": t.integer(),
                                                "supported_types": t.array(
                                                    t.string()
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "moto": t.boolean().optional(),
                                        "network": t.string().optional(),
                                        "request_three_d_secure": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "statement_descriptor_suffix_kana": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "statement_descriptor_suffix_kanji": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card_present": t.union(
                            [
                                t.struct(
                                    {
                                        "request_extended_authorization": t.boolean().optional(),
                                        "request_incremental_authorization_support": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "cashapp": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "customer_balance": t.union(
                            [
                                t.struct(
                                    {
                                        "bank_transfer": t.struct(
                                            {
                                                "eu_bank_transfer": t.struct(
                                                    {"country": t.string()}
                                                ).optional(),
                                                "requested_address_types": t.array(
                                                    t.string()
                                                ).optional(),
                                                "type": t.string(),
                                            }
                                        ).optional(),
                                        "funding_type": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "eps": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "fpx": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "giropay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "grabpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "ideal": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "interac_present": t.union(
                            [t.struct({}), t.string()]
                        ).optional(),
                        "klarna": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "konbini": t.union(
                            [
                                t.struct(
                                    {
                                        "confirmation_number": t.string().optional(),
                                        "expires_after_days": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "expires_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "product_description": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "link": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "persistent_token": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "oxxo": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "p24": t.union(
                            [
                                t.struct(
                                    {
                                        "setup_future_usage": t.string().optional(),
                                        "tos_shown_and_accepted": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "paynow": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "paypal": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "risk_correlation_id": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "pix": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_seconds": t.integer().optional(),
                                        "expires_at": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "promptpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "sepa_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct({}).optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "sofort": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "us_bank_account": t.union(
                            [
                                t.struct(
                                    {
                                        "financial_connections": t.struct(
                                            {
                                                "permissions": t.array(
                                                    t.string()
                                                ).optional(),
                                                "return_url": t.string().optional(),
                                            }
                                        ).optional(),
                                        "networks": t.struct(
                                            {
                                                "requested": t.array(
                                                    t.string()
                                                ).optional()
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "wechat_pay": t.union(
                            [
                                t.struct(
                                    {
                                        "app_id": t.string().optional(),
                                        "client": t.string(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "payment_method_types": t.array(t.string()).optional(),
                "receipt_email": t.union([t.string(), t.string()]).optional(),
                "setup_future_usage": t.string().optional(),
                "shipping": t.union(
                    [
                        t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "carrier": t.string().optional(),
                                "name": t.string(),
                                "phone": t.string().optional(),
                                "tracking_number": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "statement_descriptor": t.string().optional(),
                "statement_descriptor_suffix": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional()}
                ).optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "application_fee_amount",
            "capture_method",
            "currency",
            "customer",
            "description",
            "expand",
            "metadata",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "payment_method_types",
            "receipt_email",
            "setup_future_usage",
            "shipping",
            "statement_descriptor",
            "statement_descriptor_suffix",
            "transfer_data",
            "transfer_group",
        ),
    )
    functions["PostPaymentIntentsIntentApplyCustomerBalance"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/apply_customer_balance",
        t.struct(
            {
                "intent": t.string(),
                "amount": t.integer().optional(),
                "currency": t.string().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "currency", "expand"),
    )
    functions["PostPaymentIntentsIntentCancel"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/cancel",
        t.struct(
            {
                "intent": t.string(),
                "cancellation_reason": t.string().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("cancellation_reason", "expand"),
    )
    functions["PostPaymentIntentsIntentCapture"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/capture",
        t.struct(
            {
                "intent": t.string(),
                "amount_to_capture": t.integer().optional(),
                "application_fee_amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "statement_descriptor": t.string().optional(),
                "statement_descriptor_suffix": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount_to_capture",
            "application_fee_amount",
            "expand",
            "metadata",
            "statement_descriptor",
            "statement_descriptor_suffix",
            "transfer_data",
        ),
    )
    functions["PostPaymentIntentsIntentConfirm"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/confirm",
        t.struct(
            {
                "intent": t.string(),
                "capture_method": t.string().optional(),
                "error_on_requires_action": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "mandate": t.string().optional(),
                "mandate_data": t.union(
                    [
                        t.struct(
                            {
                                "customer_acceptance": t.struct(
                                    {
                                        "accepted_at": t.integer().optional(),
                                        "offline": t.struct({}).optional(),
                                        "online": t.struct(
                                            {
                                                "ip_address": t.string(),
                                                "user_agent": t.string(),
                                            }
                                        ).optional(),
                                        "type": t.string(),
                                    }
                                )
                            }
                        ),
                        t.struct(
                            {
                                "customer_acceptance": t.struct(
                                    {
                                        "online": t.struct(
                                            {
                                                "ip_address": t.string().optional(),
                                                "user_agent": t.string().optional(),
                                            }
                                        ),
                                        "type": t.string(),
                                    }
                                )
                            }
                        ),
                    ]
                ).optional(),
                "off_session": t.union([t.boolean(), t.string()]).optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct(
                                            {
                                                "custom_mandate_url": t.union(
                                                    [t.string(), t.string()]
                                                ).optional(),
                                                "interval_description": t.string().optional(),
                                                "payment_schedule": t.string().optional(),
                                                "transaction_type": t.string().optional(),
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "affirm": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "afterpay_clearpay": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "alipay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "au_becs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bacs_debit": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "bancontact": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "blik": t.union(
                            [t.struct({"code": t.string().optional()}), t.string()]
                        ).optional(),
                        "boleto": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "cvc_token": t.string().optional(),
                                        "installments": t.struct(
                                            {
                                                "enabled": t.boolean().optional(),
                                                "plan": t.union(
                                                    [
                                                        t.struct(
                                                            {
                                                                "count": t.integer(),
                                                                "interval": t.string(),
                                                                "type": t.string(),
                                                            }
                                                        ),
                                                        t.string(),
                                                    ]
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "mandate_options": t.struct(
                                            {
                                                "amount": t.integer(),
                                                "amount_type": t.string(),
                                                "description": t.string().optional(),
                                                "end_date": t.integer().optional(),
                                                "interval": t.string(),
                                                "interval_count": t.integer().optional(),
                                                "reference": t.string(),
                                                "start_date": t.integer(),
                                                "supported_types": t.array(
                                                    t.string()
                                                ).optional(),
                                            }
                                        ).optional(),
                                        "moto": t.boolean().optional(),
                                        "network": t.string().optional(),
                                        "request_three_d_secure": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "statement_descriptor_suffix_kana": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "statement_descriptor_suffix_kanji": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "card_present": t.union(
                            [
                                t.struct(
                                    {
                                        "request_extended_authorization": t.boolean().optional(),
                                        "request_incremental_authorization_support": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "cashapp": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "customer_balance": t.union(
                            [
                                t.struct(
                                    {
                                        "bank_transfer": t.struct(
                                            {
                                                "eu_bank_transfer": t.struct(
                                                    {"country": t.string()}
                                                ).optional(),
                                                "requested_address_types": t.array(
                                                    t.string()
                                                ).optional(),
                                                "type": t.string(),
                                            }
                                        ).optional(),
                                        "funding_type": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "eps": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "fpx": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "giropay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "grabpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "ideal": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "interac_present": t.union(
                            [t.struct({}), t.string()]
                        ).optional(),
                        "klarna": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "konbini": t.union(
                            [
                                t.struct(
                                    {
                                        "confirmation_number": t.string().optional(),
                                        "expires_after_days": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "expires_at": t.union(
                                            [t.integer(), t.string()]
                                        ).optional(),
                                        "product_description": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "link": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "persistent_token": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "oxxo": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_days": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "p24": t.union(
                            [
                                t.struct(
                                    {
                                        "setup_future_usage": t.string().optional(),
                                        "tos_shown_and_accepted": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "paynow": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "paypal": t.union(
                            [
                                t.struct(
                                    {
                                        "capture_method": t.string().optional(),
                                        "preferred_locale": t.string().optional(),
                                        "reference": t.string().optional(),
                                        "risk_correlation_id": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "pix": t.union(
                            [
                                t.struct(
                                    {
                                        "expires_after_seconds": t.integer().optional(),
                                        "expires_at": t.integer().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "promptpay": t.union(
                            [
                                t.struct({"setup_future_usage": t.string().optional()}),
                                t.string(),
                            ]
                        ).optional(),
                        "sepa_debit": t.union(
                            [
                                t.struct(
                                    {
                                        "mandate_options": t.struct({}).optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "sofort": t.union(
                            [
                                t.struct(
                                    {
                                        "preferred_language": t.string().optional(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "us_bank_account": t.union(
                            [
                                t.struct(
                                    {
                                        "financial_connections": t.struct(
                                            {
                                                "permissions": t.array(
                                                    t.string()
                                                ).optional(),
                                                "return_url": t.string().optional(),
                                            }
                                        ).optional(),
                                        "networks": t.struct(
                                            {
                                                "requested": t.array(
                                                    t.string()
                                                ).optional()
                                            }
                                        ).optional(),
                                        "setup_future_usage": t.string().optional(),
                                        "verification_method": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "wechat_pay": t.union(
                            [
                                t.struct(
                                    {
                                        "app_id": t.string().optional(),
                                        "client": t.string(),
                                        "setup_future_usage": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "radar_options": t.struct(
                    {"session": t.string().optional()}
                ).optional(),
                "receipt_email": t.union([t.string(), t.string()]).optional(),
                "return_url": t.string().optional(),
                "setup_future_usage": t.string().optional(),
                "shipping": t.union(
                    [
                        t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "carrier": t.string().optional(),
                                "name": t.string(),
                                "phone": t.string().optional(),
                                "tracking_number": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "use_stripe_sdk": t.boolean().optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "capture_method",
            "error_on_requires_action",
            "expand",
            "mandate",
            "mandate_data",
            "off_session",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "radar_options",
            "receipt_email",
            "return_url",
            "setup_future_usage",
            "shipping",
            "use_stripe_sdk",
        ),
    )
    functions["PostPaymentIntentsIntentIncrementAuthorization"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/increment_authorization",
        t.struct(
            {
                "intent": t.string(),
                "amount": t.integer(),
                "application_fee_amount": t.integer().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "statement_descriptor": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "application_fee_amount",
            "description",
            "expand",
            "metadata",
            "statement_descriptor",
            "transfer_data",
        ),
    )
    functions["PostPaymentIntentsIntentVerifyMicrodeposits"] = spec3_sdk.post(
        "/v1/payment_intents/{intent}/verify_microdeposits",
        t.struct(
            {
                "intent": t.string(),
                "amounts": t.array(t.integer()).optional(),
                "descriptor_code": t.string().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["payment_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amounts", "descriptor_code", "expand"),
    )
    functions["GetPaymentLinks"] = spec3_sdk.get(
        "/v1/payment_links",
        t.struct(
            {
                "active": t.boolean(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_link"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentLinks"] = spec3_sdk.post(
        "/v1/payment_links",
        t.struct(
            {
                "after_completion": t.struct(
                    {
                        "hosted_confirmation": t.struct(
                            {"custom_message": t.string().optional()}
                        ).optional(),
                        "redirect": t.struct({"url": t.string()}).optional(),
                        "type": t.string(),
                    }
                ).optional(),
                "allow_promotion_codes": t.boolean().optional(),
                "application_fee_amount": t.integer().optional(),
                "application_fee_percent": t.number().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "billing_address_collection": t.string().optional(),
                "consent_collection": t.struct(
                    {
                        "promotions": t.string().optional(),
                        "terms_of_service": t.string().optional(),
                    }
                ).optional(),
                "currency": t.string().optional(),
                "custom_fields": t.array(
                    t.struct(
                        {
                            "dropdown": t.struct(
                                {
                                    "options": t.array(
                                        t.struct(
                                            {"label": t.string(), "value": t.string()}
                                        )
                                    )
                                }
                            ).optional(),
                            "key": t.string(),
                            "label": t.struct(
                                {"custom": t.string(), "type": t.string()}
                            ),
                            "optional": t.boolean().optional(),
                            "type": t.string(),
                        }
                    )
                ).optional(),
                "custom_text": t.struct(
                    {
                        "shipping_address": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                        "submit": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "customer_creation": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "invoice_creation": t.struct(
                    {
                        "enabled": t.boolean(),
                        "invoice_data": t.struct(
                            {
                                "account_tax_ids": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "custom_fields": t.union(
                                    [
                                        t.array(
                                            t.struct(
                                                {
                                                    "name": t.string(),
                                                    "value": t.string(),
                                                }
                                            )
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "description": t.string().optional(),
                                "footer": t.string().optional(),
                                "metadata": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "rendering_options": t.union(
                                    [
                                        t.struct(
                                            {
                                                "amount_tax_display": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "adjustable_quantity": t.struct(
                                {
                                    "enabled": t.boolean(),
                                    "maximum": t.integer().optional(),
                                    "minimum": t.integer().optional(),
                                }
                            ).optional(),
                            "price": t.string(),
                            "quantity": t.integer(),
                        }
                    )
                ),
                "metadata": t.struct({}).optional(),
                "on_behalf_of": t.string().optional(),
                "payment_intent_data": t.struct(
                    {
                        "capture_method": t.string().optional(),
                        "setup_future_usage": t.string().optional(),
                    }
                ).optional(),
                "payment_method_collection": t.string().optional(),
                "payment_method_types": t.array(t.string()).optional(),
                "phone_number_collection": t.struct(
                    {"enabled": t.boolean()}
                ).optional(),
                "shipping_address_collection": t.struct(
                    {"allowed_countries": t.array(t.string())}
                ).optional(),
                "shipping_options": t.array(
                    t.struct({"shipping_rate": t.string().optional()})
                ).optional(),
                "submit_type": t.string().optional(),
                "subscription_data": t.struct(
                    {
                        "description": t.string().optional(),
                        "trial_period_days": t.integer().optional(),
                    }
                ).optional(),
                "tax_id_collection": t.struct({"enabled": t.boolean()}).optional(),
                "transfer_data": t.struct(
                    {"amount": t.integer().optional(), "destination": t.string()}
                ).optional(),
            }
        ),
        t.proxy(renames["payment_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "after_completion",
            "allow_promotion_codes",
            "application_fee_amount",
            "application_fee_percent",
            "automatic_tax",
            "billing_address_collection",
            "consent_collection",
            "currency",
            "custom_fields",
            "custom_text",
            "customer_creation",
            "expand",
            "invoice_creation",
            "line_items",
            "metadata",
            "on_behalf_of",
            "payment_intent_data",
            "payment_method_collection",
            "payment_method_types",
            "phone_number_collection",
            "shipping_address_collection",
            "shipping_options",
            "submit_type",
            "subscription_data",
            "tax_id_collection",
            "transfer_data",
        ),
    )
    functions["GetPaymentLinksPaymentLink"] = spec3_sdk.get(
        "/v1/payment_links/{payment_link}",
        t.struct({"expand": t.array(t.string()), "payment_link": t.string()}),
        t.proxy(renames["payment_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentLinksPaymentLink"] = spec3_sdk.post(
        "/v1/payment_links/{payment_link}",
        t.struct(
            {
                "payment_link": t.string(),
                "active": t.boolean().optional(),
                "after_completion": t.struct(
                    {
                        "hosted_confirmation": t.struct(
                            {"custom_message": t.string().optional()}
                        ).optional(),
                        "redirect": t.struct({"url": t.string()}).optional(),
                        "type": t.string(),
                    }
                ).optional(),
                "allow_promotion_codes": t.boolean().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "billing_address_collection": t.string().optional(),
                "custom_fields": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "dropdown": t.struct(
                                        {
                                            "options": t.array(
                                                t.struct(
                                                    {
                                                        "label": t.string(),
                                                        "value": t.string(),
                                                    }
                                                )
                                            )
                                        }
                                    ).optional(),
                                    "key": t.string(),
                                    "label": t.struct(
                                        {"custom": t.string(), "type": t.string()}
                                    ),
                                    "optional": t.boolean().optional(),
                                    "type": t.string(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "custom_text": t.struct(
                    {
                        "shipping_address": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                        "submit": t.union(
                            [t.struct({"message": t.string()}), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "customer_creation": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "invoice_creation": t.struct(
                    {
                        "enabled": t.boolean(),
                        "invoice_data": t.struct(
                            {
                                "account_tax_ids": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "custom_fields": t.union(
                                    [
                                        t.array(
                                            t.struct(
                                                {
                                                    "name": t.string(),
                                                    "value": t.string(),
                                                }
                                            )
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "description": t.string().optional(),
                                "footer": t.string().optional(),
                                "metadata": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "rendering_options": t.union(
                                    [
                                        t.struct(
                                            {
                                                "amount_tax_display": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "adjustable_quantity": t.struct(
                                {
                                    "enabled": t.boolean(),
                                    "maximum": t.integer().optional(),
                                    "minimum": t.integer().optional(),
                                }
                            ).optional(),
                            "id": t.string(),
                            "quantity": t.integer().optional(),
                        }
                    )
                ).optional(),
                "metadata": t.struct({}).optional(),
                "payment_method_collection": t.string().optional(),
                "payment_method_types": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "shipping_address_collection": t.union(
                    [t.struct({"allowed_countries": t.array(t.string())}), t.string()]
                ).optional(),
            }
        ),
        t.proxy(renames["payment_link"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "after_completion",
            "allow_promotion_codes",
            "automatic_tax",
            "billing_address_collection",
            "custom_fields",
            "custom_text",
            "customer_creation",
            "expand",
            "invoice_creation",
            "line_items",
            "metadata",
            "payment_method_collection",
            "payment_method_types",
            "shipping_address_collection",
        ),
    )
    functions["GetPaymentLinksPaymentLinkLineItems"] = spec3_sdk.get(
        "/v1/payment_links/{payment_link}/line_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_link": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetPaymentMethods"] = spec3_sdk.get(
        "/v1/payment_methods",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payment_method"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentMethods"] = spec3_sdk.post(
        "/v1/payment_methods",
        t.struct(
            {
                "acss_debit": t.struct(
                    {
                        "account_number": t.string(),
                        "institution_number": t.string(),
                        "transit_number": t.string(),
                    }
                ).optional(),
                "affirm": t.struct({}).optional(),
                "afterpay_clearpay": t.struct({}).optional(),
                "alipay": t.struct({}).optional(),
                "au_becs_debit": t.struct(
                    {"account_number": t.string(), "bsb_number": t.string()}
                ).optional(),
                "bacs_debit": t.struct(
                    {
                        "account_number": t.string().optional(),
                        "sort_code": t.string().optional(),
                    }
                ).optional(),
                "bancontact": t.struct({}).optional(),
                "billing_details": t.struct(
                    {
                        "address": t.union(
                            [
                                t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "email": t.union([t.string(), t.string()]).optional(),
                        "name": t.string().optional(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
                "blik": t.struct({}).optional(),
                "boleto": t.struct({"tax_id": t.string()}).optional(),
                "card": t.union(
                    [
                        t.struct(
                            {
                                "cvc": t.string().optional(),
                                "exp_month": t.integer(),
                                "exp_year": t.integer(),
                                "number": t.string(),
                            }
                        ),
                        t.struct({"token": t.string()}),
                    ]
                ).optional(),
                "cashapp": t.struct({}).optional(),
                "customer": t.string().optional(),
                "customer_balance": t.struct({}).optional(),
                "eps": t.struct({"bank": t.string().optional()}).optional(),
                "expand": t.array(t.string()).optional(),
                "fpx": t.struct(
                    {"account_holder_type": t.string().optional(), "bank": t.string()}
                ).optional(),
                "giropay": t.struct({}).optional(),
                "grabpay": t.struct({}).optional(),
                "ideal": t.struct({"bank": t.string().optional()}).optional(),
                "interac_present": t.struct({}).optional(),
                "klarna": t.struct(
                    {
                        "dob": t.struct(
                            {
                                "day": t.integer(),
                                "month": t.integer(),
                                "year": t.integer(),
                            }
                        ).optional()
                    }
                ).optional(),
                "konbini": t.struct({}).optional(),
                "link": t.struct({}).optional(),
                "metadata": t.struct({}).optional(),
                "oxxo": t.struct({}).optional(),
                "p24": t.struct({"bank": t.string().optional()}).optional(),
                "payment_method": t.string().optional(),
                "paynow": t.struct({}).optional(),
                "paypal": t.struct({}).optional(),
                "pix": t.struct({}).optional(),
                "promptpay": t.struct({}).optional(),
                "radar_options": t.struct(
                    {"session": t.string().optional()}
                ).optional(),
                "sepa_debit": t.struct({"iban": t.string()}).optional(),
                "sofort": t.struct({"country": t.string()}).optional(),
                "type": t.string().optional(),
                "us_bank_account": t.struct(
                    {
                        "account_holder_type": t.string().optional(),
                        "account_number": t.string().optional(),
                        "account_type": t.string().optional(),
                        "financial_connections_account": t.string().optional(),
                        "routing_number": t.string().optional(),
                    }
                ).optional(),
                "wechat_pay": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "billing_details",
            "blik",
            "boleto",
            "card",
            "cashapp",
            "customer",
            "customer_balance",
            "eps",
            "expand",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "interac_present",
            "klarna",
            "konbini",
            "link",
            "metadata",
            "oxxo",
            "p24",
            "payment_method",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "radar_options",
            "sepa_debit",
            "sofort",
            "type",
            "us_bank_account",
            "wechat_pay",
        ),
    )
    functions["GetPaymentMethodsPaymentMethod"] = spec3_sdk.get(
        "/v1/payment_methods/{payment_method}",
        t.struct({"expand": t.array(t.string()), "payment_method": t.string()}),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPaymentMethodsPaymentMethod"] = spec3_sdk.post(
        "/v1/payment_methods/{payment_method}",
        t.struct(
            {
                "payment_method": t.string(),
                "acss_debit": t.struct({}).optional(),
                "affirm": t.struct({}).optional(),
                "au_becs_debit": t.struct({}).optional(),
                "bacs_debit": t.struct({}).optional(),
                "billing_details": t.struct(
                    {
                        "address": t.union(
                            [
                                t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "email": t.union([t.string(), t.string()]).optional(),
                        "name": t.string().optional(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
                "blik": t.struct({}).optional(),
                "card": t.struct(
                    {
                        "exp_month": t.integer().optional(),
                        "exp_year": t.integer().optional(),
                    }
                ).optional(),
                "cashapp": t.struct({}).optional(),
                "expand": t.array(t.string()).optional(),
                "link": t.struct({}).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "sepa_debit": t.struct({}).optional(),
                "us_bank_account": t.struct(
                    {"account_holder_type": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "acss_debit",
            "affirm",
            "au_becs_debit",
            "bacs_debit",
            "billing_details",
            "blik",
            "card",
            "cashapp",
            "expand",
            "link",
            "metadata",
            "sepa_debit",
            "us_bank_account",
        ),
    )
    functions["PostPaymentMethodsPaymentMethodAttach"] = spec3_sdk.post(
        "/v1/payment_methods/{payment_method}/attach",
        t.struct(
            {
                "payment_method": t.string(),
                "customer": t.string(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("customer", "expand"),
    )
    functions["PostPaymentMethodsPaymentMethodDetach"] = spec3_sdk.post(
        "/v1/payment_methods/{payment_method}/detach",
        t.struct(
            {"payment_method": t.string(), "expand": t.array(t.string()).optional()}
        ),
        t.proxy(renames["payment_method"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetPayouts"] = spec3_sdk.get(
        "/v1/payouts",
        t.struct(
            {
                "arrival_date": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "destination": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["payout"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPayouts"] = spec3_sdk.post(
        "/v1/payouts",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "destination": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "method": t.string().optional(),
                "source_type": t.string().optional(),
                "statement_descriptor": t.string().optional(),
            }
        ),
        t.proxy(renames["payout"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "destination",
            "expand",
            "metadata",
            "method",
            "source_type",
            "statement_descriptor",
        ),
    )
    functions["GetPayoutsPayout"] = spec3_sdk.get(
        "/v1/payouts/{payout}",
        t.struct({"expand": t.array(t.string()), "payout": t.string()}),
        t.proxy(renames["payout"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPayoutsPayout"] = spec3_sdk.post(
        "/v1/payouts/{payout}",
        t.struct(
            {
                "payout": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["payout"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["PostPayoutsPayoutCancel"] = spec3_sdk.post(
        "/v1/payouts/{payout}/cancel",
        t.struct({"payout": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["payout"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostPayoutsPayoutReverse"] = spec3_sdk.post(
        "/v1/payouts/{payout}/reverse",
        t.struct(
            {
                "payout": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
            }
        ),
        t.proxy(renames["payout"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetPlans"] = spec3_sdk.get(
        "/v1/plans",
        t.struct(
            {
                "active": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "product": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["plan"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPlans"] = spec3_sdk.post(
        "/v1/plans",
        t.struct(
            {
                "active": t.boolean().optional(),
                "aggregate_usage": t.string().optional(),
                "amount": t.integer().optional(),
                "amount_decimal": t.string().optional(),
                "billing_scheme": t.string().optional(),
                "currency": t.string(),
                "expand": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "interval": t.string(),
                "interval_count": t.integer().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "nickname": t.string().optional(),
                "product": t.union(
                    [
                        t.struct(
                            {
                                "active": t.boolean().optional(),
                                "id": t.string().optional(),
                                "metadata": t.struct({}).optional(),
                                "name": t.string(),
                                "statement_descriptor": t.string().optional(),
                                "tax_code": t.string().optional(),
                                "unit_label": t.string().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "tiers": t.array(
                    t.struct(
                        {
                            "flat_amount": t.integer().optional(),
                            "flat_amount_decimal": t.string().optional(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                            "up_to": t.union([t.string(), t.integer()]),
                        }
                    )
                ).optional(),
                "tiers_mode": t.string().optional(),
                "transform_usage": t.struct(
                    {"divide_by": t.integer(), "round": t.string()}
                ).optional(),
                "trial_period_days": t.integer().optional(),
                "usage_type": t.string().optional(),
            }
        ),
        t.proxy(renames["plan"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "aggregate_usage",
            "amount",
            "amount_decimal",
            "billing_scheme",
            "currency",
            "expand",
            "id",
            "interval",
            "interval_count",
            "metadata",
            "nickname",
            "product",
            "tiers",
            "tiers_mode",
            "transform_usage",
            "trial_period_days",
            "usage_type",
        ),
    )
    functions["DeletePlansPlan"] = spec3_sdk.delete(
        "/v1/plans/{plan}",
        t.struct({"plan": t.string()}),
        t.proxy(renames["deleted_plan"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetPlansPlan"] = spec3_sdk.get(
        "/v1/plans/{plan}",
        t.struct({"expand": t.array(t.string()), "plan": t.string()}),
        t.proxy(renames["plan"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPlansPlan"] = spec3_sdk.post(
        "/v1/plans/{plan}",
        t.struct(
            {
                "plan": t.string(),
                "active": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "nickname": t.string().optional(),
                "product": t.string().optional(),
                "trial_period_days": t.integer().optional(),
            }
        ),
        t.proxy(renames["plan"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "expand",
            "metadata",
            "nickname",
            "product",
            "trial_period_days",
        ),
    )
    functions["GetPrices"] = spec3_sdk.get(
        "/v1/prices",
        t.struct(
            {
                "active": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "currency": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "lookup_keys": t.array(t.string()),
                "product": t.string(),
                "recurring": t.struct(
                    {
                        "interval": t.string().optional(),
                        "usage_type": t.string().optional(),
                    }
                ),
                "starting_after": t.string(),
                "type": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["price"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPrices"] = spec3_sdk.post(
        "/v1/prices",
        t.struct(
            {
                "active": t.boolean().optional(),
                "billing_scheme": t.string().optional(),
                "currency": t.string(),
                "currency_options": t.struct({}).optional(),
                "custom_unit_amount": t.struct(
                    {
                        "enabled": t.boolean(),
                        "maximum": t.integer().optional(),
                        "minimum": t.integer().optional(),
                        "preset": t.integer().optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "lookup_key": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "nickname": t.string().optional(),
                "product": t.string().optional(),
                "product_data": t.struct(
                    {
                        "active": t.boolean().optional(),
                        "id": t.string().optional(),
                        "metadata": t.struct({}).optional(),
                        "name": t.string(),
                        "statement_descriptor": t.string().optional(),
                        "tax_code": t.string().optional(),
                        "unit_label": t.string().optional(),
                    }
                ).optional(),
                "recurring": t.struct(
                    {
                        "aggregate_usage": t.string().optional(),
                        "interval": t.string(),
                        "interval_count": t.integer().optional(),
                        "trial_period_days": t.integer().optional(),
                        "usage_type": t.string().optional(),
                    }
                ).optional(),
                "tax_behavior": t.string().optional(),
                "tiers": t.array(
                    t.struct(
                        {
                            "flat_amount": t.integer().optional(),
                            "flat_amount_decimal": t.string().optional(),
                            "unit_amount": t.integer().optional(),
                            "unit_amount_decimal": t.string().optional(),
                            "up_to": t.union([t.string(), t.integer()]),
                        }
                    )
                ).optional(),
                "tiers_mode": t.string().optional(),
                "transfer_lookup_key": t.boolean().optional(),
                "transform_quantity": t.struct(
                    {"divide_by": t.integer(), "round": t.string()}
                ).optional(),
                "unit_amount": t.integer().optional(),
                "unit_amount_decimal": t.string().optional(),
            }
        ),
        t.proxy(renames["price"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "billing_scheme",
            "currency",
            "currency_options",
            "custom_unit_amount",
            "expand",
            "lookup_key",
            "metadata",
            "nickname",
            "product",
            "product_data",
            "recurring",
            "tax_behavior",
            "tiers",
            "tiers_mode",
            "transfer_lookup_key",
            "transform_quantity",
            "unit_amount",
            "unit_amount_decimal",
        ),
    )
    functions["GetPricesSearch"] = spec3_sdk.get(
        "/v1/prices/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["price"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetPricesPrice"] = spec3_sdk.get(
        "/v1/prices/{price}",
        t.struct({"expand": t.array(t.string()), "price": t.string()}),
        t.proxy(renames["price"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPricesPrice"] = spec3_sdk.post(
        "/v1/prices/{price}",
        t.struct(
            {
                "price": t.string(),
                "active": t.boolean().optional(),
                "currency_options": t.union([t.struct({}), t.string()]).optional(),
                "expand": t.array(t.string()).optional(),
                "lookup_key": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "nickname": t.string().optional(),
                "recurring": t.union(
                    [
                        t.struct({"trial_period_days": t.integer().optional()}),
                        t.string(),
                    ]
                ).optional(),
                "tax_behavior": t.string().optional(),
                "transfer_lookup_key": t.boolean().optional(),
            }
        ),
        t.proxy(renames["price"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "currency_options",
            "expand",
            "lookup_key",
            "metadata",
            "nickname",
            "recurring",
            "tax_behavior",
            "transfer_lookup_key",
        ),
    )
    functions["GetProducts"] = spec3_sdk.get(
        "/v1/products",
        t.struct(
            {
                "active": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "ids": t.array(t.string()),
                "limit": t.integer(),
                "shippable": t.boolean(),
                "starting_after": t.string(),
                "type": t.string(),
                "url": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["product"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostProducts"] = spec3_sdk.post(
        "/v1/products",
        t.struct(
            {
                "active": t.boolean().optional(),
                "attributes": t.array(t.string()).optional(),
                "caption": t.string().optional(),
                "deactivate_on": t.array(t.string()).optional(),
                "default_price_data": t.struct(
                    {
                        "currency": t.string(),
                        "currency_options": t.struct({}).optional(),
                        "recurring": t.struct(
                            {
                                "interval": t.string(),
                                "interval_count": t.integer().optional(),
                            }
                        ).optional(),
                        "tax_behavior": t.string().optional(),
                        "unit_amount": t.integer().optional(),
                        "unit_amount_decimal": t.string().optional(),
                    }
                ).optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "images": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "name": t.string(),
                "package_dimensions": t.struct(
                    {
                        "height": t.number(),
                        "length": t.number(),
                        "weight": t.number(),
                        "width": t.number(),
                    }
                ).optional(),
                "shippable": t.boolean().optional(),
                "statement_descriptor": t.string().optional(),
                "tax_code": t.string().optional(),
                "type": t.string().optional(),
                "unit_label": t.string().optional(),
                "url": t.string().optional(),
            }
        ),
        t.proxy(renames["product"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "attributes",
            "caption",
            "deactivate_on",
            "default_price_data",
            "description",
            "expand",
            "id",
            "images",
            "metadata",
            "name",
            "package_dimensions",
            "shippable",
            "statement_descriptor",
            "tax_code",
            "type",
            "unit_label",
            "url",
        ),
    )
    functions["GetProductsSearch"] = spec3_sdk.get(
        "/v1/products/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["product"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["DeleteProductsId"] = spec3_sdk.delete(
        "/v1/products/{id}",
        t.struct({"id": t.string()}),
        t.proxy(renames["deleted_product"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetProductsId"] = spec3_sdk.get(
        "/v1/products/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["product"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostProductsId"] = spec3_sdk.post(
        "/v1/products/{id}",
        t.struct(
            {
                "id": t.string(),
                "active": t.boolean().optional(),
                "attributes": t.union([t.array(t.string()), t.string()]).optional(),
                "caption": t.string().optional(),
                "deactivate_on": t.array(t.string()).optional(),
                "default_price": t.string().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "images": t.union([t.array(t.string()), t.string()]).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "name": t.string().optional(),
                "package_dimensions": t.union(
                    [
                        t.struct(
                            {
                                "height": t.number(),
                                "length": t.number(),
                                "weight": t.number(),
                                "width": t.number(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "shippable": t.boolean().optional(),
                "statement_descriptor": t.string().optional(),
                "tax_code": t.union([t.string(), t.string()]).optional(),
                "unit_label": t.string().optional(),
                "url": t.union([t.string(), t.string()]).optional(),
            }
        ),
        t.proxy(renames["product"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "attributes",
            "caption",
            "deactivate_on",
            "default_price",
            "description",
            "expand",
            "images",
            "metadata",
            "name",
            "package_dimensions",
            "shippable",
            "statement_descriptor",
            "tax_code",
            "unit_label",
            "url",
        ),
    )
    functions["GetPromotionCodes"] = spec3_sdk.get(
        "/v1/promotion_codes",
        t.struct(
            {
                "active": t.boolean(),
                "code": t.string(),
                "coupon": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["promotion_code"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPromotionCodes"] = spec3_sdk.post(
        "/v1/promotion_codes",
        t.struct(
            {
                "active": t.boolean().optional(),
                "code": t.string().optional(),
                "coupon": t.string(),
                "customer": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "max_redemptions": t.integer().optional(),
                "metadata": t.struct({}).optional(),
                "restrictions": t.struct(
                    {
                        "currency_options": t.struct({}).optional(),
                        "first_time_transaction": t.boolean().optional(),
                        "minimum_amount": t.integer().optional(),
                        "minimum_amount_currency": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["promotion_code"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "code",
            "coupon",
            "customer",
            "expand",
            "expires_at",
            "max_redemptions",
            "metadata",
            "restrictions",
        ),
    )
    functions["GetPromotionCodesPromotionCode"] = spec3_sdk.get(
        "/v1/promotion_codes/{promotion_code}",
        t.struct({"expand": t.array(t.string()), "promotion_code": t.string()}),
        t.proxy(renames["promotion_code"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostPromotionCodesPromotionCode"] = spec3_sdk.post(
        "/v1/promotion_codes/{promotion_code}",
        t.struct(
            {
                "promotion_code": t.string(),
                "active": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "restrictions": t.struct(
                    {"currency_options": t.struct({}).optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["promotion_code"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("active", "expand", "metadata", "restrictions"),
    )
    functions["GetQuotes"] = spec3_sdk.get(
        "/v1/quotes",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
                "test_clock": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["quote"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostQuotes"] = spec3_sdk.post(
        "/v1/quotes",
        t.struct(
            {
                "application_fee_amount": t.union([t.integer(), t.string()]).optional(),
                "application_fee_percent": t.union([t.number(), t.string()]).optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "collection_method": t.string().optional(),
                "customer": t.string().optional(),
                "default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "description": t.string().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "footer": t.string().optional(),
                "from_quote": t.struct(
                    {"is_revision": t.boolean().optional(), "quote": t.string()}
                ).optional(),
                "header": t.string().optional(),
                "invoice_settings": t.struct(
                    {"days_until_due": t.integer().optional()}
                ).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ).optional(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "metadata": t.struct({}).optional(),
                "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                "subscription_data": t.struct(
                    {
                        "description": t.string().optional(),
                        "effective_date": t.union(
                            [t.string(), t.integer(), t.string()]
                        ).optional(),
                        "trial_period_days": t.union(
                            [t.integer(), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "test_clock": t.string().optional(),
                "transfer_data": t.union(
                    [
                        t.struct(
                            {
                                "amount": t.integer().optional(),
                                "amount_percent": t.number().optional(),
                                "destination": t.string(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
            }
        ),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "application_fee_amount",
            "application_fee_percent",
            "automatic_tax",
            "collection_method",
            "customer",
            "default_tax_rates",
            "description",
            "discounts",
            "expand",
            "expires_at",
            "footer",
            "from_quote",
            "header",
            "invoice_settings",
            "line_items",
            "metadata",
            "on_behalf_of",
            "subscription_data",
            "test_clock",
            "transfer_data",
        ),
    )
    functions["GetQuotesQuote"] = spec3_sdk.get(
        "/v1/quotes/{quote}",
        t.struct({"expand": t.array(t.string()), "quote": t.string()}),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostQuotesQuote"] = spec3_sdk.post(
        "/v1/quotes/{quote}",
        t.struct(
            {
                "quote": t.string(),
                "application_fee_amount": t.union([t.integer(), t.string()]).optional(),
                "application_fee_percent": t.union([t.number(), t.string()]).optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "collection_method": t.string().optional(),
                "customer": t.string().optional(),
                "default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "description": t.string().optional(),
                "discounts": t.union(
                    [
                        t.array(
                            t.struct(
                                {
                                    "coupon": t.string().optional(),
                                    "discount": t.string().optional(),
                                }
                            )
                        ),
                        t.string(),
                    ]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
                "footer": t.string().optional(),
                "header": t.string().optional(),
                "invoice_settings": t.struct(
                    {"days_until_due": t.integer().optional()}
                ).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "id": t.string().optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ).optional(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "metadata": t.struct({}).optional(),
                "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                "subscription_data": t.struct(
                    {
                        "description": t.string().optional(),
                        "effective_date": t.union(
                            [t.string(), t.integer(), t.string()]
                        ).optional(),
                        "trial_period_days": t.union(
                            [t.integer(), t.string()]
                        ).optional(),
                    }
                ).optional(),
                "transfer_data": t.union(
                    [
                        t.struct(
                            {
                                "amount": t.integer().optional(),
                                "amount_percent": t.number().optional(),
                                "destination": t.string(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
            }
        ),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "application_fee_amount",
            "application_fee_percent",
            "automatic_tax",
            "collection_method",
            "customer",
            "default_tax_rates",
            "description",
            "discounts",
            "expand",
            "expires_at",
            "footer",
            "header",
            "invoice_settings",
            "line_items",
            "metadata",
            "on_behalf_of",
            "subscription_data",
            "transfer_data",
        ),
    )
    functions["PostQuotesQuoteAccept"] = spec3_sdk.post(
        "/v1/quotes/{quote}/accept",
        t.struct({"quote": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostQuotesQuoteCancel"] = spec3_sdk.post(
        "/v1/quotes/{quote}/cancel",
        t.struct({"quote": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetQuotesQuoteComputedUpfrontLineItems"] = spec3_sdk.get(
        "/v1/quotes/{quote}/computed_upfront_line_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "quote": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostQuotesQuoteFinalize"] = spec3_sdk.post(
        "/v1/quotes/{quote}/finalize",
        t.struct(
            {
                "quote": t.string(),
                "expand": t.array(t.string()).optional(),
                "expires_at": t.integer().optional(),
            }
        ),
        t.proxy(renames["quote"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "expires_at"),
    )
    functions["GetQuotesQuoteLineItems"] = spec3_sdk.get(
        "/v1/quotes/{quote}/line_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "quote": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarEarlyFraudWarnings"] = spec3_sdk.get(
        "/v1/radar/early_fraud_warnings",
        t.struct(
            {
                "charge": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_intent": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["radar.early_fraud_warning"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarEarlyFraudWarningsEarlyFraudWarning"] = spec3_sdk.get(
        "/v1/radar/early_fraud_warnings/{early_fraud_warning}",
        t.struct({"early_fraud_warning": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["radar.early_fraud_warning"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarValueListItems"] = spec3_sdk.get(
        "/v1/radar/value_list_items",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "value": t.string(),
                "value_list": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["radar.value_list_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostRadarValueListItems"] = spec3_sdk.post(
        "/v1/radar/value_list_items",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "value": t.string(),
                "value_list": t.string(),
            }
        ),
        t.proxy(renames["radar.value_list_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "value", "value_list"),
    )
    functions["DeleteRadarValueListItemsItem"] = spec3_sdk.delete(
        "/v1/radar/value_list_items/{item}",
        t.struct({"item": t.string()}),
        t.proxy(renames["deleted_radar.value_list_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarValueListItemsItem"] = spec3_sdk.get(
        "/v1/radar/value_list_items/{item}",
        t.struct({"expand": t.array(t.string()), "item": t.string()}),
        t.proxy(renames["radar.value_list_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarValueLists"] = spec3_sdk.get(
        "/v1/radar/value_lists",
        t.struct(
            {
                "alias": t.string(),
                "contains": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["radar.value_list"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostRadarValueLists"] = spec3_sdk.post(
        "/v1/radar/value_lists",
        t.struct(
            {
                "alias": t.string(),
                "expand": t.array(t.string()).optional(),
                "item_type": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "name": t.string(),
            }
        ),
        t.proxy(renames["radar.value_list"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("alias", "expand", "item_type", "metadata", "name"),
    )
    functions["DeleteRadarValueListsValueList"] = spec3_sdk.delete(
        "/v1/radar/value_lists/{value_list}",
        t.struct({"value_list": t.string()}),
        t.proxy(renames["deleted_radar.value_list"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetRadarValueListsValueList"] = spec3_sdk.get(
        "/v1/radar/value_lists/{value_list}",
        t.struct({"expand": t.array(t.string()), "value_list": t.string()}),
        t.proxy(renames["radar.value_list"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostRadarValueListsValueList"] = spec3_sdk.post(
        "/v1/radar/value_lists/{value_list}",
        t.struct(
            {
                "value_list": t.string(),
                "alias": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["radar.value_list"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("alias", "expand", "metadata", "name"),
    )
    functions["GetRefunds"] = spec3_sdk.get(
        "/v1/refunds",
        t.struct(
            {
                "charge": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_intent": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["refund"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostRefunds"] = spec3_sdk.post(
        "/v1/refunds",
        t.struct(
            {
                "amount": t.integer().optional(),
                "charge": t.string().optional(),
                "currency": t.string().optional(),
                "customer": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "instructions_email": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "origin": t.string().optional(),
                "payment_intent": t.string().optional(),
                "reason": t.string().optional(),
                "refund_application_fee": t.boolean().optional(),
                "reverse_transfer": t.boolean().optional(),
            }
        ),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "charge",
            "currency",
            "customer",
            "expand",
            "instructions_email",
            "metadata",
            "origin",
            "payment_intent",
            "reason",
            "refund_application_fee",
            "reverse_transfer",
        ),
    )
    functions["GetRefundsRefund"] = spec3_sdk.get(
        "/v1/refunds/{refund}",
        t.struct({"expand": t.array(t.string()), "refund": t.string()}),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostRefundsRefund"] = spec3_sdk.post(
        "/v1/refunds/{refund}",
        t.struct(
            {
                "refund": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["PostRefundsRefundCancel"] = spec3_sdk.post(
        "/v1/refunds/{refund}/cancel",
        t.struct({"refund": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetReportingReportRuns"] = spec3_sdk.get(
        "/v1/reporting/report_runs",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["reporting.report_run"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostReportingReportRuns"] = spec3_sdk.post(
        "/v1/reporting/report_runs",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "parameters": t.struct(
                    {
                        "columns": t.array(t.string()).optional(),
                        "connected_account": t.string().optional(),
                        "currency": t.string().optional(),
                        "interval_end": t.integer().optional(),
                        "interval_start": t.integer().optional(),
                        "payout": t.string().optional(),
                        "reporting_category": t.string().optional(),
                        "timezone": t.string().optional(),
                    }
                ).optional(),
                "report_type": t.string(),
            }
        ),
        t.proxy(renames["reporting.report_run"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "parameters", "report_type"),
    )
    functions["GetReportingReportRunsReportRun"] = spec3_sdk.get(
        "/v1/reporting/report_runs/{report_run}",
        t.struct({"expand": t.array(t.string()), "report_run": t.string()}),
        t.proxy(renames["reporting.report_run"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetReportingReportTypes"] = spec3_sdk.get(
        "/v1/reporting/report_types",
        t.struct({"expand": t.array(t.string())}),
        t.struct(
            {
                "data": t.array(t.proxy(renames["reporting.report_type"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetReportingReportTypesReportType"] = spec3_sdk.get(
        "/v1/reporting/report_types/{report_type}",
        t.struct({"expand": t.array(t.string()), "report_type": t.string()}),
        t.proxy(renames["reporting.report_type"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetReviews"] = spec3_sdk.get(
        "/v1/reviews",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["review"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetReviewsReview"] = spec3_sdk.get(
        "/v1/reviews/{review}",
        t.struct({"expand": t.array(t.string()), "review": t.string()}),
        t.proxy(renames["review"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostReviewsReviewApprove"] = spec3_sdk.post(
        "/v1/reviews/{review}/approve",
        t.struct({"review": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["review"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetSetupAttempts"] = spec3_sdk.get(
        "/v1/setup_attempts",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "setup_intent": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["setup_attempt"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetSetupIntents"] = spec3_sdk.get(
        "/v1/setup_intents",
        t.struct(
            {
                "attach_to_self": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "payment_method": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["setup_intent"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSetupIntents"] = spec3_sdk.post(
        "/v1/setup_intents",
        t.struct(
            {
                "attach_to_self": t.boolean().optional(),
                "automatic_payment_methods": t.struct(
                    {"enabled": t.boolean()}
                ).optional(),
                "confirm": t.boolean().optional(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "flow_directions": t.array(t.string()).optional(),
                "mandate_data": t.struct(
                    {
                        "customer_acceptance": t.struct(
                            {
                                "accepted_at": t.integer().optional(),
                                "offline": t.struct({}).optional(),
                                "online": t.struct(
                                    {"ip_address": t.string(), "user_agent": t.string()}
                                ).optional(),
                                "type": t.string(),
                            }
                        )
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "on_behalf_of": t.string().optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "currency": t.string().optional(),
                                "mandate_options": t.struct(
                                    {
                                        "custom_mandate_url": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "default_for": t.array(t.string()).optional(),
                                        "interval_description": t.string().optional(),
                                        "payment_schedule": t.string().optional(),
                                        "transaction_type": t.string().optional(),
                                    }
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({"code": t.string().optional()}).optional(),
                        "card": t.struct(
                            {
                                "mandate_options": t.struct(
                                    {
                                        "amount": t.integer(),
                                        "amount_type": t.string(),
                                        "currency": t.string(),
                                        "description": t.string().optional(),
                                        "end_date": t.integer().optional(),
                                        "interval": t.string(),
                                        "interval_count": t.integer().optional(),
                                        "reference": t.string(),
                                        "start_date": t.integer(),
                                        "supported_types": t.array(
                                            t.string()
                                        ).optional(),
                                    }
                                ).optional(),
                                "moto": t.boolean().optional(),
                                "network": t.string().optional(),
                                "request_three_d_secure": t.string().optional(),
                            }
                        ).optional(),
                        "link": t.struct(
                            {"persistent_token": t.string().optional()}
                        ).optional(),
                        "paypal": t.struct(
                            {"billing_agreement_id": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct(
                            {"mandate_options": t.struct({}).optional()}
                        ).optional(),
                        "us_bank_account": t.struct(
                            {
                                "financial_connections": t.struct(
                                    {
                                        "permissions": t.array(t.string()).optional(),
                                        "return_url": t.string().optional(),
                                    }
                                ).optional(),
                                "networks": t.struct(
                                    {"requested": t.array(t.string()).optional()}
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "payment_method_types": t.array(t.string()).optional(),
                "return_url": t.string().optional(),
                "single_use": t.struct(
                    {"amount": t.integer(), "currency": t.string()}
                ).optional(),
                "usage": t.string().optional(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "attach_to_self",
            "automatic_payment_methods",
            "confirm",
            "customer",
            "description",
            "expand",
            "flow_directions",
            "mandate_data",
            "metadata",
            "on_behalf_of",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "payment_method_types",
            "return_url",
            "single_use",
            "usage",
        ),
    )
    functions["GetSetupIntentsIntent"] = spec3_sdk.get(
        "/v1/setup_intents/{intent}",
        t.struct(
            {
                "client_secret": t.string(),
                "expand": t.array(t.string()),
                "intent": t.string(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSetupIntentsIntent"] = spec3_sdk.post(
        "/v1/setup_intents/{intent}",
        t.struct(
            {
                "intent": t.string(),
                "attach_to_self": t.boolean().optional(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "flow_directions": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "currency": t.string().optional(),
                                "mandate_options": t.struct(
                                    {
                                        "custom_mandate_url": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "default_for": t.array(t.string()).optional(),
                                        "interval_description": t.string().optional(),
                                        "payment_schedule": t.string().optional(),
                                        "transaction_type": t.string().optional(),
                                    }
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({"code": t.string().optional()}).optional(),
                        "card": t.struct(
                            {
                                "mandate_options": t.struct(
                                    {
                                        "amount": t.integer(),
                                        "amount_type": t.string(),
                                        "currency": t.string(),
                                        "description": t.string().optional(),
                                        "end_date": t.integer().optional(),
                                        "interval": t.string(),
                                        "interval_count": t.integer().optional(),
                                        "reference": t.string(),
                                        "start_date": t.integer(),
                                        "supported_types": t.array(
                                            t.string()
                                        ).optional(),
                                    }
                                ).optional(),
                                "moto": t.boolean().optional(),
                                "network": t.string().optional(),
                                "request_three_d_secure": t.string().optional(),
                            }
                        ).optional(),
                        "link": t.struct(
                            {"persistent_token": t.string().optional()}
                        ).optional(),
                        "paypal": t.struct(
                            {"billing_agreement_id": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct(
                            {"mandate_options": t.struct({}).optional()}
                        ).optional(),
                        "us_bank_account": t.struct(
                            {
                                "financial_connections": t.struct(
                                    {
                                        "permissions": t.array(t.string()).optional(),
                                        "return_url": t.string().optional(),
                                    }
                                ).optional(),
                                "networks": t.struct(
                                    {"requested": t.array(t.string()).optional()}
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "payment_method_types": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "attach_to_self",
            "customer",
            "description",
            "expand",
            "flow_directions",
            "metadata",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "payment_method_types",
        ),
    )
    functions["PostSetupIntentsIntentCancel"] = spec3_sdk.post(
        "/v1/setup_intents/{intent}/cancel",
        t.struct(
            {
                "intent": t.string(),
                "cancellation_reason": t.string().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("cancellation_reason", "expand"),
    )
    functions["PostSetupIntentsIntentConfirm"] = spec3_sdk.post(
        "/v1/setup_intents/{intent}/confirm",
        t.struct(
            {
                "intent": t.string(),
                "expand": t.array(t.string()).optional(),
                "mandate_data": t.union(
                    [
                        t.struct(
                            {
                                "customer_acceptance": t.struct(
                                    {
                                        "accepted_at": t.integer().optional(),
                                        "offline": t.struct({}).optional(),
                                        "online": t.struct(
                                            {
                                                "ip_address": t.string(),
                                                "user_agent": t.string(),
                                            }
                                        ).optional(),
                                        "type": t.string(),
                                    }
                                )
                            }
                        ),
                        t.struct(
                            {
                                "customer_acceptance": t.struct(
                                    {
                                        "online": t.struct(
                                            {
                                                "ip_address": t.string().optional(),
                                                "user_agent": t.string().optional(),
                                            }
                                        ),
                                        "type": t.string(),
                                    }
                                )
                            }
                        ),
                    ]
                ).optional(),
                "payment_method": t.string().optional(),
                "payment_method_data": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "account_number": t.string(),
                                "institution_number": t.string(),
                                "transit_number": t.string(),
                            }
                        ).optional(),
                        "affirm": t.struct({}).optional(),
                        "afterpay_clearpay": t.struct({}).optional(),
                        "alipay": t.struct({}).optional(),
                        "au_becs_debit": t.struct(
                            {"account_number": t.string(), "bsb_number": t.string()}
                        ).optional(),
                        "bacs_debit": t.struct(
                            {
                                "account_number": t.string().optional(),
                                "sort_code": t.string().optional(),
                            }
                        ).optional(),
                        "bancontact": t.struct({}).optional(),
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({}).optional(),
                        "boleto": t.struct({"tax_id": t.string()}).optional(),
                        "cashapp": t.struct({}).optional(),
                        "customer_balance": t.struct({}).optional(),
                        "eps": t.struct({"bank": t.string().optional()}).optional(),
                        "fpx": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "bank": t.string(),
                            }
                        ).optional(),
                        "giropay": t.struct({}).optional(),
                        "grabpay": t.struct({}).optional(),
                        "ideal": t.struct({"bank": t.string().optional()}).optional(),
                        "interac_present": t.struct({}).optional(),
                        "klarna": t.struct(
                            {
                                "dob": t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ).optional()
                            }
                        ).optional(),
                        "konbini": t.struct({}).optional(),
                        "link": t.struct({}).optional(),
                        "metadata": t.struct({}).optional(),
                        "oxxo": t.struct({}).optional(),
                        "p24": t.struct({"bank": t.string().optional()}).optional(),
                        "paynow": t.struct({}).optional(),
                        "paypal": t.struct({}).optional(),
                        "pix": t.struct({}).optional(),
                        "promptpay": t.struct({}).optional(),
                        "radar_options": t.struct(
                            {"session": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct({"iban": t.string()}).optional(),
                        "sofort": t.struct({"country": t.string()}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                        "wechat_pay": t.struct({}).optional(),
                    }
                ).optional(),
                "payment_method_options": t.struct(
                    {
                        "acss_debit": t.struct(
                            {
                                "currency": t.string().optional(),
                                "mandate_options": t.struct(
                                    {
                                        "custom_mandate_url": t.union(
                                            [t.string(), t.string()]
                                        ).optional(),
                                        "default_for": t.array(t.string()).optional(),
                                        "interval_description": t.string().optional(),
                                        "payment_schedule": t.string().optional(),
                                        "transaction_type": t.string().optional(),
                                    }
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                        "blik": t.struct({"code": t.string().optional()}).optional(),
                        "card": t.struct(
                            {
                                "mandate_options": t.struct(
                                    {
                                        "amount": t.integer(),
                                        "amount_type": t.string(),
                                        "currency": t.string(),
                                        "description": t.string().optional(),
                                        "end_date": t.integer().optional(),
                                        "interval": t.string(),
                                        "interval_count": t.integer().optional(),
                                        "reference": t.string(),
                                        "start_date": t.integer(),
                                        "supported_types": t.array(
                                            t.string()
                                        ).optional(),
                                    }
                                ).optional(),
                                "moto": t.boolean().optional(),
                                "network": t.string().optional(),
                                "request_three_d_secure": t.string().optional(),
                            }
                        ).optional(),
                        "link": t.struct(
                            {"persistent_token": t.string().optional()}
                        ).optional(),
                        "paypal": t.struct(
                            {"billing_agreement_id": t.string().optional()}
                        ).optional(),
                        "sepa_debit": t.struct(
                            {"mandate_options": t.struct({}).optional()}
                        ).optional(),
                        "us_bank_account": t.struct(
                            {
                                "financial_connections": t.struct(
                                    {
                                        "permissions": t.array(t.string()).optional(),
                                        "return_url": t.string().optional(),
                                    }
                                ).optional(),
                                "networks": t.struct(
                                    {"requested": t.array(t.string()).optional()}
                                ).optional(),
                                "verification_method": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "return_url": t.string().optional(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "expand",
            "mandate_data",
            "payment_method",
            "payment_method_data",
            "payment_method_options",
            "return_url",
        ),
    )
    functions["PostSetupIntentsIntentVerifyMicrodeposits"] = spec3_sdk.post(
        "/v1/setup_intents/{intent}/verify_microdeposits",
        t.struct(
            {
                "intent": t.string(),
                "amounts": t.array(t.integer()).optional(),
                "descriptor_code": t.string().optional(),
                "expand": t.array(t.string()).optional(),
            }
        ),
        t.proxy(renames["setup_intent"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amounts", "descriptor_code", "expand"),
    )
    functions["GetShippingRates"] = spec3_sdk.get(
        "/v1/shipping_rates",
        t.struct(
            {
                "active": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "currency": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["shipping_rate"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostShippingRates"] = spec3_sdk.post(
        "/v1/shipping_rates",
        t.struct(
            {
                "delivery_estimate": t.struct(
                    {
                        "maximum": t.struct(
                            {"unit": t.string(), "value": t.integer()}
                        ).optional(),
                        "minimum": t.struct(
                            {"unit": t.string(), "value": t.integer()}
                        ).optional(),
                    }
                ).optional(),
                "display_name": t.string(),
                "expand": t.array(t.string()).optional(),
                "fixed_amount": t.struct(
                    {
                        "amount": t.integer(),
                        "currency": t.string(),
                        "currency_options": t.struct({}).optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "tax_behavior": t.string().optional(),
                "tax_code": t.string().optional(),
                "type": t.string().optional(),
            }
        ),
        t.proxy(renames["shipping_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "delivery_estimate",
            "display_name",
            "expand",
            "fixed_amount",
            "metadata",
            "tax_behavior",
            "tax_code",
            "type",
        ),
    )
    functions["GetShippingRatesShippingRateToken"] = spec3_sdk.get(
        "/v1/shipping_rates/{shipping_rate_token}",
        t.struct({"expand": t.array(t.string()), "shipping_rate_token": t.string()}),
        t.proxy(renames["shipping_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostShippingRatesShippingRateToken"] = spec3_sdk.post(
        "/v1/shipping_rates/{shipping_rate_token}",
        t.struct(
            {
                "shipping_rate_token": t.string(),
                "active": t.boolean().optional(),
                "expand": t.array(t.string()).optional(),
                "fixed_amount": t.struct(
                    {"currency_options": t.struct({}).optional()}
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "tax_behavior": t.string().optional(),
            }
        ),
        t.proxy(renames["shipping_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("active", "expand", "fixed_amount", "metadata", "tax_behavior"),
    )
    functions["GetSigmaScheduledQueryRuns"] = spec3_sdk.get(
        "/v1/sigma/scheduled_query_runs",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["scheduled_query_run"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetSigmaScheduledQueryRunsScheduledQueryRun"] = spec3_sdk.get(
        "/v1/sigma/scheduled_query_runs/{scheduled_query_run}",
        t.struct({"expand": t.array(t.string()), "scheduled_query_run": t.string()}),
        t.proxy(renames["scheduled_query_run"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSources"] = spec3_sdk.post(
        "/v1/sources",
        t.struct(
            {
                "amount": t.integer().optional(),
                "currency": t.string().optional(),
                "customer": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "flow": t.string().optional(),
                "mandate": t.struct(
                    {
                        "acceptance": t.struct(
                            {
                                "date": t.integer().optional(),
                                "ip": t.string().optional(),
                                "offline": t.struct(
                                    {"contact_email": t.string()}
                                ).optional(),
                                "online": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional(),
                                "status": t.string(),
                                "type": t.string().optional(),
                                "user_agent": t.string().optional(),
                            }
                        ).optional(),
                        "amount": t.union([t.integer(), t.string()]).optional(),
                        "currency": t.string().optional(),
                        "interval": t.string().optional(),
                        "notification_method": t.string().optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "original_source": t.string().optional(),
                "owner": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "email": t.string().optional(),
                        "name": t.string().optional(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
                "receiver": t.struct(
                    {"refund_attributes_method": t.string().optional()}
                ).optional(),
                "redirect": t.struct({"return_url": t.string()}).optional(),
                "source_order": t.struct(
                    {
                        "items": t.array(
                            t.struct(
                                {
                                    "amount": t.integer().optional(),
                                    "currency": t.string().optional(),
                                    "description": t.string().optional(),
                                    "parent": t.string().optional(),
                                    "quantity": t.integer().optional(),
                                    "type": t.string().optional(),
                                }
                            )
                        ).optional(),
                        "shipping": t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "carrier": t.string().optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                                "tracking_number": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "statement_descriptor": t.string().optional(),
                "token": t.string().optional(),
                "type": t.string().optional(),
                "usage": t.string().optional(),
            }
        ),
        t.proxy(renames["source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "customer",
            "expand",
            "flow",
            "mandate",
            "metadata",
            "original_source",
            "owner",
            "receiver",
            "redirect",
            "source_order",
            "statement_descriptor",
            "token",
            "type",
            "usage",
        ),
    )
    functions["GetSourcesSource"] = spec3_sdk.get(
        "/v1/sources/{source}",
        t.struct(
            {
                "client_secret": t.string(),
                "expand": t.array(t.string()),
                "source": t.string(),
            }
        ),
        t.proxy(renames["source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSourcesSource"] = spec3_sdk.post(
        "/v1/sources/{source}",
        t.struct(
            {
                "source": t.string(),
                "amount": t.integer().optional(),
                "expand": t.array(t.string()).optional(),
                "mandate": t.struct(
                    {
                        "acceptance": t.struct(
                            {
                                "date": t.integer().optional(),
                                "ip": t.string().optional(),
                                "offline": t.struct(
                                    {"contact_email": t.string()}
                                ).optional(),
                                "online": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional(),
                                "status": t.string(),
                                "type": t.string().optional(),
                                "user_agent": t.string().optional(),
                            }
                        ).optional(),
                        "amount": t.union([t.integer(), t.string()]).optional(),
                        "currency": t.string().optional(),
                        "interval": t.string().optional(),
                        "notification_method": t.string().optional(),
                    }
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "owner": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "email": t.string().optional(),
                        "name": t.string().optional(),
                        "phone": t.string().optional(),
                    }
                ).optional(),
                "source_order": t.struct(
                    {
                        "items": t.array(
                            t.struct(
                                {
                                    "amount": t.integer().optional(),
                                    "currency": t.string().optional(),
                                    "description": t.string().optional(),
                                    "parent": t.string().optional(),
                                    "quantity": t.integer().optional(),
                                    "type": t.string().optional(),
                                }
                            )
                        ).optional(),
                        "shipping": t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ),
                                "carrier": t.string().optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                                "tracking_number": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "expand",
            "mandate",
            "metadata",
            "owner",
            "source_order",
        ),
    )
    functions["GetSourcesSourceSourceTransactions"] = spec3_sdk.get(
        "/v1/sources/{source}/source_transactions",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "source": t.string(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["source_transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSourcesSourceVerify"] = spec3_sdk.post(
        "/v1/sources/{source}/verify",
        t.struct(
            {
                "source": t.string(),
                "expand": t.array(t.string()).optional(),
                "values": t.array(t.string()),
            }
        ),
        t.proxy(renames["source"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "values"),
    )
    functions["GetSubscriptionItems"] = spec3_sdk.get(
        "/v1/subscription_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "subscription": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["subscription_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionItems"] = spec3_sdk.post(
        "/v1/subscription_items",
        t.struct(
            {
                "billing_thresholds": t.union(
                    [t.struct({"usage_gte": t.integer()}), t.string()]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "payment_behavior": t.string().optional(),
                "plan": t.string().optional(),
                "price": t.string().optional(),
                "price_data": t.struct(
                    {
                        "currency": t.string(),
                        "product": t.string(),
                        "recurring": t.struct(
                            {
                                "interval": t.string(),
                                "interval_count": t.integer().optional(),
                            }
                        ),
                        "tax_behavior": t.string().optional(),
                        "unit_amount": t.integer().optional(),
                        "unit_amount_decimal": t.string().optional(),
                    }
                ).optional(),
                "proration_behavior": t.string().optional(),
                "proration_date": t.integer().optional(),
                "quantity": t.integer().optional(),
                "subscription": t.string(),
                "tax_rates": t.union([t.array(t.string()), t.string()]).optional(),
            }
        ),
        t.proxy(renames["subscription_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "billing_thresholds",
            "expand",
            "metadata",
            "payment_behavior",
            "plan",
            "price",
            "price_data",
            "proration_behavior",
            "proration_date",
            "quantity",
            "subscription",
            "tax_rates",
        ),
    )
    functions["DeleteSubscriptionItemsItem"] = spec3_sdk.delete(
        "/v1/subscription_items/{item}",
        t.struct(
            {
                "item": t.string(),
                "clear_usage": t.boolean().optional(),
                "proration_behavior": t.string().optional(),
                "proration_date": t.integer().optional(),
            }
        ),
        t.proxy(renames["deleted_subscription_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("clear_usage", "proration_behavior", "proration_date"),
    )
    functions["GetSubscriptionItemsItem"] = spec3_sdk.get(
        "/v1/subscription_items/{item}",
        t.struct({"expand": t.array(t.string()), "item": t.string()}),
        t.proxy(renames["subscription_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionItemsItem"] = spec3_sdk.post(
        "/v1/subscription_items/{item}",
        t.struct(
            {
                "item": t.string(),
                "billing_thresholds": t.union(
                    [t.struct({"usage_gte": t.integer()}), t.string()]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "off_session": t.boolean().optional(),
                "payment_behavior": t.string().optional(),
                "plan": t.string().optional(),
                "price": t.string().optional(),
                "price_data": t.struct(
                    {
                        "currency": t.string(),
                        "product": t.string(),
                        "recurring": t.struct(
                            {
                                "interval": t.string(),
                                "interval_count": t.integer().optional(),
                            }
                        ),
                        "tax_behavior": t.string().optional(),
                        "unit_amount": t.integer().optional(),
                        "unit_amount_decimal": t.string().optional(),
                    }
                ).optional(),
                "proration_behavior": t.string().optional(),
                "proration_date": t.integer().optional(),
                "quantity": t.integer().optional(),
                "tax_rates": t.union([t.array(t.string()), t.string()]).optional(),
            }
        ),
        t.proxy(renames["subscription_item"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "billing_thresholds",
            "expand",
            "metadata",
            "off_session",
            "payment_behavior",
            "plan",
            "price",
            "price_data",
            "proration_behavior",
            "proration_date",
            "quantity",
            "tax_rates",
        ),
    )
    functions[
        "GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"
    ] = spec3_sdk.get(
        "/v1/subscription_items/{subscription_item}/usage_record_summaries",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "subscription_item": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["usage_record_summary"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionItemsSubscriptionItemUsageRecords"] = spec3_sdk.post(
        "/v1/subscription_items/{subscription_item}/usage_records",
        t.struct(
            {
                "subscription_item": t.string(),
                "action": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "quantity": t.integer(),
                "timestamp": t.union([t.string(), t.integer()]).optional(),
            }
        ),
        t.proxy(renames["usage_record"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("action", "expand", "quantity", "timestamp"),
    )
    functions["GetSubscriptionSchedules"] = spec3_sdk.get(
        "/v1/subscription_schedules",
        t.struct(
            {
                "canceled_at": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "completed_at": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "released_at": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "scheduled": t.boolean(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["subscription_schedule"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionSchedules"] = spec3_sdk.post(
        "/v1/subscription_schedules",
        t.struct(
            {
                "customer": t.string().optional(),
                "default_settings": t.struct(
                    {
                        "application_fee_percent": t.number().optional(),
                        "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                        "billing_cycle_anchor": t.string().optional(),
                        "billing_thresholds": t.union(
                            [
                                t.struct(
                                    {
                                        "amount_gte": t.integer().optional(),
                                        "reset_billing_cycle_anchor": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "collection_method": t.string().optional(),
                        "default_payment_method": t.string().optional(),
                        "description": t.string().optional(),
                        "invoice_settings": t.struct(
                            {"days_until_due": t.integer().optional()}
                        ).optional(),
                        "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                        "transfer_data": t.union(
                            [
                                t.struct(
                                    {
                                        "amount_percent": t.number().optional(),
                                        "destination": t.string(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "end_behavior": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "from_subscription": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "phases": t.array(
                    t.struct(
                        {
                            "add_invoice_items": t.array(
                                t.struct(
                                    {
                                        "price": t.string().optional(),
                                        "price_data": t.struct(
                                            {
                                                "currency": t.string(),
                                                "product": t.string(),
                                                "tax_behavior": t.string().optional(),
                                                "unit_amount": t.integer().optional(),
                                                "unit_amount_decimal": t.string().optional(),
                                            }
                                        ).optional(),
                                        "quantity": t.integer().optional(),
                                        "tax_rates": t.union(
                                            [t.array(t.string()), t.string()]
                                        ).optional(),
                                    }
                                )
                            ).optional(),
                            "application_fee_percent": t.number().optional(),
                            "automatic_tax": t.struct(
                                {"enabled": t.boolean()}
                            ).optional(),
                            "billing_cycle_anchor": t.string().optional(),
                            "billing_thresholds": t.union(
                                [
                                    t.struct(
                                        {
                                            "amount_gte": t.integer().optional(),
                                            "reset_billing_cycle_anchor": t.boolean().optional(),
                                        }
                                    ),
                                    t.string(),
                                ]
                            ).optional(),
                            "collection_method": t.string().optional(),
                            "coupon": t.string().optional(),
                            "currency": t.string().optional(),
                            "default_payment_method": t.string().optional(),
                            "default_tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "description": t.string().optional(),
                            "end_date": t.integer().optional(),
                            "invoice_settings": t.struct(
                                {"days_until_due": t.integer().optional()}
                            ).optional(),
                            "items": t.array(
                                t.struct(
                                    {
                                        "billing_thresholds": t.union(
                                            [
                                                t.struct({"usage_gte": t.integer()}),
                                                t.string(),
                                            ]
                                        ).optional(),
                                        "metadata": t.struct({}).optional(),
                                        "plan": t.string().optional(),
                                        "price": t.string().optional(),
                                        "price_data": t.struct(
                                            {
                                                "currency": t.string(),
                                                "product": t.string(),
                                                "recurring": t.struct(
                                                    {
                                                        "interval": t.string(),
                                                        "interval_count": t.integer().optional(),
                                                    }
                                                ),
                                                "tax_behavior": t.string().optional(),
                                                "unit_amount": t.integer().optional(),
                                                "unit_amount_decimal": t.string().optional(),
                                            }
                                        ).optional(),
                                        "quantity": t.integer().optional(),
                                        "tax_rates": t.union(
                                            [t.array(t.string()), t.string()]
                                        ).optional(),
                                    }
                                )
                            ),
                            "iterations": t.integer().optional(),
                            "metadata": t.struct({}).optional(),
                            "on_behalf_of": t.string().optional(),
                            "proration_behavior": t.string().optional(),
                            "transfer_data": t.struct(
                                {
                                    "amount_percent": t.number().optional(),
                                    "destination": t.string(),
                                }
                            ).optional(),
                            "trial": t.boolean().optional(),
                            "trial_end": t.integer().optional(),
                        }
                    )
                ).optional(),
                "start_date": t.union([t.integer(), t.string()]).optional(),
            }
        ),
        t.proxy(renames["subscription_schedule"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "customer",
            "default_settings",
            "end_behavior",
            "expand",
            "from_subscription",
            "metadata",
            "phases",
            "start_date",
        ),
    )
    functions["GetSubscriptionSchedulesSchedule"] = spec3_sdk.get(
        "/v1/subscription_schedules/{schedule}",
        t.struct({"expand": t.array(t.string()), "schedule": t.string()}),
        t.proxy(renames["subscription_schedule"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionSchedulesSchedule"] = spec3_sdk.post(
        "/v1/subscription_schedules/{schedule}",
        t.struct(
            {
                "schedule": t.string(),
                "default_settings": t.struct(
                    {
                        "application_fee_percent": t.number().optional(),
                        "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                        "billing_cycle_anchor": t.string().optional(),
                        "billing_thresholds": t.union(
                            [
                                t.struct(
                                    {
                                        "amount_gte": t.integer().optional(),
                                        "reset_billing_cycle_anchor": t.boolean().optional(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "collection_method": t.string().optional(),
                        "default_payment_method": t.string().optional(),
                        "description": t.string().optional(),
                        "invoice_settings": t.struct(
                            {"days_until_due": t.integer().optional()}
                        ).optional(),
                        "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                        "transfer_data": t.union(
                            [
                                t.struct(
                                    {
                                        "amount_percent": t.number().optional(),
                                        "destination": t.string(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                    }
                ).optional(),
                "end_behavior": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "phases": t.array(
                    t.struct(
                        {
                            "add_invoice_items": t.array(
                                t.struct(
                                    {
                                        "price": t.string().optional(),
                                        "price_data": t.struct(
                                            {
                                                "currency": t.string(),
                                                "product": t.string(),
                                                "tax_behavior": t.string().optional(),
                                                "unit_amount": t.integer().optional(),
                                                "unit_amount_decimal": t.string().optional(),
                                            }
                                        ).optional(),
                                        "quantity": t.integer().optional(),
                                        "tax_rates": t.union(
                                            [t.array(t.string()), t.string()]
                                        ).optional(),
                                    }
                                )
                            ).optional(),
                            "application_fee_percent": t.number().optional(),
                            "automatic_tax": t.struct(
                                {"enabled": t.boolean()}
                            ).optional(),
                            "billing_cycle_anchor": t.string().optional(),
                            "billing_thresholds": t.union(
                                [
                                    t.struct(
                                        {
                                            "amount_gte": t.integer().optional(),
                                            "reset_billing_cycle_anchor": t.boolean().optional(),
                                        }
                                    ),
                                    t.string(),
                                ]
                            ).optional(),
                            "collection_method": t.string().optional(),
                            "coupon": t.string().optional(),
                            "currency": t.string().optional(),
                            "default_payment_method": t.string().optional(),
                            "default_tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                            "description": t.string().optional(),
                            "end_date": t.union([t.integer(), t.string()]).optional(),
                            "invoice_settings": t.struct(
                                {"days_until_due": t.integer().optional()}
                            ).optional(),
                            "items": t.array(
                                t.struct(
                                    {
                                        "billing_thresholds": t.union(
                                            [
                                                t.struct({"usage_gte": t.integer()}),
                                                t.string(),
                                            ]
                                        ).optional(),
                                        "metadata": t.struct({}).optional(),
                                        "plan": t.string().optional(),
                                        "price": t.string().optional(),
                                        "price_data": t.struct(
                                            {
                                                "currency": t.string(),
                                                "product": t.string(),
                                                "recurring": t.struct(
                                                    {
                                                        "interval": t.string(),
                                                        "interval_count": t.integer().optional(),
                                                    }
                                                ),
                                                "tax_behavior": t.string().optional(),
                                                "unit_amount": t.integer().optional(),
                                                "unit_amount_decimal": t.string().optional(),
                                            }
                                        ).optional(),
                                        "quantity": t.integer().optional(),
                                        "tax_rates": t.union(
                                            [t.array(t.string()), t.string()]
                                        ).optional(),
                                    }
                                )
                            ),
                            "iterations": t.integer().optional(),
                            "metadata": t.struct({}).optional(),
                            "on_behalf_of": t.string().optional(),
                            "proration_behavior": t.string().optional(),
                            "start_date": t.union([t.integer(), t.string()]).optional(),
                            "transfer_data": t.struct(
                                {
                                    "amount_percent": t.number().optional(),
                                    "destination": t.string(),
                                }
                            ).optional(),
                            "trial": t.boolean().optional(),
                            "trial_end": t.union([t.integer(), t.string()]).optional(),
                        }
                    )
                ).optional(),
                "proration_behavior": t.string().optional(),
            }
        ),
        t.proxy(renames["subscription_schedule"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "default_settings",
            "end_behavior",
            "expand",
            "metadata",
            "phases",
            "proration_behavior",
        ),
    )
    functions["PostSubscriptionSchedulesScheduleCancel"] = spec3_sdk.post(
        "/v1/subscription_schedules/{schedule}/cancel",
        t.struct(
            {
                "schedule": t.string(),
                "expand": t.array(t.string()).optional(),
                "invoice_now": t.boolean().optional(),
                "prorate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["subscription_schedule"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "invoice_now", "prorate"),
    )
    functions["PostSubscriptionSchedulesScheduleRelease"] = spec3_sdk.post(
        "/v1/subscription_schedules/{schedule}/release",
        t.struct(
            {
                "schedule": t.string(),
                "expand": t.array(t.string()).optional(),
                "preserve_cancel_date": t.boolean().optional(),
            }
        ),
        t.proxy(renames["subscription_schedule"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "preserve_cancel_date"),
    )
    functions["GetSubscriptions"] = spec3_sdk.get(
        "/v1/subscriptions",
        t.struct(
            {
                "collection_method": t.string(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "current_period_end": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "current_period_start": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "plan": t.string(),
                "price": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
                "test_clock": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["subscription"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptions"] = spec3_sdk.post(
        "/v1/subscriptions",
        t.struct(
            {
                "add_invoice_items": t.array(
                    t.struct(
                        {
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "application_fee_percent": t.number().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "backdate_start_date": t.integer().optional(),
                "billing_cycle_anchor": t.integer().optional(),
                "billing_thresholds": t.union(
                    [
                        t.struct(
                            {
                                "amount_gte": t.integer().optional(),
                                "reset_billing_cycle_anchor": t.boolean().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "cancel_at": t.integer().optional(),
                "cancel_at_period_end": t.boolean().optional(),
                "collection_method": t.string().optional(),
                "coupon": t.string().optional(),
                "currency": t.string().optional(),
                "customer": t.string(),
                "days_until_due": t.integer().optional(),
                "default_payment_method": t.string().optional(),
                "default_source": t.string().optional(),
                "default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "items": t.array(
                    t.struct(
                        {
                            "billing_thresholds": t.union(
                                [t.struct({"usage_gte": t.integer()}), t.string()]
                            ).optional(),
                            "metadata": t.struct({}).optional(),
                            "plan": t.string().optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "off_session": t.boolean().optional(),
                "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                "payment_behavior": t.string().optional(),
                "payment_settings": t.struct(
                    {
                        "payment_method_options": t.struct(
                            {
                                "acss_debit": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "transaction_type": t.string().optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "bancontact": t.union(
                                    [
                                        t.struct(
                                            {
                                                "preferred_language": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "card": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "amount": t.integer().optional(),
                                                        "amount_type": t.string().optional(),
                                                        "description": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "network": t.string().optional(),
                                                "request_three_d_secure": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "customer_balance": t.union(
                                    [
                                        t.struct(
                                            {
                                                "bank_transfer": t.struct(
                                                    {
                                                        "eu_bank_transfer": t.struct(
                                                            {"country": t.string()}
                                                        ).optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "funding_type": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "konbini": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "us_bank_account": t.union(
                                    [
                                        t.struct(
                                            {
                                                "financial_connections": t.struct(
                                                    {
                                                        "permissions": t.array(
                                                            t.string()
                                                        ).optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                        "payment_method_types": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                        "save_default_payment_method": t.string().optional(),
                    }
                ).optional(),
                "pending_invoice_item_interval": t.union(
                    [
                        t.struct(
                            {
                                "interval": t.string(),
                                "interval_count": t.integer().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "promotion_code": t.string().optional(),
                "proration_behavior": t.string().optional(),
                "transfer_data": t.struct(
                    {"amount_percent": t.number().optional(), "destination": t.string()}
                ).optional(),
                "trial_end": t.union([t.string(), t.integer()]).optional(),
                "trial_from_plan": t.boolean().optional(),
                "trial_period_days": t.integer().optional(),
                "trial_settings": t.struct(
                    {"end_behavior": t.struct({"missing_payment_method": t.string()})}
                ).optional(),
            }
        ),
        t.proxy(renames["subscription"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "add_invoice_items",
            "application_fee_percent",
            "automatic_tax",
            "backdate_start_date",
            "billing_cycle_anchor",
            "billing_thresholds",
            "cancel_at",
            "cancel_at_period_end",
            "collection_method",
            "coupon",
            "currency",
            "customer",
            "days_until_due",
            "default_payment_method",
            "default_source",
            "default_tax_rates",
            "description",
            "expand",
            "items",
            "metadata",
            "off_session",
            "on_behalf_of",
            "payment_behavior",
            "payment_settings",
            "pending_invoice_item_interval",
            "promotion_code",
            "proration_behavior",
            "transfer_data",
            "trial_end",
            "trial_from_plan",
            "trial_period_days",
            "trial_settings",
        ),
    )
    functions["GetSubscriptionsSearch"] = spec3_sdk.get(
        "/v1/subscriptions/search",
        t.struct(
            {
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "page": t.string(),
                "query": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["subscription"])),
                "has_more": t.boolean(),
                "next_page": t.string().optional(),
                "object": t.string(),
                "total_count": t.integer().optional(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["DeleteSubscriptionsSubscriptionExposedId"] = spec3_sdk.delete(
        "/v1/subscriptions/{subscription_exposed_id}",
        t.struct(
            {
                "subscription_exposed_id": t.string(),
                "cancellation_details": t.struct(
                    {
                        "comment": t.string().optional(),
                        "feedback": t.string().optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "invoice_now": t.boolean().optional(),
                "prorate": t.boolean().optional(),
            }
        ),
        t.proxy(renames["subscription"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("cancellation_details", "expand", "invoice_now", "prorate"),
    )
    functions["GetSubscriptionsSubscriptionExposedId"] = spec3_sdk.get(
        "/v1/subscriptions/{subscription_exposed_id}",
        t.struct(
            {"expand": t.array(t.string()), "subscription_exposed_id": t.string()}
        ),
        t.proxy(renames["subscription"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionsSubscriptionExposedId"] = spec3_sdk.post(
        "/v1/subscriptions/{subscription_exposed_id}",
        t.struct(
            {
                "subscription_exposed_id": t.string(),
                "add_invoice_items": t.array(
                    t.struct(
                        {
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "application_fee_percent": t.number().optional(),
                "automatic_tax": t.struct({"enabled": t.boolean()}).optional(),
                "billing_cycle_anchor": t.string().optional(),
                "billing_thresholds": t.union(
                    [
                        t.struct(
                            {
                                "amount_gte": t.integer().optional(),
                                "reset_billing_cycle_anchor": t.boolean().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "cancel_at": t.union([t.integer(), t.string()]).optional(),
                "cancel_at_period_end": t.boolean().optional(),
                "cancellation_details": t.struct(
                    {
                        "comment": t.string().optional(),
                        "feedback": t.string().optional(),
                    }
                ).optional(),
                "collection_method": t.string().optional(),
                "coupon": t.string().optional(),
                "days_until_due": t.integer().optional(),
                "default_payment_method": t.string().optional(),
                "default_source": t.string().optional(),
                "default_tax_rates": t.union(
                    [t.array(t.string()), t.string()]
                ).optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "items": t.array(
                    t.struct(
                        {
                            "billing_thresholds": t.union(
                                [t.struct({"usage_gte": t.integer()}), t.string()]
                            ).optional(),
                            "clear_usage": t.boolean().optional(),
                            "deleted": t.boolean().optional(),
                            "id": t.string().optional(),
                            "metadata": t.union([t.struct({}), t.string()]).optional(),
                            "plan": t.string().optional(),
                            "price": t.string().optional(),
                            "price_data": t.struct(
                                {
                                    "currency": t.string(),
                                    "product": t.string(),
                                    "recurring": t.struct(
                                        {
                                            "interval": t.string(),
                                            "interval_count": t.integer().optional(),
                                        }
                                    ),
                                    "tax_behavior": t.string().optional(),
                                    "unit_amount": t.integer().optional(),
                                    "unit_amount_decimal": t.string().optional(),
                                }
                            ).optional(),
                            "quantity": t.integer().optional(),
                            "tax_rates": t.union(
                                [t.array(t.string()), t.string()]
                            ).optional(),
                        }
                    )
                ).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "off_session": t.boolean().optional(),
                "on_behalf_of": t.union([t.string(), t.string()]).optional(),
                "pause_collection": t.union(
                    [
                        t.struct(
                            {
                                "behavior": t.string(),
                                "resumes_at": t.integer().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "payment_behavior": t.string().optional(),
                "payment_settings": t.struct(
                    {
                        "payment_method_options": t.struct(
                            {
                                "acss_debit": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "transaction_type": t.string().optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "bancontact": t.union(
                                    [
                                        t.struct(
                                            {
                                                "preferred_language": t.string().optional()
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "card": t.union(
                                    [
                                        t.struct(
                                            {
                                                "mandate_options": t.struct(
                                                    {
                                                        "amount": t.integer().optional(),
                                                        "amount_type": t.string().optional(),
                                                        "description": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "network": t.string().optional(),
                                                "request_three_d_secure": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "customer_balance": t.union(
                                    [
                                        t.struct(
                                            {
                                                "bank_transfer": t.struct(
                                                    {
                                                        "eu_bank_transfer": t.struct(
                                                            {"country": t.string()}
                                                        ).optional(),
                                                        "type": t.string().optional(),
                                                    }
                                                ).optional(),
                                                "funding_type": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "konbini": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "us_bank_account": t.union(
                                    [
                                        t.struct(
                                            {
                                                "financial_connections": t.struct(
                                                    {
                                                        "permissions": t.array(
                                                            t.string()
                                                        ).optional()
                                                    }
                                                ).optional(),
                                                "verification_method": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                            }
                        ).optional(),
                        "payment_method_types": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                        "save_default_payment_method": t.string().optional(),
                    }
                ).optional(),
                "pending_invoice_item_interval": t.union(
                    [
                        t.struct(
                            {
                                "interval": t.string(),
                                "interval_count": t.integer().optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "promotion_code": t.string().optional(),
                "proration_behavior": t.string().optional(),
                "proration_date": t.integer().optional(),
                "transfer_data": t.union(
                    [
                        t.struct(
                            {
                                "amount_percent": t.number().optional(),
                                "destination": t.string(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "trial_end": t.union([t.string(), t.integer()]).optional(),
                "trial_from_plan": t.boolean().optional(),
                "trial_settings": t.struct(
                    {"end_behavior": t.struct({"missing_payment_method": t.string()})}
                ).optional(),
            }
        ),
        t.proxy(renames["subscription"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "add_invoice_items",
            "application_fee_percent",
            "automatic_tax",
            "billing_cycle_anchor",
            "billing_thresholds",
            "cancel_at",
            "cancel_at_period_end",
            "cancellation_details",
            "collection_method",
            "coupon",
            "days_until_due",
            "default_payment_method",
            "default_source",
            "default_tax_rates",
            "description",
            "expand",
            "items",
            "metadata",
            "off_session",
            "on_behalf_of",
            "pause_collection",
            "payment_behavior",
            "payment_settings",
            "pending_invoice_item_interval",
            "promotion_code",
            "proration_behavior",
            "proration_date",
            "transfer_data",
            "trial_end",
            "trial_from_plan",
            "trial_settings",
        ),
    )
    functions["DeleteSubscriptionsSubscriptionExposedIdDiscount"] = spec3_sdk.delete(
        "/v1/subscriptions/{subscription_exposed_id}/discount",
        t.struct({"subscription_exposed_id": t.string()}),
        t.proxy(renames["deleted_discount"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostSubscriptionsSubscriptionResume"] = spec3_sdk.post(
        "/v1/subscriptions/{subscription}/resume",
        t.struct(
            {
                "subscription": t.string(),
                "billing_cycle_anchor": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "proration_behavior": t.string().optional(),
                "proration_date": t.integer().optional(),
            }
        ),
        t.proxy(renames["subscription"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "billing_cycle_anchor",
            "expand",
            "proration_behavior",
            "proration_date",
        ),
    )
    functions["PostTaxCalculations"] = spec3_sdk.post(
        "/v1/tax/calculations",
        t.struct(
            {
                "currency": t.string(),
                "customer": t.string().optional(),
                "customer_details": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_source": t.string().optional(),
                        "ip_address": t.string().optional(),
                        "tax_ids": t.array(
                            t.struct({"type": t.string(), "value": t.string()})
                        ).optional(),
                        "taxability_override": t.string().optional(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "amount": t.integer(),
                            "product": t.string().optional(),
                            "quantity": t.integer().optional(),
                            "reference": t.string().optional(),
                            "tax_behavior": t.string().optional(),
                            "tax_code": t.string().optional(),
                        }
                    )
                ),
                "shipping_cost": t.struct(
                    {
                        "amount": t.integer().optional(),
                        "shipping_rate": t.string().optional(),
                        "tax_behavior": t.string().optional(),
                        "tax_code": t.string().optional(),
                    }
                ).optional(),
                "tax_date": t.integer().optional(),
            }
        ),
        t.proxy(renames["tax.calculation"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "currency",
            "customer",
            "customer_details",
            "expand",
            "line_items",
            "shipping_cost",
            "tax_date",
        ),
    )
    functions["GetTaxCalculationsCalculationLineItems"] = spec3_sdk.get(
        "/v1/tax/calculations/{calculation}/line_items",
        t.struct(
            {
                "calculation": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["tax.calculation_line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTaxTransactionsCreateFromCalculation"] = spec3_sdk.post(
        "/v1/tax/transactions/create_from_calculation",
        t.struct(
            {
                "calculation": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "reference": t.string(),
            }
        ),
        t.proxy(renames["tax.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("calculation", "expand", "metadata", "reference"),
    )
    functions["PostTaxTransactionsCreateReversal"] = spec3_sdk.post(
        "/v1/tax/transactions/create_reversal",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "line_items": t.array(
                    t.struct(
                        {
                            "amount": t.integer(),
                            "amount_tax": t.integer(),
                            "metadata": t.struct({}).optional(),
                            "original_line_item": t.string(),
                            "quantity": t.integer().optional(),
                            "reference": t.string(),
                        }
                    )
                ).optional(),
                "metadata": t.struct({}).optional(),
                "mode": t.string(),
                "original_transaction": t.string(),
                "reference": t.string(),
                "shipping_cost": t.struct(
                    {"amount": t.integer(), "amount_tax": t.integer()}
                ).optional(),
            }
        ),
        t.proxy(renames["tax.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "expand",
            "line_items",
            "metadata",
            "mode",
            "original_transaction",
            "reference",
            "shipping_cost",
        ),
    )
    functions["GetTaxTransactionsTransaction"] = spec3_sdk.get(
        "/v1/tax/transactions/{transaction}",
        t.struct({"expand": t.array(t.string()), "transaction": t.string()}),
        t.proxy(renames["tax.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTaxTransactionsTransactionLineItems"] = spec3_sdk.get(
        "/v1/tax/transactions/{transaction}/line_items",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "transaction": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["tax.transaction_line_item"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTaxCodes"] = spec3_sdk.get(
        "/v1/tax_codes",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["tax_code"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTaxCodesId"] = spec3_sdk.get(
        "/v1/tax_codes/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["tax_code"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTaxRates"] = spec3_sdk.get(
        "/v1/tax_rates",
        t.struct(
            {
                "active": t.boolean(),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "inclusive": t.boolean(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["tax_rate"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTaxRates"] = spec3_sdk.post(
        "/v1/tax_rates",
        t.struct(
            {
                "active": t.boolean().optional(),
                "country": t.string().optional(),
                "description": t.string().optional(),
                "display_name": t.string(),
                "expand": t.array(t.string()).optional(),
                "inclusive": t.boolean(),
                "jurisdiction": t.string().optional(),
                "metadata": t.struct({}).optional(),
                "percentage": t.number(),
                "state": t.string().optional(),
                "tax_type": t.string().optional(),
            }
        ),
        t.proxy(renames["tax_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "country",
            "description",
            "display_name",
            "expand",
            "inclusive",
            "jurisdiction",
            "metadata",
            "percentage",
            "state",
            "tax_type",
        ),
    )
    functions["GetTaxRatesTaxRate"] = spec3_sdk.get(
        "/v1/tax_rates/{tax_rate}",
        t.struct({"expand": t.array(t.string()), "tax_rate": t.string()}),
        t.proxy(renames["tax_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTaxRatesTaxRate"] = spec3_sdk.post(
        "/v1/tax_rates/{tax_rate}",
        t.struct(
            {
                "tax_rate": t.string(),
                "active": t.boolean().optional(),
                "country": t.string().optional(),
                "description": t.string().optional(),
                "display_name": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "jurisdiction": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "state": t.string().optional(),
                "tax_type": t.string().optional(),
            }
        ),
        t.proxy(renames["tax_rate"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "active",
            "country",
            "description",
            "display_name",
            "expand",
            "jurisdiction",
            "metadata",
            "state",
            "tax_type",
        ),
    )
    functions["GetTerminalConfigurations"] = spec3_sdk.get(
        "/v1/terminal/configurations",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "is_account_default": t.boolean(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["terminal.configuration"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalConfigurations"] = spec3_sdk.post(
        "/v1/terminal/configurations",
        t.struct(
            {
                "bbpos_wisepos_e": t.struct(
                    {"splashscreen": t.union([t.string(), t.string()]).optional()}
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "tipping": t.union(
                    [
                        t.struct(
                            {
                                "aud": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "cad": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "chf": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "czk": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "dkk": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "eur": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "gbp": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "hkd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "myr": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "nok": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "nzd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "sek": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "sgd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "usd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "verifone_p400": t.struct(
                    {"splashscreen": t.union([t.string(), t.string()]).optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["terminal.configuration"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("bbpos_wisepos_e", "expand", "tipping", "verifone_p400"),
    )
    functions["DeleteTerminalConfigurationsConfiguration"] = spec3_sdk.delete(
        "/v1/terminal/configurations/{configuration}",
        t.struct({"configuration": t.string()}),
        t.proxy(renames["deleted_terminal.configuration"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTerminalConfigurationsConfiguration"] = spec3_sdk.get(
        "/v1/terminal/configurations/{configuration}",
        t.struct({"configuration": t.string(), "expand": t.array(t.string())}),
        t.union(
            [
                t.proxy(renames["terminal.configuration"]),
                t.proxy(renames["deleted_terminal.configuration"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalConfigurationsConfiguration"] = spec3_sdk.post(
        "/v1/terminal/configurations/{configuration}",
        t.struct(
            {
                "configuration": t.string(),
                "bbpos_wisepos_e": t.union(
                    [
                        t.struct(
                            {
                                "splashscreen": t.union(
                                    [t.string(), t.string()]
                                ).optional()
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "tipping": t.union(
                    [
                        t.struct(
                            {
                                "aud": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "cad": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "chf": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "czk": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "dkk": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "eur": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "gbp": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "hkd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "myr": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "nok": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "nzd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "sek": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "sgd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                                "usd": t.struct(
                                    {
                                        "fixed_amounts": t.array(
                                            t.integer()
                                        ).optional(),
                                        "percentages": t.array(t.integer()).optional(),
                                        "smart_tip_threshold": t.integer().optional(),
                                    }
                                ).optional(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "verifone_p400": t.union(
                    [
                        t.struct(
                            {
                                "splashscreen": t.union(
                                    [t.string(), t.string()]
                                ).optional()
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
            }
        ),
        t.union(
            [
                t.proxy(renames["terminal.configuration"]),
                t.proxy(renames["deleted_terminal.configuration"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=("bbpos_wisepos_e", "expand", "tipping", "verifone_p400"),
    )
    functions["PostTerminalConnectionTokens"] = spec3_sdk.post(
        "/v1/terminal/connection_tokens",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "location": t.string().optional(),
            }
        ),
        t.proxy(renames["terminal.connection_token"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "location"),
    )
    functions["GetTerminalLocations"] = spec3_sdk.get(
        "/v1/terminal/locations",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["terminal.location"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalLocations"] = spec3_sdk.post(
        "/v1/terminal/locations",
        t.struct(
            {
                "address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ),
                "configuration_overrides": t.string().optional(),
                "display_name": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["terminal.location"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "configuration_overrides",
            "display_name",
            "expand",
            "metadata",
        ),
    )
    functions["DeleteTerminalLocationsLocation"] = spec3_sdk.delete(
        "/v1/terminal/locations/{location}",
        t.struct({"location": t.string()}),
        t.proxy(renames["deleted_terminal.location"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTerminalLocationsLocation"] = spec3_sdk.get(
        "/v1/terminal/locations/{location}",
        t.struct({"expand": t.array(t.string()), "location": t.string()}),
        t.union(
            [
                t.proxy(renames["terminal.location"]),
                t.proxy(renames["deleted_terminal.location"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalLocationsLocation"] = spec3_sdk.post(
        "/v1/terminal/locations/{location}",
        t.struct(
            {
                "location": t.string(),
                "address": t.struct(
                    {
                        "city": t.string().optional(),
                        "country": t.string().optional(),
                        "line1": t.string().optional(),
                        "line2": t.string().optional(),
                        "postal_code": t.string().optional(),
                        "state": t.string().optional(),
                    }
                ).optional(),
                "configuration_overrides": t.string().optional(),
                "display_name": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.union(
            [
                t.proxy(renames["terminal.location"]),
                t.proxy(renames["deleted_terminal.location"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "address",
            "configuration_overrides",
            "display_name",
            "expand",
            "metadata",
        ),
    )
    functions["GetTerminalReaders"] = spec3_sdk.get(
        "/v1/terminal/readers",
        t.struct(
            {
                "device_type": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "location": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["terminal.reader"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalReaders"] = spec3_sdk.post(
        "/v1/terminal/readers",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "label": t.string().optional(),
                "location": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "registration_code": t.string(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "label", "location", "metadata", "registration_code"),
    )
    functions["DeleteTerminalReadersReader"] = spec3_sdk.delete(
        "/v1/terminal/readers/{reader}",
        t.struct({"reader": t.string()}),
        t.proxy(renames["deleted_terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTerminalReadersReader"] = spec3_sdk.get(
        "/v1/terminal/readers/{reader}",
        t.struct({"expand": t.array(t.string()), "reader": t.string()}),
        t.union(
            [
                t.proxy(renames["terminal.reader"]),
                t.proxy(renames["deleted_terminal.reader"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTerminalReadersReader"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}",
        t.struct(
            {
                "reader": t.string(),
                "expand": t.array(t.string()).optional(),
                "label": t.string().optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.union(
            [
                t.proxy(renames["terminal.reader"]),
                t.proxy(renames["deleted_terminal.reader"]),
            ]
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "label", "metadata"),
    )
    functions["PostTerminalReadersReaderCancelAction"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}/cancel_action",
        t.struct({"reader": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTerminalReadersReaderProcessPaymentIntent"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}/process_payment_intent",
        t.struct(
            {
                "reader": t.string(),
                "expand": t.array(t.string()).optional(),
                "payment_intent": t.string(),
                "process_config": t.struct(
                    {
                        "skip_tipping": t.boolean().optional(),
                        "tipping": t.struct(
                            {"amount_eligible": t.integer().optional()}
                        ).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "payment_intent", "process_config"),
    )
    functions["PostTerminalReadersReaderProcessSetupIntent"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}/process_setup_intent",
        t.struct(
            {
                "reader": t.string(),
                "customer_consent_collected": t.boolean(),
                "expand": t.array(t.string()).optional(),
                "setup_intent": t.string(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("customer_consent_collected", "expand", "setup_intent"),
    )
    functions["PostTerminalReadersReaderRefundPayment"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}/refund_payment",
        t.struct(
            {
                "reader": t.string(),
                "amount": t.integer().optional(),
                "charge": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "payment_intent": t.string().optional(),
                "refund_application_fee": t.boolean().optional(),
                "reverse_transfer": t.boolean().optional(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "charge",
            "expand",
            "metadata",
            "payment_intent",
            "refund_application_fee",
            "reverse_transfer",
        ),
    )
    functions["PostTerminalReadersReaderSetReaderDisplay"] = spec3_sdk.post(
        "/v1/terminal/readers/{reader}/set_reader_display",
        t.struct(
            {
                "reader": t.string(),
                "cart": t.struct(
                    {
                        "currency": t.string(),
                        "line_items": t.array(
                            t.struct(
                                {
                                    "amount": t.integer(),
                                    "description": t.string(),
                                    "quantity": t.integer(),
                                }
                            )
                        ),
                        "tax": t.integer().optional(),
                        "total": t.integer(),
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "type": t.string(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("cart", "expand", "type"),
    )
    functions["PostTestHelpersCustomersCustomerFundCashBalance"] = spec3_sdk.post(
        "/v1/test_helpers/customers/{customer}/fund_cash_balance",
        t.struct(
            {
                "customer": t.string(),
                "amount": t.integer(),
                "currency": t.string(),
                "expand": t.array(t.string()).optional(),
                "reference": t.string().optional(),
            }
        ),
        t.proxy(renames["customer_cash_balance_transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount", "currency", "expand", "reference"),
    )
    functions["PostTestHelpersIssuingCardsCardShippingDeliver"] = spec3_sdk.post(
        "/v1/test_helpers/issuing/cards/{card}/shipping/deliver",
        t.struct({"card": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersIssuingCardsCardShippingFail"] = spec3_sdk.post(
        "/v1/test_helpers/issuing/cards/{card}/shipping/fail",
        t.struct({"card": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersIssuingCardsCardShippingReturn"] = spec3_sdk.post(
        "/v1/test_helpers/issuing/cards/{card}/shipping/return",
        t.struct({"card": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersIssuingCardsCardShippingShip"] = spec3_sdk.post(
        "/v1/test_helpers/issuing/cards/{card}/shipping/ship",
        t.struct({"card": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["issuing.card"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersRefundsRefundExpire"] = spec3_sdk.post(
        "/v1/test_helpers/refunds/{refund}/expire",
        t.struct({"refund": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["refund"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions[
        "PostTestHelpersTerminalReadersReaderPresentPaymentMethod"
    ] = spec3_sdk.post(
        "/v1/test_helpers/terminal/readers/{reader}/present_payment_method",
        t.struct(
            {
                "reader": t.string(),
                "amount_tip": t.integer().optional(),
                "card_present": t.struct({"number": t.string().optional()}).optional(),
                "expand": t.array(t.string()).optional(),
                "interac_present": t.struct(
                    {"number": t.string().optional()}
                ).optional(),
                "type": t.string().optional(),
            }
        ),
        t.proxy(renames["terminal.reader"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("amount_tip", "card_present", "expand", "interac_present", "type"),
    )
    functions["GetTestHelpersTestClocks"] = spec3_sdk.get(
        "/v1/test_helpers/test_clocks",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["test_helpers.test_clock"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTestHelpersTestClocks"] = spec3_sdk.post(
        "/v1/test_helpers/test_clocks",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "frozen_time": t.integer(),
                "name": t.string().optional(),
            }
        ),
        t.proxy(renames["test_helpers.test_clock"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "frozen_time", "name"),
    )
    functions["DeleteTestHelpersTestClocksTestClock"] = spec3_sdk.delete(
        "/v1/test_helpers/test_clocks/{test_clock}",
        t.struct({"test_clock": t.string()}),
        t.proxy(renames["deleted_test_helpers.test_clock"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTestHelpersTestClocksTestClock"] = spec3_sdk.get(
        "/v1/test_helpers/test_clocks/{test_clock}",
        t.struct({"expand": t.array(t.string()), "test_clock": t.string()}),
        t.proxy(renames["test_helpers.test_clock"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTestHelpersTestClocksTestClockAdvance"] = spec3_sdk.post(
        "/v1/test_helpers/test_clocks/{test_clock}/advance",
        t.struct(
            {
                "test_clock": t.string(),
                "expand": t.array(t.string()).optional(),
                "frozen_time": t.integer(),
            }
        ),
        t.proxy(renames["test_helpers.test_clock"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "frozen_time"),
    )
    functions["PostTestHelpersTreasuryInboundTransfersIdFail"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/inbound_transfers/{id}/fail",
        t.struct(
            {
                "id": t.string(),
                "expand": t.array(t.string()).optional(),
                "failure_details": t.struct({"code": t.string().optional()}).optional(),
            }
        ),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "failure_details"),
    )
    functions["PostTestHelpersTreasuryInboundTransfersIdReturn"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/inbound_transfers/{id}/return",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersTreasuryInboundTransfersIdSucceed"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersTreasuryOutboundPaymentsIdFail"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_payments/{id}/fail",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersTreasuryOutboundPaymentsIdPost"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_payments/{id}/post",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["PostTestHelpersTreasuryOutboundPaymentsIdReturn"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_payments/{id}/return",
        t.struct(
            {
                "id": t.string(),
                "expand": t.array(t.string()).optional(),
                "returned_details": t.struct(
                    {"code": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "returned_details"),
    )
    functions[
        "PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail"
    ] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail",
        t.struct(
            {"outbound_transfer": t.string(), "expand": t.array(t.string()).optional()}
        ),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions[
        "PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost"
    ] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post",
        t.struct(
            {"outbound_transfer": t.string(), "expand": t.array(t.string()).optional()}
        ),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions[
        "PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn"
    ] = spec3_sdk.post(
        "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return",
        t.struct(
            {
                "outbound_transfer": t.string(),
                "expand": t.array(t.string()).optional(),
                "returned_details": t.struct(
                    {"code": t.string().optional()}
                ).optional(),
            }
        ),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "returned_details"),
    )
    functions["PostTestHelpersTreasuryReceivedCredits"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/received_credits",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string(),
                "initiating_payment_method_details": t.struct(
                    {
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_name": t.string().optional(),
                                "account_number": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "network": t.string(),
            }
        ),
        t.proxy(renames["treasury.received_credit"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "expand",
            "financial_account",
            "initiating_payment_method_details",
            "network",
        ),
    )
    functions["PostTestHelpersTreasuryReceivedDebits"] = spec3_sdk.post(
        "/v1/test_helpers/treasury/received_debits",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string(),
                "initiating_payment_method_details": t.struct(
                    {
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_name": t.string().optional(),
                                "account_number": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "network": t.string(),
            }
        ),
        t.proxy(renames["treasury.received_debit"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "expand",
            "financial_account",
            "initiating_payment_method_details",
            "network",
        ),
    )
    functions["PostTokens"] = spec3_sdk.post(
        "/v1/tokens",
        t.struct(
            {
                "account": t.struct(
                    {
                        "business_type": t.string().optional(),
                        "company": t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ).optional(),
                                "address_kana": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                        "town": t.string().optional(),
                                    }
                                ).optional(),
                                "address_kanji": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                        "town": t.string().optional(),
                                    }
                                ).optional(),
                                "directors_provided": t.boolean().optional(),
                                "executives_provided": t.boolean().optional(),
                                "export_license_id": t.string().optional(),
                                "export_purpose_code": t.string().optional(),
                                "name": t.string().optional(),
                                "name_kana": t.string().optional(),
                                "name_kanji": t.string().optional(),
                                "owners_provided": t.boolean().optional(),
                                "ownership_declaration": t.struct(
                                    {
                                        "date": t.integer().optional(),
                                        "ip": t.string().optional(),
                                        "user_agent": t.string().optional(),
                                    }
                                ).optional(),
                                "ownership_declaration_shown_and_signed": t.boolean().optional(),
                                "phone": t.string().optional(),
                                "registration_number": t.string().optional(),
                                "structure": t.string().optional(),
                                "tax_id": t.string().optional(),
                                "tax_id_registrar": t.string().optional(),
                                "vat_id": t.string().optional(),
                                "verification": t.struct(
                                    {
                                        "document": t.struct(
                                            {
                                                "back": t.string().optional(),
                                                "front": t.string().optional(),
                                            }
                                        ).optional()
                                    }
                                ).optional(),
                            }
                        ).optional(),
                        "individual": t.struct(
                            {
                                "address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ).optional(),
                                "address_kana": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                        "town": t.string().optional(),
                                    }
                                ).optional(),
                                "address_kanji": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                        "town": t.string().optional(),
                                    }
                                ).optional(),
                                "dob": t.union(
                                    [
                                        t.struct(
                                            {
                                                "day": t.integer(),
                                                "month": t.integer(),
                                                "year": t.integer(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.string().optional(),
                                "first_name": t.string().optional(),
                                "first_name_kana": t.string().optional(),
                                "first_name_kanji": t.string().optional(),
                                "full_name_aliases": t.union(
                                    [t.array(t.string()), t.string()]
                                ).optional(),
                                "gender": t.string().optional(),
                                "id_number": t.string().optional(),
                                "id_number_secondary": t.string().optional(),
                                "last_name": t.string().optional(),
                                "last_name_kana": t.string().optional(),
                                "last_name_kanji": t.string().optional(),
                                "maiden_name": t.string().optional(),
                                "metadata": t.union(
                                    [t.struct({}), t.string()]
                                ).optional(),
                                "phone": t.string().optional(),
                                "political_exposure": t.string().optional(),
                                "registered_address": t.struct(
                                    {
                                        "city": t.string().optional(),
                                        "country": t.string().optional(),
                                        "line1": t.string().optional(),
                                        "line2": t.string().optional(),
                                        "postal_code": t.string().optional(),
                                        "state": t.string().optional(),
                                    }
                                ).optional(),
                                "ssn_last_4": t.string().optional(),
                                "verification": t.struct(
                                    {
                                        "additional_document": t.struct(
                                            {
                                                "back": t.string().optional(),
                                                "front": t.string().optional(),
                                            }
                                        ).optional(),
                                        "document": t.struct(
                                            {
                                                "back": t.string().optional(),
                                                "front": t.string().optional(),
                                            }
                                        ).optional(),
                                    }
                                ).optional(),
                            }
                        ).optional(),
                        "tos_shown_and_accepted": t.boolean().optional(),
                    }
                ).optional(),
                "bank_account": t.struct(
                    {
                        "account_holder_name": t.string().optional(),
                        "account_holder_type": t.string().optional(),
                        "account_number": t.string(),
                        "account_type": t.string().optional(),
                        "country": t.string(),
                        "currency": t.string().optional(),
                        "routing_number": t.string().optional(),
                    }
                ).optional(),
                "card": t.union(
                    [
                        t.struct(
                            {
                                "address_city": t.string().optional(),
                                "address_country": t.string().optional(),
                                "address_line1": t.string().optional(),
                                "address_line2": t.string().optional(),
                                "address_state": t.string().optional(),
                                "address_zip": t.string().optional(),
                                "currency": t.string().optional(),
                                "cvc": t.string().optional(),
                                "exp_month": t.string(),
                                "exp_year": t.string(),
                                "name": t.string().optional(),
                                "number": t.string(),
                            }
                        ),
                        t.string(),
                    ]
                ).optional(),
                "customer": t.string().optional(),
                "cvc_update": t.struct({"cvc": t.string()}).optional(),
                "expand": t.array(t.string()).optional(),
                "person": t.struct(
                    {
                        "address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "address_kana": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "address_kanji": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                                "town": t.string().optional(),
                            }
                        ).optional(),
                        "dob": t.union(
                            [
                                t.struct(
                                    {
                                        "day": t.integer(),
                                        "month": t.integer(),
                                        "year": t.integer(),
                                    }
                                ),
                                t.string(),
                            ]
                        ).optional(),
                        "documents": t.struct(
                            {
                                "company_authorization": t.struct(
                                    {"files": t.array(t.string()).optional()}
                                ).optional(),
                                "passport": t.struct(
                                    {"files": t.array(t.string()).optional()}
                                ).optional(),
                                "visa": t.struct(
                                    {"files": t.array(t.string()).optional()}
                                ).optional(),
                            }
                        ).optional(),
                        "email": t.string().optional(),
                        "first_name": t.string().optional(),
                        "first_name_kana": t.string().optional(),
                        "first_name_kanji": t.string().optional(),
                        "full_name_aliases": t.union(
                            [t.array(t.string()), t.string()]
                        ).optional(),
                        "gender": t.string().optional(),
                        "id_number": t.string().optional(),
                        "id_number_secondary": t.string().optional(),
                        "last_name": t.string().optional(),
                        "last_name_kana": t.string().optional(),
                        "last_name_kanji": t.string().optional(),
                        "maiden_name": t.string().optional(),
                        "metadata": t.union([t.struct({}), t.string()]).optional(),
                        "nationality": t.string().optional(),
                        "phone": t.string().optional(),
                        "political_exposure": t.string().optional(),
                        "registered_address": t.struct(
                            {
                                "city": t.string().optional(),
                                "country": t.string().optional(),
                                "line1": t.string().optional(),
                                "line2": t.string().optional(),
                                "postal_code": t.string().optional(),
                                "state": t.string().optional(),
                            }
                        ).optional(),
                        "relationship": t.struct(
                            {
                                "director": t.boolean().optional(),
                                "executive": t.boolean().optional(),
                                "owner": t.boolean().optional(),
                                "percent_ownership": t.union(
                                    [t.number(), t.string()]
                                ).optional(),
                                "representative": t.boolean().optional(),
                                "title": t.string().optional(),
                            }
                        ).optional(),
                        "ssn_last_4": t.string().optional(),
                        "verification": t.struct(
                            {
                                "additional_document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                                "document": t.struct(
                                    {
                                        "back": t.string().optional(),
                                        "front": t.string().optional(),
                                    }
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "pii": t.struct({"id_number": t.string().optional()}).optional(),
            }
        ),
        t.proxy(renames["token"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "account",
            "bank_account",
            "card",
            "customer",
            "cvc_update",
            "expand",
            "person",
            "pii",
        ),
    )
    functions["GetTokensToken"] = spec3_sdk.get(
        "/v1/tokens/{token}",
        t.struct({"expand": t.array(t.string()), "token": t.string()}),
        t.proxy(renames["token"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTopups"] = spec3_sdk.get(
        "/v1/topups",
        t.struct(
            {
                "amount": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["topup"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTopups"] = spec3_sdk.post(
        "/v1/topups",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "source": t.string().optional(),
                "statement_descriptor": t.string().optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["topup"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "expand",
            "metadata",
            "source",
            "statement_descriptor",
            "transfer_group",
        ),
    )
    functions["GetTopupsTopup"] = spec3_sdk.get(
        "/v1/topups/{topup}",
        t.struct({"expand": t.array(t.string()), "topup": t.string()}),
        t.proxy(renames["topup"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTopupsTopup"] = spec3_sdk.post(
        "/v1/topups/{topup}",
        t.struct(
            {
                "topup": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["topup"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("description", "expand", "metadata"),
    )
    functions["PostTopupsTopupCancel"] = spec3_sdk.post(
        "/v1/topups/{topup}/cancel",
        t.struct({"topup": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["topup"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetTransfers"] = spec3_sdk.get(
        "/v1/transfers",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "destination": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
                "transfer_group": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["transfer"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTransfers"] = spec3_sdk.post(
        "/v1/transfers",
        t.struct(
            {
                "amount": t.integer().optional(),
                "currency": t.string(),
                "description": t.string().optional(),
                "destination": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "source_transaction": t.string().optional(),
                "source_type": t.string().optional(),
                "transfer_group": t.string().optional(),
            }
        ),
        t.proxy(renames["transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "destination",
            "expand",
            "metadata",
            "source_transaction",
            "source_type",
            "transfer_group",
        ),
    )
    functions["GetTransfersIdReversals"] = spec3_sdk.get(
        "/v1/transfers/{id}/reversals",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "id": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["transfer_reversal"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTransfersIdReversals"] = spec3_sdk.post(
        "/v1/transfers/{id}/reversals",
        t.struct(
            {
                "id": t.string(),
                "amount": t.integer().optional(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "refund_application_fee": t.boolean().optional(),
            }
        ),
        t.proxy(renames["transfer_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "description",
            "expand",
            "metadata",
            "refund_application_fee",
        ),
    )
    functions["GetTransfersTransfer"] = spec3_sdk.get(
        "/v1/transfers/{transfer}",
        t.struct({"expand": t.array(t.string()), "transfer": t.string()}),
        t.proxy(renames["transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTransfersTransfer"] = spec3_sdk.post(
        "/v1/transfers/{transfer}",
        t.struct(
            {
                "transfer": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("description", "expand", "metadata"),
    )
    functions["GetTransfersTransferReversalsId"] = spec3_sdk.get(
        "/v1/transfers/{transfer}/reversals/{id}",
        t.struct(
            {"expand": t.array(t.string()), "id": t.string(), "transfer": t.string()}
        ),
        t.proxy(renames["transfer_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTransfersTransferReversalsId"] = spec3_sdk.post(
        "/v1/transfers/{transfer}/reversals/{id}",
        t.struct(
            {
                "id": t.string(),
                "transfer": t.string(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
            }
        ),
        t.proxy(renames["transfer_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata"),
    )
    functions["GetTreasuryCreditReversals"] = spec3_sdk.get(
        "/v1/treasury/credit_reversals",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "received_credit": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.credit_reversal"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryCreditReversals"] = spec3_sdk.post(
        "/v1/treasury/credit_reversals",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "received_credit": t.string(),
            }
        ),
        t.proxy(renames["treasury.credit_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata", "received_credit"),
    )
    functions["GetTreasuryCreditReversalsCreditReversal"] = spec3_sdk.get(
        "/v1/treasury/credit_reversals/{credit_reversal}",
        t.struct({"credit_reversal": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["treasury.credit_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryDebitReversals"] = spec3_sdk.get(
        "/v1/treasury/debit_reversals",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "received_debit": t.string(),
                "resolution": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.debit_reversal"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryDebitReversals"] = spec3_sdk.post(
        "/v1/treasury/debit_reversals",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "metadata": t.struct({}).optional(),
                "received_debit": t.string(),
            }
        ),
        t.proxy(renames["treasury.debit_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "metadata", "received_debit"),
    )
    functions["GetTreasuryDebitReversalsDebitReversal"] = spec3_sdk.get(
        "/v1/treasury/debit_reversals/{debit_reversal}",
        t.struct({"debit_reversal": t.string(), "expand": t.array(t.string())}),
        t.proxy(renames["treasury.debit_reversal"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryFinancialAccounts"] = spec3_sdk.get(
        "/v1/treasury/financial_accounts",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.financial_account"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryFinancialAccounts"] = spec3_sdk.post(
        "/v1/treasury/financial_accounts",
        t.struct(
            {
                "expand": t.array(t.string()).optional(),
                "features": t.struct(
                    {
                        "card_issuing": t.struct({"requested": t.boolean()}).optional(),
                        "deposit_insurance": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                        "financial_addresses": t.struct(
                            {"aba": t.struct({"requested": t.boolean()}).optional()}
                        ).optional(),
                        "inbound_transfers": t.struct(
                            {"ach": t.struct({"requested": t.boolean()}).optional()}
                        ).optional(),
                        "intra_stripe_flows": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                        "outbound_payments": t.struct(
                            {
                                "ach": t.struct({"requested": t.boolean()}).optional(),
                                "us_domestic_wire": t.struct(
                                    {"requested": t.boolean()}
                                ).optional(),
                            }
                        ).optional(),
                        "outbound_transfers": t.struct(
                            {
                                "ach": t.struct({"requested": t.boolean()}).optional(),
                                "us_domestic_wire": t.struct(
                                    {"requested": t.boolean()}
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "platform_restrictions": t.struct(
                    {
                        "inbound_flows": t.string().optional(),
                        "outbound_flows": t.string().optional(),
                    }
                ).optional(),
                "supported_currencies": t.array(t.string()),
            }
        ),
        t.proxy(renames["treasury.financial_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "expand",
            "features",
            "metadata",
            "platform_restrictions",
            "supported_currencies",
        ),
    )
    functions["GetTreasuryFinancialAccountsFinancialAccount"] = spec3_sdk.get(
        "/v1/treasury/financial_accounts/{financial_account}",
        t.struct({"expand": t.array(t.string()), "financial_account": t.string()}),
        t.proxy(renames["treasury.financial_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryFinancialAccountsFinancialAccount"] = spec3_sdk.post(
        "/v1/treasury/financial_accounts/{financial_account}",
        t.struct(
            {
                "financial_account": t.string(),
                "expand": t.array(t.string()).optional(),
                "features": t.struct(
                    {
                        "card_issuing": t.struct({"requested": t.boolean()}).optional(),
                        "deposit_insurance": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                        "financial_addresses": t.struct(
                            {"aba": t.struct({"requested": t.boolean()}).optional()}
                        ).optional(),
                        "inbound_transfers": t.struct(
                            {"ach": t.struct({"requested": t.boolean()}).optional()}
                        ).optional(),
                        "intra_stripe_flows": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                        "outbound_payments": t.struct(
                            {
                                "ach": t.struct({"requested": t.boolean()}).optional(),
                                "us_domestic_wire": t.struct(
                                    {"requested": t.boolean()}
                                ).optional(),
                            }
                        ).optional(),
                        "outbound_transfers": t.struct(
                            {
                                "ach": t.struct({"requested": t.boolean()}).optional(),
                                "us_domestic_wire": t.struct(
                                    {"requested": t.boolean()}
                                ).optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "metadata": t.struct({}).optional(),
                "platform_restrictions": t.struct(
                    {
                        "inbound_flows": t.string().optional(),
                        "outbound_flows": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["treasury.financial_account"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand", "features", "metadata", "platform_restrictions"),
    )
    functions["GetTreasuryFinancialAccountsFinancialAccountFeatures"] = spec3_sdk.get(
        "/v1/treasury/financial_accounts/{financial_account}/features",
        t.struct({"expand": t.array(t.string()), "financial_account": t.string()}),
        t.proxy(renames["treasury.financial_account_features"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryFinancialAccountsFinancialAccountFeatures"] = spec3_sdk.post(
        "/v1/treasury/financial_accounts/{financial_account}/features",
        t.struct(
            {
                "financial_account": t.string(),
                "card_issuing": t.struct({"requested": t.boolean()}).optional(),
                "deposit_insurance": t.struct({"requested": t.boolean()}).optional(),
                "expand": t.array(t.string()).optional(),
                "financial_addresses": t.struct(
                    {"aba": t.struct({"requested": t.boolean()}).optional()}
                ).optional(),
                "inbound_transfers": t.struct(
                    {"ach": t.struct({"requested": t.boolean()}).optional()}
                ).optional(),
                "intra_stripe_flows": t.struct({"requested": t.boolean()}).optional(),
                "outbound_payments": t.struct(
                    {
                        "ach": t.struct({"requested": t.boolean()}).optional(),
                        "us_domestic_wire": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                    }
                ).optional(),
                "outbound_transfers": t.struct(
                    {
                        "ach": t.struct({"requested": t.boolean()}).optional(),
                        "us_domestic_wire": t.struct(
                            {"requested": t.boolean()}
                        ).optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["treasury.financial_account_features"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "card_issuing",
            "deposit_insurance",
            "expand",
            "financial_addresses",
            "inbound_transfers",
            "intra_stripe_flows",
            "outbound_payments",
            "outbound_transfers",
        ),
    )
    functions["GetTreasuryInboundTransfers"] = spec3_sdk.get(
        "/v1/treasury/inbound_transfers",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.inbound_transfer"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryInboundTransfers"] = spec3_sdk.post(
        "/v1/treasury/inbound_transfers",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string(),
                "metadata": t.struct({}).optional(),
                "origin_payment_method": t.string(),
                "statement_descriptor": t.string().optional(),
            }
        ),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "expand",
            "financial_account",
            "metadata",
            "origin_payment_method",
            "statement_descriptor",
        ),
    )
    functions["GetTreasuryInboundTransfersId"] = spec3_sdk.get(
        "/v1/treasury/inbound_transfers/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryInboundTransfersInboundTransferCancel"] = spec3_sdk.post(
        "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel",
        t.struct(
            {"inbound_transfer": t.string(), "expand": t.array(t.string()).optional()}
        ),
        t.proxy(renames["treasury.inbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetTreasuryOutboundPayments"] = spec3_sdk.get(
        "/v1/treasury/outbound_payments",
        t.struct(
            {
                "customer": t.string(),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.outbound_payment"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryOutboundPayments"] = spec3_sdk.post(
        "/v1/treasury/outbound_payments",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "customer": t.string().optional(),
                "description": t.string().optional(),
                "destination_payment_method": t.string().optional(),
                "destination_payment_method_data": t.struct(
                    {
                        "billing_details": t.struct(
                            {
                                "address": t.union(
                                    [
                                        t.struct(
                                            {
                                                "city": t.string().optional(),
                                                "country": t.string().optional(),
                                                "line1": t.string().optional(),
                                                "line2": t.string().optional(),
                                                "postal_code": t.string().optional(),
                                                "state": t.string().optional(),
                                            }
                                        ),
                                        t.string(),
                                    ]
                                ).optional(),
                                "email": t.union([t.string(), t.string()]).optional(),
                                "name": t.string().optional(),
                                "phone": t.string().optional(),
                            }
                        ).optional(),
                        "financial_account": t.string().optional(),
                        "metadata": t.struct({}).optional(),
                        "type": t.string(),
                        "us_bank_account": t.struct(
                            {
                                "account_holder_type": t.string().optional(),
                                "account_number": t.string().optional(),
                                "account_type": t.string().optional(),
                                "financial_connections_account": t.string().optional(),
                                "routing_number": t.string().optional(),
                            }
                        ).optional(),
                    }
                ).optional(),
                "destination_payment_method_options": t.struct(
                    {
                        "us_bank_account": t.union(
                            [t.struct({"network": t.string().optional()}), t.string()]
                        ).optional()
                    }
                ).optional(),
                "end_user_details": t.struct(
                    {"ip_address": t.string().optional(), "present": t.boolean()}
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string(),
                "metadata": t.struct({}).optional(),
                "statement_descriptor": t.string().optional(),
            }
        ),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "customer",
            "description",
            "destination_payment_method",
            "destination_payment_method_data",
            "destination_payment_method_options",
            "end_user_details",
            "expand",
            "financial_account",
            "metadata",
            "statement_descriptor",
        ),
    )
    functions["GetTreasuryOutboundPaymentsId"] = spec3_sdk.get(
        "/v1/treasury/outbound_payments/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryOutboundPaymentsIdCancel"] = spec3_sdk.post(
        "/v1/treasury/outbound_payments/{id}/cancel",
        t.struct({"id": t.string(), "expand": t.array(t.string()).optional()}),
        t.proxy(renames["treasury.outbound_payment"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetTreasuryOutboundTransfers"] = spec3_sdk.get(
        "/v1/treasury/outbound_transfers",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.outbound_transfer"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryOutboundTransfers"] = spec3_sdk.post(
        "/v1/treasury/outbound_transfers",
        t.struct(
            {
                "amount": t.integer(),
                "currency": t.string(),
                "description": t.string().optional(),
                "destination_payment_method": t.string().optional(),
                "destination_payment_method_options": t.struct(
                    {
                        "us_bank_account": t.union(
                            [t.struct({"network": t.string().optional()}), t.string()]
                        ).optional()
                    }
                ).optional(),
                "expand": t.array(t.string()).optional(),
                "financial_account": t.string(),
                "metadata": t.struct({}).optional(),
                "statement_descriptor": t.string().optional(),
            }
        ),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "amount",
            "currency",
            "description",
            "destination_payment_method",
            "destination_payment_method_options",
            "expand",
            "financial_account",
            "metadata",
            "statement_descriptor",
        ),
    )
    functions["GetTreasuryOutboundTransfersOutboundTransfer"] = spec3_sdk.get(
        "/v1/treasury/outbound_transfers/{outbound_transfer}",
        t.struct({"expand": t.array(t.string()), "outbound_transfer": t.string()}),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostTreasuryOutboundTransfersOutboundTransferCancel"] = spec3_sdk.post(
        "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel",
        t.struct(
            {"outbound_transfer": t.string(), "expand": t.array(t.string()).optional()}
        ),
        t.proxy(renames["treasury.outbound_transfer"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=("expand",),
    )
    functions["GetTreasuryReceivedCredits"] = spec3_sdk.get(
        "/v1/treasury/received_credits",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "linked_flows": t.struct({"source_flow_type": t.string()}),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.received_credit"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryReceivedCreditsId"] = spec3_sdk.get(
        "/v1/treasury/received_credits/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.received_credit"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryReceivedDebits"] = spec3_sdk.get(
        "/v1/treasury/received_debits",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "starting_after": t.string(),
                "status": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.received_debit"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryReceivedDebitsId"] = spec3_sdk.get(
        "/v1/treasury/received_debits/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.received_debit"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryTransactionEntries"] = spec3_sdk.get(
        "/v1/treasury/transaction_entries",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "effective_at": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "order_by": t.string(),
                "starting_after": t.string(),
                "transaction": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.transaction_entry"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryTransactionEntriesId"] = spec3_sdk.get(
        "/v1/treasury/transaction_entries/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.transaction_entry"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryTransactions"] = spec3_sdk.get(
        "/v1/treasury/transactions",
        t.struct(
            {
                "created": t.union(
                    [
                        t.struct(
                            {
                                "gt": t.integer().optional(),
                                "gte": t.integer().optional(),
                                "lt": t.integer().optional(),
                                "lte": t.integer().optional(),
                            }
                        ),
                        t.integer(),
                    ]
                ),
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "financial_account": t.string(),
                "limit": t.integer(),
                "order_by": t.string(),
                "starting_after": t.string(),
                "status": t.string(),
                "status_transitions": t.struct(
                    {
                        "posted_at": t.union(
                            [
                                t.struct(
                                    {
                                        "gt": t.integer().optional(),
                                        "gte": t.integer().optional(),
                                        "lt": t.integer().optional(),
                                        "lte": t.integer().optional(),
                                    }
                                ),
                                t.integer(),
                            ]
                        ).optional()
                    }
                ),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["treasury.transaction"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetTreasuryTransactionsId"] = spec3_sdk.get(
        "/v1/treasury/transactions/{id}",
        t.struct({"expand": t.array(t.string()), "id": t.string()}),
        t.proxy(renames["treasury.transaction"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetWebhookEndpoints"] = spec3_sdk.get(
        "/v1/webhook_endpoints",
        t.struct(
            {
                "ending_before": t.string(),
                "expand": t.array(t.string()),
                "limit": t.integer(),
                "starting_after": t.string(),
            }
        ),
        t.struct(
            {
                "data": t.array(t.proxy(renames["webhook_endpoint"])),
                "has_more": t.boolean(),
                "object": t.string(),
                "url": t.string(),
            }
        ),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostWebhookEndpoints"] = spec3_sdk.post(
        "/v1/webhook_endpoints",
        t.struct(
            {
                "api_version": t.string().optional(),
                "connect": t.boolean().optional(),
                "description": t.string().optional(),
                "enabled_events": t.array(t.string()),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "url": t.string(),
            }
        ),
        t.proxy(renames["webhook_endpoint"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "api_version",
            "connect",
            "description",
            "enabled_events",
            "expand",
            "metadata",
            "url",
        ),
    )
    functions["DeleteWebhookEndpointsWebhookEndpoint"] = spec3_sdk.delete(
        "/v1/webhook_endpoints/{webhook_endpoint}",
        t.struct({"webhook_endpoint": t.string()}),
        t.proxy(renames["deleted_webhook_endpoint"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["GetWebhookEndpointsWebhookEndpoint"] = spec3_sdk.get(
        "/v1/webhook_endpoints/{webhook_endpoint}",
        t.struct({"expand": t.array(t.string()), "webhook_endpoint": t.string()}),
        t.proxy(renames["webhook_endpoint"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(),
    )
    functions["PostWebhookEndpointsWebhookEndpoint"] = spec3_sdk.post(
        "/v1/webhook_endpoints/{webhook_endpoint}",
        t.struct(
            {
                "webhook_endpoint": t.string(),
                "description": t.string().optional(),
                "disabled": t.boolean().optional(),
                "enabled_events": t.array(t.string()).optional(),
                "expand": t.array(t.string()).optional(),
                "metadata": t.union([t.struct({}), t.string()]).optional(),
                "url": t.string().optional(),
            }
        ),
        t.proxy(renames["webhook_endpoint"]),
        content_type="application/x-www-form-urlencoded",
        body_fields=(
            "description",
            "disabled",
            "enabled_events",
            "expand",
            "metadata",
            "url",
        ),
    )

    return Import(
        importer="spec3_sdk",
        renames=renames,
        types=Box(types),
        functions=Box(functions),
    )
