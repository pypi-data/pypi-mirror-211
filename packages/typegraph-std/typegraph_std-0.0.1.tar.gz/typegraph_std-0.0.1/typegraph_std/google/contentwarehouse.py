from typegraph import t
from box import Box
from typegraph.importers.base.importer import Import
from typegraph.runtimes.http import HTTPRuntime


def import_contentwarehouse() -> Import:
    contentwarehouse = HTTPRuntime("https://contentwarehouse.googleapis.com/")

    renames = {
        "ErrorResponse": "_contentwarehouse_1_ErrorResponse",
        "KnowledgeAnswersRangeConstraintRangeEndpointIn": "_contentwarehouse_2_KnowledgeAnswersRangeConstraintRangeEndpointIn",
        "KnowledgeAnswersRangeConstraintRangeEndpointOut": "_contentwarehouse_3_KnowledgeAnswersRangeConstraintRangeEndpointOut",
        "TrawlerFetchBodyDataIn": "_contentwarehouse_4_TrawlerFetchBodyDataIn",
        "TrawlerFetchBodyDataOut": "_contentwarehouse_5_TrawlerFetchBodyDataOut",
        "SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataIn": "_contentwarehouse_6_SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataIn",
        "SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataOut": "_contentwarehouse_7_SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataOut",
        "KnowledgeAnswersMeasurementTypeIn": "_contentwarehouse_8_KnowledgeAnswersMeasurementTypeIn",
        "KnowledgeAnswersMeasurementTypeOut": "_contentwarehouse_9_KnowledgeAnswersMeasurementTypeOut",
        "ResearchScienceSearchReplicaIn": "_contentwarehouse_10_ResearchScienceSearchReplicaIn",
        "ResearchScienceSearchReplicaOut": "_contentwarehouse_11_ResearchScienceSearchReplicaOut",
        "ImageUnderstandingIndexingMetaDataIn": "_contentwarehouse_12_ImageUnderstandingIndexingMetaDataIn",
        "ImageUnderstandingIndexingMetaDataOut": "_contentwarehouse_13_ImageUnderstandingIndexingMetaDataOut",
        "GoogleTypeColorIn": "_contentwarehouse_14_GoogleTypeColorIn",
        "GoogleTypeColorOut": "_contentwarehouse_15_GoogleTypeColorOut",
        "SecurityCredentialsRbacRoleProtoIn": "_contentwarehouse_16_SecurityCredentialsRbacRoleProtoIn",
        "SecurityCredentialsRbacRoleProtoOut": "_contentwarehouse_17_SecurityCredentialsRbacRoleProtoOut",
        "AbuseiamVerdictRestrictionIn": "_contentwarehouse_18_AbuseiamVerdictRestrictionIn",
        "AbuseiamVerdictRestrictionOut": "_contentwarehouse_19_AbuseiamVerdictRestrictionOut",
        "QualityNsrNsrChunksWithSourceInfoIn": "_contentwarehouse_20_QualityNsrNsrChunksWithSourceInfoIn",
        "QualityNsrNsrChunksWithSourceInfoOut": "_contentwarehouse_21_QualityNsrNsrChunksWithSourceInfoOut",
        "IndexingUrlPatternUrlTreeUrlTreeKeyIn": "_contentwarehouse_22_IndexingUrlPatternUrlTreeUrlTreeKeyIn",
        "IndexingUrlPatternUrlTreeUrlTreeKeyOut": "_contentwarehouse_23_IndexingUrlPatternUrlTreeUrlTreeKeyOut",
        "NlpSemanticParsingModelsNarrativeNewsNewsProviderIn": "_contentwarehouse_24_NlpSemanticParsingModelsNarrativeNewsNewsProviderIn",
        "NlpSemanticParsingModelsNarrativeNewsNewsProviderOut": "_contentwarehouse_25_NlpSemanticParsingModelsNarrativeNewsNewsProviderOut",
        "DrishtiVesperUserReportUserReportedThumbnailIn": "_contentwarehouse_26_DrishtiVesperUserReportUserReportedThumbnailIn",
        "DrishtiVesperUserReportUserReportedThumbnailOut": "_contentwarehouse_27_DrishtiVesperUserReportUserReportedThumbnailOut",
        "PhotosVisionObjectrecROIIn": "_contentwarehouse_28_PhotosVisionObjectrecROIIn",
        "PhotosVisionObjectrecROIOut": "_contentwarehouse_29_PhotosVisionObjectrecROIOut",
        "AppsPeopleOzExternalMergedpeopleapiInterestIn": "_contentwarehouse_30_AppsPeopleOzExternalMergedpeopleapiInterestIn",
        "AppsPeopleOzExternalMergedpeopleapiInterestOut": "_contentwarehouse_31_AppsPeopleOzExternalMergedpeopleapiInterestOut",
        "KnowledgeAnswersIntentQueryFunctionCallSignalsIn": "_contentwarehouse_32_KnowledgeAnswersIntentQueryFunctionCallSignalsIn",
        "KnowledgeAnswersIntentQueryFunctionCallSignalsOut": "_contentwarehouse_33_KnowledgeAnswersIntentQueryFunctionCallSignalsOut",
        "HomeGraphCommonRoutingTableIn": "_contentwarehouse_34_HomeGraphCommonRoutingTableIn",
        "HomeGraphCommonRoutingTableOut": "_contentwarehouse_35_HomeGraphCommonRoutingTableOut",
        "AssistantApiCastCapabilitiesIn": "_contentwarehouse_36_AssistantApiCastCapabilitiesIn",
        "AssistantApiCastCapabilitiesOut": "_contentwarehouse_37_AssistantApiCastCapabilitiesOut",
        "GeostoreVehicleAttributeFilterProtoIn": "_contentwarehouse_38_GeostoreVehicleAttributeFilterProtoIn",
        "GeostoreVehicleAttributeFilterProtoOut": "_contentwarehouse_39_GeostoreVehicleAttributeFilterProtoOut",
        "NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueIn": "_contentwarehouse_40_NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueIn",
        "NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueOut": "_contentwarehouse_41_NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueOut",
        "RepositoryWebrefAnnotationRatingsIn": "_contentwarehouse_42_RepositoryWebrefAnnotationRatingsIn",
        "RepositoryWebrefAnnotationRatingsOut": "_contentwarehouse_43_RepositoryWebrefAnnotationRatingsOut",
        "VideoContentSearchCaptionInfoIn": "_contentwarehouse_44_VideoContentSearchCaptionInfoIn",
        "VideoContentSearchCaptionInfoOut": "_contentwarehouse_45_VideoContentSearchCaptionInfoOut",
        "HtmlrenderWebkitHeadlessProtoModalDialogEventIn": "_contentwarehouse_46_HtmlrenderWebkitHeadlessProtoModalDialogEventIn",
        "HtmlrenderWebkitHeadlessProtoModalDialogEventOut": "_contentwarehouse_47_HtmlrenderWebkitHeadlessProtoModalDialogEventOut",
        "RepositoryWebrefTripleMentionIn": "_contentwarehouse_48_RepositoryWebrefTripleMentionIn",
        "RepositoryWebrefTripleMentionOut": "_contentwarehouse_49_RepositoryWebrefTripleMentionOut",
        "NlpSemanticParsingLocalJoinerIn": "_contentwarehouse_50_NlpSemanticParsingLocalJoinerIn",
        "NlpSemanticParsingLocalJoinerOut": "_contentwarehouse_51_NlpSemanticParsingLocalJoinerOut",
        "RepositoryWebrefClusterProtoMidListRuleIn": "_contentwarehouse_52_RepositoryWebrefClusterProtoMidListRuleIn",
        "RepositoryWebrefClusterProtoMidListRuleOut": "_contentwarehouse_53_RepositoryWebrefClusterProtoMidListRuleOut",
        "SocialGraphApiProtoMonthlyRecurrenceIn": "_contentwarehouse_54_SocialGraphApiProtoMonthlyRecurrenceIn",
        "SocialGraphApiProtoMonthlyRecurrenceOut": "_contentwarehouse_55_SocialGraphApiProtoMonthlyRecurrenceOut",
        "VideoVideoStreamInfoMetadataIn": "_contentwarehouse_56_VideoVideoStreamInfoMetadataIn",
        "VideoVideoStreamInfoMetadataOut": "_contentwarehouse_57_VideoVideoStreamInfoMetadataOut",
        "ResearchScienceSearchLicenseIn": "_contentwarehouse_58_ResearchScienceSearchLicenseIn",
        "ResearchScienceSearchLicenseOut": "_contentwarehouse_59_ResearchScienceSearchLicenseOut",
        "GeostoreSkiLiftProtoIn": "_contentwarehouse_60_GeostoreSkiLiftProtoIn",
        "GeostoreSkiLiftProtoOut": "_contentwarehouse_61_GeostoreSkiLiftProtoOut",
        "StorageGraphBfgPublicInformationMetadataIn": "_contentwarehouse_62_StorageGraphBfgPublicInformationMetadataIn",
        "StorageGraphBfgPublicInformationMetadataOut": "_contentwarehouse_63_StorageGraphBfgPublicInformationMetadataOut",
        "MediaIndexXtagListIn": "_contentwarehouse_64_MediaIndexXtagListIn",
        "MediaIndexXtagListOut": "_contentwarehouse_65_MediaIndexXtagListOut",
        "AssistantGroundingRankerMediaGroundingProviderFeaturesIn": "_contentwarehouse_66_AssistantGroundingRankerMediaGroundingProviderFeaturesIn",
        "AssistantGroundingRankerMediaGroundingProviderFeaturesOut": "_contentwarehouse_67_AssistantGroundingRankerMediaGroundingProviderFeaturesOut",
        "GeostoreOntologyRawGConceptInstanceProtoIn": "_contentwarehouse_68_GeostoreOntologyRawGConceptInstanceProtoIn",
        "GeostoreOntologyRawGConceptInstanceProtoOut": "_contentwarehouse_69_GeostoreOntologyRawGConceptInstanceProtoOut",
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsIn": "_contentwarehouse_70_AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsIn",
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsOut": "_contentwarehouse_71_AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsOut",
        "AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataIn": "_contentwarehouse_72_AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataOut": "_contentwarehouse_73_AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataOut",
        "QualityPreviewSnippetDocumentFeaturesIn": "_contentwarehouse_74_QualityPreviewSnippetDocumentFeaturesIn",
        "QualityPreviewSnippetDocumentFeaturesOut": "_contentwarehouse_75_QualityPreviewSnippetDocumentFeaturesOut",
        "KnowledgeAnswersIntentQueryCoreferenceIn": "_contentwarehouse_76_KnowledgeAnswersIntentQueryCoreferenceIn",
        "KnowledgeAnswersIntentQueryCoreferenceOut": "_contentwarehouse_77_KnowledgeAnswersIntentQueryCoreferenceOut",
        "AssistantApiSettingsDeviceFeatureFiltersIn": "_contentwarehouse_78_AssistantApiSettingsDeviceFeatureFiltersIn",
        "AssistantApiSettingsDeviceFeatureFiltersOut": "_contentwarehouse_79_AssistantApiSettingsDeviceFeatureFiltersOut",
        "GoogleAssistantEmbeddedV1TimersIn": "_contentwarehouse_80_GoogleAssistantEmbeddedV1TimersIn",
        "GoogleAssistantEmbeddedV1TimersOut": "_contentwarehouse_81_GoogleAssistantEmbeddedV1TimersOut",
        "AppsPeopleOzExternalMergedpeopleapiSkillsIn": "_contentwarehouse_82_AppsPeopleOzExternalMergedpeopleapiSkillsIn",
        "AppsPeopleOzExternalMergedpeopleapiSkillsOut": "_contentwarehouse_83_AppsPeopleOzExternalMergedpeopleapiSkillsOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityIn": "_contentwarehouse_84_KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityOut": "_contentwarehouse_85_KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityOut",
        "GeostoreCurveConnectionProtoCircleParamsIn": "_contentwarehouse_86_GeostoreCurveConnectionProtoCircleParamsIn",
        "GeostoreCurveConnectionProtoCircleParamsOut": "_contentwarehouse_87_GeostoreCurveConnectionProtoCircleParamsOut",
        "AppsPeopleOzExternalMergedpeopleapiSearchProfileIn": "_contentwarehouse_88_AppsPeopleOzExternalMergedpeopleapiSearchProfileIn",
        "AppsPeopleOzExternalMergedpeopleapiSearchProfileOut": "_contentwarehouse_89_AppsPeopleOzExternalMergedpeopleapiSearchProfileOut",
        "KnowledgeAnswersOpaqueOnDeviceTypeIn": "_contentwarehouse_90_KnowledgeAnswersOpaqueOnDeviceTypeIn",
        "KnowledgeAnswersOpaqueOnDeviceTypeOut": "_contentwarehouse_91_KnowledgeAnswersOpaqueOnDeviceTypeOut",
        "GeostorePriceListProtoIn": "_contentwarehouse_92_GeostorePriceListProtoIn",
        "GeostorePriceListProtoOut": "_contentwarehouse_93_GeostorePriceListProtoOut",
        "HtmlrenderWebkitHeadlessProtoScriptStackFrameIn": "_contentwarehouse_94_HtmlrenderWebkitHeadlessProtoScriptStackFrameIn",
        "HtmlrenderWebkitHeadlessProtoScriptStackFrameOut": "_contentwarehouse_95_HtmlrenderWebkitHeadlessProtoScriptStackFrameOut",
        "QualityCalypsoAppsLinkIn": "_contentwarehouse_96_QualityCalypsoAppsLinkIn",
        "QualityCalypsoAppsLinkOut": "_contentwarehouse_97_QualityCalypsoAppsLinkOut",
        "VideoContentSearchTextMatchInfoIn": "_contentwarehouse_98_VideoContentSearchTextMatchInfoIn",
        "VideoContentSearchTextMatchInfoOut": "_contentwarehouse_99_VideoContentSearchTextMatchInfoOut",
        "NlpSemanticParsingModelsMediaDeeplinkInfoIn": "_contentwarehouse_100_NlpSemanticParsingModelsMediaDeeplinkInfoIn",
        "NlpSemanticParsingModelsMediaDeeplinkInfoOut": "_contentwarehouse_101_NlpSemanticParsingModelsMediaDeeplinkInfoOut",
        "AssistantApiSelinaCapabilitesIn": "_contentwarehouse_102_AssistantApiSelinaCapabilitesIn",
        "AssistantApiSelinaCapabilitesOut": "_contentwarehouse_103_AssistantApiSelinaCapabilitesOut",
        "GeostoreInternalSegmentProtoLaneConnectionReferenceIn": "_contentwarehouse_104_GeostoreInternalSegmentProtoLaneConnectionReferenceIn",
        "GeostoreInternalSegmentProtoLaneConnectionReferenceOut": "_contentwarehouse_105_GeostoreInternalSegmentProtoLaneConnectionReferenceOut",
        "NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyIn": "_contentwarehouse_106_NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyIn",
        "NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyOut": "_contentwarehouse_107_NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataIn": "_contentwarehouse_108_IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataOut": "_contentwarehouse_109_IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataOut",
        "GoogleCloudContentwarehouseV1AddToFolderActionIn": "_contentwarehouse_110_GoogleCloudContentwarehouseV1AddToFolderActionIn",
        "GoogleCloudContentwarehouseV1AddToFolderActionOut": "_contentwarehouse_111_GoogleCloudContentwarehouseV1AddToFolderActionOut",
        "IndexingEmbeddedContentEmbeddedLinksInfoIn": "_contentwarehouse_112_IndexingEmbeddedContentEmbeddedLinksInfoIn",
        "IndexingEmbeddedContentEmbeddedLinksInfoOut": "_contentwarehouse_113_IndexingEmbeddedContentEmbeddedLinksInfoOut",
        "NlpSaftPhraseIn": "_contentwarehouse_114_NlpSaftPhraseIn",
        "NlpSaftPhraseOut": "_contentwarehouse_115_NlpSaftPhraseOut",
        "AssistantApiCoreTypesKaiOsAppInfoIn": "_contentwarehouse_116_AssistantApiCoreTypesKaiOsAppInfoIn",
        "AssistantApiCoreTypesKaiOsAppInfoOut": "_contentwarehouse_117_AssistantApiCoreTypesKaiOsAppInfoOut",
        "GoogleAssistantEmbeddedV1SurfaceIdentityIn": "_contentwarehouse_118_GoogleAssistantEmbeddedV1SurfaceIdentityIn",
        "GoogleAssistantEmbeddedV1SurfaceIdentityOut": "_contentwarehouse_119_GoogleAssistantEmbeddedV1SurfaceIdentityOut",
        "VideoDoViDecoderConfigurationIn": "_contentwarehouse_120_VideoDoViDecoderConfigurationIn",
        "VideoDoViDecoderConfigurationOut": "_contentwarehouse_121_VideoDoViDecoderConfigurationOut",
        "RepositoryWebrefAnnotatorProfileIn": "_contentwarehouse_122_RepositoryWebrefAnnotatorProfileIn",
        "RepositoryWebrefAnnotatorProfileOut": "_contentwarehouse_123_RepositoryWebrefAnnotatorProfileOut",
        "RepositoryWebrefPerDocRelevanceRatingsIn": "_contentwarehouse_124_RepositoryWebrefPerDocRelevanceRatingsIn",
        "RepositoryWebrefPerDocRelevanceRatingsOut": "_contentwarehouse_125_RepositoryWebrefPerDocRelevanceRatingsOut",
        "RepositoryWebrefClusterProtoRelationRuleIn": "_contentwarehouse_126_RepositoryWebrefClusterProtoRelationRuleIn",
        "RepositoryWebrefClusterProtoRelationRuleOut": "_contentwarehouse_127_RepositoryWebrefClusterProtoRelationRuleOut",
        "NlpSaftEntityProfileKeywordIn": "_contentwarehouse_128_NlpSaftEntityProfileKeywordIn",
        "NlpSaftEntityProfileKeywordOut": "_contentwarehouse_129_NlpSaftEntityProfileKeywordOut",
        "RepositoryWebrefLinkKindFlagsIn": "_contentwarehouse_130_RepositoryWebrefLinkKindFlagsIn",
        "RepositoryWebrefLinkKindFlagsOut": "_contentwarehouse_131_RepositoryWebrefLinkKindFlagsOut",
        "QualityNavboostCrapsCrapsDataIn": "_contentwarehouse_132_QualityNavboostCrapsCrapsDataIn",
        "QualityNavboostCrapsCrapsDataOut": "_contentwarehouse_133_QualityNavboostCrapsCrapsDataOut",
        "SocialGraphApiProtoContactDeletionContextIn": "_contentwarehouse_134_SocialGraphApiProtoContactDeletionContextIn",
        "SocialGraphApiProtoContactDeletionContextOut": "_contentwarehouse_135_SocialGraphApiProtoContactDeletionContextOut",
        "AssistantDevicesPlatformProtoCloudEndpointIn": "_contentwarehouse_136_AssistantDevicesPlatformProtoCloudEndpointIn",
        "AssistantDevicesPlatformProtoCloudEndpointOut": "_contentwarehouse_137_AssistantDevicesPlatformProtoCloudEndpointOut",
        "ImageUnderstandingIndexingAnnotationIn": "_contentwarehouse_138_ImageUnderstandingIndexingAnnotationIn",
        "ImageUnderstandingIndexingAnnotationOut": "_contentwarehouse_139_ImageUnderstandingIndexingAnnotationOut",
        "GeostoreNameProtoIn": "_contentwarehouse_140_GeostoreNameProtoIn",
        "GeostoreNameProtoOut": "_contentwarehouse_141_GeostoreNameProtoOut",
        "AssistantApiSettingsLinkedUserIn": "_contentwarehouse_142_AssistantApiSettingsLinkedUserIn",
        "AssistantApiSettingsLinkedUserOut": "_contentwarehouse_143_AssistantApiSettingsLinkedUserOut",
        "SecurityCredentialsYoutubeUserProtoIn": "_contentwarehouse_144_SecurityCredentialsYoutubeUserProtoIn",
        "SecurityCredentialsYoutubeUserProtoOut": "_contentwarehouse_145_SecurityCredentialsYoutubeUserProtoOut",
        "IndexingConverterRawRedirectInfoIn": "_contentwarehouse_146_IndexingConverterRawRedirectInfoIn",
        "IndexingConverterRawRedirectInfoOut": "_contentwarehouse_147_IndexingConverterRawRedirectInfoOut",
        "QualityLabelsGoogleLabelDataIn": "_contentwarehouse_148_QualityLabelsGoogleLabelDataIn",
        "QualityLabelsGoogleLabelDataOut": "_contentwarehouse_149_QualityLabelsGoogleLabelDataOut",
        "KnowledgeAnswersOpaqueReminderTypeIn": "_contentwarehouse_150_KnowledgeAnswersOpaqueReminderTypeIn",
        "KnowledgeAnswersOpaqueReminderTypeOut": "_contentwarehouse_151_KnowledgeAnswersOpaqueReminderTypeOut",
        "AssistantApiScreenCapabilitiesIn": "_contentwarehouse_152_AssistantApiScreenCapabilitiesIn",
        "AssistantApiScreenCapabilitiesOut": "_contentwarehouse_153_AssistantApiScreenCapabilitiesOut",
        "ScienceCitationTranslatedAuthorIn": "_contentwarehouse_154_ScienceCitationTranslatedAuthorIn",
        "ScienceCitationTranslatedAuthorOut": "_contentwarehouse_155_ScienceCitationTranslatedAuthorOut",
        "QualityQrewriteRelationshipMemoryDataIn": "_contentwarehouse_156_QualityQrewriteRelationshipMemoryDataIn",
        "QualityQrewriteRelationshipMemoryDataOut": "_contentwarehouse_157_QualityQrewriteRelationshipMemoryDataOut",
        "GoogleCloudDocumentaiV1DocumentPageTableTableRowIn": "_contentwarehouse_158_GoogleCloudDocumentaiV1DocumentPageTableTableRowIn",
        "GoogleCloudDocumentaiV1DocumentPageTableTableRowOut": "_contentwarehouse_159_GoogleCloudDocumentaiV1DocumentPageTableTableRowOut",
        "AssistantLogsCommunicationRawDeviceContactInfoLogIn": "_contentwarehouse_160_AssistantLogsCommunicationRawDeviceContactInfoLogIn",
        "AssistantLogsCommunicationRawDeviceContactInfoLogOut": "_contentwarehouse_161_AssistantLogsCommunicationRawDeviceContactInfoLogOut",
        "VideoContentSearchSpanDolphinScoresIn": "_contentwarehouse_162_VideoContentSearchSpanDolphinScoresIn",
        "VideoContentSearchSpanDolphinScoresOut": "_contentwarehouse_163_VideoContentSearchSpanDolphinScoresOut",
        "SecurityCredentialsGaiaGroupProtoIn": "_contentwarehouse_164_SecurityCredentialsGaiaGroupProtoIn",
        "SecurityCredentialsGaiaGroupProtoOut": "_contentwarehouse_165_SecurityCredentialsGaiaGroupProtoOut",
        "ImageRepositorySpeechRecognitionResultIn": "_contentwarehouse_166_ImageRepositorySpeechRecognitionResultIn",
        "ImageRepositorySpeechRecognitionResultOut": "_contentwarehouse_167_ImageRepositorySpeechRecognitionResultOut",
        "DrishtiVesperVideoThumbnailIn": "_contentwarehouse_168_DrishtiVesperVideoThumbnailIn",
        "DrishtiVesperVideoThumbnailOut": "_contentwarehouse_169_DrishtiVesperVideoThumbnailOut",
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn": "_contentwarehouse_170_NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn",
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut": "_contentwarehouse_171_NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut",
        "AssistantDevicesPlatformProtoAlarmCapabilityIn": "_contentwarehouse_172_AssistantDevicesPlatformProtoAlarmCapabilityIn",
        "AssistantDevicesPlatformProtoAlarmCapabilityOut": "_contentwarehouse_173_AssistantDevicesPlatformProtoAlarmCapabilityOut",
        "AssistantApiImmersiveCanvasSupportIn": "_contentwarehouse_174_AssistantApiImmersiveCanvasSupportIn",
        "AssistantApiImmersiveCanvasSupportOut": "_contentwarehouse_175_AssistantApiImmersiveCanvasSupportOut",
        "ImageRepositoryVenomStatusIn": "_contentwarehouse_176_ImageRepositoryVenomStatusIn",
        "ImageRepositoryVenomStatusOut": "_contentwarehouse_177_ImageRepositoryVenomStatusOut",
        "GoogleCloudContentwarehouseV1DeleteDocumentRequestIn": "_contentwarehouse_178_GoogleCloudContentwarehouseV1DeleteDocumentRequestIn",
        "GoogleCloudContentwarehouseV1DeleteDocumentRequestOut": "_contentwarehouse_179_GoogleCloudContentwarehouseV1DeleteDocumentRequestOut",
        "VideoFileSphericalMetadataFOVBoundsIn": "_contentwarehouse_180_VideoFileSphericalMetadataFOVBoundsIn",
        "VideoFileSphericalMetadataFOVBoundsOut": "_contentwarehouse_181_VideoFileSphericalMetadataFOVBoundsOut",
        "AssistantApiTimeZoneIn": "_contentwarehouse_182_AssistantApiTimeZoneIn",
        "AssistantApiTimeZoneOut": "_contentwarehouse_183_AssistantApiTimeZoneOut",
        "NlpSemanticParsingLocalEvChargingStationConnectorConstraintIn": "_contentwarehouse_184_NlpSemanticParsingLocalEvChargingStationConnectorConstraintIn",
        "NlpSemanticParsingLocalEvChargingStationConnectorConstraintOut": "_contentwarehouse_185_NlpSemanticParsingLocalEvChargingStationConnectorConstraintOut",
        "AssistantApiSettingsSpeechOutputSettingsIn": "_contentwarehouse_186_AssistantApiSettingsSpeechOutputSettingsIn",
        "AssistantApiSettingsSpeechOutputSettingsOut": "_contentwarehouse_187_AssistantApiSettingsSpeechOutputSettingsOut",
        "AbuseiamVideoReviewerIn": "_contentwarehouse_188_AbuseiamVideoReviewerIn",
        "AbuseiamVideoReviewerOut": "_contentwarehouse_189_AbuseiamVideoReviewerOut",
        "CloudAiPlatformTenantresourceTenantProjectResourceIn": "_contentwarehouse_190_CloudAiPlatformTenantresourceTenantProjectResourceIn",
        "CloudAiPlatformTenantresourceTenantProjectResourceOut": "_contentwarehouse_191_CloudAiPlatformTenantresourceTenantProjectResourceOut",
        "VideoContentSearchDescriptionAnchorFeaturesIn": "_contentwarehouse_192_VideoContentSearchDescriptionAnchorFeaturesIn",
        "VideoContentSearchDescriptionAnchorFeaturesOut": "_contentwarehouse_193_VideoContentSearchDescriptionAnchorFeaturesOut",
        "AssistantApiSoftwareCapabilitiesIn": "_contentwarehouse_194_AssistantApiSoftwareCapabilitiesIn",
        "AssistantApiSoftwareCapabilitiesOut": "_contentwarehouse_195_AssistantApiSoftwareCapabilitiesOut",
        "AssistantApiTransactionFeaturesSupportIn": "_contentwarehouse_196_AssistantApiTransactionFeaturesSupportIn",
        "AssistantApiTransactionFeaturesSupportOut": "_contentwarehouse_197_AssistantApiTransactionFeaturesSupportOut",
        "ImageExifIPTCMetadataLocationIn": "_contentwarehouse_198_ImageExifIPTCMetadataLocationIn",
        "ImageExifIPTCMetadataLocationOut": "_contentwarehouse_199_ImageExifIPTCMetadataLocationOut",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactIdIn": "_contentwarehouse_200_AppsPeopleOzExternalMergedpeopleapiDeviceContactIdIn",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactIdOut": "_contentwarehouse_201_AppsPeopleOzExternalMergedpeopleapiDeviceContactIdOut",
        "GeostoreRoadSignProtoIn": "_contentwarehouse_202_GeostoreRoadSignProtoIn",
        "GeostoreRoadSignProtoOut": "_contentwarehouse_203_GeostoreRoadSignProtoOut",
        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoIn": "_contentwarehouse_204_LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoIn",
        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoOut": "_contentwarehouse_205_LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoOut",
        "AssistantLogsCommunicationDeviceContactInfoLogIn": "_contentwarehouse_206_AssistantLogsCommunicationDeviceContactInfoLogIn",
        "AssistantLogsCommunicationDeviceContactInfoLogOut": "_contentwarehouse_207_AssistantLogsCommunicationDeviceContactInfoLogOut",
        "ShingleSourceIn": "_contentwarehouse_208_ShingleSourceIn",
        "ShingleSourceOut": "_contentwarehouse_209_ShingleSourceOut",
        "VideoAssetsVenomVideoIdIn": "_contentwarehouse_210_VideoAssetsVenomVideoIdIn",
        "VideoAssetsVenomVideoIdOut": "_contentwarehouse_211_VideoAssetsVenomVideoIdOut",
        "BlogPerDocDataIn": "_contentwarehouse_212_BlogPerDocDataIn",
        "BlogPerDocDataOut": "_contentwarehouse_213_BlogPerDocDataOut",
        "GoogleCloudContentwarehouseV1CreateDocumentLinkRequestIn": "_contentwarehouse_214_GoogleCloudContentwarehouseV1CreateDocumentLinkRequestIn",
        "GoogleCloudContentwarehouseV1CreateDocumentLinkRequestOut": "_contentwarehouse_215_GoogleCloudContentwarehouseV1CreateDocumentLinkRequestOut",
        "RepositoryWebrefNameDebugInfoIn": "_contentwarehouse_216_RepositoryWebrefNameDebugInfoIn",
        "RepositoryWebrefNameDebugInfoOut": "_contentwarehouse_217_RepositoryWebrefNameDebugInfoOut",
        "KnowledgeAnswersOpaqueShoppingProductTypeIn": "_contentwarehouse_218_KnowledgeAnswersOpaqueShoppingProductTypeIn",
        "KnowledgeAnswersOpaqueShoppingProductTypeOut": "_contentwarehouse_219_KnowledgeAnswersOpaqueShoppingProductTypeOut",
        "VideoContentSearchSimilarityMatchInfoIn": "_contentwarehouse_220_VideoContentSearchSimilarityMatchInfoIn",
        "VideoContentSearchSimilarityMatchInfoOut": "_contentwarehouse_221_VideoContentSearchSimilarityMatchInfoOut",
        "VideoContentSearchVideoAnchorSetRatingScoreIn": "_contentwarehouse_222_VideoContentSearchVideoAnchorSetRatingScoreIn",
        "VideoContentSearchVideoAnchorSetRatingScoreOut": "_contentwarehouse_223_VideoContentSearchVideoAnchorSetRatingScoreOut",
        "VideoContentSearchCaptionEntityDocInfoIn": "_contentwarehouse_224_VideoContentSearchCaptionEntityDocInfoIn",
        "VideoContentSearchCaptionEntityDocInfoOut": "_contentwarehouse_225_VideoContentSearchCaptionEntityDocInfoOut",
        "AssistantRemindersMemoryPayloadIn": "_contentwarehouse_226_AssistantRemindersMemoryPayloadIn",
        "AssistantRemindersMemoryPayloadOut": "_contentwarehouse_227_AssistantRemindersMemoryPayloadOut",
        "SocialGraphApiProtoPronunciationsIn": "_contentwarehouse_228_SocialGraphApiProtoPronunciationsIn",
        "SocialGraphApiProtoPronunciationsOut": "_contentwarehouse_229_SocialGraphApiProtoPronunciationsOut",
        "RepositoryWebrefLightweightTokensPerMentionLightweightTokenIn": "_contentwarehouse_230_RepositoryWebrefLightweightTokensPerMentionLightweightTokenIn",
        "RepositoryWebrefLightweightTokensPerMentionLightweightTokenOut": "_contentwarehouse_231_RepositoryWebrefLightweightTokensPerMentionLightweightTokenOut",
        "RepositoryWebrefHumanRatingsIn": "_contentwarehouse_232_RepositoryWebrefHumanRatingsIn",
        "RepositoryWebrefHumanRatingsOut": "_contentwarehouse_233_RepositoryWebrefHumanRatingsOut",
        "GeostoreInternalSourceSummaryProtoIn": "_contentwarehouse_234_GeostoreInternalSourceSummaryProtoIn",
        "GeostoreInternalSourceSummaryProtoOut": "_contentwarehouse_235_GeostoreInternalSourceSummaryProtoOut",
        "AbuseiamUserNotificationIn": "_contentwarehouse_236_AbuseiamUserNotificationIn",
        "AbuseiamUserNotificationOut": "_contentwarehouse_237_AbuseiamUserNotificationOut",
        "AssistantApiAudioInputIn": "_contentwarehouse_238_AssistantApiAudioInputIn",
        "AssistantApiAudioInputOut": "_contentwarehouse_239_AssistantApiAudioInputOut",
        "RepositoryWebrefCompactKgTopicIn": "_contentwarehouse_240_RepositoryWebrefCompactKgTopicIn",
        "RepositoryWebrefCompactKgTopicOut": "_contentwarehouse_241_RepositoryWebrefCompactKgTopicOut",
        "GeostoreGeopoliticalGeometryProtoIn": "_contentwarehouse_242_GeostoreGeopoliticalGeometryProtoIn",
        "GeostoreGeopoliticalGeometryProtoOut": "_contentwarehouse_243_GeostoreGeopoliticalGeometryProtoOut",
        "QualityNavboostCrapsCrapsClickSignalsIn": "_contentwarehouse_244_QualityNavboostCrapsCrapsClickSignalsIn",
        "QualityNavboostCrapsCrapsClickSignalsOut": "_contentwarehouse_245_QualityNavboostCrapsCrapsClickSignalsOut",
        "CountryClickDistributionItemIn": "_contentwarehouse_246_CountryClickDistributionItemIn",
        "CountryClickDistributionItemOut": "_contentwarehouse_247_CountryClickDistributionItemOut",
        "GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataIn": "_contentwarehouse_248_GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataIn",
        "GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataOut": "_contentwarehouse_249_GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataOut",
        "GeostoreAddressLinesProtoIn": "_contentwarehouse_250_GeostoreAddressLinesProtoIn",
        "GeostoreAddressLinesProtoOut": "_contentwarehouse_251_GeostoreAddressLinesProtoOut",
        "PairwiseQScoringDataIn": "_contentwarehouse_252_PairwiseQScoringDataIn",
        "PairwiseQScoringDataOut": "_contentwarehouse_253_PairwiseQScoringDataOut",
        "VideoContentSearchVideoScoreInfoIn": "_contentwarehouse_254_VideoContentSearchVideoScoreInfoIn",
        "VideoContentSearchVideoScoreInfoOut": "_contentwarehouse_255_VideoContentSearchVideoScoreInfoOut",
        "GoodocAnchorLabelIn": "_contentwarehouse_256_GoodocAnchorLabelIn",
        "GoodocAnchorLabelOut": "_contentwarehouse_257_GoodocAnchorLabelOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclIn": "_contentwarehouse_258_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclOut": "_contentwarehouse_259_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclOut",
        "SocialGraphApiProtoRecurrenceIn": "_contentwarehouse_260_SocialGraphApiProtoRecurrenceIn",
        "SocialGraphApiProtoRecurrenceOut": "_contentwarehouse_261_SocialGraphApiProtoRecurrenceOut",
        "NlpSemanticParsingModelsMediaLatLngIn": "_contentwarehouse_262_NlpSemanticParsingModelsMediaLatLngIn",
        "NlpSemanticParsingModelsMediaLatLngOut": "_contentwarehouse_263_NlpSemanticParsingModelsMediaLatLngOut",
        "ChatBotPlatformBotSendTokenIn": "_contentwarehouse_264_ChatBotPlatformBotSendTokenIn",
        "ChatBotPlatformBotSendTokenOut": "_contentwarehouse_265_ChatBotPlatformBotSendTokenOut",
        "RepositoryWebrefPreprocessingUrlSourceInfoIn": "_contentwarehouse_266_RepositoryWebrefPreprocessingUrlSourceInfoIn",
        "RepositoryWebrefPreprocessingUrlSourceInfoOut": "_contentwarehouse_267_RepositoryWebrefPreprocessingUrlSourceInfoOut",
        "NlpSemanticParsingLocalImplicitLocalCategoryIn": "_contentwarehouse_268_NlpSemanticParsingLocalImplicitLocalCategoryIn",
        "NlpSemanticParsingLocalImplicitLocalCategoryOut": "_contentwarehouse_269_NlpSemanticParsingLocalImplicitLocalCategoryOut",
        "GeostoreInternalFeatureProtoIn": "_contentwarehouse_270_GeostoreInternalFeatureProtoIn",
        "GeostoreInternalFeatureProtoOut": "_contentwarehouse_271_GeostoreInternalFeatureProtoOut",
        "ScienceCitationAlternateTitleIn": "_contentwarehouse_272_ScienceCitationAlternateTitleIn",
        "ScienceCitationAlternateTitleOut": "_contentwarehouse_273_ScienceCitationAlternateTitleOut",
        "GeostoreFeatureProtoIn": "_contentwarehouse_274_GeostoreFeatureProtoIn",
        "GeostoreFeatureProtoOut": "_contentwarehouse_275_GeostoreFeatureProtoOut",
        "AbuseiamRegionIn": "_contentwarehouse_276_AbuseiamRegionIn",
        "AbuseiamRegionOut": "_contentwarehouse_277_AbuseiamRegionOut",
        "KnowledgeAnswersContainerTypeIn": "_contentwarehouse_278_KnowledgeAnswersContainerTypeIn",
        "KnowledgeAnswersContainerTypeOut": "_contentwarehouse_279_KnowledgeAnswersContainerTypeOut",
        "PtokenPTokenIn": "_contentwarehouse_280_PtokenPTokenIn",
        "PtokenPTokenOut": "_contentwarehouse_281_PtokenPTokenOut",
        "AssistantApiSurfacePropertiesExecutionCapabilitiesIn": "_contentwarehouse_282_AssistantApiSurfacePropertiesExecutionCapabilitiesIn",
        "AssistantApiSurfacePropertiesExecutionCapabilitiesOut": "_contentwarehouse_283_AssistantApiSurfacePropertiesExecutionCapabilitiesOut",
        "NlpSemanticParsingModelsMediaGameIn": "_contentwarehouse_284_NlpSemanticParsingModelsMediaGameIn",
        "NlpSemanticParsingModelsMediaGameOut": "_contentwarehouse_285_NlpSemanticParsingModelsMediaGameOut",
        "IndexingUrlPatternUrlTreeUrlFeatureIn": "_contentwarehouse_286_IndexingUrlPatternUrlTreeUrlFeatureIn",
        "IndexingUrlPatternUrlTreeUrlFeatureOut": "_contentwarehouse_287_IndexingUrlPatternUrlTreeUrlFeatureOut",
        "SocialGraphApiProtoPromptContentIn": "_contentwarehouse_288_SocialGraphApiProtoPromptContentIn",
        "SocialGraphApiProtoPromptContentOut": "_contentwarehouse_289_SocialGraphApiProtoPromptContentOut",
        "VideoContentSearchAsrCaptionIn": "_contentwarehouse_290_VideoContentSearchAsrCaptionIn",
        "VideoContentSearchAsrCaptionOut": "_contentwarehouse_291_VideoContentSearchAsrCaptionOut",
        "QualityTimebasedLastSignificantUpdateAdjustmentsIn": "_contentwarehouse_292_QualityTimebasedLastSignificantUpdateAdjustmentsIn",
        "QualityTimebasedLastSignificantUpdateAdjustmentsOut": "_contentwarehouse_293_QualityTimebasedLastSignificantUpdateAdjustmentsOut",
        "AssistantApiCoreTypesWebProviderInfoIn": "_contentwarehouse_294_AssistantApiCoreTypesWebProviderInfoIn",
        "AssistantApiCoreTypesWebProviderInfoOut": "_contentwarehouse_295_AssistantApiCoreTypesWebProviderInfoOut",
        "GoodocDocumentIn": "_contentwarehouse_296_GoodocDocumentIn",
        "GoodocDocumentOut": "_contentwarehouse_297_GoodocDocumentOut",
        "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoIn": "_contentwarehouse_298_SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoIn",
        "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoOut": "_contentwarehouse_299_SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoOut",
        "VideoCrawlVideoInlinePlaybackMetadataIn": "_contentwarehouse_300_VideoCrawlVideoInlinePlaybackMetadataIn",
        "VideoCrawlVideoInlinePlaybackMetadataOut": "_contentwarehouse_301_VideoCrawlVideoInlinePlaybackMetadataOut",
        "ImageSafesearchContentOCRAnnotationIn": "_contentwarehouse_302_ImageSafesearchContentOCRAnnotationIn",
        "ImageSafesearchContentOCRAnnotationOut": "_contentwarehouse_303_ImageSafesearchContentOCRAnnotationOut",
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceIn": "_contentwarehouse_304_QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceIn",
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceOut": "_contentwarehouse_305_QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallIn": "_contentwarehouse_306_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallOut": "_contentwarehouse_307_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallOut",
        "TrawlerPolicyDataIn": "_contentwarehouse_308_TrawlerPolicyDataIn",
        "TrawlerPolicyDataOut": "_contentwarehouse_309_TrawlerPolicyDataOut",
        "RepositoryWebrefPreprocessingNameEntityMetadataIn": "_contentwarehouse_310_RepositoryWebrefPreprocessingNameEntityMetadataIn",
        "RepositoryWebrefPreprocessingNameEntityMetadataOut": "_contentwarehouse_311_RepositoryWebrefPreprocessingNameEntityMetadataOut",
        "AssistantApiCapabilitiesHomeAppCapabilitiesIn": "_contentwarehouse_312_AssistantApiCapabilitiesHomeAppCapabilitiesIn",
        "AssistantApiCapabilitiesHomeAppCapabilitiesOut": "_contentwarehouse_313_AssistantApiCapabilitiesHomeAppCapabilitiesOut",
        "GeostoreUrlProtoIn": "_contentwarehouse_314_GeostoreUrlProtoIn",
        "GeostoreUrlProtoOut": "_contentwarehouse_315_GeostoreUrlProtoOut",
        "TrawlerClientServiceInfoIn": "_contentwarehouse_316_TrawlerClientServiceInfoIn",
        "TrawlerClientServiceInfoOut": "_contentwarehouse_317_TrawlerClientServiceInfoOut",
        "UniversalsearchNewPackerKnowledgeResultSupportProvenanceIn": "_contentwarehouse_318_UniversalsearchNewPackerKnowledgeResultSupportProvenanceIn",
        "UniversalsearchNewPackerKnowledgeResultSupportProvenanceOut": "_contentwarehouse_319_UniversalsearchNewPackerKnowledgeResultSupportProvenanceOut",
        "DrishtiVesperThumbnailQualityScoreIn": "_contentwarehouse_320_DrishtiVesperThumbnailQualityScoreIn",
        "DrishtiVesperThumbnailQualityScoreOut": "_contentwarehouse_321_DrishtiVesperThumbnailQualityScoreOut",
        "QualityDialogManagerReminderClientTypeIn": "_contentwarehouse_322_QualityDialogManagerReminderClientTypeIn",
        "QualityDialogManagerReminderClientTypeOut": "_contentwarehouse_323_QualityDialogManagerReminderClientTypeOut",
        "HtmlrenderWebkitHeadlessProtoOffsetIn": "_contentwarehouse_324_HtmlrenderWebkitHeadlessProtoOffsetIn",
        "HtmlrenderWebkitHeadlessProtoOffsetOut": "_contentwarehouse_325_HtmlrenderWebkitHeadlessProtoOffsetOut",
        "DrishtiIndexedFeatureDataIn": "_contentwarehouse_326_DrishtiIndexedFeatureDataIn",
        "DrishtiIndexedFeatureDataOut": "_contentwarehouse_327_DrishtiIndexedFeatureDataOut",
        "NlpSemanticParsingProtoActionsOnGoogleSlotMapIn": "_contentwarehouse_328_NlpSemanticParsingProtoActionsOnGoogleSlotMapIn",
        "NlpSemanticParsingProtoActionsOnGoogleSlotMapOut": "_contentwarehouse_329_NlpSemanticParsingProtoActionsOnGoogleSlotMapOut",
        "LocalsearchDocInfoIn": "_contentwarehouse_330_LocalsearchDocInfoIn",
        "LocalsearchDocInfoOut": "_contentwarehouse_331_LocalsearchDocInfoOut",
        "RepositoryWebrefGenericIndicesIn": "_contentwarehouse_332_RepositoryWebrefGenericIndicesIn",
        "RepositoryWebrefGenericIndicesOut": "_contentwarehouse_333_RepositoryWebrefGenericIndicesOut",
        "SocialGraphApiProtoAndroidDeviceInfoIn": "_contentwarehouse_334_SocialGraphApiProtoAndroidDeviceInfoIn",
        "SocialGraphApiProtoAndroidDeviceInfoOut": "_contentwarehouse_335_SocialGraphApiProtoAndroidDeviceInfoOut",
        "AbuseiamGeoRestrictionIn": "_contentwarehouse_336_AbuseiamGeoRestrictionIn",
        "AbuseiamGeoRestrictionOut": "_contentwarehouse_337_AbuseiamGeoRestrictionOut",
        "IndexingSignalAggregatorAggregatedScoreIn": "_contentwarehouse_338_IndexingSignalAggregatorAggregatedScoreIn",
        "IndexingSignalAggregatorAggregatedScoreOut": "_contentwarehouse_339_IndexingSignalAggregatorAggregatedScoreOut",
        "LogsSemanticInterpretationIntentQueryLinkKindFlagsIn": "_contentwarehouse_340_LogsSemanticInterpretationIntentQueryLinkKindFlagsIn",
        "LogsSemanticInterpretationIntentQueryLinkKindFlagsOut": "_contentwarehouse_341_LogsSemanticInterpretationIntentQueryLinkKindFlagsOut",
        "NlpSemanticParsingLocalServiceConstraintIn": "_contentwarehouse_342_NlpSemanticParsingLocalServiceConstraintIn",
        "NlpSemanticParsingLocalServiceConstraintOut": "_contentwarehouse_343_NlpSemanticParsingLocalServiceConstraintOut",
        "UtilStatusProtoIn": "_contentwarehouse_344_UtilStatusProtoIn",
        "UtilStatusProtoOut": "_contentwarehouse_345_UtilStatusProtoOut",
        "ImageQualitySensitiveMediaOrPeopleEntitiesIn": "_contentwarehouse_346_ImageQualitySensitiveMediaOrPeopleEntitiesIn",
        "ImageQualitySensitiveMediaOrPeopleEntitiesOut": "_contentwarehouse_347_ImageQualitySensitiveMediaOrPeopleEntitiesOut",
        "SearchPolicyRankableSensitivityPrefilterIn": "_contentwarehouse_348_SearchPolicyRankableSensitivityPrefilterIn",
        "SearchPolicyRankableSensitivityPrefilterOut": "_contentwarehouse_349_SearchPolicyRankableSensitivityPrefilterOut",
        "QualityShoppingShoppingAttachmentOfferIn": "_contentwarehouse_350_QualityShoppingShoppingAttachmentOfferIn",
        "QualityShoppingShoppingAttachmentOfferOut": "_contentwarehouse_351_QualityShoppingShoppingAttachmentOfferOut",
        "ClassifierPornReferrerCountsIn": "_contentwarehouse_352_ClassifierPornReferrerCountsIn",
        "ClassifierPornReferrerCountsOut": "_contentwarehouse_353_ClassifierPornReferrerCountsOut",
        "NlpSemanticParsingDateTimeAnnotationIn": "_contentwarehouse_354_NlpSemanticParsingDateTimeAnnotationIn",
        "NlpSemanticParsingDateTimeAnnotationOut": "_contentwarehouse_355_NlpSemanticParsingDateTimeAnnotationOut",
        "AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsIn": "_contentwarehouse_356_AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsIn",
        "AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsOut": "_contentwarehouse_357_AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsOut",
        "QualityOrbitAsteroidBeltImageIntentScoresIn": "_contentwarehouse_358_QualityOrbitAsteroidBeltImageIntentScoresIn",
        "QualityOrbitAsteroidBeltImageIntentScoresOut": "_contentwarehouse_359_QualityOrbitAsteroidBeltImageIntentScoresOut",
        "GoodocDocumentHeaderFontIn": "_contentwarehouse_360_GoodocDocumentHeaderFontIn",
        "GoodocDocumentHeaderFontOut": "_contentwarehouse_361_GoodocDocumentHeaderFontOut",
        "SafesearchVideoContentSignalsIn": "_contentwarehouse_362_SafesearchVideoContentSignalsIn",
        "SafesearchVideoContentSignalsOut": "_contentwarehouse_363_SafesearchVideoContentSignalsOut",
        "RichsnippetsPageMapTemplateTypeIn": "_contentwarehouse_364_RichsnippetsPageMapTemplateTypeIn",
        "RichsnippetsPageMapTemplateTypeOut": "_contentwarehouse_365_RichsnippetsPageMapTemplateTypeOut",
        "GoogleCloudContentwarehouseV1IntegerTypeOptionsIn": "_contentwarehouse_366_GoogleCloudContentwarehouseV1IntegerTypeOptionsIn",
        "GoogleCloudContentwarehouseV1IntegerTypeOptionsOut": "_contentwarehouse_367_GoogleCloudContentwarehouseV1IntegerTypeOptionsOut",
        "ResearchScienceSearchReconciledMetadataIn": "_contentwarehouse_368_ResearchScienceSearchReconciledMetadataIn",
        "ResearchScienceSearchReconciledMetadataOut": "_contentwarehouse_369_ResearchScienceSearchReconciledMetadataOut",
        "VideoVideoGeoLocationIn": "_contentwarehouse_370_VideoVideoGeoLocationIn",
        "VideoVideoGeoLocationOut": "_contentwarehouse_371_VideoVideoGeoLocationOut",
        "VideoSEIMessageIn": "_contentwarehouse_372_VideoSEIMessageIn",
        "VideoSEIMessageOut": "_contentwarehouse_373_VideoSEIMessageOut",
        "QualityPreviewRanklabTitleIn": "_contentwarehouse_374_QualityPreviewRanklabTitleIn",
        "QualityPreviewRanklabTitleOut": "_contentwarehouse_375_QualityPreviewRanklabTitleOut",
        "DrishtiLabelSetElementIn": "_contentwarehouse_376_DrishtiLabelSetElementIn",
        "DrishtiLabelSetElementOut": "_contentwarehouse_377_DrishtiLabelSetElementOut",
        "GoogleCloudContentwarehouseV1CreateDocumentResponseIn": "_contentwarehouse_378_GoogleCloudContentwarehouseV1CreateDocumentResponseIn",
        "GoogleCloudContentwarehouseV1CreateDocumentResponseOut": "_contentwarehouse_379_GoogleCloudContentwarehouseV1CreateDocumentResponseOut",
        "GeostoreCrossingStripePatternProtoIn": "_contentwarehouse_380_GeostoreCrossingStripePatternProtoIn",
        "GeostoreCrossingStripePatternProtoOut": "_contentwarehouse_381_GeostoreCrossingStripePatternProtoOut",
        "AssistantApiSettingsVideoFilterIn": "_contentwarehouse_382_AssistantApiSettingsVideoFilterIn",
        "AssistantApiSettingsVideoFilterOut": "_contentwarehouse_383_AssistantApiSettingsVideoFilterOut",
        "VideoContentSearchTextSimilarityFeaturesIn": "_contentwarehouse_384_VideoContentSearchTextSimilarityFeaturesIn",
        "VideoContentSearchTextSimilarityFeaturesOut": "_contentwarehouse_385_VideoContentSearchTextSimilarityFeaturesOut",
        "AppsPeopleOzExternalMergedpeopleapiRosterDetailsIn": "_contentwarehouse_386_AppsPeopleOzExternalMergedpeopleapiRosterDetailsIn",
        "AppsPeopleOzExternalMergedpeopleapiRosterDetailsOut": "_contentwarehouse_387_AppsPeopleOzExternalMergedpeopleapiRosterDetailsOut",
        "AssistantApiOnDeviceStorageCapabilitiesIn": "_contentwarehouse_388_AssistantApiOnDeviceStorageCapabilitiesIn",
        "AssistantApiOnDeviceStorageCapabilitiesOut": "_contentwarehouse_389_AssistantApiOnDeviceStorageCapabilitiesOut",
        "AppsDynamiteSharedSegmentedMembershipCountIn": "_contentwarehouse_390_AppsDynamiteSharedSegmentedMembershipCountIn",
        "AppsDynamiteSharedSegmentedMembershipCountOut": "_contentwarehouse_391_AppsDynamiteSharedSegmentedMembershipCountOut",
        "SentimentSentimentEmotionsIn": "_contentwarehouse_392_SentimentSentimentEmotionsIn",
        "SentimentSentimentEmotionsOut": "_contentwarehouse_393_SentimentSentimentEmotionsOut",
        "ResearchScamGenericFeatureVectorCrowdingIn": "_contentwarehouse_394_ResearchScamGenericFeatureVectorCrowdingIn",
        "ResearchScamGenericFeatureVectorCrowdingOut": "_contentwarehouse_395_ResearchScamGenericFeatureVectorCrowdingOut",
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectIn": "_contentwarehouse_396_GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectIn",
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectOut": "_contentwarehouse_397_GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectOut",
        "CloudAiPlatformTenantresourceIamPolicyBindingIn": "_contentwarehouse_398_CloudAiPlatformTenantresourceIamPolicyBindingIn",
        "CloudAiPlatformTenantresourceIamPolicyBindingOut": "_contentwarehouse_399_CloudAiPlatformTenantresourceIamPolicyBindingOut",
        "GoodocSemanticLabelTableCellDetailsIn": "_contentwarehouse_400_GoodocSemanticLabelTableCellDetailsIn",
        "GoodocSemanticLabelTableCellDetailsOut": "_contentwarehouse_401_GoodocSemanticLabelTableCellDetailsOut",
        "RepositoryWebrefEntityLinkMetadataIn": "_contentwarehouse_402_RepositoryWebrefEntityLinkMetadataIn",
        "RepositoryWebrefEntityLinkMetadataOut": "_contentwarehouse_403_RepositoryWebrefEntityLinkMetadataOut",
        "AssistantVerticalsHomeautomationProtoRoleInformationIn": "_contentwarehouse_404_AssistantVerticalsHomeautomationProtoRoleInformationIn",
        "AssistantVerticalsHomeautomationProtoRoleInformationOut": "_contentwarehouse_405_AssistantVerticalsHomeautomationProtoRoleInformationOut",
        "QualityCalypsoAppsUniversalAuLiveOpsDetailInfoIn": "_contentwarehouse_406_QualityCalypsoAppsUniversalAuLiveOpsDetailInfoIn",
        "QualityCalypsoAppsUniversalAuLiveOpsDetailInfoOut": "_contentwarehouse_407_QualityCalypsoAppsUniversalAuLiveOpsDetailInfoOut",
        "AssistantDevicesPlatformProtoMediaNextCapabilityIn": "_contentwarehouse_408_AssistantDevicesPlatformProtoMediaNextCapabilityIn",
        "AssistantDevicesPlatformProtoMediaNextCapabilityOut": "_contentwarehouse_409_AssistantDevicesPlatformProtoMediaNextCapabilityOut",
        "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsIn": "_contentwarehouse_410_KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsIn",
        "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsOut": "_contentwarehouse_411_KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsOut",
        "AssistantDevicesPlatformProtoProvidedDataIn": "_contentwarehouse_412_AssistantDevicesPlatformProtoProvidedDataIn",
        "AssistantDevicesPlatformProtoProvidedDataOut": "_contentwarehouse_413_AssistantDevicesPlatformProtoProvidedDataOut",
        "VideoVideoStreamInfoVideoStreamStatisticsIn": "_contentwarehouse_414_VideoVideoStreamInfoVideoStreamStatisticsIn",
        "VideoVideoStreamInfoVideoStreamStatisticsOut": "_contentwarehouse_415_VideoVideoStreamInfoVideoStreamStatisticsOut",
        "LensDiscoveryStylePersonDetectionSignalsIn": "_contentwarehouse_416_LensDiscoveryStylePersonDetectionSignalsIn",
        "LensDiscoveryStylePersonDetectionSignalsOut": "_contentwarehouse_417_LensDiscoveryStylePersonDetectionSignalsOut",
        "DrishtiVesperUserReportHumanLabelIn": "_contentwarehouse_418_DrishtiVesperUserReportHumanLabelIn",
        "DrishtiVesperUserReportHumanLabelOut": "_contentwarehouse_419_DrishtiVesperUserReportHumanLabelOut",
        "VideoContentSearchListTrainingDataSetFeaturesIn": "_contentwarehouse_420_VideoContentSearchListTrainingDataSetFeaturesIn",
        "VideoContentSearchListTrainingDataSetFeaturesOut": "_contentwarehouse_421_VideoContentSearchListTrainingDataSetFeaturesOut",
        "LogsSemanticInterpretationIntentQueryEntityLinkMetadataIn": "_contentwarehouse_422_LogsSemanticInterpretationIntentQueryEntityLinkMetadataIn",
        "LogsSemanticInterpretationIntentQueryEntityLinkMetadataOut": "_contentwarehouse_423_LogsSemanticInterpretationIntentQueryEntityLinkMetadataOut",
        "KnowledgeAnswersIntentQueryArgumentIn": "_contentwarehouse_424_KnowledgeAnswersIntentQueryArgumentIn",
        "KnowledgeAnswersIntentQueryArgumentOut": "_contentwarehouse_425_KnowledgeAnswersIntentQueryArgumentOut",
        "ImageRepositoryVenomProcessingInfoIn": "_contentwarehouse_426_ImageRepositoryVenomProcessingInfoIn",
        "ImageRepositoryVenomProcessingInfoOut": "_contentwarehouse_427_ImageRepositoryVenomProcessingInfoOut",
        "GeostoreFeatureFieldMetadataProtoIn": "_contentwarehouse_428_GeostoreFeatureFieldMetadataProtoIn",
        "GeostoreFeatureFieldMetadataProtoOut": "_contentwarehouse_429_GeostoreFeatureFieldMetadataProtoOut",
        "KnowledgeAnswersOpaqueComponentReferenceIndexTypeIn": "_contentwarehouse_430_KnowledgeAnswersOpaqueComponentReferenceIndexTypeIn",
        "KnowledgeAnswersOpaqueComponentReferenceIndexTypeOut": "_contentwarehouse_431_KnowledgeAnswersOpaqueComponentReferenceIndexTypeOut",
        "VideoContentSearchListAnchorSetFeaturesIn": "_contentwarehouse_432_VideoContentSearchListAnchorSetFeaturesIn",
        "VideoContentSearchListAnchorSetFeaturesOut": "_contentwarehouse_433_VideoContentSearchListAnchorSetFeaturesOut",
        "SentimentSentimentIn": "_contentwarehouse_434_SentimentSentimentIn",
        "SentimentSentimentOut": "_contentwarehouse_435_SentimentSentimentOut",
        "GeostoreFieldMetadataProtoIn": "_contentwarehouse_436_GeostoreFieldMetadataProtoIn",
        "GeostoreFieldMetadataProtoOut": "_contentwarehouse_437_GeostoreFieldMetadataProtoOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataIn": "_contentwarehouse_438_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataOut": "_contentwarehouse_439_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataOut",
        "AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityIn": "_contentwarehouse_440_AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityIn",
        "AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityOut": "_contentwarehouse_441_AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityOut",
        "QualityPreviewSnippetQueryTermCoverageFeaturesIn": "_contentwarehouse_442_QualityPreviewSnippetQueryTermCoverageFeaturesIn",
        "QualityPreviewSnippetQueryTermCoverageFeaturesOut": "_contentwarehouse_443_QualityPreviewSnippetQueryTermCoverageFeaturesOut",
        "AssistantLogsMediaFocusInfoLogIn": "_contentwarehouse_444_AssistantLogsMediaFocusInfoLogIn",
        "AssistantLogsMediaFocusInfoLogOut": "_contentwarehouse_445_AssistantLogsMediaFocusInfoLogOut",
        "AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataIn": "_contentwarehouse_446_AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataOut": "_contentwarehouse_447_AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorIn": "_contentwarehouse_448_KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorOut": "_contentwarehouse_449_KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorOut",
        "VideoContentSearchDolphinScoringConfigIn": "_contentwarehouse_450_VideoContentSearchDolphinScoringConfigIn",
        "VideoContentSearchDolphinScoringConfigOut": "_contentwarehouse_451_VideoContentSearchDolphinScoringConfigOut",
        "NlpSemanticParsingModelsMediaProviderMetadataIn": "_contentwarehouse_452_NlpSemanticParsingModelsMediaProviderMetadataIn",
        "NlpSemanticParsingModelsMediaProviderMetadataOut": "_contentwarehouse_453_NlpSemanticParsingModelsMediaProviderMetadataOut",
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesIn": "_contentwarehouse_454_SuperrootPodcastsRecommendationsPodcastRecsFeaturesIn",
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesOut": "_contentwarehouse_455_SuperrootPodcastsRecommendationsPodcastRecsFeaturesOut",
        "RepositoryWebrefKCAttributeMetadataIn": "_contentwarehouse_456_RepositoryWebrefKCAttributeMetadataIn",
        "RepositoryWebrefKCAttributeMetadataOut": "_contentwarehouse_457_RepositoryWebrefKCAttributeMetadataOut",
        "KnowledgeAnswersValueTypeIn": "_contentwarehouse_458_KnowledgeAnswersValueTypeIn",
        "KnowledgeAnswersValueTypeOut": "_contentwarehouse_459_KnowledgeAnswersValueTypeOut",
        "PornFlagDataIn": "_contentwarehouse_460_PornFlagDataIn",
        "PornFlagDataOut": "_contentwarehouse_461_PornFlagDataOut",
        "PhotosImageMetadataIn": "_contentwarehouse_462_PhotosImageMetadataIn",
        "PhotosImageMetadataOut": "_contentwarehouse_463_PhotosImageMetadataOut",
        "AssistantApiSettingsInternalAncillaryDeviceIdIn": "_contentwarehouse_464_AssistantApiSettingsInternalAncillaryDeviceIdIn",
        "AssistantApiSettingsInternalAncillaryDeviceIdOut": "_contentwarehouse_465_AssistantApiSettingsInternalAncillaryDeviceIdOut",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldIn": "_contentwarehouse_466_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldIn",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldOut": "_contentwarehouse_467_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldOut",
        "ImageExifIPTCMetadataContactInfoIn": "_contentwarehouse_468_ImageExifIPTCMetadataContactInfoIn",
        "ImageExifIPTCMetadataContactInfoOut": "_contentwarehouse_469_ImageExifIPTCMetadataContactInfoOut",
        "LensDiscoveryStylePersonDetectionSignalsDetectedPersonIn": "_contentwarehouse_470_LensDiscoveryStylePersonDetectionSignalsDetectedPersonIn",
        "LensDiscoveryStylePersonDetectionSignalsDetectedPersonOut": "_contentwarehouse_471_LensDiscoveryStylePersonDetectionSignalsDetectedPersonOut",
        "AbuseiamManualReviewEvaluationInfoIn": "_contentwarehouse_472_AbuseiamManualReviewEvaluationInfoIn",
        "AbuseiamManualReviewEvaluationInfoOut": "_contentwarehouse_473_AbuseiamManualReviewEvaluationInfoOut",
        "AssistantApiFeatureSpecificActionSupportIn": "_contentwarehouse_474_AssistantApiFeatureSpecificActionSupportIn",
        "AssistantApiFeatureSpecificActionSupportOut": "_contentwarehouse_475_AssistantApiFeatureSpecificActionSupportOut",
        "RepositoryWebrefWebrefAttachmentMetadataIn": "_contentwarehouse_476_RepositoryWebrefWebrefAttachmentMetadataIn",
        "RepositoryWebrefWebrefAttachmentMetadataOut": "_contentwarehouse_477_RepositoryWebrefWebrefAttachmentMetadataOut",
        "GeostoreFeatureIdProtoIn": "_contentwarehouse_478_GeostoreFeatureIdProtoIn",
        "GeostoreFeatureIdProtoOut": "_contentwarehouse_479_GeostoreFeatureIdProtoOut",
        "GoodocSemanticLabelContentLinkCitationTargetIn": "_contentwarehouse_480_GoodocSemanticLabelContentLinkCitationTargetIn",
        "GoodocSemanticLabelContentLinkCitationTargetOut": "_contentwarehouse_481_GoodocSemanticLabelContentLinkCitationTargetOut",
        "GeoOndemandAssistantSupportedActionsIn": "_contentwarehouse_482_GeoOndemandAssistantSupportedActionsIn",
        "GeoOndemandAssistantSupportedActionsOut": "_contentwarehouse_483_GeoOndemandAssistantSupportedActionsOut",
        "IndexingDocjoinerAnchorStatisticsPerDupStatsIn": "_contentwarehouse_484_IndexingDocjoinerAnchorStatisticsPerDupStatsIn",
        "IndexingDocjoinerAnchorStatisticsPerDupStatsOut": "_contentwarehouse_485_IndexingDocjoinerAnchorStatisticsPerDupStatsOut",
        "GeostoreUserProtoIn": "_contentwarehouse_486_GeostoreUserProtoIn",
        "GeostoreUserProtoOut": "_contentwarehouse_487_GeostoreUserProtoOut",
        "KnowledgeAnswersOpaqueRecurrenceTypeIn": "_contentwarehouse_488_KnowledgeAnswersOpaqueRecurrenceTypeIn",
        "KnowledgeAnswersOpaqueRecurrenceTypeOut": "_contentwarehouse_489_KnowledgeAnswersOpaqueRecurrenceTypeOut",
        "QualityNsrVersionedFloatSignalIn": "_contentwarehouse_490_QualityNsrVersionedFloatSignalIn",
        "QualityNsrVersionedFloatSignalOut": "_contentwarehouse_491_QualityNsrVersionedFloatSignalOut",
        "GoogleCloudContentwarehouseV1PropertyTypeOptionsIn": "_contentwarehouse_492_GoogleCloudContentwarehouseV1PropertyTypeOptionsIn",
        "GoogleCloudContentwarehouseV1PropertyTypeOptionsOut": "_contentwarehouse_493_GoogleCloudContentwarehouseV1PropertyTypeOptionsOut",
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionIn": "_contentwarehouse_494_LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionIn",
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionOut": "_contentwarehouse_495_LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionOut",
        "NlpSciencelitAuthorIn": "_contentwarehouse_496_NlpSciencelitAuthorIn",
        "NlpSciencelitAuthorOut": "_contentwarehouse_497_NlpSciencelitAuthorOut",
        "SocialGraphApiProtoUsageInfoIn": "_contentwarehouse_498_SocialGraphApiProtoUsageInfoIn",
        "SocialGraphApiProtoUsageInfoOut": "_contentwarehouse_499_SocialGraphApiProtoUsageInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationProjectIn": "_contentwarehouse_500_AppsPeopleOzExternalMergedpeopleapiOrganizationProjectIn",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationProjectOut": "_contentwarehouse_501_AppsPeopleOzExternalMergedpeopleapiOrganizationProjectOut",
        "MediaIndexFrameIdentifierIn": "_contentwarehouse_502_MediaIndexFrameIdentifierIn",
        "MediaIndexFrameIdentifierOut": "_contentwarehouse_503_MediaIndexFrameIdentifierOut",
        "RepositoryWebrefRefconRefconNameInfoIn": "_contentwarehouse_504_RepositoryWebrefRefconRefconNameInfoIn",
        "RepositoryWebrefRefconRefconNameInfoOut": "_contentwarehouse_505_RepositoryWebrefRefconRefconNameInfoOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateIn": "_contentwarehouse_506_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateOut": "_contentwarehouse_507_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateOut",
        "AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchIn": "_contentwarehouse_508_AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchIn",
        "AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchOut": "_contentwarehouse_509_AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchOut",
        "AssistantApiSettingsPoliteModeIn": "_contentwarehouse_510_AssistantApiSettingsPoliteModeIn",
        "AssistantApiSettingsPoliteModeOut": "_contentwarehouse_511_AssistantApiSettingsPoliteModeOut",
        "ScienceCitationUnionCatalogIn": "_contentwarehouse_512_ScienceCitationUnionCatalogIn",
        "ScienceCitationUnionCatalogOut": "_contentwarehouse_513_ScienceCitationUnionCatalogOut",
        "NlpSemanticParsingLocalLocationConstraintIn": "_contentwarehouse_514_NlpSemanticParsingLocalLocationConstraintIn",
        "NlpSemanticParsingLocalLocationConstraintOut": "_contentwarehouse_515_NlpSemanticParsingLocalLocationConstraintOut",
        "TrawlerFetchReplyDataFetchStatsStateStatsIn": "_contentwarehouse_516_TrawlerFetchReplyDataFetchStatsStateStatsIn",
        "TrawlerFetchReplyDataFetchStatsStateStatsOut": "_contentwarehouse_517_TrawlerFetchReplyDataFetchStatsStateStatsOut",
        "GeostoreFeaturePropertyIdProtoIn": "_contentwarehouse_518_GeostoreFeaturePropertyIdProtoIn",
        "GeostoreFeaturePropertyIdProtoOut": "_contentwarehouse_519_GeostoreFeaturePropertyIdProtoOut",
        "NlpSemanticParsingModelsShoppingAssistantMerchantIn": "_contentwarehouse_520_NlpSemanticParsingModelsShoppingAssistantMerchantIn",
        "NlpSemanticParsingModelsShoppingAssistantMerchantOut": "_contentwarehouse_521_NlpSemanticParsingModelsShoppingAssistantMerchantOut",
        "QualityShoppingShoppingAttachmentPBlockIn": "_contentwarehouse_522_QualityShoppingShoppingAttachmentPBlockIn",
        "QualityShoppingShoppingAttachmentPBlockOut": "_contentwarehouse_523_QualityShoppingShoppingAttachmentPBlockOut",
        "QualityWebanswersTranscriptAnnotationsIn": "_contentwarehouse_524_QualityWebanswersTranscriptAnnotationsIn",
        "QualityWebanswersTranscriptAnnotationsOut": "_contentwarehouse_525_QualityWebanswersTranscriptAnnotationsOut",
        "AssistantApiSystemNotificationRestrictionsIn": "_contentwarehouse_526_AssistantApiSystemNotificationRestrictionsIn",
        "AssistantApiSystemNotificationRestrictionsOut": "_contentwarehouse_527_AssistantApiSystemNotificationRestrictionsOut",
        "MediaIndexVideoCentroidDomainScoreIn": "_contentwarehouse_528_MediaIndexVideoCentroidDomainScoreIn",
        "MediaIndexVideoCentroidDomainScoreOut": "_contentwarehouse_529_MediaIndexVideoCentroidDomainScoreOut",
        "GeostoreLaneProtoIn": "_contentwarehouse_530_GeostoreLaneProtoIn",
        "GeostoreLaneProtoOut": "_contentwarehouse_531_GeostoreLaneProtoOut",
        "KnowledgeVerticalsWeatherProtoUserSpecifiedLocationIn": "_contentwarehouse_532_KnowledgeVerticalsWeatherProtoUserSpecifiedLocationIn",
        "KnowledgeVerticalsWeatherProtoUserSpecifiedLocationOut": "_contentwarehouse_533_KnowledgeVerticalsWeatherProtoUserSpecifiedLocationOut",
        "QualityNavboostCrapsStatsWithWeightsProtoIn": "_contentwarehouse_534_QualityNavboostCrapsStatsWithWeightsProtoIn",
        "QualityNavboostCrapsStatsWithWeightsProtoOut": "_contentwarehouse_535_QualityNavboostCrapsStatsWithWeightsProtoOut",
        "NlxDataSchemaParagraphIn": "_contentwarehouse_536_NlxDataSchemaParagraphIn",
        "NlxDataSchemaParagraphOut": "_contentwarehouse_537_NlxDataSchemaParagraphOut",
        "AppsPeopleOzExternalMergedpeopleapiSourceIdentityIn": "_contentwarehouse_538_AppsPeopleOzExternalMergedpeopleapiSourceIdentityIn",
        "AppsPeopleOzExternalMergedpeopleapiSourceIdentityOut": "_contentwarehouse_539_AppsPeopleOzExternalMergedpeopleapiSourceIdentityOut",
        "RepositoryWebrefFreebaseTypeIn": "_contentwarehouse_540_RepositoryWebrefFreebaseTypeIn",
        "RepositoryWebrefFreebaseTypeOut": "_contentwarehouse_541_RepositoryWebrefFreebaseTypeOut",
        "NlpSciencelitArticleIdIn": "_contentwarehouse_542_NlpSciencelitArticleIdIn",
        "NlpSciencelitArticleIdOut": "_contentwarehouse_543_NlpSciencelitArticleIdOut",
        "GeostorePriceInfoFoodNutritionFactsIn": "_contentwarehouse_544_GeostorePriceInfoFoodNutritionFactsIn",
        "GeostorePriceInfoFoodNutritionFactsOut": "_contentwarehouse_545_GeostorePriceInfoFoodNutritionFactsOut",
        "VideoContentSearchAnchorsThumbnailInfoIn": "_contentwarehouse_546_VideoContentSearchAnchorsThumbnailInfoIn",
        "VideoContentSearchAnchorsThumbnailInfoOut": "_contentwarehouse_547_VideoContentSearchAnchorsThumbnailInfoOut",
        "QualityShoppingShoppingAttachmentProductIn": "_contentwarehouse_548_QualityShoppingShoppingAttachmentProductIn",
        "QualityShoppingShoppingAttachmentProductOut": "_contentwarehouse_549_QualityShoppingShoppingAttachmentProductOut",
        "LegalCitationCourtDocumentPubIn": "_contentwarehouse_550_LegalCitationCourtDocumentPubIn",
        "LegalCitationCourtDocumentPubOut": "_contentwarehouse_551_LegalCitationCourtDocumentPubOut",
        "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsIn": "_contentwarehouse_552_CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsIn",
        "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsOut": "_contentwarehouse_553_CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsOut",
        "VideoContentSearchOcrVideoFeatureIn": "_contentwarehouse_554_VideoContentSearchOcrVideoFeatureIn",
        "VideoContentSearchOcrVideoFeatureOut": "_contentwarehouse_555_VideoContentSearchOcrVideoFeatureOut",
        "AppsPeopleOzExternalMergedpeopleapiSshPublicKeyIn": "_contentwarehouse_556_AppsPeopleOzExternalMergedpeopleapiSshPublicKeyIn",
        "AppsPeopleOzExternalMergedpeopleapiSshPublicKeyOut": "_contentwarehouse_557_AppsPeopleOzExternalMergedpeopleapiSshPublicKeyOut",
        "GeostorePoseProtoIn": "_contentwarehouse_558_GeostorePoseProtoIn",
        "GeostorePoseProtoOut": "_contentwarehouse_559_GeostorePoseProtoOut",
        "AssistantApiSupportedClientOpSupportedExecutionIn": "_contentwarehouse_560_AssistantApiSupportedClientOpSupportedExecutionIn",
        "AssistantApiSupportedClientOpSupportedExecutionOut": "_contentwarehouse_561_AssistantApiSupportedClientOpSupportedExecutionOut",
        "RepositoryWebrefUniversalNgramDataIn": "_contentwarehouse_562_RepositoryWebrefUniversalNgramDataIn",
        "RepositoryWebrefUniversalNgramDataOut": "_contentwarehouse_563_RepositoryWebrefUniversalNgramDataOut",
        "NlpSemanticParsingModelsMediaMusicPlaylistIn": "_contentwarehouse_564_NlpSemanticParsingModelsMediaMusicPlaylistIn",
        "NlpSemanticParsingModelsMediaMusicPlaylistOut": "_contentwarehouse_565_NlpSemanticParsingModelsMediaMusicPlaylistOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataIn": "_contentwarehouse_566_AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataOut": "_contentwarehouse_567_AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiPointSpecIn": "_contentwarehouse_568_AppsPeopleOzExternalMergedpeopleapiPointSpecIn",
        "AppsPeopleOzExternalMergedpeopleapiPointSpecOut": "_contentwarehouse_569_AppsPeopleOzExternalMergedpeopleapiPointSpecOut",
        "AssistantGroundingRankerDeviceContactAffinityFeaturesIn": "_contentwarehouse_570_AssistantGroundingRankerDeviceContactAffinityFeaturesIn",
        "AssistantGroundingRankerDeviceContactAffinityFeaturesOut": "_contentwarehouse_571_AssistantGroundingRankerDeviceContactAffinityFeaturesOut",
        "PostalAddressIn": "_contentwarehouse_572_PostalAddressIn",
        "PostalAddressOut": "_contentwarehouse_573_PostalAddressOut",
        "RichsnippetsDataObjectAttributeIn": "_contentwarehouse_574_RichsnippetsDataObjectAttributeIn",
        "RichsnippetsDataObjectAttributeOut": "_contentwarehouse_575_RichsnippetsDataObjectAttributeOut",
        "SocialGraphApiProtoContactPromptSettingsIn": "_contentwarehouse_576_SocialGraphApiProtoContactPromptSettingsIn",
        "SocialGraphApiProtoContactPromptSettingsOut": "_contentwarehouse_577_SocialGraphApiProtoContactPromptSettingsOut",
        "VideoContentSearchVideoAnchorIn": "_contentwarehouse_578_VideoContentSearchVideoAnchorIn",
        "VideoContentSearchVideoAnchorOut": "_contentwarehouse_579_VideoContentSearchVideoAnchorOut",
        "AssistantApiSettingsHotwordThresholdAdjustmentFactorIn": "_contentwarehouse_580_AssistantApiSettingsHotwordThresholdAdjustmentFactorIn",
        "AssistantApiSettingsHotwordThresholdAdjustmentFactorOut": "_contentwarehouse_581_AssistantApiSettingsHotwordThresholdAdjustmentFactorOut",
        "KnowledgeAnswersIntentQueryFunctionCallIn": "_contentwarehouse_582_KnowledgeAnswersIntentQueryFunctionCallIn",
        "KnowledgeAnswersIntentQueryFunctionCallOut": "_contentwarehouse_583_KnowledgeAnswersIntentQueryFunctionCallOut",
        "AssistantLogsLumosProcessorInfoIn": "_contentwarehouse_584_AssistantLogsLumosProcessorInfoIn",
        "AssistantLogsLumosProcessorInfoOut": "_contentwarehouse_585_AssistantLogsLumosProcessorInfoOut",
        "AssistantApiSettingsDeviceLogsOptInIn": "_contentwarehouse_586_AssistantApiSettingsDeviceLogsOptInIn",
        "AssistantApiSettingsDeviceLogsOptInOut": "_contentwarehouse_587_AssistantApiSettingsDeviceLogsOptInOut",
        "VideoAudioStreamIn": "_contentwarehouse_588_VideoAudioStreamIn",
        "VideoAudioStreamOut": "_contentwarehouse_589_VideoAudioStreamOut",
        "NlpSemanticParsingModelsMediaFrequencyIn": "_contentwarehouse_590_NlpSemanticParsingModelsMediaFrequencyIn",
        "NlpSemanticParsingModelsMediaFrequencyOut": "_contentwarehouse_591_NlpSemanticParsingModelsMediaFrequencyOut",
        "AssistantApiCoreTypesDeviceIdIn": "_contentwarehouse_592_AssistantApiCoreTypesDeviceIdIn",
        "AssistantApiCoreTypesDeviceIdOut": "_contentwarehouse_593_AssistantApiCoreTypesDeviceIdOut",
        "AppsPeopleOzExternalMergedpeopleapiProductMetadataIn": "_contentwarehouse_594_AppsPeopleOzExternalMergedpeopleapiProductMetadataIn",
        "AppsPeopleOzExternalMergedpeopleapiProductMetadataOut": "_contentwarehouse_595_AppsPeopleOzExternalMergedpeopleapiProductMetadataOut",
        "KnowledgeAnswersOpaqueProductivityListItemTypeIn": "_contentwarehouse_596_KnowledgeAnswersOpaqueProductivityListItemTypeIn",
        "KnowledgeAnswersOpaqueProductivityListItemTypeOut": "_contentwarehouse_597_KnowledgeAnswersOpaqueProductivityListItemTypeOut",
        "ImageSafesearchContentOffensiveSymbolDetectionIn": "_contentwarehouse_598_ImageSafesearchContentOffensiveSymbolDetectionIn",
        "ImageSafesearchContentOffensiveSymbolDetectionOut": "_contentwarehouse_599_ImageSafesearchContentOffensiveSymbolDetectionOut",
        "ImageMonetizationFeaturedImagePropertiesIn": "_contentwarehouse_600_ImageMonetizationFeaturedImagePropertiesIn",
        "ImageMonetizationFeaturedImagePropertiesOut": "_contentwarehouse_601_ImageMonetizationFeaturedImagePropertiesOut",
        "AssistantApiSettingsHospitalityModeIn": "_contentwarehouse_602_AssistantApiSettingsHospitalityModeIn",
        "AssistantApiSettingsHospitalityModeOut": "_contentwarehouse_603_AssistantApiSettingsHospitalityModeOut",
        "NlpSemanticParsingLocalAmenitiesIn": "_contentwarehouse_604_NlpSemanticParsingLocalAmenitiesIn",
        "NlpSemanticParsingLocalAmenitiesOut": "_contentwarehouse_605_NlpSemanticParsingLocalAmenitiesOut",
        "NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoIn": "_contentwarehouse_606_NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoIn",
        "NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoOut": "_contentwarehouse_607_NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoOut",
        "AnchorsIn": "_contentwarehouse_608_AnchorsIn",
        "AnchorsOut": "_contentwarehouse_609_AnchorsOut",
        "GoogleCloudDocumentaiV1BoundingPolyIn": "_contentwarehouse_610_GoogleCloudDocumentaiV1BoundingPolyIn",
        "GoogleCloudDocumentaiV1BoundingPolyOut": "_contentwarehouse_611_GoogleCloudDocumentaiV1BoundingPolyOut",
        "KnowledgeAnswersBooleanTypeIn": "_contentwarehouse_612_KnowledgeAnswersBooleanTypeIn",
        "KnowledgeAnswersBooleanTypeOut": "_contentwarehouse_613_KnowledgeAnswersBooleanTypeOut",
        "NlpSciencelitTokenizedTextIn": "_contentwarehouse_614_NlpSciencelitTokenizedTextIn",
        "NlpSciencelitTokenizedTextOut": "_contentwarehouse_615_NlpSciencelitTokenizedTextOut",
        "SocialCommonSearchLinkDataIn": "_contentwarehouse_616_SocialCommonSearchLinkDataIn",
        "SocialCommonSearchLinkDataOut": "_contentwarehouse_617_SocialCommonSearchLinkDataOut",
        "CrowdingPerDocDataNewsClusterIn": "_contentwarehouse_618_CrowdingPerDocDataNewsClusterIn",
        "CrowdingPerDocDataNewsClusterOut": "_contentwarehouse_619_CrowdingPerDocDataNewsClusterOut",
        "FatcatCompactRephilClustersIn": "_contentwarehouse_620_FatcatCompactRephilClustersIn",
        "FatcatCompactRephilClustersOut": "_contentwarehouse_621_FatcatCompactRephilClustersOut",
        "AssistantVerticalsHomeautomationProtoActionProjectConfigIn": "_contentwarehouse_622_AssistantVerticalsHomeautomationProtoActionProjectConfigIn",
        "AssistantVerticalsHomeautomationProtoActionProjectConfigOut": "_contentwarehouse_623_AssistantVerticalsHomeautomationProtoActionProjectConfigOut",
        "GeostoreRoadSignComponentProtoIn": "_contentwarehouse_624_GeostoreRoadSignComponentProtoIn",
        "GeostoreRoadSignComponentProtoOut": "_contentwarehouse_625_GeostoreRoadSignComponentProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiOtherKeywordIn": "_contentwarehouse_626_AppsPeopleOzExternalMergedpeopleapiOtherKeywordIn",
        "AppsPeopleOzExternalMergedpeopleapiOtherKeywordOut": "_contentwarehouse_627_AppsPeopleOzExternalMergedpeopleapiOtherKeywordOut",
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerIn": "_contentwarehouse_628_AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerIn",
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerOut": "_contentwarehouse_629_AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerOut",
        "NlpSciencelitPubDateIn": "_contentwarehouse_630_NlpSciencelitPubDateIn",
        "NlpSciencelitPubDateOut": "_contentwarehouse_631_NlpSciencelitPubDateOut",
        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupIn": "_contentwarehouse_632_ImageRepositoryShoppingProductInformationProductInformationTokenGroupIn",
        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupOut": "_contentwarehouse_633_ImageRepositoryShoppingProductInformationProductInformationTokenGroupOut",
        "AppsPeopleOzExternalMergedpeopleapiPosixAccountIn": "_contentwarehouse_634_AppsPeopleOzExternalMergedpeopleapiPosixAccountIn",
        "AppsPeopleOzExternalMergedpeopleapiPosixAccountOut": "_contentwarehouse_635_AppsPeopleOzExternalMergedpeopleapiPosixAccountOut",
        "NlpSemanticParsingLocalChainMemberConstraintIn": "_contentwarehouse_636_NlpSemanticParsingLocalChainMemberConstraintIn",
        "NlpSemanticParsingLocalChainMemberConstraintOut": "_contentwarehouse_637_NlpSemanticParsingLocalChainMemberConstraintOut",
        "GoogleInternalCommunicationsInstantmessagingV1LocationHintIn": "_contentwarehouse_638_GoogleInternalCommunicationsInstantmessagingV1LocationHintIn",
        "GoogleInternalCommunicationsInstantmessagingV1LocationHintOut": "_contentwarehouse_639_GoogleInternalCommunicationsInstantmessagingV1LocationHintOut",
        "GoogleInternalAppsWaldoV1alphaUserAvailabilitiesIn": "_contentwarehouse_640_GoogleInternalAppsWaldoV1alphaUserAvailabilitiesIn",
        "GoogleInternalAppsWaldoV1alphaUserAvailabilitiesOut": "_contentwarehouse_641_GoogleInternalAppsWaldoV1alphaUserAvailabilitiesOut",
        "FaceIndexingIn": "_contentwarehouse_642_FaceIndexingIn",
        "FaceIndexingOut": "_contentwarehouse_643_FaceIndexingOut",
        "FreebaseIdIn": "_contentwarehouse_644_FreebaseIdIn",
        "FreebaseIdOut": "_contentwarehouse_645_FreebaseIdOut",
        "AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityIn": "_contentwarehouse_646_AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityIn",
        "AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityOut": "_contentwarehouse_647_AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityOut",
        "AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsIn": "_contentwarehouse_648_AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsIn",
        "AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsOut": "_contentwarehouse_649_AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsOut",
        "AssistantDevicesPlatformProtoMediaPauseCapabilityIn": "_contentwarehouse_650_AssistantDevicesPlatformProtoMediaPauseCapabilityIn",
        "AssistantDevicesPlatformProtoMediaPauseCapabilityOut": "_contentwarehouse_651_AssistantDevicesPlatformProtoMediaPauseCapabilityOut",
        "RepositoryWebrefPreprocessingUrlMatchingMetadataIn": "_contentwarehouse_652_RepositoryWebrefPreprocessingUrlMatchingMetadataIn",
        "RepositoryWebrefPreprocessingUrlMatchingMetadataOut": "_contentwarehouse_653_RepositoryWebrefPreprocessingUrlMatchingMetadataOut",
        "SocialCommonFormattingIn": "_contentwarehouse_654_SocialCommonFormattingIn",
        "SocialCommonFormattingOut": "_contentwarehouse_655_SocialCommonFormattingOut",
        "EmbedsTransientDataIn": "_contentwarehouse_656_EmbedsTransientDataIn",
        "EmbedsTransientDataOut": "_contentwarehouse_657_EmbedsTransientDataOut",
        "GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeIn": "_contentwarehouse_658_GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeIn",
        "GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeOut": "_contentwarehouse_659_GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeOut",
        "CloudAiPlatformTenantresourceTenantResourceIn": "_contentwarehouse_660_CloudAiPlatformTenantresourceTenantResourceIn",
        "CloudAiPlatformTenantresourceTenantResourceOut": "_contentwarehouse_661_CloudAiPlatformTenantresourceTenantResourceOut",
        "AssistantApiOnDeviceSmartHomeCapabilitiesIn": "_contentwarehouse_662_AssistantApiOnDeviceSmartHomeCapabilitiesIn",
        "AssistantApiOnDeviceSmartHomeCapabilitiesOut": "_contentwarehouse_663_AssistantApiOnDeviceSmartHomeCapabilitiesOut",
        "SocialGraphApiProtoMonthlyWeekdayRecurrenceIn": "_contentwarehouse_664_SocialGraphApiProtoMonthlyWeekdayRecurrenceIn",
        "SocialGraphApiProtoMonthlyWeekdayRecurrenceOut": "_contentwarehouse_665_SocialGraphApiProtoMonthlyWeekdayRecurrenceOut",
        "SocialGraphApiProtoLimitedProfilePictureSettingsIn": "_contentwarehouse_666_SocialGraphApiProtoLimitedProfilePictureSettingsIn",
        "SocialGraphApiProtoLimitedProfilePictureSettingsOut": "_contentwarehouse_667_SocialGraphApiProtoLimitedProfilePictureSettingsOut",
        "QualityTimebasedLastSignificantUpdateIn": "_contentwarehouse_668_QualityTimebasedLastSignificantUpdateIn",
        "QualityTimebasedLastSignificantUpdateOut": "_contentwarehouse_669_QualityTimebasedLastSignificantUpdateOut",
        "AssistantApiCoreTypesCalendarEventAttendeeIn": "_contentwarehouse_670_AssistantApiCoreTypesCalendarEventAttendeeIn",
        "AssistantApiCoreTypesCalendarEventAttendeeOut": "_contentwarehouse_671_AssistantApiCoreTypesCalendarEventAttendeeOut",
        "DrishtiVesperThumbnailIn": "_contentwarehouse_672_DrishtiVesperThumbnailIn",
        "DrishtiVesperThumbnailOut": "_contentwarehouse_673_DrishtiVesperThumbnailOut",
        "NlpSemanticParsingQRefAnnotationEntityRelationshipIn": "_contentwarehouse_674_NlpSemanticParsingQRefAnnotationEntityRelationshipIn",
        "NlpSemanticParsingQRefAnnotationEntityRelationshipOut": "_contentwarehouse_675_NlpSemanticParsingQRefAnnotationEntityRelationshipOut",
        "GeostoreLandmarkReferenceProtoIn": "_contentwarehouse_676_GeostoreLandmarkReferenceProtoIn",
        "GeostoreLandmarkReferenceProtoOut": "_contentwarehouse_677_GeostoreLandmarkReferenceProtoOut",
        "SocialGraphApiProtoThirdPartyInfoIn": "_contentwarehouse_678_SocialGraphApiProtoThirdPartyInfoIn",
        "SocialGraphApiProtoThirdPartyInfoOut": "_contentwarehouse_679_SocialGraphApiProtoThirdPartyInfoOut",
        "AssistantApiCameraCapabilitiesIn": "_contentwarehouse_680_AssistantApiCameraCapabilitiesIn",
        "AssistantApiCameraCapabilitiesOut": "_contentwarehouse_681_AssistantApiCameraCapabilitiesOut",
        "QualitySitemapCoClickTargetDocCoClickByLocaleIn": "_contentwarehouse_682_QualitySitemapCoClickTargetDocCoClickByLocaleIn",
        "QualitySitemapCoClickTargetDocCoClickByLocaleOut": "_contentwarehouse_683_QualitySitemapCoClickTargetDocCoClickByLocaleOut",
        "QualityAuthorityTopicEmbeddingsVersionedItemIn": "_contentwarehouse_684_QualityAuthorityTopicEmbeddingsVersionedItemIn",
        "QualityAuthorityTopicEmbeddingsVersionedItemOut": "_contentwarehouse_685_QualityAuthorityTopicEmbeddingsVersionedItemOut",
        "NlpMeaningSemanticTypeNameMeaningRemodelingsIn": "_contentwarehouse_686_NlpMeaningSemanticTypeNameMeaningRemodelingsIn",
        "NlpMeaningSemanticTypeNameMeaningRemodelingsOut": "_contentwarehouse_687_NlpMeaningSemanticTypeNameMeaningRemodelingsOut",
        "RepositoryAnnotationsGeoTopicalityIn": "_contentwarehouse_688_RepositoryAnnotationsGeoTopicalityIn",
        "RepositoryAnnotationsGeoTopicalityOut": "_contentwarehouse_689_RepositoryAnnotationsGeoTopicalityOut",
        "GoogleCloudContentwarehouseV1UpdateDocumentMetadataIn": "_contentwarehouse_690_GoogleCloudContentwarehouseV1UpdateDocumentMetadataIn",
        "GoogleCloudContentwarehouseV1UpdateDocumentMetadataOut": "_contentwarehouse_691_GoogleCloudContentwarehouseV1UpdateDocumentMetadataOut",
        "SecurityCredentialsEmailOwnerProtoIn": "_contentwarehouse_692_SecurityCredentialsEmailOwnerProtoIn",
        "SecurityCredentialsEmailOwnerProtoOut": "_contentwarehouse_693_SecurityCredentialsEmailOwnerProtoOut",
        "NlpSemanticParsingModelsMediaPodcastInfoIn": "_contentwarehouse_694_NlpSemanticParsingModelsMediaPodcastInfoIn",
        "NlpSemanticParsingModelsMediaPodcastInfoOut": "_contentwarehouse_695_NlpSemanticParsingModelsMediaPodcastInfoOut",
        "RepositoryWebrefRefconMentionSpansIn": "_contentwarehouse_696_RepositoryWebrefRefconMentionSpansIn",
        "RepositoryWebrefRefconMentionSpansOut": "_contentwarehouse_697_RepositoryWebrefRefconMentionSpansOut",
        "GoogleCloudContentwarehouseV1DocumentIn": "_contentwarehouse_698_GoogleCloudContentwarehouseV1DocumentIn",
        "GoogleCloudContentwarehouseV1DocumentOut": "_contentwarehouse_699_GoogleCloudContentwarehouseV1DocumentOut",
        "AssistantApiFluidActionsSupportIn": "_contentwarehouse_700_AssistantApiFluidActionsSupportIn",
        "AssistantApiFluidActionsSupportOut": "_contentwarehouse_701_AssistantApiFluidActionsSupportOut",
        "GeostoreEstablishmentProtoIn": "_contentwarehouse_702_GeostoreEstablishmentProtoIn",
        "GeostoreEstablishmentProtoOut": "_contentwarehouse_703_GeostoreEstablishmentProtoOut",
        "NlpSemanticParsingDatetimeEventIn": "_contentwarehouse_704_NlpSemanticParsingDatetimeEventIn",
        "NlpSemanticParsingDatetimeEventOut": "_contentwarehouse_705_NlpSemanticParsingDatetimeEventOut",
        "LogsSemanticInterpretationIntentQuerySupportTransferRuleIn": "_contentwarehouse_706_LogsSemanticInterpretationIntentQuerySupportTransferRuleIn",
        "LogsSemanticInterpretationIntentQuerySupportTransferRuleOut": "_contentwarehouse_707_LogsSemanticInterpretationIntentQuerySupportTransferRuleOut",
        "VideoFileSphericalMetadataMeshProjectionIn": "_contentwarehouse_708_VideoFileSphericalMetadataMeshProjectionIn",
        "VideoFileSphericalMetadataMeshProjectionOut": "_contentwarehouse_709_VideoFileSphericalMetadataMeshProjectionOut",
        "SdrScrollToIn": "_contentwarehouse_710_SdrScrollToIn",
        "SdrScrollToOut": "_contentwarehouse_711_SdrScrollToOut",
        "AppsPeopleOzExternalMergedpeopleapiProfileUrlIn": "_contentwarehouse_712_AppsPeopleOzExternalMergedpeopleapiProfileUrlIn",
        "AppsPeopleOzExternalMergedpeopleapiProfileUrlOut": "_contentwarehouse_713_AppsPeopleOzExternalMergedpeopleapiProfileUrlOut",
        "EmbedsProvenanceIn": "_contentwarehouse_714_EmbedsProvenanceIn",
        "EmbedsProvenanceOut": "_contentwarehouse_715_EmbedsProvenanceOut",
        "ResearchScamCoscamEasyDisjunctionIn": "_contentwarehouse_716_ResearchScamCoscamEasyDisjunctionIn",
        "ResearchScamCoscamEasyDisjunctionOut": "_contentwarehouse_717_ResearchScamCoscamEasyDisjunctionOut",
        "AssistantLogsCommunicationPersonalContactDataLogIn": "_contentwarehouse_718_AssistantLogsCommunicationPersonalContactDataLogIn",
        "AssistantLogsCommunicationPersonalContactDataLogOut": "_contentwarehouse_719_AssistantLogsCommunicationPersonalContactDataLogOut",
        "NlpSemanticParsingLocalBasicLocationIn": "_contentwarehouse_720_NlpSemanticParsingLocalBasicLocationIn",
        "NlpSemanticParsingLocalBasicLocationOut": "_contentwarehouse_721_NlpSemanticParsingLocalBasicLocationOut",
        "GeostoreAttributeIdProtoIn": "_contentwarehouse_722_GeostoreAttributeIdProtoIn",
        "GeostoreAttributeIdProtoOut": "_contentwarehouse_723_GeostoreAttributeIdProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiBestDisplayNameIn": "_contentwarehouse_724_AppsPeopleOzExternalMergedpeopleapiBestDisplayNameIn",
        "AppsPeopleOzExternalMergedpeopleapiBestDisplayNameOut": "_contentwarehouse_725_AppsPeopleOzExternalMergedpeopleapiBestDisplayNameOut",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoIn": "_contentwarehouse_726_AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoOut": "_contentwarehouse_727_AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoOut",
        "RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaIn": "_contentwarehouse_728_RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaIn",
        "RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaOut": "_contentwarehouse_729_RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaOut",
        "AssistantLogsAmbiguousTargetDeviceLogIn": "_contentwarehouse_730_AssistantLogsAmbiguousTargetDeviceLogIn",
        "AssistantLogsAmbiguousTargetDeviceLogOut": "_contentwarehouse_731_AssistantLogsAmbiguousTargetDeviceLogOut",
        "TrawlerClientServiceInfoClientLabelsIn": "_contentwarehouse_732_TrawlerClientServiceInfoClientLabelsIn",
        "TrawlerClientServiceInfoClientLabelsOut": "_contentwarehouse_733_TrawlerClientServiceInfoClientLabelsOut",
        "ImageRepositoryVideoIndexingInfoIn": "_contentwarehouse_734_ImageRepositoryVideoIndexingInfoIn",
        "ImageRepositoryVideoIndexingInfoOut": "_contentwarehouse_735_ImageRepositoryVideoIndexingInfoOut",
        "SecurityCredentialsChatProtoIn": "_contentwarehouse_736_SecurityCredentialsChatProtoIn",
        "SecurityCredentialsChatProtoOut": "_contentwarehouse_737_SecurityCredentialsChatProtoOut",
        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxIn": "_contentwarehouse_738_HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxIn",
        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxOut": "_contentwarehouse_739_HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxOut",
        "VideoContentSearchInstructionAnchorFeaturesIn": "_contentwarehouse_740_VideoContentSearchInstructionAnchorFeaturesIn",
        "VideoContentSearchInstructionAnchorFeaturesOut": "_contentwarehouse_741_VideoContentSearchInstructionAnchorFeaturesOut",
        "AssistantApiScreenCapabilitiesMaskIn": "_contentwarehouse_742_AssistantApiScreenCapabilitiesMaskIn",
        "AssistantApiScreenCapabilitiesMaskOut": "_contentwarehouse_743_AssistantApiScreenCapabilitiesMaskOut",
        "GoogleCloudContentwarehouseV1RequestMetadataIn": "_contentwarehouse_744_GoogleCloudContentwarehouseV1RequestMetadataIn",
        "GoogleCloudContentwarehouseV1RequestMetadataOut": "_contentwarehouse_745_GoogleCloudContentwarehouseV1RequestMetadataOut",
        "GoogleCloudDocumentaiV1DocumentPageSymbolIn": "_contentwarehouse_746_GoogleCloudDocumentaiV1DocumentPageSymbolIn",
        "GoogleCloudDocumentaiV1DocumentPageSymbolOut": "_contentwarehouse_747_GoogleCloudDocumentaiV1DocumentPageSymbolOut",
        "QualityActionsCustomizedNotificationPayloadIn": "_contentwarehouse_748_QualityActionsCustomizedNotificationPayloadIn",
        "QualityActionsCustomizedNotificationPayloadOut": "_contentwarehouse_749_QualityActionsCustomizedNotificationPayloadOut",
        "AppsPeopleOzExternalMergedpeopleapiOccupationIn": "_contentwarehouse_750_AppsPeopleOzExternalMergedpeopleapiOccupationIn",
        "AppsPeopleOzExternalMergedpeopleapiOccupationOut": "_contentwarehouse_751_AppsPeopleOzExternalMergedpeopleapiOccupationOut",
        "KnowledgeAnswersSensitivityMyActivityPolicyIn": "_contentwarehouse_752_KnowledgeAnswersSensitivityMyActivityPolicyIn",
        "KnowledgeAnswersSensitivityMyActivityPolicyOut": "_contentwarehouse_753_KnowledgeAnswersSensitivityMyActivityPolicyOut",
        "MediaIndexXtagIn": "_contentwarehouse_754_MediaIndexXtagIn",
        "MediaIndexXtagOut": "_contentwarehouse_755_MediaIndexXtagOut",
        "GoogleCloudDocumentaiV1DocumentPageParagraphIn": "_contentwarehouse_756_GoogleCloudDocumentaiV1DocumentPageParagraphIn",
        "GoogleCloudDocumentaiV1DocumentPageParagraphOut": "_contentwarehouse_757_GoogleCloudDocumentaiV1DocumentPageParagraphOut",
        "SnapshotBoxIn": "_contentwarehouse_758_SnapshotBoxIn",
        "SnapshotBoxOut": "_contentwarehouse_759_SnapshotBoxOut",
        "AbuseiamFeatureIn": "_contentwarehouse_760_AbuseiamFeatureIn",
        "AbuseiamFeatureOut": "_contentwarehouse_761_AbuseiamFeatureOut",
        "RepositoryWebrefMentionIn": "_contentwarehouse_762_RepositoryWebrefMentionIn",
        "RepositoryWebrefMentionOut": "_contentwarehouse_763_RepositoryWebrefMentionOut",
        "SocialGraphApiProtoDecorationOverlayIn": "_contentwarehouse_764_SocialGraphApiProtoDecorationOverlayIn",
        "SocialGraphApiProtoDecorationOverlayOut": "_contentwarehouse_765_SocialGraphApiProtoDecorationOverlayOut",
        "NlpSemanticParsingDatetimeSpanIn": "_contentwarehouse_766_NlpSemanticParsingDatetimeSpanIn",
        "NlpSemanticParsingDatetimeSpanOut": "_contentwarehouse_767_NlpSemanticParsingDatetimeSpanOut",
        "CopleyLexicalMetadataIn": "_contentwarehouse_768_CopleyLexicalMetadataIn",
        "CopleyLexicalMetadataOut": "_contentwarehouse_769_CopleyLexicalMetadataOut",
        "KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipIn": "_contentwarehouse_770_KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipIn",
        "KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipOut": "_contentwarehouse_771_KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipOut",
        "ImageRepositoryShoppingProductInformationBoundingBoxIn": "_contentwarehouse_772_ImageRepositoryShoppingProductInformationBoundingBoxIn",
        "ImageRepositoryShoppingProductInformationBoundingBoxOut": "_contentwarehouse_773_ImageRepositoryShoppingProductInformationBoundingBoxOut",
        "LocalsearchProtoInternalFoodOrderingActionMetadataIn": "_contentwarehouse_774_LocalsearchProtoInternalFoodOrderingActionMetadataIn",
        "LocalsearchProtoInternalFoodOrderingActionMetadataOut": "_contentwarehouse_775_LocalsearchProtoInternalFoodOrderingActionMetadataOut",
        "AssistantLogsCommunicationGoogleAccountProvenanceIn": "_contentwarehouse_776_AssistantLogsCommunicationGoogleAccountProvenanceIn",
        "AssistantLogsCommunicationGoogleAccountProvenanceOut": "_contentwarehouse_777_AssistantLogsCommunicationGoogleAccountProvenanceOut",
        "KnowledgeAnswersOpaqueAppAnnotationTypeIn": "_contentwarehouse_778_KnowledgeAnswersOpaqueAppAnnotationTypeIn",
        "KnowledgeAnswersOpaqueAppAnnotationTypeOut": "_contentwarehouse_779_KnowledgeAnswersOpaqueAppAnnotationTypeOut",
        "PhotosHdrMetadataGainmapIn": "_contentwarehouse_780_PhotosHdrMetadataGainmapIn",
        "PhotosHdrMetadataGainmapOut": "_contentwarehouse_781_PhotosHdrMetadataGainmapOut",
        "SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecIn": "_contentwarehouse_782_SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecIn",
        "SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecOut": "_contentwarehouse_783_SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecOut",
        "ImageMustangImageLinkSelectionInfoIn": "_contentwarehouse_784_ImageMustangImageLinkSelectionInfoIn",
        "ImageMustangImageLinkSelectionInfoOut": "_contentwarehouse_785_ImageMustangImageLinkSelectionInfoOut",
        "DrishtiFeatureSetDataFeatureSetElementIn": "_contentwarehouse_786_DrishtiFeatureSetDataFeatureSetElementIn",
        "DrishtiFeatureSetDataFeatureSetElementOut": "_contentwarehouse_787_DrishtiFeatureSetDataFeatureSetElementOut",
        "KnowledgeAnswersOpaqueAogTypeIn": "_contentwarehouse_788_KnowledgeAnswersOpaqueAogTypeIn",
        "KnowledgeAnswersOpaqueAogTypeOut": "_contentwarehouse_789_KnowledgeAnswersOpaqueAogTypeOut",
        "GeostoreFoodMenuItemProtoIn": "_contentwarehouse_790_GeostoreFoodMenuItemProtoIn",
        "GeostoreFoodMenuItemProtoOut": "_contentwarehouse_791_GeostoreFoodMenuItemProtoOut",
        "HtmlrenderWebkitHeadlessProtoWindowOpenEventIn": "_contentwarehouse_792_HtmlrenderWebkitHeadlessProtoWindowOpenEventIn",
        "HtmlrenderWebkitHeadlessProtoWindowOpenEventOut": "_contentwarehouse_793_HtmlrenderWebkitHeadlessProtoWindowOpenEventOut",
        "QualitySitemapCoClickTargetDocIn": "_contentwarehouse_794_QualitySitemapCoClickTargetDocIn",
        "QualitySitemapCoClickTargetDocOut": "_contentwarehouse_795_QualitySitemapCoClickTargetDocOut",
        "IndexingUrlPatternUrlTreeUrlTreeNodeIn": "_contentwarehouse_796_IndexingUrlPatternUrlTreeUrlTreeNodeIn",
        "IndexingUrlPatternUrlTreeUrlTreeNodeOut": "_contentwarehouse_797_IndexingUrlPatternUrlTreeUrlTreeNodeOut",
        "ResearchScienceSearchOrganizationIn": "_contentwarehouse_798_ResearchScienceSearchOrganizationIn",
        "ResearchScienceSearchOrganizationOut": "_contentwarehouse_799_ResearchScienceSearchOrganizationOut",
        "AbuseiamManualReviewToolIn": "_contentwarehouse_800_AbuseiamManualReviewToolIn",
        "AbuseiamManualReviewToolOut": "_contentwarehouse_801_AbuseiamManualReviewToolOut",
        "RepositoryWebrefAnnotatedCategoryInfoIn": "_contentwarehouse_802_RepositoryWebrefAnnotatedCategoryInfoIn",
        "RepositoryWebrefAnnotatedCategoryInfoOut": "_contentwarehouse_803_RepositoryWebrefAnnotatedCategoryInfoOut",
        "BlogPerDocDataOutlinksIn": "_contentwarehouse_804_BlogPerDocDataOutlinksIn",
        "BlogPerDocDataOutlinksOut": "_contentwarehouse_805_BlogPerDocDataOutlinksOut",
        "ExtraSnippetInfoResponseTidbitAnchorInfoIn": "_contentwarehouse_806_ExtraSnippetInfoResponseTidbitAnchorInfoIn",
        "ExtraSnippetInfoResponseTidbitAnchorInfoOut": "_contentwarehouse_807_ExtraSnippetInfoResponseTidbitAnchorInfoOut",
        "AssistantApiSettingsSearchFilterIn": "_contentwarehouse_808_AssistantApiSettingsSearchFilterIn",
        "AssistantApiSettingsSearchFilterOut": "_contentwarehouse_809_AssistantApiSettingsSearchFilterOut",
        "TrawlerFetchReplyDataCrawlDatesIn": "_contentwarehouse_810_TrawlerFetchReplyDataCrawlDatesIn",
        "TrawlerFetchReplyDataCrawlDatesOut": "_contentwarehouse_811_TrawlerFetchReplyDataCrawlDatesOut",
        "GoodocParagraphIn": "_contentwarehouse_812_GoodocParagraphIn",
        "GoodocParagraphOut": "_contentwarehouse_813_GoodocParagraphOut",
        "GeostoreSegmentPathProtoIn": "_contentwarehouse_814_GeostoreSegmentPathProtoIn",
        "GeostoreSegmentPathProtoOut": "_contentwarehouse_815_GeostoreSegmentPathProtoOut",
        "NlpSemanticParsingModelsMediaTVShowIn": "_contentwarehouse_816_NlpSemanticParsingModelsMediaTVShowIn",
        "NlpSemanticParsingModelsMediaTVShowOut": "_contentwarehouse_817_NlpSemanticParsingModelsMediaTVShowOut",
        "ImageRepositoryS3LangIdSignalsIn": "_contentwarehouse_818_ImageRepositoryS3LangIdSignalsIn",
        "ImageRepositoryS3LangIdSignalsOut": "_contentwarehouse_819_ImageRepositoryS3LangIdSignalsOut",
        "SdrPageAnchorsSitelinkIn": "_contentwarehouse_820_SdrPageAnchorsSitelinkIn",
        "SdrPageAnchorsSitelinkOut": "_contentwarehouse_821_SdrPageAnchorsSitelinkOut",
        "NlpSemanticParsingDatetimeNonGregorianDateIn": "_contentwarehouse_822_NlpSemanticParsingDatetimeNonGregorianDateIn",
        "NlpSemanticParsingDatetimeNonGregorianDateOut": "_contentwarehouse_823_NlpSemanticParsingDatetimeNonGregorianDateOut",
        "IndexingConverterRedirectParamsIn": "_contentwarehouse_824_IndexingConverterRedirectParamsIn",
        "IndexingConverterRedirectParamsOut": "_contentwarehouse_825_IndexingConverterRedirectParamsOut",
        "VendingConsumerProtoTrustedGenomeEntityIn": "_contentwarehouse_826_VendingConsumerProtoTrustedGenomeEntityIn",
        "VendingConsumerProtoTrustedGenomeEntityOut": "_contentwarehouse_827_VendingConsumerProtoTrustedGenomeEntityOut",
        "ImageRepositoryAmarnaSignalsBlobIn": "_contentwarehouse_828_ImageRepositoryAmarnaSignalsBlobIn",
        "ImageRepositoryAmarnaSignalsBlobOut": "_contentwarehouse_829_ImageRepositoryAmarnaSignalsBlobOut",
        "AssistantApiVolumePropertiesIn": "_contentwarehouse_830_AssistantApiVolumePropertiesIn",
        "AssistantApiVolumePropertiesOut": "_contentwarehouse_831_AssistantApiVolumePropertiesOut",
        "AssistantApiThirdPartyCapabilitiesIn": "_contentwarehouse_832_AssistantApiThirdPartyCapabilitiesIn",
        "AssistantApiThirdPartyCapabilitiesOut": "_contentwarehouse_833_AssistantApiThirdPartyCapabilitiesOut",
        "CompressedQualitySignalsIn": "_contentwarehouse_834_CompressedQualitySignalsIn",
        "CompressedQualitySignalsOut": "_contentwarehouse_835_CompressedQualitySignalsOut",
        "TrawlerFetchReplyDataFetchStatsIn": "_contentwarehouse_836_TrawlerFetchReplyDataFetchStatsIn",
        "TrawlerFetchReplyDataFetchStatsOut": "_contentwarehouse_837_TrawlerFetchReplyDataFetchStatsOut",
        "SdrScrollToOnPageMatchesIn": "_contentwarehouse_838_SdrScrollToOnPageMatchesIn",
        "SdrScrollToOnPageMatchesOut": "_contentwarehouse_839_SdrScrollToOnPageMatchesOut",
        "GoogleCloudContentwarehouseV1PropertyFilterIn": "_contentwarehouse_840_GoogleCloudContentwarehouseV1PropertyFilterIn",
        "GoogleCloudContentwarehouseV1PropertyFilterOut": "_contentwarehouse_841_GoogleCloudContentwarehouseV1PropertyFilterOut",
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerIn": "_contentwarehouse_842_AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerIn",
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerOut": "_contentwarehouse_843_AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerOut",
        "VideoAssetsVenomACLIn": "_contentwarehouse_844_VideoAssetsVenomACLIn",
        "VideoAssetsVenomACLOut": "_contentwarehouse_845_VideoAssetsVenomACLOut",
        "GoogleInternalAppsWaldoV1alphaInMeetingIn": "_contentwarehouse_846_GoogleInternalAppsWaldoV1alphaInMeetingIn",
        "GoogleInternalAppsWaldoV1alphaInMeetingOut": "_contentwarehouse_847_GoogleInternalAppsWaldoV1alphaInMeetingOut",
        "YoutubeDiscoveryLegosLegosTaxonomicRelationshipIn": "_contentwarehouse_848_YoutubeDiscoveryLegosLegosTaxonomicRelationshipIn",
        "YoutubeDiscoveryLegosLegosTaxonomicRelationshipOut": "_contentwarehouse_849_YoutubeDiscoveryLegosLegosTaxonomicRelationshipOut",
        "KnowledgeAnswersAnyTypeIn": "_contentwarehouse_850_KnowledgeAnswersAnyTypeIn",
        "KnowledgeAnswersAnyTypeOut": "_contentwarehouse_851_KnowledgeAnswersAnyTypeOut",
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceIn": "_contentwarehouse_852_AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceIn",
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceOut": "_contentwarehouse_853_AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceOut",
        "VideoFileSphericalMetadataCroppedAreaIn": "_contentwarehouse_854_VideoFileSphericalMetadataCroppedAreaIn",
        "VideoFileSphericalMetadataCroppedAreaOut": "_contentwarehouse_855_VideoFileSphericalMetadataCroppedAreaOut",
        "QualityNsrNSRVersionedDataIn": "_contentwarehouse_856_QualityNsrNSRVersionedDataIn",
        "QualityNsrNSRVersionedDataOut": "_contentwarehouse_857_QualityNsrNSRVersionedDataOut",
        "ImageRepositoryFileTruncationInfoIn": "_contentwarehouse_858_ImageRepositoryFileTruncationInfoIn",
        "ImageRepositoryFileTruncationInfoOut": "_contentwarehouse_859_ImageRepositoryFileTruncationInfoOut",
        "GeostoreLogicalBorderProtoIn": "_contentwarehouse_860_GeostoreLogicalBorderProtoIn",
        "GeostoreLogicalBorderProtoOut": "_contentwarehouse_861_GeostoreLogicalBorderProtoOut",
        "DrishtiLabelSetDataIn": "_contentwarehouse_862_DrishtiLabelSetDataIn",
        "DrishtiLabelSetDataOut": "_contentwarehouse_863_DrishtiLabelSetDataOut",
        "ImageUnderstandingIndexingLabelGroupIn": "_contentwarehouse_864_ImageUnderstandingIndexingLabelGroupIn",
        "ImageUnderstandingIndexingLabelGroupOut": "_contentwarehouse_865_ImageUnderstandingIndexingLabelGroupOut",
        "QualityShoppingShoppingAttachmentIn": "_contentwarehouse_866_QualityShoppingShoppingAttachmentIn",
        "QualityShoppingShoppingAttachmentOut": "_contentwarehouse_867_QualityShoppingShoppingAttachmentOut",
        "AssistantDevicesPlatformProtoIntentIn": "_contentwarehouse_868_AssistantDevicesPlatformProtoIntentIn",
        "AssistantDevicesPlatformProtoIntentOut": "_contentwarehouse_869_AssistantDevicesPlatformProtoIntentOut",
        "GoogleCloudContentwarehouseV1PropertyDefinitionIn": "_contentwarehouse_870_GoogleCloudContentwarehouseV1PropertyDefinitionIn",
        "GoogleCloudContentwarehouseV1PropertyDefinitionOut": "_contentwarehouse_871_GoogleCloudContentwarehouseV1PropertyDefinitionOut",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursIn": "_contentwarehouse_872_AppsPeopleOzExternalMergedpeopleapiOpeningHoursIn",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursOut": "_contentwarehouse_873_AppsPeopleOzExternalMergedpeopleapiOpeningHoursOut",
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn": "_contentwarehouse_874_AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut": "_contentwarehouse_875_AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut",
        "GeostoreThreeDimensionalModelProtoIn": "_contentwarehouse_876_GeostoreThreeDimensionalModelProtoIn",
        "GeostoreThreeDimensionalModelProtoOut": "_contentwarehouse_877_GeostoreThreeDimensionalModelProtoOut",
        "CopleySubreferenceReferenceIn": "_contentwarehouse_878_CopleySubreferenceReferenceIn",
        "CopleySubreferenceReferenceOut": "_contentwarehouse_879_CopleySubreferenceReferenceOut",
        "RepositoryWebrefMentionAdditionalExplainedRangeIn": "_contentwarehouse_880_RepositoryWebrefMentionAdditionalExplainedRangeIn",
        "RepositoryWebrefMentionAdditionalExplainedRangeOut": "_contentwarehouse_881_RepositoryWebrefMentionAdditionalExplainedRangeOut",
        "GoogleCloudContentwarehouseV1ListLinkedSourcesResponseIn": "_contentwarehouse_882_GoogleCloudContentwarehouseV1ListLinkedSourcesResponseIn",
        "GoogleCloudContentwarehouseV1ListLinkedSourcesResponseOut": "_contentwarehouse_883_GoogleCloudContentwarehouseV1ListLinkedSourcesResponseOut",
        "GeostoreBestLocaleProtoIn": "_contentwarehouse_884_GeostoreBestLocaleProtoIn",
        "GeostoreBestLocaleProtoOut": "_contentwarehouse_885_GeostoreBestLocaleProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiNameIn": "_contentwarehouse_886_AppsPeopleOzExternalMergedpeopleapiNameIn",
        "AppsPeopleOzExternalMergedpeopleapiNameOut": "_contentwarehouse_887_AppsPeopleOzExternalMergedpeopleapiNameOut",
        "AssistantLogsDefaultDevicesLogIn": "_contentwarehouse_888_AssistantLogsDefaultDevicesLogIn",
        "AssistantLogsDefaultDevicesLogOut": "_contentwarehouse_889_AssistantLogsDefaultDevicesLogOut",
        "I18nPhonenumbersPhoneNumberIn": "_contentwarehouse_890_I18nPhonenumbersPhoneNumberIn",
        "I18nPhonenumbersPhoneNumberOut": "_contentwarehouse_891_I18nPhonenumbersPhoneNumberOut",
        "QualityLabelsGoogleLabelDataLabelIn": "_contentwarehouse_892_QualityLabelsGoogleLabelDataLabelIn",
        "QualityLabelsGoogleLabelDataLabelOut": "_contentwarehouse_893_QualityLabelsGoogleLabelDataLabelOut",
        "GoogleCloudDocumentaiV1DocumentPageLineIn": "_contentwarehouse_894_GoogleCloudDocumentaiV1DocumentPageLineIn",
        "GoogleCloudDocumentaiV1DocumentPageLineOut": "_contentwarehouse_895_GoogleCloudDocumentaiV1DocumentPageLineOut",
        "GoogleCloudDocumentaiV1DocumentPageVisualElementIn": "_contentwarehouse_896_GoogleCloudDocumentaiV1DocumentPageVisualElementIn",
        "GoogleCloudDocumentaiV1DocumentPageVisualElementOut": "_contentwarehouse_897_GoogleCloudDocumentaiV1DocumentPageVisualElementOut",
        "GeostoreRawDataProtoIn": "_contentwarehouse_898_GeostoreRawDataProtoIn",
        "GeostoreRawDataProtoOut": "_contentwarehouse_899_GeostoreRawDataProtoOut",
        "AssistantVerticalsHomeautomationProtoAgentInformationIn": "_contentwarehouse_900_AssistantVerticalsHomeautomationProtoAgentInformationIn",
        "AssistantVerticalsHomeautomationProtoAgentInformationOut": "_contentwarehouse_901_AssistantVerticalsHomeautomationProtoAgentInformationOut",
        "QualitySalientCountriesSalientCountrySetIn": "_contentwarehouse_902_QualitySalientCountriesSalientCountrySetIn",
        "QualitySalientCountriesSalientCountrySetOut": "_contentwarehouse_903_QualitySalientCountriesSalientCountrySetOut",
        "AppsPeopleOzExternalMergedpeopleapiPhotoIn": "_contentwarehouse_904_AppsPeopleOzExternalMergedpeopleapiPhotoIn",
        "AppsPeopleOzExternalMergedpeopleapiPhotoOut": "_contentwarehouse_905_AppsPeopleOzExternalMergedpeopleapiPhotoOut",
        "QualityTimebasedPageTypeIn": "_contentwarehouse_906_QualityTimebasedPageTypeIn",
        "QualityTimebasedPageTypeOut": "_contentwarehouse_907_QualityTimebasedPageTypeOut",
        "AssistantApiCarAssistantCapabilitiesIn": "_contentwarehouse_908_AssistantApiCarAssistantCapabilitiesIn",
        "AssistantApiCarAssistantCapabilitiesOut": "_contentwarehouse_909_AssistantApiCarAssistantCapabilitiesOut",
        "RepositoryWebrefPreprocessingOriginalNamesOriginalNameIn": "_contentwarehouse_910_RepositoryWebrefPreprocessingOriginalNamesOriginalNameIn",
        "RepositoryWebrefPreprocessingOriginalNamesOriginalNameOut": "_contentwarehouse_911_RepositoryWebrefPreprocessingOriginalNamesOriginalNameOut",
        "SocialCommonSegmentIn": "_contentwarehouse_912_SocialCommonSegmentIn",
        "SocialCommonSegmentOut": "_contentwarehouse_913_SocialCommonSegmentOut",
        "ImageRepositoryVideoPropertiesIn": "_contentwarehouse_914_ImageRepositoryVideoPropertiesIn",
        "ImageRepositoryVideoPropertiesOut": "_contentwarehouse_915_ImageRepositoryVideoPropertiesOut",
        "AssistantApiContactLookupCapabilitiesIn": "_contentwarehouse_916_AssistantApiContactLookupCapabilitiesIn",
        "AssistantApiContactLookupCapabilitiesOut": "_contentwarehouse_917_AssistantApiContactLookupCapabilitiesOut",
        "GeostoreWeightProtoIn": "_contentwarehouse_918_GeostoreWeightProtoIn",
        "GeostoreWeightProtoOut": "_contentwarehouse_919_GeostoreWeightProtoOut",
        "SocialGraphApiProtoWeeklyRecurrenceIn": "_contentwarehouse_920_SocialGraphApiProtoWeeklyRecurrenceIn",
        "SocialGraphApiProtoWeeklyRecurrenceOut": "_contentwarehouse_921_SocialGraphApiProtoWeeklyRecurrenceOut",
        "ResearchScienceSearchDateIn": "_contentwarehouse_922_ResearchScienceSearchDateIn",
        "ResearchScienceSearchDateOut": "_contentwarehouse_923_ResearchScienceSearchDateOut",
        "SecurityCredentialsGaiaUserProtoIn": "_contentwarehouse_924_SecurityCredentialsGaiaUserProtoIn",
        "SecurityCredentialsGaiaUserProtoOut": "_contentwarehouse_925_SecurityCredentialsGaiaUserProtoOut",
        "QualitySitemapTopURLIn": "_contentwarehouse_926_QualitySitemapTopURLIn",
        "QualitySitemapTopURLOut": "_contentwarehouse_927_QualitySitemapTopURLOut",
        "GoogleIamV1PolicyIn": "_contentwarehouse_928_GoogleIamV1PolicyIn",
        "GoogleIamV1PolicyOut": "_contentwarehouse_929_GoogleIamV1PolicyOut",
        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeIn": "_contentwarehouse_930_HtmlrenderWebkitHeadlessProtoRenderTreeNodeIn",
        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeOut": "_contentwarehouse_931_HtmlrenderWebkitHeadlessProtoRenderTreeNodeOut",
        "SafesearchVideoClassifierOutputIn": "_contentwarehouse_932_SafesearchVideoClassifierOutputIn",
        "SafesearchVideoClassifierOutputOut": "_contentwarehouse_933_SafesearchVideoClassifierOutputOut",
        "AssistantApiSettingsDeviceDowntimeSettingsIn": "_contentwarehouse_934_AssistantApiSettingsDeviceDowntimeSettingsIn",
        "AssistantApiSettingsDeviceDowntimeSettingsOut": "_contentwarehouse_935_AssistantApiSettingsDeviceDowntimeSettingsOut",
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesIn": "_contentwarehouse_936_BlueGingerClientVisibleProtoBlueGingerSupportedServicesIn",
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesOut": "_contentwarehouse_937_BlueGingerClientVisibleProtoBlueGingerSupportedServicesOut",
        "QualityQrewriteFamilyCalendarAliasIn": "_contentwarehouse_938_QualityQrewriteFamilyCalendarAliasIn",
        "QualityQrewriteFamilyCalendarAliasOut": "_contentwarehouse_939_QualityQrewriteFamilyCalendarAliasOut",
        "DrishtiVesperUserReportModelScoreIn": "_contentwarehouse_940_DrishtiVesperUserReportModelScoreIn",
        "DrishtiVesperUserReportModelScoreOut": "_contentwarehouse_941_DrishtiVesperUserReportModelScoreOut",
        "KnowledgeAnswersIntentQueryArgumentValueIn": "_contentwarehouse_942_KnowledgeAnswersIntentQueryArgumentValueIn",
        "KnowledgeAnswersIntentQueryArgumentValueOut": "_contentwarehouse_943_KnowledgeAnswersIntentQueryArgumentValueOut",
        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceIn": "_contentwarehouse_944_AssistantVerticalsHomeautomationProtoHomeAutomationDeviceIn",
        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceOut": "_contentwarehouse_945_AssistantVerticalsHomeautomationProtoHomeAutomationDeviceOut",
        "RepositoryWebrefSemanticDateRangeIn": "_contentwarehouse_946_RepositoryWebrefSemanticDateRangeIn",
        "RepositoryWebrefSemanticDateRangeOut": "_contentwarehouse_947_RepositoryWebrefSemanticDateRangeOut",
        "KnowledgeAnswersIntentQueryImpliedEntityIn": "_contentwarehouse_948_KnowledgeAnswersIntentQueryImpliedEntityIn",
        "KnowledgeAnswersIntentQueryImpliedEntityOut": "_contentwarehouse_949_KnowledgeAnswersIntentQueryImpliedEntityOut",
        "QualityPreviewRanklabSnippetIn": "_contentwarehouse_950_QualityPreviewRanklabSnippetIn",
        "QualityPreviewRanklabSnippetOut": "_contentwarehouse_951_QualityPreviewRanklabSnippetOut",
        "GeostoreFeatureFieldMetadataProtoFieldProvenanceIn": "_contentwarehouse_952_GeostoreFeatureFieldMetadataProtoFieldProvenanceIn",
        "GeostoreFeatureFieldMetadataProtoFieldProvenanceOut": "_contentwarehouse_953_GeostoreFeatureFieldMetadataProtoFieldProvenanceOut",
        "AssistantProductivityListItemIn": "_contentwarehouse_954_AssistantProductivityListItemIn",
        "AssistantProductivityListItemOut": "_contentwarehouse_955_AssistantProductivityListItemOut",
        "AssistantGroundingRankerLaaFeaturesContactIn": "_contentwarehouse_956_AssistantGroundingRankerLaaFeaturesContactIn",
        "AssistantGroundingRankerLaaFeaturesContactOut": "_contentwarehouse_957_AssistantGroundingRankerLaaFeaturesContactOut",
        "QualitySnippetsTruncationSnippetBoldedRangeIn": "_contentwarehouse_958_QualitySnippetsTruncationSnippetBoldedRangeIn",
        "QualitySnippetsTruncationSnippetBoldedRangeOut": "_contentwarehouse_959_QualitySnippetsTruncationSnippetBoldedRangeOut",
        "RepositoryWebrefLocalizedStringIn": "_contentwarehouse_960_RepositoryWebrefLocalizedStringIn",
        "RepositoryWebrefLocalizedStringOut": "_contentwarehouse_961_RepositoryWebrefLocalizedStringOut",
        "AssistantApiProtobufIn": "_contentwarehouse_962_AssistantApiProtobufIn",
        "AssistantApiProtobufOut": "_contentwarehouse_963_AssistantApiProtobufOut",
        "ResearchScamCoscamEasyConjunctionIn": "_contentwarehouse_964_ResearchScamCoscamEasyConjunctionIn",
        "ResearchScamCoscamEasyConjunctionOut": "_contentwarehouse_965_ResearchScamCoscamEasyConjunctionOut",
        "GeostorePriceInfoFoodNutritionFactsNutritionFactIn": "_contentwarehouse_966_GeostorePriceInfoFoodNutritionFactsNutritionFactIn",
        "GeostorePriceInfoFoodNutritionFactsNutritionFactOut": "_contentwarehouse_967_GeostorePriceInfoFoodNutritionFactsNutritionFactOut",
        "GeostorePriceRangeProtoIn": "_contentwarehouse_968_GeostorePriceRangeProtoIn",
        "GeostorePriceRangeProtoOut": "_contentwarehouse_969_GeostorePriceRangeProtoOut",
        "RepositoryWebrefPersonalizationContextOutputsIn": "_contentwarehouse_970_RepositoryWebrefPersonalizationContextOutputsIn",
        "RepositoryWebrefPersonalizationContextOutputsOut": "_contentwarehouse_971_RepositoryWebrefPersonalizationContextOutputsOut",
        "QualityPreviewChosenSnippetInfoTidbitInfoIn": "_contentwarehouse_972_QualityPreviewChosenSnippetInfoTidbitInfoIn",
        "QualityPreviewChosenSnippetInfoTidbitInfoOut": "_contentwarehouse_973_QualityPreviewChosenSnippetInfoTidbitInfoOut",
        "SocialGraphApiProtoSearchProfileMetadataIn": "_contentwarehouse_974_SocialGraphApiProtoSearchProfileMetadataIn",
        "SocialGraphApiProtoSearchProfileMetadataOut": "_contentwarehouse_975_SocialGraphApiProtoSearchProfileMetadataOut",
        "PhotosVisionObjectrecImageTemplateIn": "_contentwarehouse_976_PhotosVisionObjectrecImageTemplateIn",
        "PhotosVisionObjectrecImageTemplateOut": "_contentwarehouse_977_PhotosVisionObjectrecImageTemplateOut",
        "AssistantApiLiveTvChannelCapabilitiesIn": "_contentwarehouse_978_AssistantApiLiveTvChannelCapabilitiesIn",
        "AssistantApiLiveTvChannelCapabilitiesOut": "_contentwarehouse_979_AssistantApiLiveTvChannelCapabilitiesOut",
        "AssistantApiCoreTypesChromeOsAppInfoIn": "_contentwarehouse_980_AssistantApiCoreTypesChromeOsAppInfoIn",
        "AssistantApiCoreTypesChromeOsAppInfoOut": "_contentwarehouse_981_AssistantApiCoreTypesChromeOsAppInfoOut",
        "GeostoreRightsStatusProtoIn": "_contentwarehouse_982_GeostoreRightsStatusProtoIn",
        "GeostoreRightsStatusProtoOut": "_contentwarehouse_983_GeostoreRightsStatusProtoOut",
        "AssistantApiSettingsFeatureFiltersIn": "_contentwarehouse_984_AssistantApiSettingsFeatureFiltersIn",
        "AssistantApiSettingsFeatureFiltersOut": "_contentwarehouse_985_AssistantApiSettingsFeatureFiltersOut",
        "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingIn": "_contentwarehouse_986_QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingIn",
        "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingOut": "_contentwarehouse_987_QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingOut",
        "QualityQrewriteCandidateIdIn": "_contentwarehouse_988_QualityQrewriteCandidateIdIn",
        "QualityQrewriteCandidateIdOut": "_contentwarehouse_989_QualityQrewriteCandidateIdOut",
        "NlpSemanticParsingLocalEvChargingStationSpeedConstraintIn": "_contentwarehouse_990_NlpSemanticParsingLocalEvChargingStationSpeedConstraintIn",
        "NlpSemanticParsingLocalEvChargingStationSpeedConstraintOut": "_contentwarehouse_991_NlpSemanticParsingLocalEvChargingStationSpeedConstraintOut",
        "VideoContentSearchDescriptionSpanInfoIn": "_contentwarehouse_992_VideoContentSearchDescriptionSpanInfoIn",
        "VideoContentSearchDescriptionSpanInfoOut": "_contentwarehouse_993_VideoContentSearchDescriptionSpanInfoOut",
        "SocialGraphApiProtoSearchProfileDataIn": "_contentwarehouse_994_SocialGraphApiProtoSearchProfileDataIn",
        "SocialGraphApiProtoSearchProfileDataOut": "_contentwarehouse_995_SocialGraphApiProtoSearchProfileDataOut",
        "NlpSemanticParsingProtoActionsOnGoogleSlotListIn": "_contentwarehouse_996_NlpSemanticParsingProtoActionsOnGoogleSlotListIn",
        "NlpSemanticParsingProtoActionsOnGoogleSlotListOut": "_contentwarehouse_997_NlpSemanticParsingProtoActionsOnGoogleSlotListOut",
        "PremiumPerDocDataIn": "_contentwarehouse_998_PremiumPerDocDataIn",
        "PremiumPerDocDataOut": "_contentwarehouse_999_PremiumPerDocDataOut",
        "AssistantDevicesPlatformProtoClientReconnectCapabilityIn": "_contentwarehouse_1000_AssistantDevicesPlatformProtoClientReconnectCapabilityIn",
        "AssistantDevicesPlatformProtoClientReconnectCapabilityOut": "_contentwarehouse_1001_AssistantDevicesPlatformProtoClientReconnectCapabilityOut",
        "NlpSaftConstituencyNodeIn": "_contentwarehouse_1002_NlpSaftConstituencyNodeIn",
        "NlpSaftConstituencyNodeOut": "_contentwarehouse_1003_NlpSaftConstituencyNodeOut",
        "ImageRepositoryShoppingProductInformationIn": "_contentwarehouse_1004_ImageRepositoryShoppingProductInformationIn",
        "ImageRepositoryShoppingProductInformationOut": "_contentwarehouse_1005_ImageRepositoryShoppingProductInformationOut",
        "SecurityCredentialsHostProtoIn": "_contentwarehouse_1006_SecurityCredentialsHostProtoIn",
        "SecurityCredentialsHostProtoOut": "_contentwarehouse_1007_SecurityCredentialsHostProtoOut",
        "VideoYoutubeCommentsRankingCTRMetricsIn": "_contentwarehouse_1008_VideoYoutubeCommentsRankingCTRMetricsIn",
        "VideoYoutubeCommentsRankingCTRMetricsOut": "_contentwarehouse_1009_VideoYoutubeCommentsRankingCTRMetricsOut",
        "GoodocOrientationLabelIn": "_contentwarehouse_1010_GoodocOrientationLabelIn",
        "GoodocOrientationLabelOut": "_contentwarehouse_1011_GoodocOrientationLabelOut",
        "GeostoreAttachmentsAttachmentProtoIn": "_contentwarehouse_1012_GeostoreAttachmentsAttachmentProtoIn",
        "GeostoreAttachmentsAttachmentProtoOut": "_contentwarehouse_1013_GeostoreAttachmentsAttachmentProtoOut",
        "AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogIn": "_contentwarehouse_1014_AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogIn",
        "AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogOut": "_contentwarehouse_1015_AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogOut",
        "RegistrationInfoIn": "_contentwarehouse_1016_RegistrationInfoIn",
        "RegistrationInfoOut": "_contentwarehouse_1017_RegistrationInfoOut",
        "VideoMediaOverviewDataOverviewIn": "_contentwarehouse_1018_VideoMediaOverviewDataOverviewIn",
        "VideoMediaOverviewDataOverviewOut": "_contentwarehouse_1019_VideoMediaOverviewDataOverviewOut",
        "PhilPerDocDataIn": "_contentwarehouse_1020_PhilPerDocDataIn",
        "PhilPerDocDataOut": "_contentwarehouse_1021_PhilPerDocDataOut",
        "BlogsearchConversationTreeIn": "_contentwarehouse_1022_BlogsearchConversationTreeIn",
        "BlogsearchConversationTreeOut": "_contentwarehouse_1023_BlogsearchConversationTreeOut",
        "VideoRational32In": "_contentwarehouse_1024_VideoRational32In",
        "VideoRational32Out": "_contentwarehouse_1025_VideoRational32Out",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningIn": "_contentwarehouse_1026_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningOut": "_contentwarehouse_1027_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningOut",
        "GoogleCloudDocumentaiV1DocumentPageBlockIn": "_contentwarehouse_1028_GoogleCloudDocumentaiV1DocumentPageBlockIn",
        "GoogleCloudDocumentaiV1DocumentPageBlockOut": "_contentwarehouse_1029_GoogleCloudDocumentaiV1DocumentPageBlockOut",
        "QualityTravelGoodSitesDataIn": "_contentwarehouse_1030_QualityTravelGoodSitesDataIn",
        "QualityTravelGoodSitesDataOut": "_contentwarehouse_1031_QualityTravelGoodSitesDataOut",
        "OceanDocTagNewspaperSpecificIn": "_contentwarehouse_1032_OceanDocTagNewspaperSpecificIn",
        "OceanDocTagNewspaperSpecificOut": "_contentwarehouse_1033_OceanDocTagNewspaperSpecificOut",
        "NlpSemanticParsingModelsRecurrenceWeeklyPatternIn": "_contentwarehouse_1034_NlpSemanticParsingModelsRecurrenceWeeklyPatternIn",
        "NlpSemanticParsingModelsRecurrenceWeeklyPatternOut": "_contentwarehouse_1035_NlpSemanticParsingModelsRecurrenceWeeklyPatternOut",
        "VideoVideoStreamInfoMetadataLutAttachmentsIn": "_contentwarehouse_1036_VideoVideoStreamInfoMetadataLutAttachmentsIn",
        "VideoVideoStreamInfoMetadataLutAttachmentsOut": "_contentwarehouse_1037_VideoVideoStreamInfoMetadataLutAttachmentsOut",
        "AssistantApiSettingsSpeechSettingsIn": "_contentwarehouse_1038_AssistantApiSettingsSpeechSettingsIn",
        "AssistantApiSettingsSpeechSettingsOut": "_contentwarehouse_1039_AssistantApiSettingsSpeechSettingsOut",
        "GoodocLogicalEntityLinkIn": "_contentwarehouse_1040_GoodocLogicalEntityLinkIn",
        "GoodocLogicalEntityLinkOut": "_contentwarehouse_1041_GoodocLogicalEntityLinkOut",
        "KnowledgeAnswersOpaqueTimerTypeIn": "_contentwarehouse_1042_KnowledgeAnswersOpaqueTimerTypeIn",
        "KnowledgeAnswersOpaqueTimerTypeOut": "_contentwarehouse_1043_KnowledgeAnswersOpaqueTimerTypeOut",
        "VideoClosedCaptionsIn": "_contentwarehouse_1044_VideoClosedCaptionsIn",
        "VideoClosedCaptionsOut": "_contentwarehouse_1045_VideoClosedCaptionsOut",
        "LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipIn": "_contentwarehouse_1046_LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipIn",
        "LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipOut": "_contentwarehouse_1047_LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipOut",
        "AssistantApiProactiveOutputIn": "_contentwarehouse_1048_AssistantApiProactiveOutputIn",
        "AssistantApiProactiveOutputOut": "_contentwarehouse_1049_AssistantApiProactiveOutputOut",
        "NlxDataSchemaLanguageSpanIn": "_contentwarehouse_1050_NlxDataSchemaLanguageSpanIn",
        "NlxDataSchemaLanguageSpanOut": "_contentwarehouse_1051_NlxDataSchemaLanguageSpanOut",
        "LegalCitationCourtDocumentUnknownDateIn": "_contentwarehouse_1052_LegalCitationCourtDocumentUnknownDateIn",
        "LegalCitationCourtDocumentUnknownDateOut": "_contentwarehouse_1053_LegalCitationCourtDocumentUnknownDateOut",
        "RepositoryWebrefMentionRatingsIn": "_contentwarehouse_1054_RepositoryWebrefMentionRatingsIn",
        "RepositoryWebrefMentionRatingsOut": "_contentwarehouse_1055_RepositoryWebrefMentionRatingsOut",
        "DrishtiVesperMovingThumbnailIn": "_contentwarehouse_1056_DrishtiVesperMovingThumbnailIn",
        "DrishtiVesperMovingThumbnailOut": "_contentwarehouse_1057_DrishtiVesperMovingThumbnailOut",
        "CountryCountryAttachmentIn": "_contentwarehouse_1058_CountryCountryAttachmentIn",
        "CountryCountryAttachmentOut": "_contentwarehouse_1059_CountryCountryAttachmentOut",
        "AssistantApiLiveTvChannelCapabilitiesLiveTvChannelIn": "_contentwarehouse_1060_AssistantApiLiveTvChannelCapabilitiesLiveTvChannelIn",
        "AssistantApiLiveTvChannelCapabilitiesLiveTvChannelOut": "_contentwarehouse_1061_AssistantApiLiveTvChannelCapabilitiesLiveTvChannelOut",
        "ResearchScamGenericFeatureVectorIn": "_contentwarehouse_1062_ResearchScamGenericFeatureVectorIn",
        "ResearchScamGenericFeatureVectorOut": "_contentwarehouse_1063_ResearchScamGenericFeatureVectorOut",
        "GoogleCloudDocumentaiV1DocumentProvenanceIn": "_contentwarehouse_1064_GoogleCloudDocumentaiV1DocumentProvenanceIn",
        "GoogleCloudDocumentaiV1DocumentProvenanceOut": "_contentwarehouse_1065_GoogleCloudDocumentaiV1DocumentProvenanceOut",
        "ContentAttributionsIn": "_contentwarehouse_1066_ContentAttributionsIn",
        "ContentAttributionsOut": "_contentwarehouse_1067_ContentAttributionsOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateIn": "_contentwarehouse_1068_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateOut": "_contentwarehouse_1069_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateOut",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataIn": "_contentwarehouse_1070_GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataIn",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataOut": "_contentwarehouse_1071_GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataOut",
        "GeostoreOverrideBorderStatusProtoIn": "_contentwarehouse_1072_GeostoreOverrideBorderStatusProtoIn",
        "GeostoreOverrideBorderStatusProtoOut": "_contentwarehouse_1073_GeostoreOverrideBorderStatusProtoOut",
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapIn": "_contentwarehouse_1074_IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapIn",
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapOut": "_contentwarehouse_1075_IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapOut",
        "QualityQrewriteContactCalendarNameIn": "_contentwarehouse_1076_QualityQrewriteContactCalendarNameIn",
        "QualityQrewriteContactCalendarNameOut": "_contentwarehouse_1077_QualityQrewriteContactCalendarNameOut",
        "GoodocLanguageCombinationLanguageIn": "_contentwarehouse_1078_GoodocLanguageCombinationLanguageIn",
        "GoodocLanguageCombinationLanguageOut": "_contentwarehouse_1079_GoodocLanguageCombinationLanguageOut",
        "NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideIn": "_contentwarehouse_1080_NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideIn",
        "NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideOut": "_contentwarehouse_1081_NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideOut",
        "SnippetExtraInfoSnippetScoringInfoIn": "_contentwarehouse_1082_SnippetExtraInfoSnippetScoringInfoIn",
        "SnippetExtraInfoSnippetScoringInfoOut": "_contentwarehouse_1083_SnippetExtraInfoSnippetScoringInfoOut",
        "GoogleApiServiceconsumermanagementV1PolicyBindingIn": "_contentwarehouse_1084_GoogleApiServiceconsumermanagementV1PolicyBindingIn",
        "GoogleApiServiceconsumermanagementV1PolicyBindingOut": "_contentwarehouse_1085_GoogleApiServiceconsumermanagementV1PolicyBindingOut",
        "GoogleCloudContentwarehouseV1UpdateRuleSetRequestIn": "_contentwarehouse_1086_GoogleCloudContentwarehouseV1UpdateRuleSetRequestIn",
        "GoogleCloudContentwarehouseV1UpdateRuleSetRequestOut": "_contentwarehouse_1087_GoogleCloudContentwarehouseV1UpdateRuleSetRequestOut",
        "AssistantApiSupportedProviderTypesIn": "_contentwarehouse_1088_AssistantApiSupportedProviderTypesIn",
        "AssistantApiSupportedProviderTypesOut": "_contentwarehouse_1089_AssistantApiSupportedProviderTypesOut",
        "SearchPolicyRankableSensitivityIn": "_contentwarehouse_1090_SearchPolicyRankableSensitivityIn",
        "SearchPolicyRankableSensitivityOut": "_contentwarehouse_1091_SearchPolicyRankableSensitivityOut",
        "VideoVideoStreamIn": "_contentwarehouse_1092_VideoVideoStreamIn",
        "VideoVideoStreamOut": "_contentwarehouse_1093_VideoVideoStreamOut",
        "GeostoreMediaItemProtoMediaSizeIn": "_contentwarehouse_1094_GeostoreMediaItemProtoMediaSizeIn",
        "GeostoreMediaItemProtoMediaSizeOut": "_contentwarehouse_1095_GeostoreMediaItemProtoMediaSizeOut",
        "AssistantApiOutputRestrictionsIn": "_contentwarehouse_1096_AssistantApiOutputRestrictionsIn",
        "AssistantApiOutputRestrictionsOut": "_contentwarehouse_1097_AssistantApiOutputRestrictionsOut",
        "NlpSemanticParsingLocalHyperReliableDataIn": "_contentwarehouse_1098_NlpSemanticParsingLocalHyperReliableDataIn",
        "NlpSemanticParsingLocalHyperReliableDataOut": "_contentwarehouse_1099_NlpSemanticParsingLocalHyperReliableDataOut",
        "GoogleCloudDocumentaiV1DocumentRevisionHumanReviewIn": "_contentwarehouse_1100_GoogleCloudDocumentaiV1DocumentRevisionHumanReviewIn",
        "GoogleCloudDocumentaiV1DocumentRevisionHumanReviewOut": "_contentwarehouse_1101_GoogleCloudDocumentaiV1DocumentRevisionHumanReviewOut",
        "RepositoryWebrefCategoryInfoIn": "_contentwarehouse_1102_RepositoryWebrefCategoryInfoIn",
        "RepositoryWebrefCategoryInfoOut": "_contentwarehouse_1103_RepositoryWebrefCategoryInfoOut",
        "KnowledgeAnswersSensitivityLoggingPolicyIn": "_contentwarehouse_1104_KnowledgeAnswersSensitivityLoggingPolicyIn",
        "KnowledgeAnswersSensitivityLoggingPolicyOut": "_contentwarehouse_1105_KnowledgeAnswersSensitivityLoggingPolicyOut",
        "QualitySalientTermsSalientTermIn": "_contentwarehouse_1106_QualitySalientTermsSalientTermIn",
        "QualitySalientTermsSalientTermOut": "_contentwarehouse_1107_QualitySalientTermsSalientTermOut",
        "AttentionalEntitiesSurfaceFormIn": "_contentwarehouse_1108_AttentionalEntitiesSurfaceFormIn",
        "AttentionalEntitiesSurfaceFormOut": "_contentwarehouse_1109_AttentionalEntitiesSurfaceFormOut",
        "ResearchScamNearestNeighborsNeighborIn": "_contentwarehouse_1110_ResearchScamNearestNeighborsNeighborIn",
        "ResearchScamNearestNeighborsNeighborOut": "_contentwarehouse_1111_ResearchScamNearestNeighborsNeighborOut",
        "FreebaseMeasurementIn": "_contentwarehouse_1112_FreebaseMeasurementIn",
        "FreebaseMeasurementOut": "_contentwarehouse_1113_FreebaseMeasurementOut",
        "SpamBrainDataIn": "_contentwarehouse_1114_SpamBrainDataIn",
        "SpamBrainDataOut": "_contentwarehouse_1115_SpamBrainDataOut",
        "AssistantApiCoreTypesDeviceConfigIn": "_contentwarehouse_1116_AssistantApiCoreTypesDeviceConfigIn",
        "AssistantApiCoreTypesDeviceConfigOut": "_contentwarehouse_1117_AssistantApiCoreTypesDeviceConfigOut",
        "AssistantLogsInputErrorLogIn": "_contentwarehouse_1118_AssistantLogsInputErrorLogIn",
        "AssistantLogsInputErrorLogOut": "_contentwarehouse_1119_AssistantLogsInputErrorLogOut",
        "SocialGraphApiProtoRecurrenceRepeatForeverIn": "_contentwarehouse_1120_SocialGraphApiProtoRecurrenceRepeatForeverIn",
        "SocialGraphApiProtoRecurrenceRepeatForeverOut": "_contentwarehouse_1121_SocialGraphApiProtoRecurrenceRepeatForeverOut",
        "RepositoryWebrefNameDebugInfoCandidateInfoIn": "_contentwarehouse_1122_RepositoryWebrefNameDebugInfoCandidateInfoIn",
        "RepositoryWebrefNameDebugInfoCandidateInfoOut": "_contentwarehouse_1123_RepositoryWebrefNameDebugInfoCandidateInfoOut",
        "AssistantApiSuggestionsSupportIn": "_contentwarehouse_1124_AssistantApiSuggestionsSupportIn",
        "AssistantApiSuggestionsSupportOut": "_contentwarehouse_1125_AssistantApiSuggestionsSupportOut",
        "SocialGraphApiProtoLimitedProfileSettingsIn": "_contentwarehouse_1126_SocialGraphApiProtoLimitedProfileSettingsIn",
        "SocialGraphApiProtoLimitedProfileSettingsOut": "_contentwarehouse_1127_SocialGraphApiProtoLimitedProfileSettingsOut",
        "IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsIn": "_contentwarehouse_1128_IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsIn",
        "IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsOut": "_contentwarehouse_1129_IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsOut",
        "AssistantDevicesPlatformProtoCallCallCapabilityIn": "_contentwarehouse_1130_AssistantDevicesPlatformProtoCallCallCapabilityIn",
        "AssistantDevicesPlatformProtoCallCallCapabilityOut": "_contentwarehouse_1131_AssistantDevicesPlatformProtoCallCallCapabilityOut",
        "BiasingPerDocData2BiasingFieldIn": "_contentwarehouse_1132_BiasingPerDocData2BiasingFieldIn",
        "BiasingPerDocData2BiasingFieldOut": "_contentwarehouse_1133_BiasingPerDocData2BiasingFieldOut",
        "SnippetExtraInfoSnippetCandidateInfoIn": "_contentwarehouse_1134_SnippetExtraInfoSnippetCandidateInfoIn",
        "SnippetExtraInfoSnippetCandidateInfoOut": "_contentwarehouse_1135_SnippetExtraInfoSnippetCandidateInfoOut",
        "KnowledgeAnswersOpaqueShoppingMerchantTypeIn": "_contentwarehouse_1136_KnowledgeAnswersOpaqueShoppingMerchantTypeIn",
        "KnowledgeAnswersOpaqueShoppingMerchantTypeOut": "_contentwarehouse_1137_KnowledgeAnswersOpaqueShoppingMerchantTypeOut",
        "PseudoVideoDataIn": "_contentwarehouse_1138_PseudoVideoDataIn",
        "PseudoVideoDataOut": "_contentwarehouse_1139_PseudoVideoDataOut",
        "OceanGEPriceIn": "_contentwarehouse_1140_OceanGEPriceIn",
        "OceanGEPriceOut": "_contentwarehouse_1141_OceanGEPriceOut",
        "VideoContentSearchMultimodalTopicFeaturesIn": "_contentwarehouse_1142_VideoContentSearchMultimodalTopicFeaturesIn",
        "VideoContentSearchMultimodalTopicFeaturesOut": "_contentwarehouse_1143_VideoContentSearchMultimodalTopicFeaturesOut",
        "NlpSemanticParsingModelsMediaNewsInfoIn": "_contentwarehouse_1144_NlpSemanticParsingModelsMediaNewsInfoIn",
        "NlpSemanticParsingModelsMediaNewsInfoOut": "_contentwarehouse_1145_NlpSemanticParsingModelsMediaNewsInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiPhoneIn": "_contentwarehouse_1146_AppsPeopleOzExternalMergedpeopleapiPhoneIn",
        "AppsPeopleOzExternalMergedpeopleapiPhoneOut": "_contentwarehouse_1147_AppsPeopleOzExternalMergedpeopleapiPhoneOut",
        "AppsDynamiteSharedSegmentedMembershipCountsIn": "_contentwarehouse_1148_AppsDynamiteSharedSegmentedMembershipCountsIn",
        "AppsDynamiteSharedSegmentedMembershipCountsOut": "_contentwarehouse_1149_AppsDynamiteSharedSegmentedMembershipCountsOut",
        "GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursIn": "_contentwarehouse_1150_GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursIn",
        "GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursOut": "_contentwarehouse_1151_GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursOut",
        "VideoContentSearchSaftEntityInfoIn": "_contentwarehouse_1152_VideoContentSearchSaftEntityInfoIn",
        "VideoContentSearchSaftEntityInfoOut": "_contentwarehouse_1153_VideoContentSearchSaftEntityInfoOut",
        "IndexingConverterRichContentDataIn": "_contentwarehouse_1154_IndexingConverterRichContentDataIn",
        "IndexingConverterRichContentDataOut": "_contentwarehouse_1155_IndexingConverterRichContentDataOut",
        "SocialGraphWireProtoPeopleapiAffinityMetadataIn": "_contentwarehouse_1156_SocialGraphWireProtoPeopleapiAffinityMetadataIn",
        "SocialGraphWireProtoPeopleapiAffinityMetadataOut": "_contentwarehouse_1157_SocialGraphWireProtoPeopleapiAffinityMetadataOut",
        "RepositoryWebrefBootstrappingScoreIn": "_contentwarehouse_1158_RepositoryWebrefBootstrappingScoreIn",
        "RepositoryWebrefBootstrappingScoreOut": "_contentwarehouse_1159_RepositoryWebrefBootstrappingScoreOut",
        "AssistantApiSettingsNewsFilterIn": "_contentwarehouse_1160_AssistantApiSettingsNewsFilterIn",
        "AssistantApiSettingsNewsFilterOut": "_contentwarehouse_1161_AssistantApiSettingsNewsFilterOut",
        "SocialGraphApiProtoContactStateIn": "_contentwarehouse_1162_SocialGraphApiProtoContactStateIn",
        "SocialGraphApiProtoContactStateOut": "_contentwarehouse_1163_SocialGraphApiProtoContactStateOut",
        "GeostoreTollClusterProtoIn": "_contentwarehouse_1164_GeostoreTollClusterProtoIn",
        "GeostoreTollClusterProtoOut": "_contentwarehouse_1165_GeostoreTollClusterProtoOut",
        "ImageRepositoryCrawlStatusInfoIn": "_contentwarehouse_1166_ImageRepositoryCrawlStatusInfoIn",
        "ImageRepositoryCrawlStatusInfoOut": "_contentwarehouse_1167_ImageRepositoryCrawlStatusInfoOut",
        "QualityQrewriteAlternativeNameInfoIn": "_contentwarehouse_1168_QualityQrewriteAlternativeNameInfoIn",
        "QualityQrewriteAlternativeNameInfoOut": "_contentwarehouse_1169_QualityQrewriteAlternativeNameInfoOut",
        "KnowledgeAnswersIntentQueryTokenIn": "_contentwarehouse_1170_KnowledgeAnswersIntentQueryTokenIn",
        "KnowledgeAnswersIntentQueryTokenOut": "_contentwarehouse_1171_KnowledgeAnswersIntentQueryTokenOut",
        "MultiscaleFieldPresenceIn": "_contentwarehouse_1172_MultiscaleFieldPresenceIn",
        "MultiscaleFieldPresenceOut": "_contentwarehouse_1173_MultiscaleFieldPresenceOut",
        "GeostoreTrackProtoIn": "_contentwarehouse_1174_GeostoreTrackProtoIn",
        "GeostoreTrackProtoOut": "_contentwarehouse_1175_GeostoreTrackProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiClientDataIn": "_contentwarehouse_1176_AppsPeopleOzExternalMergedpeopleapiClientDataIn",
        "AppsPeopleOzExternalMergedpeopleapiClientDataOut": "_contentwarehouse_1177_AppsPeopleOzExternalMergedpeopleapiClientDataOut",
        "GeostoreCountComparisonProtoIn": "_contentwarehouse_1178_GeostoreCountComparisonProtoIn",
        "GeostoreCountComparisonProtoOut": "_contentwarehouse_1179_GeostoreCountComparisonProtoOut",
        "GeostoreLevelProtoIn": "_contentwarehouse_1180_GeostoreLevelProtoIn",
        "GeostoreLevelProtoOut": "_contentwarehouse_1181_GeostoreLevelProtoOut",
        "SocialDiscoveryExternalEntityKeyIn": "_contentwarehouse_1182_SocialDiscoveryExternalEntityKeyIn",
        "SocialDiscoveryExternalEntityKeyOut": "_contentwarehouse_1183_SocialDiscoveryExternalEntityKeyOut",
        "IndexingSpeechSpeechPropertiesProtoIn": "_contentwarehouse_1184_IndexingSpeechSpeechPropertiesProtoIn",
        "IndexingSpeechSpeechPropertiesProtoOut": "_contentwarehouse_1185_IndexingSpeechSpeechPropertiesProtoOut",
        "GoogleCloudContentwarehouseV1HistogramQueryIn": "_contentwarehouse_1186_GoogleCloudContentwarehouseV1HistogramQueryIn",
        "GoogleCloudContentwarehouseV1HistogramQueryOut": "_contentwarehouse_1187_GoogleCloudContentwarehouseV1HistogramQueryOut",
        "NlpSemanticParsingModelsDeviceNameIn": "_contentwarehouse_1188_NlpSemanticParsingModelsDeviceNameIn",
        "NlpSemanticParsingModelsDeviceNameOut": "_contentwarehouse_1189_NlpSemanticParsingModelsDeviceNameOut",
        "YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn": "_contentwarehouse_1190_YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn",
        "YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut": "_contentwarehouse_1191_YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut",
        "TrawlerFetchReplyDataDeliveryReportIn": "_contentwarehouse_1192_TrawlerFetchReplyDataDeliveryReportIn",
        "TrawlerFetchReplyDataDeliveryReportOut": "_contentwarehouse_1193_TrawlerFetchReplyDataDeliveryReportOut",
        "RepositoryWebrefKGCollectionIn": "_contentwarehouse_1194_RepositoryWebrefKGCollectionIn",
        "RepositoryWebrefKGCollectionOut": "_contentwarehouse_1195_RepositoryWebrefKGCollectionOut",
        "KnowledgeAnswersDateTypeIn": "_contentwarehouse_1196_KnowledgeAnswersDateTypeIn",
        "KnowledgeAnswersDateTypeOut": "_contentwarehouse_1197_KnowledgeAnswersDateTypeOut",
        "AbuseiamSpecialRestrictionIn": "_contentwarehouse_1198_AbuseiamSpecialRestrictionIn",
        "AbuseiamSpecialRestrictionOut": "_contentwarehouse_1199_AbuseiamSpecialRestrictionOut",
        "HtmlrenderWebkitHeadlessProtoCookieIn": "_contentwarehouse_1200_HtmlrenderWebkitHeadlessProtoCookieIn",
        "HtmlrenderWebkitHeadlessProtoCookieOut": "_contentwarehouse_1201_HtmlrenderWebkitHeadlessProtoCookieOut",
        "GeostoreRestrictionProtoIn": "_contentwarehouse_1202_GeostoreRestrictionProtoIn",
        "GeostoreRestrictionProtoOut": "_contentwarehouse_1203_GeostoreRestrictionProtoOut",
        "CompositeDocLiveExperimentInfoIn": "_contentwarehouse_1204_CompositeDocLiveExperimentInfoIn",
        "CompositeDocLiveExperimentInfoOut": "_contentwarehouse_1205_CompositeDocLiveExperimentInfoOut",
        "SocialGraphApiProtoDisplayNameSourceIn": "_contentwarehouse_1206_SocialGraphApiProtoDisplayNameSourceIn",
        "SocialGraphApiProtoDisplayNameSourceOut": "_contentwarehouse_1207_SocialGraphApiProtoDisplayNameSourceOut",
        "KnowledgeAnswersCollectionTypeIn": "_contentwarehouse_1208_KnowledgeAnswersCollectionTypeIn",
        "KnowledgeAnswersCollectionTypeOut": "_contentwarehouse_1209_KnowledgeAnswersCollectionTypeOut",
        "NlpLoggingQusClientCallPathInfoIn": "_contentwarehouse_1210_NlpLoggingQusClientCallPathInfoIn",
        "NlpLoggingQusClientCallPathInfoOut": "_contentwarehouse_1211_NlpLoggingQusClientCallPathInfoOut",
        "GoogleCloudContentwarehouseV1ProcessorInfoIn": "_contentwarehouse_1212_GoogleCloudContentwarehouseV1ProcessorInfoIn",
        "GoogleCloudContentwarehouseV1ProcessorInfoOut": "_contentwarehouse_1213_GoogleCloudContentwarehouseV1ProcessorInfoOut",
        "SdrEmbeddingIn": "_contentwarehouse_1214_SdrEmbeddingIn",
        "SdrEmbeddingOut": "_contentwarehouse_1215_SdrEmbeddingOut",
        "VideoFileHDR10PlusStatsIn": "_contentwarehouse_1216_VideoFileHDR10PlusStatsIn",
        "VideoFileHDR10PlusStatsOut": "_contentwarehouse_1217_VideoFileHDR10PlusStatsOut",
        "GoogleAssistantEmbeddedV1AlarmIn": "_contentwarehouse_1218_GoogleAssistantEmbeddedV1AlarmIn",
        "GoogleAssistantEmbeddedV1AlarmOut": "_contentwarehouse_1219_GoogleAssistantEmbeddedV1AlarmOut",
        "VideoContentSearchNamedEntityIn": "_contentwarehouse_1220_VideoContentSearchNamedEntityIn",
        "VideoContentSearchNamedEntityOut": "_contentwarehouse_1221_VideoContentSearchNamedEntityOut",
        "AssistantLogsDeviceTargetingTestCodeIn": "_contentwarehouse_1222_AssistantLogsDeviceTargetingTestCodeIn",
        "AssistantLogsDeviceTargetingTestCodeOut": "_contentwarehouse_1223_AssistantLogsDeviceTargetingTestCodeOut",
        "SecurityCredentialsCloudPrincipalProtoIn": "_contentwarehouse_1224_SecurityCredentialsCloudPrincipalProtoIn",
        "SecurityCredentialsCloudPrincipalProtoOut": "_contentwarehouse_1225_SecurityCredentialsCloudPrincipalProtoOut",
        "GeostoreParkingProtoIn": "_contentwarehouse_1226_GeostoreParkingProtoIn",
        "GeostoreParkingProtoOut": "_contentwarehouse_1227_GeostoreParkingProtoOut",
        "GoodocOverridesStyleIn": "_contentwarehouse_1228_GoodocOverridesStyleIn",
        "GoodocOverridesStyleOut": "_contentwarehouse_1229_GoodocOverridesStyleOut",
        "RepositoryWebrefMentionCompoundMentionIn": "_contentwarehouse_1230_RepositoryWebrefMentionCompoundMentionIn",
        "RepositoryWebrefMentionCompoundMentionOut": "_contentwarehouse_1231_RepositoryWebrefMentionCompoundMentionOut",
        "GeostoreDimensionComparisonProtoIn": "_contentwarehouse_1232_GeostoreDimensionComparisonProtoIn",
        "GeostoreDimensionComparisonProtoOut": "_contentwarehouse_1233_GeostoreDimensionComparisonProtoOut",
        "GoogleCloudContentwarehouseV1EnumValueIn": "_contentwarehouse_1234_GoogleCloudContentwarehouseV1EnumValueIn",
        "GoogleCloudContentwarehouseV1EnumValueOut": "_contentwarehouse_1235_GoogleCloudContentwarehouseV1EnumValueOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataIn": "_contentwarehouse_1236_AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataOut": "_contentwarehouse_1237_AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataOut",
        "GoogleInternalAppsWaldoV1alphaUserStatusIn": "_contentwarehouse_1238_GoogleInternalAppsWaldoV1alphaUserStatusIn",
        "GoogleInternalAppsWaldoV1alphaUserStatusOut": "_contentwarehouse_1239_GoogleInternalAppsWaldoV1alphaUserStatusOut",
        "NlpSemanticParsingModelsMediaPurchaseInfoIn": "_contentwarehouse_1240_NlpSemanticParsingModelsMediaPurchaseInfoIn",
        "NlpSemanticParsingModelsMediaPurchaseInfoOut": "_contentwarehouse_1241_NlpSemanticParsingModelsMediaPurchaseInfoOut",
        "GoogleAssistantEmbeddedV1FitnessActivityIn": "_contentwarehouse_1242_GoogleAssistantEmbeddedV1FitnessActivityIn",
        "GoogleAssistantEmbeddedV1FitnessActivityOut": "_contentwarehouse_1243_GoogleAssistantEmbeddedV1FitnessActivityOut",
        "GeostoreOpeningHoursProtoIn": "_contentwarehouse_1244_GeostoreOpeningHoursProtoIn",
        "GeostoreOpeningHoursProtoOut": "_contentwarehouse_1245_GeostoreOpeningHoursProtoOut",
        "GeostoreAddressProtoIn": "_contentwarehouse_1246_GeostoreAddressProtoIn",
        "GeostoreAddressProtoOut": "_contentwarehouse_1247_GeostoreAddressProtoOut",
        "QualityActionsRingtoneIn": "_contentwarehouse_1248_QualityActionsRingtoneIn",
        "QualityActionsRingtoneOut": "_contentwarehouse_1249_QualityActionsRingtoneOut",
        "EmbedsDeepLinkDataIn": "_contentwarehouse_1250_EmbedsDeepLinkDataIn",
        "EmbedsDeepLinkDataOut": "_contentwarehouse_1251_EmbedsDeepLinkDataOut",
        "GoodocBreakLabelIn": "_contentwarehouse_1252_GoodocBreakLabelIn",
        "GoodocBreakLabelOut": "_contentwarehouse_1253_GoodocBreakLabelOut",
        "AttentionalEntitiesMentionPropertiesListEntryInfoIn": "_contentwarehouse_1254_AttentionalEntitiesMentionPropertiesListEntryInfoIn",
        "AttentionalEntitiesMentionPropertiesListEntryInfoOut": "_contentwarehouse_1255_AttentionalEntitiesMentionPropertiesListEntryInfoOut",
        "RepositoryWebrefGeoMetadataProtoAddressSynonymIn": "_contentwarehouse_1256_RepositoryWebrefGeoMetadataProtoAddressSynonymIn",
        "RepositoryWebrefGeoMetadataProtoAddressSynonymOut": "_contentwarehouse_1257_RepositoryWebrefGeoMetadataProtoAddressSynonymOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceIn": "_contentwarehouse_1258_AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceOut": "_contentwarehouse_1259_AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceOut",
        "GeostoreRelationProtoIn": "_contentwarehouse_1260_GeostoreRelationProtoIn",
        "GeostoreRelationProtoOut": "_contentwarehouse_1261_GeostoreRelationProtoOut",
        "NlpSemanticParsingLocalMenuItemIn": "_contentwarehouse_1262_NlpSemanticParsingLocalMenuItemIn",
        "NlpSemanticParsingLocalMenuItemOut": "_contentwarehouse_1263_NlpSemanticParsingLocalMenuItemOut",
        "KnowledgeGraphTripleObjProtoIn": "_contentwarehouse_1264_KnowledgeGraphTripleObjProtoIn",
        "KnowledgeGraphTripleObjProtoOut": "_contentwarehouse_1265_KnowledgeGraphTripleObjProtoOut",
        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdIn": "_contentwarehouse_1266_NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdIn",
        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdOut": "_contentwarehouse_1267_NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdOut",
        "AssistantApiThirdPartyActionConfigIn": "_contentwarehouse_1268_AssistantApiThirdPartyActionConfigIn",
        "AssistantApiThirdPartyActionConfigOut": "_contentwarehouse_1269_AssistantApiThirdPartyActionConfigOut",
        "AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn": "_contentwarehouse_1270_AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn",
        "AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut": "_contentwarehouse_1271_AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut",
        "AssistantApiThirdPartyActionConfigProjectConfigIn": "_contentwarehouse_1272_AssistantApiThirdPartyActionConfigProjectConfigIn",
        "AssistantApiThirdPartyActionConfigProjectConfigOut": "_contentwarehouse_1273_AssistantApiThirdPartyActionConfigProjectConfigOut",
        "GeostoreCellCoveringProtoIn": "_contentwarehouse_1274_GeostoreCellCoveringProtoIn",
        "GeostoreCellCoveringProtoOut": "_contentwarehouse_1275_GeostoreCellCoveringProtoOut",
        "NlpSemanticParsingModelsCommunicationRelationshipArgumentIn": "_contentwarehouse_1276_NlpSemanticParsingModelsCommunicationRelationshipArgumentIn",
        "NlpSemanticParsingModelsCommunicationRelationshipArgumentOut": "_contentwarehouse_1277_NlpSemanticParsingModelsCommunicationRelationshipArgumentOut",
        "GeostoreBorderProtoIn": "_contentwarehouse_1278_GeostoreBorderProtoIn",
        "GeostoreBorderProtoOut": "_contentwarehouse_1279_GeostoreBorderProtoOut",
        "SocialGraphApiProtoNotificationTriggerIn": "_contentwarehouse_1280_SocialGraphApiProtoNotificationTriggerIn",
        "SocialGraphApiProtoNotificationTriggerOut": "_contentwarehouse_1281_SocialGraphApiProtoNotificationTriggerOut",
        "AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoIn": "_contentwarehouse_1282_AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoOut": "_contentwarehouse_1283_AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoOut",
        "GoogleCloudContentwarehouseV1TimestampTypeOptionsIn": "_contentwarehouse_1284_GoogleCloudContentwarehouseV1TimestampTypeOptionsIn",
        "GoogleCloudContentwarehouseV1TimestampTypeOptionsOut": "_contentwarehouse_1285_GoogleCloudContentwarehouseV1TimestampTypeOptionsOut",
        "SocialCommonSegmentsIn": "_contentwarehouse_1286_SocialCommonSegmentsIn",
        "SocialCommonSegmentsOut": "_contentwarehouse_1287_SocialCommonSegmentsOut",
        "VideoContentSearchVideoCommonFeaturesIn": "_contentwarehouse_1288_VideoContentSearchVideoCommonFeaturesIn",
        "VideoContentSearchVideoCommonFeaturesOut": "_contentwarehouse_1289_VideoContentSearchVideoCommonFeaturesOut",
        "VideoContentSearchVideoInfoIn": "_contentwarehouse_1290_VideoContentSearchVideoInfoIn",
        "VideoContentSearchVideoInfoOut": "_contentwarehouse_1291_VideoContentSearchVideoInfoOut",
        "SecurityCredentialsEventProtoIn": "_contentwarehouse_1292_SecurityCredentialsEventProtoIn",
        "SecurityCredentialsEventProtoOut": "_contentwarehouse_1293_SecurityCredentialsEventProtoOut",
        "QualityTravelGoodSitesDataSignalIn": "_contentwarehouse_1294_QualityTravelGoodSitesDataSignalIn",
        "QualityTravelGoodSitesDataSignalOut": "_contentwarehouse_1295_QualityTravelGoodSitesDataSignalOut",
        "GoogleCloudContentwarehouseV1TextTypeOptionsIn": "_contentwarehouse_1296_GoogleCloudContentwarehouseV1TextTypeOptionsIn",
        "GoogleCloudContentwarehouseV1TextTypeOptionsOut": "_contentwarehouse_1297_GoogleCloudContentwarehouseV1TextTypeOptionsOut",
        "NlpSemanticParsingModelsMediaQuantificationIn": "_contentwarehouse_1298_NlpSemanticParsingModelsMediaQuantificationIn",
        "NlpSemanticParsingModelsMediaQuantificationOut": "_contentwarehouse_1299_NlpSemanticParsingModelsMediaQuantificationOut",
        "RepositoryWebrefLexicalAnnotationIn": "_contentwarehouse_1300_RepositoryWebrefLexicalAnnotationIn",
        "RepositoryWebrefLexicalAnnotationOut": "_contentwarehouse_1301_RepositoryWebrefLexicalAnnotationOut",
        "RepositoryWebrefEntityNameSourceIn": "_contentwarehouse_1302_RepositoryWebrefEntityNameSourceIn",
        "RepositoryWebrefEntityNameSourceOut": "_contentwarehouse_1303_RepositoryWebrefEntityNameSourceOut",
        "GeostoreLocaleProtoIn": "_contentwarehouse_1304_GeostoreLocaleProtoIn",
        "GeostoreLocaleProtoOut": "_contentwarehouse_1305_GeostoreLocaleProtoOut",
        "IndexingSignalAggregatorSccSignalIn": "_contentwarehouse_1306_IndexingSignalAggregatorSccSignalIn",
        "IndexingSignalAggregatorSccSignalOut": "_contentwarehouse_1307_IndexingSignalAggregatorSccSignalOut",
        "RepositoryWebrefClusterMetadataIn": "_contentwarehouse_1308_RepositoryWebrefClusterMetadataIn",
        "RepositoryWebrefClusterMetadataOut": "_contentwarehouse_1309_RepositoryWebrefClusterMetadataOut",
        "VideoMediaOverviewMediaClipInfoOverviewIn": "_contentwarehouse_1310_VideoMediaOverviewMediaClipInfoOverviewIn",
        "VideoMediaOverviewMediaClipInfoOverviewOut": "_contentwarehouse_1311_VideoMediaOverviewMediaClipInfoOverviewOut",
        "DrishtiDenseFeatureDataIn": "_contentwarehouse_1312_DrishtiDenseFeatureDataIn",
        "DrishtiDenseFeatureDataOut": "_contentwarehouse_1313_DrishtiDenseFeatureDataOut",
        "KnowledgeAnswersSensitivityInstructionPreviousQueryIn": "_contentwarehouse_1314_KnowledgeAnswersSensitivityInstructionPreviousQueryIn",
        "KnowledgeAnswersSensitivityInstructionPreviousQueryOut": "_contentwarehouse_1315_KnowledgeAnswersSensitivityInstructionPreviousQueryOut",
        "GoodocBoxPartitionsIn": "_contentwarehouse_1316_GoodocBoxPartitionsIn",
        "GoodocBoxPartitionsOut": "_contentwarehouse_1317_GoodocBoxPartitionsOut",
        "AssistantApiClientOpPropertiesProviderOpenClientOpPropertyIn": "_contentwarehouse_1318_AssistantApiClientOpPropertiesProviderOpenClientOpPropertyIn",
        "AssistantApiClientOpPropertiesProviderOpenClientOpPropertyOut": "_contentwarehouse_1319_AssistantApiClientOpPropertiesProviderOpenClientOpPropertyOut",
        "AssistantApiDateIn": "_contentwarehouse_1320_AssistantApiDateIn",
        "AssistantApiDateOut": "_contentwarehouse_1321_AssistantApiDateOut",
        "AssistantApiAccessControlOutputIn": "_contentwarehouse_1322_AssistantApiAccessControlOutputIn",
        "AssistantApiAccessControlOutputOut": "_contentwarehouse_1323_AssistantApiAccessControlOutputOut",
        "SocialGraphApiDataColumnIn": "_contentwarehouse_1324_SocialGraphApiDataColumnIn",
        "SocialGraphApiDataColumnOut": "_contentwarehouse_1325_SocialGraphApiDataColumnOut",
        "StorageGraphBfgTripleProvenanceIn": "_contentwarehouse_1326_StorageGraphBfgTripleProvenanceIn",
        "StorageGraphBfgTripleProvenanceOut": "_contentwarehouse_1327_StorageGraphBfgTripleProvenanceOut",
        "GeostoreBusinessHoursProtoIn": "_contentwarehouse_1328_GeostoreBusinessHoursProtoIn",
        "GeostoreBusinessHoursProtoOut": "_contentwarehouse_1329_GeostoreBusinessHoursProtoOut",
        "SearchPolicyRankableSensitivityGroundingProviderIn": "_contentwarehouse_1330_SearchPolicyRankableSensitivityGroundingProviderIn",
        "SearchPolicyRankableSensitivityGroundingProviderOut": "_contentwarehouse_1331_SearchPolicyRankableSensitivityGroundingProviderOut",
        "ImageRepositoryYoutubeProcessingFilterIn": "_contentwarehouse_1332_ImageRepositoryYoutubeProcessingFilterIn",
        "ImageRepositoryYoutubeProcessingFilterOut": "_contentwarehouse_1333_ImageRepositoryYoutubeProcessingFilterOut",
        "LensDiscoveryStyleAestheticsScoreSignalsIn": "_contentwarehouse_1334_LensDiscoveryStyleAestheticsScoreSignalsIn",
        "LensDiscoveryStyleAestheticsScoreSignalsOut": "_contentwarehouse_1335_LensDiscoveryStyleAestheticsScoreSignalsOut",
        "NlpSemanticParsingNumberFractionNumberIn": "_contentwarehouse_1336_NlpSemanticParsingNumberFractionNumberIn",
        "NlpSemanticParsingNumberFractionNumberOut": "_contentwarehouse_1337_NlpSemanticParsingNumberFractionNumberOut",
        "GoogleCloudContentwarehouseV1InvalidRuleIn": "_contentwarehouse_1338_GoogleCloudContentwarehouseV1InvalidRuleIn",
        "GoogleCloudContentwarehouseV1InvalidRuleOut": "_contentwarehouse_1339_GoogleCloudContentwarehouseV1InvalidRuleOut",
        "SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataIn": "_contentwarehouse_1340_SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataIn",
        "SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataOut": "_contentwarehouse_1341_SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataOut",
        "GoogleCloudContentwarehouseV1TimestampArrayIn": "_contentwarehouse_1342_GoogleCloudContentwarehouseV1TimestampArrayIn",
        "GoogleCloudContentwarehouseV1TimestampArrayOut": "_contentwarehouse_1343_GoogleCloudContentwarehouseV1TimestampArrayOut",
        "RepositoryWebrefLinkInfoIn": "_contentwarehouse_1344_RepositoryWebrefLinkInfoIn",
        "RepositoryWebrefLinkInfoOut": "_contentwarehouse_1345_RepositoryWebrefLinkInfoOut",
        "NlpSemanticParsingModelsMediaYouTubePlaylistInfoIn": "_contentwarehouse_1346_NlpSemanticParsingModelsMediaYouTubePlaylistInfoIn",
        "NlpSemanticParsingModelsMediaYouTubePlaylistInfoOut": "_contentwarehouse_1347_NlpSemanticParsingModelsMediaYouTubePlaylistInfoOut",
        "ResearchScamRestrictStatsIn": "_contentwarehouse_1348_ResearchScamRestrictStatsIn",
        "ResearchScamRestrictStatsOut": "_contentwarehouse_1349_ResearchScamRestrictStatsOut",
        "TrawlerMultiverseClientIdentifierIn": "_contentwarehouse_1350_TrawlerMultiverseClientIdentifierIn",
        "TrawlerMultiverseClientIdentifierOut": "_contentwarehouse_1351_TrawlerMultiverseClientIdentifierOut",
        "MediaIndexFrameIdentifierPreviewFrameZeroVariantIn": "_contentwarehouse_1352_MediaIndexFrameIdentifierPreviewFrameZeroVariantIn",
        "MediaIndexFrameIdentifierPreviewFrameZeroVariantOut": "_contentwarehouse_1353_MediaIndexFrameIdentifierPreviewFrameZeroVariantOut",
        "ImageRepositoryAmarnaStatusIn": "_contentwarehouse_1354_ImageRepositoryAmarnaStatusIn",
        "ImageRepositoryAmarnaStatusOut": "_contentwarehouse_1355_ImageRepositoryAmarnaStatusOut",
        "BiasingPerDocData2In": "_contentwarehouse_1356_BiasingPerDocData2In",
        "BiasingPerDocData2Out": "_contentwarehouse_1357_BiasingPerDocData2Out",
        "WatchpageLanguageWatchPageLanguageResultIn": "_contentwarehouse_1358_WatchpageLanguageWatchPageLanguageResultIn",
        "WatchpageLanguageWatchPageLanguageResultOut": "_contentwarehouse_1359_WatchpageLanguageWatchPageLanguageResultOut",
        "KnowledgeGraphQualifierIn": "_contentwarehouse_1360_KnowledgeGraphQualifierIn",
        "KnowledgeGraphQualifierOut": "_contentwarehouse_1361_KnowledgeGraphQualifierOut",
        "GeostoreBizBuilderReferenceProtoIn": "_contentwarehouse_1362_GeostoreBizBuilderReferenceProtoIn",
        "GeostoreBizBuilderReferenceProtoOut": "_contentwarehouse_1363_GeostoreBizBuilderReferenceProtoOut",
        "ScienceCitationReferenceDiscussionIn": "_contentwarehouse_1364_ScienceCitationReferenceDiscussionIn",
        "ScienceCitationReferenceDiscussionOut": "_contentwarehouse_1365_ScienceCitationReferenceDiscussionOut",
        "GeostoreIntersectionGroupProtoIn": "_contentwarehouse_1366_GeostoreIntersectionGroupProtoIn",
        "GeostoreIntersectionGroupProtoOut": "_contentwarehouse_1367_GeostoreIntersectionGroupProtoOut",
        "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyIn": "_contentwarehouse_1368_AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyIn",
        "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyOut": "_contentwarehouse_1369_AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyOut",
        "GoogleCloudContentwarehouseV1CustomWeightsMetadataIn": "_contentwarehouse_1370_GoogleCloudContentwarehouseV1CustomWeightsMetadataIn",
        "GoogleCloudContentwarehouseV1CustomWeightsMetadataOut": "_contentwarehouse_1371_GoogleCloudContentwarehouseV1CustomWeightsMetadataOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryIn": "_contentwarehouse_1372_KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryOut": "_contentwarehouse_1373_KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryOut",
        "RepositoryWebrefTripleAnnotationsIn": "_contentwarehouse_1374_RepositoryWebrefTripleAnnotationsIn",
        "RepositoryWebrefTripleAnnotationsOut": "_contentwarehouse_1375_RepositoryWebrefTripleAnnotationsOut",
        "SocialGraphApiProtoSingleRecurrenceIn": "_contentwarehouse_1376_SocialGraphApiProtoSingleRecurrenceIn",
        "SocialGraphApiProtoSingleRecurrenceOut": "_contentwarehouse_1377_SocialGraphApiProtoSingleRecurrenceOut",
        "GoogleInternalAppsWaldoV1alphaUserLocationIn": "_contentwarehouse_1378_GoogleInternalAppsWaldoV1alphaUserLocationIn",
        "GoogleInternalAppsWaldoV1alphaUserLocationOut": "_contentwarehouse_1379_GoogleInternalAppsWaldoV1alphaUserLocationOut",
        "OceanLocaleViewabilityIn": "_contentwarehouse_1380_OceanLocaleViewabilityIn",
        "OceanLocaleViewabilityOut": "_contentwarehouse_1381_OceanLocaleViewabilityOut",
        "LegalCitationIn": "_contentwarehouse_1382_LegalCitationIn",
        "LegalCitationOut": "_contentwarehouse_1383_LegalCitationOut",
        "GoodocOrdinalIn": "_contentwarehouse_1384_GoodocOrdinalIn",
        "GoodocOrdinalOut": "_contentwarehouse_1385_GoodocOrdinalOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankIn": "_contentwarehouse_1386_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankOut": "_contentwarehouse_1387_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankOut",
        "NlpSemanticParsingLocalVicinityLocationIn": "_contentwarehouse_1388_NlpSemanticParsingLocalVicinityLocationIn",
        "NlpSemanticParsingLocalVicinityLocationOut": "_contentwarehouse_1389_NlpSemanticParsingLocalVicinityLocationOut",
        "VideoContentSearchFrameStarburstDataIn": "_contentwarehouse_1390_VideoContentSearchFrameStarburstDataIn",
        "VideoContentSearchFrameStarburstDataOut": "_contentwarehouse_1391_VideoContentSearchFrameStarburstDataOut",
        "KnowledgeAnswersNumberTypeIn": "_contentwarehouse_1392_KnowledgeAnswersNumberTypeIn",
        "KnowledgeAnswersNumberTypeOut": "_contentwarehouse_1393_KnowledgeAnswersNumberTypeOut",
        "QualityActionsAppInfoSourceDataAllowListSourceDataIn": "_contentwarehouse_1394_QualityActionsAppInfoSourceDataAllowListSourceDataIn",
        "QualityActionsAppInfoSourceDataAllowListSourceDataOut": "_contentwarehouse_1395_QualityActionsAppInfoSourceDataAllowListSourceDataOut",
        "ListSnippetResponseRowIn": "_contentwarehouse_1396_ListSnippetResponseRowIn",
        "ListSnippetResponseRowOut": "_contentwarehouse_1397_ListSnippetResponseRowOut",
        "AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataIn": "_contentwarehouse_1398_AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataOut": "_contentwarehouse_1399_AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataOut",
        "RepositoryWebrefBookEditionMetadataIn": "_contentwarehouse_1400_RepositoryWebrefBookEditionMetadataIn",
        "RepositoryWebrefBookEditionMetadataOut": "_contentwarehouse_1401_RepositoryWebrefBookEditionMetadataOut",
        "KnowledgeAnswersIntentQuerySignalComputationFallbackIntentIn": "_contentwarehouse_1402_KnowledgeAnswersIntentQuerySignalComputationFallbackIntentIn",
        "KnowledgeAnswersIntentQuerySignalComputationFallbackIntentOut": "_contentwarehouse_1403_KnowledgeAnswersIntentQuerySignalComputationFallbackIntentOut",
        "RepositoryWebrefNameInfoIn": "_contentwarehouse_1404_RepositoryWebrefNameInfoIn",
        "RepositoryWebrefNameInfoOut": "_contentwarehouse_1405_RepositoryWebrefNameInfoOut",
        "KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardIn": "_contentwarehouse_1406_KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardIn",
        "KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardOut": "_contentwarehouse_1407_KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardOut",
        "SecurityCredentialsSimpleSecretLabelProtoIn": "_contentwarehouse_1408_SecurityCredentialsSimpleSecretLabelProtoIn",
        "SecurityCredentialsSimpleSecretLabelProtoOut": "_contentwarehouse_1409_SecurityCredentialsSimpleSecretLabelProtoOut",
        "SocialGraphApiProtoBirthdayDecorationIn": "_contentwarehouse_1410_SocialGraphApiProtoBirthdayDecorationIn",
        "SocialGraphApiProtoBirthdayDecorationOut": "_contentwarehouse_1411_SocialGraphApiProtoBirthdayDecorationOut",
        "VideoContentSearchQnaAnchorSetFeaturesIn": "_contentwarehouse_1412_VideoContentSearchQnaAnchorSetFeaturesIn",
        "VideoContentSearchQnaAnchorSetFeaturesOut": "_contentwarehouse_1413_VideoContentSearchQnaAnchorSetFeaturesOut",
        "QualityPreviewSnippetBrainFeaturesIn": "_contentwarehouse_1414_QualityPreviewSnippetBrainFeaturesIn",
        "QualityPreviewSnippetBrainFeaturesOut": "_contentwarehouse_1415_QualityPreviewSnippetBrainFeaturesOut",
        "NlpSemanticParsingModelsDeviceIn": "_contentwarehouse_1416_NlpSemanticParsingModelsDeviceIn",
        "NlpSemanticParsingModelsDeviceOut": "_contentwarehouse_1417_NlpSemanticParsingModelsDeviceOut",
        "CompositeDocPartialUpdateInfoLastFullIndexingInfoIn": "_contentwarehouse_1418_CompositeDocPartialUpdateInfoLastFullIndexingInfoIn",
        "CompositeDocPartialUpdateInfoLastFullIndexingInfoOut": "_contentwarehouse_1419_CompositeDocPartialUpdateInfoLastFullIndexingInfoOut",
        "RepositoryWebrefWebrefDocumentInfoIn": "_contentwarehouse_1420_RepositoryWebrefWebrefDocumentInfoIn",
        "RepositoryWebrefWebrefDocumentInfoOut": "_contentwarehouse_1421_RepositoryWebrefWebrefDocumentInfoOut",
        "VideoContentSearchOcrAsrSetFeatureIn": "_contentwarehouse_1422_VideoContentSearchOcrAsrSetFeatureIn",
        "VideoContentSearchOcrAsrSetFeatureOut": "_contentwarehouse_1423_VideoContentSearchOcrAsrSetFeatureOut",
        "AttentionalEntitiesSemanticRoleIdIn": "_contentwarehouse_1424_AttentionalEntitiesSemanticRoleIdIn",
        "AttentionalEntitiesSemanticRoleIdOut": "_contentwarehouse_1425_AttentionalEntitiesSemanticRoleIdOut",
        "RepositoryWebrefConceptNameMetadataIn": "_contentwarehouse_1426_RepositoryWebrefConceptNameMetadataIn",
        "RepositoryWebrefConceptNameMetadataOut": "_contentwarehouse_1427_RepositoryWebrefConceptNameMetadataOut",
        "QualityShoppingShoppingAttachmentMokaFacetValueIn": "_contentwarehouse_1428_QualityShoppingShoppingAttachmentMokaFacetValueIn",
        "QualityShoppingShoppingAttachmentMokaFacetValueOut": "_contentwarehouse_1429_QualityShoppingShoppingAttachmentMokaFacetValueOut",
        "CrawlerChangerateUrlChangeIn": "_contentwarehouse_1430_CrawlerChangerateUrlChangeIn",
        "CrawlerChangerateUrlChangeOut": "_contentwarehouse_1431_CrawlerChangerateUrlChangeOut",
        "NlpSaftSemanticNodeIn": "_contentwarehouse_1432_NlpSaftSemanticNodeIn",
        "NlpSaftSemanticNodeOut": "_contentwarehouse_1433_NlpSaftSemanticNodeOut",
        "NlpSemanticParsingPersonalIntelligenceEntityIn": "_contentwarehouse_1434_NlpSemanticParsingPersonalIntelligenceEntityIn",
        "NlpSemanticParsingPersonalIntelligenceEntityOut": "_contentwarehouse_1435_NlpSemanticParsingPersonalIntelligenceEntityOut",
        "MediaIndexBoundingboxIn": "_contentwarehouse_1436_MediaIndexBoundingboxIn",
        "MediaIndexBoundingboxOut": "_contentwarehouse_1437_MediaIndexBoundingboxOut",
        "RepositoryWebrefEntityNameScoreIn": "_contentwarehouse_1438_RepositoryWebrefEntityNameScoreIn",
        "RepositoryWebrefEntityNameScoreOut": "_contentwarehouse_1439_RepositoryWebrefEntityNameScoreOut",
        "AssistantLogsNearbyDevicesLogIn": "_contentwarehouse_1440_AssistantLogsNearbyDevicesLogIn",
        "AssistantLogsNearbyDevicesLogOut": "_contentwarehouse_1441_AssistantLogsNearbyDevicesLogOut",
        "NlpSemanticParsingProtoActionsOnGoogleDateTimeIn": "_contentwarehouse_1442_NlpSemanticParsingProtoActionsOnGoogleDateTimeIn",
        "NlpSemanticParsingProtoActionsOnGoogleDateTimeOut": "_contentwarehouse_1443_NlpSemanticParsingProtoActionsOnGoogleDateTimeOut",
        "RepositoryWebrefEntityNameRatingsEntityNameRatingIn": "_contentwarehouse_1444_RepositoryWebrefEntityNameRatingsEntityNameRatingIn",
        "RepositoryWebrefEntityNameRatingsEntityNameRatingOut": "_contentwarehouse_1445_RepositoryWebrefEntityNameRatingsEntityNameRatingOut",
        "ImageBaseVideoPreviewMetadataIn": "_contentwarehouse_1446_ImageBaseVideoPreviewMetadataIn",
        "ImageBaseVideoPreviewMetadataOut": "_contentwarehouse_1447_ImageBaseVideoPreviewMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiSortKeysIn": "_contentwarehouse_1448_AppsPeopleOzExternalMergedpeopleapiSortKeysIn",
        "AppsPeopleOzExternalMergedpeopleapiSortKeysOut": "_contentwarehouse_1449_AppsPeopleOzExternalMergedpeopleapiSortKeysOut",
        "ScienceCitationAccessURLIn": "_contentwarehouse_1450_ScienceCitationAccessURLIn",
        "ScienceCitationAccessURLOut": "_contentwarehouse_1451_ScienceCitationAccessURLOut",
        "NlpSemanticParsingLocalLocationIn": "_contentwarehouse_1452_NlpSemanticParsingLocalLocationIn",
        "NlpSemanticParsingLocalLocationOut": "_contentwarehouse_1453_NlpSemanticParsingLocalLocationOut",
        "SpeechS3LocaleIn": "_contentwarehouse_1454_SpeechS3LocaleIn",
        "SpeechS3LocaleOut": "_contentwarehouse_1455_SpeechS3LocaleOut",
        "QualityShoppingShoppingAttachmentLocaleIn": "_contentwarehouse_1456_QualityShoppingShoppingAttachmentLocaleIn",
        "QualityShoppingShoppingAttachmentLocaleOut": "_contentwarehouse_1457_QualityShoppingShoppingAttachmentLocaleOut",
        "ImageRepositoryAmarnaSignalsBlobInfoIn": "_contentwarehouse_1458_ImageRepositoryAmarnaSignalsBlobInfoIn",
        "ImageRepositoryAmarnaSignalsBlobInfoOut": "_contentwarehouse_1459_ImageRepositoryAmarnaSignalsBlobInfoOut",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataIn": "_contentwarehouse_1460_GoogleCloudContentwarehouseV1RunPipelineMetadataIn",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataOut": "_contentwarehouse_1461_GoogleCloudContentwarehouseV1RunPipelineMetadataOut",
        "RepositoryWebrefGeoMetadataProtoIn": "_contentwarehouse_1462_RepositoryWebrefGeoMetadataProtoIn",
        "RepositoryWebrefGeoMetadataProtoOut": "_contentwarehouse_1463_RepositoryWebrefGeoMetadataProtoOut",
        "NlpSaftAnnotatedPhraseIn": "_contentwarehouse_1464_NlpSaftAnnotatedPhraseIn",
        "NlpSaftAnnotatedPhraseOut": "_contentwarehouse_1465_NlpSaftAnnotatedPhraseOut",
        "RepositoryWebrefPerDocRelevanceRatingIn": "_contentwarehouse_1466_RepositoryWebrefPerDocRelevanceRatingIn",
        "RepositoryWebrefPerDocRelevanceRatingOut": "_contentwarehouse_1467_RepositoryWebrefPerDocRelevanceRatingOut",
        "RepositoryWebrefEntityLinkSourceIn": "_contentwarehouse_1468_RepositoryWebrefEntityLinkSourceIn",
        "RepositoryWebrefEntityLinkSourceOut": "_contentwarehouse_1469_RepositoryWebrefEntityLinkSourceOut",
        "QualitySitemapBreadcrumbTargetDocIn": "_contentwarehouse_1470_QualitySitemapBreadcrumbTargetDocIn",
        "QualitySitemapBreadcrumbTargetDocOut": "_contentwarehouse_1471_QualitySitemapBreadcrumbTargetDocOut",
        "SocialPersonalizationKnexAnnotationItemTopicIn": "_contentwarehouse_1472_SocialPersonalizationKnexAnnotationItemTopicIn",
        "SocialPersonalizationKnexAnnotationItemTopicOut": "_contentwarehouse_1473_SocialPersonalizationKnexAnnotationItemTopicOut",
        "SecurityCredentialsCircleProtoIn": "_contentwarehouse_1474_SecurityCredentialsCircleProtoIn",
        "SecurityCredentialsCircleProtoOut": "_contentwarehouse_1475_SecurityCredentialsCircleProtoOut",
        "AssistantDevicesPlatformProtoDeviceActionCapabilityIn": "_contentwarehouse_1476_AssistantDevicesPlatformProtoDeviceActionCapabilityIn",
        "AssistantDevicesPlatformProtoDeviceActionCapabilityOut": "_contentwarehouse_1477_AssistantDevicesPlatformProtoDeviceActionCapabilityOut",
        "GoogleTypeExprIn": "_contentwarehouse_1478_GoogleTypeExprIn",
        "GoogleTypeExprOut": "_contentwarehouse_1479_GoogleTypeExprOut",
        "ImageExactBoostNavQueryIn": "_contentwarehouse_1480_ImageExactBoostNavQueryIn",
        "ImageExactBoostNavQueryOut": "_contentwarehouse_1481_ImageExactBoostNavQueryOut",
        "AssistantApiSettingsNotificationProfileIn": "_contentwarehouse_1482_AssistantApiSettingsNotificationProfileIn",
        "AssistantApiSettingsNotificationProfileOut": "_contentwarehouse_1483_AssistantApiSettingsNotificationProfileOut",
        "AppsPeopleOzExternalMergedpeopleapiMatchInfoIn": "_contentwarehouse_1484_AppsPeopleOzExternalMergedpeopleapiMatchInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiMatchInfoOut": "_contentwarehouse_1485_AppsPeopleOzExternalMergedpeopleapiMatchInfoOut",
        "RepositoryWebrefSegmentMentionsIn": "_contentwarehouse_1486_RepositoryWebrefSegmentMentionsIn",
        "RepositoryWebrefSegmentMentionsOut": "_contentwarehouse_1487_RepositoryWebrefSegmentMentionsOut",
        "QualityQrewriteCandidateIdFieldIn": "_contentwarehouse_1488_QualityQrewriteCandidateIdFieldIn",
        "QualityQrewriteCandidateIdFieldOut": "_contentwarehouse_1489_QualityQrewriteCandidateIdFieldOut",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberIn": "_contentwarehouse_1490_AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberIn",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberOut": "_contentwarehouse_1491_AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberOut",
        "GoogleCloudDocumentaiV1DocumentEntityIn": "_contentwarehouse_1492_GoogleCloudDocumentaiV1DocumentEntityIn",
        "GoogleCloudDocumentaiV1DocumentEntityOut": "_contentwarehouse_1493_GoogleCloudDocumentaiV1DocumentEntityOut",
        "AssistantLogsStructureAnnotationLogIn": "_contentwarehouse_1494_AssistantLogsStructureAnnotationLogIn",
        "AssistantLogsStructureAnnotationLogOut": "_contentwarehouse_1495_AssistantLogsStructureAnnotationLogOut",
        "NlpSemanticParsingDatetimeAbsoluteDateTimeIn": "_contentwarehouse_1496_NlpSemanticParsingDatetimeAbsoluteDateTimeIn",
        "NlpSemanticParsingDatetimeAbsoluteDateTimeOut": "_contentwarehouse_1497_NlpSemanticParsingDatetimeAbsoluteDateTimeOut",
        "NlpSciencelitArticleDataIn": "_contentwarehouse_1498_NlpSciencelitArticleDataIn",
        "NlpSciencelitArticleDataOut": "_contentwarehouse_1499_NlpSciencelitArticleDataOut",
        "QualitySalientTermsSignalDataIn": "_contentwarehouse_1500_QualitySalientTermsSignalDataIn",
        "QualitySalientTermsSignalDataOut": "_contentwarehouse_1501_QualitySalientTermsSignalDataOut",
        "GoogleCloudContentwarehouseV1SynonymSetIn": "_contentwarehouse_1502_GoogleCloudContentwarehouseV1SynonymSetIn",
        "GoogleCloudContentwarehouseV1SynonymSetOut": "_contentwarehouse_1503_GoogleCloudContentwarehouseV1SynonymSetOut",
        "AssistantApiSettingsNotificationProfileAlloNotificationProfileIn": "_contentwarehouse_1504_AssistantApiSettingsNotificationProfileAlloNotificationProfileIn",
        "AssistantApiSettingsNotificationProfileAlloNotificationProfileOut": "_contentwarehouse_1505_AssistantApiSettingsNotificationProfileAlloNotificationProfileOut",
        "SocialGraphApiProtoImageReferenceIn": "_contentwarehouse_1506_SocialGraphApiProtoImageReferenceIn",
        "SocialGraphApiProtoImageReferenceOut": "_contentwarehouse_1507_SocialGraphApiProtoImageReferenceOut",
        "VideoPipelineViperVSIColumnDataVsiStatsIn": "_contentwarehouse_1508_VideoPipelineViperVSIColumnDataVsiStatsIn",
        "VideoPipelineViperVSIColumnDataVsiStatsOut": "_contentwarehouse_1509_VideoPipelineViperVSIColumnDataVsiStatsOut",
        "StorageGraphBfgLegalRequestMetadataIn": "_contentwarehouse_1510_StorageGraphBfgLegalRequestMetadataIn",
        "StorageGraphBfgLegalRequestMetadataOut": "_contentwarehouse_1511_StorageGraphBfgLegalRequestMetadataOut",
        "NlpSemanticParsingAnnotationEvalDataIn": "_contentwarehouse_1512_NlpSemanticParsingAnnotationEvalDataIn",
        "NlpSemanticParsingAnnotationEvalDataOut": "_contentwarehouse_1513_NlpSemanticParsingAnnotationEvalDataOut",
        "AssistantApiRecurrenceIn": "_contentwarehouse_1514_AssistantApiRecurrenceIn",
        "AssistantApiRecurrenceOut": "_contentwarehouse_1515_AssistantApiRecurrenceOut",
        "GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextIn": "_contentwarehouse_1516_GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextIn",
        "GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextOut": "_contentwarehouse_1517_GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextOut",
        "AssistantApiCoreTypesSurfaceVersionIn": "_contentwarehouse_1518_AssistantApiCoreTypesSurfaceVersionIn",
        "AssistantApiCoreTypesSurfaceVersionOut": "_contentwarehouse_1519_AssistantApiCoreTypesSurfaceVersionOut",
        "AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoIn": "_contentwarehouse_1520_AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoOut": "_contentwarehouse_1521_AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoOut",
        "VideoContentSearchCommentAnchorSetFeaturesCommentIn": "_contentwarehouse_1522_VideoContentSearchCommentAnchorSetFeaturesCommentIn",
        "VideoContentSearchCommentAnchorSetFeaturesCommentOut": "_contentwarehouse_1523_VideoContentSearchCommentAnchorSetFeaturesCommentOut",
        "NlpSemanticParsingDatetimeResolutionPropertiesIn": "_contentwarehouse_1524_NlpSemanticParsingDatetimeResolutionPropertiesIn",
        "NlpSemanticParsingDatetimeResolutionPropertiesOut": "_contentwarehouse_1525_NlpSemanticParsingDatetimeResolutionPropertiesOut",
        "RepositoryWebrefPreprocessingOriginalNamesIn": "_contentwarehouse_1526_RepositoryWebrefPreprocessingOriginalNamesIn",
        "RepositoryWebrefPreprocessingOriginalNamesOut": "_contentwarehouse_1527_RepositoryWebrefPreprocessingOriginalNamesOut",
        "AssistantLogsAllMediaStreamLogIn": "_contentwarehouse_1528_AssistantLogsAllMediaStreamLogIn",
        "AssistantLogsAllMediaStreamLogOut": "_contentwarehouse_1529_AssistantLogsAllMediaStreamLogOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataIn": "_contentwarehouse_1530_AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataOut": "_contentwarehouse_1531_AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataOut",
        "CountryGeoLocationsIn": "_contentwarehouse_1532_CountryGeoLocationsIn",
        "CountryGeoLocationsOut": "_contentwarehouse_1533_CountryGeoLocationsOut",
        "NlpSemanticParsingLocalPriceConstraintIn": "_contentwarehouse_1534_NlpSemanticParsingLocalPriceConstraintIn",
        "NlpSemanticParsingLocalPriceConstraintOut": "_contentwarehouse_1535_NlpSemanticParsingLocalPriceConstraintOut",
        "GoogleIamV1AuditConfigIn": "_contentwarehouse_1536_GoogleIamV1AuditConfigIn",
        "GoogleIamV1AuditConfigOut": "_contentwarehouse_1537_GoogleIamV1AuditConfigOut",
        "GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestIn": "_contentwarehouse_1538_GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestIn",
        "GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestOut": "_contentwarehouse_1539_GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestOut",
        "IndexingDocjoinerAnchorStatisticsIn": "_contentwarehouse_1540_IndexingDocjoinerAnchorStatisticsIn",
        "IndexingDocjoinerAnchorStatisticsOut": "_contentwarehouse_1541_IndexingDocjoinerAnchorStatisticsOut",
        "NlpSemanticParsingLocalGcidConstraintIn": "_contentwarehouse_1542_NlpSemanticParsingLocalGcidConstraintIn",
        "NlpSemanticParsingLocalGcidConstraintOut": "_contentwarehouse_1543_NlpSemanticParsingLocalGcidConstraintOut",
        "NlpSemanticParsingModelsMediaAudiobookInfoIn": "_contentwarehouse_1544_NlpSemanticParsingModelsMediaAudiobookInfoIn",
        "NlpSemanticParsingModelsMediaAudiobookInfoOut": "_contentwarehouse_1545_NlpSemanticParsingModelsMediaAudiobookInfoOut",
        "AssistantApiSpeechCapabilitiesIn": "_contentwarehouse_1546_AssistantApiSpeechCapabilitiesIn",
        "AssistantApiSpeechCapabilitiesOut": "_contentwarehouse_1547_AssistantApiSpeechCapabilitiesOut",
        "AppsPeopleOzExternalMergedpeopleapiPronounIn": "_contentwarehouse_1548_AppsPeopleOzExternalMergedpeopleapiPronounIn",
        "AppsPeopleOzExternalMergedpeopleapiPronounOut": "_contentwarehouse_1549_AppsPeopleOzExternalMergedpeopleapiPronounOut",
        "KnowledgeAnswersOpaqueLocationTypeIn": "_contentwarehouse_1550_KnowledgeAnswersOpaqueLocationTypeIn",
        "KnowledgeAnswersOpaqueLocationTypeOut": "_contentwarehouse_1551_KnowledgeAnswersOpaqueLocationTypeOut",
        "IndexingUrlPatternUrlTreeUrlTreeDebugInfoIn": "_contentwarehouse_1552_IndexingUrlPatternUrlTreeUrlTreeDebugInfoIn",
        "IndexingUrlPatternUrlTreeUrlTreeDebugInfoOut": "_contentwarehouse_1553_IndexingUrlPatternUrlTreeUrlTreeDebugInfoOut",
        "MustangReposWwwSnippetsCandidateFeatureIn": "_contentwarehouse_1554_MustangReposWwwSnippetsCandidateFeatureIn",
        "MustangReposWwwSnippetsCandidateFeatureOut": "_contentwarehouse_1555_MustangReposWwwSnippetsCandidateFeatureOut",
        "NlpSemanticParsingModelsShoppingAssistantProductIn": "_contentwarehouse_1556_NlpSemanticParsingModelsShoppingAssistantProductIn",
        "NlpSemanticParsingModelsShoppingAssistantProductOut": "_contentwarehouse_1557_NlpSemanticParsingModelsShoppingAssistantProductOut",
        "TrawlerFetchStatusIn": "_contentwarehouse_1558_TrawlerFetchStatusIn",
        "TrawlerFetchStatusOut": "_contentwarehouse_1559_TrawlerFetchStatusOut",
        "NlpSaftMentionResolutionIn": "_contentwarehouse_1560_NlpSaftMentionResolutionIn",
        "NlpSaftMentionResolutionOut": "_contentwarehouse_1561_NlpSaftMentionResolutionOut",
        "IndexingEmbeddedContentFetchHostCountCounterIn": "_contentwarehouse_1562_IndexingEmbeddedContentFetchHostCountCounterIn",
        "IndexingEmbeddedContentFetchHostCountCounterOut": "_contentwarehouse_1563_IndexingEmbeddedContentFetchHostCountCounterOut",
        "EmbedsPackagingServiceClientIn": "_contentwarehouse_1564_EmbedsPackagingServiceClientIn",
        "EmbedsPackagingServiceClientOut": "_contentwarehouse_1565_EmbedsPackagingServiceClientOut",
        "LocalWWWInfoWrapptorItemIn": "_contentwarehouse_1566_LocalWWWInfoWrapptorItemIn",
        "LocalWWWInfoWrapptorItemOut": "_contentwarehouse_1567_LocalWWWInfoWrapptorItemOut",
        "AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoIn": "_contentwarehouse_1568_AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoOut": "_contentwarehouse_1569_AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoOut",
        "AssistantGroundingRankerProviderGroundingProviderFeaturesIn": "_contentwarehouse_1570_AssistantGroundingRankerProviderGroundingProviderFeaturesIn",
        "AssistantGroundingRankerProviderGroundingProviderFeaturesOut": "_contentwarehouse_1571_AssistantGroundingRankerProviderGroundingProviderFeaturesOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeIn": "_contentwarehouse_1572_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeOut": "_contentwarehouse_1573_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeOut",
        "NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoIn": "_contentwarehouse_1574_NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoIn",
        "NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoOut": "_contentwarehouse_1575_NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoOut",
        "RepositoryWebrefDetailedEntityScoresIn": "_contentwarehouse_1576_RepositoryWebrefDetailedEntityScoresIn",
        "RepositoryWebrefDetailedEntityScoresOut": "_contentwarehouse_1577_RepositoryWebrefDetailedEntityScoresOut",
        "AssistantLogsReminderLogIn": "_contentwarehouse_1578_AssistantLogsReminderLogIn",
        "AssistantLogsReminderLogOut": "_contentwarehouse_1579_AssistantLogsReminderLogOut",
        "SecurityCredentialsContactGroupProtoIn": "_contentwarehouse_1580_SecurityCredentialsContactGroupProtoIn",
        "SecurityCredentialsContactGroupProtoOut": "_contentwarehouse_1581_SecurityCredentialsContactGroupProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiLegacyFieldsIn": "_contentwarehouse_1582_AppsPeopleOzExternalMergedpeopleapiLegacyFieldsIn",
        "AppsPeopleOzExternalMergedpeopleapiLegacyFieldsOut": "_contentwarehouse_1583_AppsPeopleOzExternalMergedpeopleapiLegacyFieldsOut",
        "NlpSemanticParsingLocalVisitHistoryConstraintIn": "_contentwarehouse_1584_NlpSemanticParsingLocalVisitHistoryConstraintIn",
        "NlpSemanticParsingLocalVisitHistoryConstraintOut": "_contentwarehouse_1585_NlpSemanticParsingLocalVisitHistoryConstraintOut",
        "HtmlrenderWebkitHeadlessProtoResourceIn": "_contentwarehouse_1586_HtmlrenderWebkitHeadlessProtoResourceIn",
        "HtmlrenderWebkitHeadlessProtoResourceOut": "_contentwarehouse_1587_HtmlrenderWebkitHeadlessProtoResourceOut",
        "AssistantApiCameraReceiverCapabilitiesIn": "_contentwarehouse_1588_AssistantApiCameraReceiverCapabilitiesIn",
        "AssistantApiCameraReceiverCapabilitiesOut": "_contentwarehouse_1589_AssistantApiCameraReceiverCapabilitiesOut",
        "GeostoreServicedStopProtoIn": "_contentwarehouse_1590_GeostoreServicedStopProtoIn",
        "GeostoreServicedStopProtoOut": "_contentwarehouse_1591_GeostoreServicedStopProtoOut",
        "AssistantVerticalsHomeautomationProtoConciergeFeaturesIn": "_contentwarehouse_1592_AssistantVerticalsHomeautomationProtoConciergeFeaturesIn",
        "AssistantVerticalsHomeautomationProtoConciergeFeaturesOut": "_contentwarehouse_1593_AssistantVerticalsHomeautomationProtoConciergeFeaturesOut",
        "WirelessTranscoderFetchFetchSourceInfoIn": "_contentwarehouse_1594_WirelessTranscoderFetchFetchSourceInfoIn",
        "WirelessTranscoderFetchFetchSourceInfoOut": "_contentwarehouse_1595_WirelessTranscoderFetchFetchSourceInfoOut",
        "GoogleCloudDocumentaiV1DocumentPageMatrixIn": "_contentwarehouse_1596_GoogleCloudDocumentaiV1DocumentPageMatrixIn",
        "GoogleCloudDocumentaiV1DocumentPageMatrixOut": "_contentwarehouse_1597_GoogleCloudDocumentaiV1DocumentPageMatrixOut",
        "GeostoreTelephoneProtoIn": "_contentwarehouse_1598_GeostoreTelephoneProtoIn",
        "GeostoreTelephoneProtoOut": "_contentwarehouse_1599_GeostoreTelephoneProtoOut",
        "LocalsearchChainIdIn": "_contentwarehouse_1600_LocalsearchChainIdIn",
        "LocalsearchChainIdOut": "_contentwarehouse_1601_LocalsearchChainIdOut",
        "AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigIn": "_contentwarehouse_1602_AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigIn",
        "AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigOut": "_contentwarehouse_1603_AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigOut",
        "RepositoryWebrefWikipediaGeocodeIn": "_contentwarehouse_1604_RepositoryWebrefWikipediaGeocodeIn",
        "RepositoryWebrefWikipediaGeocodeOut": "_contentwarehouse_1605_RepositoryWebrefWikipediaGeocodeOut",
        "AppsPeopleOzExternalMergedpeopleapiRelationshipInterestIn": "_contentwarehouse_1606_AppsPeopleOzExternalMergedpeopleapiRelationshipInterestIn",
        "AppsPeopleOzExternalMergedpeopleapiRelationshipInterestOut": "_contentwarehouse_1607_AppsPeopleOzExternalMergedpeopleapiRelationshipInterestOut",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn": "_contentwarehouse_1608_AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut": "_contentwarehouse_1609_AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut",
        "VideoAssetsVenomSettingsIn": "_contentwarehouse_1610_VideoAssetsVenomSettingsIn",
        "VideoAssetsVenomSettingsOut": "_contentwarehouse_1611_VideoAssetsVenomSettingsOut",
        "NlpSemanticParsingQRefAnnotationSubClusterIn": "_contentwarehouse_1612_NlpSemanticParsingQRefAnnotationSubClusterIn",
        "NlpSemanticParsingQRefAnnotationSubClusterOut": "_contentwarehouse_1613_NlpSemanticParsingQRefAnnotationSubClusterOut",
        "KnowledgeAnswersNormalizedStringTypeIn": "_contentwarehouse_1614_KnowledgeAnswersNormalizedStringTypeIn",
        "KnowledgeAnswersNormalizedStringTypeOut": "_contentwarehouse_1615_KnowledgeAnswersNormalizedStringTypeOut",
        "YoutubeCommentsRankingYouTubeCommentTextEmbeddingIn": "_contentwarehouse_1616_YoutubeCommentsRankingYouTubeCommentTextEmbeddingIn",
        "YoutubeCommentsRankingYouTubeCommentTextEmbeddingOut": "_contentwarehouse_1617_YoutubeCommentsRankingYouTubeCommentTextEmbeddingOut",
        "NlpSciencelitMeshHeadingIn": "_contentwarehouse_1618_NlpSciencelitMeshHeadingIn",
        "NlpSciencelitMeshHeadingOut": "_contentwarehouse_1619_NlpSciencelitMeshHeadingOut",
        "CompositeDocIn": "_contentwarehouse_1620_CompositeDocIn",
        "CompositeDocOut": "_contentwarehouse_1621_CompositeDocOut",
        "HtmlrenderWebkitHeadlessProtoRenderResponseIn": "_contentwarehouse_1622_HtmlrenderWebkitHeadlessProtoRenderResponseIn",
        "HtmlrenderWebkitHeadlessProtoRenderResponseOut": "_contentwarehouse_1623_HtmlrenderWebkitHeadlessProtoRenderResponseOut",
        "GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakIn": "_contentwarehouse_1624_GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakIn",
        "GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakOut": "_contentwarehouse_1625_GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakOut",
        "TrawlerSSLCertificateInfoIn": "_contentwarehouse_1626_TrawlerSSLCertificateInfoIn",
        "TrawlerSSLCertificateInfoOut": "_contentwarehouse_1627_TrawlerSSLCertificateInfoOut",
        "VideoContentSearchQbstTermsOverlapFeaturesIn": "_contentwarehouse_1628_VideoContentSearchQbstTermsOverlapFeaturesIn",
        "VideoContentSearchQbstTermsOverlapFeaturesOut": "_contentwarehouse_1629_VideoContentSearchQbstTermsOverlapFeaturesOut",
        "AssistantApiSettingsHomeGraphDataIn": "_contentwarehouse_1630_AssistantApiSettingsHomeGraphDataIn",
        "AssistantApiSettingsHomeGraphDataOut": "_contentwarehouse_1631_AssistantApiSettingsHomeGraphDataOut",
        "AssistantApiAssistantContinuedPresenceSupportIn": "_contentwarehouse_1632_AssistantApiAssistantContinuedPresenceSupportIn",
        "AssistantApiAssistantContinuedPresenceSupportOut": "_contentwarehouse_1633_AssistantApiAssistantContinuedPresenceSupportOut",
        "AssistantDevicesPlatformProtoProviderFulfillCapabilityIn": "_contentwarehouse_1634_AssistantDevicesPlatformProtoProviderFulfillCapabilityIn",
        "AssistantDevicesPlatformProtoProviderFulfillCapabilityOut": "_contentwarehouse_1635_AssistantDevicesPlatformProtoProviderFulfillCapabilityOut",
        "TrawlerFetchReplyDataIn": "_contentwarehouse_1636_TrawlerFetchReplyDataIn",
        "TrawlerFetchReplyDataOut": "_contentwarehouse_1637_TrawlerFetchReplyDataOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextIn": "_contentwarehouse_1638_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextOut": "_contentwarehouse_1639_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextOut",
        "VideoFileContentLightLevelIn": "_contentwarehouse_1640_VideoFileContentLightLevelIn",
        "VideoFileContentLightLevelOut": "_contentwarehouse_1641_VideoFileContentLightLevelOut",
        "S3AudioLanguageS3AudioLanguageIn": "_contentwarehouse_1642_S3AudioLanguageS3AudioLanguageIn",
        "S3AudioLanguageS3AudioLanguageOut": "_contentwarehouse_1643_S3AudioLanguageS3AudioLanguageOut",
        "VideoContentSearchAspectIn": "_contentwarehouse_1644_VideoContentSearchAspectIn",
        "VideoContentSearchAspectOut": "_contentwarehouse_1645_VideoContentSearchAspectOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn": "_contentwarehouse_1646_AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut": "_contentwarehouse_1647_AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut",
        "GeostoreInternalSegmentProtoIn": "_contentwarehouse_1648_GeostoreInternalSegmentProtoIn",
        "GeostoreInternalSegmentProtoOut": "_contentwarehouse_1649_GeostoreInternalSegmentProtoOut",
        "GoogleCloudContentwarehouseV1FileTypeFilterIn": "_contentwarehouse_1650_GoogleCloudContentwarehouseV1FileTypeFilterIn",
        "GoogleCloudContentwarehouseV1FileTypeFilterOut": "_contentwarehouse_1651_GoogleCloudContentwarehouseV1FileTypeFilterOut",
        "ChatBotPlatformFireballIdIn": "_contentwarehouse_1652_ChatBotPlatformFireballIdIn",
        "ChatBotPlatformFireballIdOut": "_contentwarehouse_1653_ChatBotPlatformFireballIdOut",
        "GoogleAssistantAccessoryV1AudioOutConfigIn": "_contentwarehouse_1654_GoogleAssistantAccessoryV1AudioOutConfigIn",
        "GoogleAssistantAccessoryV1AudioOutConfigOut": "_contentwarehouse_1655_GoogleAssistantAccessoryV1AudioOutConfigOut",
        "VideoContentSearchOnScreenTextClusterFeatureIn": "_contentwarehouse_1656_VideoContentSearchOnScreenTextClusterFeatureIn",
        "VideoContentSearchOnScreenTextClusterFeatureOut": "_contentwarehouse_1657_VideoContentSearchOnScreenTextClusterFeatureOut",
        "ImageRepositoryFramePerdocIn": "_contentwarehouse_1658_ImageRepositoryFramePerdocIn",
        "ImageRepositoryFramePerdocOut": "_contentwarehouse_1659_ImageRepositoryFramePerdocOut",
        "SocialGraphApiProtoPronounDataIn": "_contentwarehouse_1660_SocialGraphApiProtoPronounDataIn",
        "SocialGraphApiProtoPronounDataOut": "_contentwarehouse_1661_SocialGraphApiProtoPronounDataOut",
        "GoodocSemanticLabelContentLinkInVolumeTargetIn": "_contentwarehouse_1662_GoodocSemanticLabelContentLinkInVolumeTargetIn",
        "GoodocSemanticLabelContentLinkInVolumeTargetOut": "_contentwarehouse_1663_GoodocSemanticLabelContentLinkInVolumeTargetOut",
        "GeostoreGradeLevelProtoIn": "_contentwarehouse_1664_GeostoreGradeLevelProtoIn",
        "GeostoreGradeLevelProtoOut": "_contentwarehouse_1665_GeostoreGradeLevelProtoOut",
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataIn": "_contentwarehouse_1666_SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataIn",
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataOut": "_contentwarehouse_1667_SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataOut",
        "GeostoreFeatureMetadataProtoIn": "_contentwarehouse_1668_GeostoreFeatureMetadataProtoIn",
        "GeostoreFeatureMetadataProtoOut": "_contentwarehouse_1669_GeostoreFeatureMetadataProtoOut",
        "KnowledgeGraphQualifierSetIn": "_contentwarehouse_1670_KnowledgeGraphQualifierSetIn",
        "KnowledgeGraphQualifierSetOut": "_contentwarehouse_1671_KnowledgeGraphQualifierSetOut",
        "RepositoryWebrefAnnotationStatsPerTypeIn": "_contentwarehouse_1672_RepositoryWebrefAnnotationStatsPerTypeIn",
        "RepositoryWebrefAnnotationStatsPerTypeOut": "_contentwarehouse_1673_RepositoryWebrefAnnotationStatsPerTypeOut",
        "ResearchScienceSearchScholarlyArticleIn": "_contentwarehouse_1674_ResearchScienceSearchScholarlyArticleIn",
        "ResearchScienceSearchScholarlyArticleOut": "_contentwarehouse_1675_ResearchScienceSearchScholarlyArticleOut",
        "GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoIn": "_contentwarehouse_1676_GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoIn",
        "GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoOut": "_contentwarehouse_1677_GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoOut",
        "LocalWWWInfoPhoneIn": "_contentwarehouse_1678_LocalWWWInfoPhoneIn",
        "LocalWWWInfoPhoneOut": "_contentwarehouse_1679_LocalWWWInfoPhoneOut",
        "GoogleRpcStatusIn": "_contentwarehouse_1680_GoogleRpcStatusIn",
        "GoogleRpcStatusOut": "_contentwarehouse_1681_GoogleRpcStatusOut",
        "GoogleCloudContentwarehouseV1DateTimeArrayIn": "_contentwarehouse_1682_GoogleCloudContentwarehouseV1DateTimeArrayIn",
        "GoogleCloudContentwarehouseV1DateTimeArrayOut": "_contentwarehouse_1683_GoogleCloudContentwarehouseV1DateTimeArrayOut",
        "NlpSemanticParsingDatetimeTimeZoneIn": "_contentwarehouse_1684_NlpSemanticParsingDatetimeTimeZoneIn",
        "NlpSemanticParsingDatetimeTimeZoneOut": "_contentwarehouse_1685_NlpSemanticParsingDatetimeTimeZoneOut",
        "ImageMustangShoppingOfferIn": "_contentwarehouse_1686_ImageMustangShoppingOfferIn",
        "ImageMustangShoppingOfferOut": "_contentwarehouse_1687_ImageMustangShoppingOfferOut",
        "TrawlerCrawlTimesIn": "_contentwarehouse_1688_TrawlerCrawlTimesIn",
        "TrawlerCrawlTimesOut": "_contentwarehouse_1689_TrawlerCrawlTimesOut",
        "ResearchScienceSearchCatalogIn": "_contentwarehouse_1690_ResearchScienceSearchCatalogIn",
        "ResearchScienceSearchCatalogOut": "_contentwarehouse_1691_ResearchScienceSearchCatalogOut",
        "NlpMeaningMeaningRemodelingsIn": "_contentwarehouse_1692_NlpMeaningMeaningRemodelingsIn",
        "NlpMeaningMeaningRemodelingsOut": "_contentwarehouse_1693_NlpMeaningMeaningRemodelingsOut",
        "GeostorePedestrianCrossingProtoIn": "_contentwarehouse_1694_GeostorePedestrianCrossingProtoIn",
        "GeostorePedestrianCrossingProtoOut": "_contentwarehouse_1695_GeostorePedestrianCrossingProtoOut",
        "AssistantDevicesPlatformProtoSupportedDeviceOpsIn": "_contentwarehouse_1696_AssistantDevicesPlatformProtoSupportedDeviceOpsIn",
        "AssistantDevicesPlatformProtoSupportedDeviceOpsOut": "_contentwarehouse_1697_AssistantDevicesPlatformProtoSupportedDeviceOpsOut",
        "HtmlrenderWebkitHeadlessProtoBoxIn": "_contentwarehouse_1698_HtmlrenderWebkitHeadlessProtoBoxIn",
        "HtmlrenderWebkitHeadlessProtoBoxOut": "_contentwarehouse_1699_HtmlrenderWebkitHeadlessProtoBoxOut",
        "FatcatCompactTaxonomicClassificationCategoryIn": "_contentwarehouse_1700_FatcatCompactTaxonomicClassificationCategoryIn",
        "FatcatCompactTaxonomicClassificationCategoryOut": "_contentwarehouse_1701_FatcatCompactTaxonomicClassificationCategoryOut",
        "HtmlrenderWebkitHeadlessProtoInitialLoadEventIn": "_contentwarehouse_1702_HtmlrenderWebkitHeadlessProtoInitialLoadEventIn",
        "HtmlrenderWebkitHeadlessProtoInitialLoadEventOut": "_contentwarehouse_1703_HtmlrenderWebkitHeadlessProtoInitialLoadEventOut",
        "GeostoreAttributeProtoIn": "_contentwarehouse_1704_GeostoreAttributeProtoIn",
        "GeostoreAttributeProtoOut": "_contentwarehouse_1705_GeostoreAttributeProtoOut",
        "KnowledgeAnswersIntentQueryRelatednessSignalsIn": "_contentwarehouse_1706_KnowledgeAnswersIntentQueryRelatednessSignalsIn",
        "KnowledgeAnswersIntentQueryRelatednessSignalsOut": "_contentwarehouse_1707_KnowledgeAnswersIntentQueryRelatednessSignalsOut",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberIn": "_contentwarehouse_1708_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberIn",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberOut": "_contentwarehouse_1709_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberOut",
        "AssistantApiCoreTypesAndroidAppInfoActivityInfoIn": "_contentwarehouse_1710_AssistantApiCoreTypesAndroidAppInfoActivityInfoIn",
        "AssistantApiCoreTypesAndroidAppInfoActivityInfoOut": "_contentwarehouse_1711_AssistantApiCoreTypesAndroidAppInfoActivityInfoOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaIn": "_contentwarehouse_1712_KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaOut": "_contentwarehouse_1713_KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaOut",
        "ResearchScamV3RestrictIn": "_contentwarehouse_1714_ResearchScamV3RestrictIn",
        "ResearchScamV3RestrictOut": "_contentwarehouse_1715_ResearchScamV3RestrictOut",
        "AssistantApiCoreTypesCalendarEventWrapperIn": "_contentwarehouse_1716_AssistantApiCoreTypesCalendarEventWrapperIn",
        "AssistantApiCoreTypesCalendarEventWrapperOut": "_contentwarehouse_1717_AssistantApiCoreTypesCalendarEventWrapperOut",
        "GoogleAssistantEmbeddedV1TimerIn": "_contentwarehouse_1718_GoogleAssistantEmbeddedV1TimerIn",
        "GoogleAssistantEmbeddedV1TimerOut": "_contentwarehouse_1719_GoogleAssistantEmbeddedV1TimerOut",
        "ShoppingWebentityShoppingAnnotationProductRatingIn": "_contentwarehouse_1720_ShoppingWebentityShoppingAnnotationProductRatingIn",
        "ShoppingWebentityShoppingAnnotationProductRatingOut": "_contentwarehouse_1721_ShoppingWebentityShoppingAnnotationProductRatingOut",
        "GoogleCloudContentwarehouseV1GetDocumentRequestIn": "_contentwarehouse_1722_GoogleCloudContentwarehouseV1GetDocumentRequestIn",
        "GoogleCloudContentwarehouseV1GetDocumentRequestOut": "_contentwarehouse_1723_GoogleCloudContentwarehouseV1GetDocumentRequestOut",
        "KnowledgeAnswersMarkerStateOfAffairsIn": "_contentwarehouse_1724_KnowledgeAnswersMarkerStateOfAffairsIn",
        "KnowledgeAnswersMarkerStateOfAffairsOut": "_contentwarehouse_1725_KnowledgeAnswersMarkerStateOfAffairsOut",
        "BlobstoreBlobRefIn": "_contentwarehouse_1726_BlobstoreBlobRefIn",
        "BlobstoreBlobRefOut": "_contentwarehouse_1727_BlobstoreBlobRefOut",
        "AssistantGroundingRankerLaaFeaturesIn": "_contentwarehouse_1728_AssistantGroundingRankerLaaFeaturesIn",
        "AssistantGroundingRankerLaaFeaturesOut": "_contentwarehouse_1729_AssistantGroundingRankerLaaFeaturesOut",
        "NlpSemanticParsingLocalCompoundLocationIn": "_contentwarehouse_1730_NlpSemanticParsingLocalCompoundLocationIn",
        "NlpSemanticParsingLocalCompoundLocationOut": "_contentwarehouse_1731_NlpSemanticParsingLocalCompoundLocationOut",
        "VideoFileMasteringDisplayMetadataIn": "_contentwarehouse_1732_VideoFileMasteringDisplayMetadataIn",
        "VideoFileMasteringDisplayMetadataOut": "_contentwarehouse_1733_VideoFileMasteringDisplayMetadataOut",
        "DrishtiVesperMovingThumbnailScoreComponentsIn": "_contentwarehouse_1734_DrishtiVesperMovingThumbnailScoreComponentsIn",
        "DrishtiVesperMovingThumbnailScoreComponentsOut": "_contentwarehouse_1735_DrishtiVesperMovingThumbnailScoreComponentsOut",
        "SnippetExtraInfoSnippetsBrainModelInfoIn": "_contentwarehouse_1736_SnippetExtraInfoSnippetsBrainModelInfoIn",
        "SnippetExtraInfoSnippetsBrainModelInfoOut": "_contentwarehouse_1737_SnippetExtraInfoSnippetsBrainModelInfoOut",
        "ImageRepositoryApiXtagListIn": "_contentwarehouse_1738_ImageRepositoryApiXtagListIn",
        "ImageRepositoryApiXtagListOut": "_contentwarehouse_1739_ImageRepositoryApiXtagListOut",
        "SentenceBoundaryAnnotationsInstanceIn": "_contentwarehouse_1740_SentenceBoundaryAnnotationsInstanceIn",
        "SentenceBoundaryAnnotationsInstanceOut": "_contentwarehouse_1741_SentenceBoundaryAnnotationsInstanceOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn": "_contentwarehouse_1742_KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut": "_contentwarehouse_1743_KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut",
        "AbuseiamVideoReviewDataIn": "_contentwarehouse_1744_AbuseiamVideoReviewDataIn",
        "AbuseiamVideoReviewDataOut": "_contentwarehouse_1745_AbuseiamVideoReviewDataOut",
        "GoogleTypeTimeOfDayIn": "_contentwarehouse_1746_GoogleTypeTimeOfDayIn",
        "GoogleTypeTimeOfDayOut": "_contentwarehouse_1747_GoogleTypeTimeOfDayOut",
        "IndexingMobileInterstitialsProtoDesktopInterstitialsIn": "_contentwarehouse_1748_IndexingMobileInterstitialsProtoDesktopInterstitialsIn",
        "IndexingMobileInterstitialsProtoDesktopInterstitialsOut": "_contentwarehouse_1749_IndexingMobileInterstitialsProtoDesktopInterstitialsOut",
        "NlpSaftMentionIn": "_contentwarehouse_1750_NlpSaftMentionIn",
        "NlpSaftMentionOut": "_contentwarehouse_1751_NlpSaftMentionOut",
        "MediaIndexVideoFramesIn": "_contentwarehouse_1752_MediaIndexVideoFramesIn",
        "MediaIndexVideoFramesOut": "_contentwarehouse_1753_MediaIndexVideoFramesOut",
        "SnippetExtraInfoIn": "_contentwarehouse_1754_SnippetExtraInfoIn",
        "SnippetExtraInfoOut": "_contentwarehouse_1755_SnippetExtraInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodIn": "_contentwarehouse_1756_AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodIn",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodOut": "_contentwarehouse_1757_AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodOut",
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationIn": "_contentwarehouse_1758_YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationIn",
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationOut": "_contentwarehouse_1759_YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationOut",
        "LongStructuredSnippetIn": "_contentwarehouse_1760_LongStructuredSnippetIn",
        "LongStructuredSnippetOut": "_contentwarehouse_1761_LongStructuredSnippetOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryIn": "_contentwarehouse_1762_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryOut": "_contentwarehouse_1763_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryOut",
        "KnowledgeAnswersOpaqueDeviceTypeIn": "_contentwarehouse_1764_KnowledgeAnswersOpaqueDeviceTypeIn",
        "KnowledgeAnswersOpaqueDeviceTypeOut": "_contentwarehouse_1765_KnowledgeAnswersOpaqueDeviceTypeOut",
        "QualitySherlockKnexAnnotationIn": "_contentwarehouse_1766_QualitySherlockKnexAnnotationIn",
        "QualitySherlockKnexAnnotationOut": "_contentwarehouse_1767_QualitySherlockKnexAnnotationOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn": "_contentwarehouse_1768_AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut": "_contentwarehouse_1769_AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut",
        "RepositoryWebrefWebrefEntityIn": "_contentwarehouse_1770_RepositoryWebrefWebrefEntityIn",
        "RepositoryWebrefWebrefEntityOut": "_contentwarehouse_1771_RepositoryWebrefWebrefEntityOut",
        "QualityShoppingShoppingAttachmentPBlockImageInfoIn": "_contentwarehouse_1772_QualityShoppingShoppingAttachmentPBlockImageInfoIn",
        "QualityShoppingShoppingAttachmentPBlockImageInfoOut": "_contentwarehouse_1773_QualityShoppingShoppingAttachmentPBlockImageInfoOut",
        "AssistantVerticalsCommonContactMatchSignalIn": "_contentwarehouse_1774_AssistantVerticalsCommonContactMatchSignalIn",
        "AssistantVerticalsCommonContactMatchSignalOut": "_contentwarehouse_1775_AssistantVerticalsCommonContactMatchSignalOut",
        "AssistantDevicesPlatformProtoProviderOpenCapabilityIn": "_contentwarehouse_1776_AssistantDevicesPlatformProtoProviderOpenCapabilityIn",
        "AssistantDevicesPlatformProtoProviderOpenCapabilityOut": "_contentwarehouse_1777_AssistantDevicesPlatformProtoProviderOpenCapabilityOut",
        "NetFabricRpcVirtualNetworkIdIn": "_contentwarehouse_1778_NetFabricRpcVirtualNetworkIdIn",
        "NetFabricRpcVirtualNetworkIdOut": "_contentwarehouse_1779_NetFabricRpcVirtualNetworkIdOut",
        "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoIn": "_contentwarehouse_1780_AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoIn",
        "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoOut": "_contentwarehouse_1781_AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoOut",
        "ImageSearchImageIndexingInfoIn": "_contentwarehouse_1782_ImageSearchImageIndexingInfoIn",
        "ImageSearchImageIndexingInfoOut": "_contentwarehouse_1783_ImageSearchImageIndexingInfoOut",
        "RepositoryWebrefEntityDebugInfoIn": "_contentwarehouse_1784_RepositoryWebrefEntityDebugInfoIn",
        "RepositoryWebrefEntityDebugInfoOut": "_contentwarehouse_1785_RepositoryWebrefEntityDebugInfoOut",
        "AppsDynamiteSharedOrganizationInfoCustomerInfoIn": "_contentwarehouse_1786_AppsDynamiteSharedOrganizationInfoCustomerInfoIn",
        "AppsDynamiteSharedOrganizationInfoCustomerInfoOut": "_contentwarehouse_1787_AppsDynamiteSharedOrganizationInfoCustomerInfoOut",
        "NlpSemanticParsingLocalQualityConstraintIn": "_contentwarehouse_1788_NlpSemanticParsingLocalQualityConstraintIn",
        "NlpSemanticParsingLocalQualityConstraintOut": "_contentwarehouse_1789_NlpSemanticParsingLocalQualityConstraintOut",
        "YoutubeDiscoveryLegosLegosFormatRelationshipIn": "_contentwarehouse_1790_YoutubeDiscoveryLegosLegosFormatRelationshipIn",
        "YoutubeDiscoveryLegosLegosFormatRelationshipOut": "_contentwarehouse_1791_YoutubeDiscoveryLegosLegosFormatRelationshipOut",
        "ImageContentFlowProtoProdIn": "_contentwarehouse_1792_ImageContentFlowProtoProdIn",
        "ImageContentFlowProtoProdOut": "_contentwarehouse_1793_ImageContentFlowProtoProdOut",
        "HtmlrenderWebkitHeadlessProtoDOMStorageItemIn": "_contentwarehouse_1794_HtmlrenderWebkitHeadlessProtoDOMStorageItemIn",
        "HtmlrenderWebkitHeadlessProtoDOMStorageItemOut": "_contentwarehouse_1795_HtmlrenderWebkitHeadlessProtoDOMStorageItemOut",
        "GDocumentBaseContentIn": "_contentwarehouse_1796_GDocumentBaseContentIn",
        "GDocumentBaseContentOut": "_contentwarehouse_1797_GDocumentBaseContentOut",
        "GoogleAssistantAccessoryV1ScreenOutConfigDimensionsIn": "_contentwarehouse_1798_GoogleAssistantAccessoryV1ScreenOutConfigDimensionsIn",
        "GoogleAssistantAccessoryV1ScreenOutConfigDimensionsOut": "_contentwarehouse_1799_GoogleAssistantAccessoryV1ScreenOutConfigDimensionsOut",
        "LocalWWWInfoIn": "_contentwarehouse_1800_LocalWWWInfoIn",
        "LocalWWWInfoOut": "_contentwarehouse_1801_LocalWWWInfoOut",
        "HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn": "_contentwarehouse_1802_HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn",
        "HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut": "_contentwarehouse_1803_HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut",
        "KnowledgeAnswersPlexityRequirementIn": "_contentwarehouse_1804_KnowledgeAnswersPlexityRequirementIn",
        "KnowledgeAnswersPlexityRequirementOut": "_contentwarehouse_1805_KnowledgeAnswersPlexityRequirementOut",
        "NlpSemanticParsingDatetimeTargetToFetchIn": "_contentwarehouse_1806_NlpSemanticParsingDatetimeTargetToFetchIn",
        "NlpSemanticParsingDatetimeTargetToFetchOut": "_contentwarehouse_1807_NlpSemanticParsingDatetimeTargetToFetchOut",
        "MapsQualitySpecialWordsProtoIn": "_contentwarehouse_1808_MapsQualitySpecialWordsProtoIn",
        "MapsQualitySpecialWordsProtoOut": "_contentwarehouse_1809_MapsQualitySpecialWordsProtoOut",
        "VideoContentSearchVideoAnchorRatingScoreIn": "_contentwarehouse_1810_VideoContentSearchVideoAnchorRatingScoreIn",
        "VideoContentSearchVideoAnchorRatingScoreOut": "_contentwarehouse_1811_VideoContentSearchVideoAnchorRatingScoreOut",
        "AppsPeopleActivityBackendDestinationStreamIn": "_contentwarehouse_1812_AppsPeopleActivityBackendDestinationStreamIn",
        "AppsPeopleActivityBackendDestinationStreamOut": "_contentwarehouse_1813_AppsPeopleActivityBackendDestinationStreamOut",
        "QualityVidyaVideoLanguageVideoLanguageIn": "_contentwarehouse_1814_QualityVidyaVideoLanguageVideoLanguageIn",
        "QualityVidyaVideoLanguageVideoLanguageOut": "_contentwarehouse_1815_QualityVidyaVideoLanguageVideoLanguageOut",
        "FocusBackendDeviceContactIdIn": "_contentwarehouse_1816_FocusBackendDeviceContactIdIn",
        "FocusBackendDeviceContactIdOut": "_contentwarehouse_1817_FocusBackendDeviceContactIdOut",
        "KnowledgeAnswersOpaqueMessageNotificationTypeIn": "_contentwarehouse_1818_KnowledgeAnswersOpaqueMessageNotificationTypeIn",
        "KnowledgeAnswersOpaqueMessageNotificationTypeOut": "_contentwarehouse_1819_KnowledgeAnswersOpaqueMessageNotificationTypeOut",
        "AppsPeopleOzExternalMergedpeopleapiGenderIn": "_contentwarehouse_1820_AppsPeopleOzExternalMergedpeopleapiGenderIn",
        "AppsPeopleOzExternalMergedpeopleapiGenderOut": "_contentwarehouse_1821_AppsPeopleOzExternalMergedpeopleapiGenderOut",
        "LegalPersonIn": "_contentwarehouse_1822_LegalPersonIn",
        "LegalPersonOut": "_contentwarehouse_1823_LegalPersonOut",
        "KnowledgeAnswersOpaqueCalendarEventWrapperTypeIn": "_contentwarehouse_1824_KnowledgeAnswersOpaqueCalendarEventWrapperTypeIn",
        "KnowledgeAnswersOpaqueCalendarEventWrapperTypeOut": "_contentwarehouse_1825_KnowledgeAnswersOpaqueCalendarEventWrapperTypeOut",
        "AssistantApiAppControlSupportIn": "_contentwarehouse_1826_AssistantApiAppControlSupportIn",
        "AssistantApiAppControlSupportOut": "_contentwarehouse_1827_AssistantApiAppControlSupportOut",
        "ResearchScamQueryMetadataIn": "_contentwarehouse_1828_ResearchScamQueryMetadataIn",
        "ResearchScamQueryMetadataOut": "_contentwarehouse_1829_ResearchScamQueryMetadataOut",
        "GeostoreSchoolDistrictProtoIn": "_contentwarehouse_1830_GeostoreSchoolDistrictProtoIn",
        "GeostoreSchoolDistrictProtoOut": "_contentwarehouse_1831_GeostoreSchoolDistrictProtoOut",
        "AssistantDevicesPlatformProtoMediaPreviousCapabilityIn": "_contentwarehouse_1832_AssistantDevicesPlatformProtoMediaPreviousCapabilityIn",
        "AssistantDevicesPlatformProtoMediaPreviousCapabilityOut": "_contentwarehouse_1833_AssistantDevicesPlatformProtoMediaPreviousCapabilityOut",
        "AssistantApiSupportedProtocolVersionIn": "_contentwarehouse_1834_AssistantApiSupportedProtocolVersionIn",
        "AssistantApiSupportedProtocolVersionOut": "_contentwarehouse_1835_AssistantApiSupportedProtocolVersionOut",
        "AssistantApiCoreTypesInternalProviderInfoIn": "_contentwarehouse_1836_AssistantApiCoreTypesInternalProviderInfoIn",
        "AssistantApiCoreTypesInternalProviderInfoOut": "_contentwarehouse_1837_AssistantApiCoreTypesInternalProviderInfoOut",
        "GoodocSemanticLabelIn": "_contentwarehouse_1838_GoodocSemanticLabelIn",
        "GoodocSemanticLabelOut": "_contentwarehouse_1839_GoodocSemanticLabelOut",
        "CrawlerChangerateUrlHistoryIn": "_contentwarehouse_1840_CrawlerChangerateUrlHistoryIn",
        "CrawlerChangerateUrlHistoryOut": "_contentwarehouse_1841_CrawlerChangerateUrlHistoryOut",
        "VideoContentSearchNavboostAnchorFeaturesIn": "_contentwarehouse_1842_VideoContentSearchNavboostAnchorFeaturesIn",
        "VideoContentSearchNavboostAnchorFeaturesOut": "_contentwarehouse_1843_VideoContentSearchNavboostAnchorFeaturesOut",
        "GoodocWordAlternatesIn": "_contentwarehouse_1844_GoodocWordAlternatesIn",
        "GoodocWordAlternatesOut": "_contentwarehouse_1845_GoodocWordAlternatesOut",
        "CopleyPersonalReferenceMetadataIn": "_contentwarehouse_1846_CopleyPersonalReferenceMetadataIn",
        "CopleyPersonalReferenceMetadataOut": "_contentwarehouse_1847_CopleyPersonalReferenceMetadataOut",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataIn": "_contentwarehouse_1848_GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataIn",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataOut": "_contentwarehouse_1849_GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataOut",
        "GoogleCloudContentwarehouseV1SearchDocumentsRequestIn": "_contentwarehouse_1850_GoogleCloudContentwarehouseV1SearchDocumentsRequestIn",
        "GoogleCloudContentwarehouseV1SearchDocumentsRequestOut": "_contentwarehouse_1851_GoogleCloudContentwarehouseV1SearchDocumentsRequestOut",
        "TrawlerClientServiceInfoClientLabelsClientLabelValuesIn": "_contentwarehouse_1852_TrawlerClientServiceInfoClientLabelsClientLabelValuesIn",
        "TrawlerClientServiceInfoClientLabelsClientLabelValuesOut": "_contentwarehouse_1853_TrawlerClientServiceInfoClientLabelsClientLabelValuesOut",
        "NSRVersionedItemIn": "_contentwarehouse_1854_NSRVersionedItemIn",
        "NSRVersionedItemOut": "_contentwarehouse_1855_NSRVersionedItemOut",
        "IndexingDocjoinerAnchorPhraseSpamInfoIn": "_contentwarehouse_1856_IndexingDocjoinerAnchorPhraseSpamInfoIn",
        "IndexingDocjoinerAnchorPhraseSpamInfoOut": "_contentwarehouse_1857_IndexingDocjoinerAnchorPhraseSpamInfoOut",
        "KnowledgeAnswersSensitivityArgumentEvalPolicyIn": "_contentwarehouse_1858_KnowledgeAnswersSensitivityArgumentEvalPolicyIn",
        "KnowledgeAnswersSensitivityArgumentEvalPolicyOut": "_contentwarehouse_1859_KnowledgeAnswersSensitivityArgumentEvalPolicyOut",
        "RepositoryWebrefClusterProtoMidListRuleInstanceIn": "_contentwarehouse_1860_RepositoryWebrefClusterProtoMidListRuleInstanceIn",
        "RepositoryWebrefClusterProtoMidListRuleInstanceOut": "_contentwarehouse_1861_RepositoryWebrefClusterProtoMidListRuleInstanceOut",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhoneIn": "_contentwarehouse_1862_AppsPeopleOzExternalMergedpeopleapiStructuredPhoneIn",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhoneOut": "_contentwarehouse_1863_AppsPeopleOzExternalMergedpeopleapiStructuredPhoneOut",
        "Proto2BridgeMessageSetIn": "_contentwarehouse_1864_Proto2BridgeMessageSetIn",
        "Proto2BridgeMessageSetOut": "_contentwarehouse_1865_Proto2BridgeMessageSetOut",
        "VideoPipelineViperVSIColumnDataIn": "_contentwarehouse_1866_VideoPipelineViperVSIColumnDataIn",
        "VideoPipelineViperVSIColumnDataOut": "_contentwarehouse_1867_VideoPipelineViperVSIColumnDataOut",
        "ScienceCitationDownloadURLIn": "_contentwarehouse_1868_ScienceCitationDownloadURLIn",
        "ScienceCitationDownloadURLOut": "_contentwarehouse_1869_ScienceCitationDownloadURLOut",
        "VideoContentSearchVideoMultimodalTopicFeaturesIn": "_contentwarehouse_1870_VideoContentSearchVideoMultimodalTopicFeaturesIn",
        "VideoContentSearchVideoMultimodalTopicFeaturesOut": "_contentwarehouse_1871_VideoContentSearchVideoMultimodalTopicFeaturesOut",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileIn": "_contentwarehouse_1872_AppsPeopleOzExternalMergedpeopleapiMapsProfileIn",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileOut": "_contentwarehouse_1873_AppsPeopleOzExternalMergedpeopleapiMapsProfileOut",
        "VideoFileSphericalMetadataPoseIn": "_contentwarehouse_1874_VideoFileSphericalMetadataPoseIn",
        "VideoFileSphericalMetadataPoseOut": "_contentwarehouse_1875_VideoFileSphericalMetadataPoseOut",
        "HtmlrenderWebkitHeadlessProtoPdfIn": "_contentwarehouse_1876_HtmlrenderWebkitHeadlessProtoPdfIn",
        "HtmlrenderWebkitHeadlessProtoPdfOut": "_contentwarehouse_1877_HtmlrenderWebkitHeadlessProtoPdfOut",
        "SecurityCredentialsRbacSubjectProtoIn": "_contentwarehouse_1878_SecurityCredentialsRbacSubjectProtoIn",
        "SecurityCredentialsRbacSubjectProtoOut": "_contentwarehouse_1879_SecurityCredentialsRbacSubjectProtoOut",
        "GoogleCloudContentwarehouseV1AccessControlActionIn": "_contentwarehouse_1880_GoogleCloudContentwarehouseV1AccessControlActionIn",
        "GoogleCloudContentwarehouseV1AccessControlActionOut": "_contentwarehouse_1881_GoogleCloudContentwarehouseV1AccessControlActionOut",
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn": "_contentwarehouse_1882_KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn",
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut": "_contentwarehouse_1883_KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut",
        "ContentAwareCropsIndexingIn": "_contentwarehouse_1884_ContentAwareCropsIndexingIn",
        "ContentAwareCropsIndexingOut": "_contentwarehouse_1885_ContentAwareCropsIndexingOut",
        "FocusBackendContactPointerIn": "_contentwarehouse_1886_FocusBackendContactPointerIn",
        "FocusBackendContactPointerOut": "_contentwarehouse_1887_FocusBackendContactPointerOut",
        "SearchPolicyRankableSensitivityFollowOnIn": "_contentwarehouse_1888_SearchPolicyRankableSensitivityFollowOnIn",
        "SearchPolicyRankableSensitivityFollowOnOut": "_contentwarehouse_1889_SearchPolicyRankableSensitivityFollowOnOut",
        "DrishtiVesperEncodedThumbnailIn": "_contentwarehouse_1890_DrishtiVesperEncodedThumbnailIn",
        "DrishtiVesperEncodedThumbnailOut": "_contentwarehouse_1891_DrishtiVesperEncodedThumbnailOut",
        "QualityActionsAppInfoIn": "_contentwarehouse_1892_QualityActionsAppInfoIn",
        "QualityActionsAppInfoOut": "_contentwarehouse_1893_QualityActionsAppInfoOut",
        "NlpSemanticParsingModelsShoppingAssistantPhraseIn": "_contentwarehouse_1894_NlpSemanticParsingModelsShoppingAssistantPhraseIn",
        "NlpSemanticParsingModelsShoppingAssistantPhraseOut": "_contentwarehouse_1895_NlpSemanticParsingModelsShoppingAssistantPhraseOut",
        "NlpSemanticParsingQRefAnnotationCollectionMembershipIn": "_contentwarehouse_1896_NlpSemanticParsingQRefAnnotationCollectionMembershipIn",
        "NlpSemanticParsingQRefAnnotationCollectionMembershipOut": "_contentwarehouse_1897_NlpSemanticParsingQRefAnnotationCollectionMembershipOut",
        "AssistantApiCoreTypesMessageNotificationNotificationEntryIn": "_contentwarehouse_1898_AssistantApiCoreTypesMessageNotificationNotificationEntryIn",
        "AssistantApiCoreTypesMessageNotificationNotificationEntryOut": "_contentwarehouse_1899_AssistantApiCoreTypesMessageNotificationNotificationEntryOut",
        "WebutilHtmlTypesSafeHtmlProtoIn": "_contentwarehouse_1900_WebutilHtmlTypesSafeHtmlProtoIn",
        "WebutilHtmlTypesSafeHtmlProtoOut": "_contentwarehouse_1901_WebutilHtmlTypesSafeHtmlProtoOut",
        "SocialGraphApiProtoSearchProfileEducationIn": "_contentwarehouse_1902_SocialGraphApiProtoSearchProfileEducationIn",
        "SocialGraphApiProtoSearchProfileEducationOut": "_contentwarehouse_1903_SocialGraphApiProtoSearchProfileEducationOut",
        "AssistantLogsSettingsDeviceIdLogIn": "_contentwarehouse_1904_AssistantLogsSettingsDeviceIdLogIn",
        "AssistantLogsSettingsDeviceIdLogOut": "_contentwarehouse_1905_AssistantLogsSettingsDeviceIdLogOut",
        "RepositoryWebrefExtraMetadataIn": "_contentwarehouse_1906_RepositoryWebrefExtraMetadataIn",
        "RepositoryWebrefExtraMetadataOut": "_contentwarehouse_1907_RepositoryWebrefExtraMetadataOut",
        "RepositoryAnnotationsGeoTopicalityScoreIn": "_contentwarehouse_1908_RepositoryAnnotationsGeoTopicalityScoreIn",
        "RepositoryAnnotationsGeoTopicalityScoreOut": "_contentwarehouse_1909_RepositoryAnnotationsGeoTopicalityScoreOut",
        "KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsIn": "_contentwarehouse_1910_KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsIn",
        "KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsOut": "_contentwarehouse_1911_KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsOut",
        "GoogleTypeMoneyIn": "_contentwarehouse_1912_GoogleTypeMoneyIn",
        "GoogleTypeMoneyOut": "_contentwarehouse_1913_GoogleTypeMoneyOut",
        "GoogleCloudContentwarehouseV1CreateDocumentMetadataIn": "_contentwarehouse_1914_GoogleCloudContentwarehouseV1CreateDocumentMetadataIn",
        "GoogleCloudContentwarehouseV1CreateDocumentMetadataOut": "_contentwarehouse_1915_GoogleCloudContentwarehouseV1CreateDocumentMetadataOut",
        "QualityPreviewSnippetQualityFeaturesIn": "_contentwarehouse_1916_QualityPreviewSnippetQualityFeaturesIn",
        "QualityPreviewSnippetQualityFeaturesOut": "_contentwarehouse_1917_QualityPreviewSnippetQualityFeaturesOut",
        "ImageContentQueryBoostIn": "_contentwarehouse_1918_ImageContentQueryBoostIn",
        "ImageContentQueryBoostOut": "_contentwarehouse_1919_ImageContentQueryBoostOut",
        "GeostoreSpeedLimitProtoIn": "_contentwarehouse_1920_GeostoreSpeedLimitProtoIn",
        "GeostoreSpeedLimitProtoOut": "_contentwarehouse_1921_GeostoreSpeedLimitProtoOut",
        "KnowledgeAnswersOpaqueDeviceIdTypeIn": "_contentwarehouse_1922_KnowledgeAnswersOpaqueDeviceIdTypeIn",
        "KnowledgeAnswersOpaqueDeviceIdTypeOut": "_contentwarehouse_1923_KnowledgeAnswersOpaqueDeviceIdTypeOut",
        "AssistantApiAndroidIntentCapabilitiesIn": "_contentwarehouse_1924_AssistantApiAndroidIntentCapabilitiesIn",
        "AssistantApiAndroidIntentCapabilitiesOut": "_contentwarehouse_1925_AssistantApiAndroidIntentCapabilitiesOut",
        "SentenceBoundaryAnnotationsIn": "_contentwarehouse_1926_SentenceBoundaryAnnotationsIn",
        "SentenceBoundaryAnnotationsOut": "_contentwarehouse_1927_SentenceBoundaryAnnotationsOut",
        "CopleyPersonalReferenceIn": "_contentwarehouse_1928_CopleyPersonalReferenceIn",
        "CopleyPersonalReferenceOut": "_contentwarehouse_1929_CopleyPersonalReferenceOut",
        "RepositoryWebrefGlobalLinkInfoIn": "_contentwarehouse_1930_RepositoryWebrefGlobalLinkInfoIn",
        "RepositoryWebrefGlobalLinkInfoOut": "_contentwarehouse_1931_RepositoryWebrefGlobalLinkInfoOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn": "_contentwarehouse_1932_IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut": "_contentwarehouse_1933_IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut",
        "VideoContentSearchOcrDescriptionTrainingDataSetFeaturesIn": "_contentwarehouse_1934_VideoContentSearchOcrDescriptionTrainingDataSetFeaturesIn",
        "VideoContentSearchOcrDescriptionTrainingDataSetFeaturesOut": "_contentwarehouse_1935_VideoContentSearchOcrDescriptionTrainingDataSetFeaturesOut",
        "PhotosDynamicDepthMetadataIn": "_contentwarehouse_1936_PhotosDynamicDepthMetadataIn",
        "PhotosDynamicDepthMetadataOut": "_contentwarehouse_1937_PhotosDynamicDepthMetadataOut",
        "GoogleCloudContentwarehouseV1CreateDocumentRequestIn": "_contentwarehouse_1938_GoogleCloudContentwarehouseV1CreateDocumentRequestIn",
        "GoogleCloudContentwarehouseV1CreateDocumentRequestOut": "_contentwarehouse_1939_GoogleCloudContentwarehouseV1CreateDocumentRequestOut",
        "GoogleCloudContentwarehouseV1SetAclResponseIn": "_contentwarehouse_1940_GoogleCloudContentwarehouseV1SetAclResponseIn",
        "GoogleCloudContentwarehouseV1SetAclResponseOut": "_contentwarehouse_1941_GoogleCloudContentwarehouseV1SetAclResponseOut",
        "GeostoreRoadConditionalProtoIn": "_contentwarehouse_1942_GeostoreRoadConditionalProtoIn",
        "GeostoreRoadConditionalProtoOut": "_contentwarehouse_1943_GeostoreRoadConditionalProtoOut",
        "VideoFileFramePackingArrangementIn": "_contentwarehouse_1944_VideoFileFramePackingArrangementIn",
        "VideoFileFramePackingArrangementOut": "_contentwarehouse_1945_VideoFileFramePackingArrangementOut",
        "SecurityCredentialsSigningKeyPossessorProtoIn": "_contentwarehouse_1946_SecurityCredentialsSigningKeyPossessorProtoIn",
        "SecurityCredentialsSigningKeyPossessorProtoOut": "_contentwarehouse_1947_SecurityCredentialsSigningKeyPossessorProtoOut",
        "GoogleCloudContentwarehouseV1TimeFilterIn": "_contentwarehouse_1948_GoogleCloudContentwarehouseV1TimeFilterIn",
        "GoogleCloudContentwarehouseV1TimeFilterOut": "_contentwarehouse_1949_GoogleCloudContentwarehouseV1TimeFilterOut",
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseIn": "_contentwarehouse_1950_GoogleCloudContentwarehouseV1SearchDocumentsResponseIn",
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseOut": "_contentwarehouse_1951_GoogleCloudContentwarehouseV1SearchDocumentsResponseOut",
        "AssistantApiSettingsDeviceSupervisionSettingsIn": "_contentwarehouse_1952_AssistantApiSettingsDeviceSupervisionSettingsIn",
        "AssistantApiSettingsDeviceSupervisionSettingsOut": "_contentwarehouse_1953_AssistantApiSettingsDeviceSupervisionSettingsOut",
        "ImageExifImageEmbeddedMetadataIn": "_contentwarehouse_1954_ImageExifImageEmbeddedMetadataIn",
        "ImageExifImageEmbeddedMetadataOut": "_contentwarehouse_1955_ImageExifImageEmbeddedMetadataOut",
        "HomeGraphCommonRouteIn": "_contentwarehouse_1956_HomeGraphCommonRouteIn",
        "HomeGraphCommonRouteOut": "_contentwarehouse_1957_HomeGraphCommonRouteOut",
        "ImageRepositoryVideoPreviewsDebuggingInfoIn": "_contentwarehouse_1958_ImageRepositoryVideoPreviewsDebuggingInfoIn",
        "ImageRepositoryVideoPreviewsDebuggingInfoOut": "_contentwarehouse_1959_ImageRepositoryVideoPreviewsDebuggingInfoOut",
        "VideoContentSearchQnaAnchorFeaturesIn": "_contentwarehouse_1960_VideoContentSearchQnaAnchorFeaturesIn",
        "VideoContentSearchQnaAnchorFeaturesOut": "_contentwarehouse_1961_VideoContentSearchQnaAnchorFeaturesOut",
        "GoogleIamV1AuditLogConfigIn": "_contentwarehouse_1962_GoogleIamV1AuditLogConfigIn",
        "GoogleIamV1AuditLogConfigOut": "_contentwarehouse_1963_GoogleIamV1AuditLogConfigOut",
        "KnowledgeGraphNestedStructPredicateObjsIn": "_contentwarehouse_1964_KnowledgeGraphNestedStructPredicateObjsIn",
        "KnowledgeGraphNestedStructPredicateObjsOut": "_contentwarehouse_1965_KnowledgeGraphNestedStructPredicateObjsOut",
        "ImageRepositoryAmarnaCloudSpeechSignalsIn": "_contentwarehouse_1966_ImageRepositoryAmarnaCloudSpeechSignalsIn",
        "ImageRepositoryAmarnaCloudSpeechSignalsOut": "_contentwarehouse_1967_ImageRepositoryAmarnaCloudSpeechSignalsOut",
        "RepositoryWebrefSimplifiedCompositeDocIn": "_contentwarehouse_1968_RepositoryWebrefSimplifiedCompositeDocIn",
        "RepositoryWebrefSimplifiedCompositeDocOut": "_contentwarehouse_1969_RepositoryWebrefSimplifiedCompositeDocOut",
        "AssistantApiCoreTypesCalendarEventIn": "_contentwarehouse_1970_AssistantApiCoreTypesCalendarEventIn",
        "AssistantApiCoreTypesCalendarEventOut": "_contentwarehouse_1971_AssistantApiCoreTypesCalendarEventOut",
        "AppsPeopleOzExternalMergedpeopleapiPlusPageInfoIn": "_contentwarehouse_1972_AppsPeopleOzExternalMergedpeopleapiPlusPageInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiPlusPageInfoOut": "_contentwarehouse_1973_AppsPeopleOzExternalMergedpeopleapiPlusPageInfoOut",
        "GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataIn": "_contentwarehouse_1974_GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataIn",
        "GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataOut": "_contentwarehouse_1975_GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiChannelDataIn": "_contentwarehouse_1976_AppsPeopleOzExternalMergedpeopleapiChannelDataIn",
        "AppsPeopleOzExternalMergedpeopleapiChannelDataOut": "_contentwarehouse_1977_AppsPeopleOzExternalMergedpeopleapiChannelDataOut",
        "QualityNsrPQDataIn": "_contentwarehouse_1978_QualityNsrPQDataIn",
        "QualityNsrPQDataOut": "_contentwarehouse_1979_QualityNsrPQDataOut",
        "QualityLabelsGoogleLabelDataLabelProviderIn": "_contentwarehouse_1980_QualityLabelsGoogleLabelDataLabelProviderIn",
        "QualityLabelsGoogleLabelDataLabelProviderOut": "_contentwarehouse_1981_QualityLabelsGoogleLabelDataLabelProviderOut",
        "AssistantApiGacsCapabilitiesIn": "_contentwarehouse_1982_AssistantApiGacsCapabilitiesIn",
        "AssistantApiGacsCapabilitiesOut": "_contentwarehouse_1983_AssistantApiGacsCapabilitiesOut",
        "LocalWWWInfoClusterIn": "_contentwarehouse_1984_LocalWWWInfoClusterIn",
        "LocalWWWInfoClusterOut": "_contentwarehouse_1985_LocalWWWInfoClusterOut",
        "GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn": "_contentwarehouse_1986_GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn",
        "GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut": "_contentwarehouse_1987_GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut",
        "AbuseiamClientIn": "_contentwarehouse_1988_AbuseiamClientIn",
        "AbuseiamClientOut": "_contentwarehouse_1989_AbuseiamClientOut",
        "VideoContentSearchDolphinFeaturesIn": "_contentwarehouse_1990_VideoContentSearchDolphinFeaturesIn",
        "VideoContentSearchDolphinFeaturesOut": "_contentwarehouse_1991_VideoContentSearchDolphinFeaturesOut",
        "IndexingMobileVoltCoreWebVitalsIn": "_contentwarehouse_1992_IndexingMobileVoltCoreWebVitalsIn",
        "IndexingMobileVoltCoreWebVitalsOut": "_contentwarehouse_1993_IndexingMobileVoltCoreWebVitalsOut",
        "ResearchScamCoscamConjunctionIn": "_contentwarehouse_1994_ResearchScamCoscamConjunctionIn",
        "ResearchScamCoscamConjunctionOut": "_contentwarehouse_1995_ResearchScamCoscamConjunctionOut",
        "QualitySherlockKnexAnnotationItemIn": "_contentwarehouse_1996_QualitySherlockKnexAnnotationItemIn",
        "QualitySherlockKnexAnnotationItemOut": "_contentwarehouse_1997_QualitySherlockKnexAnnotationItemOut",
        "VendingConsumerProtoTrustedGenomeHierarchyIn": "_contentwarehouse_1998_VendingConsumerProtoTrustedGenomeHierarchyIn",
        "VendingConsumerProtoTrustedGenomeHierarchyOut": "_contentwarehouse_1999_VendingConsumerProtoTrustedGenomeHierarchyOut",
        "NlpSemanticParsingModelsRecurrenceIn": "_contentwarehouse_2000_NlpSemanticParsingModelsRecurrenceIn",
        "NlpSemanticParsingModelsRecurrenceOut": "_contentwarehouse_2001_NlpSemanticParsingModelsRecurrenceOut",
        "GoogleCloudContentwarehouseV1UpdateDocumentRequestIn": "_contentwarehouse_2002_GoogleCloudContentwarehouseV1UpdateDocumentRequestIn",
        "GoogleCloudContentwarehouseV1UpdateDocumentRequestOut": "_contentwarehouse_2003_GoogleCloudContentwarehouseV1UpdateDocumentRequestOut",
        "VideoUserDataUnregisteredIn": "_contentwarehouse_2004_VideoUserDataUnregisteredIn",
        "VideoUserDataUnregisteredOut": "_contentwarehouse_2005_VideoUserDataUnregisteredOut",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoIn": "_contentwarehouse_2006_AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoOut": "_contentwarehouse_2007_AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoOut",
        "GeostoreStableFieldPathProtoStableFieldSelectorIn": "_contentwarehouse_2008_GeostoreStableFieldPathProtoStableFieldSelectorIn",
        "GeostoreStableFieldPathProtoStableFieldSelectorOut": "_contentwarehouse_2009_GeostoreStableFieldPathProtoStableFieldSelectorOut",
        "GeostoreInferredGeometryProtoIn": "_contentwarehouse_2010_GeostoreInferredGeometryProtoIn",
        "GeostoreInferredGeometryProtoOut": "_contentwarehouse_2011_GeostoreInferredGeometryProtoOut",
        "SocialCommonAttachmentAttachmentIn": "_contentwarehouse_2012_SocialCommonAttachmentAttachmentIn",
        "SocialCommonAttachmentAttachmentOut": "_contentwarehouse_2013_SocialCommonAttachmentAttachmentOut",
        "GeostoreFeatureIdListProtoIn": "_contentwarehouse_2014_GeostoreFeatureIdListProtoIn",
        "GeostoreFeatureIdListProtoOut": "_contentwarehouse_2015_GeostoreFeatureIdListProtoOut",
        "MapsQualitySpecialWordsFlagsIn": "_contentwarehouse_2016_MapsQualitySpecialWordsFlagsIn",
        "MapsQualitySpecialWordsFlagsOut": "_contentwarehouse_2017_MapsQualitySpecialWordsFlagsOut",
        "VideoYoutubeCommentsClassificationProtoSmartSuggestionIn": "_contentwarehouse_2018_VideoYoutubeCommentsClassificationProtoSmartSuggestionIn",
        "VideoYoutubeCommentsClassificationProtoSmartSuggestionOut": "_contentwarehouse_2019_VideoYoutubeCommentsClassificationProtoSmartSuggestionOut",
        "ResearchScienceSearchCitationIn": "_contentwarehouse_2020_ResearchScienceSearchCitationIn",
        "ResearchScienceSearchCitationOut": "_contentwarehouse_2021_ResearchScienceSearchCitationOut",
        "AssistantApiMessageCapabilitiesIn": "_contentwarehouse_2022_AssistantApiMessageCapabilitiesIn",
        "AssistantApiMessageCapabilitiesOut": "_contentwarehouse_2023_AssistantApiMessageCapabilitiesOut",
        "VideoThumbnailsThumbnailScoreIn": "_contentwarehouse_2024_VideoThumbnailsThumbnailScoreIn",
        "VideoThumbnailsThumbnailScoreOut": "_contentwarehouse_2025_VideoThumbnailsThumbnailScoreOut",
        "QualityPreviewSnippetExperimentalFeaturesIn": "_contentwarehouse_2026_QualityPreviewSnippetExperimentalFeaturesIn",
        "QualityPreviewSnippetExperimentalFeaturesOut": "_contentwarehouse_2027_QualityPreviewSnippetExperimentalFeaturesOut",
        "GeostoreBusinessChainProtoIn": "_contentwarehouse_2028_GeostoreBusinessChainProtoIn",
        "GeostoreBusinessChainProtoOut": "_contentwarehouse_2029_GeostoreBusinessChainProtoOut",
        "CompositeDocIndexingInfoIn": "_contentwarehouse_2030_CompositeDocIndexingInfoIn",
        "CompositeDocIndexingInfoOut": "_contentwarehouse_2031_CompositeDocIndexingInfoOut",
        "LocalWWWInfoOpeningHoursIn": "_contentwarehouse_2032_LocalWWWInfoOpeningHoursIn",
        "LocalWWWInfoOpeningHoursOut": "_contentwarehouse_2033_LocalWWWInfoOpeningHoursOut",
        "AttentionalEntitiesMentionPropertiesSourceUserIn": "_contentwarehouse_2034_AttentionalEntitiesMentionPropertiesSourceUserIn",
        "AttentionalEntitiesMentionPropertiesSourceUserOut": "_contentwarehouse_2035_AttentionalEntitiesMentionPropertiesSourceUserOut",
        "VideoMediaOverviewIn": "_contentwarehouse_2036_VideoMediaOverviewIn",
        "VideoMediaOverviewOut": "_contentwarehouse_2037_VideoMediaOverviewOut",
        "AssistantApiGestureCapabilitiesIn": "_contentwarehouse_2038_AssistantApiGestureCapabilitiesIn",
        "AssistantApiGestureCapabilitiesOut": "_contentwarehouse_2039_AssistantApiGestureCapabilitiesOut",
        "VideoContentSearchEntityGroupInfoIn": "_contentwarehouse_2040_VideoContentSearchEntityGroupInfoIn",
        "VideoContentSearchEntityGroupInfoOut": "_contentwarehouse_2041_VideoContentSearchEntityGroupInfoOut",
        "GoogleCloudContentwarehouseV1DeleteDocumentActionIn": "_contentwarehouse_2042_GoogleCloudContentwarehouseV1DeleteDocumentActionIn",
        "GoogleCloudContentwarehouseV1DeleteDocumentActionOut": "_contentwarehouse_2043_GoogleCloudContentwarehouseV1DeleteDocumentActionOut",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataIn": "_contentwarehouse_2044_AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataIn",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataOut": "_contentwarehouse_2045_AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataOut",
        "ResearchScamNumericRestrictNamespaceIn": "_contentwarehouse_2046_ResearchScamNumericRestrictNamespaceIn",
        "ResearchScamNumericRestrictNamespaceOut": "_contentwarehouse_2047_ResearchScamNumericRestrictNamespaceOut",
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresIn": "_contentwarehouse_2048_GoogleCloudDocumentaiV1DocumentPageImageQualityScoresIn",
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresOut": "_contentwarehouse_2049_GoogleCloudDocumentaiV1DocumentPageImageQualityScoresOut",
        "RichsnippetsDataObjectIn": "_contentwarehouse_2050_RichsnippetsDataObjectIn",
        "RichsnippetsDataObjectOut": "_contentwarehouse_2051_RichsnippetsDataObjectOut",
        "YoutubeCommentsSentimentSentimentIn": "_contentwarehouse_2052_YoutubeCommentsSentimentSentimentIn",
        "YoutubeCommentsSentimentSentimentOut": "_contentwarehouse_2053_YoutubeCommentsSentimentSentimentOut",
        "AppsPeopleOzExternalMergedpeopleapiLatLngIn": "_contentwarehouse_2054_AppsPeopleOzExternalMergedpeopleapiLatLngIn",
        "AppsPeopleOzExternalMergedpeopleapiLatLngOut": "_contentwarehouse_2055_AppsPeopleOzExternalMergedpeopleapiLatLngOut",
        "GeostoreTransitLineProtoIn": "_contentwarehouse_2056_GeostoreTransitLineProtoIn",
        "GeostoreTransitLineProtoOut": "_contentwarehouse_2057_GeostoreTransitLineProtoOut",
        "AssistantApiCoreTypesCalendarEventMeetingContactIn": "_contentwarehouse_2058_AssistantApiCoreTypesCalendarEventMeetingContactIn",
        "AssistantApiCoreTypesCalendarEventMeetingContactOut": "_contentwarehouse_2059_AssistantApiCoreTypesCalendarEventMeetingContactOut",
        "RepositoryWebrefRangeAnnotationsIn": "_contentwarehouse_2060_RepositoryWebrefRangeAnnotationsIn",
        "RepositoryWebrefRangeAnnotationsOut": "_contentwarehouse_2061_RepositoryWebrefRangeAnnotationsOut",
        "MustangReposWwwSnippetsSnippetCandidateIn": "_contentwarehouse_2062_MustangReposWwwSnippetsSnippetCandidateIn",
        "MustangReposWwwSnippetsSnippetCandidateOut": "_contentwarehouse_2063_MustangReposWwwSnippetsSnippetCandidateOut",
        "WeboftrustLiveResultsDocAttachmentsIn": "_contentwarehouse_2064_WeboftrustLiveResultsDocAttachmentsIn",
        "WeboftrustLiveResultsDocAttachmentsOut": "_contentwarehouse_2065_WeboftrustLiveResultsDocAttachmentsOut",
        "GoogleCloudDocumentaiV1DocumentPageFormFieldIn": "_contentwarehouse_2066_GoogleCloudDocumentaiV1DocumentPageFormFieldIn",
        "GoogleCloudDocumentaiV1DocumentPageFormFieldOut": "_contentwarehouse_2067_GoogleCloudDocumentaiV1DocumentPageFormFieldOut",
        "GeostorePoliticalProtoIn": "_contentwarehouse_2068_GeostorePoliticalProtoIn",
        "GeostorePoliticalProtoOut": "_contentwarehouse_2069_GeostorePoliticalProtoOut",
        "KnowledgeAnswersIntentQueryIdentifierIn": "_contentwarehouse_2070_KnowledgeAnswersIntentQueryIdentifierIn",
        "KnowledgeAnswersIntentQueryIdentifierOut": "_contentwarehouse_2071_KnowledgeAnswersIntentQueryIdentifierOut",
        "NlpSaftEntityTypeIn": "_contentwarehouse_2072_NlpSaftEntityTypeIn",
        "NlpSaftEntityTypeOut": "_contentwarehouse_2073_NlpSaftEntityTypeOut",
        "MustangSnippetsRenderedTokenIn": "_contentwarehouse_2074_MustangSnippetsRenderedTokenIn",
        "MustangSnippetsRenderedTokenOut": "_contentwarehouse_2075_MustangSnippetsRenderedTokenOut",
        "GoogleTypeIntervalIn": "_contentwarehouse_2076_GoogleTypeIntervalIn",
        "GoogleTypeIntervalOut": "_contentwarehouse_2077_GoogleTypeIntervalOut",
        "AssistantApiCoreTypesDeviceUserIdentityIn": "_contentwarehouse_2078_AssistantApiCoreTypesDeviceUserIdentityIn",
        "AssistantApiCoreTypesDeviceUserIdentityOut": "_contentwarehouse_2079_AssistantApiCoreTypesDeviceUserIdentityOut",
        "AssistantTeleportTeleportNicknameSignalsIn": "_contentwarehouse_2080_AssistantTeleportTeleportNicknameSignalsIn",
        "AssistantTeleportTeleportNicknameSignalsOut": "_contentwarehouse_2081_AssistantTeleportTeleportNicknameSignalsOut",
        "GeostoreDurationBasedRateProtoIn": "_contentwarehouse_2082_GeostoreDurationBasedRateProtoIn",
        "GeostoreDurationBasedRateProtoOut": "_contentwarehouse_2083_GeostoreDurationBasedRateProtoOut",
        "GoogleInternalAppsWaldoV1alphaDoNotDisturbIn": "_contentwarehouse_2084_GoogleInternalAppsWaldoV1alphaDoNotDisturbIn",
        "GoogleInternalAppsWaldoV1alphaDoNotDisturbOut": "_contentwarehouse_2085_GoogleInternalAppsWaldoV1alphaDoNotDisturbOut",
        "AttentionalEntitiesMentionPropertiesSourceClientIn": "_contentwarehouse_2086_AttentionalEntitiesMentionPropertiesSourceClientIn",
        "AttentionalEntitiesMentionPropertiesSourceClientOut": "_contentwarehouse_2087_AttentionalEntitiesMentionPropertiesSourceClientOut",
        "MultiscalePointerSpanIn": "_contentwarehouse_2088_MultiscalePointerSpanIn",
        "MultiscalePointerSpanOut": "_contentwarehouse_2089_MultiscalePointerSpanOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueIn": "_contentwarehouse_2090_KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueOut": "_contentwarehouse_2091_KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueOut",
        "AssistantVerticalsHomeautomationProtoCommonVoiceTriggerIn": "_contentwarehouse_2092_AssistantVerticalsHomeautomationProtoCommonVoiceTriggerIn",
        "AssistantVerticalsHomeautomationProtoCommonVoiceTriggerOut": "_contentwarehouse_2093_AssistantVerticalsHomeautomationProtoCommonVoiceTriggerOut",
        "TrawlerTrawlerPrivateFetchReplyDataIn": "_contentwarehouse_2094_TrawlerTrawlerPrivateFetchReplyDataIn",
        "TrawlerTrawlerPrivateFetchReplyDataOut": "_contentwarehouse_2095_TrawlerTrawlerPrivateFetchReplyDataOut",
        "AssistantApiSettingsMarketplaceDisclosureIn": "_contentwarehouse_2096_AssistantApiSettingsMarketplaceDisclosureIn",
        "AssistantApiSettingsMarketplaceDisclosureOut": "_contentwarehouse_2097_AssistantApiSettingsMarketplaceDisclosureOut",
        "KnowledgeAnswersSensitivityServingPolicyIn": "_contentwarehouse_2098_KnowledgeAnswersSensitivityServingPolicyIn",
        "KnowledgeAnswersSensitivityServingPolicyOut": "_contentwarehouse_2099_KnowledgeAnswersSensitivityServingPolicyOut",
        "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoIn": "_contentwarehouse_2100_SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoIn",
        "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoOut": "_contentwarehouse_2101_SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoOut",
        "ScienceCitationAuthorIn": "_contentwarehouse_2102_ScienceCitationAuthorIn",
        "ScienceCitationAuthorOut": "_contentwarehouse_2103_ScienceCitationAuthorOut",
        "ResearchScamNeighborSelectionOverrideIn": "_contentwarehouse_2104_ResearchScamNeighborSelectionOverrideIn",
        "ResearchScamNeighborSelectionOverrideOut": "_contentwarehouse_2105_ResearchScamNeighborSelectionOverrideOut",
        "NlxDataSchemaTokenDependencyEdgeIn": "_contentwarehouse_2106_NlxDataSchemaTokenDependencyEdgeIn",
        "NlxDataSchemaTokenDependencyEdgeOut": "_contentwarehouse_2107_NlxDataSchemaTokenDependencyEdgeOut",
        "GeostoreCurveConnectionProtoBezierParamsIn": "_contentwarehouse_2108_GeostoreCurveConnectionProtoBezierParamsIn",
        "GeostoreCurveConnectionProtoBezierParamsOut": "_contentwarehouse_2109_GeostoreCurveConnectionProtoBezierParamsOut",
        "YoutubeDiscoveryLegosLegosPresentRelationshipIn": "_contentwarehouse_2110_YoutubeDiscoveryLegosLegosPresentRelationshipIn",
        "YoutubeDiscoveryLegosLegosPresentRelationshipOut": "_contentwarehouse_2111_YoutubeDiscoveryLegosLegosPresentRelationshipOut",
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentIn": "_contentwarehouse_2112_GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentIn",
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentOut": "_contentwarehouse_2113_GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentOut",
        "RepositoryWebrefWebrefOutlinkInfoIn": "_contentwarehouse_2114_RepositoryWebrefWebrefOutlinkInfoIn",
        "RepositoryWebrefWebrefOutlinkInfoOut": "_contentwarehouse_2115_RepositoryWebrefWebrefOutlinkInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoIn": "_contentwarehouse_2116_AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoOut": "_contentwarehouse_2117_AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoOut",
        "IndexingCrawlerIdServingDocumentIdentifierIn": "_contentwarehouse_2118_IndexingCrawlerIdServingDocumentIdentifierIn",
        "IndexingCrawlerIdServingDocumentIdentifierOut": "_contentwarehouse_2119_IndexingCrawlerIdServingDocumentIdentifierOut",
        "WeboftrustTimeRangeIn": "_contentwarehouse_2120_WeboftrustTimeRangeIn",
        "WeboftrustTimeRangeOut": "_contentwarehouse_2121_WeboftrustTimeRangeOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceIn": "_contentwarehouse_2122_KnowledgeAnswersIntentQueryArgumentProvenanceIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceOut": "_contentwarehouse_2123_KnowledgeAnswersIntentQueryArgumentProvenanceOut",
        "ImageExifIPTCMetadataIn": "_contentwarehouse_2124_ImageExifIPTCMetadataIn",
        "ImageExifIPTCMetadataOut": "_contentwarehouse_2125_ImageExifIPTCMetadataOut",
        "OceanImageSizeIn": "_contentwarehouse_2126_OceanImageSizeIn",
        "OceanImageSizeOut": "_contentwarehouse_2127_OceanImageSizeOut",
        "RepositoryWebrefTaskDetailsIn": "_contentwarehouse_2128_RepositoryWebrefTaskDetailsIn",
        "RepositoryWebrefTaskDetailsOut": "_contentwarehouse_2129_RepositoryWebrefTaskDetailsOut",
        "TravelFlightsAirlineConfigIn": "_contentwarehouse_2130_TravelFlightsAirlineConfigIn",
        "TravelFlightsAirlineConfigOut": "_contentwarehouse_2131_TravelFlightsAirlineConfigOut",
        "AssistantApiRecurrenceDatetimeRangeIn": "_contentwarehouse_2132_AssistantApiRecurrenceDatetimeRangeIn",
        "AssistantApiRecurrenceDatetimeRangeOut": "_contentwarehouse_2133_AssistantApiRecurrenceDatetimeRangeOut",
        "PhotosVisionObjectrecGeoLocationIn": "_contentwarehouse_2134_PhotosVisionObjectrecGeoLocationIn",
        "PhotosVisionObjectrecGeoLocationOut": "_contentwarehouse_2135_PhotosVisionObjectrecGeoLocationOut",
        "AssistantApiSignInMethodIn": "_contentwarehouse_2136_AssistantApiSignInMethodIn",
        "AssistantApiSignInMethodOut": "_contentwarehouse_2137_AssistantApiSignInMethodOut",
        "AssistantApiSettingsThirdPartyAppsFilterIn": "_contentwarehouse_2138_AssistantApiSettingsThirdPartyAppsFilterIn",
        "AssistantApiSettingsThirdPartyAppsFilterOut": "_contentwarehouse_2139_AssistantApiSettingsThirdPartyAppsFilterOut",
        "AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsIn": "_contentwarehouse_2140_AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsIn",
        "AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsOut": "_contentwarehouse_2141_AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsOut",
        "GeostoreLaneMarkerProtoIn": "_contentwarehouse_2142_GeostoreLaneMarkerProtoIn",
        "GeostoreLaneMarkerProtoOut": "_contentwarehouse_2143_GeostoreLaneMarkerProtoOut",
        "OceanDocTagBookSpecificNumberingRangeIn": "_contentwarehouse_2144_OceanDocTagBookSpecificNumberingRangeIn",
        "OceanDocTagBookSpecificNumberingRangeOut": "_contentwarehouse_2145_OceanDocTagBookSpecificNumberingRangeOut",
        "ScienceCitationCategoryIn": "_contentwarehouse_2146_ScienceCitationCategoryIn",
        "ScienceCitationCategoryOut": "_contentwarehouse_2147_ScienceCitationCategoryOut",
        "NlpSemanticParsingModelsMoneyMoneyIn": "_contentwarehouse_2148_NlpSemanticParsingModelsMoneyMoneyIn",
        "NlpSemanticParsingModelsMoneyMoneyOut": "_contentwarehouse_2149_NlpSemanticParsingModelsMoneyMoneyOut",
        "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextIn": "_contentwarehouse_2150_PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextIn",
        "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextOut": "_contentwarehouse_2151_PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextOut",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn": "_contentwarehouse_2152_HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut": "_contentwarehouse_2153_HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataIn": "_contentwarehouse_2154_AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataOut": "_contentwarehouse_2155_AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataOut",
        "KnowledgeAnswersSensitivityIntentEvalPolicyIn": "_contentwarehouse_2156_KnowledgeAnswersSensitivityIntentEvalPolicyIn",
        "KnowledgeAnswersSensitivityIntentEvalPolicyOut": "_contentwarehouse_2157_KnowledgeAnswersSensitivityIntentEvalPolicyOut",
        "AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn": "_contentwarehouse_2158_AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn",
        "AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut": "_contentwarehouse_2159_AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut",
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataIn": "_contentwarehouse_2160_AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataOut": "_contentwarehouse_2161_AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataOut",
        "NlpSemanticParsingQRefAnnotationMerlotCategoryDataIn": "_contentwarehouse_2162_NlpSemanticParsingQRefAnnotationMerlotCategoryDataIn",
        "NlpSemanticParsingQRefAnnotationMerlotCategoryDataOut": "_contentwarehouse_2163_NlpSemanticParsingQRefAnnotationMerlotCategoryDataOut",
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataIn": "_contentwarehouse_2164_AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataOut": "_contentwarehouse_2165_AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataOut",
        "NlxDataSchemaCharacterIn": "_contentwarehouse_2166_NlxDataSchemaCharacterIn",
        "NlxDataSchemaCharacterOut": "_contentwarehouse_2167_NlxDataSchemaCharacterOut",
        "StorageGraphBfgSpiiCertificationIn": "_contentwarehouse_2168_StorageGraphBfgSpiiCertificationIn",
        "StorageGraphBfgSpiiCertificationOut": "_contentwarehouse_2169_StorageGraphBfgSpiiCertificationOut",
        "GoogleInternalAppsWaldoV1alphaHomeLocationIn": "_contentwarehouse_2170_GoogleInternalAppsWaldoV1alphaHomeLocationIn",
        "GoogleInternalAppsWaldoV1alphaHomeLocationOut": "_contentwarehouse_2171_GoogleInternalAppsWaldoV1alphaHomeLocationOut",
        "BiasingPerDocDataIn": "_contentwarehouse_2172_BiasingPerDocDataIn",
        "BiasingPerDocDataOut": "_contentwarehouse_2173_BiasingPerDocDataOut",
        "GoogleCloudDocumentaiV1VertexIn": "_contentwarehouse_2174_GoogleCloudDocumentaiV1VertexIn",
        "GoogleCloudDocumentaiV1VertexOut": "_contentwarehouse_2175_GoogleCloudDocumentaiV1VertexOut",
        "AppsPeopleOzExternalMergedpeopleapiFileAsIn": "_contentwarehouse_2176_AppsPeopleOzExternalMergedpeopleapiFileAsIn",
        "AppsPeopleOzExternalMergedpeopleapiFileAsOut": "_contentwarehouse_2177_AppsPeopleOzExternalMergedpeopleapiFileAsOut",
        "ImageRepositoryUnwantedContentIn": "_contentwarehouse_2178_ImageRepositoryUnwantedContentIn",
        "ImageRepositoryUnwantedContentOut": "_contentwarehouse_2179_ImageRepositoryUnwantedContentOut",
        "KnowledgeAnswersIntentQueryMuninSignalsIn": "_contentwarehouse_2180_KnowledgeAnswersIntentQueryMuninSignalsIn",
        "KnowledgeAnswersIntentQueryMuninSignalsOut": "_contentwarehouse_2181_KnowledgeAnswersIntentQueryMuninSignalsOut",
        "KnowledgeAnswersSameTypeIn": "_contentwarehouse_2182_KnowledgeAnswersSameTypeIn",
        "KnowledgeAnswersSameTypeOut": "_contentwarehouse_2183_KnowledgeAnswersSameTypeOut",
        "ResearchScamCoscamRestrictTokensV2In": "_contentwarehouse_2184_ResearchScamCoscamRestrictTokensV2In",
        "ResearchScamCoscamRestrictTokensV2Out": "_contentwarehouse_2185_ResearchScamCoscamRestrictTokensV2Out",
        "ImageDataIn": "_contentwarehouse_2186_ImageDataIn",
        "ImageDataOut": "_contentwarehouse_2187_ImageDataOut",
        "AssistantApiCoreTypesCloudProviderInfoAgentStyleIn": "_contentwarehouse_2188_AssistantApiCoreTypesCloudProviderInfoAgentStyleIn",
        "AssistantApiCoreTypesCloudProviderInfoAgentStyleOut": "_contentwarehouse_2189_AssistantApiCoreTypesCloudProviderInfoAgentStyleOut",
        "GoogleCloudDocumentaiV1DocumentPageDimensionIn": "_contentwarehouse_2190_GoogleCloudDocumentaiV1DocumentPageDimensionIn",
        "GoogleCloudDocumentaiV1DocumentPageDimensionOut": "_contentwarehouse_2191_GoogleCloudDocumentaiV1DocumentPageDimensionOut",
        "GeostoreComposableItemProtoIn": "_contentwarehouse_2192_GeostoreComposableItemProtoIn",
        "GeostoreComposableItemProtoOut": "_contentwarehouse_2193_GeostoreComposableItemProtoOut",
        "ImageRepositoryVideoLinkIndexingInfoIn": "_contentwarehouse_2194_ImageRepositoryVideoLinkIndexingInfoIn",
        "ImageRepositoryVideoLinkIndexingInfoOut": "_contentwarehouse_2195_ImageRepositoryVideoLinkIndexingInfoOut",
        "VideoContentSearchListTrainingDataAnchorFeaturesIn": "_contentwarehouse_2196_VideoContentSearchListTrainingDataAnchorFeaturesIn",
        "VideoContentSearchListTrainingDataAnchorFeaturesOut": "_contentwarehouse_2197_VideoContentSearchListTrainingDataAnchorFeaturesOut",
        "FocusBackendSecondaryContactIdIn": "_contentwarehouse_2198_FocusBackendSecondaryContactIdIn",
        "FocusBackendSecondaryContactIdOut": "_contentwarehouse_2199_FocusBackendSecondaryContactIdOut",
        "GoogleCloudContentwarehouseV1PublishActionIn": "_contentwarehouse_2200_GoogleCloudContentwarehouseV1PublishActionIn",
        "GoogleCloudContentwarehouseV1PublishActionOut": "_contentwarehouse_2201_GoogleCloudContentwarehouseV1PublishActionOut",
        "KnowledgeAnswersIntentQueryArgumentSignalsIn": "_contentwarehouse_2202_KnowledgeAnswersIntentQueryArgumentSignalsIn",
        "KnowledgeAnswersIntentQueryArgumentSignalsOut": "_contentwarehouse_2203_KnowledgeAnswersIntentQueryArgumentSignalsOut",
        "VideoVideoStreamInfoIn": "_contentwarehouse_2204_VideoVideoStreamInfoIn",
        "VideoVideoStreamInfoOut": "_contentwarehouse_2205_VideoVideoStreamInfoOut",
        "YoutubeDiscoveryLegosLegosAnnotationsIn": "_contentwarehouse_2206_YoutubeDiscoveryLegosLegosAnnotationsIn",
        "YoutubeDiscoveryLegosLegosAnnotationsOut": "_contentwarehouse_2207_YoutubeDiscoveryLegosLegosAnnotationsOut",
        "GoogleCloudDocumentaiV1DocumentPageIn": "_contentwarehouse_2208_GoogleCloudDocumentaiV1DocumentPageIn",
        "GoogleCloudDocumentaiV1DocumentPageOut": "_contentwarehouse_2209_GoogleCloudDocumentaiV1DocumentPageOut",
        "FreebaseNestedStructIn": "_contentwarehouse_2210_FreebaseNestedStructIn",
        "FreebaseNestedStructOut": "_contentwarehouse_2211_FreebaseNestedStructOut",
        "AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipIn": "_contentwarehouse_2212_AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipIn",
        "AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipOut": "_contentwarehouse_2213_AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipOut",
        "QualityViewsExtractionClusterInfoIn": "_contentwarehouse_2214_QualityViewsExtractionClusterInfoIn",
        "QualityViewsExtractionClusterInfoOut": "_contentwarehouse_2215_QualityViewsExtractionClusterInfoOut",
        "NlpSemanticParsingModelsRecurrenceMonthlyPatternIn": "_contentwarehouse_2216_NlpSemanticParsingModelsRecurrenceMonthlyPatternIn",
        "NlpSemanticParsingModelsRecurrenceMonthlyPatternOut": "_contentwarehouse_2217_NlpSemanticParsingModelsRecurrenceMonthlyPatternOut",
        "AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataIn": "_contentwarehouse_2218_AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataOut": "_contentwarehouse_2219_AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataOut",
        "AssistantApiSupportedConversationVersionIn": "_contentwarehouse_2220_AssistantApiSupportedConversationVersionIn",
        "AssistantApiSupportedConversationVersionOut": "_contentwarehouse_2221_AssistantApiSupportedConversationVersionOut",
        "FocusBackendOtherContactIdIn": "_contentwarehouse_2222_FocusBackendOtherContactIdIn",
        "FocusBackendOtherContactIdOut": "_contentwarehouse_2223_FocusBackendOtherContactIdOut",
        "ResearchScienceSearchFieldOfStudyInfoIn": "_contentwarehouse_2224_ResearchScienceSearchFieldOfStudyInfoIn",
        "ResearchScienceSearchFieldOfStudyInfoOut": "_contentwarehouse_2225_ResearchScienceSearchFieldOfStudyInfoOut",
        "GeostoreSkiBoundaryProtoIn": "_contentwarehouse_2226_GeostoreSkiBoundaryProtoIn",
        "GeostoreSkiBoundaryProtoOut": "_contentwarehouse_2227_GeostoreSkiBoundaryProtoOut",
        "AssistantApiOnDeviceAssistantCapabilitiesIn": "_contentwarehouse_2228_AssistantApiOnDeviceAssistantCapabilitiesIn",
        "AssistantApiOnDeviceAssistantCapabilitiesOut": "_contentwarehouse_2229_AssistantApiOnDeviceAssistantCapabilitiesOut",
        "IndexingSignalAggregatorUrlScoreIn": "_contentwarehouse_2230_IndexingSignalAggregatorUrlScoreIn",
        "IndexingSignalAggregatorUrlScoreOut": "_contentwarehouse_2231_IndexingSignalAggregatorUrlScoreOut",
        "OceanDocTagPatentSpecificIn": "_contentwarehouse_2232_OceanDocTagPatentSpecificIn",
        "OceanDocTagPatentSpecificOut": "_contentwarehouse_2233_OceanDocTagPatentSpecificOut",
        "NlpSemanticParsingModelsMediaAlbumTitleIn": "_contentwarehouse_2234_NlpSemanticParsingModelsMediaAlbumTitleIn",
        "NlpSemanticParsingModelsMediaAlbumTitleOut": "_contentwarehouse_2235_NlpSemanticParsingModelsMediaAlbumTitleOut",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetIn": "_contentwarehouse_2236_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetIn",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOut": "_contentwarehouse_2237_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOut",
        "QualitySitemapThirdPartyCarouselsListItemMuppetMetadataIn": "_contentwarehouse_2238_QualitySitemapThirdPartyCarouselsListItemMuppetMetadataIn",
        "QualitySitemapThirdPartyCarouselsListItemMuppetMetadataOut": "_contentwarehouse_2239_QualitySitemapThirdPartyCarouselsListItemMuppetMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoIn": "_contentwarehouse_2240_AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoOut": "_contentwarehouse_2241_AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoOut",
        "RepositoryWebrefTripleAnnotationIn": "_contentwarehouse_2242_RepositoryWebrefTripleAnnotationIn",
        "RepositoryWebrefTripleAnnotationOut": "_contentwarehouse_2243_RepositoryWebrefTripleAnnotationOut",
        "KnowledgeAnswersOpaqueMoneyTypeIn": "_contentwarehouse_2244_KnowledgeAnswersOpaqueMoneyTypeIn",
        "KnowledgeAnswersOpaqueMoneyTypeOut": "_contentwarehouse_2245_KnowledgeAnswersOpaqueMoneyTypeOut",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodIn": "_contentwarehouse_2246_AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodIn",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodOut": "_contentwarehouse_2247_AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodOut",
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsIn": "_contentwarehouse_2248_QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsIn",
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsOut": "_contentwarehouse_2249_QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsOut",
        "RepositoryWebrefPersonalizationContextOutputIn": "_contentwarehouse_2250_RepositoryWebrefPersonalizationContextOutputIn",
        "RepositoryWebrefPersonalizationContextOutputOut": "_contentwarehouse_2251_RepositoryWebrefPersonalizationContextOutputOut",
        "AppsPeopleOzExternalMergedpeopleapiTaglineIn": "_contentwarehouse_2252_AppsPeopleOzExternalMergedpeopleapiTaglineIn",
        "AppsPeopleOzExternalMergedpeopleapiTaglineOut": "_contentwarehouse_2253_AppsPeopleOzExternalMergedpeopleapiTaglineOut",
        "MobilePerDocDataIn": "_contentwarehouse_2254_MobilePerDocDataIn",
        "MobilePerDocDataOut": "_contentwarehouse_2255_MobilePerDocDataOut",
        "SearchPolicyRankableSensitivityAttentionalEntityIn": "_contentwarehouse_2256_SearchPolicyRankableSensitivityAttentionalEntityIn",
        "SearchPolicyRankableSensitivityAttentionalEntityOut": "_contentwarehouse_2257_SearchPolicyRankableSensitivityAttentionalEntityOut",
        "SpamBrainScoreIn": "_contentwarehouse_2258_SpamBrainScoreIn",
        "SpamBrainScoreOut": "_contentwarehouse_2259_SpamBrainScoreOut",
        "QualityProseCSEUrlInfoIn": "_contentwarehouse_2260_QualityProseCSEUrlInfoIn",
        "QualityProseCSEUrlInfoOut": "_contentwarehouse_2261_QualityProseCSEUrlInfoOut",
        "QualityQrewritePersonalContactDataIn": "_contentwarehouse_2262_QualityQrewritePersonalContactDataIn",
        "QualityQrewritePersonalContactDataOut": "_contentwarehouse_2263_QualityQrewritePersonalContactDataOut",
        "VideoContentSearchAnchorCommonFeatureSetIn": "_contentwarehouse_2264_VideoContentSearchAnchorCommonFeatureSetIn",
        "VideoContentSearchAnchorCommonFeatureSetOut": "_contentwarehouse_2265_VideoContentSearchAnchorCommonFeatureSetOut",
        "GoogleProtobufEmptyIn": "_contentwarehouse_2266_GoogleProtobufEmptyIn",
        "GoogleProtobufEmptyOut": "_contentwarehouse_2267_GoogleProtobufEmptyOut",
        "RepositoryWebrefWebrefEntityRelationshipIn": "_contentwarehouse_2268_RepositoryWebrefWebrefEntityRelationshipIn",
        "RepositoryWebrefWebrefEntityRelationshipOut": "_contentwarehouse_2269_RepositoryWebrefWebrefEntityRelationshipOut",
        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemIn": "_contentwarehouse_2270_AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemIn",
        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemOut": "_contentwarehouse_2271_AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemOut",
        "ImageSearchImageSelectionInfoIn": "_contentwarehouse_2272_ImageSearchImageSelectionInfoIn",
        "ImageSearchImageSelectionInfoOut": "_contentwarehouse_2273_ImageSearchImageSelectionInfoOut",
        "NlpSemanticParsingModelsMediaNewsTopicIn": "_contentwarehouse_2274_NlpSemanticParsingModelsMediaNewsTopicIn",
        "NlpSemanticParsingModelsMediaNewsTopicOut": "_contentwarehouse_2275_NlpSemanticParsingModelsMediaNewsTopicOut",
        "OceanLocaleViewabilityDatesIn": "_contentwarehouse_2276_OceanLocaleViewabilityDatesIn",
        "OceanLocaleViewabilityDatesOut": "_contentwarehouse_2277_OceanLocaleViewabilityDatesOut",
        "AssistantApiTimeOfDayIn": "_contentwarehouse_2278_AssistantApiTimeOfDayIn",
        "AssistantApiTimeOfDayOut": "_contentwarehouse_2279_AssistantApiTimeOfDayOut",
        "SocialGraphApiProtoSearchProfileLocationInfoIn": "_contentwarehouse_2280_SocialGraphApiProtoSearchProfileLocationInfoIn",
        "SocialGraphApiProtoSearchProfileLocationInfoOut": "_contentwarehouse_2281_SocialGraphApiProtoSearchProfileLocationInfoOut",
        "NlpSaftEntityProfileReferenceIn": "_contentwarehouse_2282_NlpSaftEntityProfileReferenceIn",
        "NlpSaftEntityProfileReferenceOut": "_contentwarehouse_2283_NlpSaftEntityProfileReferenceOut",
        "NlpSemanticParsingLocalRoomConstraintIn": "_contentwarehouse_2284_NlpSemanticParsingLocalRoomConstraintIn",
        "NlpSemanticParsingLocalRoomConstraintOut": "_contentwarehouse_2285_NlpSemanticParsingLocalRoomConstraintOut",
        "TravelFlightsNameCatalogEntryIn": "_contentwarehouse_2286_TravelFlightsNameCatalogEntryIn",
        "TravelFlightsNameCatalogEntryOut": "_contentwarehouse_2287_TravelFlightsNameCatalogEntryOut",
        "NlpSciencelitCitationDataIn": "_contentwarehouse_2288_NlpSciencelitCitationDataIn",
        "NlpSciencelitCitationDataOut": "_contentwarehouse_2289_NlpSciencelitCitationDataOut",
        "NlpSemanticParsingDatetimeRangeIn": "_contentwarehouse_2290_NlpSemanticParsingDatetimeRangeIn",
        "NlpSemanticParsingDatetimeRangeOut": "_contentwarehouse_2291_NlpSemanticParsingDatetimeRangeOut",
        "ImageContentQueryBoostQueryBoostIn": "_contentwarehouse_2292_ImageContentQueryBoostQueryBoostIn",
        "ImageContentQueryBoostQueryBoostOut": "_contentwarehouse_2293_ImageContentQueryBoostQueryBoostOut",
        "AppsPeopleOzExternalMergedpeopleapiIdentityInfoIn": "_contentwarehouse_2294_AppsPeopleOzExternalMergedpeopleapiIdentityInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiIdentityInfoOut": "_contentwarehouse_2295_AppsPeopleOzExternalMergedpeopleapiIdentityInfoOut",
        "AssistantApiSupportedProtocolVersionMessageVersionPairIn": "_contentwarehouse_2296_AssistantApiSupportedProtocolVersionMessageVersionPairIn",
        "AssistantApiSupportedProtocolVersionMessageVersionPairOut": "_contentwarehouse_2297_AssistantApiSupportedProtocolVersionMessageVersionPairOut",
        "SecurityCredentialsLdapUserProtoIn": "_contentwarehouse_2298_SecurityCredentialsLdapUserProtoIn",
        "SecurityCredentialsLdapUserProtoOut": "_contentwarehouse_2299_SecurityCredentialsLdapUserProtoOut",
        "GoogleInternalAppsWaldoV1alphaUpcomingOooContextIn": "_contentwarehouse_2300_GoogleInternalAppsWaldoV1alphaUpcomingOooContextIn",
        "GoogleInternalAppsWaldoV1alphaUpcomingOooContextOut": "_contentwarehouse_2301_GoogleInternalAppsWaldoV1alphaUpcomingOooContextOut",
        "IndexingMlVerticalVerticalItemIn": "_contentwarehouse_2302_IndexingMlVerticalVerticalItemIn",
        "IndexingMlVerticalVerticalItemOut": "_contentwarehouse_2303_IndexingMlVerticalVerticalItemOut",
        "NlpSemanticParsingDatetimeRecurrentIn": "_contentwarehouse_2304_NlpSemanticParsingDatetimeRecurrentIn",
        "NlpSemanticParsingDatetimeRecurrentOut": "_contentwarehouse_2305_NlpSemanticParsingDatetimeRecurrentOut",
        "NlpSemanticParsingModelsPersonPersonIn": "_contentwarehouse_2306_NlpSemanticParsingModelsPersonPersonIn",
        "NlpSemanticParsingModelsPersonPersonOut": "_contentwarehouse_2307_NlpSemanticParsingModelsPersonPersonOut",
        "NlpSemanticParsingNumberNumberIn": "_contentwarehouse_2308_NlpSemanticParsingNumberNumberIn",
        "NlpSemanticParsingNumberNumberOut": "_contentwarehouse_2309_NlpSemanticParsingNumberNumberOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataIn": "_contentwarehouse_2310_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataOut": "_contentwarehouse_2311_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataOut",
        "GeostoreLinearStripePatternProtoIn": "_contentwarehouse_2312_GeostoreLinearStripePatternProtoIn",
        "GeostoreLinearStripePatternProtoOut": "_contentwarehouse_2313_GeostoreLinearStripePatternProtoOut",
        "YoutubeCommentsClusteringMiniStanzaIn": "_contentwarehouse_2314_YoutubeCommentsClusteringMiniStanzaIn",
        "YoutubeCommentsClusteringMiniStanzaOut": "_contentwarehouse_2315_YoutubeCommentsClusteringMiniStanzaOut",
        "RepositoryWebrefImageQueryIndicesIn": "_contentwarehouse_2316_RepositoryWebrefImageQueryIndicesIn",
        "RepositoryWebrefImageQueryIndicesOut": "_contentwarehouse_2317_RepositoryWebrefImageQueryIndicesOut",
        "GeostoreTimezoneProtoIn": "_contentwarehouse_2318_GeostoreTimezoneProtoIn",
        "GeostoreTimezoneProtoOut": "_contentwarehouse_2319_GeostoreTimezoneProtoOut",
        "QualityCalypsoAppsUniversalImageIn": "_contentwarehouse_2320_QualityCalypsoAppsUniversalImageIn",
        "QualityCalypsoAppsUniversalImageOut": "_contentwarehouse_2321_QualityCalypsoAppsUniversalImageOut",
        "AssistantGroundingRankerGroundingProviderFeaturesIn": "_contentwarehouse_2322_AssistantGroundingRankerGroundingProviderFeaturesIn",
        "AssistantGroundingRankerGroundingProviderFeaturesOut": "_contentwarehouse_2323_AssistantGroundingRankerGroundingProviderFeaturesOut",
        "GoogleTypeLatLngIn": "_contentwarehouse_2324_GoogleTypeLatLngIn",
        "GoogleTypeLatLngOut": "_contentwarehouse_2325_GoogleTypeLatLngOut",
        "ImageRepositoryDeepImageEngagingnessOutputIn": "_contentwarehouse_2326_ImageRepositoryDeepImageEngagingnessOutputIn",
        "ImageRepositoryDeepImageEngagingnessOutputOut": "_contentwarehouse_2327_ImageRepositoryDeepImageEngagingnessOutputOut",
        "VideoLegosLegosAnnotationsSetsIn": "_contentwarehouse_2328_VideoLegosLegosAnnotationsSetsIn",
        "VideoLegosLegosAnnotationsSetsOut": "_contentwarehouse_2329_VideoLegosLegosAnnotationsSetsOut",
        "QualityDialogManagerLocalResultIn": "_contentwarehouse_2330_QualityDialogManagerLocalResultIn",
        "QualityDialogManagerLocalResultOut": "_contentwarehouse_2331_QualityDialogManagerLocalResultOut",
        "GenericSnippetResponseIn": "_contentwarehouse_2332_GenericSnippetResponseIn",
        "GenericSnippetResponseOut": "_contentwarehouse_2333_GenericSnippetResponseOut",
        "GoogleCloudContentwarehouseV1DocumentQueryIn": "_contentwarehouse_2334_GoogleCloudContentwarehouseV1DocumentQueryIn",
        "GoogleCloudContentwarehouseV1DocumentQueryOut": "_contentwarehouse_2335_GoogleCloudContentwarehouseV1DocumentQueryOut",
        "AppsDynamiteSharedOrganizationInfoConsumerInfoIn": "_contentwarehouse_2336_AppsDynamiteSharedOrganizationInfoConsumerInfoIn",
        "AppsDynamiteSharedOrganizationInfoConsumerInfoOut": "_contentwarehouse_2337_AppsDynamiteSharedOrganizationInfoConsumerInfoOut",
        "AssistantApiDeviceCapabilitiesIn": "_contentwarehouse_2338_AssistantApiDeviceCapabilitiesIn",
        "AssistantApiDeviceCapabilitiesOut": "_contentwarehouse_2339_AssistantApiDeviceCapabilitiesOut",
        "KnowledgeAnswersIntentQueryShoppingIdsIn": "_contentwarehouse_2340_KnowledgeAnswersIntentQueryShoppingIdsIn",
        "KnowledgeAnswersIntentQueryShoppingIdsOut": "_contentwarehouse_2341_KnowledgeAnswersIntentQueryShoppingIdsOut",
        "ImageSearchUnindexedImageLinkIn": "_contentwarehouse_2342_ImageSearchUnindexedImageLinkIn",
        "ImageSearchUnindexedImageLinkOut": "_contentwarehouse_2343_ImageSearchUnindexedImageLinkOut",
        "NlpSciencelitRetrievalQueryEncodingDebugInfoIn": "_contentwarehouse_2344_NlpSciencelitRetrievalQueryEncodingDebugInfoIn",
        "NlpSciencelitRetrievalQueryEncodingDebugInfoOut": "_contentwarehouse_2345_NlpSciencelitRetrievalQueryEncodingDebugInfoOut",
        "DrishtiFeatureSetDataIn": "_contentwarehouse_2346_DrishtiFeatureSetDataIn",
        "DrishtiFeatureSetDataOut": "_contentwarehouse_2347_DrishtiFeatureSetDataOut",
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateIn": "_contentwarehouse_2348_AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateIn",
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateOut": "_contentwarehouse_2349_AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateOut",
        "AssistantVerticalsHomeautomationProtoCommonEventTriggerIn": "_contentwarehouse_2350_AssistantVerticalsHomeautomationProtoCommonEventTriggerIn",
        "AssistantVerticalsHomeautomationProtoCommonEventTriggerOut": "_contentwarehouse_2351_AssistantVerticalsHomeautomationProtoCommonEventTriggerOut",
        "PhotosHdrMetadataIn": "_contentwarehouse_2352_PhotosHdrMetadataIn",
        "PhotosHdrMetadataOut": "_contentwarehouse_2353_PhotosHdrMetadataOut",
        "CorpusSelectionInfoIn": "_contentwarehouse_2354_CorpusSelectionInfoIn",
        "CorpusSelectionInfoOut": "_contentwarehouse_2355_CorpusSelectionInfoOut",
        "BiasingPerDocDataBiasingFieldIn": "_contentwarehouse_2356_BiasingPerDocDataBiasingFieldIn",
        "BiasingPerDocDataBiasingFieldOut": "_contentwarehouse_2357_BiasingPerDocDataBiasingFieldOut",
        "LegalCitationCourtDocumentOpinionInfoIn": "_contentwarehouse_2358_LegalCitationCourtDocumentOpinionInfoIn",
        "LegalCitationCourtDocumentOpinionInfoOut": "_contentwarehouse_2359_LegalCitationCourtDocumentOpinionInfoOut",
        "ResearchScienceSearchVersionClusterInfoIn": "_contentwarehouse_2360_ResearchScienceSearchVersionClusterInfoIn",
        "ResearchScienceSearchVersionClusterInfoOut": "_contentwarehouse_2361_ResearchScienceSearchVersionClusterInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiBraggingRightsIn": "_contentwarehouse_2362_AppsPeopleOzExternalMergedpeopleapiBraggingRightsIn",
        "AppsPeopleOzExternalMergedpeopleapiBraggingRightsOut": "_contentwarehouse_2363_AppsPeopleOzExternalMergedpeopleapiBraggingRightsOut",
        "AssistantRemindersAttachmentLinkIn": "_contentwarehouse_2364_AssistantRemindersAttachmentLinkIn",
        "AssistantRemindersAttachmentLinkOut": "_contentwarehouse_2365_AssistantRemindersAttachmentLinkOut",
        "TrawlerThrottleClientDataIn": "_contentwarehouse_2366_TrawlerThrottleClientDataIn",
        "TrawlerThrottleClientDataOut": "_contentwarehouse_2367_TrawlerThrottleClientDataOut",
        "OceanDocTagWorkClusterIn": "_contentwarehouse_2368_OceanDocTagWorkClusterIn",
        "OceanDocTagWorkClusterOut": "_contentwarehouse_2369_OceanDocTagWorkClusterOut",
        "ShoppingWebentityShoppingAnnotationInferredImageIn": "_contentwarehouse_2370_ShoppingWebentityShoppingAnnotationInferredImageIn",
        "ShoppingWebentityShoppingAnnotationInferredImageOut": "_contentwarehouse_2371_ShoppingWebentityShoppingAnnotationInferredImageOut",
        "AssistantApiMediaControlSupportIn": "_contentwarehouse_2372_AssistantApiMediaControlSupportIn",
        "AssistantApiMediaControlSupportOut": "_contentwarehouse_2373_AssistantApiMediaControlSupportOut",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionIn": "_contentwarehouse_2374_AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionIn",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionOut": "_contentwarehouse_2375_AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionOut",
        "AssistantApiAudioOutputIn": "_contentwarehouse_2376_AssistantApiAudioOutputIn",
        "AssistantApiAudioOutputOut": "_contentwarehouse_2377_AssistantApiAudioOutputOut",
        "VendingConsumerProtoTrustedGenomePolicyIn": "_contentwarehouse_2378_VendingConsumerProtoTrustedGenomePolicyIn",
        "VendingConsumerProtoTrustedGenomePolicyOut": "_contentwarehouse_2379_VendingConsumerProtoTrustedGenomePolicyOut",
        "GeostoreFeatureHistoryMetadataProtoIn": "_contentwarehouse_2380_GeostoreFeatureHistoryMetadataProtoIn",
        "GeostoreFeatureHistoryMetadataProtoOut": "_contentwarehouse_2381_GeostoreFeatureHistoryMetadataProtoOut",
        "NlpSaftSemanticNodeArcIn": "_contentwarehouse_2382_NlpSaftSemanticNodeArcIn",
        "NlpSaftSemanticNodeArcOut": "_contentwarehouse_2383_NlpSaftSemanticNodeArcOut",
        "GeostoreFoodMenuItemOptionProtoIngredientIn": "_contentwarehouse_2384_GeostoreFoodMenuItemOptionProtoIngredientIn",
        "GeostoreFoodMenuItemOptionProtoIngredientOut": "_contentwarehouse_2385_GeostoreFoodMenuItemOptionProtoIngredientOut",
        "AssistantGroundingRankerLaaFeatureIn": "_contentwarehouse_2386_AssistantGroundingRankerLaaFeatureIn",
        "AssistantGroundingRankerLaaFeatureOut": "_contentwarehouse_2387_AssistantGroundingRankerLaaFeatureOut",
        "RepositoryWebrefNgramMentionIn": "_contentwarehouse_2388_RepositoryWebrefNgramMentionIn",
        "RepositoryWebrefNgramMentionOut": "_contentwarehouse_2389_RepositoryWebrefNgramMentionOut",
        "SocialGraphApiProtoPronounEntryIn": "_contentwarehouse_2390_SocialGraphApiProtoPronounEntryIn",
        "SocialGraphApiProtoPronounEntryOut": "_contentwarehouse_2391_SocialGraphApiProtoPronounEntryOut",
        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetIn": "_contentwarehouse_2392_ImageRepositoryShoppingProductInformationVersionedProductInformationSetIn",
        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetOut": "_contentwarehouse_2393_ImageRepositoryShoppingProductInformationVersionedProductInformationSetOut",
        "AssistantApiCoreTypesGovernedDeviceConfigIn": "_contentwarehouse_2394_AssistantApiCoreTypesGovernedDeviceConfigIn",
        "AssistantApiCoreTypesGovernedDeviceConfigOut": "_contentwarehouse_2395_AssistantApiCoreTypesGovernedDeviceConfigOut",
        "VideoContentSearchVideoAnchorsScoreInfoIn": "_contentwarehouse_2396_VideoContentSearchVideoAnchorsScoreInfoIn",
        "VideoContentSearchVideoAnchorsScoreInfoOut": "_contentwarehouse_2397_VideoContentSearchVideoAnchorsScoreInfoOut",
        "IndexingDupsLocalizedLocalizedClusterIn": "_contentwarehouse_2398_IndexingDupsLocalizedLocalizedClusterIn",
        "IndexingDupsLocalizedLocalizedClusterOut": "_contentwarehouse_2399_IndexingDupsLocalizedLocalizedClusterOut",
        "RepositoryWebrefWebrefEntityCollectionsIn": "_contentwarehouse_2400_RepositoryWebrefWebrefEntityCollectionsIn",
        "RepositoryWebrefWebrefEntityCollectionsOut": "_contentwarehouse_2401_RepositoryWebrefWebrefEntityCollectionsOut",
        "GoodocParagraphRouteIn": "_contentwarehouse_2402_GoodocParagraphRouteIn",
        "GoodocParagraphRouteOut": "_contentwarehouse_2403_GoodocParagraphRouteOut",
        "RepositoryWebrefSegmentMentionIn": "_contentwarehouse_2404_RepositoryWebrefSegmentMentionIn",
        "RepositoryWebrefSegmentMentionOut": "_contentwarehouse_2405_RepositoryWebrefSegmentMentionOut",
        "AssistantContextMediaProviderIdIn": "_contentwarehouse_2406_AssistantContextMediaProviderIdIn",
        "AssistantContextMediaProviderIdOut": "_contentwarehouse_2407_AssistantContextMediaProviderIdOut",
        "KnowledgeAnswersIntentQuerySimpleValueIn": "_contentwarehouse_2408_KnowledgeAnswersIntentQuerySimpleValueIn",
        "KnowledgeAnswersIntentQuerySimpleValueOut": "_contentwarehouse_2409_KnowledgeAnswersIntentQuerySimpleValueOut",
        "KnowledgeAnswersCompoundTypeIn": "_contentwarehouse_2410_KnowledgeAnswersCompoundTypeIn",
        "KnowledgeAnswersCompoundTypeOut": "_contentwarehouse_2411_KnowledgeAnswersCompoundTypeOut",
        "QualitySitemapBreadcrumbTargetIn": "_contentwarehouse_2412_QualitySitemapBreadcrumbTargetIn",
        "QualitySitemapBreadcrumbTargetOut": "_contentwarehouse_2413_QualitySitemapBreadcrumbTargetOut",
        "SecurityCredentialsOAuthConsumerProtoIn": "_contentwarehouse_2414_SecurityCredentialsOAuthConsumerProtoIn",
        "SecurityCredentialsOAuthConsumerProtoOut": "_contentwarehouse_2415_SecurityCredentialsOAuthConsumerProtoOut",
        "KnowledgeAnswersTrackingNumberTypeIn": "_contentwarehouse_2416_KnowledgeAnswersTrackingNumberTypeIn",
        "KnowledgeAnswersTrackingNumberTypeOut": "_contentwarehouse_2417_KnowledgeAnswersTrackingNumberTypeOut",
        "KnowledgeAnswersOpaqueShoppingStoreTypeIn": "_contentwarehouse_2418_KnowledgeAnswersOpaqueShoppingStoreTypeIn",
        "KnowledgeAnswersOpaqueShoppingStoreTypeOut": "_contentwarehouse_2419_KnowledgeAnswersOpaqueShoppingStoreTypeOut",
        "VideoAmbisonicsAmbisonicsMetadataIn": "_contentwarehouse_2420_VideoAmbisonicsAmbisonicsMetadataIn",
        "VideoAmbisonicsAmbisonicsMetadataOut": "_contentwarehouse_2421_VideoAmbisonicsAmbisonicsMetadataOut",
        "WWWDocInfoThumbnailIn": "_contentwarehouse_2422_WWWDocInfoThumbnailIn",
        "WWWDocInfoThumbnailOut": "_contentwarehouse_2423_WWWDocInfoThumbnailOut",
        "GoogleCloudDocumentaiV1DocumentPageTableIn": "_contentwarehouse_2424_GoogleCloudDocumentaiV1DocumentPageTableIn",
        "GoogleCloudDocumentaiV1DocumentPageTableOut": "_contentwarehouse_2425_GoogleCloudDocumentaiV1DocumentPageTableOut",
        "RepositoryWebrefAnnotatorCheckpointFprintIn": "_contentwarehouse_2426_RepositoryWebrefAnnotatorCheckpointFprintIn",
        "RepositoryWebrefAnnotatorCheckpointFprintOut": "_contentwarehouse_2427_RepositoryWebrefAnnotatorCheckpointFprintOut",
        "QualityCalypsoAppsUniversalAuLiveOpDetailIn": "_contentwarehouse_2428_QualityCalypsoAppsUniversalAuLiveOpDetailIn",
        "QualityCalypsoAppsUniversalAuLiveOpDetailOut": "_contentwarehouse_2429_QualityCalypsoAppsUniversalAuLiveOpDetailOut",
        "KnowledgeAnswersIntentQueryQrefAnnotationSignalsIn": "_contentwarehouse_2430_KnowledgeAnswersIntentQueryQrefAnnotationSignalsIn",
        "KnowledgeAnswersIntentQueryQrefAnnotationSignalsOut": "_contentwarehouse_2431_KnowledgeAnswersIntentQueryQrefAnnotationSignalsOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataIn": "_contentwarehouse_2432_AssistantApiCoreTypesGovernedRingtoneTaskMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOut": "_contentwarehouse_2433_AssistantApiCoreTypesGovernedRingtoneTaskMetadataOut",
        "RepositoryWebrefNameScoresIn": "_contentwarehouse_2434_RepositoryWebrefNameScoresIn",
        "RepositoryWebrefNameScoresOut": "_contentwarehouse_2435_RepositoryWebrefNameScoresOut",
        "GoogleCloudContentwarehouseV1RuleEngineOutputIn": "_contentwarehouse_2436_GoogleCloudContentwarehouseV1RuleEngineOutputIn",
        "GoogleCloudContentwarehouseV1RuleEngineOutputOut": "_contentwarehouse_2437_GoogleCloudContentwarehouseV1RuleEngineOutputOut",
        "GeostoreOperationsProtoIn": "_contentwarehouse_2438_GeostoreOperationsProtoIn",
        "GeostoreOperationsProtoOut": "_contentwarehouse_2439_GeostoreOperationsProtoOut",
        "NlpSemanticParsingDatetimeDateTimeIn": "_contentwarehouse_2440_NlpSemanticParsingDatetimeDateTimeIn",
        "NlpSemanticParsingDatetimeDateTimeOut": "_contentwarehouse_2441_NlpSemanticParsingDatetimeDateTimeOut",
        "RepositoryWebrefWebrefAnnotationStatsIn": "_contentwarehouse_2442_RepositoryWebrefWebrefAnnotationStatsIn",
        "RepositoryWebrefWebrefAnnotationStatsOut": "_contentwarehouse_2443_RepositoryWebrefWebrefAnnotationStatsOut",
        "AppsPeopleOzExternalMergedpeopleapiSipAddressIn": "_contentwarehouse_2444_AppsPeopleOzExternalMergedpeopleapiSipAddressIn",
        "AppsPeopleOzExternalMergedpeopleapiSipAddressOut": "_contentwarehouse_2445_AppsPeopleOzExternalMergedpeopleapiSipAddressOut",
        "SecurityCredentialsSimpleSecretHolderProtoIn": "_contentwarehouse_2446_SecurityCredentialsSimpleSecretHolderProtoIn",
        "SecurityCredentialsSimpleSecretHolderProtoOut": "_contentwarehouse_2447_SecurityCredentialsSimpleSecretHolderProtoOut",
        "VideoContentSearchGenerativePredictionFeaturesIn": "_contentwarehouse_2448_VideoContentSearchGenerativePredictionFeaturesIn",
        "VideoContentSearchGenerativePredictionFeaturesOut": "_contentwarehouse_2449_VideoContentSearchGenerativePredictionFeaturesOut",
        "PhotosPanoramaMetadataIn": "_contentwarehouse_2450_PhotosPanoramaMetadataIn",
        "PhotosPanoramaMetadataOut": "_contentwarehouse_2451_PhotosPanoramaMetadataOut",
        "GoogleApiServiceconsumermanagementV1BillingConfigIn": "_contentwarehouse_2452_GoogleApiServiceconsumermanagementV1BillingConfigIn",
        "GoogleApiServiceconsumermanagementV1BillingConfigOut": "_contentwarehouse_2453_GoogleApiServiceconsumermanagementV1BillingConfigOut",
        "DocPropertiesBadTitleInfoIn": "_contentwarehouse_2454_DocPropertiesBadTitleInfoIn",
        "DocPropertiesBadTitleInfoOut": "_contentwarehouse_2455_DocPropertiesBadTitleInfoOut",
        "IndexingDocjoinerDataVersionVersionInfoIn": "_contentwarehouse_2456_IndexingDocjoinerDataVersionVersionInfoIn",
        "IndexingDocjoinerDataVersionVersionInfoOut": "_contentwarehouse_2457_IndexingDocjoinerDataVersionVersionInfoOut",
        "AbuseiamClusterEvaluationContextIn": "_contentwarehouse_2458_AbuseiamClusterEvaluationContextIn",
        "AbuseiamClusterEvaluationContextOut": "_contentwarehouse_2459_AbuseiamClusterEvaluationContextOut",
        "RepositoryWebrefDocLevelRelevanceRatingsIn": "_contentwarehouse_2460_RepositoryWebrefDocLevelRelevanceRatingsIn",
        "RepositoryWebrefDocLevelRelevanceRatingsOut": "_contentwarehouse_2461_RepositoryWebrefDocLevelRelevanceRatingsOut",
        "AssistantApiCoreTypesIosAppInfoIn": "_contentwarehouse_2462_AssistantApiCoreTypesIosAppInfoIn",
        "AssistantApiCoreTypesIosAppInfoOut": "_contentwarehouse_2463_AssistantApiCoreTypesIosAppInfoOut",
        "NlpSemanticParsingModelsCommunicationRecipientIn": "_contentwarehouse_2464_NlpSemanticParsingModelsCommunicationRecipientIn",
        "NlpSemanticParsingModelsCommunicationRecipientOut": "_contentwarehouse_2465_NlpSemanticParsingModelsCommunicationRecipientOut",
        "GoogleCloudContentwarehouseV1InitializeProjectRequestIn": "_contentwarehouse_2466_GoogleCloudContentwarehouseV1InitializeProjectRequestIn",
        "GoogleCloudContentwarehouseV1InitializeProjectRequestOut": "_contentwarehouse_2467_GoogleCloudContentwarehouseV1InitializeProjectRequestOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorIn": "_contentwarehouse_2468_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorOut": "_contentwarehouse_2469_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorOut",
        "QualityCopiaFireflySiteSignalIn": "_contentwarehouse_2470_QualityCopiaFireflySiteSignalIn",
        "QualityCopiaFireflySiteSignalOut": "_contentwarehouse_2471_QualityCopiaFireflySiteSignalOut",
        "AssistantRemindersNlgTemplateKeyIn": "_contentwarehouse_2472_AssistantRemindersNlgTemplateKeyIn",
        "AssistantRemindersNlgTemplateKeyOut": "_contentwarehouse_2473_AssistantRemindersNlgTemplateKeyOut",
        "NlpSemanticParsingDatetimeShiftedRelativeDateTimeIn": "_contentwarehouse_2474_NlpSemanticParsingDatetimeShiftedRelativeDateTimeIn",
        "NlpSemanticParsingDatetimeShiftedRelativeDateTimeOut": "_contentwarehouse_2475_NlpSemanticParsingDatetimeShiftedRelativeDateTimeOut",
        "NlpSemanticParsingModelsMoneyCurrencyIn": "_contentwarehouse_2476_NlpSemanticParsingModelsMoneyCurrencyIn",
        "NlpSemanticParsingModelsMoneyCurrencyOut": "_contentwarehouse_2477_NlpSemanticParsingModelsMoneyCurrencyOut",
        "NlpSemanticParsingRelatedEntityIn": "_contentwarehouse_2478_NlpSemanticParsingRelatedEntityIn",
        "NlpSemanticParsingRelatedEntityOut": "_contentwarehouse_2479_NlpSemanticParsingRelatedEntityOut",
        "SocialCommonHashtagDataIn": "_contentwarehouse_2480_SocialCommonHashtagDataIn",
        "SocialCommonHashtagDataOut": "_contentwarehouse_2481_SocialCommonHashtagDataOut",
        "VideoVideoClipInfoIn": "_contentwarehouse_2482_VideoVideoClipInfoIn",
        "VideoVideoClipInfoOut": "_contentwarehouse_2483_VideoVideoClipInfoOut",
        "OceanVolumeDisplayDetailsIn": "_contentwarehouse_2484_OceanVolumeDisplayDetailsIn",
        "OceanVolumeDisplayDetailsOut": "_contentwarehouse_2485_OceanVolumeDisplayDetailsOut",
        "GeostoreVariableSpeedProtoIn": "_contentwarehouse_2486_GeostoreVariableSpeedProtoIn",
        "GeostoreVariableSpeedProtoOut": "_contentwarehouse_2487_GeostoreVariableSpeedProtoOut",
        "IndexingEmbeddedContentSelectionResultIn": "_contentwarehouse_2488_IndexingEmbeddedContentSelectionResultIn",
        "IndexingEmbeddedContentSelectionResultOut": "_contentwarehouse_2489_IndexingEmbeddedContentSelectionResultOut",
        "AssistantApiSettingsAutoFramingSettingsIn": "_contentwarehouse_2490_AssistantApiSettingsAutoFramingSettingsIn",
        "AssistantApiSettingsAutoFramingSettingsOut": "_contentwarehouse_2491_AssistantApiSettingsAutoFramingSettingsOut",
        "AssistantVerticalsHomeautomationProtoPhysicalLocationIn": "_contentwarehouse_2492_AssistantVerticalsHomeautomationProtoPhysicalLocationIn",
        "AssistantVerticalsHomeautomationProtoPhysicalLocationOut": "_contentwarehouse_2493_AssistantVerticalsHomeautomationProtoPhysicalLocationOut",
        "RepositoryWebrefCategoryAnnotationIn": "_contentwarehouse_2494_RepositoryWebrefCategoryAnnotationIn",
        "RepositoryWebrefCategoryAnnotationOut": "_contentwarehouse_2495_RepositoryWebrefCategoryAnnotationOut",
        "QualityGeoBrainlocBrainlocAttachmentIn": "_contentwarehouse_2496_QualityGeoBrainlocBrainlocAttachmentIn",
        "QualityGeoBrainlocBrainlocAttachmentOut": "_contentwarehouse_2497_QualityGeoBrainlocBrainlocAttachmentOut",
        "GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn": "_contentwarehouse_2498_GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn",
        "GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut": "_contentwarehouse_2499_GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut",
        "LegalCitationCourtDocumentIn": "_contentwarehouse_2500_LegalCitationCourtDocumentIn",
        "LegalCitationCourtDocumentOut": "_contentwarehouse_2501_LegalCitationCourtDocumentOut",
        "NlpSemanticParsingModelsMediaPodcastIn": "_contentwarehouse_2502_NlpSemanticParsingModelsMediaPodcastIn",
        "NlpSemanticParsingModelsMediaPodcastOut": "_contentwarehouse_2503_NlpSemanticParsingModelsMediaPodcastOut",
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoIn": "_contentwarehouse_2504_AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoOut": "_contentwarehouse_2505_AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoOut",
        "GeostoreSpeedProtoIn": "_contentwarehouse_2506_GeostoreSpeedProtoIn",
        "GeostoreSpeedProtoOut": "_contentwarehouse_2507_GeostoreSpeedProtoOut",
        "RepositoryWebrefPreprocessingNameVariantSignalsIn": "_contentwarehouse_2508_RepositoryWebrefPreprocessingNameVariantSignalsIn",
        "RepositoryWebrefPreprocessingNameVariantSignalsOut": "_contentwarehouse_2509_RepositoryWebrefPreprocessingNameVariantSignalsOut",
        "QualityCalypsoAppsUniversalAuLiveOpFormatIn": "_contentwarehouse_2510_QualityCalypsoAppsUniversalAuLiveOpFormatIn",
        "QualityCalypsoAppsUniversalAuLiveOpFormatOut": "_contentwarehouse_2511_QualityCalypsoAppsUniversalAuLiveOpFormatOut",
        "AssistantApiCoreTypesAndroidAppInfoIn": "_contentwarehouse_2512_AssistantApiCoreTypesAndroidAppInfoIn",
        "AssistantApiCoreTypesAndroidAppInfoOut": "_contentwarehouse_2513_AssistantApiCoreTypesAndroidAppInfoOut",
        "GoogleInternalAppsWaldoV1alphaUserAvailabilityIn": "_contentwarehouse_2514_GoogleInternalAppsWaldoV1alphaUserAvailabilityIn",
        "GoogleInternalAppsWaldoV1alphaUserAvailabilityOut": "_contentwarehouse_2515_GoogleInternalAppsWaldoV1alphaUserAvailabilityOut",
        "GoogleInternalAppsWaldoV1alphaUserContextIn": "_contentwarehouse_2516_GoogleInternalAppsWaldoV1alphaUserContextIn",
        "GoogleInternalAppsWaldoV1alphaUserContextOut": "_contentwarehouse_2517_GoogleInternalAppsWaldoV1alphaUserContextOut",
        "RepositoryWebrefLinkKindInfoIn": "_contentwarehouse_2518_RepositoryWebrefLinkKindInfoIn",
        "RepositoryWebrefLinkKindInfoOut": "_contentwarehouse_2519_RepositoryWebrefLinkKindInfoOut",
        "SocialStanzaStanzaRestrictionIn": "_contentwarehouse_2520_SocialStanzaStanzaRestrictionIn",
        "SocialStanzaStanzaRestrictionOut": "_contentwarehouse_2521_SocialStanzaStanzaRestrictionOut",
        "KnowledgeAnswersMarkerCommandIn": "_contentwarehouse_2522_KnowledgeAnswersMarkerCommandIn",
        "KnowledgeAnswersMarkerCommandOut": "_contentwarehouse_2523_KnowledgeAnswersMarkerCommandOut",
        "GoogleCloudContentwarehouseV1ListLinkedSourcesRequestIn": "_contentwarehouse_2524_GoogleCloudContentwarehouseV1ListLinkedSourcesRequestIn",
        "GoogleCloudContentwarehouseV1ListLinkedSourcesRequestOut": "_contentwarehouse_2525_GoogleCloudContentwarehouseV1ListLinkedSourcesRequestOut",
        "AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateIn": "_contentwarehouse_2526_AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateIn",
        "AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateOut": "_contentwarehouse_2527_AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateOut",
        "GoodocParagraphDroppedCapIn": "_contentwarehouse_2528_GoodocParagraphDroppedCapIn",
        "GoodocParagraphDroppedCapOut": "_contentwarehouse_2529_GoodocParagraphDroppedCapOut",
        "AssistantApiSettingsAmbientSettingsIn": "_contentwarehouse_2530_AssistantApiSettingsAmbientSettingsIn",
        "AssistantApiSettingsAmbientSettingsOut": "_contentwarehouse_2531_AssistantApiSettingsAmbientSettingsOut",
        "GeostoreElevationProtoIn": "_contentwarehouse_2532_GeostoreElevationProtoIn",
        "GeostoreElevationProtoOut": "_contentwarehouse_2533_GeostoreElevationProtoOut",
        "FatcatCompactTaxonomicClassificationIn": "_contentwarehouse_2534_FatcatCompactTaxonomicClassificationIn",
        "FatcatCompactTaxonomicClassificationOut": "_contentwarehouse_2535_FatcatCompactTaxonomicClassificationOut",
        "QualityFringeFringeQueryPriorPerDocDataIn": "_contentwarehouse_2536_QualityFringeFringeQueryPriorPerDocDataIn",
        "QualityFringeFringeQueryPriorPerDocDataOut": "_contentwarehouse_2537_QualityFringeFringeQueryPriorPerDocDataOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataIn": "_contentwarehouse_2538_IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataOut": "_contentwarehouse_2539_IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataOut",
        "KnowledgeAnswersIntentQueryGroundingSignalsIn": "_contentwarehouse_2540_KnowledgeAnswersIntentQueryGroundingSignalsIn",
        "KnowledgeAnswersIntentQueryGroundingSignalsOut": "_contentwarehouse_2541_KnowledgeAnswersIntentQueryGroundingSignalsOut",
        "StorageGraphBfgLivegraphProvenanceMetadataIn": "_contentwarehouse_2542_StorageGraphBfgLivegraphProvenanceMetadataIn",
        "StorageGraphBfgLivegraphProvenanceMetadataOut": "_contentwarehouse_2543_StorageGraphBfgLivegraphProvenanceMetadataOut",
        "LensDiscoveryStyleBoundingBoxIn": "_contentwarehouse_2544_LensDiscoveryStyleBoundingBoxIn",
        "LensDiscoveryStyleBoundingBoxOut": "_contentwarehouse_2545_LensDiscoveryStyleBoundingBoxOut",
        "NlpSemanticParsingDatetimeQuantityIn": "_contentwarehouse_2546_NlpSemanticParsingDatetimeQuantityIn",
        "NlpSemanticParsingDatetimeQuantityOut": "_contentwarehouse_2547_NlpSemanticParsingDatetimeQuantityOut",
        "GoogleAssistantEmbeddedV1AlarmRecurrenceIn": "_contentwarehouse_2548_GoogleAssistantEmbeddedV1AlarmRecurrenceIn",
        "GoogleAssistantEmbeddedV1AlarmRecurrenceOut": "_contentwarehouse_2549_GoogleAssistantEmbeddedV1AlarmRecurrenceOut",
        "GoogleCloudDocumentaiV1DocumentIn": "_contentwarehouse_2550_GoogleCloudDocumentaiV1DocumentIn",
        "GoogleCloudDocumentaiV1DocumentOut": "_contentwarehouse_2551_GoogleCloudDocumentaiV1DocumentOut",
        "AppsPeopleOzExternalMergedpeopleapiCalendarIn": "_contentwarehouse_2552_AppsPeopleOzExternalMergedpeopleapiCalendarIn",
        "AppsPeopleOzExternalMergedpeopleapiCalendarOut": "_contentwarehouse_2553_AppsPeopleOzExternalMergedpeopleapiCalendarOut",
        "AssistantDevicesPlatformProtoSecurityConfigIn": "_contentwarehouse_2554_AssistantDevicesPlatformProtoSecurityConfigIn",
        "AssistantDevicesPlatformProtoSecurityConfigOut": "_contentwarehouse_2555_AssistantDevicesPlatformProtoSecurityConfigOut",
        "GeostoreAppliedSpeedLimitProtoIn": "_contentwarehouse_2556_GeostoreAppliedSpeedLimitProtoIn",
        "GeostoreAppliedSpeedLimitProtoOut": "_contentwarehouse_2557_GeostoreAppliedSpeedLimitProtoOut",
        "GoodocRoutePointIn": "_contentwarehouse_2558_GoodocRoutePointIn",
        "GoodocRoutePointOut": "_contentwarehouse_2559_GoodocRoutePointOut",
        "SocialGraphApiProtoRelativePositionIn": "_contentwarehouse_2560_SocialGraphApiProtoRelativePositionIn",
        "SocialGraphApiProtoRelativePositionOut": "_contentwarehouse_2561_SocialGraphApiProtoRelativePositionOut",
        "GoodocSummaryStatsIn": "_contentwarehouse_2562_GoodocSummaryStatsIn",
        "GoodocSummaryStatsOut": "_contentwarehouse_2563_GoodocSummaryStatsOut",
        "GoodocLanguageLabelIn": "_contentwarehouse_2564_GoodocLanguageLabelIn",
        "GoodocLanguageLabelOut": "_contentwarehouse_2565_GoodocLanguageLabelOut",
        "GoogleCloudContentwarehouseV1IntegerArrayIn": "_contentwarehouse_2566_GoogleCloudContentwarehouseV1IntegerArrayIn",
        "GoogleCloudContentwarehouseV1IntegerArrayOut": "_contentwarehouse_2567_GoogleCloudContentwarehouseV1IntegerArrayOut",
        "HtmlrenderWebkitHeadlessProtoRedirectEventIn": "_contentwarehouse_2568_HtmlrenderWebkitHeadlessProtoRedirectEventIn",
        "HtmlrenderWebkitHeadlessProtoRedirectEventOut": "_contentwarehouse_2569_HtmlrenderWebkitHeadlessProtoRedirectEventOut",
        "IndexingDocjoinerAnchorTrustedInfoIn": "_contentwarehouse_2570_IndexingDocjoinerAnchorTrustedInfoIn",
        "IndexingDocjoinerAnchorTrustedInfoOut": "_contentwarehouse_2571_IndexingDocjoinerAnchorTrustedInfoOut",
        "AssistantDevicesPlatformProtoMediaStopCapabilityIn": "_contentwarehouse_2572_AssistantDevicesPlatformProtoMediaStopCapabilityIn",
        "AssistantDevicesPlatformProtoMediaStopCapabilityOut": "_contentwarehouse_2573_AssistantDevicesPlatformProtoMediaStopCapabilityOut",
        "ImageSearchImageLicenseInfoIn": "_contentwarehouse_2574_ImageSearchImageLicenseInfoIn",
        "ImageSearchImageLicenseInfoOut": "_contentwarehouse_2575_ImageSearchImageLicenseInfoOut",
        "NlxDataSchemaMentionIn": "_contentwarehouse_2576_NlxDataSchemaMentionIn",
        "NlxDataSchemaMentionOut": "_contentwarehouse_2577_NlxDataSchemaMentionOut",
        "GoogleCloudContentwarehouseV1DataValidationActionIn": "_contentwarehouse_2578_GoogleCloudContentwarehouseV1DataValidationActionIn",
        "GoogleCloudContentwarehouseV1DataValidationActionOut": "_contentwarehouse_2579_GoogleCloudContentwarehouseV1DataValidationActionOut",
        "ImageMoosedogCrawlStateIn": "_contentwarehouse_2580_ImageMoosedogCrawlStateIn",
        "ImageMoosedogCrawlStateOut": "_contentwarehouse_2581_ImageMoosedogCrawlStateOut",
        "VideoFileSphericalMetadataViewDirectionIn": "_contentwarehouse_2582_VideoFileSphericalMetadataViewDirectionIn",
        "VideoFileSphericalMetadataViewDirectionOut": "_contentwarehouse_2583_VideoFileSphericalMetadataViewDirectionOut",
        "PhotosFourCMetadataIn": "_contentwarehouse_2584_PhotosFourCMetadataIn",
        "PhotosFourCMetadataOut": "_contentwarehouse_2585_PhotosFourCMetadataOut",
        "NlpLoggingQRewriteClientCallPathInfoIn": "_contentwarehouse_2586_NlpLoggingQRewriteClientCallPathInfoIn",
        "NlpLoggingQRewriteClientCallPathInfoOut": "_contentwarehouse_2587_NlpLoggingQRewriteClientCallPathInfoOut",
        "YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn": "_contentwarehouse_2588_YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn",
        "YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut": "_contentwarehouse_2589_YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut",
        "QualitySnippetsTruncationSnippetBoldedRangePositionIn": "_contentwarehouse_2590_QualitySnippetsTruncationSnippetBoldedRangePositionIn",
        "QualitySnippetsTruncationSnippetBoldedRangePositionOut": "_contentwarehouse_2591_QualitySnippetsTruncationSnippetBoldedRangePositionOut",
        "AssistantDevicesPlatformProtoMediaShowControlsCapabilityIn": "_contentwarehouse_2592_AssistantDevicesPlatformProtoMediaShowControlsCapabilityIn",
        "AssistantDevicesPlatformProtoMediaShowControlsCapabilityOut": "_contentwarehouse_2593_AssistantDevicesPlatformProtoMediaShowControlsCapabilityOut",
        "PseudoVideoDataTranscriptTimestampIn": "_contentwarehouse_2594_PseudoVideoDataTranscriptTimestampIn",
        "PseudoVideoDataTranscriptTimestampOut": "_contentwarehouse_2595_PseudoVideoDataTranscriptTimestampOut",
        "ClassifierPornQueryStatsIn": "_contentwarehouse_2596_ClassifierPornQueryStatsIn",
        "ClassifierPornQueryStatsOut": "_contentwarehouse_2597_ClassifierPornQueryStatsOut",
        "KnowledgeAnswersIntentQueryShoppingIdsMeasureValueIn": "_contentwarehouse_2598_KnowledgeAnswersIntentQueryShoppingIdsMeasureValueIn",
        "KnowledgeAnswersIntentQueryShoppingIdsMeasureValueOut": "_contentwarehouse_2599_KnowledgeAnswersIntentQueryShoppingIdsMeasureValueOut",
        "VideoVideoStreamInfoAudioStreamIn": "_contentwarehouse_2600_VideoVideoStreamInfoAudioStreamIn",
        "VideoVideoStreamInfoAudioStreamOut": "_contentwarehouse_2601_VideoVideoStreamInfoAudioStreamOut",
        "AssistantApiSettingsGcmSettingsIn": "_contentwarehouse_2602_AssistantApiSettingsGcmSettingsIn",
        "AssistantApiSettingsGcmSettingsOut": "_contentwarehouse_2603_AssistantApiSettingsGcmSettingsOut",
        "AttentionalEntitiesMentionPropertiesSourceIn": "_contentwarehouse_2604_AttentionalEntitiesMentionPropertiesSourceIn",
        "AttentionalEntitiesMentionPropertiesSourceOut": "_contentwarehouse_2605_AttentionalEntitiesMentionPropertiesSourceOut",
        "HtmlrenderWebkitHeadlessProtoRedirectHopIn": "_contentwarehouse_2606_HtmlrenderWebkitHeadlessProtoRedirectHopIn",
        "HtmlrenderWebkitHeadlessProtoRedirectHopOut": "_contentwarehouse_2607_HtmlrenderWebkitHeadlessProtoRedirectHopOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoIn": "_contentwarehouse_2608_IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoOut": "_contentwarehouse_2609_IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoOut",
        "DrishtiQuantizedByteIndexedFeatureDataIn": "_contentwarehouse_2610_DrishtiQuantizedByteIndexedFeatureDataIn",
        "DrishtiQuantizedByteIndexedFeatureDataOut": "_contentwarehouse_2611_DrishtiQuantizedByteIndexedFeatureDataOut",
        "TeragoogleRepositoryAttachmentOptionsIn": "_contentwarehouse_2612_TeragoogleRepositoryAttachmentOptionsIn",
        "TeragoogleRepositoryAttachmentOptionsOut": "_contentwarehouse_2613_TeragoogleRepositoryAttachmentOptionsOut",
        "KnowledgeAnswersDurationTypeIn": "_contentwarehouse_2614_KnowledgeAnswersDurationTypeIn",
        "KnowledgeAnswersDurationTypeOut": "_contentwarehouse_2615_KnowledgeAnswersDurationTypeOut",
        "IndexingConverterLocalizedAlternateNameIn": "_contentwarehouse_2616_IndexingConverterLocalizedAlternateNameIn",
        "IndexingConverterLocalizedAlternateNameOut": "_contentwarehouse_2617_IndexingConverterLocalizedAlternateNameOut",
        "LegalCitationLawCollectionNameIn": "_contentwarehouse_2618_LegalCitationLawCollectionNameIn",
        "LegalCitationLawCollectionNameOut": "_contentwarehouse_2619_LegalCitationLawCollectionNameOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonIn": "_contentwarehouse_2620_AppsPeopleOzExternalMergedpeopleapiPersonIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonOut": "_contentwarehouse_2621_AppsPeopleOzExternalMergedpeopleapiPersonOut",
        "IndexingConverterRedirectChainHopIn": "_contentwarehouse_2622_IndexingConverterRedirectChainHopIn",
        "IndexingConverterRedirectChainHopOut": "_contentwarehouse_2623_IndexingConverterRedirectChainHopOut",
        "AssistantDevicesPlatformProtoTimerCapabilityIn": "_contentwarehouse_2624_AssistantDevicesPlatformProtoTimerCapabilityIn",
        "AssistantDevicesPlatformProtoTimerCapabilityOut": "_contentwarehouse_2625_AssistantDevicesPlatformProtoTimerCapabilityOut",
        "GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterIn": "_contentwarehouse_2626_GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterIn",
        "GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterOut": "_contentwarehouse_2627_GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterOut",
        "AppsPeopleOzExternalMergedpeopleapiCustomerInfoIn": "_contentwarehouse_2628_AppsPeopleOzExternalMergedpeopleapiCustomerInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiCustomerInfoOut": "_contentwarehouse_2629_AppsPeopleOzExternalMergedpeopleapiCustomerInfoOut",
        "AssistantDevicesPlatformProtoTriggerConditionIn": "_contentwarehouse_2630_AssistantDevicesPlatformProtoTriggerConditionIn",
        "AssistantDevicesPlatformProtoTriggerConditionOut": "_contentwarehouse_2631_AssistantDevicesPlatformProtoTriggerConditionOut",
        "QualityQrewriteCalendarReferenceIn": "_contentwarehouse_2632_QualityQrewriteCalendarReferenceIn",
        "QualityQrewriteCalendarReferenceOut": "_contentwarehouse_2633_QualityQrewriteCalendarReferenceOut",
        "SocialGraphApiProtoDelegatedGroupIdIn": "_contentwarehouse_2634_SocialGraphApiProtoDelegatedGroupIdIn",
        "SocialGraphApiProtoDelegatedGroupIdOut": "_contentwarehouse_2635_SocialGraphApiProtoDelegatedGroupIdOut",
        "KnowledgeAnswersMarkerIn": "_contentwarehouse_2636_KnowledgeAnswersMarkerIn",
        "KnowledgeAnswersMarkerOut": "_contentwarehouse_2637_KnowledgeAnswersMarkerOut",
        "GoogleCloudContentwarehouseV1ListLinkedTargetsResponseIn": "_contentwarehouse_2638_GoogleCloudContentwarehouseV1ListLinkedTargetsResponseIn",
        "GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut": "_contentwarehouse_2639_GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut",
        "ImageSafesearchContentOffensiveSymbolMatchIn": "_contentwarehouse_2640_ImageSafesearchContentOffensiveSymbolMatchIn",
        "ImageSafesearchContentOffensiveSymbolMatchOut": "_contentwarehouse_2641_ImageSafesearchContentOffensiveSymbolMatchOut",
        "CompositeDocForwardingDupIn": "_contentwarehouse_2642_CompositeDocForwardingDupIn",
        "CompositeDocForwardingDupOut": "_contentwarehouse_2643_CompositeDocForwardingDupOut",
        "SnapshotTextNodeIn": "_contentwarehouse_2644_SnapshotTextNodeIn",
        "SnapshotTextNodeOut": "_contentwarehouse_2645_SnapshotTextNodeOut",
        "GeostoreFeatureReplacementInfoProtoIn": "_contentwarehouse_2646_GeostoreFeatureReplacementInfoProtoIn",
        "GeostoreFeatureReplacementInfoProtoOut": "_contentwarehouse_2647_GeostoreFeatureReplacementInfoProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiContactStateInfoIn": "_contentwarehouse_2648_AppsPeopleOzExternalMergedpeopleapiContactStateInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiContactStateInfoOut": "_contentwarehouse_2649_AppsPeopleOzExternalMergedpeopleapiContactStateInfoOut",
        "QualitySitemapCoClickTargetIn": "_contentwarehouse_2650_QualitySitemapCoClickTargetIn",
        "QualitySitemapCoClickTargetOut": "_contentwarehouse_2651_QualitySitemapCoClickTargetOut",
        "GoogleCloudDocumentaiV1DocumentTextChangeIn": "_contentwarehouse_2652_GoogleCloudDocumentaiV1DocumentTextChangeIn",
        "GoogleCloudDocumentaiV1DocumentTextChangeOut": "_contentwarehouse_2653_GoogleCloudDocumentaiV1DocumentTextChangeOut",
        "AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeIn": "_contentwarehouse_2654_AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeIn",
        "AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeOut": "_contentwarehouse_2655_AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeOut",
        "SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataIn": "_contentwarehouse_2656_SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataIn",
        "SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataOut": "_contentwarehouse_2657_SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataOut",
        "GoogleCloudContentwarehouseV1RemoveFromFolderActionIn": "_contentwarehouse_2658_GoogleCloudContentwarehouseV1RemoveFromFolderActionIn",
        "GoogleCloudContentwarehouseV1RemoveFromFolderActionOut": "_contentwarehouse_2659_GoogleCloudContentwarehouseV1RemoveFromFolderActionOut",
        "NlpSaftEntityProfileAttributeIn": "_contentwarehouse_2660_NlpSaftEntityProfileAttributeIn",
        "NlpSaftEntityProfileAttributeOut": "_contentwarehouse_2661_NlpSaftEntityProfileAttributeOut",
        "VideoContentSearchVideoAnchorsIn": "_contentwarehouse_2662_VideoContentSearchVideoAnchorsIn",
        "VideoContentSearchVideoAnchorsOut": "_contentwarehouse_2663_VideoContentSearchVideoAnchorsOut",
        "KnowledgeAnswersSensitivityInstructionArgumentIn": "_contentwarehouse_2664_KnowledgeAnswersSensitivityInstructionArgumentIn",
        "KnowledgeAnswersSensitivityInstructionArgumentOut": "_contentwarehouse_2665_KnowledgeAnswersSensitivityInstructionArgumentOut",
        "GeostoreLaneProtoLaneConnectionIn": "_contentwarehouse_2666_GeostoreLaneProtoLaneConnectionIn",
        "GeostoreLaneProtoLaneConnectionOut": "_contentwarehouse_2667_GeostoreLaneProtoLaneConnectionOut",
        "AssistantApiCoreTypesSurfaceIdentityIn": "_contentwarehouse_2668_AssistantApiCoreTypesSurfaceIdentityIn",
        "AssistantApiCoreTypesSurfaceIdentityOut": "_contentwarehouse_2669_AssistantApiCoreTypesSurfaceIdentityOut",
        "GeostoreElevationModelProtoIn": "_contentwarehouse_2670_GeostoreElevationModelProtoIn",
        "GeostoreElevationModelProtoOut": "_contentwarehouse_2671_GeostoreElevationModelProtoOut",
        "GoogleCloudContentwarehouseV1ListSynonymSetsResponseIn": "_contentwarehouse_2672_GoogleCloudContentwarehouseV1ListSynonymSetsResponseIn",
        "GoogleCloudContentwarehouseV1ListSynonymSetsResponseOut": "_contentwarehouse_2673_GoogleCloudContentwarehouseV1ListSynonymSetsResponseOut",
        "LocalWWWInfoAddressIn": "_contentwarehouse_2674_LocalWWWInfoAddressIn",
        "LocalWWWInfoAddressOut": "_contentwarehouse_2675_LocalWWWInfoAddressOut",
        "NlpSaftLabeledSpanIn": "_contentwarehouse_2676_NlpSaftLabeledSpanIn",
        "NlpSaftLabeledSpanOut": "_contentwarehouse_2677_NlpSaftLabeledSpanOut",
        "GoodocDocumentPageIn": "_contentwarehouse_2678_GoodocDocumentPageIn",
        "GoodocDocumentPageOut": "_contentwarehouse_2679_GoodocDocumentPageOut",
        "IndexingUrlPatternUrlTreeBigTreeBranchIn": "_contentwarehouse_2680_IndexingUrlPatternUrlTreeBigTreeBranchIn",
        "IndexingUrlPatternUrlTreeBigTreeBranchOut": "_contentwarehouse_2681_IndexingUrlPatternUrlTreeBigTreeBranchOut",
        "QualityNsrNsrChunksProtoIn": "_contentwarehouse_2682_QualityNsrNsrChunksProtoIn",
        "QualityNsrNsrChunksProtoOut": "_contentwarehouse_2683_QualityNsrNsrChunksProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiCommunicationEmailIn": "_contentwarehouse_2684_AppsPeopleOzExternalMergedpeopleapiCommunicationEmailIn",
        "AppsPeopleOzExternalMergedpeopleapiCommunicationEmailOut": "_contentwarehouse_2685_AppsPeopleOzExternalMergedpeopleapiCommunicationEmailOut",
        "NlpSemanticParsingModelsOnDeviceIn": "_contentwarehouse_2686_NlpSemanticParsingModelsOnDeviceIn",
        "NlpSemanticParsingModelsOnDeviceOut": "_contentwarehouse_2687_NlpSemanticParsingModelsOnDeviceOut",
        "GeostoreTimeIntervalProtoIn": "_contentwarehouse_2688_GeostoreTimeIntervalProtoIn",
        "GeostoreTimeIntervalProtoOut": "_contentwarehouse_2689_GeostoreTimeIntervalProtoOut",
        "CompositeDocQualitySignalsIn": "_contentwarehouse_2690_CompositeDocQualitySignalsIn",
        "CompositeDocQualitySignalsOut": "_contentwarehouse_2691_CompositeDocQualitySignalsOut",
        "GeostoreLocaleLanguageProtoIn": "_contentwarehouse_2692_GeostoreLocaleLanguageProtoIn",
        "GeostoreLocaleLanguageProtoOut": "_contentwarehouse_2693_GeostoreLocaleLanguageProtoOut",
        "VideoContentSearchTokenTimingInfoIn": "_contentwarehouse_2694_VideoContentSearchTokenTimingInfoIn",
        "VideoContentSearchTokenTimingInfoOut": "_contentwarehouse_2695_VideoContentSearchTokenTimingInfoOut",
        "AssistantApiCoreTypesMessageNotificationPersonIn": "_contentwarehouse_2696_AssistantApiCoreTypesMessageNotificationPersonIn",
        "AssistantApiCoreTypesMessageNotificationPersonOut": "_contentwarehouse_2697_AssistantApiCoreTypesMessageNotificationPersonOut",
        "RepositoryWebrefClusterProtoRuleInstanceIn": "_contentwarehouse_2698_RepositoryWebrefClusterProtoRuleInstanceIn",
        "RepositoryWebrefClusterProtoRuleInstanceOut": "_contentwarehouse_2699_RepositoryWebrefClusterProtoRuleInstanceOut",
        "AssistantApiCoreTypesProviderDeltaIn": "_contentwarehouse_2700_AssistantApiCoreTypesProviderDeltaIn",
        "AssistantApiCoreTypesProviderDeltaOut": "_contentwarehouse_2701_AssistantApiCoreTypesProviderDeltaOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutIn": "_contentwarehouse_2702_AppsPeopleOzExternalMergedpeopleapiAboutIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutOut": "_contentwarehouse_2703_AppsPeopleOzExternalMergedpeopleapiAboutOut",
        "GeostoreSourceInfoProtoIn": "_contentwarehouse_2704_GeostoreSourceInfoProtoIn",
        "GeostoreSourceInfoProtoOut": "_contentwarehouse_2705_GeostoreSourceInfoProtoOut",
        "AssistantLogsDeviceAnnotationLogIn": "_contentwarehouse_2706_AssistantLogsDeviceAnnotationLogIn",
        "AssistantLogsDeviceAnnotationLogOut": "_contentwarehouse_2707_AssistantLogsDeviceAnnotationLogOut",
        "GeostoreJobRelatedCategoryIn": "_contentwarehouse_2708_GeostoreJobRelatedCategoryIn",
        "GeostoreJobRelatedCategoryOut": "_contentwarehouse_2709_GeostoreJobRelatedCategoryOut",
        "AppsPeopleOzExternalMergedpeopleapiAccountEmailIn": "_contentwarehouse_2710_AppsPeopleOzExternalMergedpeopleapiAccountEmailIn",
        "AppsPeopleOzExternalMergedpeopleapiAccountEmailOut": "_contentwarehouse_2711_AppsPeopleOzExternalMergedpeopleapiAccountEmailOut",
        "VideoContentSearchVideoActionsIn": "_contentwarehouse_2712_VideoContentSearchVideoActionsIn",
        "VideoContentSearchVideoActionsOut": "_contentwarehouse_2713_VideoContentSearchVideoActionsOut",
        "NlpSemanticParsingSaftSpanIn": "_contentwarehouse_2714_NlpSemanticParsingSaftSpanIn",
        "NlpSemanticParsingSaftSpanOut": "_contentwarehouse_2715_NlpSemanticParsingSaftSpanOut",
        "AssistantApiCommunicationUiCapabilitiesIn": "_contentwarehouse_2716_AssistantApiCommunicationUiCapabilitiesIn",
        "AssistantApiCommunicationUiCapabilitiesOut": "_contentwarehouse_2717_AssistantApiCommunicationUiCapabilitiesOut",
        "AppsPeopleOzExternalMergedpeopleapiAffinityIn": "_contentwarehouse_2718_AppsPeopleOzExternalMergedpeopleapiAffinityIn",
        "AppsPeopleOzExternalMergedpeopleapiAffinityOut": "_contentwarehouse_2719_AppsPeopleOzExternalMergedpeopleapiAffinityOut",
        "SocialPersonalizationKnexAnnotationItemIn": "_contentwarehouse_2720_SocialPersonalizationKnexAnnotationItemIn",
        "SocialPersonalizationKnexAnnotationItemOut": "_contentwarehouse_2721_SocialPersonalizationKnexAnnotationItemOut",
        "SocialGraphApiProtoSearchProfileStateIn": "_contentwarehouse_2722_SocialGraphApiProtoSearchProfileStateIn",
        "SocialGraphApiProtoSearchProfileStateOut": "_contentwarehouse_2723_SocialGraphApiProtoSearchProfileStateOut",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataIn": "_contentwarehouse_2724_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataIn",
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataOut": "_contentwarehouse_2725_AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataOut",
        "AssistantApiGcmCapabilitiesIn": "_contentwarehouse_2726_AssistantApiGcmCapabilitiesIn",
        "AssistantApiGcmCapabilitiesOut": "_contentwarehouse_2727_AssistantApiGcmCapabilitiesOut",
        "WWWDocInfoIn": "_contentwarehouse_2728_WWWDocInfoIn",
        "WWWDocInfoOut": "_contentwarehouse_2729_WWWDocInfoOut",
        "GoogleInternalAppsWaldoV1alphaAvailabilityPeriodIn": "_contentwarehouse_2730_GoogleInternalAppsWaldoV1alphaAvailabilityPeriodIn",
        "GoogleInternalAppsWaldoV1alphaAvailabilityPeriodOut": "_contentwarehouse_2731_GoogleInternalAppsWaldoV1alphaAvailabilityPeriodOut",
        "QualityActionsAppUnderstandingCategoryIn": "_contentwarehouse_2732_QualityActionsAppUnderstandingCategoryIn",
        "QualityActionsAppUnderstandingCategoryOut": "_contentwarehouse_2733_QualityActionsAppUnderstandingCategoryOut",
        "IndexingDocjoinerServingTimeClusterIdsIn": "_contentwarehouse_2734_IndexingDocjoinerServingTimeClusterIdsIn",
        "IndexingDocjoinerServingTimeClusterIdsOut": "_contentwarehouse_2735_IndexingDocjoinerServingTimeClusterIdsOut",
        "SocialGraphApiProtoSearchProfileWorkplaceIn": "_contentwarehouse_2736_SocialGraphApiProtoSearchProfileWorkplaceIn",
        "SocialGraphApiProtoSearchProfileWorkplaceOut": "_contentwarehouse_2737_SocialGraphApiProtoSearchProfileWorkplaceOut",
        "AppsPeopleOzExternalMergedpeopleapiLanguageIn": "_contentwarehouse_2738_AppsPeopleOzExternalMergedpeopleapiLanguageIn",
        "AppsPeopleOzExternalMergedpeopleapiLanguageOut": "_contentwarehouse_2739_AppsPeopleOzExternalMergedpeopleapiLanguageOut",
        "IndexingSignalAggregatorUrlPatternSignalsIn": "_contentwarehouse_2740_IndexingSignalAggregatorUrlPatternSignalsIn",
        "IndexingSignalAggregatorUrlPatternSignalsOut": "_contentwarehouse_2741_IndexingSignalAggregatorUrlPatternSignalsOut",
        "RepositoryWebrefProcessorCounterIn": "_contentwarehouse_2742_RepositoryWebrefProcessorCounterIn",
        "RepositoryWebrefProcessorCounterOut": "_contentwarehouse_2743_RepositoryWebrefProcessorCounterOut",
        "AppsPeopleOzExternalMergedpeopleapiAddressIn": "_contentwarehouse_2744_AppsPeopleOzExternalMergedpeopleapiAddressIn",
        "AppsPeopleOzExternalMergedpeopleapiAddressOut": "_contentwarehouse_2745_AppsPeopleOzExternalMergedpeopleapiAddressOut",
        "ImageRegionsImageRegionIn": "_contentwarehouse_2746_ImageRegionsImageRegionIn",
        "ImageRegionsImageRegionOut": "_contentwarehouse_2747_ImageRegionsImageRegionOut",
        "ImageRepositoryShoppingProductInformationProductInformationIn": "_contentwarehouse_2748_ImageRepositoryShoppingProductInformationProductInformationIn",
        "ImageRepositoryShoppingProductInformationProductInformationOut": "_contentwarehouse_2749_ImageRepositoryShoppingProductInformationProductInformationOut",
        "KnowledgeGraphTripleIn": "_contentwarehouse_2750_KnowledgeGraphTripleIn",
        "KnowledgeGraphTripleOut": "_contentwarehouse_2751_KnowledgeGraphTripleOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataIn": "_contentwarehouse_2752_AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataOut": "_contentwarehouse_2753_AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataOut",
        "KnowledgeAnswersSemanticTypeIn": "_contentwarehouse_2754_KnowledgeAnswersSemanticTypeIn",
        "KnowledgeAnswersSemanticTypeOut": "_contentwarehouse_2755_KnowledgeAnswersSemanticTypeOut",
        "ImageRegionsImageRegionsIn": "_contentwarehouse_2756_ImageRegionsImageRegionsIn",
        "ImageRegionsImageRegionsOut": "_contentwarehouse_2757_ImageRegionsImageRegionsOut",
        "NlpSaftMorphologyIn": "_contentwarehouse_2758_NlpSaftMorphologyIn",
        "NlpSaftMorphologyOut": "_contentwarehouse_2759_NlpSaftMorphologyOut",
        "QualityNsrExperimentalNsrTeamScoringSignalIn": "_contentwarehouse_2760_QualityNsrExperimentalNsrTeamScoringSignalIn",
        "QualityNsrExperimentalNsrTeamScoringSignalOut": "_contentwarehouse_2761_QualityNsrExperimentalNsrTeamScoringSignalOut",
        "AssistantApiSettingsTetheredInfoIn": "_contentwarehouse_2762_AssistantApiSettingsTetheredInfoIn",
        "AssistantApiSettingsTetheredInfoOut": "_contentwarehouse_2763_AssistantApiSettingsTetheredInfoOut",
        "SocialGraphApiProtoRelativeScaleIn": "_contentwarehouse_2764_SocialGraphApiProtoRelativeScaleIn",
        "SocialGraphApiProtoRelativeScaleOut": "_contentwarehouse_2765_SocialGraphApiProtoRelativeScaleOut",
        "SocialGraphApiProtoContactMutationContextIn": "_contentwarehouse_2766_SocialGraphApiProtoContactMutationContextIn",
        "SocialGraphApiProtoContactMutationContextOut": "_contentwarehouse_2767_SocialGraphApiProtoContactMutationContextOut",
        "NlpSemanticParsingModelsCommunicationPhoneTypeIn": "_contentwarehouse_2768_NlpSemanticParsingModelsCommunicationPhoneTypeIn",
        "NlpSemanticParsingModelsCommunicationPhoneTypeOut": "_contentwarehouse_2769_NlpSemanticParsingModelsCommunicationPhoneTypeOut",
        "SecurityCredentialsPrincipalProtoIn": "_contentwarehouse_2770_SecurityCredentialsPrincipalProtoIn",
        "SecurityCredentialsPrincipalProtoOut": "_contentwarehouse_2771_SecurityCredentialsPrincipalProtoOut",
        "ResearchScamCoscamRestrictDefinitionIn": "_contentwarehouse_2772_ResearchScamCoscamRestrictDefinitionIn",
        "ResearchScamCoscamRestrictDefinitionOut": "_contentwarehouse_2773_ResearchScamCoscamRestrictDefinitionOut",
        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureIn": "_contentwarehouse_2774_KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureIn",
        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureOut": "_contentwarehouse_2775_KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureOut",
        "GoogleTypeDateTimeIn": "_contentwarehouse_2776_GoogleTypeDateTimeIn",
        "GoogleTypeDateTimeOut": "_contentwarehouse_2777_GoogleTypeDateTimeOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkIn": "_contentwarehouse_2778_IndexingDupsLocalizedLocalizedClusterTargetLinkIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkOut": "_contentwarehouse_2779_IndexingDupsLocalizedLocalizedClusterTargetLinkOut",
        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsIn": "_contentwarehouse_2780_KnowledgeAnswersIntentQuerySemanticAnnotationSignalsIn",
        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsOut": "_contentwarehouse_2781_KnowledgeAnswersIntentQuerySemanticAnnotationSignalsOut",
        "AppsPeopleOzExternalMergedpeopleapiNicknameIn": "_contentwarehouse_2782_AppsPeopleOzExternalMergedpeopleapiNicknameIn",
        "AppsPeopleOzExternalMergedpeopleapiNicknameOut": "_contentwarehouse_2783_AppsPeopleOzExternalMergedpeopleapiNicknameOut",
        "QualityActionsNewsProviderAnnotationDataProviderIn": "_contentwarehouse_2784_QualityActionsNewsProviderAnnotationDataProviderIn",
        "QualityActionsNewsProviderAnnotationDataProviderOut": "_contentwarehouse_2785_QualityActionsNewsProviderAnnotationDataProviderOut",
        "WeboftrustLiveResultDocBoostDataIn": "_contentwarehouse_2786_WeboftrustLiveResultDocBoostDataIn",
        "WeboftrustLiveResultDocBoostDataOut": "_contentwarehouse_2787_WeboftrustLiveResultDocBoostDataOut",
        "NlpSemanticParsingModelsMediaGenericMusicIn": "_contentwarehouse_2788_NlpSemanticParsingModelsMediaGenericMusicIn",
        "NlpSemanticParsingModelsMediaGenericMusicOut": "_contentwarehouse_2789_NlpSemanticParsingModelsMediaGenericMusicOut",
        "VideoContentSearchAnchorThumbnailIn": "_contentwarehouse_2790_VideoContentSearchAnchorThumbnailIn",
        "VideoContentSearchAnchorThumbnailOut": "_contentwarehouse_2791_VideoContentSearchAnchorThumbnailOut",
        "KnowledgeAnswersPolarQuestionTypeIn": "_contentwarehouse_2792_KnowledgeAnswersPolarQuestionTypeIn",
        "KnowledgeAnswersPolarQuestionTypeOut": "_contentwarehouse_2793_KnowledgeAnswersPolarQuestionTypeOut",
        "GoogleCloudContentwarehouseV1ListRuleSetsResponseIn": "_contentwarehouse_2794_GoogleCloudContentwarehouseV1ListRuleSetsResponseIn",
        "GoogleCloudContentwarehouseV1ListRuleSetsResponseOut": "_contentwarehouse_2795_GoogleCloudContentwarehouseV1ListRuleSetsResponseOut",
        "GoogleCloudDocumentaiV1DocumentProvenanceParentIn": "_contentwarehouse_2796_GoogleCloudDocumentaiV1DocumentProvenanceParentIn",
        "GoogleCloudDocumentaiV1DocumentProvenanceParentOut": "_contentwarehouse_2797_GoogleCloudDocumentaiV1DocumentProvenanceParentOut",
        "NlpSaftLabeledSpansIn": "_contentwarehouse_2798_NlpSaftLabeledSpansIn",
        "NlpSaftLabeledSpansOut": "_contentwarehouse_2799_NlpSaftLabeledSpansOut",
        "ToolBarPerDocDataIn": "_contentwarehouse_2800_ToolBarPerDocDataIn",
        "ToolBarPerDocDataOut": "_contentwarehouse_2801_ToolBarPerDocDataOut",
        "KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsIn": "_contentwarehouse_2802_KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsIn",
        "KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsOut": "_contentwarehouse_2803_KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsOut",
        "HtmlrenderWebkitHeadlessProtoFrameResizeEventIn": "_contentwarehouse_2804_HtmlrenderWebkitHeadlessProtoFrameResizeEventIn",
        "HtmlrenderWebkitHeadlessProtoFrameResizeEventOut": "_contentwarehouse_2805_HtmlrenderWebkitHeadlessProtoFrameResizeEventOut",
        "NlpSciencelitDatasetIn": "_contentwarehouse_2806_NlpSciencelitDatasetIn",
        "NlpSciencelitDatasetOut": "_contentwarehouse_2807_NlpSciencelitDatasetOut",
        "AssistantApiJwnCapabilitiesIn": "_contentwarehouse_2808_AssistantApiJwnCapabilitiesIn",
        "AssistantApiJwnCapabilitiesOut": "_contentwarehouse_2809_AssistantApiJwnCapabilitiesOut",
        "ImageDataThumbnailIn": "_contentwarehouse_2810_ImageDataThumbnailIn",
        "ImageDataThumbnailOut": "_contentwarehouse_2811_ImageDataThumbnailOut",
        "NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowIn": "_contentwarehouse_2812_NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowIn",
        "NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowOut": "_contentwarehouse_2813_NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowOut",
        "TitleSizeParamsIn": "_contentwarehouse_2814_TitleSizeParamsIn",
        "TitleSizeParamsOut": "_contentwarehouse_2815_TitleSizeParamsOut",
        "QualityCalypsoAppsUniversalAuLiveOpEventIn": "_contentwarehouse_2816_QualityCalypsoAppsUniversalAuLiveOpEventIn",
        "QualityCalypsoAppsUniversalAuLiveOpEventOut": "_contentwarehouse_2817_QualityCalypsoAppsUniversalAuLiveOpEventOut",
        "AppsPeopleOzExternalMergedpeopleapiCircleMembershipIn": "_contentwarehouse_2818_AppsPeopleOzExternalMergedpeopleapiCircleMembershipIn",
        "AppsPeopleOzExternalMergedpeopleapiCircleMembershipOut": "_contentwarehouse_2819_AppsPeopleOzExternalMergedpeopleapiCircleMembershipOut",
        "GeostorePriceInfoProtoIn": "_contentwarehouse_2820_GeostorePriceInfoProtoIn",
        "GeostorePriceInfoProtoOut": "_contentwarehouse_2821_GeostorePriceInfoProtoOut",
        "QualityQrewriteAccountProvenanceIn": "_contentwarehouse_2822_QualityQrewriteAccountProvenanceIn",
        "QualityQrewriteAccountProvenanceOut": "_contentwarehouse_2823_QualityQrewriteAccountProvenanceOut",
        "AssistantDevicesPlatformProtoSendChatMessageCapabilityIn": "_contentwarehouse_2824_AssistantDevicesPlatformProtoSendChatMessageCapabilityIn",
        "AssistantDevicesPlatformProtoSendChatMessageCapabilityOut": "_contentwarehouse_2825_AssistantDevicesPlatformProtoSendChatMessageCapabilityOut",
        "GoogleCloudContentwarehouseV1MapPropertyIn": "_contentwarehouse_2826_GoogleCloudContentwarehouseV1MapPropertyIn",
        "GoogleCloudContentwarehouseV1MapPropertyOut": "_contentwarehouse_2827_GoogleCloudContentwarehouseV1MapPropertyOut",
        "GeostoreIntersectionProtoIn": "_contentwarehouse_2828_GeostoreIntersectionProtoIn",
        "GeostoreIntersectionProtoOut": "_contentwarehouse_2829_GeostoreIntersectionProtoOut",
        "ScienceIndexSignalIn": "_contentwarehouse_2830_ScienceIndexSignalIn",
        "ScienceIndexSignalOut": "_contentwarehouse_2831_ScienceIndexSignalOut",
        "AssistantVerticalsHomeautomationProtoAttributesIn": "_contentwarehouse_2832_AssistantVerticalsHomeautomationProtoAttributesIn",
        "AssistantVerticalsHomeautomationProtoAttributesOut": "_contentwarehouse_2833_AssistantVerticalsHomeautomationProtoAttributesOut",
        "DeepCropIndexingIn": "_contentwarehouse_2834_DeepCropIndexingIn",
        "DeepCropIndexingOut": "_contentwarehouse_2835_DeepCropIndexingOut",
        "VideoStorageLoudnessDataIn": "_contentwarehouse_2836_VideoStorageLoudnessDataIn",
        "VideoStorageLoudnessDataOut": "_contentwarehouse_2837_VideoStorageLoudnessDataOut",
        "RepositoryWebrefFprintModifierProtoIn": "_contentwarehouse_2838_RepositoryWebrefFprintModifierProtoIn",
        "RepositoryWebrefFprintModifierProtoOut": "_contentwarehouse_2839_RepositoryWebrefFprintModifierProtoOut",
        "GoogleCloudContentwarehouseV1FetchAclResponseIn": "_contentwarehouse_2840_GoogleCloudContentwarehouseV1FetchAclResponseIn",
        "GoogleCloudContentwarehouseV1FetchAclResponseOut": "_contentwarehouse_2841_GoogleCloudContentwarehouseV1FetchAclResponseOut",
        "ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoIn": "_contentwarehouse_2842_ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoIn",
        "ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoOut": "_contentwarehouse_2843_ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoOut",
        "ScienceCitationAlternateAbstractIn": "_contentwarehouse_2844_ScienceCitationAlternateAbstractIn",
        "ScienceCitationAlternateAbstractOut": "_contentwarehouse_2845_ScienceCitationAlternateAbstractOut",
        "KnowledgeAnswersDependencyTypeIn": "_contentwarehouse_2846_KnowledgeAnswersDependencyTypeIn",
        "KnowledgeAnswersDependencyTypeOut": "_contentwarehouse_2847_KnowledgeAnswersDependencyTypeOut",
        "QualitySitemapTargetGroupIn": "_contentwarehouse_2848_QualitySitemapTargetGroupIn",
        "QualitySitemapTargetGroupOut": "_contentwarehouse_2849_QualitySitemapTargetGroupOut",
        "RepositoryWebrefProcessorTimingIn": "_contentwarehouse_2850_RepositoryWebrefProcessorTimingIn",
        "RepositoryWebrefProcessorTimingOut": "_contentwarehouse_2851_RepositoryWebrefProcessorTimingOut",
        "GoogleInternalCommunicationsInstantmessagingV1IdIn": "_contentwarehouse_2852_GoogleInternalCommunicationsInstantmessagingV1IdIn",
        "GoogleInternalCommunicationsInstantmessagingV1IdOut": "_contentwarehouse_2853_GoogleInternalCommunicationsInstantmessagingV1IdOut",
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoIn": "_contentwarehouse_2854_AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoOut": "_contentwarehouse_2855_AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoOut",
        "SocialGraphApiProtoPartialNameOptionsNamePartSpecIn": "_contentwarehouse_2856_SocialGraphApiProtoPartialNameOptionsNamePartSpecIn",
        "SocialGraphApiProtoPartialNameOptionsNamePartSpecOut": "_contentwarehouse_2857_SocialGraphApiProtoPartialNameOptionsNamePartSpecOut",
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoIn": "_contentwarehouse_2858_IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoIn",
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoOut": "_contentwarehouse_2859_IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoOut",
        "NlpSemanticParsingDatetimeDurationIn": "_contentwarehouse_2860_NlpSemanticParsingDatetimeDurationIn",
        "NlpSemanticParsingDatetimeDurationOut": "_contentwarehouse_2861_NlpSemanticParsingDatetimeDurationOut",
        "WWWDocInfoRelatedImagesIn": "_contentwarehouse_2862_WWWDocInfoRelatedImagesIn",
        "WWWDocInfoRelatedImagesOut": "_contentwarehouse_2863_WWWDocInfoRelatedImagesOut",
        "ScienceCitationIn": "_contentwarehouse_2864_ScienceCitationIn",
        "ScienceCitationOut": "_contentwarehouse_2865_ScienceCitationOut",
        "GoogleCloudContentwarehouseV1SetAclRequestIn": "_contentwarehouse_2866_GoogleCloudContentwarehouseV1SetAclRequestIn",
        "GoogleCloudContentwarehouseV1SetAclRequestOut": "_contentwarehouse_2867_GoogleCloudContentwarehouseV1SetAclRequestOut",
        "SocialGraphApiProtoContactEditContextIn": "_contentwarehouse_2868_SocialGraphApiProtoContactEditContextIn",
        "SocialGraphApiProtoContactEditContextOut": "_contentwarehouse_2869_SocialGraphApiProtoContactEditContextOut",
        "QualitySalientTermsSignalTermDataIn": "_contentwarehouse_2870_QualitySalientTermsSignalTermDataIn",
        "QualitySalientTermsSignalTermDataOut": "_contentwarehouse_2871_QualitySalientTermsSignalTermDataOut",
        "PhotosVisionObjectrecImageTemplateSubSetIn": "_contentwarehouse_2872_PhotosVisionObjectrecImageTemplateSubSetIn",
        "PhotosVisionObjectrecImageTemplateSubSetOut": "_contentwarehouse_2873_PhotosVisionObjectrecImageTemplateSubSetOut",
        "IndexingEmbeddedContentRenderingFetchStatsIn": "_contentwarehouse_2874_IndexingEmbeddedContentRenderingFetchStatsIn",
        "IndexingEmbeddedContentRenderingFetchStatsOut": "_contentwarehouse_2875_IndexingEmbeddedContentRenderingFetchStatsOut",
        "AbuseiamConstantRestrictionIn": "_contentwarehouse_2876_AbuseiamConstantRestrictionIn",
        "AbuseiamConstantRestrictionOut": "_contentwarehouse_2877_AbuseiamConstantRestrictionOut",
        "NlpSemanticParsingModelsMediaBookIn": "_contentwarehouse_2878_NlpSemanticParsingModelsMediaBookIn",
        "NlpSemanticParsingModelsMediaBookOut": "_contentwarehouse_2879_NlpSemanticParsingModelsMediaBookOut",
        "NlpSciencelitSubjectHeadingIn": "_contentwarehouse_2880_NlpSciencelitSubjectHeadingIn",
        "NlpSciencelitSubjectHeadingOut": "_contentwarehouse_2881_NlpSciencelitSubjectHeadingOut",
        "LegalCitationLawIn": "_contentwarehouse_2882_LegalCitationLawIn",
        "LegalCitationLawOut": "_contentwarehouse_2883_LegalCitationLawOut",
        "AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityIn": "_contentwarehouse_2884_AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityIn",
        "AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityOut": "_contentwarehouse_2885_AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityOut",
        "IndexingDupsComputedLocalizedAlternateNamesLocaleEntryIn": "_contentwarehouse_2886_IndexingDupsComputedLocalizedAlternateNamesLocaleEntryIn",
        "IndexingDupsComputedLocalizedAlternateNamesLocaleEntryOut": "_contentwarehouse_2887_IndexingDupsComputedLocalizedAlternateNamesLocaleEntryOut",
        "RepositoryWebrefLatentEntityIn": "_contentwarehouse_2888_RepositoryWebrefLatentEntityIn",
        "RepositoryWebrefLatentEntityOut": "_contentwarehouse_2889_RepositoryWebrefLatentEntityOut",
        "AssistantApiSuggestionsSupportDisplayTargetSupportIn": "_contentwarehouse_2890_AssistantApiSuggestionsSupportDisplayTargetSupportIn",
        "AssistantApiSuggestionsSupportDisplayTargetSupportOut": "_contentwarehouse_2891_AssistantApiSuggestionsSupportDisplayTargetSupportOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryIn": "_contentwarehouse_2892_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryOut": "_contentwarehouse_2893_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryOut",
        "AssistantApiMovementCapabilitiesIn": "_contentwarehouse_2894_AssistantApiMovementCapabilitiesIn",
        "AssistantApiMovementCapabilitiesOut": "_contentwarehouse_2895_AssistantApiMovementCapabilitiesOut",
        "AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataIn": "_contentwarehouse_2896_AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataIn",
        "AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataOut": "_contentwarehouse_2897_AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataOut",
        "GoogleCloudContentwarehouseV1ListDocumentSchemasResponseIn": "_contentwarehouse_2898_GoogleCloudContentwarehouseV1ListDocumentSchemasResponseIn",
        "GoogleCloudContentwarehouseV1ListDocumentSchemasResponseOut": "_contentwarehouse_2899_GoogleCloudContentwarehouseV1ListDocumentSchemasResponseOut",
        "GeostoreTrustSignalsProtoIn": "_contentwarehouse_2900_GeostoreTrustSignalsProtoIn",
        "GeostoreTrustSignalsProtoOut": "_contentwarehouse_2901_GeostoreTrustSignalsProtoOut",
        "GeostoreAddressRangeProtoIn": "_contentwarehouse_2902_GeostoreAddressRangeProtoIn",
        "GeostoreAddressRangeProtoOut": "_contentwarehouse_2903_GeostoreAddressRangeProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiEventIn": "_contentwarehouse_2904_AppsPeopleOzExternalMergedpeopleapiEventIn",
        "AppsPeopleOzExternalMergedpeopleapiEventOut": "_contentwarehouse_2905_AppsPeopleOzExternalMergedpeopleapiEventOut",
        "QualityDniDocPreviewRestrictionsIn": "_contentwarehouse_2906_QualityDniDocPreviewRestrictionsIn",
        "QualityDniDocPreviewRestrictionsOut": "_contentwarehouse_2907_QualityDniDocPreviewRestrictionsOut",
        "VideoContentSearchRankEmbedNearestNeighborsFeaturesIn": "_contentwarehouse_2908_VideoContentSearchRankEmbedNearestNeighborsFeaturesIn",
        "VideoContentSearchRankEmbedNearestNeighborsFeaturesOut": "_contentwarehouse_2909_VideoContentSearchRankEmbedNearestNeighborsFeaturesOut",
        "OceanDocTagIn": "_contentwarehouse_2910_OceanDocTagIn",
        "OceanDocTagOut": "_contentwarehouse_2911_OceanDocTagOut",
        "RepositoryWebrefOysterTypeIn": "_contentwarehouse_2912_RepositoryWebrefOysterTypeIn",
        "RepositoryWebrefOysterTypeOut": "_contentwarehouse_2913_RepositoryWebrefOysterTypeOut",
        "NlpSemanticParsingModelsShoppingAssistantOfferIn": "_contentwarehouse_2914_NlpSemanticParsingModelsShoppingAssistantOfferIn",
        "NlpSemanticParsingModelsShoppingAssistantOfferOut": "_contentwarehouse_2915_NlpSemanticParsingModelsShoppingAssistantOfferOut",
        "OceanDocInfoIn": "_contentwarehouse_2916_OceanDocInfoIn",
        "OceanDocInfoOut": "_contentwarehouse_2917_OceanDocInfoOut",
        "GoogleCloudContentwarehouseV1MergeFieldsOptionsIn": "_contentwarehouse_2918_GoogleCloudContentwarehouseV1MergeFieldsOptionsIn",
        "GoogleCloudContentwarehouseV1MergeFieldsOptionsOut": "_contentwarehouse_2919_GoogleCloudContentwarehouseV1MergeFieldsOptionsOut",
        "PhotosGDepthMetadataIn": "_contentwarehouse_2920_PhotosGDepthMetadataIn",
        "PhotosGDepthMetadataOut": "_contentwarehouse_2921_PhotosGDepthMetadataOut",
        "RepositoryWebrefCategoryAnnotationHitCatSourceIn": "_contentwarehouse_2922_RepositoryWebrefCategoryAnnotationHitCatSourceIn",
        "RepositoryWebrefCategoryAnnotationHitCatSourceOut": "_contentwarehouse_2923_RepositoryWebrefCategoryAnnotationHitCatSourceOut",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataIn": "_contentwarehouse_2924_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataIn",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataOut": "_contentwarehouse_2925_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataOut",
        "CrowdingPerDocDataIn": "_contentwarehouse_2926_CrowdingPerDocDataIn",
        "CrowdingPerDocDataOut": "_contentwarehouse_2927_CrowdingPerDocDataOut",
        "NlpSemanticParsingLocalHealthInsuranceConstraintIn": "_contentwarehouse_2928_NlpSemanticParsingLocalHealthInsuranceConstraintIn",
        "NlpSemanticParsingLocalHealthInsuranceConstraintOut": "_contentwarehouse_2929_NlpSemanticParsingLocalHealthInsuranceConstraintOut",
        "StorageGraphBfgAuthorityFeedbackMetadataIn": "_contentwarehouse_2930_StorageGraphBfgAuthorityFeedbackMetadataIn",
        "StorageGraphBfgAuthorityFeedbackMetadataOut": "_contentwarehouse_2931_StorageGraphBfgAuthorityFeedbackMetadataOut",
        "SecurityCredentialsMdbUserProtoIn": "_contentwarehouse_2932_SecurityCredentialsMdbUserProtoIn",
        "SecurityCredentialsMdbUserProtoOut": "_contentwarehouse_2933_SecurityCredentialsMdbUserProtoOut",
        "RepositoryWebrefCategoryAnnotationShoppingSignalsIn": "_contentwarehouse_2934_RepositoryWebrefCategoryAnnotationShoppingSignalsIn",
        "RepositoryWebrefCategoryAnnotationShoppingSignalsOut": "_contentwarehouse_2935_RepositoryWebrefCategoryAnnotationShoppingSignalsOut",
        "VideoVideoStreamInfoVideoStreamIn": "_contentwarehouse_2936_VideoVideoStreamInfoVideoStreamIn",
        "VideoVideoStreamInfoVideoStreamOut": "_contentwarehouse_2937_VideoVideoStreamInfoVideoStreamOut",
        "AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldIn": "_contentwarehouse_2938_AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldIn",
        "AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldOut": "_contentwarehouse_2939_AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldOut",
        "AssistantLogsLowConfidenceTargetDeviceLogIn": "_contentwarehouse_2940_AssistantLogsLowConfidenceTargetDeviceLogIn",
        "AssistantLogsLowConfidenceTargetDeviceLogOut": "_contentwarehouse_2941_AssistantLogsLowConfidenceTargetDeviceLogOut",
        "TeragoogleDocumentInfoAttachmentIn": "_contentwarehouse_2942_TeragoogleDocumentInfoAttachmentIn",
        "TeragoogleDocumentInfoAttachmentOut": "_contentwarehouse_2943_TeragoogleDocumentInfoAttachmentOut",
        "SecurityCredentialsAllAuthenticatedUsersProtoIn": "_contentwarehouse_2944_SecurityCredentialsAllAuthenticatedUsersProtoIn",
        "SecurityCredentialsAllAuthenticatedUsersProtoOut": "_contentwarehouse_2945_SecurityCredentialsAllAuthenticatedUsersProtoOut",
        "KnowledgeAnswersOpaqueNewsProviderTypeIn": "_contentwarehouse_2946_KnowledgeAnswersOpaqueNewsProviderTypeIn",
        "KnowledgeAnswersOpaqueNewsProviderTypeOut": "_contentwarehouse_2947_KnowledgeAnswersOpaqueNewsProviderTypeOut",
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleIn": "_contentwarehouse_2948_BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleIn",
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleOut": "_contentwarehouse_2949_BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleOut",
        "VideoContentSearchMultimodalTopicTrainingFeaturesIn": "_contentwarehouse_2950_VideoContentSearchMultimodalTopicTrainingFeaturesIn",
        "VideoContentSearchMultimodalTopicTrainingFeaturesOut": "_contentwarehouse_2951_VideoContentSearchMultimodalTopicTrainingFeaturesOut",
        "SecurityCredentialsZwiebackSessionProtoIn": "_contentwarehouse_2952_SecurityCredentialsZwiebackSessionProtoIn",
        "SecurityCredentialsZwiebackSessionProtoOut": "_contentwarehouse_2953_SecurityCredentialsZwiebackSessionProtoOut",
        "AssistantGroundingRankerDeviceGroundingProviderFeaturesIn": "_contentwarehouse_2954_AssistantGroundingRankerDeviceGroundingProviderFeaturesIn",
        "AssistantGroundingRankerDeviceGroundingProviderFeaturesOut": "_contentwarehouse_2955_AssistantGroundingRankerDeviceGroundingProviderFeaturesOut",
        "GeostoreTimeComponentProtoIn": "_contentwarehouse_2956_GeostoreTimeComponentProtoIn",
        "GeostoreTimeComponentProtoOut": "_contentwarehouse_2957_GeostoreTimeComponentProtoOut",
        "NlpSemanticParsingModelsMediaCostIn": "_contentwarehouse_2958_NlpSemanticParsingModelsMediaCostIn",
        "NlpSemanticParsingModelsMediaCostOut": "_contentwarehouse_2959_NlpSemanticParsingModelsMediaCostOut",
        "ExtraSnippetInfoResponseTidbitIn": "_contentwarehouse_2960_ExtraSnippetInfoResponseTidbitIn",
        "ExtraSnippetInfoResponseTidbitOut": "_contentwarehouse_2961_ExtraSnippetInfoResponseTidbitOut",
        "NlpSaftIdentifierIn": "_contentwarehouse_2962_NlpSaftIdentifierIn",
        "NlpSaftIdentifierOut": "_contentwarehouse_2963_NlpSaftIdentifierOut",
        "PhotosVisionObjectrecGlobalFeatureIn": "_contentwarehouse_2964_PhotosVisionObjectrecGlobalFeatureIn",
        "PhotosVisionObjectrecGlobalFeatureOut": "_contentwarehouse_2965_PhotosVisionObjectrecGlobalFeatureOut",
        "QualityActionsReminderPersonIn": "_contentwarehouse_2966_QualityActionsReminderPersonIn",
        "QualityActionsReminderPersonOut": "_contentwarehouse_2967_QualityActionsReminderPersonOut",
        "QualityPreviewSnippetRadishFeaturesIn": "_contentwarehouse_2968_QualityPreviewSnippetRadishFeaturesIn",
        "QualityPreviewSnippetRadishFeaturesOut": "_contentwarehouse_2969_QualityPreviewSnippetRadishFeaturesOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingIn": "_contentwarehouse_2970_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingOut": "_contentwarehouse_2971_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingOut",
        "AppsPeopleOzExternalMergedpeopleapiLocationIn": "_contentwarehouse_2972_AppsPeopleOzExternalMergedpeopleapiLocationIn",
        "AppsPeopleOzExternalMergedpeopleapiLocationOut": "_contentwarehouse_2973_AppsPeopleOzExternalMergedpeopleapiLocationOut",
        "VideoLegosLegosAnnotationsSetIn": "_contentwarehouse_2974_VideoLegosLegosAnnotationsSetIn",
        "VideoLegosLegosAnnotationsSetOut": "_contentwarehouse_2975_VideoLegosLegosAnnotationsSetOut",
        "GoogleAssistantEmbeddedV1AlarmsIn": "_contentwarehouse_2976_GoogleAssistantEmbeddedV1AlarmsIn",
        "GoogleAssistantEmbeddedV1AlarmsOut": "_contentwarehouse_2977_GoogleAssistantEmbeddedV1AlarmsOut",
        "KnowledgeGraphTripleObjIn": "_contentwarehouse_2978_KnowledgeGraphTripleObjIn",
        "KnowledgeGraphTripleObjOut": "_contentwarehouse_2979_KnowledgeGraphTripleObjOut",
        "GoogleCloudDocumentaiV1DocumentPageAnchorIn": "_contentwarehouse_2980_GoogleCloudDocumentaiV1DocumentPageAnchorIn",
        "GoogleCloudDocumentaiV1DocumentPageAnchorOut": "_contentwarehouse_2981_GoogleCloudDocumentaiV1DocumentPageAnchorOut",
        "AssistantApiSettingsKidsModeIn": "_contentwarehouse_2982_AssistantApiSettingsKidsModeIn",
        "AssistantApiSettingsKidsModeOut": "_contentwarehouse_2983_AssistantApiSettingsKidsModeOut",
        "AssistantApiScreenCapabilitiesResolutionIn": "_contentwarehouse_2984_AssistantApiScreenCapabilitiesResolutionIn",
        "AssistantApiScreenCapabilitiesResolutionOut": "_contentwarehouse_2985_AssistantApiScreenCapabilitiesResolutionOut",
        "GoogleCloudContentwarehouseV1EnumTypeOptionsIn": "_contentwarehouse_2986_GoogleCloudContentwarehouseV1EnumTypeOptionsIn",
        "GoogleCloudContentwarehouseV1EnumTypeOptionsOut": "_contentwarehouse_2987_GoogleCloudContentwarehouseV1EnumTypeOptionsOut",
        "AssistantDevicesPlatformProtoIntValueSpecIn": "_contentwarehouse_2988_AssistantDevicesPlatformProtoIntValueSpecIn",
        "AssistantDevicesPlatformProtoIntValueSpecOut": "_contentwarehouse_2989_AssistantDevicesPlatformProtoIntValueSpecOut",
        "NlpSemanticParsingModelsMediaMovieIn": "_contentwarehouse_2990_NlpSemanticParsingModelsMediaMovieIn",
        "NlpSemanticParsingModelsMediaMovieOut": "_contentwarehouse_2991_NlpSemanticParsingModelsMediaMovieOut",
        "AppsPeopleOzExternalMergedpeopleapiExternalIdIn": "_contentwarehouse_2992_AppsPeopleOzExternalMergedpeopleapiExternalIdIn",
        "AppsPeopleOzExternalMergedpeopleapiExternalIdOut": "_contentwarehouse_2993_AppsPeopleOzExternalMergedpeopleapiExternalIdOut",
        "VideoContentSearchDolphinEnsembleScoreIn": "_contentwarehouse_2994_VideoContentSearchDolphinEnsembleScoreIn",
        "VideoContentSearchDolphinEnsembleScoreOut": "_contentwarehouse_2995_VideoContentSearchDolphinEnsembleScoreOut",
        "GoogleCloudDocumentaiV1DocumentEntityNormalizedValueIn": "_contentwarehouse_2996_GoogleCloudDocumentaiV1DocumentEntityNormalizedValueIn",
        "GoogleCloudDocumentaiV1DocumentEntityNormalizedValueOut": "_contentwarehouse_2997_GoogleCloudDocumentaiV1DocumentEntityNormalizedValueOut",
        "RepositoryWebrefLatentEntitiesIn": "_contentwarehouse_2998_RepositoryWebrefLatentEntitiesIn",
        "RepositoryWebrefLatentEntitiesOut": "_contentwarehouse_2999_RepositoryWebrefLatentEntitiesOut",
        "QualityTimebasedSyntacticDatePositionIn": "_contentwarehouse_3000_QualityTimebasedSyntacticDatePositionIn",
        "QualityTimebasedSyntacticDatePositionOut": "_contentwarehouse_3001_QualityTimebasedSyntacticDatePositionOut",
        "VideoContentSearchCommentAnchorSetFeaturesIn": "_contentwarehouse_3002_VideoContentSearchCommentAnchorSetFeaturesIn",
        "VideoContentSearchCommentAnchorSetFeaturesOut": "_contentwarehouse_3003_VideoContentSearchCommentAnchorSetFeaturesOut",
        "NlpSemanticParsingModelsShoppingAssistantProductClassificationIn": "_contentwarehouse_3004_NlpSemanticParsingModelsShoppingAssistantProductClassificationIn",
        "NlpSemanticParsingModelsShoppingAssistantProductClassificationOut": "_contentwarehouse_3005_NlpSemanticParsingModelsShoppingAssistantProductClassificationOut",
        "NlpSemanticParsingNumberSimpleNumberIn": "_contentwarehouse_3006_NlpSemanticParsingNumberSimpleNumberIn",
        "NlpSemanticParsingNumberSimpleNumberOut": "_contentwarehouse_3007_NlpSemanticParsingNumberSimpleNumberOut",
        "GeostoreExistenceProtoIn": "_contentwarehouse_3008_GeostoreExistenceProtoIn",
        "GeostoreExistenceProtoOut": "_contentwarehouse_3009_GeostoreExistenceProtoOut",
        "AssistantApiDurationIn": "_contentwarehouse_3010_AssistantApiDurationIn",
        "AssistantApiDurationOut": "_contentwarehouse_3011_AssistantApiDurationOut",
        "OceanDocTagCatalogSpecificIn": "_contentwarehouse_3012_OceanDocTagCatalogSpecificIn",
        "OceanDocTagCatalogSpecificOut": "_contentwarehouse_3013_OceanDocTagCatalogSpecificOut",
        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateIn": "_contentwarehouse_3014_AssistantApiSystemNotificationRestrictionsNotificationChannelStateIn",
        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateOut": "_contentwarehouse_3015_AssistantApiSystemNotificationRestrictionsNotificationChannelStateOut",
        "SearchPolicyRankableSensitivityFulfillmentIn": "_contentwarehouse_3016_SearchPolicyRankableSensitivityFulfillmentIn",
        "SearchPolicyRankableSensitivityFulfillmentOut": "_contentwarehouse_3017_SearchPolicyRankableSensitivityFulfillmentOut",
        "KnowledgeAnswersSensitivityInstructionIn": "_contentwarehouse_3018_KnowledgeAnswersSensitivityInstructionIn",
        "KnowledgeAnswersSensitivityInstructionOut": "_contentwarehouse_3019_KnowledgeAnswersSensitivityInstructionOut",
        "GeostoreWeightComparisonProtoIn": "_contentwarehouse_3020_GeostoreWeightComparisonProtoIn",
        "GeostoreWeightComparisonProtoOut": "_contentwarehouse_3021_GeostoreWeightComparisonProtoOut",
        "GoogleCloudDocumentaiV1DocumentPageImageIn": "_contentwarehouse_3022_GoogleCloudDocumentaiV1DocumentPageImageIn",
        "GoogleCloudDocumentaiV1DocumentPageImageOut": "_contentwarehouse_3023_GoogleCloudDocumentaiV1DocumentPageImageOut",
        "YoutubeBackstageSuperVodCommentInfoIn": "_contentwarehouse_3024_YoutubeBackstageSuperVodCommentInfoIn",
        "YoutubeBackstageSuperVodCommentInfoOut": "_contentwarehouse_3025_YoutubeBackstageSuperVodCommentInfoOut",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusIn": "_contentwarehouse_3026_GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusIn",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusOut": "_contentwarehouse_3027_GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusOut",
        "GoogleCloudContentwarehouseV1RuleActionsPairIn": "_contentwarehouse_3028_GoogleCloudContentwarehouseV1RuleActionsPairIn",
        "GoogleCloudContentwarehouseV1RuleActionsPairOut": "_contentwarehouse_3029_GoogleCloudContentwarehouseV1RuleActionsPairOut",
        "KnowledgeAnswersIntentQueryNimbleAnnotationSignalsIn": "_contentwarehouse_3030_KnowledgeAnswersIntentQueryNimbleAnnotationSignalsIn",
        "KnowledgeAnswersIntentQueryNimbleAnnotationSignalsOut": "_contentwarehouse_3031_KnowledgeAnswersIntentQueryNimbleAnnotationSignalsOut",
        "GoodocOverridesIn": "_contentwarehouse_3032_GoodocOverridesIn",
        "GoodocOverridesOut": "_contentwarehouse_3033_GoodocOverridesOut",
        "AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataIn": "_contentwarehouse_3034_AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataOut": "_contentwarehouse_3035_AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataOut",
        "AssistantApiNotificationOutputRestrictionsOptOutStateIn": "_contentwarehouse_3036_AssistantApiNotificationOutputRestrictionsOptOutStateIn",
        "AssistantApiNotificationOutputRestrictionsOptOutStateOut": "_contentwarehouse_3037_AssistantApiNotificationOutputRestrictionsOptOutStateOut",
        "NlpSemanticParsingModelsMediaDescriptionIn": "_contentwarehouse_3038_NlpSemanticParsingModelsMediaDescriptionIn",
        "NlpSemanticParsingModelsMediaDescriptionOut": "_contentwarehouse_3039_NlpSemanticParsingModelsMediaDescriptionOut",
        "StorageGraphBfgUmpPolicyMetadataIn": "_contentwarehouse_3040_StorageGraphBfgUmpPolicyMetadataIn",
        "StorageGraphBfgUmpPolicyMetadataOut": "_contentwarehouse_3041_StorageGraphBfgUmpPolicyMetadataOut",
        "PhotosAnimationMetadataIn": "_contentwarehouse_3042_PhotosAnimationMetadataIn",
        "PhotosAnimationMetadataOut": "_contentwarehouse_3043_PhotosAnimationMetadataOut",
        "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesIn": "_contentwarehouse_3044_AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesIn",
        "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesOut": "_contentwarehouse_3045_AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesOut",
        "DeepCropPixelsIn": "_contentwarehouse_3046_DeepCropPixelsIn",
        "DeepCropPixelsOut": "_contentwarehouse_3047_DeepCropPixelsOut",
        "AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoIn": "_contentwarehouse_3048_AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoOut": "_contentwarehouse_3049_AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoOut",
        "KnowledgeAnswersRangeConstraintIn": "_contentwarehouse_3050_KnowledgeAnswersRangeConstraintIn",
        "KnowledgeAnswersRangeConstraintOut": "_contentwarehouse_3051_KnowledgeAnswersRangeConstraintOut",
        "AssistantLogsDeviceSelectionLogIn": "_contentwarehouse_3052_AssistantLogsDeviceSelectionLogIn",
        "AssistantLogsDeviceSelectionLogOut": "_contentwarehouse_3053_AssistantLogsDeviceSelectionLogOut",
        "AssistantApiCastAssistantSettingLinkingResultIn": "_contentwarehouse_3054_AssistantApiCastAssistantSettingLinkingResultIn",
        "AssistantApiCastAssistantSettingLinkingResultOut": "_contentwarehouse_3055_AssistantApiCastAssistantSettingLinkingResultOut",
        "AbuseiamOrRestrictionIn": "_contentwarehouse_3056_AbuseiamOrRestrictionIn",
        "AbuseiamOrRestrictionOut": "_contentwarehouse_3057_AbuseiamOrRestrictionOut",
        "SocialStanzaModerationInfoIn": "_contentwarehouse_3058_SocialStanzaModerationInfoIn",
        "SocialStanzaModerationInfoOut": "_contentwarehouse_3059_SocialStanzaModerationInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIn": "_contentwarehouse_3060_AppsPeopleOzExternalMergedpeopleapiManagementUpchainIn",
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainOut": "_contentwarehouse_3061_AppsPeopleOzExternalMergedpeopleapiManagementUpchainOut",
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductIn": "_contentwarehouse_3062_NlpSemanticParsingModelsShoppingAssistantProductMediaProductIn",
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductOut": "_contentwarehouse_3063_NlpSemanticParsingModelsShoppingAssistantProductMediaProductOut",
        "OcrPhotoBoundingBoxIn": "_contentwarehouse_3064_OcrPhotoBoundingBoxIn",
        "OcrPhotoBoundingBoxOut": "_contentwarehouse_3065_OcrPhotoBoundingBoxOut",
        "AssistantApiCoreTypesGovernedDeviceIdIn": "_contentwarehouse_3066_AssistantApiCoreTypesGovernedDeviceIdIn",
        "AssistantApiCoreTypesGovernedDeviceIdOut": "_contentwarehouse_3067_AssistantApiCoreTypesGovernedDeviceIdOut",
        "AssistantApiSettingsHospitalityCardSettingsIn": "_contentwarehouse_3068_AssistantApiSettingsHospitalityCardSettingsIn",
        "AssistantApiSettingsHospitalityCardSettingsOut": "_contentwarehouse_3069_AssistantApiSettingsHospitalityCardSettingsOut",
        "TrawlerFetchReplyDataRedirectsIn": "_contentwarehouse_3070_TrawlerFetchReplyDataRedirectsIn",
        "TrawlerFetchReplyDataRedirectsOut": "_contentwarehouse_3071_TrawlerFetchReplyDataRedirectsOut",
        "RepositoryWebrefReferencePageScoresIn": "_contentwarehouse_3072_RepositoryWebrefReferencePageScoresIn",
        "RepositoryWebrefReferencePageScoresOut": "_contentwarehouse_3073_RepositoryWebrefReferencePageScoresOut",
        "GoogleInternalAppsWaldoV1alphaLocalTimeContextIn": "_contentwarehouse_3074_GoogleInternalAppsWaldoV1alphaLocalTimeContextIn",
        "GoogleInternalAppsWaldoV1alphaLocalTimeContextOut": "_contentwarehouse_3075_GoogleInternalAppsWaldoV1alphaLocalTimeContextOut",
        "AssistantLogsProviderAnnotationLogIn": "_contentwarehouse_3076_AssistantLogsProviderAnnotationLogIn",
        "AssistantLogsProviderAnnotationLogOut": "_contentwarehouse_3077_AssistantLogsProviderAnnotationLogOut",
        "GoogleCloudContentwarehouseV1WeightedSchemaPropertyIn": "_contentwarehouse_3078_GoogleCloudContentwarehouseV1WeightedSchemaPropertyIn",
        "GoogleCloudContentwarehouseV1WeightedSchemaPropertyOut": "_contentwarehouse_3079_GoogleCloudContentwarehouseV1WeightedSchemaPropertyOut",
        "AssistantApiCoreTypesGovernedColorIn": "_contentwarehouse_3080_AssistantApiCoreTypesGovernedColorIn",
        "AssistantApiCoreTypesGovernedColorOut": "_contentwarehouse_3081_AssistantApiCoreTypesGovernedColorOut",
        "GeostoreAttributeValueDisplayProtoIn": "_contentwarehouse_3082_GeostoreAttributeValueDisplayProtoIn",
        "GeostoreAttributeValueDisplayProtoOut": "_contentwarehouse_3083_GeostoreAttributeValueDisplayProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoIn": "_contentwarehouse_3084_AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoOut": "_contentwarehouse_3085_AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdIn": "_contentwarehouse_3086_AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdIn",
        "AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdOut": "_contentwarehouse_3087_AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonAttributeIn": "_contentwarehouse_3088_AppsPeopleOzExternalMergedpeopleapiPersonAttributeIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonAttributeOut": "_contentwarehouse_3089_AppsPeopleOzExternalMergedpeopleapiPersonAttributeOut",
        "GoogleCloudContentwarehouseV1PropertyArrayIn": "_contentwarehouse_3090_GoogleCloudContentwarehouseV1PropertyArrayIn",
        "GoogleCloudContentwarehouseV1PropertyArrayOut": "_contentwarehouse_3091_GoogleCloudContentwarehouseV1PropertyArrayOut",
        "NlpSemanticParsingExpressionStatusIn": "_contentwarehouse_3092_NlpSemanticParsingExpressionStatusIn",
        "NlpSemanticParsingExpressionStatusOut": "_contentwarehouse_3093_NlpSemanticParsingExpressionStatusOut",
        "GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextIn": "_contentwarehouse_3094_GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextIn",
        "GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextOut": "_contentwarehouse_3095_GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextOut",
        "NlpSemanticParsingModelsMediaSeasonConstraintIn": "_contentwarehouse_3096_NlpSemanticParsingModelsMediaSeasonConstraintIn",
        "NlpSemanticParsingModelsMediaSeasonConstraintOut": "_contentwarehouse_3097_NlpSemanticParsingModelsMediaSeasonConstraintOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailIn": "_contentwarehouse_3098_AppsPeopleOzExternalMergedpeopleapiEmailIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailOut": "_contentwarehouse_3099_AppsPeopleOzExternalMergedpeopleapiEmailOut",
        "KnowledgeAnswersStringTypeIn": "_contentwarehouse_3100_KnowledgeAnswersStringTypeIn",
        "KnowledgeAnswersStringTypeOut": "_contentwarehouse_3101_KnowledgeAnswersStringTypeOut",
        "VendingConsumerProtoTrustedGenomeAnnotationIn": "_contentwarehouse_3102_VendingConsumerProtoTrustedGenomeAnnotationIn",
        "VendingConsumerProtoTrustedGenomeAnnotationOut": "_contentwarehouse_3103_VendingConsumerProtoTrustedGenomeAnnotationOut",
        "NlpSemanticParsingLocalContactLocationIn": "_contentwarehouse_3104_NlpSemanticParsingLocalContactLocationIn",
        "NlpSemanticParsingLocalContactLocationOut": "_contentwarehouse_3105_NlpSemanticParsingLocalContactLocationOut",
        "GeostorePointWithHeightProtoIn": "_contentwarehouse_3106_GeostorePointWithHeightProtoIn",
        "GeostorePointWithHeightProtoOut": "_contentwarehouse_3107_GeostorePointWithHeightProtoOut",
        "BusinessHoursIn": "_contentwarehouse_3108_BusinessHoursIn",
        "BusinessHoursOut": "_contentwarehouse_3109_BusinessHoursOut",
        "ResearchScamCoscamTokenGroupIn": "_contentwarehouse_3110_ResearchScamCoscamTokenGroupIn",
        "ResearchScamCoscamTokenGroupOut": "_contentwarehouse_3111_ResearchScamCoscamTokenGroupOut",
        "NlpSemanticParsingLocalStarRatingsIn": "_contentwarehouse_3112_NlpSemanticParsingLocalStarRatingsIn",
        "NlpSemanticParsingLocalStarRatingsOut": "_contentwarehouse_3113_NlpSemanticParsingLocalStarRatingsOut",
        "LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoIn": "_contentwarehouse_3114_LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoIn",
        "LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoOut": "_contentwarehouse_3115_LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoOut",
        "RepositoryWebrefWebrefStatusIn": "_contentwarehouse_3116_RepositoryWebrefWebrefStatusIn",
        "RepositoryWebrefWebrefStatusOut": "_contentwarehouse_3117_RepositoryWebrefWebrefStatusOut",
        "ImageBaseThumbnailMetadataIn": "_contentwarehouse_3118_ImageBaseThumbnailMetadataIn",
        "ImageBaseThumbnailMetadataOut": "_contentwarehouse_3119_ImageBaseThumbnailMetadataOut",
        "ResearchScamTokenNamespaceIn": "_contentwarehouse_3120_ResearchScamTokenNamespaceIn",
        "ResearchScamTokenNamespaceOut": "_contentwarehouse_3121_ResearchScamTokenNamespaceOut",
        "StorageGraphBfgLmsPolicyMetadataIn": "_contentwarehouse_3122_StorageGraphBfgLmsPolicyMetadataIn",
        "StorageGraphBfgLmsPolicyMetadataOut": "_contentwarehouse_3123_StorageGraphBfgLmsPolicyMetadataOut",
        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionIn": "_contentwarehouse_3124_LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionIn",
        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionOut": "_contentwarehouse_3125_LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionOut",
        "AnchorsAnchorSourceIn": "_contentwarehouse_3126_AnchorsAnchorSourceIn",
        "AnchorsAnchorSourceOut": "_contentwarehouse_3127_AnchorsAnchorSourceOut",
        "GeostoreKnowledgeGraphReferenceProtoIn": "_contentwarehouse_3128_GeostoreKnowledgeGraphReferenceProtoIn",
        "GeostoreKnowledgeGraphReferenceProtoOut": "_contentwarehouse_3129_GeostoreKnowledgeGraphReferenceProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeIn": "_contentwarehouse_3130_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeOut": "_contentwarehouse_3131_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeOut",
        "VideoFileSphericalMetadataCubemapProjectionIn": "_contentwarehouse_3132_VideoFileSphericalMetadataCubemapProjectionIn",
        "VideoFileSphericalMetadataCubemapProjectionOut": "_contentwarehouse_3133_VideoFileSphericalMetadataCubemapProjectionOut",
        "CompositeDocLiveExperimentInfoPerLiveExperimentInfoIn": "_contentwarehouse_3134_CompositeDocLiveExperimentInfoPerLiveExperimentInfoIn",
        "CompositeDocLiveExperimentInfoPerLiveExperimentInfoOut": "_contentwarehouse_3135_CompositeDocLiveExperimentInfoPerLiveExperimentInfoOut",
        "GoodocSemanticLabelColumnDetailsIn": "_contentwarehouse_3136_GoodocSemanticLabelColumnDetailsIn",
        "GoodocSemanticLabelColumnDetailsOut": "_contentwarehouse_3137_GoodocSemanticLabelColumnDetailsOut",
        "AssistantApiLensPerceptionCapabilitiesIn": "_contentwarehouse_3138_AssistantApiLensPerceptionCapabilitiesIn",
        "AssistantApiLensPerceptionCapabilitiesOut": "_contentwarehouse_3139_AssistantApiLensPerceptionCapabilitiesOut",
        "RepositoryWebrefProductMetadataIn": "_contentwarehouse_3140_RepositoryWebrefProductMetadataIn",
        "RepositoryWebrefProductMetadataOut": "_contentwarehouse_3141_RepositoryWebrefProductMetadataOut",
        "RepositoryWebrefAggregatedEntityNameScoresIn": "_contentwarehouse_3142_RepositoryWebrefAggregatedEntityNameScoresIn",
        "RepositoryWebrefAggregatedEntityNameScoresOut": "_contentwarehouse_3143_RepositoryWebrefAggregatedEntityNameScoresOut",
        "AssistantLogsMediaDeviceSelectionDecisionSummaryIn": "_contentwarehouse_3144_AssistantLogsMediaDeviceSelectionDecisionSummaryIn",
        "AssistantLogsMediaDeviceSelectionDecisionSummaryOut": "_contentwarehouse_3145_AssistantLogsMediaDeviceSelectionDecisionSummaryOut",
        "VideoVideoStreamInfoVideoStreamCleanApertureIn": "_contentwarehouse_3146_VideoVideoStreamInfoVideoStreamCleanApertureIn",
        "VideoVideoStreamInfoVideoStreamCleanApertureOut": "_contentwarehouse_3147_VideoVideoStreamInfoVideoStreamCleanApertureOut",
        "SocialGraphApiProtoPromptIn": "_contentwarehouse_3148_SocialGraphApiProtoPromptIn",
        "SocialGraphApiProtoPromptOut": "_contentwarehouse_3149_SocialGraphApiProtoPromptOut",
        "LegalCitationCourtDocumentPerDocketInfoIn": "_contentwarehouse_3150_LegalCitationCourtDocumentPerDocketInfoIn",
        "LegalCitationCourtDocumentPerDocketInfoOut": "_contentwarehouse_3151_LegalCitationCourtDocumentPerDocketInfoOut",
        "KnowledgeAnswersIntentModifiersIn": "_contentwarehouse_3152_KnowledgeAnswersIntentModifiersIn",
        "KnowledgeAnswersIntentModifiersOut": "_contentwarehouse_3153_KnowledgeAnswersIntentModifiersOut",
        "VideoFileSphericalMetadataEquirectProjectionIn": "_contentwarehouse_3154_VideoFileSphericalMetadataEquirectProjectionIn",
        "VideoFileSphericalMetadataEquirectProjectionOut": "_contentwarehouse_3155_VideoFileSphericalMetadataEquirectProjectionOut",
        "GeostoreDoodleProtoIn": "_contentwarehouse_3156_GeostoreDoodleProtoIn",
        "GeostoreDoodleProtoOut": "_contentwarehouse_3157_GeostoreDoodleProtoOut",
        "NlpSaftHyperlinkIn": "_contentwarehouse_3158_NlpSaftHyperlinkIn",
        "NlpSaftHyperlinkOut": "_contentwarehouse_3159_NlpSaftHyperlinkOut",
        "AssistantPrefulfillmentRankerPrefulfillmentSignalsIn": "_contentwarehouse_3160_AssistantPrefulfillmentRankerPrefulfillmentSignalsIn",
        "AssistantPrefulfillmentRankerPrefulfillmentSignalsOut": "_contentwarehouse_3161_AssistantPrefulfillmentRankerPrefulfillmentSignalsOut",
        "KnowledgeAnswersOpaqueDeviceUserIdentityTypeIn": "_contentwarehouse_3162_KnowledgeAnswersOpaqueDeviceUserIdentityTypeIn",
        "KnowledgeAnswersOpaqueDeviceUserIdentityTypeOut": "_contentwarehouse_3163_KnowledgeAnswersOpaqueDeviceUserIdentityTypeOut",
        "NlxDataSchemaSentenceIn": "_contentwarehouse_3164_NlxDataSchemaSentenceIn",
        "NlxDataSchemaSentenceOut": "_contentwarehouse_3165_NlxDataSchemaSentenceOut",
        "HomeGraphCommonTraitRoutingHintsIn": "_contentwarehouse_3166_HomeGraphCommonTraitRoutingHintsIn",
        "HomeGraphCommonTraitRoutingHintsOut": "_contentwarehouse_3167_HomeGraphCommonTraitRoutingHintsOut",
        "GeostoreFoodMenuItemOptionProtoPortionSizeIn": "_contentwarehouse_3168_GeostoreFoodMenuItemOptionProtoPortionSizeIn",
        "GeostoreFoodMenuItemOptionProtoPortionSizeOut": "_contentwarehouse_3169_GeostoreFoodMenuItemOptionProtoPortionSizeOut",
        "NlpSemanticParsingEntitySourceDataIn": "_contentwarehouse_3170_NlpSemanticParsingEntitySourceDataIn",
        "NlpSemanticParsingEntitySourceDataOut": "_contentwarehouse_3171_NlpSemanticParsingEntitySourceDataOut",
        "SmartphonePerDocDataIn": "_contentwarehouse_3172_SmartphonePerDocDataIn",
        "SmartphonePerDocDataOut": "_contentwarehouse_3173_SmartphonePerDocDataOut",
        "QualitySalientTermsDocDataIn": "_contentwarehouse_3174_QualitySalientTermsDocDataIn",
        "QualitySalientTermsDocDataOut": "_contentwarehouse_3175_QualitySalientTermsDocDataOut",
        "QualityRichsnippetsAppsProtosLaunchableAppPerDocDataIn": "_contentwarehouse_3176_QualityRichsnippetsAppsProtosLaunchableAppPerDocDataIn",
        "QualityRichsnippetsAppsProtosLaunchableAppPerDocDataOut": "_contentwarehouse_3177_QualityRichsnippetsAppsProtosLaunchableAppPerDocDataOut",
        "OceanDocTagContributorIn": "_contentwarehouse_3178_OceanDocTagContributorIn",
        "OceanDocTagContributorOut": "_contentwarehouse_3179_OceanDocTagContributorOut",
        "HtmlrenderWebkitHeadlessProtoImageIn": "_contentwarehouse_3180_HtmlrenderWebkitHeadlessProtoImageIn",
        "HtmlrenderWebkitHeadlessProtoImageOut": "_contentwarehouse_3181_HtmlrenderWebkitHeadlessProtoImageOut",
        "PhotosVisionObjectrecFeatureVectorIn": "_contentwarehouse_3182_PhotosVisionObjectrecFeatureVectorIn",
        "PhotosVisionObjectrecFeatureVectorOut": "_contentwarehouse_3183_PhotosVisionObjectrecFeatureVectorOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoIn": "_contentwarehouse_3184_AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoOut": "_contentwarehouse_3185_AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoOut",
        "RepositoryWebrefDisplayNameIn": "_contentwarehouse_3186_RepositoryWebrefDisplayNameIn",
        "RepositoryWebrefDisplayNameOut": "_contentwarehouse_3187_RepositoryWebrefDisplayNameOut",
        "TrawlerHostBucketDataUrlListIn": "_contentwarehouse_3188_TrawlerHostBucketDataUrlListIn",
        "TrawlerHostBucketDataUrlListOut": "_contentwarehouse_3189_TrawlerHostBucketDataUrlListOut",
        "IndexingSignalAggregatorAgeWeightedCoverageDataIn": "_contentwarehouse_3190_IndexingSignalAggregatorAgeWeightedCoverageDataIn",
        "IndexingSignalAggregatorAgeWeightedCoverageDataOut": "_contentwarehouse_3191_IndexingSignalAggregatorAgeWeightedCoverageDataOut",
        "ResearchScienceSearchSourceUrlDocjoinInfoIn": "_contentwarehouse_3192_ResearchScienceSearchSourceUrlDocjoinInfoIn",
        "ResearchScienceSearchSourceUrlDocjoinInfoOut": "_contentwarehouse_3193_ResearchScienceSearchSourceUrlDocjoinInfoOut",
        "KnowledgeAnswersMarkerPolarQuestionIn": "_contentwarehouse_3194_KnowledgeAnswersMarkerPolarQuestionIn",
        "KnowledgeAnswersMarkerPolarQuestionOut": "_contentwarehouse_3195_KnowledgeAnswersMarkerPolarQuestionOut",
        "GeostoreLanguageTaggedTextProtoIn": "_contentwarehouse_3196_GeostoreLanguageTaggedTextProtoIn",
        "GeostoreLanguageTaggedTextProtoOut": "_contentwarehouse_3197_GeostoreLanguageTaggedTextProtoOut",
        "GoogleTypeDateIn": "_contentwarehouse_3198_GoogleTypeDateIn",
        "GoogleTypeDateOut": "_contentwarehouse_3199_GoogleTypeDateOut",
        "VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampIn": "_contentwarehouse_3200_VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampIn",
        "VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampOut": "_contentwarehouse_3201_VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampOut",
        "AssistantGroundingRankerLaaFeaturesProviderIn": "_contentwarehouse_3202_AssistantGroundingRankerLaaFeaturesProviderIn",
        "AssistantGroundingRankerLaaFeaturesProviderOut": "_contentwarehouse_3203_AssistantGroundingRankerLaaFeaturesProviderOut",
        "GeostorePhysicalLineProtoIn": "_contentwarehouse_3204_GeostorePhysicalLineProtoIn",
        "GeostorePhysicalLineProtoOut": "_contentwarehouse_3205_GeostorePhysicalLineProtoOut",
        "SecurityCredentialsLdapGroupProtoIn": "_contentwarehouse_3206_SecurityCredentialsLdapGroupProtoIn",
        "SecurityCredentialsLdapGroupProtoOut": "_contentwarehouse_3207_SecurityCredentialsLdapGroupProtoOut",
        "GeostoreGConceptInstanceProtoIn": "_contentwarehouse_3208_GeostoreGConceptInstanceProtoIn",
        "GeostoreGConceptInstanceProtoOut": "_contentwarehouse_3209_GeostoreGConceptInstanceProtoOut",
        "IndexingEmbeddedContentPageSizeInfoIn": "_contentwarehouse_3210_IndexingEmbeddedContentPageSizeInfoIn",
        "IndexingEmbeddedContentPageSizeInfoOut": "_contentwarehouse_3211_IndexingEmbeddedContentPageSizeInfoOut",
        "FatcatCompactRephilClustersClusterIn": "_contentwarehouse_3212_FatcatCompactRephilClustersClusterIn",
        "FatcatCompactRephilClustersClusterOut": "_contentwarehouse_3213_FatcatCompactRephilClustersClusterOut",
        "IndexingUrlPatternUrlTreeUrlFeaturesIn": "_contentwarehouse_3214_IndexingUrlPatternUrlTreeUrlFeaturesIn",
        "IndexingUrlPatternUrlTreeUrlFeaturesOut": "_contentwarehouse_3215_IndexingUrlPatternUrlTreeUrlFeaturesOut",
        "QualityRankembedMustangMustangRankEmbedInfoIn": "_contentwarehouse_3216_QualityRankembedMustangMustangRankEmbedInfoIn",
        "QualityRankembedMustangMustangRankEmbedInfoOut": "_contentwarehouse_3217_QualityRankembedMustangMustangRankEmbedInfoOut",
        "OceanVolumeViewabilityLocaleIn": "_contentwarehouse_3218_OceanVolumeViewabilityLocaleIn",
        "OceanVolumeViewabilityLocaleOut": "_contentwarehouse_3219_OceanVolumeViewabilityLocaleOut",
        "RepositoryWebrefDisplayInfoIn": "_contentwarehouse_3220_RepositoryWebrefDisplayInfoIn",
        "RepositoryWebrefDisplayInfoOut": "_contentwarehouse_3221_RepositoryWebrefDisplayInfoOut",
        "GeostorePaintedElementLogicalColorProtoIn": "_contentwarehouse_3222_GeostorePaintedElementLogicalColorProtoIn",
        "GeostorePaintedElementLogicalColorProtoOut": "_contentwarehouse_3223_GeostorePaintedElementLogicalColorProtoOut",
        "KnowledgeAnswersOpaquePersonTypeIn": "_contentwarehouse_3224_KnowledgeAnswersOpaquePersonTypeIn",
        "KnowledgeAnswersOpaquePersonTypeOut": "_contentwarehouse_3225_KnowledgeAnswersOpaquePersonTypeOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclIn": "_contentwarehouse_3226_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclOut": "_contentwarehouse_3227_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusIn": "_contentwarehouse_3228_AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusOut": "_contentwarehouse_3229_AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusOut",
        "QualityActionsCustomizedNotificationButtonIn": "_contentwarehouse_3230_QualityActionsCustomizedNotificationButtonIn",
        "QualityActionsCustomizedNotificationButtonOut": "_contentwarehouse_3231_QualityActionsCustomizedNotificationButtonOut",
        "QualityNavboostCrapsFeatureCrapsDataIn": "_contentwarehouse_3232_QualityNavboostCrapsFeatureCrapsDataIn",
        "QualityNavboostCrapsFeatureCrapsDataOut": "_contentwarehouse_3233_QualityNavboostCrapsFeatureCrapsDataOut",
        "AttentionalEntitiesMentionPropertiesSourceSystemIn": "_contentwarehouse_3234_AttentionalEntitiesMentionPropertiesSourceSystemIn",
        "AttentionalEntitiesMentionPropertiesSourceSystemOut": "_contentwarehouse_3235_AttentionalEntitiesMentionPropertiesSourceSystemOut",
        "QualityNavboostCrapsAgingDataAgingAgeBucketIn": "_contentwarehouse_3236_QualityNavboostCrapsAgingDataAgingAgeBucketIn",
        "QualityNavboostCrapsAgingDataAgingAgeBucketOut": "_contentwarehouse_3237_QualityNavboostCrapsAgingDataAgingAgeBucketOut",
        "AssistantApiBluetoothCapabilitiesIn": "_contentwarehouse_3238_AssistantApiBluetoothCapabilitiesIn",
        "AssistantApiBluetoothCapabilitiesOut": "_contentwarehouse_3239_AssistantApiBluetoothCapabilitiesOut",
        "GoogleCloudContentwarehouseV1beta1InitializeProjectResponseIn": "_contentwarehouse_3240_GoogleCloudContentwarehouseV1beta1InitializeProjectResponseIn",
        "GoogleCloudContentwarehouseV1beta1InitializeProjectResponseOut": "_contentwarehouse_3241_GoogleCloudContentwarehouseV1beta1InitializeProjectResponseOut",
        "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigIn": "_contentwarehouse_3242_AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigIn",
        "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigOut": "_contentwarehouse_3243_AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigOut",
        "AssistantApiCrossDeviceExecutionCapabilityIn": "_contentwarehouse_3244_AssistantApiCrossDeviceExecutionCapabilityIn",
        "AssistantApiCrossDeviceExecutionCapabilityOut": "_contentwarehouse_3245_AssistantApiCrossDeviceExecutionCapabilityOut",
        "AssistantApiSettingsDuoCallDeviceSettingsIn": "_contentwarehouse_3246_AssistantApiSettingsDuoCallDeviceSettingsIn",
        "AssistantApiSettingsDuoCallDeviceSettingsOut": "_contentwarehouse_3247_AssistantApiSettingsDuoCallDeviceSettingsOut",
        "AssistantLogsDeviceSelectionResultLogIn": "_contentwarehouse_3248_AssistantLogsDeviceSelectionResultLogIn",
        "AssistantLogsDeviceSelectionResultLogOut": "_contentwarehouse_3249_AssistantLogsDeviceSelectionResultLogOut",
        "RepositoryWebrefExplainedRangeInfoExplainedRangeIn": "_contentwarehouse_3250_RepositoryWebrefExplainedRangeInfoExplainedRangeIn",
        "RepositoryWebrefExplainedRangeInfoExplainedRangeOut": "_contentwarehouse_3251_RepositoryWebrefExplainedRangeInfoExplainedRangeOut",
        "PairwiseQVersionedItemIn": "_contentwarehouse_3252_PairwiseQVersionedItemIn",
        "PairwiseQVersionedItemOut": "_contentwarehouse_3253_PairwiseQVersionedItemOut",
        "AbuseiamTargetIn": "_contentwarehouse_3254_AbuseiamTargetIn",
        "AbuseiamTargetOut": "_contentwarehouse_3255_AbuseiamTargetOut",
        "ScienceCitationAnchorIn": "_contentwarehouse_3256_ScienceCitationAnchorIn",
        "ScienceCitationAnchorOut": "_contentwarehouse_3257_ScienceCitationAnchorOut",
        "GeostoreParkingAllowanceProtoIn": "_contentwarehouse_3258_GeostoreParkingAllowanceProtoIn",
        "GeostoreParkingAllowanceProtoOut": "_contentwarehouse_3259_GeostoreParkingAllowanceProtoOut",
        "VideoFileMasteringDisplayMetadataCIE1931CoordinateIn": "_contentwarehouse_3260_VideoFileMasteringDisplayMetadataCIE1931CoordinateIn",
        "VideoFileMasteringDisplayMetadataCIE1931CoordinateOut": "_contentwarehouse_3261_VideoFileMasteringDisplayMetadataCIE1931CoordinateOut",
        "SecurityCredentialsSocialGraphNodeProtoIn": "_contentwarehouse_3262_SecurityCredentialsSocialGraphNodeProtoIn",
        "SecurityCredentialsSocialGraphNodeProtoOut": "_contentwarehouse_3263_SecurityCredentialsSocialGraphNodeProtoOut",
        "NlpSemanticParsingDatetimeHolidayIn": "_contentwarehouse_3264_NlpSemanticParsingDatetimeHolidayIn",
        "NlpSemanticParsingDatetimeHolidayOut": "_contentwarehouse_3265_NlpSemanticParsingDatetimeHolidayOut",
        "HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeIn": "_contentwarehouse_3266_HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeIn",
        "HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeOut": "_contentwarehouse_3267_HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeOut",
        "GeostoreDateTimeProtoIn": "_contentwarehouse_3268_GeostoreDateTimeProtoIn",
        "GeostoreDateTimeProtoOut": "_contentwarehouse_3269_GeostoreDateTimeProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyIn": "_contentwarehouse_3270_AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyIn",
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyOut": "_contentwarehouse_3271_AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyOut",
        "QualitySitemapScoringSignalsIn": "_contentwarehouse_3272_QualitySitemapScoringSignalsIn",
        "QualitySitemapScoringSignalsOut": "_contentwarehouse_3273_QualitySitemapScoringSignalsOut",
        "AssistantDevicesPlatformProtoDeviceModifySettingCapabilityIn": "_contentwarehouse_3274_AssistantDevicesPlatformProtoDeviceModifySettingCapabilityIn",
        "AssistantDevicesPlatformProtoDeviceModifySettingCapabilityOut": "_contentwarehouse_3275_AssistantDevicesPlatformProtoDeviceModifySettingCapabilityOut",
        "AssistantApiCoreTypesCloudProviderInfoIn": "_contentwarehouse_3276_AssistantApiCoreTypesCloudProviderInfoIn",
        "AssistantApiCoreTypesCloudProviderInfoOut": "_contentwarehouse_3277_AssistantApiCoreTypesCloudProviderInfoOut",
        "NlpSemanticParsingModelsRecurrenceDailyPatternIn": "_contentwarehouse_3278_NlpSemanticParsingModelsRecurrenceDailyPatternIn",
        "NlpSemanticParsingModelsRecurrenceDailyPatternOut": "_contentwarehouse_3279_NlpSemanticParsingModelsRecurrenceDailyPatternOut",
        "CrawlerChangerateMultipleComponentDistributionIn": "_contentwarehouse_3280_CrawlerChangerateMultipleComponentDistributionIn",
        "CrawlerChangerateMultipleComponentDistributionOut": "_contentwarehouse_3281_CrawlerChangerateMultipleComponentDistributionOut",
        "GeostoreCurveConnectionProtoBezierParamsControlPointIn": "_contentwarehouse_3282_GeostoreCurveConnectionProtoBezierParamsControlPointIn",
        "GeostoreCurveConnectionProtoBezierParamsControlPointOut": "_contentwarehouse_3283_GeostoreCurveConnectionProtoBezierParamsControlPointOut",
        "NlpSemanticParsingSaftCoreferenceIn": "_contentwarehouse_3284_NlpSemanticParsingSaftCoreferenceIn",
        "NlpSemanticParsingSaftCoreferenceOut": "_contentwarehouse_3285_NlpSemanticParsingSaftCoreferenceOut",
        "RepositoryWebrefLightweightTokensPerNameLightweightTokenIn": "_contentwarehouse_3286_RepositoryWebrefLightweightTokensPerNameLightweightTokenIn",
        "RepositoryWebrefLightweightTokensPerNameLightweightTokenOut": "_contentwarehouse_3287_RepositoryWebrefLightweightTokensPerNameLightweightTokenOut",
        "RepositoryWebrefClusterProtoRelationRuleInstanceIn": "_contentwarehouse_3288_RepositoryWebrefClusterProtoRelationRuleInstanceIn",
        "RepositoryWebrefClusterProtoRelationRuleInstanceOut": "_contentwarehouse_3289_RepositoryWebrefClusterProtoRelationRuleInstanceOut",
        "ClassifierPornQueryClassifierOutputIn": "_contentwarehouse_3290_ClassifierPornQueryClassifierOutputIn",
        "ClassifierPornQueryClassifierOutputOut": "_contentwarehouse_3291_ClassifierPornQueryClassifierOutputOut",
        "NlpSemanticParsingLocalBusinessTypeIn": "_contentwarehouse_3292_NlpSemanticParsingLocalBusinessTypeIn",
        "NlpSemanticParsingLocalBusinessTypeOut": "_contentwarehouse_3293_NlpSemanticParsingLocalBusinessTypeOut",
        "DrishtiFeatureExtraIn": "_contentwarehouse_3294_DrishtiFeatureExtraIn",
        "DrishtiFeatureExtraOut": "_contentwarehouse_3295_DrishtiFeatureExtraOut",
        "TrawlerContentRangeInfoIn": "_contentwarehouse_3296_TrawlerContentRangeInfoIn",
        "TrawlerContentRangeInfoOut": "_contentwarehouse_3297_TrawlerContentRangeInfoOut",
        "RepositoryWebrefMentionComponentIn": "_contentwarehouse_3298_RepositoryWebrefMentionComponentIn",
        "RepositoryWebrefMentionComponentOut": "_contentwarehouse_3299_RepositoryWebrefMentionComponentOut",
        "MustangReposWwwSnippetsSnippetsRanklabFeaturesIn": "_contentwarehouse_3300_MustangReposWwwSnippetsSnippetsRanklabFeaturesIn",
        "MustangReposWwwSnippetsSnippetsRanklabFeaturesOut": "_contentwarehouse_3301_MustangReposWwwSnippetsSnippetsRanklabFeaturesOut",
        "NlpSemanticParsingLocalExtentIn": "_contentwarehouse_3302_NlpSemanticParsingLocalExtentIn",
        "NlpSemanticParsingLocalExtentOut": "_contentwarehouse_3303_NlpSemanticParsingLocalExtentOut",
        "ImageRepositoryFrameIdentifierPreviewFrameZeroVariantIn": "_contentwarehouse_3304_ImageRepositoryFrameIdentifierPreviewFrameZeroVariantIn",
        "ImageRepositoryFrameIdentifierPreviewFrameZeroVariantOut": "_contentwarehouse_3305_ImageRepositoryFrameIdentifierPreviewFrameZeroVariantOut",
        "GeostorePeakProtoIn": "_contentwarehouse_3306_GeostorePeakProtoIn",
        "GeostorePeakProtoOut": "_contentwarehouse_3307_GeostorePeakProtoOut",
        "RepositoryWebrefEntityNameRatingsIn": "_contentwarehouse_3308_RepositoryWebrefEntityNameRatingsIn",
        "RepositoryWebrefEntityNameRatingsOut": "_contentwarehouse_3309_RepositoryWebrefEntityNameRatingsOut",
        "UrlPoisoningDataIn": "_contentwarehouse_3310_UrlPoisoningDataIn",
        "UrlPoisoningDataOut": "_contentwarehouse_3311_UrlPoisoningDataOut",
        "OceanVolumeImprintIn": "_contentwarehouse_3312_OceanVolumeImprintIn",
        "OceanVolumeImprintOut": "_contentwarehouse_3313_OceanVolumeImprintOut",
        "RepositoryWebrefRefconDocumentMentionSpansIn": "_contentwarehouse_3314_RepositoryWebrefRefconDocumentMentionSpansIn",
        "RepositoryWebrefRefconDocumentMentionSpansOut": "_contentwarehouse_3315_RepositoryWebrefRefconDocumentMentionSpansOut",
        "GoogleCloudDocumentaiV1BarcodeIn": "_contentwarehouse_3316_GoogleCloudDocumentaiV1BarcodeIn",
        "GoogleCloudDocumentaiV1BarcodeOut": "_contentwarehouse_3317_GoogleCloudDocumentaiV1BarcodeOut",
        "AssistantApiActionV2SupportedFeaturesIn": "_contentwarehouse_3318_AssistantApiActionV2SupportedFeaturesIn",
        "AssistantApiActionV2SupportedFeaturesOut": "_contentwarehouse_3319_AssistantApiActionV2SupportedFeaturesOut",
        "KnowledgeAnswersIntentQueryIndexingIQLAttachmentIn": "_contentwarehouse_3320_KnowledgeAnswersIntentQueryIndexingIQLAttachmentIn",
        "KnowledgeAnswersIntentQueryIndexingIQLAttachmentOut": "_contentwarehouse_3321_KnowledgeAnswersIntentQueryIndexingIQLAttachmentOut",
        "GeostoreUrlListProtoIn": "_contentwarehouse_3322_GeostoreUrlListProtoIn",
        "GeostoreUrlListProtoOut": "_contentwarehouse_3323_GeostoreUrlListProtoOut",
        "GeostorePolyLineProtoIn": "_contentwarehouse_3324_GeostorePolyLineProtoIn",
        "GeostorePolyLineProtoOut": "_contentwarehouse_3325_GeostorePolyLineProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclIn": "_contentwarehouse_3326_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclOut": "_contentwarehouse_3327_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclOut",
        "NlpSciencelitRetrievalSearchResultDebugInfoIn": "_contentwarehouse_3328_NlpSciencelitRetrievalSearchResultDebugInfoIn",
        "NlpSciencelitRetrievalSearchResultDebugInfoOut": "_contentwarehouse_3329_NlpSciencelitRetrievalSearchResultDebugInfoOut",
        "AbuseiamNotRestrictionIn": "_contentwarehouse_3330_AbuseiamNotRestrictionIn",
        "AbuseiamNotRestrictionOut": "_contentwarehouse_3331_AbuseiamNotRestrictionOut",
        "LegalCitationLawLevelIn": "_contentwarehouse_3332_LegalCitationLawLevelIn",
        "LegalCitationLawLevelOut": "_contentwarehouse_3333_LegalCitationLawLevelOut",
        "GoogleAssistantAccessoryV1ScreenOutConfigIn": "_contentwarehouse_3334_GoogleAssistantAccessoryV1ScreenOutConfigIn",
        "GoogleAssistantAccessoryV1ScreenOutConfigOut": "_contentwarehouse_3335_GoogleAssistantAccessoryV1ScreenOutConfigOut",
        "HtmlrenderWebkitHeadlessProtoStyleIn": "_contentwarehouse_3336_HtmlrenderWebkitHeadlessProtoStyleIn",
        "HtmlrenderWebkitHeadlessProtoStyleOut": "_contentwarehouse_3337_HtmlrenderWebkitHeadlessProtoStyleOut",
        "NlpSciencelitPublicationTypeIn": "_contentwarehouse_3338_NlpSciencelitPublicationTypeIn",
        "NlpSciencelitPublicationTypeOut": "_contentwarehouse_3339_NlpSciencelitPublicationTypeOut",
        "PerDocDebugEventIn": "_contentwarehouse_3340_PerDocDebugEventIn",
        "PerDocDebugEventOut": "_contentwarehouse_3341_PerDocDebugEventOut",
        "AssistantApiLiveTvChannelCapabilitiesChannelsByProviderIn": "_contentwarehouse_3342_AssistantApiLiveTvChannelCapabilitiesChannelsByProviderIn",
        "AssistantApiLiveTvChannelCapabilitiesChannelsByProviderOut": "_contentwarehouse_3343_AssistantApiLiveTvChannelCapabilitiesChannelsByProviderOut",
        "SocialGraphApiProtoSearchProfileSocialLinkIn": "_contentwarehouse_3344_SocialGraphApiProtoSearchProfileSocialLinkIn",
        "SocialGraphApiProtoSearchProfileSocialLinkOut": "_contentwarehouse_3345_SocialGraphApiProtoSearchProfileSocialLinkOut",
        "RepositoryWebrefCompactKgValueIn": "_contentwarehouse_3346_RepositoryWebrefCompactKgValueIn",
        "RepositoryWebrefCompactKgValueOut": "_contentwarehouse_3347_RepositoryWebrefCompactKgValueOut",
        "VideoContentSearchListAnchorFeaturesIn": "_contentwarehouse_3348_VideoContentSearchListAnchorFeaturesIn",
        "VideoContentSearchListAnchorFeaturesOut": "_contentwarehouse_3349_VideoContentSearchListAnchorFeaturesOut",
        "VideoVideoStreamInfoTimedTextStreamIn": "_contentwarehouse_3350_VideoVideoStreamInfoTimedTextStreamIn",
        "VideoVideoStreamInfoTimedTextStreamOut": "_contentwarehouse_3351_VideoVideoStreamInfoTimedTextStreamOut",
        "QualityTimebasedSyntacticDateDateRangeIn": "_contentwarehouse_3352_QualityTimebasedSyntacticDateDateRangeIn",
        "QualityTimebasedSyntacticDateDateRangeOut": "_contentwarehouse_3353_QualityTimebasedSyntacticDateDateRangeOut",
        "KnowledgeAnswersIntentQueryTokensIn": "_contentwarehouse_3354_KnowledgeAnswersIntentQueryTokensIn",
        "KnowledgeAnswersIntentQueryTokensOut": "_contentwarehouse_3355_KnowledgeAnswersIntentQueryTokensOut",
        "ExtraSnippetInfoResponseQuerySubitemIn": "_contentwarehouse_3356_ExtraSnippetInfoResponseQuerySubitemIn",
        "ExtraSnippetInfoResponseQuerySubitemOut": "_contentwarehouse_3357_ExtraSnippetInfoResponseQuerySubitemOut",
        "NlpSemanticParsingModelsMediaSongIn": "_contentwarehouse_3358_NlpSemanticParsingModelsMediaSongIn",
        "NlpSemanticParsingModelsMediaSongOut": "_contentwarehouse_3359_NlpSemanticParsingModelsMediaSongOut",
        "KnowledgeAnswersIntentQueryAttributeSignalIn": "_contentwarehouse_3360_KnowledgeAnswersIntentQueryAttributeSignalIn",
        "KnowledgeAnswersIntentQueryAttributeSignalOut": "_contentwarehouse_3361_KnowledgeAnswersIntentQueryAttributeSignalOut",
        "CrawlerChangerateSingleComponentDistributionIn": "_contentwarehouse_3362_CrawlerChangerateSingleComponentDistributionIn",
        "CrawlerChangerateSingleComponentDistributionOut": "_contentwarehouse_3363_CrawlerChangerateSingleComponentDistributionOut",
        "IndexingEmbeddedContentRenderingOutputMetadataIn": "_contentwarehouse_3364_IndexingEmbeddedContentRenderingOutputMetadataIn",
        "IndexingEmbeddedContentRenderingOutputMetadataOut": "_contentwarehouse_3365_IndexingEmbeddedContentRenderingOutputMetadataOut",
        "QualityDniExtendedNewsPreviewsIn": "_contentwarehouse_3366_QualityDniExtendedNewsPreviewsIn",
        "QualityDniExtendedNewsPreviewsOut": "_contentwarehouse_3367_QualityDniExtendedNewsPreviewsOut",
        "ImageRepositoryWordInfoIn": "_contentwarehouse_3368_ImageRepositoryWordInfoIn",
        "ImageRepositoryWordInfoOut": "_contentwarehouse_3369_ImageRepositoryWordInfoOut",
        "BookCitationPerDocDataIn": "_contentwarehouse_3370_BookCitationPerDocDataIn",
        "BookCitationPerDocDataOut": "_contentwarehouse_3371_BookCitationPerDocDataOut",
        "OcrPhotoCurvedBoundingBoxIn": "_contentwarehouse_3372_OcrPhotoCurvedBoundingBoxIn",
        "OcrPhotoCurvedBoundingBoxOut": "_contentwarehouse_3373_OcrPhotoCurvedBoundingBoxOut",
        "PhotosVisionObjectrecMatrix2DIn": "_contentwarehouse_3374_PhotosVisionObjectrecMatrix2DIn",
        "PhotosVisionObjectrecMatrix2DOut": "_contentwarehouse_3375_PhotosVisionObjectrecMatrix2DOut",
        "SnapshotImageNodeIn": "_contentwarehouse_3376_SnapshotImageNodeIn",
        "SnapshotImageNodeOut": "_contentwarehouse_3377_SnapshotImageNodeOut",
        "ClassifierPornClassifierDataClassificationIn": "_contentwarehouse_3378_ClassifierPornClassifierDataClassificationIn",
        "ClassifierPornClassifierDataClassificationOut": "_contentwarehouse_3379_ClassifierPornClassifierDataClassificationOut",
        "PersonalizationMapsAliasAliasIdIn": "_contentwarehouse_3380_PersonalizationMapsAliasAliasIdIn",
        "PersonalizationMapsAliasAliasIdOut": "_contentwarehouse_3381_PersonalizationMapsAliasAliasIdOut",
        "QualityCalypsoAppsUniversalImageDataIn": "_contentwarehouse_3382_QualityCalypsoAppsUniversalImageDataIn",
        "QualityCalypsoAppsUniversalImageDataOut": "_contentwarehouse_3383_QualityCalypsoAppsUniversalImageDataOut",
        "AbuseiamVerdictRestrictionContextIn": "_contentwarehouse_3384_AbuseiamVerdictRestrictionContextIn",
        "AbuseiamVerdictRestrictionContextOut": "_contentwarehouse_3385_AbuseiamVerdictRestrictionContextOut",
        "RepositoryWebrefTaskDataIn": "_contentwarehouse_3386_RepositoryWebrefTaskDataIn",
        "RepositoryWebrefTaskDataOut": "_contentwarehouse_3387_RepositoryWebrefTaskDataOut",
        "ImageContentStarburstVersionGroupIn": "_contentwarehouse_3388_ImageContentStarburstVersionGroupIn",
        "ImageContentStarburstVersionGroupOut": "_contentwarehouse_3389_ImageContentStarburstVersionGroupOut",
        "RepositoryWebrefCompactKgPropertyValueIn": "_contentwarehouse_3390_RepositoryWebrefCompactKgPropertyValueIn",
        "RepositoryWebrefCompactKgPropertyValueOut": "_contentwarehouse_3391_RepositoryWebrefCompactKgPropertyValueOut",
        "WWWMetaTagIn": "_contentwarehouse_3392_WWWMetaTagIn",
        "WWWMetaTagOut": "_contentwarehouse_3393_WWWMetaTagOut",
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataIn": "_contentwarehouse_3394_SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataIn",
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataOut": "_contentwarehouse_3395_SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataOut",
        "VideoMediaInfoIn": "_contentwarehouse_3396_VideoMediaInfoIn",
        "VideoMediaInfoOut": "_contentwarehouse_3397_VideoMediaInfoOut",
        "GeostoreRouteProtoIn": "_contentwarehouse_3398_GeostoreRouteProtoIn",
        "GeostoreRouteProtoOut": "_contentwarehouse_3399_GeostoreRouteProtoOut",
        "VideoTimedtextS4ALIResultsIn": "_contentwarehouse_3400_VideoTimedtextS4ALIResultsIn",
        "VideoTimedtextS4ALIResultsOut": "_contentwarehouse_3401_VideoTimedtextS4ALIResultsOut",
        "QualityQrewriteAccountProvenanceGoogleAccountIn": "_contentwarehouse_3402_QualityQrewriteAccountProvenanceGoogleAccountIn",
        "QualityQrewriteAccountProvenanceGoogleAccountOut": "_contentwarehouse_3403_QualityQrewriteAccountProvenanceGoogleAccountOut",
        "AssistantApiSettingsDeviceSettingsIn": "_contentwarehouse_3404_AssistantApiSettingsDeviceSettingsIn",
        "AssistantApiSettingsDeviceSettingsOut": "_contentwarehouse_3405_AssistantApiSettingsDeviceSettingsOut",
        "OceanVolumeComputedAccessRightsIn": "_contentwarehouse_3406_OceanVolumeComputedAccessRightsIn",
        "OceanVolumeComputedAccessRightsOut": "_contentwarehouse_3407_OceanVolumeComputedAccessRightsOut",
        "ResearchScamGenericFeatureVectorFixedPointMetadataIn": "_contentwarehouse_3408_ResearchScamGenericFeatureVectorFixedPointMetadataIn",
        "ResearchScamGenericFeatureVectorFixedPointMetadataOut": "_contentwarehouse_3409_ResearchScamGenericFeatureVectorFixedPointMetadataOut",
        "KnowledgeAnswersIntentQueryArgPathComponentIn": "_contentwarehouse_3410_KnowledgeAnswersIntentQueryArgPathComponentIn",
        "KnowledgeAnswersIntentQueryArgPathComponentOut": "_contentwarehouse_3411_KnowledgeAnswersIntentQueryArgPathComponentOut",
        "ScienceIndexSignalAuthorIn": "_contentwarehouse_3412_ScienceIndexSignalAuthorIn",
        "ScienceIndexSignalAuthorOut": "_contentwarehouse_3413_ScienceIndexSignalAuthorOut",
        "NlpSemanticParsingModelsMediaRadioNetworkIn": "_contentwarehouse_3414_NlpSemanticParsingModelsMediaRadioNetworkIn",
        "NlpSemanticParsingModelsMediaRadioNetworkOut": "_contentwarehouse_3415_NlpSemanticParsingModelsMediaRadioNetworkOut",
        "AssistantApiSettingsInternalVersionIn": "_contentwarehouse_3416_AssistantApiSettingsInternalVersionIn",
        "AssistantApiSettingsInternalVersionOut": "_contentwarehouse_3417_AssistantApiSettingsInternalVersionOut",
        "GoogleCloudDocumentaiV1DocumentStyleIn": "_contentwarehouse_3418_GoogleCloudDocumentaiV1DocumentStyleIn",
        "GoogleCloudDocumentaiV1DocumentStyleOut": "_contentwarehouse_3419_GoogleCloudDocumentaiV1DocumentStyleOut",
        "GeostoreDisplayDataProtoIn": "_contentwarehouse_3420_GeostoreDisplayDataProtoIn",
        "GeostoreDisplayDataProtoOut": "_contentwarehouse_3421_GeostoreDisplayDataProtoOut",
        "AssistantDeviceTargetingDeviceTargetingErrorIn": "_contentwarehouse_3422_AssistantDeviceTargetingDeviceTargetingErrorIn",
        "AssistantDeviceTargetingDeviceTargetingErrorOut": "_contentwarehouse_3423_AssistantDeviceTargetingDeviceTargetingErrorOut",
        "VideoContentSearchCaptionSpanAnchorFeaturesIn": "_contentwarehouse_3424_VideoContentSearchCaptionSpanAnchorFeaturesIn",
        "VideoContentSearchCaptionSpanAnchorFeaturesOut": "_contentwarehouse_3425_VideoContentSearchCaptionSpanAnchorFeaturesOut",
        "IndexingVideosAsrTranscriptRepairAnnotationIn": "_contentwarehouse_3426_IndexingVideosAsrTranscriptRepairAnnotationIn",
        "IndexingVideosAsrTranscriptRepairAnnotationOut": "_contentwarehouse_3427_IndexingVideosAsrTranscriptRepairAnnotationOut",
        "KnowledgeGraphDateTimeProtoIn": "_contentwarehouse_3428_KnowledgeGraphDateTimeProtoIn",
        "KnowledgeGraphDateTimeProtoOut": "_contentwarehouse_3429_KnowledgeGraphDateTimeProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiUserDefinedIn": "_contentwarehouse_3430_AppsPeopleOzExternalMergedpeopleapiUserDefinedIn",
        "AppsPeopleOzExternalMergedpeopleapiUserDefinedOut": "_contentwarehouse_3431_AppsPeopleOzExternalMergedpeopleapiUserDefinedOut",
        "AssistantApiCoreTypesAndroidAppInfoDeltaIn": "_contentwarehouse_3432_AssistantApiCoreTypesAndroidAppInfoDeltaIn",
        "AssistantApiCoreTypesAndroidAppInfoDeltaOut": "_contentwarehouse_3433_AssistantApiCoreTypesAndroidAppInfoDeltaOut",
        "GeostoreSlopeProtoIn": "_contentwarehouse_3434_GeostoreSlopeProtoIn",
        "GeostoreSlopeProtoOut": "_contentwarehouse_3435_GeostoreSlopeProtoOut",
        "KeGovernanceTypedRegionsIn": "_contentwarehouse_3436_KeGovernanceTypedRegionsIn",
        "KeGovernanceTypedRegionsOut": "_contentwarehouse_3437_KeGovernanceTypedRegionsOut",
        "CopleySubreferenceResolutionIn": "_contentwarehouse_3438_CopleySubreferenceResolutionIn",
        "CopleySubreferenceResolutionOut": "_contentwarehouse_3439_CopleySubreferenceResolutionOut",
        "ImageExifIPTCMetadataArtworkIn": "_contentwarehouse_3440_ImageExifIPTCMetadataArtworkIn",
        "ImageExifIPTCMetadataArtworkOut": "_contentwarehouse_3441_ImageExifIPTCMetadataArtworkOut",
        "AssistantGroundingRankerContactGroundingProviderFeaturesIn": "_contentwarehouse_3442_AssistantGroundingRankerContactGroundingProviderFeaturesIn",
        "AssistantGroundingRankerContactGroundingProviderFeaturesOut": "_contentwarehouse_3443_AssistantGroundingRankerContactGroundingProviderFeaturesOut",
        "KnowledgeAnswersSensitivitySensitivityIn": "_contentwarehouse_3444_KnowledgeAnswersSensitivitySensitivityIn",
        "KnowledgeAnswersSensitivitySensitivityOut": "_contentwarehouse_3445_KnowledgeAnswersSensitivitySensitivityOut",
        "KnowledgeAnswersEntityTypeIn": "_contentwarehouse_3446_KnowledgeAnswersEntityTypeIn",
        "KnowledgeAnswersEntityTypeOut": "_contentwarehouse_3447_KnowledgeAnswersEntityTypeOut",
        "GeostoreDimensionProtoIn": "_contentwarehouse_3448_GeostoreDimensionProtoIn",
        "GeostoreDimensionProtoOut": "_contentwarehouse_3449_GeostoreDimensionProtoOut",
        "AttentionalEntitiesSpatialPropertiesIn": "_contentwarehouse_3450_AttentionalEntitiesSpatialPropertiesIn",
        "AttentionalEntitiesSpatialPropertiesOut": "_contentwarehouse_3451_AttentionalEntitiesSpatialPropertiesOut",
        "CopleySourceTypeMetadataIn": "_contentwarehouse_3452_CopleySourceTypeMetadataIn",
        "CopleySourceTypeMetadataOut": "_contentwarehouse_3453_CopleySourceTypeMetadataOut",
        "TrawlerFetchReplyDataHTTPHeaderIn": "_contentwarehouse_3454_TrawlerFetchReplyDataHTTPHeaderIn",
        "TrawlerFetchReplyDataHTTPHeaderOut": "_contentwarehouse_3455_TrawlerFetchReplyDataHTTPHeaderOut",
        "RepositoryWebrefExplainedRangeInfoIn": "_contentwarehouse_3456_RepositoryWebrefExplainedRangeInfoIn",
        "RepositoryWebrefExplainedRangeInfoOut": "_contentwarehouse_3457_RepositoryWebrefExplainedRangeInfoOut",
        "NlpSaftReferentIn": "_contentwarehouse_3458_NlpSaftReferentIn",
        "NlpSaftReferentOut": "_contentwarehouse_3459_NlpSaftReferentOut",
        "AppsDynamiteCustomerIdIn": "_contentwarehouse_3460_AppsDynamiteCustomerIdIn",
        "AppsDynamiteCustomerIdOut": "_contentwarehouse_3461_AppsDynamiteCustomerIdOut",
        "KnowledgeAnswersOpaqueShoppingProductExpressionTypeIn": "_contentwarehouse_3462_KnowledgeAnswersOpaqueShoppingProductExpressionTypeIn",
        "KnowledgeAnswersOpaqueShoppingProductExpressionTypeOut": "_contentwarehouse_3463_KnowledgeAnswersOpaqueShoppingProductExpressionTypeOut",
        "FreebaseLatLongIn": "_contentwarehouse_3464_FreebaseLatLongIn",
        "FreebaseLatLongOut": "_contentwarehouse_3465_FreebaseLatLongOut",
        "VideoContentSearchEntityAnnotationsIn": "_contentwarehouse_3466_VideoContentSearchEntityAnnotationsIn",
        "VideoContentSearchEntityAnnotationsOut": "_contentwarehouse_3467_VideoContentSearchEntityAnnotationsOut",
        "AppsPeopleOzExternalMergedpeopleapiWebsiteIn": "_contentwarehouse_3468_AppsPeopleOzExternalMergedpeopleapiWebsiteIn",
        "AppsPeopleOzExternalMergedpeopleapiWebsiteOut": "_contentwarehouse_3469_AppsPeopleOzExternalMergedpeopleapiWebsiteOut",
        "RepositoryWebrefEntityScoresIn": "_contentwarehouse_3470_RepositoryWebrefEntityScoresIn",
        "RepositoryWebrefEntityScoresOut": "_contentwarehouse_3471_RepositoryWebrefEntityScoresOut",
        "AppsPeopleOzExternalMergedpeopleapiRelationIn": "_contentwarehouse_3472_AppsPeopleOzExternalMergedpeopleapiRelationIn",
        "AppsPeopleOzExternalMergedpeopleapiRelationOut": "_contentwarehouse_3473_AppsPeopleOzExternalMergedpeopleapiRelationOut",
        "AssistantLogsCommunicationPhoneLogIn": "_contentwarehouse_3474_AssistantLogsCommunicationPhoneLogIn",
        "AssistantLogsCommunicationPhoneLogOut": "_contentwarehouse_3475_AssistantLogsCommunicationPhoneLogOut",
        "TrawlerFetchReplyDataProtocolResponseIn": "_contentwarehouse_3476_TrawlerFetchReplyDataProtocolResponseIn",
        "TrawlerFetchReplyDataProtocolResponseOut": "_contentwarehouse_3477_TrawlerFetchReplyDataProtocolResponseOut",
        "NlpSaftTokenIn": "_contentwarehouse_3478_NlpSaftTokenIn",
        "NlpSaftTokenOut": "_contentwarehouse_3479_NlpSaftTokenOut",
        "GoodocSymbolIn": "_contentwarehouse_3480_GoodocSymbolIn",
        "GoodocSymbolOut": "_contentwarehouse_3481_GoodocSymbolOut",
        "QualityDialogManagerExternalIdsIn": "_contentwarehouse_3482_QualityDialogManagerExternalIdsIn",
        "QualityDialogManagerExternalIdsOut": "_contentwarehouse_3483_QualityDialogManagerExternalIdsOut",
        "AssistantDevicesPlatformProtoArgSpecIn": "_contentwarehouse_3484_AssistantDevicesPlatformProtoArgSpecIn",
        "AssistantDevicesPlatformProtoArgSpecOut": "_contentwarehouse_3485_AssistantDevicesPlatformProtoArgSpecOut",
        "NlxDataSchemaDocumentIn": "_contentwarehouse_3486_NlxDataSchemaDocumentIn",
        "NlxDataSchemaDocumentOut": "_contentwarehouse_3487_NlxDataSchemaDocumentOut",
        "GoogleLongrunningOperationIn": "_contentwarehouse_3488_GoogleLongrunningOperationIn",
        "GoogleLongrunningOperationOut": "_contentwarehouse_3489_GoogleLongrunningOperationOut",
        "CommerceDatastoreImageDeepTagsModelOutputIn": "_contentwarehouse_3490_CommerceDatastoreImageDeepTagsModelOutputIn",
        "CommerceDatastoreImageDeepTagsModelOutputOut": "_contentwarehouse_3491_CommerceDatastoreImageDeepTagsModelOutputOut",
        "GeostoreRestrictionGroupProtoIn": "_contentwarehouse_3492_GeostoreRestrictionGroupProtoIn",
        "GeostoreRestrictionGroupProtoOut": "_contentwarehouse_3493_GeostoreRestrictionGroupProtoOut",
        "AssistantApiDateTimeIn": "_contentwarehouse_3494_AssistantApiDateTimeIn",
        "AssistantApiDateTimeOut": "_contentwarehouse_3495_AssistantApiDateTimeOut",
        "KnowledgeAnswersIntersectTypeIn": "_contentwarehouse_3496_KnowledgeAnswersIntersectTypeIn",
        "KnowledgeAnswersIntersectTypeOut": "_contentwarehouse_3497_KnowledgeAnswersIntersectTypeOut",
        "AbuseiamContentRestrictionIn": "_contentwarehouse_3498_AbuseiamContentRestrictionIn",
        "AbuseiamContentRestrictionOut": "_contentwarehouse_3499_AbuseiamContentRestrictionOut",
        "TrawlerTCPIPInfoIn": "_contentwarehouse_3500_TrawlerTCPIPInfoIn",
        "TrawlerTCPIPInfoOut": "_contentwarehouse_3501_TrawlerTCPIPInfoOut",
        "AssistantApiGuestAccessOutputIn": "_contentwarehouse_3502_AssistantApiGuestAccessOutputIn",
        "AssistantApiGuestAccessOutputOut": "_contentwarehouse_3503_AssistantApiGuestAccessOutputOut",
        "AssistantLogsMediaFocusesLogIn": "_contentwarehouse_3504_AssistantLogsMediaFocusesLogIn",
        "AssistantLogsMediaFocusesLogOut": "_contentwarehouse_3505_AssistantLogsMediaFocusesLogOut",
        "VideoContentSearchVideoGeneratedQueryFeaturesIn": "_contentwarehouse_3506_VideoContentSearchVideoGeneratedQueryFeaturesIn",
        "VideoContentSearchVideoGeneratedQueryFeaturesOut": "_contentwarehouse_3507_VideoContentSearchVideoGeneratedQueryFeaturesOut",
        "GoogleInternalAppsWaldoV1alphaWorkingHoursIn": "_contentwarehouse_3508_GoogleInternalAppsWaldoV1alphaWorkingHoursIn",
        "GoogleInternalAppsWaldoV1alphaWorkingHoursOut": "_contentwarehouse_3509_GoogleInternalAppsWaldoV1alphaWorkingHoursOut",
        "NlpSemanticParsingLocalLocationElementIn": "_contentwarehouse_3510_NlpSemanticParsingLocalLocationElementIn",
        "NlpSemanticParsingLocalLocationElementOut": "_contentwarehouse_3511_NlpSemanticParsingLocalLocationElementOut",
        "NlpSemanticParsingLocalLocalResultIdIn": "_contentwarehouse_3512_NlpSemanticParsingLocalLocalResultIdIn",
        "NlpSemanticParsingLocalLocalResultIdOut": "_contentwarehouse_3513_NlpSemanticParsingLocalLocalResultIdOut",
        "GeostoreBuildingProtoIn": "_contentwarehouse_3514_GeostoreBuildingProtoIn",
        "GeostoreBuildingProtoOut": "_contentwarehouse_3515_GeostoreBuildingProtoOut",
        "AssistantLogsDefaultDeviceLogIn": "_contentwarehouse_3516_AssistantLogsDefaultDeviceLogIn",
        "AssistantLogsDefaultDeviceLogOut": "_contentwarehouse_3517_AssistantLogsDefaultDeviceLogOut",
        "AssistantApiSunriseFeaturesSupportIn": "_contentwarehouse_3518_AssistantApiSunriseFeaturesSupportIn",
        "AssistantApiSunriseFeaturesSupportOut": "_contentwarehouse_3519_AssistantApiSunriseFeaturesSupportOut",
        "NlxDataSchemaEntityIn": "_contentwarehouse_3520_NlxDataSchemaEntityIn",
        "NlxDataSchemaEntityOut": "_contentwarehouse_3521_NlxDataSchemaEntityOut",
        "ClassifierPornClassifierDataIn": "_contentwarehouse_3522_ClassifierPornClassifierDataIn",
        "ClassifierPornClassifierDataOut": "_contentwarehouse_3523_ClassifierPornClassifierDataOut",
        "SpamMuppetjoinsMuppetSignalsIn": "_contentwarehouse_3524_SpamMuppetjoinsMuppetSignalsIn",
        "SpamMuppetjoinsMuppetSignalsOut": "_contentwarehouse_3525_SpamMuppetjoinsMuppetSignalsOut",
        "AppsPeopleOzExternalMergedpeopleapiPlaceDetailsIn": "_contentwarehouse_3526_AppsPeopleOzExternalMergedpeopleapiPlaceDetailsIn",
        "AppsPeopleOzExternalMergedpeopleapiPlaceDetailsOut": "_contentwarehouse_3527_AppsPeopleOzExternalMergedpeopleapiPlaceDetailsOut",
        "VideoContentSearchSportsKeyMomentsAnchorSetFeaturesIn": "_contentwarehouse_3528_VideoContentSearchSportsKeyMomentsAnchorSetFeaturesIn",
        "VideoContentSearchSportsKeyMomentsAnchorSetFeaturesOut": "_contentwarehouse_3529_VideoContentSearchSportsKeyMomentsAnchorSetFeaturesOut",
        "ImageRepositoryFramePerdocsIn": "_contentwarehouse_3530_ImageRepositoryFramePerdocsIn",
        "ImageRepositoryFramePerdocsOut": "_contentwarehouse_3531_ImageRepositoryFramePerdocsOut",
        "IndexingSignalAggregatorUrlPatternSignalsPriorSignalIn": "_contentwarehouse_3532_IndexingSignalAggregatorUrlPatternSignalsPriorSignalIn",
        "IndexingSignalAggregatorUrlPatternSignalsPriorSignalOut": "_contentwarehouse_3533_IndexingSignalAggregatorUrlPatternSignalsPriorSignalOut",
        "QualityActionsReminderLocationChainInfoIn": "_contentwarehouse_3534_QualityActionsReminderLocationChainInfoIn",
        "QualityActionsReminderLocationChainInfoOut": "_contentwarehouse_3535_QualityActionsReminderLocationChainInfoOut",
        "AnchorsRedundantAnchorInfoIn": "_contentwarehouse_3536_AnchorsRedundantAnchorInfoIn",
        "AnchorsRedundantAnchorInfoOut": "_contentwarehouse_3537_AnchorsRedundantAnchorInfoOut",
        "ImagePornDebugInfoIn": "_contentwarehouse_3538_ImagePornDebugInfoIn",
        "ImagePornDebugInfoOut": "_contentwarehouse_3539_ImagePornDebugInfoOut",
        "KnowledgeAnswersOpaqueMediaTypeIn": "_contentwarehouse_3540_KnowledgeAnswersOpaqueMediaTypeIn",
        "KnowledgeAnswersOpaqueMediaTypeOut": "_contentwarehouse_3541_KnowledgeAnswersOpaqueMediaTypeOut",
        "NlpSciencelitRetrievalSnippetDebugInfoIn": "_contentwarehouse_3542_NlpSciencelitRetrievalSnippetDebugInfoIn",
        "NlpSciencelitRetrievalSnippetDebugInfoOut": "_contentwarehouse_3543_NlpSciencelitRetrievalSnippetDebugInfoOut",
        "SentimentSentimentBehaviorsIn": "_contentwarehouse_3544_SentimentSentimentBehaviorsIn",
        "SentimentSentimentBehaviorsOut": "_contentwarehouse_3545_SentimentSentimentBehaviorsOut",
        "VideoContentSearchAnchorsCommonFeatureSetIn": "_contentwarehouse_3546_VideoContentSearchAnchorsCommonFeatureSetIn",
        "VideoContentSearchAnchorsCommonFeatureSetOut": "_contentwarehouse_3547_VideoContentSearchAnchorsCommonFeatureSetOut",
        "QualityNavboostCrapsCrapsDeviceIn": "_contentwarehouse_3548_QualityNavboostCrapsCrapsDeviceIn",
        "QualityNavboostCrapsCrapsDeviceOut": "_contentwarehouse_3549_QualityNavboostCrapsCrapsDeviceOut",
        "AssistantApiSettingsHospitalityCardSettingsCardConfigIn": "_contentwarehouse_3550_AssistantApiSettingsHospitalityCardSettingsCardConfigIn",
        "AssistantApiSettingsHospitalityCardSettingsCardConfigOut": "_contentwarehouse_3551_AssistantApiSettingsHospitalityCardSettingsCardConfigOut",
        "AssistantApiSettingsMusicFilterIn": "_contentwarehouse_3552_AssistantApiSettingsMusicFilterIn",
        "AssistantApiSettingsMusicFilterOut": "_contentwarehouse_3553_AssistantApiSettingsMusicFilterOut",
        "TrawlerFetchReplyDataPartialResponseIn": "_contentwarehouse_3554_TrawlerFetchReplyDataPartialResponseIn",
        "TrawlerFetchReplyDataPartialResponseOut": "_contentwarehouse_3555_TrawlerFetchReplyDataPartialResponseOut",
        "IndexingConverterShingleFingerprintIn": "_contentwarehouse_3556_IndexingConverterShingleFingerprintIn",
        "IndexingConverterShingleFingerprintOut": "_contentwarehouse_3557_IndexingConverterShingleFingerprintOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceIn": "_contentwarehouse_3558_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceOut": "_contentwarehouse_3559_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceOut",
        "LogsSemanticInterpretationIntentQueryLinkKindInfoIn": "_contentwarehouse_3560_LogsSemanticInterpretationIntentQueryLinkKindInfoIn",
        "LogsSemanticInterpretationIntentQueryLinkKindInfoOut": "_contentwarehouse_3561_LogsSemanticInterpretationIntentQueryLinkKindInfoOut",
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn": "_contentwarehouse_3562_AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn",
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut": "_contentwarehouse_3563_AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut",
        "SocialGraphApiProtoSearchProfileEntityIn": "_contentwarehouse_3564_SocialGraphApiProtoSearchProfileEntityIn",
        "SocialGraphApiProtoSearchProfileEntityOut": "_contentwarehouse_3565_SocialGraphApiProtoSearchProfileEntityOut",
        "QualityActionsReminderDocumentIn": "_contentwarehouse_3566_QualityActionsReminderDocumentIn",
        "QualityActionsReminderDocumentOut": "_contentwarehouse_3567_QualityActionsReminderDocumentOut",
        "SocialGraphApiProtoSearchProfileLocationIn": "_contentwarehouse_3568_SocialGraphApiProtoSearchProfileLocationIn",
        "SocialGraphApiProtoSearchProfileLocationOut": "_contentwarehouse_3569_SocialGraphApiProtoSearchProfileLocationOut",
        "VideoMediaOverviewTimedTextOverviewIn": "_contentwarehouse_3570_VideoMediaOverviewTimedTextOverviewIn",
        "VideoMediaOverviewTimedTextOverviewOut": "_contentwarehouse_3571_VideoMediaOverviewTimedTextOverviewOut",
        "GeostoreFeatureIdForwardingsProtoIn": "_contentwarehouse_3572_GeostoreFeatureIdForwardingsProtoIn",
        "GeostoreFeatureIdForwardingsProtoOut": "_contentwarehouse_3573_GeostoreFeatureIdForwardingsProtoOut",
        "GoogleAssistantEmbeddedV1FitnessActivitiesIn": "_contentwarehouse_3574_GoogleAssistantEmbeddedV1FitnessActivitiesIn",
        "GoogleAssistantEmbeddedV1FitnessActivitiesOut": "_contentwarehouse_3575_GoogleAssistantEmbeddedV1FitnessActivitiesOut",
        "IndexingConverterRichContentDataRangeIn": "_contentwarehouse_3576_IndexingConverterRichContentDataRangeIn",
        "IndexingConverterRichContentDataRangeOut": "_contentwarehouse_3577_IndexingConverterRichContentDataRangeOut",
        "GoogleTypePostalAddressIn": "_contentwarehouse_3578_GoogleTypePostalAddressIn",
        "GoogleTypePostalAddressOut": "_contentwarehouse_3579_GoogleTypePostalAddressOut",
        "AssistantContextProviderVariantIn": "_contentwarehouse_3580_AssistantContextProviderVariantIn",
        "AssistantContextProviderVariantOut": "_contentwarehouse_3581_AssistantContextProviderVariantOut",
        "KnowledgeAnswersOpaqueTypeIn": "_contentwarehouse_3582_KnowledgeAnswersOpaqueTypeIn",
        "KnowledgeAnswersOpaqueTypeOut": "_contentwarehouse_3583_KnowledgeAnswersOpaqueTypeOut",
        "IndexingUrlPatternUrlTreeUrlTreeIn": "_contentwarehouse_3584_IndexingUrlPatternUrlTreeUrlTreeIn",
        "IndexingUrlPatternUrlTreeUrlTreeOut": "_contentwarehouse_3585_IndexingUrlPatternUrlTreeUrlTreeOut",
        "KnowledgeAnswersOpaqueHomeAutomationDeviceTypeIn": "_contentwarehouse_3586_KnowledgeAnswersOpaqueHomeAutomationDeviceTypeIn",
        "KnowledgeAnswersOpaqueHomeAutomationDeviceTypeOut": "_contentwarehouse_3587_KnowledgeAnswersOpaqueHomeAutomationDeviceTypeOut",
        "OceanVolumeAccessRightsIn": "_contentwarehouse_3588_OceanVolumeAccessRightsIn",
        "OceanVolumeAccessRightsOut": "_contentwarehouse_3589_OceanVolumeAccessRightsOut",
        "KnowledgeAnswersSensitivityInstructionIntentIn": "_contentwarehouse_3590_KnowledgeAnswersSensitivityInstructionIntentIn",
        "KnowledgeAnswersSensitivityInstructionIntentOut": "_contentwarehouse_3591_KnowledgeAnswersSensitivityInstructionIntentOut",
        "OrionDocEntitiesProtoIn": "_contentwarehouse_3592_OrionDocEntitiesProtoIn",
        "OrionDocEntitiesProtoOut": "_contentwarehouse_3593_OrionDocEntitiesProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityIn": "_contentwarehouse_3594_AppsPeopleOzExternalMergedpeopleapiInAppReachabilityIn",
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityOut": "_contentwarehouse_3595_AppsPeopleOzExternalMergedpeopleapiInAppReachabilityOut",
        "SdrPageAnchorsDocInfoIn": "_contentwarehouse_3596_SdrPageAnchorsDocInfoIn",
        "SdrPageAnchorsDocInfoOut": "_contentwarehouse_3597_SdrPageAnchorsDocInfoOut",
        "VideoContentSearchSpanDolphinScoresSpanCandidateIn": "_contentwarehouse_3598_VideoContentSearchSpanDolphinScoresSpanCandidateIn",
        "VideoContentSearchSpanDolphinScoresSpanCandidateOut": "_contentwarehouse_3599_VideoContentSearchSpanDolphinScoresSpanCandidateOut",
        "QualityQrewriteAccountProvenanceThirdPartyAccountIn": "_contentwarehouse_3600_QualityQrewriteAccountProvenanceThirdPartyAccountIn",
        "QualityQrewriteAccountProvenanceThirdPartyAccountOut": "_contentwarehouse_3601_QualityQrewriteAccountProvenanceThirdPartyAccountOut",
        "VideoContentSearchFrameSimilarityIntervalIn": "_contentwarehouse_3602_VideoContentSearchFrameSimilarityIntervalIn",
        "VideoContentSearchFrameSimilarityIntervalOut": "_contentwarehouse_3603_VideoContentSearchFrameSimilarityIntervalOut",
        "GeostoreProvenanceProtoIn": "_contentwarehouse_3604_GeostoreProvenanceProtoIn",
        "GeostoreProvenanceProtoOut": "_contentwarehouse_3605_GeostoreProvenanceProtoOut",
        "GoodocDocumentPageMergedPageInfoIn": "_contentwarehouse_3606_GoodocDocumentPageMergedPageInfoIn",
        "GoodocDocumentPageMergedPageInfoOut": "_contentwarehouse_3607_GoodocDocumentPageMergedPageInfoOut",
        "ImageRepositoryNimaOutputIn": "_contentwarehouse_3608_ImageRepositoryNimaOutputIn",
        "ImageRepositoryNimaOutputOut": "_contentwarehouse_3609_ImageRepositoryNimaOutputOut",
        "AssistantApiClockCapabilitiesIn": "_contentwarehouse_3610_AssistantApiClockCapabilitiesIn",
        "AssistantApiClockCapabilitiesOut": "_contentwarehouse_3611_AssistantApiClockCapabilitiesOut",
        "GeostoreEntranceReferenceProtoIn": "_contentwarehouse_3612_GeostoreEntranceReferenceProtoIn",
        "GeostoreEntranceReferenceProtoOut": "_contentwarehouse_3613_GeostoreEntranceReferenceProtoOut",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingIn": "_contentwarehouse_3614_HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingIn",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingOut": "_contentwarehouse_3615_HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingOut",
        "IndexingDocjoinerAnchorSpamInfoIn": "_contentwarehouse_3616_IndexingDocjoinerAnchorSpamInfoIn",
        "IndexingDocjoinerAnchorSpamInfoOut": "_contentwarehouse_3617_IndexingDocjoinerAnchorSpamInfoOut",
        "RepositoryWebrefDomainSpecificRepresentationIn": "_contentwarehouse_3618_RepositoryWebrefDomainSpecificRepresentationIn",
        "RepositoryWebrefDomainSpecificRepresentationOut": "_contentwarehouse_3619_RepositoryWebrefDomainSpecificRepresentationOut",
        "QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityIn": "_contentwarehouse_3620_QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityIn",
        "QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityOut": "_contentwarehouse_3621_QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityOut",
        "QualitySalientTermsSalientTermSetIn": "_contentwarehouse_3622_QualitySalientTermsSalientTermSetIn",
        "QualitySalientTermsSalientTermSetOut": "_contentwarehouse_3623_QualitySalientTermsSalientTermSetOut",
        "RepositoryWebrefQueryIndicesIn": "_contentwarehouse_3624_RepositoryWebrefQueryIndicesIn",
        "RepositoryWebrefQueryIndicesOut": "_contentwarehouse_3625_RepositoryWebrefQueryIndicesOut",
        "NlpSemanticParsingModelsDialogReferentsDialogReferentsIn": "_contentwarehouse_3626_NlpSemanticParsingModelsDialogReferentsDialogReferentsIn",
        "NlpSemanticParsingModelsDialogReferentsDialogReferentsOut": "_contentwarehouse_3627_NlpSemanticParsingModelsDialogReferentsDialogReferentsOut",
        "KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeIn": "_contentwarehouse_3628_KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeIn",
        "KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeOut": "_contentwarehouse_3629_KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeOut",
        "VideoContentSearchMatchScoresIn": "_contentwarehouse_3630_VideoContentSearchMatchScoresIn",
        "VideoContentSearchMatchScoresOut": "_contentwarehouse_3631_VideoContentSearchMatchScoresOut",
        "KnowledgeAnswersIntentQueryLocationMarkersSignalsIn": "_contentwarehouse_3632_KnowledgeAnswersIntentQueryLocationMarkersSignalsIn",
        "KnowledgeAnswersIntentQueryLocationMarkersSignalsOut": "_contentwarehouse_3633_KnowledgeAnswersIntentQueryLocationMarkersSignalsOut",
        "VideoContentSearchVideoIntroductionIn": "_contentwarehouse_3634_VideoContentSearchVideoIntroductionIn",
        "VideoContentSearchVideoIntroductionOut": "_contentwarehouse_3635_VideoContentSearchVideoIntroductionOut",
        "VideoClipInfoIn": "_contentwarehouse_3636_VideoClipInfoIn",
        "VideoClipInfoOut": "_contentwarehouse_3637_VideoClipInfoOut",
        "GeostoreEntranceProtoIn": "_contentwarehouse_3638_GeostoreEntranceProtoIn",
        "GeostoreEntranceProtoOut": "_contentwarehouse_3639_GeostoreEntranceProtoOut",
        "IndexingEmbeddedContentEmbeddedContentInfoIn": "_contentwarehouse_3640_IndexingEmbeddedContentEmbeddedContentInfoIn",
        "IndexingEmbeddedContentEmbeddedContentInfoOut": "_contentwarehouse_3641_IndexingEmbeddedContentEmbeddedContentInfoOut",
        "QualityActionsAppInfoSourceDataIn": "_contentwarehouse_3642_QualityActionsAppInfoSourceDataIn",
        "QualityActionsAppInfoSourceDataOut": "_contentwarehouse_3643_QualityActionsAppInfoSourceDataOut",
        "AssistantApiFitnessFeatureSupportIn": "_contentwarehouse_3644_AssistantApiFitnessFeatureSupportIn",
        "AssistantApiFitnessFeatureSupportOut": "_contentwarehouse_3645_AssistantApiFitnessFeatureSupportOut",
        "GoogleCloudContentwarehouseV1EnumArrayIn": "_contentwarehouse_3646_GoogleCloudContentwarehouseV1EnumArrayIn",
        "GoogleCloudContentwarehouseV1EnumArrayOut": "_contentwarehouse_3647_GoogleCloudContentwarehouseV1EnumArrayOut",
        "KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryIn": "_contentwarehouse_3648_KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryIn",
        "KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryOut": "_contentwarehouse_3649_KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryOut",
        "ClassifierPornAggregatedUrlPornScoresIn": "_contentwarehouse_3650_ClassifierPornAggregatedUrlPornScoresIn",
        "ClassifierPornAggregatedUrlPornScoresOut": "_contentwarehouse_3651_ClassifierPornAggregatedUrlPornScoresOut",
        "OcrPhotoCurvePointIn": "_contentwarehouse_3652_OcrPhotoCurvePointIn",
        "OcrPhotoCurvePointOut": "_contentwarehouse_3653_OcrPhotoCurvePointOut",
        "NlpSaftRelationMentionIn": "_contentwarehouse_3654_NlpSaftRelationMentionIn",
        "NlpSaftRelationMentionOut": "_contentwarehouse_3655_NlpSaftRelationMentionOut",
        "OceanLocaleViewabilitySourceDetailsIn": "_contentwarehouse_3656_OceanLocaleViewabilitySourceDetailsIn",
        "OceanLocaleViewabilitySourceDetailsOut": "_contentwarehouse_3657_OceanLocaleViewabilitySourceDetailsOut",
        "GeostoreHtmlTextProtoIn": "_contentwarehouse_3658_GeostoreHtmlTextProtoIn",
        "GeostoreHtmlTextProtoOut": "_contentwarehouse_3659_GeostoreHtmlTextProtoOut",
        "UniversalsearchNewPackerKnowledgeResultSupportIn": "_contentwarehouse_3660_UniversalsearchNewPackerKnowledgeResultSupportIn",
        "UniversalsearchNewPackerKnowledgeResultSupportOut": "_contentwarehouse_3661_UniversalsearchNewPackerKnowledgeResultSupportOut",
        "WWWSnippetResponseIn": "_contentwarehouse_3662_WWWSnippetResponseIn",
        "WWWSnippetResponseOut": "_contentwarehouse_3663_WWWSnippetResponseOut",
        "AssistantApiCallCapabilitiesIn": "_contentwarehouse_3664_AssistantApiCallCapabilitiesIn",
        "AssistantApiCallCapabilitiesOut": "_contentwarehouse_3665_AssistantApiCallCapabilitiesOut",
        "FocusBackendDeviceRawContactIdIn": "_contentwarehouse_3666_FocusBackendDeviceRawContactIdIn",
        "FocusBackendDeviceRawContactIdOut": "_contentwarehouse_3667_FocusBackendDeviceRawContactIdOut",
        "RepositoryWebrefDocumentMetadataIn": "_contentwarehouse_3668_RepositoryWebrefDocumentMetadataIn",
        "RepositoryWebrefDocumentMetadataOut": "_contentwarehouse_3669_RepositoryWebrefDocumentMetadataOut",
        "TrawlerEventIn": "_contentwarehouse_3670_TrawlerEventIn",
        "TrawlerEventOut": "_contentwarehouse_3671_TrawlerEventOut",
        "GoogleCloudContentwarehouseV1ActionOutputIn": "_contentwarehouse_3672_GoogleCloudContentwarehouseV1ActionOutputIn",
        "GoogleCloudContentwarehouseV1ActionOutputOut": "_contentwarehouse_3673_GoogleCloudContentwarehouseV1ActionOutputOut",
        "AssistantApiSettingsReauthTrustedDeviceSettingsIn": "_contentwarehouse_3674_AssistantApiSettingsReauthTrustedDeviceSettingsIn",
        "AssistantApiSettingsReauthTrustedDeviceSettingsOut": "_contentwarehouse_3675_AssistantApiSettingsReauthTrustedDeviceSettingsOut",
        "QualitySitemapSubresultIn": "_contentwarehouse_3676_QualitySitemapSubresultIn",
        "QualitySitemapSubresultOut": "_contentwarehouse_3677_QualitySitemapSubresultOut",
        "CompositeDocAdditionalChecksumsIn": "_contentwarehouse_3678_CompositeDocAdditionalChecksumsIn",
        "CompositeDocAdditionalChecksumsOut": "_contentwarehouse_3679_CompositeDocAdditionalChecksumsOut",
        "LegalCitationCourtDocumentCourtIn": "_contentwarehouse_3680_LegalCitationCourtDocumentCourtIn",
        "LegalCitationCourtDocumentCourtOut": "_contentwarehouse_3681_LegalCitationCourtDocumentCourtOut",
        "AssistantApiCoreTypesLocationCoordinatesIn": "_contentwarehouse_3682_AssistantApiCoreTypesLocationCoordinatesIn",
        "AssistantApiCoreTypesLocationCoordinatesOut": "_contentwarehouse_3683_AssistantApiCoreTypesLocationCoordinatesOut",
        "AssistantApiCoreTypesCastAppInfoIn": "_contentwarehouse_3684_AssistantApiCoreTypesCastAppInfoIn",
        "AssistantApiCoreTypesCastAppInfoOut": "_contentwarehouse_3685_AssistantApiCoreTypesCastAppInfoOut",
        "TrawlerLoggedVPCDestinationIn": "_contentwarehouse_3686_TrawlerLoggedVPCDestinationIn",
        "TrawlerLoggedVPCDestinationOut": "_contentwarehouse_3687_TrawlerLoggedVPCDestinationOut",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceIn": "_contentwarehouse_3688_HtmlrenderWebkitHeadlessProtoReferencedResourceIn",
        "HtmlrenderWebkitHeadlessProtoReferencedResourceOut": "_contentwarehouse_3689_HtmlrenderWebkitHeadlessProtoReferencedResourceOut",
        "ImageExactBoostIn": "_contentwarehouse_3690_ImageExactBoostIn",
        "ImageExactBoostOut": "_contentwarehouse_3691_ImageExactBoostOut",
        "QualityGenieComplexQueriesComplexQueriesOutputRewriteIn": "_contentwarehouse_3692_QualityGenieComplexQueriesComplexQueriesOutputRewriteIn",
        "QualityGenieComplexQueriesComplexQueriesOutputRewriteOut": "_contentwarehouse_3693_QualityGenieComplexQueriesComplexQueriesOutputRewriteOut",
        "WWWResultInfoSubImageDocInfoIn": "_contentwarehouse_3694_WWWResultInfoSubImageDocInfoIn",
        "WWWResultInfoSubImageDocInfoOut": "_contentwarehouse_3695_WWWResultInfoSubImageDocInfoOut",
        "GoodocLogicalEntityIn": "_contentwarehouse_3696_GoodocLogicalEntityIn",
        "GoodocLogicalEntityOut": "_contentwarehouse_3697_GoodocLogicalEntityOut",
        "GeostoreRegulatedAreaProtoIn": "_contentwarehouse_3698_GeostoreRegulatedAreaProtoIn",
        "GeostoreRegulatedAreaProtoOut": "_contentwarehouse_3699_GeostoreRegulatedAreaProtoOut",
        "QualityActionsReminderDynamiteGroupIn": "_contentwarehouse_3700_QualityActionsReminderDynamiteGroupIn",
        "QualityActionsReminderDynamiteGroupOut": "_contentwarehouse_3701_QualityActionsReminderDynamiteGroupOut",
        "GeostorePriceInfoStatusIn": "_contentwarehouse_3702_GeostorePriceInfoStatusIn",
        "GeostorePriceInfoStatusOut": "_contentwarehouse_3703_GeostorePriceInfoStatusOut",
        "ClassifierPornDocumentDataIn": "_contentwarehouse_3704_ClassifierPornDocumentDataIn",
        "ClassifierPornDocumentDataOut": "_contentwarehouse_3705_ClassifierPornDocumentDataOut",
        "GeostoreCanonicalGConceptProtoIn": "_contentwarehouse_3706_GeostoreCanonicalGConceptProtoIn",
        "GeostoreCanonicalGConceptProtoOut": "_contentwarehouse_3707_GeostoreCanonicalGConceptProtoOut",
        "GeostoreCallToActionProtoIn": "_contentwarehouse_3708_GeostoreCallToActionProtoIn",
        "GeostoreCallToActionProtoOut": "_contentwarehouse_3709_GeostoreCallToActionProtoOut",
        "GeostoreGeometryCompositionIn": "_contentwarehouse_3710_GeostoreGeometryCompositionIn",
        "GeostoreGeometryCompositionOut": "_contentwarehouse_3711_GeostoreGeometryCompositionOut",
        "SocialGraphApiProtoContactCreateContextIn": "_contentwarehouse_3712_SocialGraphApiProtoContactCreateContextIn",
        "SocialGraphApiProtoContactCreateContextOut": "_contentwarehouse_3713_SocialGraphApiProtoContactCreateContextOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataIn": "_contentwarehouse_3714_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataOut": "_contentwarehouse_3715_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataOut",
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoIn": "_contentwarehouse_3716_AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoOut": "_contentwarehouse_3717_AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataIn": "_contentwarehouse_3718_AppsPeopleOzExternalMergedpeopleapiPersonMetadataIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataOut": "_contentwarehouse_3719_AppsPeopleOzExternalMergedpeopleapiPersonMetadataOut",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn": "_contentwarehouse_3720_IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn",
        "IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut": "_contentwarehouse_3721_IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut",
        "QualityActionsReminderLocationIn": "_contentwarehouse_3722_QualityActionsReminderLocationIn",
        "QualityActionsReminderLocationOut": "_contentwarehouse_3723_QualityActionsReminderLocationOut",
        "CountryGeoLocationIn": "_contentwarehouse_3724_CountryGeoLocationIn",
        "CountryGeoLocationOut": "_contentwarehouse_3725_CountryGeoLocationOut",
        "AssistantApiSettingsPodcastFilterIn": "_contentwarehouse_3726_AssistantApiSettingsPodcastFilterIn",
        "AssistantApiSettingsPodcastFilterOut": "_contentwarehouse_3727_AssistantApiSettingsPodcastFilterOut",
        "NlpSemanticParsingModelsMediaRentalInfoIn": "_contentwarehouse_3728_NlpSemanticParsingModelsMediaRentalInfoIn",
        "NlpSemanticParsingModelsMediaRentalInfoOut": "_contentwarehouse_3729_NlpSemanticParsingModelsMediaRentalInfoOut",
        "GoogleCloudContentwarehouseV1DocumentSchemaIn": "_contentwarehouse_3730_GoogleCloudContentwarehouseV1DocumentSchemaIn",
        "GoogleCloudContentwarehouseV1DocumentSchemaOut": "_contentwarehouse_3731_GoogleCloudContentwarehouseV1DocumentSchemaOut",
        "AppsPeopleOzExternalMergedpeopleapiEmergencyInfoIn": "_contentwarehouse_3732_AppsPeopleOzExternalMergedpeopleapiEmergencyInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiEmergencyInfoOut": "_contentwarehouse_3733_AppsPeopleOzExternalMergedpeopleapiEmergencyInfoOut",
        "LegalCitationCourtDocumentCourtNameComponentIn": "_contentwarehouse_3734_LegalCitationCourtDocumentCourtNameComponentIn",
        "LegalCitationCourtDocumentCourtNameComponentOut": "_contentwarehouse_3735_LegalCitationCourtDocumentCourtNameComponentOut",
        "SpamCookbookActionIn": "_contentwarehouse_3736_SpamCookbookActionIn",
        "SpamCookbookActionOut": "_contentwarehouse_3737_SpamCookbookActionOut",
        "NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseIn": "_contentwarehouse_3738_NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseIn",
        "NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseOut": "_contentwarehouse_3739_NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseOut",
        "NlpSemanticParsingModelsMediaMusicGenreIn": "_contentwarehouse_3740_NlpSemanticParsingModelsMediaMusicGenreIn",
        "NlpSemanticParsingModelsMediaMusicGenreOut": "_contentwarehouse_3741_NlpSemanticParsingModelsMediaMusicGenreOut",
        "QualityActionsNewsProviderAnnotationDataIn": "_contentwarehouse_3742_QualityActionsNewsProviderAnnotationDataIn",
        "QualityActionsNewsProviderAnnotationDataOut": "_contentwarehouse_3743_QualityActionsNewsProviderAnnotationDataOut",
        "TrawlerHostBucketDataIn": "_contentwarehouse_3744_TrawlerHostBucketDataIn",
        "TrawlerHostBucketDataOut": "_contentwarehouse_3745_TrawlerHostBucketDataOut",
        "KnowledgeAnswersUnionTypeIn": "_contentwarehouse_3746_KnowledgeAnswersUnionTypeIn",
        "KnowledgeAnswersUnionTypeOut": "_contentwarehouse_3747_KnowledgeAnswersUnionTypeOut",
        "ResearchScienceSearchNavboostQueryInfoIn": "_contentwarehouse_3748_ResearchScienceSearchNavboostQueryInfoIn",
        "ResearchScienceSearchNavboostQueryInfoOut": "_contentwarehouse_3749_ResearchScienceSearchNavboostQueryInfoOut",
        "AssistantApiSettingsDowntimePeriodIn": "_contentwarehouse_3750_AssistantApiSettingsDowntimePeriodIn",
        "AssistantApiSettingsDowntimePeriodOut": "_contentwarehouse_3751_AssistantApiSettingsDowntimePeriodOut",
        "GeostoreMediaItemProtoIn": "_contentwarehouse_3752_GeostoreMediaItemProtoIn",
        "GeostoreMediaItemProtoOut": "_contentwarehouse_3753_GeostoreMediaItemProtoOut",
        "QualityActionsAppInfoSourceDataMediaProviderSourceDataIn": "_contentwarehouse_3754_QualityActionsAppInfoSourceDataMediaProviderSourceDataIn",
        "QualityActionsAppInfoSourceDataMediaProviderSourceDataOut": "_contentwarehouse_3755_QualityActionsAppInfoSourceDataMediaProviderSourceDataOut",
        "GoogleCloudContentwarehouseV1RuleSetIn": "_contentwarehouse_3756_GoogleCloudContentwarehouseV1RuleSetIn",
        "GoogleCloudContentwarehouseV1RuleSetOut": "_contentwarehouse_3757_GoogleCloudContentwarehouseV1RuleSetOut",
        "ImageExifIPTCMetadataLocationInfoIn": "_contentwarehouse_3758_ImageExifIPTCMetadataLocationInfoIn",
        "ImageExifIPTCMetadataLocationInfoOut": "_contentwarehouse_3759_ImageExifIPTCMetadataLocationInfoOut",
        "AssistantApiNotificationOutputRestrictionsIn": "_contentwarehouse_3760_AssistantApiNotificationOutputRestrictionsIn",
        "AssistantApiNotificationOutputRestrictionsOut": "_contentwarehouse_3761_AssistantApiNotificationOutputRestrictionsOut",
        "AssistantApiSupportedFeaturesIn": "_contentwarehouse_3762_AssistantApiSupportedFeaturesIn",
        "AssistantApiSupportedFeaturesOut": "_contentwarehouse_3763_AssistantApiSupportedFeaturesOut",
        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateIn": "_contentwarehouse_3764_AssistantApiSystemNotificationRestrictionsNotificationCategoryStateIn",
        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateOut": "_contentwarehouse_3765_AssistantApiSystemNotificationRestrictionsNotificationCategoryStateOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultIn": "_contentwarehouse_3766_AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultOut": "_contentwarehouse_3767_AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultOut",
        "GoogleCloudContentwarehouseV1UpdateDocumentResponseIn": "_contentwarehouse_3768_GoogleCloudContentwarehouseV1UpdateDocumentResponseIn",
        "GoogleCloudContentwarehouseV1UpdateDocumentResponseOut": "_contentwarehouse_3769_GoogleCloudContentwarehouseV1UpdateDocumentResponseOut",
        "AssistantDevicesPlatformProtoCloudCapabilityIn": "_contentwarehouse_3770_AssistantDevicesPlatformProtoCloudCapabilityIn",
        "AssistantDevicesPlatformProtoCloudCapabilityOut": "_contentwarehouse_3771_AssistantDevicesPlatformProtoCloudCapabilityOut",
        "KnowledgeAnswersIntentQueryLocalResultSignalsIn": "_contentwarehouse_3772_KnowledgeAnswersIntentQueryLocalResultSignalsIn",
        "KnowledgeAnswersIntentQueryLocalResultSignalsOut": "_contentwarehouse_3773_KnowledgeAnswersIntentQueryLocalResultSignalsOut",
        "IndexingMobileInterstitialsProtoInterstitialBasicInfoIn": "_contentwarehouse_3774_IndexingMobileInterstitialsProtoInterstitialBasicInfoIn",
        "IndexingMobileInterstitialsProtoInterstitialBasicInfoOut": "_contentwarehouse_3775_IndexingMobileInterstitialsProtoInterstitialBasicInfoOut",
        "QualitySalientCountriesSalientCountryIn": "_contentwarehouse_3776_QualitySalientCountriesSalientCountryIn",
        "QualitySalientCountriesSalientCountryOut": "_contentwarehouse_3777_QualitySalientCountriesSalientCountryOut",
        "ImageUnderstandingIndexingLabelIn": "_contentwarehouse_3778_ImageUnderstandingIndexingLabelIn",
        "ImageUnderstandingIndexingLabelOut": "_contentwarehouse_3779_ImageUnderstandingIndexingLabelOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoIn": "_contentwarehouse_3780_AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoOut": "_contentwarehouse_3781_AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoOut",
        "GeostoreSocialReferenceProtoIn": "_contentwarehouse_3782_GeostoreSocialReferenceProtoIn",
        "GeostoreSocialReferenceProtoOut": "_contentwarehouse_3783_GeostoreSocialReferenceProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiImIn": "_contentwarehouse_3784_AppsPeopleOzExternalMergedpeopleapiImIn",
        "AppsPeopleOzExternalMergedpeopleapiImOut": "_contentwarehouse_3785_AppsPeopleOzExternalMergedpeopleapiImOut",
        "AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataIn": "_contentwarehouse_3786_AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataOut": "_contentwarehouse_3787_AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataOut",
        "SitemapDEPRECATED_TargetIn": "_contentwarehouse_3788_SitemapDEPRECATED_TargetIn",
        "SitemapDEPRECATED_TargetOut": "_contentwarehouse_3789_SitemapDEPRECATED_TargetOut",
        "ImageUnderstandingIndexingFeatureIn": "_contentwarehouse_3790_ImageUnderstandingIndexingFeatureIn",
        "ImageUnderstandingIndexingFeatureOut": "_contentwarehouse_3791_ImageUnderstandingIndexingFeatureOut",
        "ImagePerDocDataIn": "_contentwarehouse_3792_ImagePerDocDataIn",
        "ImagePerDocDataOut": "_contentwarehouse_3793_ImagePerDocDataOut",
        "PhotosVisionObjectrecLocalDescriptorIn": "_contentwarehouse_3794_PhotosVisionObjectrecLocalDescriptorIn",
        "PhotosVisionObjectrecLocalDescriptorOut": "_contentwarehouse_3795_PhotosVisionObjectrecLocalDescriptorOut",
        "RepositoryWebrefEntityAnnotationsIn": "_contentwarehouse_3796_RepositoryWebrefEntityAnnotationsIn",
        "RepositoryWebrefEntityAnnotationsOut": "_contentwarehouse_3797_RepositoryWebrefEntityAnnotationsOut",
        "VideoFileSphericalMetadataIn": "_contentwarehouse_3798_VideoFileSphericalMetadataIn",
        "VideoFileSphericalMetadataOut": "_contentwarehouse_3799_VideoFileSphericalMetadataOut",
        "VideoAssetsVenomTransitionIn": "_contentwarehouse_3800_VideoAssetsVenomTransitionIn",
        "VideoAssetsVenomTransitionOut": "_contentwarehouse_3801_VideoAssetsVenomTransitionOut",
        "GeostoreOntologyRawGConceptInstanceContainerProtoIn": "_contentwarehouse_3802_GeostoreOntologyRawGConceptInstanceContainerProtoIn",
        "GeostoreOntologyRawGConceptInstanceContainerProtoOut": "_contentwarehouse_3803_GeostoreOntologyRawGConceptInstanceContainerProtoOut",
        "GeostoreInternalFieldMetadataProtoIn": "_contentwarehouse_3804_GeostoreInternalFieldMetadataProtoIn",
        "GeostoreInternalFieldMetadataProtoOut": "_contentwarehouse_3805_GeostoreInternalFieldMetadataProtoOut",
        "VideoContentSearchVideoAnchorSetsIn": "_contentwarehouse_3806_VideoContentSearchVideoAnchorSetsIn",
        "VideoContentSearchVideoAnchorSetsOut": "_contentwarehouse_3807_VideoContentSearchVideoAnchorSetsOut",
        "QualityTravelGoodSitesDataI18nIn": "_contentwarehouse_3808_QualityTravelGoodSitesDataI18nIn",
        "QualityTravelGoodSitesDataI18nOut": "_contentwarehouse_3809_QualityTravelGoodSitesDataI18nOut",
        "EmbedsEmbedClientItemIn": "_contentwarehouse_3810_EmbedsEmbedClientItemIn",
        "EmbedsEmbedClientItemOut": "_contentwarehouse_3811_EmbedsEmbedClientItemOut",
        "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataIn": "_contentwarehouse_3812_AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataIn",
        "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataOut": "_contentwarehouse_3813_AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataOut",
        "DrishtiFeatureSetDataSequenceIn": "_contentwarehouse_3814_DrishtiFeatureSetDataSequenceIn",
        "DrishtiFeatureSetDataSequenceOut": "_contentwarehouse_3815_DrishtiFeatureSetDataSequenceOut",
        "RepositoryWebrefCategoryAnnotationBrowsyTopicIn": "_contentwarehouse_3816_RepositoryWebrefCategoryAnnotationBrowsyTopicIn",
        "RepositoryWebrefCategoryAnnotationBrowsyTopicOut": "_contentwarehouse_3817_RepositoryWebrefCategoryAnnotationBrowsyTopicOut",
        "IndexingSignalAggregatorAdaptiveIntervalDataIn": "_contentwarehouse_3818_IndexingSignalAggregatorAdaptiveIntervalDataIn",
        "IndexingSignalAggregatorAdaptiveIntervalDataOut": "_contentwarehouse_3819_IndexingSignalAggregatorAdaptiveIntervalDataOut",
        "AssistantLogsMediaCapabilitiesIn": "_contentwarehouse_3820_AssistantLogsMediaCapabilitiesIn",
        "AssistantLogsMediaCapabilitiesOut": "_contentwarehouse_3821_AssistantLogsMediaCapabilitiesOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataIn": "_contentwarehouse_3822_AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataOut": "_contentwarehouse_3823_AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataOut",
        "AssistantDevicesPlatformProtoInternalCapabilityIn": "_contentwarehouse_3824_AssistantDevicesPlatformProtoInternalCapabilityIn",
        "AssistantDevicesPlatformProtoInternalCapabilityOut": "_contentwarehouse_3825_AssistantDevicesPlatformProtoInternalCapabilityOut",
        "NlpSaftEntityIn": "_contentwarehouse_3826_NlpSaftEntityIn",
        "NlpSaftEntityOut": "_contentwarehouse_3827_NlpSaftEntityOut",
        "YoutubeDiscoveryLegosLegosAnnotationIn": "_contentwarehouse_3828_YoutubeDiscoveryLegosLegosAnnotationIn",
        "YoutubeDiscoveryLegosLegosAnnotationOut": "_contentwarehouse_3829_YoutubeDiscoveryLegosLegosAnnotationOut",
        "GoogleCloudContentwarehouseV1UpdateOptionsIn": "_contentwarehouse_3830_GoogleCloudContentwarehouseV1UpdateOptionsIn",
        "GoogleCloudContentwarehouseV1UpdateOptionsOut": "_contentwarehouse_3831_GoogleCloudContentwarehouseV1UpdateOptionsOut",
        "VideoContentSearchAnchorThumbnailInfoIn": "_contentwarehouse_3832_VideoContentSearchAnchorThumbnailInfoIn",
        "VideoContentSearchAnchorThumbnailInfoOut": "_contentwarehouse_3833_VideoContentSearchAnchorThumbnailInfoOut",
        "GoogleCloudContentwarehouseV1UserInfoIn": "_contentwarehouse_3834_GoogleCloudContentwarehouseV1UserInfoIn",
        "GoogleCloudContentwarehouseV1UserInfoOut": "_contentwarehouse_3835_GoogleCloudContentwarehouseV1UserInfoOut",
        "NlpMeaningMeaningRemodelingIn": "_contentwarehouse_3836_NlpMeaningMeaningRemodelingIn",
        "NlpMeaningMeaningRemodelingOut": "_contentwarehouse_3837_NlpMeaningMeaningRemodelingOut",
        "AssistantApiAppIntegrationsSettingsIn": "_contentwarehouse_3838_AssistantApiAppIntegrationsSettingsIn",
        "AssistantApiAppIntegrationsSettingsOut": "_contentwarehouse_3839_AssistantApiAppIntegrationsSettingsOut",
        "AbuseiamAbuseTypeIn": "_contentwarehouse_3840_AbuseiamAbuseTypeIn",
        "AbuseiamAbuseTypeOut": "_contentwarehouse_3841_AbuseiamAbuseTypeOut",
        "AssistantApiLoggingOnlyDataIn": "_contentwarehouse_3842_AssistantApiLoggingOnlyDataIn",
        "AssistantApiLoggingOnlyDataOut": "_contentwarehouse_3843_AssistantApiLoggingOnlyDataOut",
        "QualityProductProductSiteDataIn": "_contentwarehouse_3844_QualityProductProductSiteDataIn",
        "QualityProductProductSiteDataOut": "_contentwarehouse_3845_QualityProductProductSiteDataOut",
        "GoodocRotatedBoundingBoxIn": "_contentwarehouse_3846_GoodocRotatedBoundingBoxIn",
        "GoodocRotatedBoundingBoxOut": "_contentwarehouse_3847_GoodocRotatedBoundingBoxOut",
        "NlpSemanticParsingModelsMediaRadioInfoIn": "_contentwarehouse_3848_NlpSemanticParsingModelsMediaRadioInfoIn",
        "NlpSemanticParsingModelsMediaRadioInfoOut": "_contentwarehouse_3849_NlpSemanticParsingModelsMediaRadioInfoOut",
        "QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataIn": "_contentwarehouse_3850_QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataIn",
        "QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataOut": "_contentwarehouse_3851_QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataOut",
        "QualityProductProductSiteDataLocaleDataIn": "_contentwarehouse_3852_QualityProductProductSiteDataLocaleDataIn",
        "QualityProductProductSiteDataLocaleDataOut": "_contentwarehouse_3853_QualityProductProductSiteDataLocaleDataOut",
        "AppsPeopleOzExternalMergedpeopleapiMembershipIn": "_contentwarehouse_3854_AppsPeopleOzExternalMergedpeopleapiMembershipIn",
        "AppsPeopleOzExternalMergedpeopleapiMembershipOut": "_contentwarehouse_3855_AppsPeopleOzExternalMergedpeopleapiMembershipOut",
        "GeostoreSkiTrailProtoIn": "_contentwarehouse_3856_GeostoreSkiTrailProtoIn",
        "GeostoreSkiTrailProtoOut": "_contentwarehouse_3857_GeostoreSkiTrailProtoOut",
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn": "_contentwarehouse_3858_SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn",
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut": "_contentwarehouse_3859_SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut",
        "QualityActionsTimerIn": "_contentwarehouse_3860_QualityActionsTimerIn",
        "QualityActionsTimerOut": "_contentwarehouse_3861_QualityActionsTimerOut",
        "AssistantApiTimestampIn": "_contentwarehouse_3862_AssistantApiTimestampIn",
        "AssistantApiTimestampOut": "_contentwarehouse_3863_AssistantApiTimestampOut",
        "SnippetsLeadingtextLeadingTextAnnotationPieceIn": "_contentwarehouse_3864_SnippetsLeadingtextLeadingTextAnnotationPieceIn",
        "SnippetsLeadingtextLeadingTextAnnotationPieceOut": "_contentwarehouse_3865_SnippetsLeadingtextLeadingTextAnnotationPieceOut",
        "QualityActionsRoomIn": "_contentwarehouse_3866_QualityActionsRoomIn",
        "QualityActionsRoomOut": "_contentwarehouse_3867_QualityActionsRoomOut",
        "GoogleCloudContentwarehouseV1DateTimeTypeOptionsIn": "_contentwarehouse_3868_GoogleCloudContentwarehouseV1DateTimeTypeOptionsIn",
        "GoogleCloudContentwarehouseV1DateTimeTypeOptionsOut": "_contentwarehouse_3869_GoogleCloudContentwarehouseV1DateTimeTypeOptionsOut",
        "KnowledgeAnswersIntentQueryPersonalEntityIn": "_contentwarehouse_3870_KnowledgeAnswersIntentQueryPersonalEntityIn",
        "KnowledgeAnswersIntentQueryPersonalEntityOut": "_contentwarehouse_3871_KnowledgeAnswersIntentQueryPersonalEntityOut",
        "RepositoryWebrefMdvcMetadataPerVerticalIn": "_contentwarehouse_3872_RepositoryWebrefMdvcMetadataPerVerticalIn",
        "RepositoryWebrefMdvcMetadataPerVerticalOut": "_contentwarehouse_3873_RepositoryWebrefMdvcMetadataPerVerticalOut",
        "IndexingEmbeddedContentLinkInfoIn": "_contentwarehouse_3874_IndexingEmbeddedContentLinkInfoIn",
        "IndexingEmbeddedContentLinkInfoOut": "_contentwarehouse_3875_IndexingEmbeddedContentLinkInfoOut",
        "GoogleCloudContentwarehouseV1ListLinkedTargetsRequestIn": "_contentwarehouse_3876_GoogleCloudContentwarehouseV1ListLinkedTargetsRequestIn",
        "GoogleCloudContentwarehouseV1ListLinkedTargetsRequestOut": "_contentwarehouse_3877_GoogleCloudContentwarehouseV1ListLinkedTargetsRequestOut",
        "VideoVideoStreamInfoMetadataLutAttachmentsLut3DIn": "_contentwarehouse_3878_VideoVideoStreamInfoMetadataLutAttachmentsLut3DIn",
        "VideoVideoStreamInfoMetadataLutAttachmentsLut3DOut": "_contentwarehouse_3879_VideoVideoStreamInfoMetadataLutAttachmentsLut3DOut",
        "AssistantApiSettingsOnDeviceAppSettingsIn": "_contentwarehouse_3880_AssistantApiSettingsOnDeviceAppSettingsIn",
        "AssistantApiSettingsOnDeviceAppSettingsOut": "_contentwarehouse_3881_AssistantApiSettingsOnDeviceAppSettingsOut",
        "AssistantGroundingRankerLaaFeaturesBindingSetIn": "_contentwarehouse_3882_AssistantGroundingRankerLaaFeaturesBindingSetIn",
        "AssistantGroundingRankerLaaFeaturesBindingSetOut": "_contentwarehouse_3883_AssistantGroundingRankerLaaFeaturesBindingSetOut",
        "HtmlrenderWebkitHeadlessProtoRenderExtensionResultIn": "_contentwarehouse_3884_HtmlrenderWebkitHeadlessProtoRenderExtensionResultIn",
        "HtmlrenderWebkitHeadlessProtoRenderExtensionResultOut": "_contentwarehouse_3885_HtmlrenderWebkitHeadlessProtoRenderExtensionResultOut",
        "NlpSemanticParsingModelsMediaRadioIn": "_contentwarehouse_3886_NlpSemanticParsingModelsMediaRadioIn",
        "NlpSemanticParsingModelsMediaRadioOut": "_contentwarehouse_3887_NlpSemanticParsingModelsMediaRadioOut",
        "SitemapIn": "_contentwarehouse_3888_SitemapIn",
        "SitemapOut": "_contentwarehouse_3889_SitemapOut",
        "RepositoryWebrefAnchorIndicesIn": "_contentwarehouse_3890_RepositoryWebrefAnchorIndicesIn",
        "RepositoryWebrefAnchorIndicesOut": "_contentwarehouse_3891_RepositoryWebrefAnchorIndicesOut",
        "AssistantApiLocationCapabilitiesIn": "_contentwarehouse_3892_AssistantApiLocationCapabilitiesIn",
        "AssistantApiLocationCapabilitiesOut": "_contentwarehouse_3893_AssistantApiLocationCapabilitiesOut",
        "AssistantLogsDeviceMediaSessionLogIn": "_contentwarehouse_3894_AssistantLogsDeviceMediaSessionLogIn",
        "AssistantLogsDeviceMediaSessionLogOut": "_contentwarehouse_3895_AssistantLogsDeviceMediaSessionLogOut",
        "SecurityCredentialsResourceRoleProtoIn": "_contentwarehouse_3896_SecurityCredentialsResourceRoleProtoIn",
        "SecurityCredentialsResourceRoleProtoOut": "_contentwarehouse_3897_SecurityCredentialsResourceRoleProtoOut",
        "GoogleInternalAppsWaldoV1alphaInactiveIn": "_contentwarehouse_3898_GoogleInternalAppsWaldoV1alphaInactiveIn",
        "GoogleInternalAppsWaldoV1alphaInactiveOut": "_contentwarehouse_3899_GoogleInternalAppsWaldoV1alphaInactiveOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataIn": "_contentwarehouse_3900_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataOut": "_contentwarehouse_3901_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataIn": "_contentwarehouse_3902_AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataOut": "_contentwarehouse_3903_AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataOut",
        "GoogleCloudContentwarehouseV1InitializeProjectResponseIn": "_contentwarehouse_3904_GoogleCloudContentwarehouseV1InitializeProjectResponseIn",
        "GoogleCloudContentwarehouseV1InitializeProjectResponseOut": "_contentwarehouse_3905_GoogleCloudContentwarehouseV1InitializeProjectResponseOut",
        "RepositoryAnnotationsMustangSentimentSnippetAnnotationsIn": "_contentwarehouse_3906_RepositoryAnnotationsMustangSentimentSnippetAnnotationsIn",
        "RepositoryAnnotationsMustangSentimentSnippetAnnotationsOut": "_contentwarehouse_3907_RepositoryAnnotationsMustangSentimentSnippetAnnotationsOut",
        "IndexingEmbeddedContentEmbedderInfoIn": "_contentwarehouse_3908_IndexingEmbeddedContentEmbedderInfoIn",
        "IndexingEmbeddedContentEmbedderInfoOut": "_contentwarehouse_3909_IndexingEmbeddedContentEmbedderInfoOut",
        "GeostoreStableFieldPathProtoIn": "_contentwarehouse_3910_GeostoreStableFieldPathProtoIn",
        "GeostoreStableFieldPathProtoOut": "_contentwarehouse_3911_GeostoreStableFieldPathProtoOut",
        "CountryMetroNBFeatureIn": "_contentwarehouse_3912_CountryMetroNBFeatureIn",
        "CountryMetroNBFeatureOut": "_contentwarehouse_3913_CountryMetroNBFeatureOut",
        "GoogleCloudDocumentaiV1NormalizedVertexIn": "_contentwarehouse_3914_GoogleCloudDocumentaiV1NormalizedVertexIn",
        "GoogleCloudDocumentaiV1NormalizedVertexOut": "_contentwarehouse_3915_GoogleCloudDocumentaiV1NormalizedVertexOut",
        "AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataIn": "_contentwarehouse_3916_AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataOut": "_contentwarehouse_3917_AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataOut",
        "FreebasePropertyValueIn": "_contentwarehouse_3918_FreebasePropertyValueIn",
        "FreebasePropertyValueOut": "_contentwarehouse_3919_FreebasePropertyValueOut",
        "IndexingDocjoinerDataVersionIn": "_contentwarehouse_3920_IndexingDocjoinerDataVersionIn",
        "IndexingDocjoinerDataVersionOut": "_contentwarehouse_3921_IndexingDocjoinerDataVersionOut",
        "AssistantLogsQueryAnnotationLogIn": "_contentwarehouse_3922_AssistantLogsQueryAnnotationLogIn",
        "AssistantLogsQueryAnnotationLogOut": "_contentwarehouse_3923_AssistantLogsQueryAnnotationLogOut",
        "FocusBackendContactDetailHashIn": "_contentwarehouse_3924_FocusBackendContactDetailHashIn",
        "FocusBackendContactDetailHashOut": "_contentwarehouse_3925_FocusBackendContactDetailHashOut",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataIn": "_contentwarehouse_3926_GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataIn",
        "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataOut": "_contentwarehouse_3927_GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataOut",
        "TravelFlightsAirlineConfigLocalizedContactInfoIn": "_contentwarehouse_3928_TravelFlightsAirlineConfigLocalizedContactInfoIn",
        "TravelFlightsAirlineConfigLocalizedContactInfoOut": "_contentwarehouse_3929_TravelFlightsAirlineConfigLocalizedContactInfoOut",
        "SearchPolicyRankableSensitivityQueryUnderstandingIn": "_contentwarehouse_3930_SearchPolicyRankableSensitivityQueryUnderstandingIn",
        "SearchPolicyRankableSensitivityQueryUnderstandingOut": "_contentwarehouse_3931_SearchPolicyRankableSensitivityQueryUnderstandingOut",
        "NlpSemanticParsingPersonalReferenceAnnotationIn": "_contentwarehouse_3932_NlpSemanticParsingPersonalReferenceAnnotationIn",
        "NlpSemanticParsingPersonalReferenceAnnotationOut": "_contentwarehouse_3933_NlpSemanticParsingPersonalReferenceAnnotationOut",
        "AssistantApiScreenCapabilitiesProtoLayoutVersionIn": "_contentwarehouse_3934_AssistantApiScreenCapabilitiesProtoLayoutVersionIn",
        "AssistantApiScreenCapabilitiesProtoLayoutVersionOut": "_contentwarehouse_3935_AssistantApiScreenCapabilitiesProtoLayoutVersionOut",
        "KnowledgeAnswersIntentQueryNTPRAnnotationSignalsIn": "_contentwarehouse_3936_KnowledgeAnswersIntentQueryNTPRAnnotationSignalsIn",
        "KnowledgeAnswersIntentQueryNTPRAnnotationSignalsOut": "_contentwarehouse_3937_KnowledgeAnswersIntentQueryNTPRAnnotationSignalsOut",
        "HtmlrenderWebkitHeadlessProtoRenderStatsIn": "_contentwarehouse_3938_HtmlrenderWebkitHeadlessProtoRenderStatsIn",
        "HtmlrenderWebkitHeadlessProtoRenderStatsOut": "_contentwarehouse_3939_HtmlrenderWebkitHeadlessProtoRenderStatsOut",
        "ResearchScamCoscamEasyRestrictDefinitionIn": "_contentwarehouse_3940_ResearchScamCoscamEasyRestrictDefinitionIn",
        "ResearchScamCoscamEasyRestrictDefinitionOut": "_contentwarehouse_3941_ResearchScamCoscamEasyRestrictDefinitionOut",
        "VideoContentSearchGenerativeTopicPredictionFeaturesIn": "_contentwarehouse_3942_VideoContentSearchGenerativeTopicPredictionFeaturesIn",
        "VideoContentSearchGenerativeTopicPredictionFeaturesOut": "_contentwarehouse_3943_VideoContentSearchGenerativeTopicPredictionFeaturesOut",
        "VideoContentSearchDescriptionAnchorSetFeaturesIn": "_contentwarehouse_3944_VideoContentSearchDescriptionAnchorSetFeaturesIn",
        "VideoContentSearchDescriptionAnchorSetFeaturesOut": "_contentwarehouse_3945_VideoContentSearchDescriptionAnchorSetFeaturesOut",
        "NlpSemanticParsingSaftMentionAnnotationIn": "_contentwarehouse_3946_NlpSemanticParsingSaftMentionAnnotationIn",
        "NlpSemanticParsingSaftMentionAnnotationOut": "_contentwarehouse_3947_NlpSemanticParsingSaftMentionAnnotationOut",
        "AbuseiamUserRestrictionIn": "_contentwarehouse_3948_AbuseiamUserRestrictionIn",
        "AbuseiamUserRestrictionOut": "_contentwarehouse_3949_AbuseiamUserRestrictionOut",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationIn": "_contentwarehouse_3950_AppsPeopleOzExternalMergedpeopleapiOrganizationIn",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationOut": "_contentwarehouse_3951_AppsPeopleOzExternalMergedpeopleapiOrganizationOut",
        "RepositoryWebrefAnnotationDebugInfoIn": "_contentwarehouse_3952_RepositoryWebrefAnnotationDebugInfoIn",
        "RepositoryWebrefAnnotationDebugInfoOut": "_contentwarehouse_3953_RepositoryWebrefAnnotationDebugInfoOut",
        "RepositoryWebrefWebrefEntitiesIn": "_contentwarehouse_3954_RepositoryWebrefWebrefEntitiesIn",
        "RepositoryWebrefWebrefEntitiesOut": "_contentwarehouse_3955_RepositoryWebrefWebrefEntitiesOut",
        "MajelContactInformationShortcutInformationIn": "_contentwarehouse_3956_MajelContactInformationShortcutInformationIn",
        "MajelContactInformationShortcutInformationOut": "_contentwarehouse_3957_MajelContactInformationShortcutInformationOut",
        "NlpSciencelitReferencedBlockIn": "_contentwarehouse_3958_NlpSciencelitReferencedBlockIn",
        "NlpSciencelitReferencedBlockOut": "_contentwarehouse_3959_NlpSciencelitReferencedBlockOut",
        "NlpSemanticParsingModelsMediaAudioIn": "_contentwarehouse_3960_NlpSemanticParsingModelsMediaAudioIn",
        "NlpSemanticParsingModelsMediaAudioOut": "_contentwarehouse_3961_NlpSemanticParsingModelsMediaAudioOut",
        "GeostoreServiceAreaProtoIn": "_contentwarehouse_3962_GeostoreServiceAreaProtoIn",
        "GeostoreServiceAreaProtoOut": "_contentwarehouse_3963_GeostoreServiceAreaProtoOut",
        "GeostoreSegmentProtoIn": "_contentwarehouse_3964_GeostoreSegmentProtoIn",
        "GeostoreSegmentProtoOut": "_contentwarehouse_3965_GeostoreSegmentProtoOut",
        "RepositoryWebrefWebrefMustangAttachmentIn": "_contentwarehouse_3966_RepositoryWebrefWebrefMustangAttachmentIn",
        "RepositoryWebrefWebrefMustangAttachmentOut": "_contentwarehouse_3967_RepositoryWebrefWebrefMustangAttachmentOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateIn": "_contentwarehouse_3968_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateOut": "_contentwarehouse_3969_KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateOut",
        "AssistantApiLiveTvProviderIn": "_contentwarehouse_3970_AssistantApiLiveTvProviderIn",
        "AssistantApiLiveTvProviderOut": "_contentwarehouse_3971_AssistantApiLiveTvProviderOut",
        "MediaIndexVideoCentroidIn": "_contentwarehouse_3972_MediaIndexVideoCentroidIn",
        "MediaIndexVideoCentroidOut": "_contentwarehouse_3973_MediaIndexVideoCentroidOut",
        "HtmlrenderWebkitHeadlessProtoResourceHttpHeaderIn": "_contentwarehouse_3974_HtmlrenderWebkitHeadlessProtoResourceHttpHeaderIn",
        "HtmlrenderWebkitHeadlessProtoResourceHttpHeaderOut": "_contentwarehouse_3975_HtmlrenderWebkitHeadlessProtoResourceHttpHeaderOut",
        "VideoThumbnailsFrameFileListIn": "_contentwarehouse_3976_VideoThumbnailsFrameFileListIn",
        "VideoThumbnailsFrameFileListOut": "_contentwarehouse_3977_VideoThumbnailsFrameFileListOut",
        "AppsDynamiteSharedOrganizationInfoIn": "_contentwarehouse_3978_AppsDynamiteSharedOrganizationInfoIn",
        "AppsDynamiteSharedOrganizationInfoOut": "_contentwarehouse_3979_AppsDynamiteSharedOrganizationInfoOut",
        "NlpSemanticParsingModelsMediaMusicArtistIn": "_contentwarehouse_3980_NlpSemanticParsingModelsMediaMusicArtistIn",
        "NlpSemanticParsingModelsMediaMusicArtistOut": "_contentwarehouse_3981_NlpSemanticParsingModelsMediaMusicArtistOut",
        "VideoContentSearchOcrAsrFeatureIn": "_contentwarehouse_3982_VideoContentSearchOcrAsrFeatureIn",
        "VideoContentSearchOcrAsrFeatureOut": "_contentwarehouse_3983_VideoContentSearchOcrAsrFeatureOut",
        "VideoGoogleVideoClipInfoIn": "_contentwarehouse_3984_VideoGoogleVideoClipInfoIn",
        "VideoGoogleVideoClipInfoOut": "_contentwarehouse_3985_VideoGoogleVideoClipInfoOut",
        "ResearchScienceSearchLocationIn": "_contentwarehouse_3986_ResearchScienceSearchLocationIn",
        "ResearchScienceSearchLocationOut": "_contentwarehouse_3987_ResearchScienceSearchLocationOut",
        "VideoContentSearchMetricStatsIn": "_contentwarehouse_3988_VideoContentSearchMetricStatsIn",
        "VideoContentSearchMetricStatsOut": "_contentwarehouse_3989_VideoContentSearchMetricStatsOut",
        "RepositoryWebrefMentionDebugInfoIn": "_contentwarehouse_3990_RepositoryWebrefMentionDebugInfoIn",
        "RepositoryWebrefMentionDebugInfoOut": "_contentwarehouse_3991_RepositoryWebrefMentionDebugInfoOut",
        "GoogleCloudContentwarehouseV1ResponseMetadataIn": "_contentwarehouse_3992_GoogleCloudContentwarehouseV1ResponseMetadataIn",
        "GoogleCloudContentwarehouseV1ResponseMetadataOut": "_contentwarehouse_3993_GoogleCloudContentwarehouseV1ResponseMetadataOut",
        "GeostoreJobMetadataIn": "_contentwarehouse_3994_GeostoreJobMetadataIn",
        "GeostoreJobMetadataOut": "_contentwarehouse_3995_GeostoreJobMetadataOut",
        "CloudAiPlatformTenantresourceServiceAccountIdentityIn": "_contentwarehouse_3996_CloudAiPlatformTenantresourceServiceAccountIdentityIn",
        "CloudAiPlatformTenantresourceServiceAccountIdentityOut": "_contentwarehouse_3997_CloudAiPlatformTenantresourceServiceAccountIdentityOut",
        "QualityWebanswersVideoTranscriptAnnotationsIn": "_contentwarehouse_3998_QualityWebanswersVideoTranscriptAnnotationsIn",
        "QualityWebanswersVideoTranscriptAnnotationsOut": "_contentwarehouse_3999_QualityWebanswersVideoTranscriptAnnotationsOut",
        "SecurityCredentialsCapTokenHolderProtoIn": "_contentwarehouse_4000_SecurityCredentialsCapTokenHolderProtoIn",
        "SecurityCredentialsCapTokenHolderProtoOut": "_contentwarehouse_4001_SecurityCredentialsCapTokenHolderProtoOut",
        "GeostoreTimeScheduleProtoIn": "_contentwarehouse_4002_GeostoreTimeScheduleProtoIn",
        "GeostoreTimeScheduleProtoOut": "_contentwarehouse_4003_GeostoreTimeScheduleProtoOut",
        "RepositoryWebrefSupportTransferRuleIn": "_contentwarehouse_4004_RepositoryWebrefSupportTransferRuleIn",
        "RepositoryWebrefSupportTransferRuleOut": "_contentwarehouse_4005_RepositoryWebrefSupportTransferRuleOut",
        "LogsProtoIndexingCrawlerIdCrawlerIdProtoIn": "_contentwarehouse_4006_LogsProtoIndexingCrawlerIdCrawlerIdProtoIn",
        "LogsProtoIndexingCrawlerIdCrawlerIdProtoOut": "_contentwarehouse_4007_LogsProtoIndexingCrawlerIdCrawlerIdProtoOut",
        "CommerceDatastoreImageDeepTagsIn": "_contentwarehouse_4008_CommerceDatastoreImageDeepTagsIn",
        "CommerceDatastoreImageDeepTagsOut": "_contentwarehouse_4009_CommerceDatastoreImageDeepTagsOut",
        "NlpSemanticParsingModelsMediaMediaAnnotationIn": "_contentwarehouse_4010_NlpSemanticParsingModelsMediaMediaAnnotationIn",
        "NlpSemanticParsingModelsMediaMediaAnnotationOut": "_contentwarehouse_4011_NlpSemanticParsingModelsMediaMediaAnnotationOut",
        "RepositoryWebrefFatcatCategoryIn": "_contentwarehouse_4012_RepositoryWebrefFatcatCategoryIn",
        "RepositoryWebrefFatcatCategoryOut": "_contentwarehouse_4013_RepositoryWebrefFatcatCategoryOut",
        "BlogsearchConversationNodeIn": "_contentwarehouse_4014_BlogsearchConversationNodeIn",
        "BlogsearchConversationNodeOut": "_contentwarehouse_4015_BlogsearchConversationNodeOut",
        "GeostoreAnchoredGeometryProtoIn": "_contentwarehouse_4016_GeostoreAnchoredGeometryProtoIn",
        "GeostoreAnchoredGeometryProtoOut": "_contentwarehouse_4017_GeostoreAnchoredGeometryProtoOut",
        "SocialGraphApiProtoMonthlyDayRecurrenceIn": "_contentwarehouse_4018_SocialGraphApiProtoMonthlyDayRecurrenceIn",
        "SocialGraphApiProtoMonthlyDayRecurrenceOut": "_contentwarehouse_4019_SocialGraphApiProtoMonthlyDayRecurrenceOut",
        "KnowledgeAnswersIntentQueryCollectionMembershipIn": "_contentwarehouse_4020_KnowledgeAnswersIntentQueryCollectionMembershipIn",
        "KnowledgeAnswersIntentQueryCollectionMembershipOut": "_contentwarehouse_4021_KnowledgeAnswersIntentQueryCollectionMembershipOut",
        "TeragoogleDocumentInfoIn": "_contentwarehouse_4022_TeragoogleDocumentInfoIn",
        "TeragoogleDocumentInfoOut": "_contentwarehouse_4023_TeragoogleDocumentInfoOut",
        "GeostoreTemporaryClosureProtoIn": "_contentwarehouse_4024_GeostoreTemporaryClosureProtoIn",
        "GeostoreTemporaryClosureProtoOut": "_contentwarehouse_4025_GeostoreTemporaryClosureProtoOut",
        "AdsShoppingReportingOffersSerializedSoriIdIn": "_contentwarehouse_4026_AdsShoppingReportingOffersSerializedSoriIdIn",
        "AdsShoppingReportingOffersSerializedSoriIdOut": "_contentwarehouse_4027_AdsShoppingReportingOffersSerializedSoriIdOut",
        "FatcatCompactDocClassificationIn": "_contentwarehouse_4028_FatcatCompactDocClassificationIn",
        "FatcatCompactDocClassificationOut": "_contentwarehouse_4029_FatcatCompactDocClassificationOut",
        "AssistantApiCoreTypesCalendarEventRoomIn": "_contentwarehouse_4030_AssistantApiCoreTypesCalendarEventRoomIn",
        "AssistantApiCoreTypesCalendarEventRoomOut": "_contentwarehouse_4031_AssistantApiCoreTypesCalendarEventRoomOut",
        "SnippetsLeadingtextLeadingTextAnnotationIn": "_contentwarehouse_4032_SnippetsLeadingtextLeadingTextAnnotationIn",
        "SnippetsLeadingtextLeadingTextAnnotationOut": "_contentwarehouse_4033_SnippetsLeadingtextLeadingTextAnnotationOut",
        "NlpSemanticParsingModelsRecurrenceYearlyPatternIn": "_contentwarehouse_4034_NlpSemanticParsingModelsRecurrenceYearlyPatternIn",
        "NlpSemanticParsingModelsRecurrenceYearlyPatternOut": "_contentwarehouse_4035_NlpSemanticParsingModelsRecurrenceYearlyPatternOut",
        "NlpSemanticParsingModelsDialogReferentsListSelectionIn": "_contentwarehouse_4036_NlpSemanticParsingModelsDialogReferentsListSelectionIn",
        "NlpSemanticParsingModelsDialogReferentsListSelectionOut": "_contentwarehouse_4037_NlpSemanticParsingModelsDialogReferentsListSelectionOut",
        "VideoUserDataRegisteredItuTT35In": "_contentwarehouse_4038_VideoUserDataRegisteredItuTT35In",
        "VideoUserDataRegisteredItuTT35Out": "_contentwarehouse_4039_VideoUserDataRegisteredItuTT35Out",
        "ClassifierPornSiteDataVersionedScoreIn": "_contentwarehouse_4040_ClassifierPornSiteDataVersionedScoreIn",
        "ClassifierPornSiteDataVersionedScoreOut": "_contentwarehouse_4041_ClassifierPornSiteDataVersionedScoreOut",
        "IndexingConverterRobotsInfoIn": "_contentwarehouse_4042_IndexingConverterRobotsInfoIn",
        "IndexingConverterRobotsInfoOut": "_contentwarehouse_4043_IndexingConverterRobotsInfoOut",
        "PrecomputedRestrictsIn": "_contentwarehouse_4044_PrecomputedRestrictsIn",
        "PrecomputedRestrictsOut": "_contentwarehouse_4045_PrecomputedRestrictsOut",
        "GeostoreRankDetailsProtoIn": "_contentwarehouse_4046_GeostoreRankDetailsProtoIn",
        "GeostoreRankDetailsProtoOut": "_contentwarehouse_4047_GeostoreRankDetailsProtoOut",
        "OceanGEMoneyIn": "_contentwarehouse_4048_OceanGEMoneyIn",
        "OceanGEMoneyOut": "_contentwarehouse_4049_OceanGEMoneyOut",
        "IndexingSignalAggregatorSccDataIn": "_contentwarehouse_4050_IndexingSignalAggregatorSccDataIn",
        "IndexingSignalAggregatorSccDataOut": "_contentwarehouse_4051_IndexingSignalAggregatorSccDataOut",
        "GoogleCloudDocumentaiV1DocumentPageAnchorPageRefIn": "_contentwarehouse_4052_GoogleCloudDocumentaiV1DocumentPageAnchorPageRefIn",
        "GoogleCloudDocumentaiV1DocumentPageAnchorPageRefOut": "_contentwarehouse_4053_GoogleCloudDocumentaiV1DocumentPageAnchorPageRefOut",
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsIn": "_contentwarehouse_4054_KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsIn",
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsOut": "_contentwarehouse_4055_KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsOut",
        "FreebaseValueIn": "_contentwarehouse_4056_FreebaseValueIn",
        "FreebaseValueOut": "_contentwarehouse_4057_FreebaseValueOut",
        "AssistantApiSettingsCarrierCallDeviceSettingsIn": "_contentwarehouse_4058_AssistantApiSettingsCarrierCallDeviceSettingsIn",
        "AssistantApiSettingsCarrierCallDeviceSettingsOut": "_contentwarehouse_4059_AssistantApiSettingsCarrierCallDeviceSettingsOut",
        "PseudoVideoDataTranscriptIn": "_contentwarehouse_4060_PseudoVideoDataTranscriptIn",
        "PseudoVideoDataTranscriptOut": "_contentwarehouse_4061_PseudoVideoDataTranscriptOut",
        "ImageRepositoryVideoPreviewsVideoPreviewIn": "_contentwarehouse_4062_ImageRepositoryVideoPreviewsVideoPreviewIn",
        "ImageRepositoryVideoPreviewsVideoPreviewOut": "_contentwarehouse_4063_ImageRepositoryVideoPreviewsVideoPreviewOut",
        "GeostorePriceListNameInfoProtoIn": "_contentwarehouse_4064_GeostorePriceListNameInfoProtoIn",
        "GeostorePriceListNameInfoProtoOut": "_contentwarehouse_4065_GeostorePriceListNameInfoProtoOut",
        "SnapshotSnapshotMetadataIn": "_contentwarehouse_4066_SnapshotSnapshotMetadataIn",
        "SnapshotSnapshotMetadataOut": "_contentwarehouse_4067_SnapshotSnapshotMetadataOut",
        "AssistantApiSurfacePropertiesIn": "_contentwarehouse_4068_AssistantApiSurfacePropertiesIn",
        "AssistantApiSurfacePropertiesOut": "_contentwarehouse_4069_AssistantApiSurfacePropertiesOut",
        "VideoPipelineViperThumbnailerColumnDataIn": "_contentwarehouse_4070_VideoPipelineViperThumbnailerColumnDataIn",
        "VideoPipelineViperThumbnailerColumnDataOut": "_contentwarehouse_4071_VideoPipelineViperThumbnailerColumnDataOut",
        "GeostoreSourceTrustProtoIn": "_contentwarehouse_4072_GeostoreSourceTrustProtoIn",
        "GeostoreSourceTrustProtoOut": "_contentwarehouse_4073_GeostoreSourceTrustProtoOut",
        "QualityOrbitAsteroidBeltDocumentIntentScoresIn": "_contentwarehouse_4074_QualityOrbitAsteroidBeltDocumentIntentScoresIn",
        "QualityOrbitAsteroidBeltDocumentIntentScoresOut": "_contentwarehouse_4075_QualityOrbitAsteroidBeltDocumentIntentScoresOut",
        "GeostoreRectProtoIn": "_contentwarehouse_4076_GeostoreRectProtoIn",
        "GeostoreRectProtoOut": "_contentwarehouse_4077_GeostoreRectProtoOut",
        "RepositoryWebrefJuggernautIndicesIn": "_contentwarehouse_4078_RepositoryWebrefJuggernautIndicesIn",
        "RepositoryWebrefJuggernautIndicesOut": "_contentwarehouse_4079_RepositoryWebrefJuggernautIndicesOut",
        "RepositoryWebrefWebrefEntityIdIn": "_contentwarehouse_4080_RepositoryWebrefWebrefEntityIdIn",
        "RepositoryWebrefWebrefEntityIdOut": "_contentwarehouse_4081_RepositoryWebrefWebrefEntityIdOut",
        "ImageDataMultibangEntitiesIn": "_contentwarehouse_4082_ImageDataMultibangEntitiesIn",
        "ImageDataMultibangEntitiesOut": "_contentwarehouse_4083_ImageDataMultibangEntitiesOut",
        "RepositoryWebrefRefconRefconDocumentMetadataIn": "_contentwarehouse_4084_RepositoryWebrefRefconRefconDocumentMetadataIn",
        "RepositoryWebrefRefconRefconDocumentMetadataOut": "_contentwarehouse_4085_RepositoryWebrefRefconRefconDocumentMetadataOut",
        "HtmlrenderWebkitHeadlessProtoChromiumTraceIn": "_contentwarehouse_4086_HtmlrenderWebkitHeadlessProtoChromiumTraceIn",
        "HtmlrenderWebkitHeadlessProtoChromiumTraceOut": "_contentwarehouse_4087_HtmlrenderWebkitHeadlessProtoChromiumTraceOut",
        "GeostoreCurveConnectionProtoIn": "_contentwarehouse_4088_GeostoreCurveConnectionProtoIn",
        "GeostoreCurveConnectionProtoOut": "_contentwarehouse_4089_GeostoreCurveConnectionProtoOut",
        "GDocumentBaseIn": "_contentwarehouse_4090_GDocumentBaseIn",
        "GDocumentBaseOut": "_contentwarehouse_4091_GDocumentBaseOut",
        "NlpSemanticParsingDatetimeFetchedRelativeDateTimeIn": "_contentwarehouse_4092_NlpSemanticParsingDatetimeFetchedRelativeDateTimeIn",
        "NlpSemanticParsingDatetimeFetchedRelativeDateTimeOut": "_contentwarehouse_4093_NlpSemanticParsingDatetimeFetchedRelativeDateTimeOut",
        "QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperIn": "_contentwarehouse_4094_QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperIn",
        "QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperOut": "_contentwarehouse_4095_QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperOut",
        "GoogleInternalAppsWaldoV1alphaOutOfOfficeIn": "_contentwarehouse_4096_GoogleInternalAppsWaldoV1alphaOutOfOfficeIn",
        "GoogleInternalAppsWaldoV1alphaOutOfOfficeOut": "_contentwarehouse_4097_GoogleInternalAppsWaldoV1alphaOutOfOfficeOut",
        "VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyIn": "_contentwarehouse_4098_VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyIn",
        "VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyOut": "_contentwarehouse_4099_VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyOut",
        "ImageRepositoryApiXtagIn": "_contentwarehouse_4100_ImageRepositoryApiXtagIn",
        "ImageRepositoryApiXtagOut": "_contentwarehouse_4101_ImageRepositoryApiXtagOut",
        "KnowledgeAnswersMeaningSchemaSlotKeyIn": "_contentwarehouse_4102_KnowledgeAnswersMeaningSchemaSlotKeyIn",
        "KnowledgeAnswersMeaningSchemaSlotKeyOut": "_contentwarehouse_4103_KnowledgeAnswersMeaningSchemaSlotKeyOut",
        "SocialGraphApiProtoLimitedProfileNameSettingsIn": "_contentwarehouse_4104_SocialGraphApiProtoLimitedProfileNameSettingsIn",
        "SocialGraphApiProtoLimitedProfileNameSettingsOut": "_contentwarehouse_4105_SocialGraphApiProtoLimitedProfileNameSettingsOut",
        "HtmlrenderWebkitHeadlessProtoPartialRenderIn": "_contentwarehouse_4106_HtmlrenderWebkitHeadlessProtoPartialRenderIn",
        "HtmlrenderWebkitHeadlessProtoPartialRenderOut": "_contentwarehouse_4107_HtmlrenderWebkitHeadlessProtoPartialRenderOut",
        "AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoIn": "_contentwarehouse_4108_AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoIn",
        "AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoOut": "_contentwarehouse_4109_AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoOut",
        "CompositeDocLocalizedVariationsIn": "_contentwarehouse_4110_CompositeDocLocalizedVariationsIn",
        "CompositeDocLocalizedVariationsOut": "_contentwarehouse_4111_CompositeDocLocalizedVariationsOut",
        "NlpSemanticParsingModelsRecurrenceRecurrenceStartIn": "_contentwarehouse_4112_NlpSemanticParsingModelsRecurrenceRecurrenceStartIn",
        "NlpSemanticParsingModelsRecurrenceRecurrenceStartOut": "_contentwarehouse_4113_NlpSemanticParsingModelsRecurrenceRecurrenceStartOut",
        "GoodocWordAlternatesAlternateIn": "_contentwarehouse_4114_GoodocWordAlternatesAlternateIn",
        "GoodocWordAlternatesAlternateOut": "_contentwarehouse_4115_GoodocWordAlternatesAlternateOut",
        "NlxDataSchemaByteIn": "_contentwarehouse_4116_NlxDataSchemaByteIn",
        "NlxDataSchemaByteOut": "_contentwarehouse_4117_NlxDataSchemaByteOut",
        "KnowledgeAnswersIntentQueryMediaEntitySignalsIn": "_contentwarehouse_4118_KnowledgeAnswersIntentQueryMediaEntitySignalsIn",
        "KnowledgeAnswersIntentQueryMediaEntitySignalsOut": "_contentwarehouse_4119_KnowledgeAnswersIntentQueryMediaEntitySignalsOut",
        "QualityTimebasedSyntacticDateIn": "_contentwarehouse_4120_QualityTimebasedSyntacticDateIn",
        "QualityTimebasedSyntacticDateOut": "_contentwarehouse_4121_QualityTimebasedSyntacticDateOut",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeIn": "_contentwarehouse_4122_AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeIn",
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeOut": "_contentwarehouse_4123_AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeOut",
        "NlpSaftEntityProfileRelatedIn": "_contentwarehouse_4124_NlpSaftEntityProfileRelatedIn",
        "NlpSaftEntityProfileRelatedOut": "_contentwarehouse_4125_NlpSaftEntityProfileRelatedOut",
        "ImageRepositoryFrameIdentifierIn": "_contentwarehouse_4126_ImageRepositoryFrameIdentifierIn",
        "ImageRepositoryFrameIdentifierOut": "_contentwarehouse_4127_ImageRepositoryFrameIdentifierOut",
        "QualityActionsReminderIn": "_contentwarehouse_4128_QualityActionsReminderIn",
        "QualityActionsReminderOut": "_contentwarehouse_4129_QualityActionsReminderOut",
        "SnippetExtraInfoSnippetCandidateInfoExtendedSnippetIn": "_contentwarehouse_4130_SnippetExtraInfoSnippetCandidateInfoExtendedSnippetIn",
        "SnippetExtraInfoSnippetCandidateInfoExtendedSnippetOut": "_contentwarehouse_4131_SnippetExtraInfoSnippetCandidateInfoExtendedSnippetOut",
        "ImageRepositorySpeechRecognitionAlternativeIn": "_contentwarehouse_4132_ImageRepositorySpeechRecognitionAlternativeIn",
        "ImageRepositorySpeechRecognitionAlternativeOut": "_contentwarehouse_4133_ImageRepositorySpeechRecognitionAlternativeOut",
        "ImageSafesearchContentBrainPornAnnotationIn": "_contentwarehouse_4134_ImageSafesearchContentBrainPornAnnotationIn",
        "ImageSafesearchContentBrainPornAnnotationOut": "_contentwarehouse_4135_ImageSafesearchContentBrainPornAnnotationOut",
        "KnowledgeAnswersTimeZoneTypeIn": "_contentwarehouse_4136_KnowledgeAnswersTimeZoneTypeIn",
        "KnowledgeAnswersTimeZoneTypeOut": "_contentwarehouse_4137_KnowledgeAnswersTimeZoneTypeOut",
        "GeostorePointProtoIn": "_contentwarehouse_4138_GeostorePointProtoIn",
        "GeostorePointProtoOut": "_contentwarehouse_4139_GeostorePointProtoOut",
        "GDocumentBaseDirectoryIn": "_contentwarehouse_4140_GDocumentBaseDirectoryIn",
        "GDocumentBaseDirectoryOut": "_contentwarehouse_4141_GDocumentBaseDirectoryOut",
        "LongStructuredSnippetEntryIn": "_contentwarehouse_4142_LongStructuredSnippetEntryIn",
        "LongStructuredSnippetEntryOut": "_contentwarehouse_4143_LongStructuredSnippetEntryOut",
        "GoogleCloudDocumentaiV1DocumentEntityRelationIn": "_contentwarehouse_4144_GoogleCloudDocumentaiV1DocumentEntityRelationIn",
        "GoogleCloudDocumentaiV1DocumentEntityRelationOut": "_contentwarehouse_4145_GoogleCloudDocumentaiV1DocumentEntityRelationOut",
        "NlpSemanticParsingProtoActionsOnGoogleTypedValueIn": "_contentwarehouse_4146_NlpSemanticParsingProtoActionsOnGoogleTypedValueIn",
        "NlpSemanticParsingProtoActionsOnGoogleTypedValueOut": "_contentwarehouse_4147_NlpSemanticParsingProtoActionsOnGoogleTypedValueOut",
        "GroupsPerDocDataIn": "_contentwarehouse_4148_GroupsPerDocDataIn",
        "GroupsPerDocDataOut": "_contentwarehouse_4149_GroupsPerDocDataOut",
        "GoogleCloudContentwarehouseV1ValueIn": "_contentwarehouse_4150_GoogleCloudContentwarehouseV1ValueIn",
        "GoogleCloudContentwarehouseV1ValueOut": "_contentwarehouse_4151_GoogleCloudContentwarehouseV1ValueOut",
        "AbuseiamGeoRestrictionLocaleIn": "_contentwarehouse_4152_AbuseiamGeoRestrictionLocaleIn",
        "AbuseiamGeoRestrictionLocaleOut": "_contentwarehouse_4153_AbuseiamGeoRestrictionLocaleOut",
        "SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecIn": "_contentwarehouse_4154_SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecIn",
        "SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecOut": "_contentwarehouse_4155_SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecOut",
        "AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataIn": "_contentwarehouse_4156_AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataOut": "_contentwarehouse_4157_AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataOut",
        "RepositoryWebrefMdvcMetadataIn": "_contentwarehouse_4158_RepositoryWebrefMdvcMetadataIn",
        "RepositoryWebrefMdvcMetadataOut": "_contentwarehouse_4159_RepositoryWebrefMdvcMetadataOut",
        "VideoContentSearchSpanDolphinScoresSpanTokenIn": "_contentwarehouse_4160_VideoContentSearchSpanDolphinScoresSpanTokenIn",
        "VideoContentSearchSpanDolphinScoresSpanTokenOut": "_contentwarehouse_4161_VideoContentSearchSpanDolphinScoresSpanTokenOut",
        "AssistantVerticalsHomeautomationProtoSmartHomeFeaturesIn": "_contentwarehouse_4162_AssistantVerticalsHomeautomationProtoSmartHomeFeaturesIn",
        "AssistantVerticalsHomeautomationProtoSmartHomeFeaturesOut": "_contentwarehouse_4163_AssistantVerticalsHomeautomationProtoSmartHomeFeaturesOut",
        "GoogleIamV1BindingIn": "_contentwarehouse_4164_GoogleIamV1BindingIn",
        "GoogleIamV1BindingOut": "_contentwarehouse_4165_GoogleIamV1BindingOut",
        "MediaIndexSparseFloatVectorIn": "_contentwarehouse_4166_MediaIndexSparseFloatVectorIn",
        "MediaIndexSparseFloatVectorOut": "_contentwarehouse_4167_MediaIndexSparseFloatVectorOut",
        "OceanVolumeViewabilityIn": "_contentwarehouse_4168_OceanVolumeViewabilityIn",
        "OceanVolumeViewabilityOut": "_contentwarehouse_4169_OceanVolumeViewabilityOut",
        "SocialCommonLinkDataIn": "_contentwarehouse_4170_SocialCommonLinkDataIn",
        "SocialCommonLinkDataOut": "_contentwarehouse_4171_SocialCommonLinkDataOut",
        "GoodocDocumentHeaderIn": "_contentwarehouse_4172_GoodocDocumentHeaderIn",
        "GoodocDocumentHeaderOut": "_contentwarehouse_4173_GoodocDocumentHeaderOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningIn": "_contentwarehouse_4174_KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningOut": "_contentwarehouse_4175_KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningOut",
        "AssistantApiSettingsHospitalityModeBrandingIn": "_contentwarehouse_4176_AssistantApiSettingsHospitalityModeBrandingIn",
        "AssistantApiSettingsHospitalityModeBrandingOut": "_contentwarehouse_4177_AssistantApiSettingsHospitalityModeBrandingOut",
        "GoodocBoundingBoxIn": "_contentwarehouse_4178_GoodocBoundingBoxIn",
        "GoodocBoundingBoxOut": "_contentwarehouse_4179_GoodocBoundingBoxOut",
        "SecurityCredentialsMdbGroupProtoIn": "_contentwarehouse_4180_SecurityCredentialsMdbGroupProtoIn",
        "SecurityCredentialsMdbGroupProtoOut": "_contentwarehouse_4181_SecurityCredentialsMdbGroupProtoOut",
        "WirelessTranscoderFetchFetchMetadataIn": "_contentwarehouse_4182_WirelessTranscoderFetchFetchMetadataIn",
        "WirelessTranscoderFetchFetchMetadataOut": "_contentwarehouse_4183_WirelessTranscoderFetchFetchMetadataOut",
        "GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestIn": "_contentwarehouse_4184_GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestIn",
        "GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestOut": "_contentwarehouse_4185_GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestOut",
        "TrawlerOriginalClientParamsIn": "_contentwarehouse_4186_TrawlerOriginalClientParamsIn",
        "TrawlerOriginalClientParamsOut": "_contentwarehouse_4187_TrawlerOriginalClientParamsOut",
        "VideoContentSearchOCRTextIn": "_contentwarehouse_4188_VideoContentSearchOCRTextIn",
        "VideoContentSearchOCRTextOut": "_contentwarehouse_4189_VideoContentSearchOCRTextOut",
        "AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityIn": "_contentwarehouse_4190_AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityIn",
        "AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityOut": "_contentwarehouse_4191_AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityOut",
        "TravelFlightsAirlineConfigCountryContactInfoIn": "_contentwarehouse_4192_TravelFlightsAirlineConfigCountryContactInfoIn",
        "TravelFlightsAirlineConfigCountryContactInfoOut": "_contentwarehouse_4193_TravelFlightsAirlineConfigCountryContactInfoOut",
        "AssistantLogsRoomAnnotationLogIn": "_contentwarehouse_4194_AssistantLogsRoomAnnotationLogIn",
        "AssistantLogsRoomAnnotationLogOut": "_contentwarehouse_4195_AssistantLogsRoomAnnotationLogOut",
        "SocialGraphApiProtoDailyRecurrenceIn": "_contentwarehouse_4196_SocialGraphApiProtoDailyRecurrenceIn",
        "SocialGraphApiProtoDailyRecurrenceOut": "_contentwarehouse_4197_SocialGraphApiProtoDailyRecurrenceOut",
        "AssistantApiSettingsLabeledDowntimeScheduleIn": "_contentwarehouse_4198_AssistantApiSettingsLabeledDowntimeScheduleIn",
        "AssistantApiSettingsLabeledDowntimeScheduleOut": "_contentwarehouse_4199_AssistantApiSettingsLabeledDowntimeScheduleOut",
        "GoogleCloudContentwarehouseV1FloatArrayIn": "_contentwarehouse_4200_GoogleCloudContentwarehouseV1FloatArrayIn",
        "GoogleCloudContentwarehouseV1FloatArrayOut": "_contentwarehouse_4201_GoogleCloudContentwarehouseV1FloatArrayOut",
        "QualitySitemapTargetIn": "_contentwarehouse_4202_QualitySitemapTargetIn",
        "QualitySitemapTargetOut": "_contentwarehouse_4203_QualitySitemapTargetOut",
        "KnowledgeGraphTripleProvenanceIn": "_contentwarehouse_4204_KnowledgeGraphTripleProvenanceIn",
        "KnowledgeGraphTripleProvenanceOut": "_contentwarehouse_4205_KnowledgeGraphTripleProvenanceOut",
        "VideoFileColorInfoIn": "_contentwarehouse_4206_VideoFileColorInfoIn",
        "VideoFileColorInfoOut": "_contentwarehouse_4207_VideoFileColorInfoOut",
        "RepositoryWebrefExtendedEntityNameScoreIn": "_contentwarehouse_4208_RepositoryWebrefExtendedEntityNameScoreIn",
        "RepositoryWebrefExtendedEntityNameScoreOut": "_contentwarehouse_4209_RepositoryWebrefExtendedEntityNameScoreOut",
        "YoutubeDiscoveryLegosLegosSemanticRelationshipIn": "_contentwarehouse_4210_YoutubeDiscoveryLegosLegosSemanticRelationshipIn",
        "YoutubeDiscoveryLegosLegosSemanticRelationshipOut": "_contentwarehouse_4211_YoutubeDiscoveryLegosLegosSemanticRelationshipOut",
        "SecurityCredentialsPostiniUserProtoIn": "_contentwarehouse_4212_SecurityCredentialsPostiniUserProtoIn",
        "SecurityCredentialsPostiniUserProtoOut": "_contentwarehouse_4213_SecurityCredentialsPostiniUserProtoOut",
        "SocialGraphApiProtoPhotoOverlayIn": "_contentwarehouse_4214_SocialGraphApiProtoPhotoOverlayIn",
        "SocialGraphApiProtoPhotoOverlayOut": "_contentwarehouse_4215_SocialGraphApiProtoPhotoOverlayOut",
        "QualitySitemapSubresultListIn": "_contentwarehouse_4216_QualitySitemapSubresultListIn",
        "QualitySitemapSubresultListOut": "_contentwarehouse_4217_QualitySitemapSubresultListOut",
        "RepositoryWebrefRangeMetadataIn": "_contentwarehouse_4218_RepositoryWebrefRangeMetadataIn",
        "RepositoryWebrefRangeMetadataOut": "_contentwarehouse_4219_RepositoryWebrefRangeMetadataOut",
        "GoogleCloudContentwarehouseV1MapTypeOptionsIn": "_contentwarehouse_4220_GoogleCloudContentwarehouseV1MapTypeOptionsIn",
        "GoogleCloudContentwarehouseV1MapTypeOptionsOut": "_contentwarehouse_4221_GoogleCloudContentwarehouseV1MapTypeOptionsOut",
        "AssistantApiSettingsAppCapabilitiesIn": "_contentwarehouse_4222_AssistantApiSettingsAppCapabilitiesIn",
        "AssistantApiSettingsAppCapabilitiesOut": "_contentwarehouse_4223_AssistantApiSettingsAppCapabilitiesOut",
        "GoodocSemanticLabelSnippetFilterIn": "_contentwarehouse_4224_GoodocSemanticLabelSnippetFilterIn",
        "GoodocSemanticLabelSnippetFilterOut": "_contentwarehouse_4225_GoodocSemanticLabelSnippetFilterOut",
        "OcrPhotoCurveIn": "_contentwarehouse_4226_OcrPhotoCurveIn",
        "OcrPhotoCurveOut": "_contentwarehouse_4227_OcrPhotoCurveOut",
        "PerDocDataIn": "_contentwarehouse_4228_PerDocDataIn",
        "PerDocDataOut": "_contentwarehouse_4229_PerDocDataOut",
        "AssistantDevicesPlatformProtoOptionValueSpecIn": "_contentwarehouse_4230_AssistantDevicesPlatformProtoOptionValueSpecIn",
        "AssistantDevicesPlatformProtoOptionValueSpecOut": "_contentwarehouse_4231_AssistantDevicesPlatformProtoOptionValueSpecOut",
        "GeostoreUnlimitedSpeedProtoIn": "_contentwarehouse_4232_GeostoreUnlimitedSpeedProtoIn",
        "GeostoreUnlimitedSpeedProtoOut": "_contentwarehouse_4233_GeostoreUnlimitedSpeedProtoOut",
        "RepositoryAnnotationsGeoTopicIn": "_contentwarehouse_4234_RepositoryAnnotationsGeoTopicIn",
        "RepositoryAnnotationsGeoTopicOut": "_contentwarehouse_4235_RepositoryAnnotationsGeoTopicOut",
        "GeostoreRankSignalProtoIn": "_contentwarehouse_4236_GeostoreRankSignalProtoIn",
        "GeostoreRankSignalProtoOut": "_contentwarehouse_4237_GeostoreRankSignalProtoOut",
        "IndexingEmbeddedContentRenderRequestConfigConfigParamsIn": "_contentwarehouse_4238_IndexingEmbeddedContentRenderRequestConfigConfigParamsIn",
        "IndexingEmbeddedContentRenderRequestConfigConfigParamsOut": "_contentwarehouse_4239_IndexingEmbeddedContentRenderRequestConfigConfigParamsOut",
        "VideoContentSearchShoppingOpinionsAnchorFeaturesIn": "_contentwarehouse_4240_VideoContentSearchShoppingOpinionsAnchorFeaturesIn",
        "VideoContentSearchShoppingOpinionsAnchorFeaturesOut": "_contentwarehouse_4241_VideoContentSearchShoppingOpinionsAnchorFeaturesOut",
        "NlpSemanticParsingModelsMediaPaidOfferDetailIn": "_contentwarehouse_4242_NlpSemanticParsingModelsMediaPaidOfferDetailIn",
        "NlpSemanticParsingModelsMediaPaidOfferDetailOut": "_contentwarehouse_4243_NlpSemanticParsingModelsMediaPaidOfferDetailOut",
        "ResearchScamNearestNeighborsIn": "_contentwarehouse_4244_ResearchScamNearestNeighborsIn",
        "ResearchScamNearestNeighborsOut": "_contentwarehouse_4245_ResearchScamNearestNeighborsOut",
        "AssistantDevicesPlatformProtoUnderstandingConfigIn": "_contentwarehouse_4246_AssistantDevicesPlatformProtoUnderstandingConfigIn",
        "AssistantDevicesPlatformProtoUnderstandingConfigOut": "_contentwarehouse_4247_AssistantDevicesPlatformProtoUnderstandingConfigOut",
        "YoutubeDiscoveryLegosLegosEntityIn": "_contentwarehouse_4248_YoutubeDiscoveryLegosLegosEntityIn",
        "YoutubeDiscoveryLegosLegosEntityOut": "_contentwarehouse_4249_YoutubeDiscoveryLegosLegosEntityOut",
        "YoutubeDistillerBlarneyStoneScoresIn": "_contentwarehouse_4250_YoutubeDistillerBlarneyStoneScoresIn",
        "YoutubeDistillerBlarneyStoneScoresOut": "_contentwarehouse_4251_YoutubeDistillerBlarneyStoneScoresOut",
        "NlpSemanticParsingModelsShoppingAssistantBrandPhraseIn": "_contentwarehouse_4252_NlpSemanticParsingModelsShoppingAssistantBrandPhraseIn",
        "NlpSemanticParsingModelsShoppingAssistantBrandPhraseOut": "_contentwarehouse_4253_NlpSemanticParsingModelsShoppingAssistantBrandPhraseOut",
        "RepositoryWebrefCompactFlatPropertyValueIn": "_contentwarehouse_4254_RepositoryWebrefCompactFlatPropertyValueIn",
        "RepositoryWebrefCompactFlatPropertyValueOut": "_contentwarehouse_4255_RepositoryWebrefCompactFlatPropertyValueOut",
        "VideoContentSearchCaptionEntityAnchorSetFeaturesIn": "_contentwarehouse_4256_VideoContentSearchCaptionEntityAnchorSetFeaturesIn",
        "VideoContentSearchCaptionEntityAnchorSetFeaturesOut": "_contentwarehouse_4257_VideoContentSearchCaptionEntityAnchorSetFeaturesOut",
        "PhotosVisionObjectrecQuantizedFeatureVectorIn": "_contentwarehouse_4258_PhotosVisionObjectrecQuantizedFeatureVectorIn",
        "PhotosVisionObjectrecQuantizedFeatureVectorOut": "_contentwarehouse_4259_PhotosVisionObjectrecQuantizedFeatureVectorOut",
        "AssistantGroundingRankerPodcastGroundingProviderFeaturesIn": "_contentwarehouse_4260_AssistantGroundingRankerPodcastGroundingProviderFeaturesIn",
        "AssistantGroundingRankerPodcastGroundingProviderFeaturesOut": "_contentwarehouse_4261_AssistantGroundingRankerPodcastGroundingProviderFeaturesOut",
        "AssistantApiAppCapabilitiesIn": "_contentwarehouse_4262_AssistantApiAppCapabilitiesIn",
        "AssistantApiAppCapabilitiesOut": "_contentwarehouse_4263_AssistantApiAppCapabilitiesOut",
        "RichsnippetsPageMapIn": "_contentwarehouse_4264_RichsnippetsPageMapIn",
        "RichsnippetsPageMapOut": "_contentwarehouse_4265_RichsnippetsPageMapOut",
        "SdrPageAnchorsSitelinkWrapperIn": "_contentwarehouse_4266_SdrPageAnchorsSitelinkWrapperIn",
        "SdrPageAnchorsSitelinkWrapperOut": "_contentwarehouse_4267_SdrPageAnchorsSitelinkWrapperOut",
        "AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsIn": "_contentwarehouse_4268_AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsIn",
        "AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsOut": "_contentwarehouse_4269_AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsOut",
        "CountryProvinceGeotokenIn": "_contentwarehouse_4270_CountryProvinceGeotokenIn",
        "CountryProvinceGeotokenOut": "_contentwarehouse_4271_CountryProvinceGeotokenOut",
        "VideoContentSearchVideoAnchorScoreInfoLabelTransformationIn": "_contentwarehouse_4272_VideoContentSearchVideoAnchorScoreInfoLabelTransformationIn",
        "VideoContentSearchVideoAnchorScoreInfoLabelTransformationOut": "_contentwarehouse_4273_VideoContentSearchVideoAnchorScoreInfoLabelTransformationOut",
        "AttentionalEntitiesMentionPropertiesIn": "_contentwarehouse_4274_AttentionalEntitiesMentionPropertiesIn",
        "AttentionalEntitiesMentionPropertiesOut": "_contentwarehouse_4275_AttentionalEntitiesMentionPropertiesOut",
        "VideoContentSearchVideoAnchorScoreInfoIn": "_contentwarehouse_4276_VideoContentSearchVideoAnchorScoreInfoIn",
        "VideoContentSearchVideoAnchorScoreInfoOut": "_contentwarehouse_4277_VideoContentSearchVideoAnchorScoreInfoOut",
        "ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoIn": "_contentwarehouse_4278_ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoIn",
        "ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoOut": "_contentwarehouse_4279_ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoOut",
        "NlpSemanticParsingDatetimeRelativeDateTimeIn": "_contentwarehouse_4280_NlpSemanticParsingDatetimeRelativeDateTimeIn",
        "NlpSemanticParsingDatetimeRelativeDateTimeOut": "_contentwarehouse_4281_NlpSemanticParsingDatetimeRelativeDateTimeOut",
        "PersonalizationMapsAliasIconIn": "_contentwarehouse_4282_PersonalizationMapsAliasIconIn",
        "PersonalizationMapsAliasIconOut": "_contentwarehouse_4283_PersonalizationMapsAliasIconOut",
        "GeostoreTransitLineVariantProtoIn": "_contentwarehouse_4284_GeostoreTransitLineVariantProtoIn",
        "GeostoreTransitLineVariantProtoOut": "_contentwarehouse_4285_GeostoreTransitLineVariantProtoOut",
        "ImageUnderstandingIndexingImageRegionIn": "_contentwarehouse_4286_ImageUnderstandingIndexingImageRegionIn",
        "ImageUnderstandingIndexingImageRegionOut": "_contentwarehouse_4287_ImageUnderstandingIndexingImageRegionOut",
        "WeboftrustLiveResultProviderDocAttachmentIn": "_contentwarehouse_4288_WeboftrustLiveResultProviderDocAttachmentIn",
        "WeboftrustLiveResultProviderDocAttachmentOut": "_contentwarehouse_4289_WeboftrustLiveResultProviderDocAttachmentOut",
        "NlpSciencelitRetrievalSearchResultSetDebugInfoIn": "_contentwarehouse_4290_NlpSciencelitRetrievalSearchResultSetDebugInfoIn",
        "NlpSciencelitRetrievalSearchResultSetDebugInfoOut": "_contentwarehouse_4291_NlpSciencelitRetrievalSearchResultSetDebugInfoOut",
        "IndexingMobileVoltVoltPerDocDataIn": "_contentwarehouse_4292_IndexingMobileVoltVoltPerDocDataIn",
        "IndexingMobileVoltVoltPerDocDataOut": "_contentwarehouse_4293_IndexingMobileVoltVoltPerDocDataOut",
        "AppsPeopleOzExternalMergedpeopleapiInteractionSettingsIn": "_contentwarehouse_4294_AppsPeopleOzExternalMergedpeopleapiInteractionSettingsIn",
        "AppsPeopleOzExternalMergedpeopleapiInteractionSettingsOut": "_contentwarehouse_4295_AppsPeopleOzExternalMergedpeopleapiInteractionSettingsOut",
        "GoogleCloudContentwarehouseV1ActionExecutorOutputIn": "_contentwarehouse_4296_GoogleCloudContentwarehouseV1ActionExecutorOutputIn",
        "GoogleCloudContentwarehouseV1ActionExecutorOutputOut": "_contentwarehouse_4297_GoogleCloudContentwarehouseV1ActionExecutorOutputOut",
        "DrishtiQuantizedDenseFeatureDataIn": "_contentwarehouse_4298_DrishtiQuantizedDenseFeatureDataIn",
        "DrishtiQuantizedDenseFeatureDataOut": "_contentwarehouse_4299_DrishtiQuantizedDenseFeatureDataOut",
        "AssistantApiCoreTypesHomeAppInfoIn": "_contentwarehouse_4300_AssistantApiCoreTypesHomeAppInfoIn",
        "AssistantApiCoreTypesHomeAppInfoOut": "_contentwarehouse_4301_AssistantApiCoreTypesHomeAppInfoOut",
        "GoodocDocumentPageBlockIn": "_contentwarehouse_4302_GoodocDocumentPageBlockIn",
        "GoodocDocumentPageBlockOut": "_contentwarehouse_4303_GoodocDocumentPageBlockOut",
        "KnowledgeAnswersSensitivityStoragePolicyIn": "_contentwarehouse_4304_KnowledgeAnswersSensitivityStoragePolicyIn",
        "KnowledgeAnswersSensitivityStoragePolicyOut": "_contentwarehouse_4305_KnowledgeAnswersSensitivityStoragePolicyOut",
        "RepositoryWebrefLexicalRangeIn": "_contentwarehouse_4306_RepositoryWebrefLexicalRangeIn",
        "RepositoryWebrefLexicalRangeOut": "_contentwarehouse_4307_RepositoryWebrefLexicalRangeOut",
        "SnapshotSnapshotDocumentIn": "_contentwarehouse_4308_SnapshotSnapshotDocumentIn",
        "SnapshotSnapshotDocumentOut": "_contentwarehouse_4309_SnapshotSnapshotDocumentOut",
        "EventIdMessageIn": "_contentwarehouse_4310_EventIdMessageIn",
        "EventIdMessageOut": "_contentwarehouse_4311_EventIdMessageOut",
        "AssistantApiSettingsCommunicationsFilterIn": "_contentwarehouse_4312_AssistantApiSettingsCommunicationsFilterIn",
        "AssistantApiSettingsCommunicationsFilterOut": "_contentwarehouse_4313_AssistantApiSettingsCommunicationsFilterOut",
        "FatcatCompactBinaryClassificationIn": "_contentwarehouse_4314_FatcatCompactBinaryClassificationIn",
        "FatcatCompactBinaryClassificationOut": "_contentwarehouse_4315_FatcatCompactBinaryClassificationOut",
        "ShoppingWebentityShoppingAnnotationSoriVersionIdIn": "_contentwarehouse_4316_ShoppingWebentityShoppingAnnotationSoriVersionIdIn",
        "ShoppingWebentityShoppingAnnotationSoriVersionIdOut": "_contentwarehouse_4317_ShoppingWebentityShoppingAnnotationSoriVersionIdOut",
        "IndexingDocjoinerServingTimeClusterIdIn": "_contentwarehouse_4318_IndexingDocjoinerServingTimeClusterIdIn",
        "IndexingDocjoinerServingTimeClusterIdOut": "_contentwarehouse_4319_IndexingDocjoinerServingTimeClusterIdOut",
        "AppsPeopleOzExternalMergedpeopleapiSocialConnectionIn": "_contentwarehouse_4320_AppsPeopleOzExternalMergedpeopleapiSocialConnectionIn",
        "AppsPeopleOzExternalMergedpeopleapiSocialConnectionOut": "_contentwarehouse_4321_AppsPeopleOzExternalMergedpeopleapiSocialConnectionOut",
        "NlpSemanticParsingModelsShoppingAssistantProductPhraseIn": "_contentwarehouse_4322_NlpSemanticParsingModelsShoppingAssistantProductPhraseIn",
        "NlpSemanticParsingModelsShoppingAssistantProductPhraseOut": "_contentwarehouse_4323_NlpSemanticParsingModelsShoppingAssistantProductPhraseOut",
        "KnowledgeAnswersStateOfAffairsTypeIn": "_contentwarehouse_4324_KnowledgeAnswersStateOfAffairsTypeIn",
        "KnowledgeAnswersStateOfAffairsTypeOut": "_contentwarehouse_4325_KnowledgeAnswersStateOfAffairsTypeOut",
        "GoogleCloudContentwarehouseV1ActionIn": "_contentwarehouse_4326_GoogleCloudContentwarehouseV1ActionIn",
        "GoogleCloudContentwarehouseV1ActionOut": "_contentwarehouse_4327_GoogleCloudContentwarehouseV1ActionOut",
        "MediaIndexEntityFieldIn": "_contentwarehouse_4328_MediaIndexEntityFieldIn",
        "MediaIndexEntityFieldOut": "_contentwarehouse_4329_MediaIndexEntityFieldOut",
        "GDocumentBaseOriginalContentIn": "_contentwarehouse_4330_GDocumentBaseOriginalContentIn",
        "GDocumentBaseOriginalContentOut": "_contentwarehouse_4331_GDocumentBaseOriginalContentOut",
        "GoogleCloudContentwarehouseV1TextArrayIn": "_contentwarehouse_4332_GoogleCloudContentwarehouseV1TextArrayIn",
        "GoogleCloudContentwarehouseV1TextArrayOut": "_contentwarehouse_4333_GoogleCloudContentwarehouseV1TextArrayOut",
        "GeostoreRawMetadataProtoIn": "_contentwarehouse_4334_GeostoreRawMetadataProtoIn",
        "GeostoreRawMetadataProtoOut": "_contentwarehouse_4335_GeostoreRawMetadataProtoOut",
        "QualityPreviewSnippetQueryFeaturesIn": "_contentwarehouse_4336_QualityPreviewSnippetQueryFeaturesIn",
        "QualityPreviewSnippetQueryFeaturesOut": "_contentwarehouse_4337_QualityPreviewSnippetQueryFeaturesOut",
        "GeostoreDataSourceProtoIn": "_contentwarehouse_4338_GeostoreDataSourceProtoIn",
        "GeostoreDataSourceProtoOut": "_contentwarehouse_4339_GeostoreDataSourceProtoOut",
        "GoodocSemanticLabelContentLinkIn": "_contentwarehouse_4340_GoodocSemanticLabelContentLinkIn",
        "GoodocSemanticLabelContentLinkOut": "_contentwarehouse_4341_GoodocSemanticLabelContentLinkOut",
        "AssistantLogsCommunicationFuzzyNgramMatchLogIn": "_contentwarehouse_4342_AssistantLogsCommunicationFuzzyNgramMatchLogIn",
        "AssistantLogsCommunicationFuzzyNgramMatchLogOut": "_contentwarehouse_4343_AssistantLogsCommunicationFuzzyNgramMatchLogOut",
        "RepositoryWebrefDetailedMentionScoresIn": "_contentwarehouse_4344_RepositoryWebrefDetailedMentionScoresIn",
        "RepositoryWebrefDetailedMentionScoresOut": "_contentwarehouse_4345_RepositoryWebrefDetailedMentionScoresOut",
        "NlpSemanticParsingModelsShoppingAssistantProductExpressionIn": "_contentwarehouse_4346_NlpSemanticParsingModelsShoppingAssistantProductExpressionIn",
        "NlpSemanticParsingModelsShoppingAssistantProductExpressionOut": "_contentwarehouse_4347_NlpSemanticParsingModelsShoppingAssistantProductExpressionOut",
        "ImageRepositoryShoppingProductInformationEntityIn": "_contentwarehouse_4348_ImageRepositoryShoppingProductInformationEntityIn",
        "ImageRepositoryShoppingProductInformationEntityOut": "_contentwarehouse_4349_ImageRepositoryShoppingProductInformationEntityOut",
        "VideoThumbnailsFrameFileIn": "_contentwarehouse_4350_VideoThumbnailsFrameFileIn",
        "VideoThumbnailsFrameFileOut": "_contentwarehouse_4351_VideoThumbnailsFrameFileOut",
        "QualityNsrPQDataSubchunkDataIn": "_contentwarehouse_4352_QualityNsrPQDataSubchunkDataIn",
        "QualityNsrPQDataSubchunkDataOut": "_contentwarehouse_4353_QualityNsrPQDataSubchunkDataOut",
        "AbuseiamHashIn": "_contentwarehouse_4354_AbuseiamHashIn",
        "AbuseiamHashOut": "_contentwarehouse_4355_AbuseiamHashOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclIn": "_contentwarehouse_4356_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclOut": "_contentwarehouse_4357_AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclOut",
        "GoodocSemanticLabelEditCorrectionCandidateIn": "_contentwarehouse_4358_GoodocSemanticLabelEditCorrectionCandidateIn",
        "GoodocSemanticLabelEditCorrectionCandidateOut": "_contentwarehouse_4359_GoodocSemanticLabelEditCorrectionCandidateOut",
        "FreebaseTopicIn": "_contentwarehouse_4360_FreebaseTopicIn",
        "FreebaseTopicOut": "_contentwarehouse_4361_FreebaseTopicOut",
        "GeostoreFieldWithRightsProtoIn": "_contentwarehouse_4362_GeostoreFieldWithRightsProtoIn",
        "GeostoreFieldWithRightsProtoOut": "_contentwarehouse_4363_GeostoreFieldWithRightsProtoOut",
        "NlpSemanticParsingLocalScalableAttributeIn": "_contentwarehouse_4364_NlpSemanticParsingLocalScalableAttributeIn",
        "NlpSemanticParsingLocalScalableAttributeOut": "_contentwarehouse_4365_NlpSemanticParsingLocalScalableAttributeOut",
        "VideoContentSearchOnScreenTextFeatureIn": "_contentwarehouse_4366_VideoContentSearchOnScreenTextFeatureIn",
        "VideoContentSearchOnScreenTextFeatureOut": "_contentwarehouse_4367_VideoContentSearchOnScreenTextFeatureOut",
        "GoodocWordIn": "_contentwarehouse_4368_GoodocWordIn",
        "GoodocWordOut": "_contentwarehouse_4369_GoodocWordOut",
        "ImageRepositoryFrameIdentifierThumbnailVariantIn": "_contentwarehouse_4370_ImageRepositoryFrameIdentifierThumbnailVariantIn",
        "ImageRepositoryFrameIdentifierThumbnailVariantOut": "_contentwarehouse_4371_ImageRepositoryFrameIdentifierThumbnailVariantOut",
        "NlpSemanticParsingModelsRecurrenceRecurrenceEndIn": "_contentwarehouse_4372_NlpSemanticParsingModelsRecurrenceRecurrenceEndIn",
        "NlpSemanticParsingModelsRecurrenceRecurrenceEndOut": "_contentwarehouse_4373_NlpSemanticParsingModelsRecurrenceRecurrenceEndOut",
        "CompositeDocAlternateNameIn": "_contentwarehouse_4374_CompositeDocAlternateNameIn",
        "CompositeDocAlternateNameOut": "_contentwarehouse_4375_CompositeDocAlternateNameOut",
        "AssistantDevicesPlatformProtoMediaResumeCapabilityIn": "_contentwarehouse_4376_AssistantDevicesPlatformProtoMediaResumeCapabilityIn",
        "AssistantDevicesPlatformProtoMediaResumeCapabilityOut": "_contentwarehouse_4377_AssistantDevicesPlatformProtoMediaResumeCapabilityOut",
        "GoogleCloudContentwarehouseV1SynonymSetSynonymIn": "_contentwarehouse_4378_GoogleCloudContentwarehouseV1SynonymSetSynonymIn",
        "GoogleCloudContentwarehouseV1SynonymSetSynonymOut": "_contentwarehouse_4379_GoogleCloudContentwarehouseV1SynonymSetSynonymOut",
        "GeostoreTimeBasedRateProtoIn": "_contentwarehouse_4380_GeostoreTimeBasedRateProtoIn",
        "GeostoreTimeBasedRateProtoOut": "_contentwarehouse_4381_GeostoreTimeBasedRateProtoOut",
        "NlxDataSchemaScaleSetIn": "_contentwarehouse_4382_NlxDataSchemaScaleSetIn",
        "NlxDataSchemaScaleSetOut": "_contentwarehouse_4383_NlxDataSchemaScaleSetOut",
        "OceanDocTagBookSpecificIn": "_contentwarehouse_4384_OceanDocTagBookSpecificIn",
        "OceanDocTagBookSpecificOut": "_contentwarehouse_4385_OceanDocTagBookSpecificOut",
        "GoogleAssistantAccessoryV1DeviceConfigIn": "_contentwarehouse_4386_GoogleAssistantAccessoryV1DeviceConfigIn",
        "GoogleAssistantAccessoryV1DeviceConfigOut": "_contentwarehouse_4387_GoogleAssistantAccessoryV1DeviceConfigOut",
        "GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceIn": "_contentwarehouse_4388_GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceIn",
        "GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceOut": "_contentwarehouse_4389_GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceOut",
        "LensDiscoveryStyleStyleImageTypeSignalsIn": "_contentwarehouse_4390_LensDiscoveryStyleStyleImageTypeSignalsIn",
        "LensDiscoveryStyleStyleImageTypeSignalsOut": "_contentwarehouse_4391_LensDiscoveryStyleStyleImageTypeSignalsOut",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayIn": "_contentwarehouse_4392_AppsPeopleOzExternalMergedpeopleapiBirthdayIn",
        "AppsPeopleOzExternalMergedpeopleapiBirthdayOut": "_contentwarehouse_4393_AppsPeopleOzExternalMergedpeopleapiBirthdayOut",
        "CloudAiPlatformTenantresourceTenantProjectConfigIn": "_contentwarehouse_4394_CloudAiPlatformTenantresourceTenantProjectConfigIn",
        "CloudAiPlatformTenantresourceTenantProjectConfigOut": "_contentwarehouse_4395_CloudAiPlatformTenantresourceTenantProjectConfigOut",
        "AssistantLogsDeviceInfoLogIn": "_contentwarehouse_4396_AssistantLogsDeviceInfoLogIn",
        "AssistantLogsDeviceInfoLogOut": "_contentwarehouse_4397_AssistantLogsDeviceInfoLogOut",
        "AbuseiamVerdictIn": "_contentwarehouse_4398_AbuseiamVerdictIn",
        "AbuseiamVerdictOut": "_contentwarehouse_4399_AbuseiamVerdictOut",
        "CloudAiPlatformTenantresourceCloudSqlInstanceConfigIn": "_contentwarehouse_4400_CloudAiPlatformTenantresourceCloudSqlInstanceConfigIn",
        "CloudAiPlatformTenantresourceCloudSqlInstanceConfigOut": "_contentwarehouse_4401_CloudAiPlatformTenantresourceCloudSqlInstanceConfigOut",
        "KnowledgeAnswersDialogReferentialResolutionIn": "_contentwarehouse_4402_KnowledgeAnswersDialogReferentialResolutionIn",
        "KnowledgeAnswersDialogReferentialResolutionOut": "_contentwarehouse_4403_KnowledgeAnswersDialogReferentialResolutionOut",
        "ResearchScamOnlineSearchLatencyStatsIn": "_contentwarehouse_4404_ResearchScamOnlineSearchLatencyStatsIn",
        "ResearchScamOnlineSearchLatencyStatsOut": "_contentwarehouse_4405_ResearchScamOnlineSearchLatencyStatsOut",
        "RepositoryWebrefWebrefOutlinkInfosIn": "_contentwarehouse_4406_RepositoryWebrefWebrefOutlinkInfosIn",
        "RepositoryWebrefWebrefOutlinkInfosOut": "_contentwarehouse_4407_RepositoryWebrefWebrefOutlinkInfosOut",
        "VideoContentSearchSpanDolphinFeaturesIn": "_contentwarehouse_4408_VideoContentSearchSpanDolphinFeaturesIn",
        "VideoContentSearchSpanDolphinFeaturesOut": "_contentwarehouse_4409_VideoContentSearchSpanDolphinFeaturesOut",
        "KnowledgeAnswersOpaqueAudioTypeIn": "_contentwarehouse_4410_KnowledgeAnswersOpaqueAudioTypeIn",
        "KnowledgeAnswersOpaqueAudioTypeOut": "_contentwarehouse_4411_KnowledgeAnswersOpaqueAudioTypeOut",
        "LegalDateIn": "_contentwarehouse_4412_LegalDateIn",
        "LegalDateOut": "_contentwarehouse_4413_LegalDateOut",
        "QualityActionsReminderRecurrenceInfoIn": "_contentwarehouse_4414_QualityActionsReminderRecurrenceInfoIn",
        "QualityActionsReminderRecurrenceInfoOut": "_contentwarehouse_4415_QualityActionsReminderRecurrenceInfoOut",
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineIn": "_contentwarehouse_4416_AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineIn",
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineOut": "_contentwarehouse_4417_AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineOut",
        "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataIn": "_contentwarehouse_4418_PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataIn",
        "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataOut": "_contentwarehouse_4419_PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataOut",
        "SocialGraphApiProtoPartialNameOptionsIn": "_contentwarehouse_4420_SocialGraphApiProtoPartialNameOptionsIn",
        "SocialGraphApiProtoPartialNameOptionsOut": "_contentwarehouse_4421_SocialGraphApiProtoPartialNameOptionsOut",
        "AssistantDevicesPlatformProtoExecutionConfigIn": "_contentwarehouse_4422_AssistantDevicesPlatformProtoExecutionConfigIn",
        "AssistantDevicesPlatformProtoExecutionConfigOut": "_contentwarehouse_4423_AssistantDevicesPlatformProtoExecutionConfigOut",
        "CommerceDatastoreDeepTagIn": "_contentwarehouse_4424_CommerceDatastoreDeepTagIn",
        "CommerceDatastoreDeepTagOut": "_contentwarehouse_4425_CommerceDatastoreDeepTagOut",
        "VideoMediaOverviewAudioOverviewIn": "_contentwarehouse_4426_VideoMediaOverviewAudioOverviewIn",
        "VideoMediaOverviewAudioOverviewOut": "_contentwarehouse_4427_VideoMediaOverviewAudioOverviewOut",
        "AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoIn": "_contentwarehouse_4428_AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoOut": "_contentwarehouse_4429_AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoOut",
        "VideoContentSearchVisualFeaturesIn": "_contentwarehouse_4430_VideoContentSearchVisualFeaturesIn",
        "VideoContentSearchVisualFeaturesOut": "_contentwarehouse_4431_VideoContentSearchVisualFeaturesOut",
        "GoogleCloudDocumentaiV1DocumentPageTokenIn": "_contentwarehouse_4432_GoogleCloudDocumentaiV1DocumentPageTokenIn",
        "GoogleCloudDocumentaiV1DocumentPageTokenOut": "_contentwarehouse_4433_GoogleCloudDocumentaiV1DocumentPageTokenOut",
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateIn": "_contentwarehouse_4434_AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateIn",
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateOut": "_contentwarehouse_4435_AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateOut",
        "SecurityCredentialsSquareProtoIn": "_contentwarehouse_4436_SecurityCredentialsSquareProtoIn",
        "SecurityCredentialsSquareProtoOut": "_contentwarehouse_4437_SecurityCredentialsSquareProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsIn": "_contentwarehouse_4438_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsOut": "_contentwarehouse_4439_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsOut",
        "CompositeDocRobotsInfoListIn": "_contentwarehouse_4440_CompositeDocRobotsInfoListIn",
        "CompositeDocRobotsInfoListOut": "_contentwarehouse_4441_CompositeDocRobotsInfoListOut",
        "KnowledgeAnswersOpaqueShoppingOfferTypeIn": "_contentwarehouse_4442_KnowledgeAnswersOpaqueShoppingOfferTypeIn",
        "KnowledgeAnswersOpaqueShoppingOfferTypeOut": "_contentwarehouse_4443_KnowledgeAnswersOpaqueShoppingOfferTypeOut",
        "KnowledgeAnswersIntentQueryParsingSignalsIn": "_contentwarehouse_4444_KnowledgeAnswersIntentQueryParsingSignalsIn",
        "KnowledgeAnswersIntentQueryParsingSignalsOut": "_contentwarehouse_4445_KnowledgeAnswersIntentQueryParsingSignalsOut",
        "HtmlrenderWebkitHeadlessProtoRectangleIn": "_contentwarehouse_4446_HtmlrenderWebkitHeadlessProtoRectangleIn",
        "HtmlrenderWebkitHeadlessProtoRectangleOut": "_contentwarehouse_4447_HtmlrenderWebkitHeadlessProtoRectangleOut",
        "AbuseiamAgeRestrictionIn": "_contentwarehouse_4448_AbuseiamAgeRestrictionIn",
        "AbuseiamAgeRestrictionOut": "_contentwarehouse_4449_AbuseiamAgeRestrictionOut",
        "NlpSemanticParsingProtoActionsOnGoogleAogSlotIn": "_contentwarehouse_4450_NlpSemanticParsingProtoActionsOnGoogleAogSlotIn",
        "NlpSemanticParsingProtoActionsOnGoogleAogSlotOut": "_contentwarehouse_4451_NlpSemanticParsingProtoActionsOnGoogleAogSlotOut",
        "IndexingDupsLocalizedLocalizedClusterClusterIn": "_contentwarehouse_4452_IndexingDupsLocalizedLocalizedClusterClusterIn",
        "IndexingDupsLocalizedLocalizedClusterClusterOut": "_contentwarehouse_4453_IndexingDupsLocalizedLocalizedClusterClusterOut",
        "CompositeDocIncludedContentIn": "_contentwarehouse_4454_CompositeDocIncludedContentIn",
        "CompositeDocIncludedContentOut": "_contentwarehouse_4455_CompositeDocIncludedContentOut",
        "SocialGraphApiProtoHostAppInfoIn": "_contentwarehouse_4456_SocialGraphApiProtoHostAppInfoIn",
        "SocialGraphApiProtoHostAppInfoOut": "_contentwarehouse_4457_SocialGraphApiProtoHostAppInfoOut",
        "NlpSemanticParsingQRefAnnotationIn": "_contentwarehouse_4458_NlpSemanticParsingQRefAnnotationIn",
        "NlpSemanticParsingQRefAnnotationOut": "_contentwarehouse_4459_NlpSemanticParsingQRefAnnotationOut",
        "HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn": "_contentwarehouse_4460_HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn",
        "HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut": "_contentwarehouse_4461_HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut",
        "ListSnippetResponseIn": "_contentwarehouse_4462_ListSnippetResponseIn",
        "ListSnippetResponseOut": "_contentwarehouse_4463_ListSnippetResponseOut",
        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldIn": "_contentwarehouse_4464_AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldIn",
        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldOut": "_contentwarehouse_4465_AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldOut",
        "HtmlrenderWebkitHeadlessProtoRenderStatsCounterIn": "_contentwarehouse_4466_HtmlrenderWebkitHeadlessProtoRenderStatsCounterIn",
        "HtmlrenderWebkitHeadlessProtoRenderStatsCounterOut": "_contentwarehouse_4467_HtmlrenderWebkitHeadlessProtoRenderStatsCounterOut",
        "AssistantApiSettingsMasqueradeModeIn": "_contentwarehouse_4468_AssistantApiSettingsMasqueradeModeIn",
        "AssistantApiSettingsMasqueradeModeOut": "_contentwarehouse_4469_AssistantApiSettingsMasqueradeModeOut",
        "GoogleCloudContentwarehouseV1LockDocumentRequestIn": "_contentwarehouse_4470_GoogleCloudContentwarehouseV1LockDocumentRequestIn",
        "GoogleCloudContentwarehouseV1LockDocumentRequestOut": "_contentwarehouse_4471_GoogleCloudContentwarehouseV1LockDocumentRequestOut",
        "GeostoreRoadMonitorProtoIn": "_contentwarehouse_4472_GeostoreRoadMonitorProtoIn",
        "GeostoreRoadMonitorProtoOut": "_contentwarehouse_4473_GeostoreRoadMonitorProtoOut",
        "GeostoreTextAffixProtoIn": "_contentwarehouse_4474_GeostoreTextAffixProtoIn",
        "GeostoreTextAffixProtoOut": "_contentwarehouse_4475_GeostoreTextAffixProtoOut",
        "QualityActionsCustomizedNotificationIn": "_contentwarehouse_4476_QualityActionsCustomizedNotificationIn",
        "QualityActionsCustomizedNotificationOut": "_contentwarehouse_4477_QualityActionsCustomizedNotificationOut",
        "GoogleCloudDocumentaiV1DocumentRevisionIn": "_contentwarehouse_4478_GoogleCloudDocumentaiV1DocumentRevisionIn",
        "GoogleCloudDocumentaiV1DocumentRevisionOut": "_contentwarehouse_4479_GoogleCloudDocumentaiV1DocumentRevisionOut",
        "KnowledgeAnswersAttributeTypeIn": "_contentwarehouse_4480_KnowledgeAnswersAttributeTypeIn",
        "KnowledgeAnswersAttributeTypeOut": "_contentwarehouse_4481_KnowledgeAnswersAttributeTypeOut",
        "ImageRepositoryContentBasedVideoMetadataIn": "_contentwarehouse_4482_ImageRepositoryContentBasedVideoMetadataIn",
        "ImageRepositoryContentBasedVideoMetadataOut": "_contentwarehouse_4483_ImageRepositoryContentBasedVideoMetadataOut",
        "SocialGraphApiProtoSyncInfoIn": "_contentwarehouse_4484_SocialGraphApiProtoSyncInfoIn",
        "SocialGraphApiProtoSyncInfoOut": "_contentwarehouse_4485_SocialGraphApiProtoSyncInfoOut",
        "RepositoryWebrefEnricherDebugDataIn": "_contentwarehouse_4486_RepositoryWebrefEnricherDebugDataIn",
        "RepositoryWebrefEnricherDebugDataOut": "_contentwarehouse_4487_RepositoryWebrefEnricherDebugDataOut",
        "ClassifierPornSiteViolenceStatsIn": "_contentwarehouse_4488_ClassifierPornSiteViolenceStatsIn",
        "ClassifierPornSiteViolenceStatsOut": "_contentwarehouse_4489_ClassifierPornSiteViolenceStatsOut",
        "VideoTimedtextS4LangScoreIn": "_contentwarehouse_4490_VideoTimedtextS4LangScoreIn",
        "VideoTimedtextS4LangScoreOut": "_contentwarehouse_4491_VideoTimedtextS4LangScoreOut",
        "AssistantApiCoreTypesSurfaceTypeIn": "_contentwarehouse_4492_AssistantApiCoreTypesSurfaceTypeIn",
        "AssistantApiCoreTypesSurfaceTypeOut": "_contentwarehouse_4493_AssistantApiCoreTypesSurfaceTypeOut",
        "NlpSemanticParsingLocalCuisineConstraintIn": "_contentwarehouse_4494_NlpSemanticParsingLocalCuisineConstraintIn",
        "NlpSemanticParsingLocalCuisineConstraintOut": "_contentwarehouse_4495_NlpSemanticParsingLocalCuisineConstraintOut",
        "IndexingDocjoinerCDocBuildInfoIn": "_contentwarehouse_4496_IndexingDocjoinerCDocBuildInfoIn",
        "IndexingDocjoinerCDocBuildInfoOut": "_contentwarehouse_4497_IndexingDocjoinerCDocBuildInfoOut",
        "CopleySubreferenceMetadataIn": "_contentwarehouse_4498_CopleySubreferenceMetadataIn",
        "CopleySubreferenceMetadataOut": "_contentwarehouse_4499_CopleySubreferenceMetadataOut",
        "GeostorePriceListSectionProtoIn": "_contentwarehouse_4500_GeostorePriceListSectionProtoIn",
        "GeostorePriceListSectionProtoOut": "_contentwarehouse_4501_GeostorePriceListSectionProtoOut",
        "RepositoryWebrefGlobalNameInfoIn": "_contentwarehouse_4502_RepositoryWebrefGlobalNameInfoIn",
        "RepositoryWebrefGlobalNameInfoOut": "_contentwarehouse_4503_RepositoryWebrefGlobalNameInfoOut",
        "GoogleCloudContentwarehouseV1RuleIn": "_contentwarehouse_4504_GoogleCloudContentwarehouseV1RuleIn",
        "GoogleCloudContentwarehouseV1RuleOut": "_contentwarehouse_4505_GoogleCloudContentwarehouseV1RuleOut",
        "SocialGraphApiProtoNamePronunciationAudioMetadataIn": "_contentwarehouse_4506_SocialGraphApiProtoNamePronunciationAudioMetadataIn",
        "SocialGraphApiProtoNamePronunciationAudioMetadataOut": "_contentwarehouse_4507_SocialGraphApiProtoNamePronunciationAudioMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiRelationshipStatusIn": "_contentwarehouse_4508_AppsPeopleOzExternalMergedpeopleapiRelationshipStatusIn",
        "AppsPeopleOzExternalMergedpeopleapiRelationshipStatusOut": "_contentwarehouse_4509_AppsPeopleOzExternalMergedpeopleapiRelationshipStatusOut",
        "AssistantLogsMediaStreamLogIn": "_contentwarehouse_4510_AssistantLogsMediaStreamLogIn",
        "AssistantLogsMediaStreamLogOut": "_contentwarehouse_4511_AssistantLogsMediaStreamLogOut",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn": "_contentwarehouse_4512_AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn",
        "AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut": "_contentwarehouse_4513_AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut",
        "AbuseiamEvaluationIn": "_contentwarehouse_4514_AbuseiamEvaluationIn",
        "AbuseiamEvaluationOut": "_contentwarehouse_4515_AbuseiamEvaluationOut",
        "QualityNsrNsrDataMetadataIn": "_contentwarehouse_4516_QualityNsrNsrDataMetadataIn",
        "QualityNsrNsrDataMetadataOut": "_contentwarehouse_4517_QualityNsrNsrDataMetadataOut",
        "SocialGraphApiProtoYearlyRecurrenceIn": "_contentwarehouse_4518_SocialGraphApiProtoYearlyRecurrenceIn",
        "SocialGraphApiProtoYearlyRecurrenceOut": "_contentwarehouse_4519_SocialGraphApiProtoYearlyRecurrenceOut",
        "GeostoreAccessPointProtoIn": "_contentwarehouse_4520_GeostoreAccessPointProtoIn",
        "GeostoreAccessPointProtoOut": "_contentwarehouse_4521_GeostoreAccessPointProtoOut",
        "VideoVideoStreamInfoDataStreamIn": "_contentwarehouse_4522_VideoVideoStreamInfoDataStreamIn",
        "VideoVideoStreamInfoDataStreamOut": "_contentwarehouse_4523_VideoVideoStreamInfoDataStreamOut",
        "QualityNsrNsrDataClusterUpliftIn": "_contentwarehouse_4524_QualityNsrNsrDataClusterUpliftIn",
        "QualityNsrNsrDataClusterUpliftOut": "_contentwarehouse_4525_QualityNsrNsrDataClusterUpliftOut",
        "GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideIn": "_contentwarehouse_4526_GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideIn",
        "GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideOut": "_contentwarehouse_4527_GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideOut",
        "QualityPreviewChosenSnippetInfoIn": "_contentwarehouse_4528_QualityPreviewChosenSnippetInfoIn",
        "QualityPreviewChosenSnippetInfoOut": "_contentwarehouse_4529_QualityPreviewChosenSnippetInfoOut",
        "AssistantLogsCommunicationPersonMetadataLogIn": "_contentwarehouse_4530_AssistantLogsCommunicationPersonMetadataLogIn",
        "AssistantLogsCommunicationPersonMetadataLogOut": "_contentwarehouse_4531_AssistantLogsCommunicationPersonMetadataLogOut",
        "ClassifierPornQueryMultiLabelClassifierOutputIn": "_contentwarehouse_4532_ClassifierPornQueryMultiLabelClassifierOutputIn",
        "ClassifierPornQueryMultiLabelClassifierOutputOut": "_contentwarehouse_4533_ClassifierPornQueryMultiLabelClassifierOutputOut",
        "AssistantApiAppCapabilitiesDeltaIn": "_contentwarehouse_4534_AssistantApiAppCapabilitiesDeltaIn",
        "AssistantApiAppCapabilitiesDeltaOut": "_contentwarehouse_4535_AssistantApiAppCapabilitiesDeltaOut",
        "GoogleCloudContentwarehouseV1DocumentReferenceIn": "_contentwarehouse_4536_GoogleCloudContentwarehouseV1DocumentReferenceIn",
        "GoogleCloudContentwarehouseV1DocumentReferenceOut": "_contentwarehouse_4537_GoogleCloudContentwarehouseV1DocumentReferenceOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationIn": "_contentwarehouse_4538_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationOut": "_contentwarehouse_4539_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationOut",
        "GoodocSemanticLabelTableDetailsIn": "_contentwarehouse_4540_GoodocSemanticLabelTableDetailsIn",
        "GoodocSemanticLabelTableDetailsOut": "_contentwarehouse_4541_GoodocSemanticLabelTableDetailsOut",
        "VideoContentSearchInstructionTrainingDataAnchorFeaturesIn": "_contentwarehouse_4542_VideoContentSearchInstructionTrainingDataAnchorFeaturesIn",
        "VideoContentSearchInstructionTrainingDataAnchorFeaturesOut": "_contentwarehouse_4543_VideoContentSearchInstructionTrainingDataAnchorFeaturesOut",
        "YoutubeDistillerModelScoreIn": "_contentwarehouse_4544_YoutubeDistillerModelScoreIn",
        "YoutubeDistillerModelScoreOut": "_contentwarehouse_4545_YoutubeDistillerModelScoreOut",
        "ScienceCitationFundingIn": "_contentwarehouse_4546_ScienceCitationFundingIn",
        "ScienceCitationFundingOut": "_contentwarehouse_4547_ScienceCitationFundingOut",
        "HtmlrenderWebkitHeadlessProtoDOMTreeNodeIn": "_contentwarehouse_4548_HtmlrenderWebkitHeadlessProtoDOMTreeNodeIn",
        "HtmlrenderWebkitHeadlessProtoDOMTreeNodeOut": "_contentwarehouse_4549_HtmlrenderWebkitHeadlessProtoDOMTreeNodeOut",
        "AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsIn": "_contentwarehouse_4550_AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsIn",
        "AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsOut": "_contentwarehouse_4551_AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsOut",
        "VideoContentSearchCaptionLabelFeaturesIn": "_contentwarehouse_4552_VideoContentSearchCaptionLabelFeaturesIn",
        "VideoContentSearchCaptionLabelFeaturesOut": "_contentwarehouse_4553_VideoContentSearchCaptionLabelFeaturesOut",
        "AppsPeopleOzExternalMergedpeopleapiRosterMemberCountIn": "_contentwarehouse_4554_AppsPeopleOzExternalMergedpeopleapiRosterMemberCountIn",
        "AppsPeopleOzExternalMergedpeopleapiRosterMemberCountOut": "_contentwarehouse_4555_AppsPeopleOzExternalMergedpeopleapiRosterMemberCountOut",
        "NlpSemanticParsingModelsMediaMediaProviderInfoIn": "_contentwarehouse_4556_NlpSemanticParsingModelsMediaMediaProviderInfoIn",
        "NlpSemanticParsingModelsMediaMediaProviderInfoOut": "_contentwarehouse_4557_NlpSemanticParsingModelsMediaMediaProviderInfoOut",
        "AbuseiamAndRestrictionIn": "_contentwarehouse_4558_AbuseiamAndRestrictionIn",
        "AbuseiamAndRestrictionOut": "_contentwarehouse_4559_AbuseiamAndRestrictionOut",
        "RepositoryWebrefRefconQueryStatsIn": "_contentwarehouse_4560_RepositoryWebrefRefconQueryStatsIn",
        "RepositoryWebrefRefconQueryStatsOut": "_contentwarehouse_4561_RepositoryWebrefRefconQueryStatsOut",
        "VideoContentSearchBleurtFeaturesIn": "_contentwarehouse_4562_VideoContentSearchBleurtFeaturesIn",
        "VideoContentSearchBleurtFeaturesOut": "_contentwarehouse_4563_VideoContentSearchBleurtFeaturesOut",
        "RepositoryWebrefComponentReferenceIn": "_contentwarehouse_4564_RepositoryWebrefComponentReferenceIn",
        "RepositoryWebrefComponentReferenceOut": "_contentwarehouse_4565_RepositoryWebrefComponentReferenceOut",
        "IndexingEmbeddedContentFetchUrlResponseMetadataIn": "_contentwarehouse_4566_IndexingEmbeddedContentFetchUrlResponseMetadataIn",
        "IndexingEmbeddedContentFetchUrlResponseMetadataOut": "_contentwarehouse_4567_IndexingEmbeddedContentFetchUrlResponseMetadataOut",
        "NlpSciencelitArticleMetadataIn": "_contentwarehouse_4568_NlpSciencelitArticleMetadataIn",
        "NlpSciencelitArticleMetadataOut": "_contentwarehouse_4569_NlpSciencelitArticleMetadataOut",
        "AppsPeopleActivityStreamqualityDistillerEngagementsIn": "_contentwarehouse_4570_AppsPeopleActivityStreamqualityDistillerEngagementsIn",
        "AppsPeopleActivityStreamqualityDistillerEngagementsOut": "_contentwarehouse_4571_AppsPeopleActivityStreamqualityDistillerEngagementsOut",
        "GeostoreFoodMenuItemOptionProtoIn": "_contentwarehouse_4572_GeostoreFoodMenuItemOptionProtoIn",
        "GeostoreFoodMenuItemOptionProtoOut": "_contentwarehouse_4573_GeostoreFoodMenuItemOptionProtoOut",
        "SocialGraphApiProtoPronunciationIn": "_contentwarehouse_4574_SocialGraphApiProtoPronunciationIn",
        "SocialGraphApiProtoPronunciationOut": "_contentwarehouse_4575_SocialGraphApiProtoPronunciationOut",
        "ResearchScienceSearchDataSizeIn": "_contentwarehouse_4576_ResearchScienceSearchDataSizeIn",
        "ResearchScienceSearchDataSizeOut": "_contentwarehouse_4577_ResearchScienceSearchDataSizeOut",
        "GeostoreBarrierLogicalMaterialProtoIn": "_contentwarehouse_4578_GeostoreBarrierLogicalMaterialProtoIn",
        "GeostoreBarrierLogicalMaterialProtoOut": "_contentwarehouse_4579_GeostoreBarrierLogicalMaterialProtoOut",
        "MediaIndexVideoFrameIn": "_contentwarehouse_4580_MediaIndexVideoFrameIn",
        "MediaIndexVideoFrameOut": "_contentwarehouse_4581_MediaIndexVideoFrameOut",
        "ExtraSnippetInfoResponseIn": "_contentwarehouse_4582_ExtraSnippetInfoResponseIn",
        "ExtraSnippetInfoResponseOut": "_contentwarehouse_4583_ExtraSnippetInfoResponseOut",
        "KnowledgeAnswersIntentQuerySaftSignalsIn": "_contentwarehouse_4584_KnowledgeAnswersIntentQuerySaftSignalsIn",
        "KnowledgeAnswersIntentQuerySaftSignalsOut": "_contentwarehouse_4585_KnowledgeAnswersIntentQuerySaftSignalsOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataIn": "_contentwarehouse_4586_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataOut": "_contentwarehouse_4587_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataOut",
        "CompositeDocExtraDupIn": "_contentwarehouse_4588_CompositeDocExtraDupIn",
        "CompositeDocExtraDupOut": "_contentwarehouse_4589_CompositeDocExtraDupOut",
        "GoodocFontSizeStatsIn": "_contentwarehouse_4590_GoodocFontSizeStatsIn",
        "GoodocFontSizeStatsOut": "_contentwarehouse_4591_GoodocFontSizeStatsOut",
        "OceanDataDocinfoWoodwingItemMetadataIn": "_contentwarehouse_4592_OceanDataDocinfoWoodwingItemMetadataIn",
        "OceanDataDocinfoWoodwingItemMetadataOut": "_contentwarehouse_4593_OceanDataDocinfoWoodwingItemMetadataOut",
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementIn": "_contentwarehouse_4594_AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementIn",
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementOut": "_contentwarehouse_4595_AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementOut",
        "AssistantApiSodaCapabilitiesIn": "_contentwarehouse_4596_AssistantApiSodaCapabilitiesIn",
        "AssistantApiSodaCapabilitiesOut": "_contentwarehouse_4597_AssistantApiSodaCapabilitiesOut",
        "RepositoryWebrefSubSegmentIndexIn": "_contentwarehouse_4598_RepositoryWebrefSubSegmentIndexIn",
        "RepositoryWebrefSubSegmentIndexOut": "_contentwarehouse_4599_RepositoryWebrefSubSegmentIndexOut",
        "AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataIn": "_contentwarehouse_4600_AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataIn",
        "AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataOut": "_contentwarehouse_4601_AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataOut",
        "GeostorePolygonProtoIn": "_contentwarehouse_4602_GeostorePolygonProtoIn",
        "GeostorePolygonProtoOut": "_contentwarehouse_4603_GeostorePolygonProtoOut",
        "OcrPhotoTextBoxIn": "_contentwarehouse_4604_OcrPhotoTextBoxIn",
        "OcrPhotoTextBoxOut": "_contentwarehouse_4605_OcrPhotoTextBoxOut",
        "AssistantApiSettingsWebviewFilterIn": "_contentwarehouse_4606_AssistantApiSettingsWebviewFilterIn",
        "AssistantApiSettingsWebviewFilterOut": "_contentwarehouse_4607_AssistantApiSettingsWebviewFilterOut",
        "ResearchScamCoscamDisjunctionIn": "_contentwarehouse_4608_ResearchScamCoscamDisjunctionIn",
        "ResearchScamCoscamDisjunctionOut": "_contentwarehouse_4609_ResearchScamCoscamDisjunctionOut",
        "NlpSaftRelationIn": "_contentwarehouse_4610_NlpSaftRelationIn",
        "NlpSaftRelationOut": "_contentwarehouse_4611_NlpSaftRelationOut",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesIn": "_contentwarehouse_4612_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesIn",
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOut": "_contentwarehouse_4613_AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOut",
        "GoogleCloudContentwarehouseV1RuleEvaluatorOutputIn": "_contentwarehouse_4614_GoogleCloudContentwarehouseV1RuleEvaluatorOutputIn",
        "GoogleCloudContentwarehouseV1RuleEvaluatorOutputOut": "_contentwarehouse_4615_GoogleCloudContentwarehouseV1RuleEvaluatorOutputOut",
        "RepositoryWebrefSimplifiedAnchorsIn": "_contentwarehouse_4616_RepositoryWebrefSimplifiedAnchorsIn",
        "RepositoryWebrefSimplifiedAnchorsOut": "_contentwarehouse_4617_RepositoryWebrefSimplifiedAnchorsOut",
        "AssistantGroundingRankerLaaFeaturesCommunicationEndpointIn": "_contentwarehouse_4618_AssistantGroundingRankerLaaFeaturesCommunicationEndpointIn",
        "AssistantGroundingRankerLaaFeaturesCommunicationEndpointOut": "_contentwarehouse_4619_AssistantGroundingRankerLaaFeaturesCommunicationEndpointOut",
        "QualityDialogManagerLocalIntentOptionsIn": "_contentwarehouse_4620_QualityDialogManagerLocalIntentOptionsIn",
        "QualityDialogManagerLocalIntentOptionsOut": "_contentwarehouse_4621_QualityDialogManagerLocalIntentOptionsOut",
        "KnowledgeAnswersIntentQuerySupportTransferSignalsIn": "_contentwarehouse_4622_KnowledgeAnswersIntentQuerySupportTransferSignalsIn",
        "KnowledgeAnswersIntentQuerySupportTransferSignalsOut": "_contentwarehouse_4623_KnowledgeAnswersIntentQuerySupportTransferSignalsOut",
        "DrishtiSparseFeatureDataIn": "_contentwarehouse_4624_DrishtiSparseFeatureDataIn",
        "DrishtiSparseFeatureDataOut": "_contentwarehouse_4625_DrishtiSparseFeatureDataOut",
        "KnowledgeAnswersMarkerOpenQuestionIn": "_contentwarehouse_4626_KnowledgeAnswersMarkerOpenQuestionIn",
        "KnowledgeAnswersMarkerOpenQuestionOut": "_contentwarehouse_4627_KnowledgeAnswersMarkerOpenQuestionOut",
        "GeostoreParkingRestrictionProtoIn": "_contentwarehouse_4628_GeostoreParkingRestrictionProtoIn",
        "GeostoreParkingRestrictionProtoOut": "_contentwarehouse_4629_GeostoreParkingRestrictionProtoOut",
        "VendingConsumerProtoTrustedGenomePolicyTargetRegionIn": "_contentwarehouse_4630_VendingConsumerProtoTrustedGenomePolicyTargetRegionIn",
        "VendingConsumerProtoTrustedGenomePolicyTargetRegionOut": "_contentwarehouse_4631_VendingConsumerProtoTrustedGenomePolicyTargetRegionOut",
        "AssistantVerticalsHomeautomationProtoAgentDeviceIdIn": "_contentwarehouse_4632_AssistantVerticalsHomeautomationProtoAgentDeviceIdIn",
        "AssistantVerticalsHomeautomationProtoAgentDeviceIdOut": "_contentwarehouse_4633_AssistantVerticalsHomeautomationProtoAgentDeviceIdOut",
        "SocialStanzaDeliveryRestrictionIn": "_contentwarehouse_4634_SocialStanzaDeliveryRestrictionIn",
        "SocialStanzaDeliveryRestrictionOut": "_contentwarehouse_4635_SocialStanzaDeliveryRestrictionOut",
        "TrawlerFetchReplyDataFetchStatsClientStateStatsIn": "_contentwarehouse_4636_TrawlerFetchReplyDataFetchStatsClientStateStatsIn",
        "TrawlerFetchReplyDataFetchStatsClientStateStatsOut": "_contentwarehouse_4637_TrawlerFetchReplyDataFetchStatsClientStateStatsOut",
        "NlpSaftEntityProfileAlternateIn": "_contentwarehouse_4638_NlpSaftEntityProfileAlternateIn",
        "NlpSaftEntityProfileAlternateOut": "_contentwarehouse_4639_NlpSaftEntityProfileAlternateOut",
        "NlxDataSchemaTokenIn": "_contentwarehouse_4640_NlxDataSchemaTokenIn",
        "NlxDataSchemaTokenOut": "_contentwarehouse_4641_NlxDataSchemaTokenOut",
        "NlpSaftDocumentTopicIn": "_contentwarehouse_4642_NlpSaftDocumentTopicIn",
        "NlpSaftDocumentTopicOut": "_contentwarehouse_4643_NlpSaftDocumentTopicOut",
        "IndexingConverterRedirectChainIn": "_contentwarehouse_4644_IndexingConverterRedirectChainIn",
        "IndexingConverterRedirectChainOut": "_contentwarehouse_4645_IndexingConverterRedirectChainOut",
        "OceanDocTagMagazineSpecificIn": "_contentwarehouse_4646_OceanDocTagMagazineSpecificIn",
        "OceanDocTagMagazineSpecificOut": "_contentwarehouse_4647_OceanDocTagMagazineSpecificOut",
        "NlpSemanticParsingDatetimeMoonEventInfoIn": "_contentwarehouse_4648_NlpSemanticParsingDatetimeMoonEventInfoIn",
        "NlpSemanticParsingDatetimeMoonEventInfoOut": "_contentwarehouse_4649_NlpSemanticParsingDatetimeMoonEventInfoOut",
        "VideoContentSearchTokenAlignmentIn": "_contentwarehouse_4650_VideoContentSearchTokenAlignmentIn",
        "VideoContentSearchTokenAlignmentOut": "_contentwarehouse_4651_VideoContentSearchTokenAlignmentOut",
        "CloudAiPlatformTenantresourceInfraSpannerConfigIn": "_contentwarehouse_4652_CloudAiPlatformTenantresourceInfraSpannerConfigIn",
        "CloudAiPlatformTenantresourceInfraSpannerConfigOut": "_contentwarehouse_4653_CloudAiPlatformTenantresourceInfraSpannerConfigOut",
        "HtmlrenderWebkitHeadlessProtoDocumentIn": "_contentwarehouse_4654_HtmlrenderWebkitHeadlessProtoDocumentIn",
        "HtmlrenderWebkitHeadlessProtoDocumentOut": "_contentwarehouse_4655_HtmlrenderWebkitHeadlessProtoDocumentOut",
        "GoogleCloudContentwarehouseV1HistogramQueryResultIn": "_contentwarehouse_4656_GoogleCloudContentwarehouseV1HistogramQueryResultIn",
        "GoogleCloudContentwarehouseV1HistogramQueryResultOut": "_contentwarehouse_4657_GoogleCloudContentwarehouseV1HistogramQueryResultOut",
        "NlpSaftEntityProfileIn": "_contentwarehouse_4658_NlpSaftEntityProfileIn",
        "NlpSaftEntityProfileOut": "_contentwarehouse_4659_NlpSaftEntityProfileOut",
        "QualityNsrExperimentalNsrTeamDataIn": "_contentwarehouse_4660_QualityNsrExperimentalNsrTeamDataIn",
        "QualityNsrExperimentalNsrTeamDataOut": "_contentwarehouse_4661_QualityNsrExperimentalNsrTeamDataOut",
        "WWWSnippetResponseBitmapPBIn": "_contentwarehouse_4662_WWWSnippetResponseBitmapPBIn",
        "WWWSnippetResponseBitmapPBOut": "_contentwarehouse_4663_WWWSnippetResponseBitmapPBOut",
        "AssistantDevicesPlatformProtoInlinedActionCapabilityIn": "_contentwarehouse_4664_AssistantDevicesPlatformProtoInlinedActionCapabilityIn",
        "AssistantDevicesPlatformProtoInlinedActionCapabilityOut": "_contentwarehouse_4665_AssistantDevicesPlatformProtoInlinedActionCapabilityOut",
        "AssistantApiCoreTypesSipProviderInfoIn": "_contentwarehouse_4666_AssistantApiCoreTypesSipProviderInfoIn",
        "AssistantApiCoreTypesSipProviderInfoOut": "_contentwarehouse_4667_AssistantApiCoreTypesSipProviderInfoOut",
        "TravelFlightsNameCatalogProtoIn": "_contentwarehouse_4668_TravelFlightsNameCatalogProtoIn",
        "TravelFlightsNameCatalogProtoOut": "_contentwarehouse_4669_TravelFlightsNameCatalogProtoOut",
        "AssistantApiSettingsPersonalizationMetadataIn": "_contentwarehouse_4670_AssistantApiSettingsPersonalizationMetadataIn",
        "AssistantApiSettingsPersonalizationMetadataOut": "_contentwarehouse_4671_AssistantApiSettingsPersonalizationMetadataOut",
        "StorageGraphBfgPolicyMetadataIn": "_contentwarehouse_4672_StorageGraphBfgPolicyMetadataIn",
        "StorageGraphBfgPolicyMetadataOut": "_contentwarehouse_4673_StorageGraphBfgPolicyMetadataOut",
        "KnowledgeAnswersIntentQueryAnnotationLayerSignalsIn": "_contentwarehouse_4674_KnowledgeAnswersIntentQueryAnnotationLayerSignalsIn",
        "KnowledgeAnswersIntentQueryAnnotationLayerSignalsOut": "_contentwarehouse_4675_KnowledgeAnswersIntentQueryAnnotationLayerSignalsOut",
        "NlpSaftDocumentIn": "_contentwarehouse_4676_NlpSaftDocumentIn",
        "NlpSaftDocumentOut": "_contentwarehouse_4677_NlpSaftDocumentOut",
        "RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaIn": "_contentwarehouse_4678_RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaIn",
        "RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaOut": "_contentwarehouse_4679_RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaOut",
        "CountryClickDistributionIn": "_contentwarehouse_4680_CountryClickDistributionIn",
        "CountryClickDistributionOut": "_contentwarehouse_4681_CountryClickDistributionOut",
        "NlpSemanticParsingModelsMediaMediaAnnotationListIn": "_contentwarehouse_4682_NlpSemanticParsingModelsMediaMediaAnnotationListIn",
        "NlpSemanticParsingModelsMediaMediaAnnotationListOut": "_contentwarehouse_4683_NlpSemanticParsingModelsMediaMediaAnnotationListOut",
        "CountryLocationInfoIn": "_contentwarehouse_4684_CountryLocationInfoIn",
        "CountryLocationInfoOut": "_contentwarehouse_4685_CountryLocationInfoOut",
        "AssistantApiCoreTypesImageIn": "_contentwarehouse_4686_AssistantApiCoreTypesImageIn",
        "AssistantApiCoreTypesImageOut": "_contentwarehouse_4687_AssistantApiCoreTypesImageOut",
        "QualityNsrNsrDataIn": "_contentwarehouse_4688_QualityNsrNsrDataIn",
        "QualityNsrNsrDataOut": "_contentwarehouse_4689_QualityNsrNsrDataOut",
        "NlpSemanticParsingModelsMediaCastDeviceAnnotationIn": "_contentwarehouse_4690_NlpSemanticParsingModelsMediaCastDeviceAnnotationIn",
        "NlpSemanticParsingModelsMediaCastDeviceAnnotationOut": "_contentwarehouse_4691_NlpSemanticParsingModelsMediaCastDeviceAnnotationOut",
        "GeostoreExceptionalHoursProtoIn": "_contentwarehouse_4692_GeostoreExceptionalHoursProtoIn",
        "GeostoreExceptionalHoursProtoOut": "_contentwarehouse_4693_GeostoreExceptionalHoursProtoOut",
        "AbuseiamNameValuePairIn": "_contentwarehouse_4694_AbuseiamNameValuePairIn",
        "AbuseiamNameValuePairOut": "_contentwarehouse_4695_AbuseiamNameValuePairOut",
        "VideoContentSearchCaptionEntityAnchorFeaturesIn": "_contentwarehouse_4696_VideoContentSearchCaptionEntityAnchorFeaturesIn",
        "VideoContentSearchCaptionEntityAnchorFeaturesOut": "_contentwarehouse_4697_VideoContentSearchCaptionEntityAnchorFeaturesOut",
        "GoodocSymbolSymbolVariantIn": "_contentwarehouse_4698_GoodocSymbolSymbolVariantIn",
        "GoodocSymbolSymbolVariantOut": "_contentwarehouse_4699_GoodocSymbolSymbolVariantOut",
        "NlpSemanticParsingDatetimeDateTimePropertyIn": "_contentwarehouse_4700_NlpSemanticParsingDatetimeDateTimePropertyIn",
        "NlpSemanticParsingDatetimeDateTimePropertyOut": "_contentwarehouse_4701_NlpSemanticParsingDatetimeDateTimePropertyOut",
        "KnowledgeGraphNestedStructIn": "_contentwarehouse_4702_KnowledgeGraphNestedStructIn",
        "KnowledgeGraphNestedStructOut": "_contentwarehouse_4703_KnowledgeGraphNestedStructOut",
        "SocialGraphApiAppContactDataIn": "_contentwarehouse_4704_SocialGraphApiAppContactDataIn",
        "SocialGraphApiAppContactDataOut": "_contentwarehouse_4705_SocialGraphApiAppContactDataOut",
        "GoogleCloudContentwarehouseV1PropertyIn": "_contentwarehouse_4706_GoogleCloudContentwarehouseV1PropertyIn",
        "GoogleCloudContentwarehouseV1PropertyOut": "_contentwarehouse_4707_GoogleCloudContentwarehouseV1PropertyOut",
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateIn": "_contentwarehouse_4708_AppsPeopleOzExternalMergedpeopleapiEmailCertificateIn",
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateOut": "_contentwarehouse_4709_AppsPeopleOzExternalMergedpeopleapiEmailCertificateOut",
        "GeostoreBoundingMarkerProtoIn": "_contentwarehouse_4710_GeostoreBoundingMarkerProtoIn",
        "GeostoreBoundingMarkerProtoOut": "_contentwarehouse_4711_GeostoreBoundingMarkerProtoOut",
        "RepositoryWebrefPreprocessingNameEntityScoresIn": "_contentwarehouse_4712_RepositoryWebrefPreprocessingNameEntityScoresIn",
        "RepositoryWebrefPreprocessingNameEntityScoresOut": "_contentwarehouse_4713_RepositoryWebrefPreprocessingNameEntityScoresOut",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityIn": "_contentwarehouse_4714_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityIn",
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityOut": "_contentwarehouse_4715_AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityOut",
        "RepositoryWebrefLightweightTokensMatchedLightweightTokenIn": "_contentwarehouse_4716_RepositoryWebrefLightweightTokensMatchedLightweightTokenIn",
        "RepositoryWebrefLightweightTokensMatchedLightweightTokenOut": "_contentwarehouse_4717_RepositoryWebrefLightweightTokensMatchedLightweightTokenOut",
        "GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentIn": "_contentwarehouse_4718_GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentIn",
        "GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentOut": "_contentwarehouse_4719_GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentOut",
        "KnowledgeAnswersMeaningSchemaKeyIn": "_contentwarehouse_4720_KnowledgeAnswersMeaningSchemaKeyIn",
        "KnowledgeAnswersMeaningSchemaKeyOut": "_contentwarehouse_4721_KnowledgeAnswersMeaningSchemaKeyOut",
        "KaltixPerDocDataIn": "_contentwarehouse_4722_KaltixPerDocDataIn",
        "KaltixPerDocDataOut": "_contentwarehouse_4723_KaltixPerDocDataOut",
        "QualityNsrExperimentalNsrTeamWSJDataIn": "_contentwarehouse_4724_QualityNsrExperimentalNsrTeamWSJDataIn",
        "QualityNsrExperimentalNsrTeamWSJDataOut": "_contentwarehouse_4725_QualityNsrExperimentalNsrTeamWSJDataOut",
        "ImageDataMultibangEntitiesMultibangEntityIn": "_contentwarehouse_4726_ImageDataMultibangEntitiesMultibangEntityIn",
        "ImageDataMultibangEntitiesMultibangEntityOut": "_contentwarehouse_4727_ImageDataMultibangEntitiesMultibangEntityOut",
        "KnowledgeAnswersOpaqueCalendarReferenceTypeIn": "_contentwarehouse_4728_KnowledgeAnswersOpaqueCalendarReferenceTypeIn",
        "KnowledgeAnswersOpaqueCalendarReferenceTypeOut": "_contentwarehouse_4729_KnowledgeAnswersOpaqueCalendarReferenceTypeOut",
        "SocialPersonalizationKnexAnnotationIn": "_contentwarehouse_4730_SocialPersonalizationKnexAnnotationIn",
        "SocialPersonalizationKnexAnnotationOut": "_contentwarehouse_4731_SocialPersonalizationKnexAnnotationOut",
        "OceanGEPriceLocaleIn": "_contentwarehouse_4732_OceanGEPriceLocaleIn",
        "OceanGEPriceLocaleOut": "_contentwarehouse_4733_OceanGEPriceLocaleOut",
        "ScienceCitationFundingExtractionInfoIn": "_contentwarehouse_4734_ScienceCitationFundingExtractionInfoIn",
        "ScienceCitationFundingExtractionInfoOut": "_contentwarehouse_4735_ScienceCitationFundingExtractionInfoOut",
        "RepositoryWebrefSimplifiedAnchorIn": "_contentwarehouse_4736_RepositoryWebrefSimplifiedAnchorIn",
        "RepositoryWebrefSimplifiedAnchorOut": "_contentwarehouse_4737_RepositoryWebrefSimplifiedAnchorOut",
        "TravelFlightsAirlineConfigContactInfoIn": "_contentwarehouse_4738_TravelFlightsAirlineConfigContactInfoIn",
        "TravelFlightsAirlineConfigContactInfoOut": "_contentwarehouse_4739_TravelFlightsAirlineConfigContactInfoOut",
        "ScienceOceanViewIn": "_contentwarehouse_4740_ScienceOceanViewIn",
        "ScienceOceanViewOut": "_contentwarehouse_4741_ScienceOceanViewOut",
        "ResearchScienceSearchDataDownloadIn": "_contentwarehouse_4742_ResearchScienceSearchDataDownloadIn",
        "ResearchScienceSearchDataDownloadOut": "_contentwarehouse_4743_ResearchScienceSearchDataDownloadOut",
        "AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityIn": "_contentwarehouse_4744_AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityIn",
        "AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityOut": "_contentwarehouse_4745_AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityOut",
        "GoogleAssistantAccessoryV1DeviceStateIn": "_contentwarehouse_4746_GoogleAssistantAccessoryV1DeviceStateIn",
        "GoogleAssistantAccessoryV1DeviceStateOut": "_contentwarehouse_4747_GoogleAssistantAccessoryV1DeviceStateOut",
        "GeostorePriceInfoFoodNutritionFactsCaloriesFactIn": "_contentwarehouse_4748_GeostorePriceInfoFoodNutritionFactsCaloriesFactIn",
        "GeostorePriceInfoFoodNutritionFactsCaloriesFactOut": "_contentwarehouse_4749_GeostorePriceInfoFoodNutritionFactsCaloriesFactOut",
        "ShingleInfoPerDocDataIn": "_contentwarehouse_4750_ShingleInfoPerDocDataIn",
        "ShingleInfoPerDocDataOut": "_contentwarehouse_4751_ShingleInfoPerDocDataOut",
        "AssistantDevicesPlatformProtoMediaPlayMediaCapabilityIn": "_contentwarehouse_4752_AssistantDevicesPlatformProtoMediaPlayMediaCapabilityIn",
        "AssistantDevicesPlatformProtoMediaPlayMediaCapabilityOut": "_contentwarehouse_4753_AssistantDevicesPlatformProtoMediaPlayMediaCapabilityOut",
        "SpeechS3LanguageIdentificationResultIn": "_contentwarehouse_4754_SpeechS3LanguageIdentificationResultIn",
        "SpeechS3LanguageIdentificationResultOut": "_contentwarehouse_4755_SpeechS3LanguageIdentificationResultOut",
        "CloudAiPlatformTenantresourceGcsBucketConfigIn": "_contentwarehouse_4756_CloudAiPlatformTenantresourceGcsBucketConfigIn",
        "CloudAiPlatformTenantresourceGcsBucketConfigOut": "_contentwarehouse_4757_CloudAiPlatformTenantresourceGcsBucketConfigOut",
        "RepositoryWebrefNgramContextIn": "_contentwarehouse_4758_RepositoryWebrefNgramContextIn",
        "RepositoryWebrefNgramContextOut": "_contentwarehouse_4759_RepositoryWebrefNgramContextOut",
        "AssistantApiCarSettingsCapabilitiesIn": "_contentwarehouse_4760_AssistantApiCarSettingsCapabilitiesIn",
        "AssistantApiCarSettingsCapabilitiesOut": "_contentwarehouse_4761_AssistantApiCarSettingsCapabilitiesOut",
        "ContentAttributionsOutgoingAttributionIn": "_contentwarehouse_4762_ContentAttributionsOutgoingAttributionIn",
        "ContentAttributionsOutgoingAttributionOut": "_contentwarehouse_4763_ContentAttributionsOutgoingAttributionOut",
        "CloudAiPlatformTenantresourceTenantServiceAccountIdentityIn": "_contentwarehouse_4764_CloudAiPlatformTenantresourceTenantServiceAccountIdentityIn",
        "CloudAiPlatformTenantresourceTenantServiceAccountIdentityOut": "_contentwarehouse_4765_CloudAiPlatformTenantresourceTenantServiceAccountIdentityOut",
        "KnowledgeAnswersIntentQueryLocalSignalsIn": "_contentwarehouse_4766_KnowledgeAnswersIntentQueryLocalSignalsIn",
        "KnowledgeAnswersIntentQueryLocalSignalsOut": "_contentwarehouse_4767_KnowledgeAnswersIntentQueryLocalSignalsOut",
        "QualityNavboostCrapsAgingDataIn": "_contentwarehouse_4768_QualityNavboostCrapsAgingDataIn",
        "QualityNavboostCrapsAgingDataOut": "_contentwarehouse_4769_QualityNavboostCrapsAgingDataOut",
        "NlpSemanticParsingSaftMeasureIn": "_contentwarehouse_4770_NlpSemanticParsingSaftMeasureIn",
        "NlpSemanticParsingSaftMeasureOut": "_contentwarehouse_4771_NlpSemanticParsingSaftMeasureOut",
        "ImageRepositoryApiItagSpecificMetadataIn": "_contentwarehouse_4772_ImageRepositoryApiItagSpecificMetadataIn",
        "ImageRepositoryApiItagSpecificMetadataOut": "_contentwarehouse_4773_ImageRepositoryApiItagSpecificMetadataOut",
        "FreebaseMeasurementUnitIn": "_contentwarehouse_4774_FreebaseMeasurementUnitIn",
        "FreebaseMeasurementUnitOut": "_contentwarehouse_4775_FreebaseMeasurementUnitOut",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkIn": "_contentwarehouse_4776_AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkIn",
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkOut": "_contentwarehouse_4777_AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkOut",
        "GoogleCloudContentwarehouseV1FloatTypeOptionsIn": "_contentwarehouse_4778_GoogleCloudContentwarehouseV1FloatTypeOptionsIn",
        "GoogleCloudContentwarehouseV1FloatTypeOptionsOut": "_contentwarehouse_4779_GoogleCloudContentwarehouseV1FloatTypeOptionsOut",
        "GoogleCloudDocumentaiV1DocumentShardInfoIn": "_contentwarehouse_4780_GoogleCloudDocumentaiV1DocumentShardInfoIn",
        "GoogleCloudDocumentaiV1DocumentShardInfoOut": "_contentwarehouse_4781_GoogleCloudDocumentaiV1DocumentShardInfoOut",
        "KnowledgeAnswersOpaqueComplexQueriesRewriteTypeIn": "_contentwarehouse_4782_KnowledgeAnswersOpaqueComplexQueriesRewriteTypeIn",
        "KnowledgeAnswersOpaqueComplexQueriesRewriteTypeOut": "_contentwarehouse_4783_KnowledgeAnswersOpaqueComplexQueriesRewriteTypeOut",
        "CrawlerChangerateUrlChangerateIn": "_contentwarehouse_4784_CrawlerChangerateUrlChangerateIn",
        "CrawlerChangerateUrlChangerateOut": "_contentwarehouse_4785_CrawlerChangerateUrlChangerateOut",
        "IndexingSignalAggregatorRunningMeanAndVarianceInternalStateIn": "_contentwarehouse_4786_IndexingSignalAggregatorRunningMeanAndVarianceInternalStateIn",
        "IndexingSignalAggregatorRunningMeanAndVarianceInternalStateOut": "_contentwarehouse_4787_IndexingSignalAggregatorRunningMeanAndVarianceInternalStateOut",
        "HtmlrenderWebkitHeadlessProtoAnonTimingStatPairIn": "_contentwarehouse_4788_HtmlrenderWebkitHeadlessProtoAnonTimingStatPairIn",
        "HtmlrenderWebkitHeadlessProtoAnonTimingStatPairOut": "_contentwarehouse_4789_HtmlrenderWebkitHeadlessProtoAnonTimingStatPairOut",
        "AssistantContextProviderIdIn": "_contentwarehouse_4790_AssistantContextProviderIdIn",
        "AssistantContextProviderIdOut": "_contentwarehouse_4791_AssistantContextProviderIdOut",
        "GeostoreSweepProtoIn": "_contentwarehouse_4792_GeostoreSweepProtoIn",
        "GeostoreSweepProtoOut": "_contentwarehouse_4793_GeostoreSweepProtoOut",
        "NlpSemanticParsingLocalHotelTypeIn": "_contentwarehouse_4794_NlpSemanticParsingLocalHotelTypeIn",
        "NlpSemanticParsingLocalHotelTypeOut": "_contentwarehouse_4795_NlpSemanticParsingLocalHotelTypeOut",
        "ImageUnderstandingIndexingAnnotationGroupIn": "_contentwarehouse_4796_ImageUnderstandingIndexingAnnotationGroupIn",
        "ImageUnderstandingIndexingAnnotationGroupOut": "_contentwarehouse_4797_ImageUnderstandingIndexingAnnotationGroupOut",
        "AssistantGroundingRankerAssistantInteractionFeaturesIn": "_contentwarehouse_4798_AssistantGroundingRankerAssistantInteractionFeaturesIn",
        "AssistantGroundingRankerAssistantInteractionFeaturesOut": "_contentwarehouse_4799_AssistantGroundingRankerAssistantInteractionFeaturesOut",
        "GeostoreRouteAssociationProtoIn": "_contentwarehouse_4800_GeostoreRouteAssociationProtoIn",
        "GeostoreRouteAssociationProtoOut": "_contentwarehouse_4801_GeostoreRouteAssociationProtoOut",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationIn": "_contentwarehouse_4802_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationIn",
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationOut": "_contentwarehouse_4803_RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationOut",
        "QualityActionsReminderLocationCategoryInfoIn": "_contentwarehouse_4804_QualityActionsReminderLocationCategoryInfoIn",
        "QualityActionsReminderLocationCategoryInfoOut": "_contentwarehouse_4805_QualityActionsReminderLocationCategoryInfoOut",
        "AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoIn": "_contentwarehouse_4806_AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoIn",
        "AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoOut": "_contentwarehouse_4807_AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoOut",
        "MultiscalePointerIndexIn": "_contentwarehouse_4808_MultiscalePointerIndexIn",
        "MultiscalePointerIndexOut": "_contentwarehouse_4809_MultiscalePointerIndexOut",
        "VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesIn": "_contentwarehouse_4810_VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesIn",
        "VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesOut": "_contentwarehouse_4811_VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesOut",
        "IndexingEmbeddedContentOutputGenerationTimestampsIn": "_contentwarehouse_4812_IndexingEmbeddedContentOutputGenerationTimestampsIn",
        "IndexingEmbeddedContentOutputGenerationTimestampsOut": "_contentwarehouse_4813_IndexingEmbeddedContentOutputGenerationTimestampsOut",
        "AssistantVerticalsHomeautomationProtoAttributeIn": "_contentwarehouse_4814_AssistantVerticalsHomeautomationProtoAttributeIn",
        "AssistantVerticalsHomeautomationProtoAttributeOut": "_contentwarehouse_4815_AssistantVerticalsHomeautomationProtoAttributeOut",
        "NlpSemanticParsingAppAnnotationIn": "_contentwarehouse_4816_NlpSemanticParsingAppAnnotationIn",
        "NlpSemanticParsingAppAnnotationOut": "_contentwarehouse_4817_NlpSemanticParsingAppAnnotationOut",
        "AssistantDevicesPlatformProtoResponseLimitsIn": "_contentwarehouse_4818_AssistantDevicesPlatformProtoResponseLimitsIn",
        "AssistantDevicesPlatformProtoResponseLimitsOut": "_contentwarehouse_4819_AssistantDevicesPlatformProtoResponseLimitsOut",
        "RepositoryWebrefMentionRatingsSingleMentionRatingIn": "_contentwarehouse_4820_RepositoryWebrefMentionRatingsSingleMentionRatingIn",
        "RepositoryWebrefMentionRatingsSingleMentionRatingOut": "_contentwarehouse_4821_RepositoryWebrefMentionRatingsSingleMentionRatingOut",
        "DocPropertiesIn": "_contentwarehouse_4822_DocPropertiesIn",
        "DocPropertiesOut": "_contentwarehouse_4823_DocPropertiesOut",
        "MediaIndexRegionIn": "_contentwarehouse_4824_MediaIndexRegionIn",
        "MediaIndexRegionOut": "_contentwarehouse_4825_MediaIndexRegionOut",
        "CompositeDocPartialUpdateInfoIn": "_contentwarehouse_4826_CompositeDocPartialUpdateInfoIn",
        "CompositeDocPartialUpdateInfoOut": "_contentwarehouse_4827_CompositeDocPartialUpdateInfoOut",
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresIn": "_contentwarehouse_4828_LensDiscoveryStylePersonAttributesPersonVisibilityScoresIn",
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresOut": "_contentwarehouse_4829_LensDiscoveryStylePersonAttributesPersonVisibilityScoresOut",
        "RepositoryAnnotationsRdfaCrumbIn": "_contentwarehouse_4830_RepositoryAnnotationsRdfaCrumbIn",
        "RepositoryAnnotationsRdfaCrumbOut": "_contentwarehouse_4831_RepositoryAnnotationsRdfaCrumbOut",
        "ResearchScamGenericFeatureVectorRestrictTokensIn": "_contentwarehouse_4832_ResearchScamGenericFeatureVectorRestrictTokensIn",
        "ResearchScamGenericFeatureVectorRestrictTokensOut": "_contentwarehouse_4833_ResearchScamGenericFeatureVectorRestrictTokensOut",
        "GoogleInternalAppsWaldoV1alphaTimeRangeIn": "_contentwarehouse_4834_GoogleInternalAppsWaldoV1alphaTimeRangeIn",
        "GoogleInternalAppsWaldoV1alphaTimeRangeOut": "_contentwarehouse_4835_GoogleInternalAppsWaldoV1alphaTimeRangeOut",
        "HtmlrenderWebkitHeadlessProtoRenderEventIn": "_contentwarehouse_4836_HtmlrenderWebkitHeadlessProtoRenderEventIn",
        "HtmlrenderWebkitHeadlessProtoRenderEventOut": "_contentwarehouse_4837_HtmlrenderWebkitHeadlessProtoRenderEventOut",
        "GoogleCloudDocumentaiV1DocumentTextAnchorIn": "_contentwarehouse_4838_GoogleCloudDocumentaiV1DocumentTextAnchorIn",
        "GoogleCloudDocumentaiV1DocumentTextAnchorOut": "_contentwarehouse_4839_GoogleCloudDocumentaiV1DocumentTextAnchorOut",
        "PhotosVisionGroundtruthdbNormalizedBoundingBoxIn": "_contentwarehouse_4840_PhotosVisionGroundtruthdbNormalizedBoundingBoxIn",
        "PhotosVisionGroundtruthdbNormalizedBoundingBoxOut": "_contentwarehouse_4841_PhotosVisionGroundtruthdbNormalizedBoundingBoxOut",
        "RepositoryWebrefForwardingUrlsIn": "_contentwarehouse_4842_RepositoryWebrefForwardingUrlsIn",
        "RepositoryWebrefForwardingUrlsOut": "_contentwarehouse_4843_RepositoryWebrefForwardingUrlsOut",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentIn": "_contentwarehouse_4844_AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentIn",
        "AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentOut": "_contentwarehouse_4845_AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentOut",
        "DrishtiQuantizedByteDenseFeatureDataIn": "_contentwarehouse_4846_DrishtiQuantizedByteDenseFeatureDataIn",
        "DrishtiQuantizedByteDenseFeatureDataOut": "_contentwarehouse_4847_DrishtiQuantizedByteDenseFeatureDataOut",
        "RepositoryWebrefWikipediaCategoryIn": "_contentwarehouse_4848_RepositoryWebrefWikipediaCategoryIn",
        "RepositoryWebrefWikipediaCategoryOut": "_contentwarehouse_4849_RepositoryWebrefWikipediaCategoryOut",
        "GeostoreTimeEndpointProtoIn": "_contentwarehouse_4850_GeostoreTimeEndpointProtoIn",
        "GeostoreTimeEndpointProtoOut": "_contentwarehouse_4851_GeostoreTimeEndpointProtoOut",
        "AssistantApiSupportedClientOpIn": "_contentwarehouse_4852_AssistantApiSupportedClientOpIn",
        "AssistantApiSupportedClientOpOut": "_contentwarehouse_4853_AssistantApiSupportedClientOpOut",
        "CrawlerChangerateUrlVersionIn": "_contentwarehouse_4854_CrawlerChangerateUrlVersionIn",
        "CrawlerChangerateUrlVersionOut": "_contentwarehouse_4855_CrawlerChangerateUrlVersionOut",
        "VideoMediaOverviewVideoOverviewIn": "_contentwarehouse_4856_VideoMediaOverviewVideoOverviewIn",
        "VideoMediaOverviewVideoOverviewOut": "_contentwarehouse_4857_VideoMediaOverviewVideoOverviewOut",
        "GeostoreTransitStationProtoIn": "_contentwarehouse_4858_GeostoreTransitStationProtoIn",
        "GeostoreTransitStationProtoOut": "_contentwarehouse_4859_GeostoreTransitStationProtoOut",
        "PeoplestackFlexorgsProtoInternalExternalIn": "_contentwarehouse_4860_PeoplestackFlexorgsProtoInternalExternalIn",
        "PeoplestackFlexorgsProtoInternalExternalOut": "_contentwarehouse_4861_PeoplestackFlexorgsProtoInternalExternalOut",
        "GoogleInternalAppsWaldoV1alphaCalendarBusyIn": "_contentwarehouse_4862_GoogleInternalAppsWaldoV1alphaCalendarBusyIn",
        "GoogleInternalAppsWaldoV1alphaCalendarBusyOut": "_contentwarehouse_4863_GoogleInternalAppsWaldoV1alphaCalendarBusyOut",
        "IndexingPrivacyAccessAccessRequirementsIn": "_contentwarehouse_4864_IndexingPrivacyAccessAccessRequirementsIn",
        "IndexingPrivacyAccessAccessRequirementsOut": "_contentwarehouse_4865_IndexingPrivacyAccessAccessRequirementsOut",
        "GoogleCloudDocumentaiV1DocumentPageTableTableCellIn": "_contentwarehouse_4866_GoogleCloudDocumentaiV1DocumentPageTableTableCellIn",
        "GoogleCloudDocumentaiV1DocumentPageTableTableCellOut": "_contentwarehouse_4867_GoogleCloudDocumentaiV1DocumentPageTableTableCellOut",
        "IndexingBadSSLCertificateIn": "_contentwarehouse_4868_IndexingBadSSLCertificateIn",
        "IndexingBadSSLCertificateOut": "_contentwarehouse_4869_IndexingBadSSLCertificateOut",
        "SocialCommonUserMentionDataIn": "_contentwarehouse_4870_SocialCommonUserMentionDataIn",
        "SocialCommonUserMentionDataOut": "_contentwarehouse_4871_SocialCommonUserMentionDataOut",
        "LensDiscoveryStylePersonAttributesIn": "_contentwarehouse_4872_LensDiscoveryStylePersonAttributesIn",
        "LensDiscoveryStylePersonAttributesOut": "_contentwarehouse_4873_LensDiscoveryStylePersonAttributesOut",
        "FocusBackendDeviceIdIn": "_contentwarehouse_4874_FocusBackendDeviceIdIn",
        "FocusBackendDeviceIdOut": "_contentwarehouse_4875_FocusBackendDeviceIdOut",
        "SmearedWebLandingPageEntryIn": "_contentwarehouse_4876_SmearedWebLandingPageEntryIn",
        "SmearedWebLandingPageEntryOut": "_contentwarehouse_4877_SmearedWebLandingPageEntryOut",
        "SnippetsLeadingtextLeadingTextInfoIn": "_contentwarehouse_4878_SnippetsLeadingtextLeadingTextInfoIn",
        "SnippetsLeadingtextLeadingTextInfoOut": "_contentwarehouse_4879_SnippetsLeadingtextLeadingTextInfoOut",
        "GoogleCloudContentwarehouseV1FetchAclRequestIn": "_contentwarehouse_4880_GoogleCloudContentwarehouseV1FetchAclRequestIn",
        "GoogleCloudContentwarehouseV1FetchAclRequestOut": "_contentwarehouse_4881_GoogleCloudContentwarehouseV1FetchAclRequestOut",
        "GoogleTypeTimeZoneIn": "_contentwarehouse_4882_GoogleTypeTimeZoneIn",
        "GoogleTypeTimeZoneOut": "_contentwarehouse_4883_GoogleTypeTimeZoneOut",
        "KnowledgeAnswersIntentQueryCollectionScoreIn": "_contentwarehouse_4884_KnowledgeAnswersIntentQueryCollectionScoreIn",
        "KnowledgeAnswersIntentQueryCollectionScoreOut": "_contentwarehouse_4885_KnowledgeAnswersIntentQueryCollectionScoreOut",
        "KnowledgeAnswersIntentQueryArgPathIn": "_contentwarehouse_4886_KnowledgeAnswersIntentQueryArgPathIn",
        "KnowledgeAnswersIntentQueryArgPathOut": "_contentwarehouse_4887_KnowledgeAnswersIntentQueryArgPathOut",
        "AssistantLogsTargetDeviceLogIn": "_contentwarehouse_4888_AssistantLogsTargetDeviceLogIn",
        "AssistantLogsTargetDeviceLogOut": "_contentwarehouse_4889_AssistantLogsTargetDeviceLogOut",
        "OfficialPagesOfficialKeyIn": "_contentwarehouse_4890_OfficialPagesOfficialKeyIn",
        "OfficialPagesOfficialKeyOut": "_contentwarehouse_4891_OfficialPagesOfficialKeyOut",
        "KnowledgeAnswersIntentQueryTokenSynonymIn": "_contentwarehouse_4892_KnowledgeAnswersIntentQueryTokenSynonymIn",
        "KnowledgeAnswersIntentQueryTokenSynonymOut": "_contentwarehouse_4893_KnowledgeAnswersIntentQueryTokenSynonymOut",
        "SearchPolicyRankableSensitivitySyntheticIntentIn": "_contentwarehouse_4894_SearchPolicyRankableSensitivitySyntheticIntentIn",
        "SearchPolicyRankableSensitivitySyntheticIntentOut": "_contentwarehouse_4895_SearchPolicyRankableSensitivitySyntheticIntentOut",
        "GoogleCloudContentwarehouseV1DocumentLinkIn": "_contentwarehouse_4896_GoogleCloudContentwarehouseV1DocumentLinkIn",
        "GoogleCloudContentwarehouseV1DocumentLinkOut": "_contentwarehouse_4897_GoogleCloudContentwarehouseV1DocumentLinkOut",
        "MultiscaleLayerPresenceIn": "_contentwarehouse_4898_MultiscaleLayerPresenceIn",
        "MultiscaleLayerPresenceOut": "_contentwarehouse_4899_MultiscaleLayerPresenceOut",
        "AssistantRemindersAttachmentIn": "_contentwarehouse_4900_AssistantRemindersAttachmentIn",
        "AssistantRemindersAttachmentOut": "_contentwarehouse_4901_AssistantRemindersAttachmentOut",
        "KnowledgeAnswersIntentQueryFreetextAnnotationSignalsIn": "_contentwarehouse_4902_KnowledgeAnswersIntentQueryFreetextAnnotationSignalsIn",
        "KnowledgeAnswersIntentQueryFreetextAnnotationSignalsOut": "_contentwarehouse_4903_KnowledgeAnswersIntentQueryFreetextAnnotationSignalsOut",
        "GoogleInternalAppsWaldoV1alphaOfficeLocationIn": "_contentwarehouse_4904_GoogleInternalAppsWaldoV1alphaOfficeLocationIn",
        "GoogleInternalAppsWaldoV1alphaOfficeLocationOut": "_contentwarehouse_4905_GoogleInternalAppsWaldoV1alphaOfficeLocationOut",
        "GeostoreAddressComponentProtoIn": "_contentwarehouse_4906_GeostoreAddressComponentProtoIn",
        "GeostoreAddressComponentProtoOut": "_contentwarehouse_4907_GeostoreAddressComponentProtoOut",
        "GoogleCloudContentwarehouseV1QAResultHighlightIn": "_contentwarehouse_4908_GoogleCloudContentwarehouseV1QAResultHighlightIn",
        "GoogleCloudContentwarehouseV1QAResultHighlightOut": "_contentwarehouse_4909_GoogleCloudContentwarehouseV1QAResultHighlightOut",
        "AppsPeopleOzExternalMergedpeopleapiRosterMemberIn": "_contentwarehouse_4910_AppsPeopleOzExternalMergedpeopleapiRosterMemberIn",
        "AppsPeopleOzExternalMergedpeopleapiRosterMemberOut": "_contentwarehouse_4911_AppsPeopleOzExternalMergedpeopleapiRosterMemberOut",
        "ClassifierPornSiteDataIn": "_contentwarehouse_4912_ClassifierPornSiteDataIn",
        "ClassifierPornSiteDataOut": "_contentwarehouse_4913_ClassifierPornSiteDataOut",
        "AssistantApiCoreTypesProviderIn": "_contentwarehouse_4914_AssistantApiCoreTypesProviderIn",
        "AssistantApiCoreTypesProviderOut": "_contentwarehouse_4915_AssistantApiCoreTypesProviderOut",
        "NlpSemanticParsingModelsShoppingAssistantStoreIn": "_contentwarehouse_4916_NlpSemanticParsingModelsShoppingAssistantStoreIn",
        "NlpSemanticParsingModelsShoppingAssistantStoreOut": "_contentwarehouse_4917_NlpSemanticParsingModelsShoppingAssistantStoreOut",
        "IndexingEmbeddedContentRenderCacheStatsIn": "_contentwarehouse_4918_IndexingEmbeddedContentRenderCacheStatsIn",
        "IndexingEmbeddedContentRenderCacheStatsOut": "_contentwarehouse_4919_IndexingEmbeddedContentRenderCacheStatsOut",
        "NlpSemanticParsingModelsMediaEpisodeConstraintIn": "_contentwarehouse_4920_NlpSemanticParsingModelsMediaEpisodeConstraintIn",
        "NlpSemanticParsingModelsMediaEpisodeConstraintOut": "_contentwarehouse_4921_NlpSemanticParsingModelsMediaEpisodeConstraintOut",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclIn": "_contentwarehouse_4922_AppsPeopleOzExternalMergedpeopleapiFieldAclIn",
        "AppsPeopleOzExternalMergedpeopleapiFieldAclOut": "_contentwarehouse_4923_AppsPeopleOzExternalMergedpeopleapiFieldAclOut",
        "TelephoneNumberIn": "_contentwarehouse_4924_TelephoneNumberIn",
        "TelephoneNumberOut": "_contentwarehouse_4925_TelephoneNumberOut",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoIn": "_contentwarehouse_4926_AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoIn",
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoOut": "_contentwarehouse_4927_AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoOut",
        "GoogleInternalAppsWaldoV1alphaCustomLocationIn": "_contentwarehouse_4928_GoogleInternalAppsWaldoV1alphaCustomLocationIn",
        "GoogleInternalAppsWaldoV1alphaCustomLocationOut": "_contentwarehouse_4929_GoogleInternalAppsWaldoV1alphaCustomLocationOut",
        "QualityQrewritePrimaryCalendarAliasIn": "_contentwarehouse_4930_QualityQrewritePrimaryCalendarAliasIn",
        "QualityQrewritePrimaryCalendarAliasOut": "_contentwarehouse_4931_QualityQrewritePrimaryCalendarAliasOut",
        "AssistantApiOemCapabilitiesIn": "_contentwarehouse_4932_AssistantApiOemCapabilitiesIn",
        "AssistantApiOemCapabilitiesOut": "_contentwarehouse_4933_AssistantApiOemCapabilitiesOut",
        "NlpSemanticParsingProtoActionsOnGoogleSlotValueIn": "_contentwarehouse_4934_NlpSemanticParsingProtoActionsOnGoogleSlotValueIn",
        "NlpSemanticParsingProtoActionsOnGoogleSlotValueOut": "_contentwarehouse_4935_NlpSemanticParsingProtoActionsOnGoogleSlotValueOut",
        "BusinessHoursIntervalIn": "_contentwarehouse_4936_BusinessHoursIntervalIn",
        "BusinessHoursIntervalOut": "_contentwarehouse_4937_BusinessHoursIntervalOut",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleIn": "_contentwarehouse_4938_KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleIn",
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleOut": "_contentwarehouse_4939_KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleOut",
        "ScienceCitationSubjectIn": "_contentwarehouse_4940_ScienceCitationSubjectIn",
        "ScienceCitationSubjectOut": "_contentwarehouse_4941_ScienceCitationSubjectOut",
        "AppsPeopleOzExternalMergedpeopleapiMissionIn": "_contentwarehouse_4942_AppsPeopleOzExternalMergedpeopleapiMissionIn",
        "AppsPeopleOzExternalMergedpeopleapiMissionOut": "_contentwarehouse_4943_AppsPeopleOzExternalMergedpeopleapiMissionOut",
        "AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeIn": "_contentwarehouse_4944_AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeIn",
        "AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeOut": "_contentwarehouse_4945_AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeOut",
        "AssistantContextAppProviderIdIn": "_contentwarehouse_4946_AssistantContextAppProviderIdIn",
        "AssistantContextAppProviderIdOut": "_contentwarehouse_4947_AssistantContextAppProviderIdOut",
        "ScienceOceanViewCountryViewIn": "_contentwarehouse_4948_ScienceOceanViewCountryViewIn",
        "ScienceOceanViewCountryViewOut": "_contentwarehouse_4949_ScienceOceanViewCountryViewOut",
        "MustangReposWwwSnippetsOrganicListSnippetResponseIn": "_contentwarehouse_4950_MustangReposWwwSnippetsOrganicListSnippetResponseIn",
        "MustangReposWwwSnippetsOrganicListSnippetResponseOut": "_contentwarehouse_4951_MustangReposWwwSnippetsOrganicListSnippetResponseOut",
        "GoogleCloudDocumentaiV1DocumentStyleFontSizeIn": "_contentwarehouse_4952_GoogleCloudDocumentaiV1DocumentStyleFontSizeIn",
        "GoogleCloudDocumentaiV1DocumentStyleFontSizeOut": "_contentwarehouse_4953_GoogleCloudDocumentaiV1DocumentStyleFontSizeOut",
        "VideoContentSearchCaptionSpanAnchorSetFeaturesIn": "_contentwarehouse_4954_VideoContentSearchCaptionSpanAnchorSetFeaturesIn",
        "VideoContentSearchCaptionSpanAnchorSetFeaturesOut": "_contentwarehouse_4955_VideoContentSearchCaptionSpanAnchorSetFeaturesOut",
        "NlpMeaningMeaningRemodelingControlIn": "_contentwarehouse_4956_NlpMeaningMeaningRemodelingControlIn",
        "NlpMeaningMeaningRemodelingControlOut": "_contentwarehouse_4957_NlpMeaningMeaningRemodelingControlOut",
        "AppsPeopleOzExternalMergedpeopleapiCoverPhotoIn": "_contentwarehouse_4958_AppsPeopleOzExternalMergedpeopleapiCoverPhotoIn",
        "AppsPeopleOzExternalMergedpeopleapiCoverPhotoOut": "_contentwarehouse_4959_AppsPeopleOzExternalMergedpeopleapiCoverPhotoOut",
        "GoogleCloudContentwarehouseV1TimestampValueIn": "_contentwarehouse_4960_GoogleCloudContentwarehouseV1TimestampValueIn",
        "GoogleCloudContentwarehouseV1TimestampValueOut": "_contentwarehouse_4961_GoogleCloudContentwarehouseV1TimestampValueOut",
        "ExtraSnippetInfoResponseMatchInfoIn": "_contentwarehouse_4962_ExtraSnippetInfoResponseMatchInfoIn",
        "ExtraSnippetInfoResponseMatchInfoOut": "_contentwarehouse_4963_ExtraSnippetInfoResponseMatchInfoOut",
        "RepositoryWebrefMentionEvalInfoIn": "_contentwarehouse_4964_RepositoryWebrefMentionEvalInfoIn",
        "RepositoryWebrefMentionEvalInfoOut": "_contentwarehouse_4965_RepositoryWebrefMentionEvalInfoOut",
        "GeostorePropertyValueStatusProtoIn": "_contentwarehouse_4966_GeostorePropertyValueStatusProtoIn",
        "GeostorePropertyValueStatusProtoOut": "_contentwarehouse_4967_GeostorePropertyValueStatusProtoOut",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn": "_contentwarehouse_4968_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn",
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut": "_contentwarehouse_4969_IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut",
        "TeragoogleDocumentInfoSectionIn": "_contentwarehouse_4970_TeragoogleDocumentInfoSectionIn",
        "TeragoogleDocumentInfoSectionOut": "_contentwarehouse_4971_TeragoogleDocumentInfoSectionOut",
        "GeostoreFlowLineProtoIn": "_contentwarehouse_4972_GeostoreFlowLineProtoIn",
        "GeostoreFlowLineProtoOut": "_contentwarehouse_4973_GeostoreFlowLineProtoOut",
        "AssistantApiSettingsDowntimeScheduleIn": "_contentwarehouse_4974_AssistantApiSettingsDowntimeScheduleIn",
        "AssistantApiSettingsDowntimeScheduleOut": "_contentwarehouse_4975_AssistantApiSettingsDowntimeScheduleOut",
        "GoodocLabelIn": "_contentwarehouse_4976_GoodocLabelIn",
        "GoodocLabelOut": "_contentwarehouse_4977_GoodocLabelOut",
        "GoogleCloudContentwarehouseV1DataUpdateActionIn": "_contentwarehouse_4978_GoogleCloudContentwarehouseV1DataUpdateActionIn",
        "GoogleCloudContentwarehouseV1DataUpdateActionOut": "_contentwarehouse_4979_GoogleCloudContentwarehouseV1DataUpdateActionOut",
        "ResearchScamQueryResponseIn": "_contentwarehouse_4980_ResearchScamQueryResponseIn",
        "ResearchScamQueryResponseOut": "_contentwarehouse_4981_ResearchScamQueryResponseOut",
        "MediaIndexVideoCoreSignalsIn": "_contentwarehouse_4982_MediaIndexVideoCoreSignalsIn",
        "MediaIndexVideoCoreSignalsOut": "_contentwarehouse_4983_MediaIndexVideoCoreSignalsOut",
        "AnchorsAnchorIn": "_contentwarehouse_4984_AnchorsAnchorIn",
        "AnchorsAnchorOut": "_contentwarehouse_4985_AnchorsAnchorOut",
        "CopleySourceTypeListIn": "_contentwarehouse_4986_CopleySourceTypeListIn",
        "CopleySourceTypeListOut": "_contentwarehouse_4987_CopleySourceTypeListOut",
        "IndexingEmbeddedContentFetchHostCountIn": "_contentwarehouse_4988_IndexingEmbeddedContentFetchHostCountIn",
        "IndexingEmbeddedContentFetchHostCountOut": "_contentwarehouse_4989_IndexingEmbeddedContentFetchHostCountOut",
        "QualitySitemapTwoLevelTargetIn": "_contentwarehouse_4990_QualitySitemapTwoLevelTargetIn",
        "QualitySitemapTwoLevelTargetOut": "_contentwarehouse_4991_QualitySitemapTwoLevelTargetOut",
        "GoogleAssistantAccessoryV1ResponseConfigIn": "_contentwarehouse_4992_GoogleAssistantAccessoryV1ResponseConfigIn",
        "GoogleAssistantAccessoryV1ResponseConfigOut": "_contentwarehouse_4993_GoogleAssistantAccessoryV1ResponseConfigOut",
        "VideoPerDocDataIn": "_contentwarehouse_4994_VideoPerDocDataIn",
        "VideoPerDocDataOut": "_contentwarehouse_4995_VideoPerDocDataOut",
        "CountrySalientCountryIn": "_contentwarehouse_4996_CountrySalientCountryIn",
        "CountrySalientCountryOut": "_contentwarehouse_4997_CountrySalientCountryOut",
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationIn": "_contentwarehouse_4998_YoutubeCommentsSentimentSentimentEntitySentimentAnnotationIn",
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationOut": "_contentwarehouse_4999_YoutubeCommentsSentimentSentimentEntitySentimentAnnotationOut",
        "SafesearchInternalImageSignalsIn": "_contentwarehouse_5000_SafesearchInternalImageSignalsIn",
        "SafesearchInternalImageSignalsOut": "_contentwarehouse_5001_SafesearchInternalImageSignalsOut",
        "OfficialPagesQuerySetIn": "_contentwarehouse_5002_OfficialPagesQuerySetIn",
        "OfficialPagesQuerySetOut": "_contentwarehouse_5003_OfficialPagesQuerySetOut",
        "AbuseiamManualReviewerInfoIn": "_contentwarehouse_5004_AbuseiamManualReviewerInfoIn",
        "AbuseiamManualReviewerInfoOut": "_contentwarehouse_5005_AbuseiamManualReviewerInfoOut",
        "FreebaseCitationIn": "_contentwarehouse_5006_FreebaseCitationIn",
        "FreebaseCitationOut": "_contentwarehouse_5007_FreebaseCitationOut",
        "GeostoreVerticalOrderingProtoIn": "_contentwarehouse_5008_GeostoreVerticalOrderingProtoIn",
        "GeostoreVerticalOrderingProtoOut": "_contentwarehouse_5009_GeostoreVerticalOrderingProtoOut",
        "AppsPeopleOzExternalMergedpeopleapiConnectionReminderIn": "_contentwarehouse_5010_AppsPeopleOzExternalMergedpeopleapiConnectionReminderIn",
        "AppsPeopleOzExternalMergedpeopleapiConnectionReminderOut": "_contentwarehouse_5011_AppsPeopleOzExternalMergedpeopleapiConnectionReminderOut",
        "ImageRepositoryAnimatedImagePerdocDataIn": "_contentwarehouse_5012_ImageRepositoryAnimatedImagePerdocDataIn",
        "ImageRepositoryAnimatedImagePerdocDataOut": "_contentwarehouse_5013_ImageRepositoryAnimatedImagePerdocDataOut",
        "PeoplestackFlexorgsProtoInternalExternalStateStatusIn": "_contentwarehouse_5014_PeoplestackFlexorgsProtoInternalExternalStateStatusIn",
        "PeoplestackFlexorgsProtoInternalExternalStateStatusOut": "_contentwarehouse_5015_PeoplestackFlexorgsProtoInternalExternalStateStatusOut",
        "RepositoryAnnotationsRdfaBreadcrumbsIn": "_contentwarehouse_5016_RepositoryAnnotationsRdfaBreadcrumbsIn",
        "RepositoryAnnotationsRdfaBreadcrumbsOut": "_contentwarehouse_5017_RepositoryAnnotationsRdfaBreadcrumbsOut",
        "GoogleCloudDocumentaiV1DocumentPageLayoutIn": "_contentwarehouse_5018_GoogleCloudDocumentaiV1DocumentPageLayoutIn",
        "GoogleCloudDocumentaiV1DocumentPageLayoutOut": "_contentwarehouse_5019_GoogleCloudDocumentaiV1DocumentPageLayoutOut",
        "AssistantApiCoreTypesMessageNotificationIn": "_contentwarehouse_5020_AssistantApiCoreTypesMessageNotificationIn",
        "AssistantApiCoreTypesMessageNotificationOut": "_contentwarehouse_5021_AssistantApiCoreTypesMessageNotificationOut",
        "GoogleCloudContentwarehouseV1QAResultIn": "_contentwarehouse_5022_GoogleCloudContentwarehouseV1QAResultIn",
        "GoogleCloudContentwarehouseV1QAResultOut": "_contentwarehouse_5023_GoogleCloudContentwarehouseV1QAResultOut",
        "NlpSaftMeasureIn": "_contentwarehouse_5024_NlpSaftMeasureIn",
        "NlpSaftMeasureOut": "_contentwarehouse_5025_NlpSaftMeasureOut",
        "DrishtiCompressedFeatureIn": "_contentwarehouse_5026_DrishtiCompressedFeatureIn",
        "DrishtiCompressedFeatureOut": "_contentwarehouse_5027_DrishtiCompressedFeatureOut",
        "OceanPerDocDataIn": "_contentwarehouse_5028_OceanPerDocDataIn",
        "OceanPerDocDataOut": "_contentwarehouse_5029_OceanPerDocDataOut",
        "RepositoryWebrefEntityJoinIn": "_contentwarehouse_5030_RepositoryWebrefEntityJoinIn",
        "RepositoryWebrefEntityJoinOut": "_contentwarehouse_5031_RepositoryWebrefEntityJoinOut",
        "KnowledgeAnswersOpaqueCalendarEventTypeIn": "_contentwarehouse_5032_KnowledgeAnswersOpaqueCalendarEventTypeIn",
        "KnowledgeAnswersOpaqueCalendarEventTypeOut": "_contentwarehouse_5033_KnowledgeAnswersOpaqueCalendarEventTypeOut",
        "GoodocCharLabelIn": "_contentwarehouse_5034_GoodocCharLabelIn",
        "GoodocCharLabelOut": "_contentwarehouse_5035_GoodocCharLabelOut",
    }

    types = {}
    types["ErrorResponse"] = t.struct(
        {"code": t.integer(), "message": t.string(), "status": t.string()}
    ).named(renames["ErrorResponse"])
    types["KnowledgeAnswersRangeConstraintRangeEndpointIn"] = t.struct(
        {"value": t.number().optional(), "isExclusive": t.boolean().optional()}
    ).named(renames["KnowledgeAnswersRangeConstraintRangeEndpointIn"])
    types["KnowledgeAnswersRangeConstraintRangeEndpointOut"] = t.struct(
        {
            "value": t.number().optional(),
            "isExclusive": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersRangeConstraintRangeEndpointOut"])
    types["TrawlerFetchBodyDataIn"] = t.struct(
        {
            "content": t.string(),
            "compression": t.string(),
            "uncompressedSize": t.string().optional(),
        }
    ).named(renames["TrawlerFetchBodyDataIn"])
    types["TrawlerFetchBodyDataOut"] = t.struct(
        {
            "content": t.string(),
            "compression": t.string(),
            "uncompressedSize": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchBodyDataOut"])
    types["SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataIn"] = t.struct(
        {
            "availabilities": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesIn"]
            )
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataIn"])
    types["SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataOut"] = t.struct(
        {
            "availabilities": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataOut"])
    types["KnowledgeAnswersMeasurementTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersMeasurementTypeIn"])
    types["KnowledgeAnswersMeasurementTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersMeasurementTypeOut"])
    types["ResearchScienceSearchReplicaIn"] = t.struct(
        {
            "url": t.string().optional(),
            "catalogName": t.string().optional(),
            "catalogUrl": t.string().optional(),
            "indexInCluster": t.integer().optional(),
        }
    ).named(renames["ResearchScienceSearchReplicaIn"])
    types["ResearchScienceSearchReplicaOut"] = t.struct(
        {
            "url": t.string().optional(),
            "catalogName": t.string().optional(),
            "catalogUrl": t.string().optional(),
            "indexInCluster": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchReplicaOut"])
    types["ImageUnderstandingIndexingMetaDataIn"] = t.struct(
        {"floatValue": t.number(), "name": t.string(), "stringValue": t.string()}
    ).named(renames["ImageUnderstandingIndexingMetaDataIn"])
    types["ImageUnderstandingIndexingMetaDataOut"] = t.struct(
        {
            "floatValue": t.number(),
            "name": t.string(),
            "stringValue": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingMetaDataOut"])
    types["GoogleTypeColorIn"] = t.struct(
        {
            "green": t.number().optional(),
            "blue": t.number().optional(),
            "alpha": t.number().optional(),
            "red": t.number().optional(),
        }
    ).named(renames["GoogleTypeColorIn"])
    types["GoogleTypeColorOut"] = t.struct(
        {
            "green": t.number().optional(),
            "blue": t.number().optional(),
            "alpha": t.number().optional(),
            "red": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeColorOut"])
    types["SecurityCredentialsRbacRoleProtoIn"] = t.struct(
        {
            "rbacRoleName": t.string().optional(),
            "rbacNamespace": t.string().optional(),
            "objectId": t.string(),
            "name": t.string(),
        }
    ).named(renames["SecurityCredentialsRbacRoleProtoIn"])
    types["SecurityCredentialsRbacRoleProtoOut"] = t.struct(
        {
            "rbacRoleName": t.string().optional(),
            "rbacNamespace": t.string().optional(),
            "objectId": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsRbacRoleProtoOut"])
    types["AbuseiamVerdictRestrictionIn"] = t.struct(
        {
            "context": t.array(
                t.proxy(renames["AbuseiamVerdictRestrictionContextIn"])
            ).optional(),
            "userRestriction": t.proxy(renames["AbuseiamUserRestrictionIn"]).optional(),
        }
    ).named(renames["AbuseiamVerdictRestrictionIn"])
    types["AbuseiamVerdictRestrictionOut"] = t.struct(
        {
            "context": t.array(
                t.proxy(renames["AbuseiamVerdictRestrictionContextOut"])
            ).optional(),
            "userRestriction": t.proxy(
                renames["AbuseiamUserRestrictionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamVerdictRestrictionOut"])
    types["QualityNsrNsrChunksWithSourceInfoIn"] = t.struct(
        {
            "nsrChunks": t.proxy(renames["QualityNsrNsrChunksProtoIn"]),
            "siteChunkSource": t.string().optional(),
        }
    ).named(renames["QualityNsrNsrChunksWithSourceInfoIn"])
    types["QualityNsrNsrChunksWithSourceInfoOut"] = t.struct(
        {
            "nsrChunks": t.proxy(renames["QualityNsrNsrChunksProtoOut"]),
            "siteChunkSource": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNsrChunksWithSourceInfoOut"])
    types["IndexingUrlPatternUrlTreeUrlTreeKeyIn"] = t.struct(
        {"domain": t.string(), "crawlerId": t.string(), "hostname": t.string()}
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeKeyIn"])
    types["IndexingUrlPatternUrlTreeUrlTreeKeyOut"] = t.struct(
        {
            "domain": t.string(),
            "crawlerId": t.string(),
            "hostname": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeKeyOut"])
    types["NlpSemanticParsingModelsNarrativeNewsNewsProviderIn"] = t.struct(
        {
            "rawText": t.string(),
            "data": t.proxy(
                renames["QualityActionsNewsProviderAnnotationDataIn"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsNarrativeNewsNewsProviderIn"])
    types["NlpSemanticParsingModelsNarrativeNewsNewsProviderOut"] = t.struct(
        {
            "rawText": t.string(),
            "data": t.proxy(
                renames["QualityActionsNewsProviderAnnotationDataOut"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsNarrativeNewsNewsProviderOut"])
    types["DrishtiVesperUserReportUserReportedThumbnailIn"] = t.struct(
        {
            "score": t.proxy(renames["DrishtiVesperUserReportModelScoreIn"]),
            "reportType": t.string(),
            "humanLabel": t.proxy(renames["DrishtiVesperUserReportHumanLabelIn"]),
            "reportScore": t.proxy(renames["DrishtiVesperUserReportModelScoreIn"]),
            "useCase": t.string(),
            "duration": t.integer().optional(),
            "rawHumanLabels": t.array(
                t.proxy(renames["DrishtiVesperUserReportHumanLabelIn"])
            ),
            "denseFeatures": t.array(t.number()),
            "impressions": t.integer().optional(),
            "volume": t.integer().optional(),
            "needHumanLabel": t.boolean().optional(),
        }
    ).named(renames["DrishtiVesperUserReportUserReportedThumbnailIn"])
    types["DrishtiVesperUserReportUserReportedThumbnailOut"] = t.struct(
        {
            "score": t.proxy(renames["DrishtiVesperUserReportModelScoreOut"]),
            "reportType": t.string(),
            "humanLabel": t.proxy(renames["DrishtiVesperUserReportHumanLabelOut"]),
            "reportScore": t.proxy(renames["DrishtiVesperUserReportModelScoreOut"]),
            "useCase": t.string(),
            "duration": t.integer().optional(),
            "rawHumanLabels": t.array(
                t.proxy(renames["DrishtiVesperUserReportHumanLabelOut"])
            ),
            "denseFeatures": t.array(t.number()),
            "impressions": t.integer().optional(),
            "volume": t.integer().optional(),
            "needHumanLabel": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperUserReportUserReportedThumbnailOut"])
    types["PhotosVisionObjectrecROIIn"] = t.struct(
        {
            "yMax": t.integer(),
            "xMax": t.integer(),
            "xMin": t.integer(),
            "yMin": t.integer(),
        }
    ).named(renames["PhotosVisionObjectrecROIIn"])
    types["PhotosVisionObjectrecROIOut"] = t.struct(
        {
            "yMax": t.integer(),
            "xMax": t.integer(),
            "xMin": t.integer(),
            "yMin": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecROIOut"])
    types["AppsPeopleOzExternalMergedpeopleapiInterestIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInterestIn"])
    types["AppsPeopleOzExternalMergedpeopleapiInterestOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInterestOut"])
    types["KnowledgeAnswersIntentQueryFunctionCallSignalsIn"] = t.struct(
        {
            "dedupedFuncalls": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryFunctionCallIn"])
            ).optional(),
            "highConfidence": t.boolean().optional(),
            "role": t.string(),
            "isDisambiguationCardIntent": t.boolean().optional(),
            "prefulfillmentSignals": t.proxy(
                renames["AssistantPrefulfillmentRankerPrefulfillmentSignalsIn"]
            ).optional(),
            "argumentComposingMid": t.string().optional(),
            "isCloseInterpretation": t.boolean().optional(),
            "isUiCompositionIntent": t.boolean().optional(),
            "groundingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryGroundingSignalsIn"]
            ).optional(),
            "confidenceLevel": t.string(),
            "responseMeaningSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn"
                ]
            ).optional(),
            "intentAnnotationSources": t.array(t.string()),
            "referentialResolution": t.proxy(
                renames["KnowledgeAnswersDialogReferentialResolutionIn"]
            ).optional(),
            "refxSummaryNodeId": t.string().optional(),
            "isDisambiguationIntent": t.boolean().optional(),
            "isNeuralCategoricalInterpretation": t.boolean().optional(),
            "osrpJourneyTag": t.string().optional(),
            "conceptEntityMid": t.string().optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsIn"]
            ).optional(),
            "expressionStatus": t.proxy(
                renames["NlpSemanticParsingExpressionStatusIn"]
            ).optional(),
            "parsingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryParsingSignalsIn"]
            ).optional(),
            "freefolksTrigger": t.string(),
            "signalsFallbackIntents": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQuerySignalComputationFallbackIntentIn"
                    ]
                )
            ).optional(),
            "intentComposingMid": t.string().optional(),
            "attributeSignals": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryAttributeSignalIn"])
            ).optional(),
            "resultSupport": t.array(
                t.proxy(renames["UniversalsearchNewPackerKnowledgeResultSupportIn"])
            ).optional(),
            "intentRelevantMid": t.array(t.string()).optional(),
            "localSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryLocalSignalsIn"]
            ).optional(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "selectedByPrefulfillmentRanking": t.boolean().optional(),
            "prefulfillmentRankingScore": t.number().optional(),
            "intentProvenance": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentProvenanceIn"])
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryFunctionCallSignalsIn"])
    types["KnowledgeAnswersIntentQueryFunctionCallSignalsOut"] = t.struct(
        {
            "dedupedFuncalls": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryFunctionCallOut"])
            ).optional(),
            "highConfidence": t.boolean().optional(),
            "role": t.string(),
            "isDisambiguationCardIntent": t.boolean().optional(),
            "prefulfillmentSignals": t.proxy(
                renames["AssistantPrefulfillmentRankerPrefulfillmentSignalsOut"]
            ).optional(),
            "argumentComposingMid": t.string().optional(),
            "isCloseInterpretation": t.boolean().optional(),
            "isUiCompositionIntent": t.boolean().optional(),
            "groundingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryGroundingSignalsOut"]
            ).optional(),
            "confidenceLevel": t.string(),
            "responseMeaningSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut"
                ]
            ).optional(),
            "intentAnnotationSources": t.array(t.string()),
            "referentialResolution": t.proxy(
                renames["KnowledgeAnswersDialogReferentialResolutionOut"]
            ).optional(),
            "refxSummaryNodeId": t.string().optional(),
            "isDisambiguationIntent": t.boolean().optional(),
            "isNeuralCategoricalInterpretation": t.boolean().optional(),
            "osrpJourneyTag": t.string().optional(),
            "conceptEntityMid": t.string().optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsOut"]
            ).optional(),
            "expressionStatus": t.proxy(
                renames["NlpSemanticParsingExpressionStatusOut"]
            ).optional(),
            "parsingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryParsingSignalsOut"]
            ).optional(),
            "freefolksTrigger": t.string(),
            "signalsFallbackIntents": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQuerySignalComputationFallbackIntentOut"
                    ]
                )
            ).optional(),
            "intentComposingMid": t.string().optional(),
            "attributeSignals": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryAttributeSignalOut"])
            ).optional(),
            "resultSupport": t.array(
                t.proxy(renames["UniversalsearchNewPackerKnowledgeResultSupportOut"])
            ).optional(),
            "intentRelevantMid": t.array(t.string()).optional(),
            "localSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryLocalSignalsOut"]
            ).optional(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "selectedByPrefulfillmentRanking": t.boolean().optional(),
            "prefulfillmentRankingScore": t.number().optional(),
            "intentProvenance": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentProvenanceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryFunctionCallSignalsOut"])
    types["HomeGraphCommonRoutingTableIn"] = t.struct(
        {
            "supportedRoutes": t.array(
                t.proxy(renames["HomeGraphCommonRouteIn"])
            ).optional()
        }
    ).named(renames["HomeGraphCommonRoutingTableIn"])
    types["HomeGraphCommonRoutingTableOut"] = t.struct(
        {
            "supportedRoutes": t.array(
                t.proxy(renames["HomeGraphCommonRouteOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HomeGraphCommonRoutingTableOut"])
    types["AssistantApiCastCapabilitiesIn"] = t.struct(
        {
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "dynamicGroupsSupported": t.boolean().optional(),
            "overlayApplicationsSupported": t.boolean().optional(),
            "cameraReceiverCapabilities": t.proxy(
                renames["AssistantApiCameraReceiverCapabilitiesIn"]
            ).optional(),
            "yetiGamingSupported": t.boolean().optional(),
            "groupType": t.string(),
            "canReceiveCast": t.boolean().optional(),
            "cameraStreamSupportedProtocols": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantApiCastCapabilitiesIn"])
    types["AssistantApiCastCapabilitiesOut"] = t.struct(
        {
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "dynamicGroupsSupported": t.boolean().optional(),
            "overlayApplicationsSupported": t.boolean().optional(),
            "cameraReceiverCapabilities": t.proxy(
                renames["AssistantApiCameraReceiverCapabilitiesOut"]
            ).optional(),
            "yetiGamingSupported": t.boolean().optional(),
            "groupType": t.string(),
            "canReceiveCast": t.boolean().optional(),
            "cameraStreamSupportedProtocols": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCastCapabilitiesOut"])
    types["GeostoreVehicleAttributeFilterProtoIn"] = t.struct(
        {
            "vehicleWeight": t.array(
                t.proxy(renames["GeostoreWeightComparisonProtoIn"])
            ).optional(),
            "trailerLength": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoIn"])
            ).optional(),
            "numTrailers": t.array(
                t.proxy(renames["GeostoreCountComparisonProtoIn"])
            ).optional(),
            "vehicleLength": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoIn"])
            ).optional(),
            "vehicleWidth": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoIn"])
            ).optional(),
            "hazardousGoods": t.array(t.string()).optional(),
            "hasTrailer": t.boolean().optional(),
            "vehicleHeight": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoIn"])
            ).optional(),
            "axleCount": t.array(
                t.proxy(renames["GeostoreCountComparisonProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreVehicleAttributeFilterProtoIn"])
    types["GeostoreVehicleAttributeFilterProtoOut"] = t.struct(
        {
            "vehicleWeight": t.array(
                t.proxy(renames["GeostoreWeightComparisonProtoOut"])
            ).optional(),
            "trailerLength": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoOut"])
            ).optional(),
            "numTrailers": t.array(
                t.proxy(renames["GeostoreCountComparisonProtoOut"])
            ).optional(),
            "vehicleLength": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoOut"])
            ).optional(),
            "vehicleWidth": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoOut"])
            ).optional(),
            "hazardousGoods": t.array(t.string()).optional(),
            "hasTrailer": t.boolean().optional(),
            "vehicleHeight": t.array(
                t.proxy(renames["GeostoreDimensionComparisonProtoOut"])
            ).optional(),
            "axleCount": t.array(
                t.proxy(renames["GeostoreCountComparisonProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreVehicleAttributeFilterProtoOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueIn"] = t.struct(
        {
            "typeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleTypedValueIn"]
            ).optional(),
            "stringValue": t.string().optional(),
            "dateTimeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueOut"] = t.struct(
        {
            "typeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleTypedValueOut"]
            ).optional(),
            "stringValue": t.string().optional(),
            "dateTimeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueOut"])
    types["RepositoryWebrefAnnotationRatingsIn"] = t.struct(
        {
            "docLevelRelevanceRatings": t.proxy(
                renames["RepositoryWebrefDocLevelRelevanceRatingsIn"]
            )
        }
    ).named(renames["RepositoryWebrefAnnotationRatingsIn"])
    types["RepositoryWebrefAnnotationRatingsOut"] = t.struct(
        {
            "docLevelRelevanceRatings": t.proxy(
                renames["RepositoryWebrefDocLevelRelevanceRatingsOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotationRatingsOut"])
    types["VideoContentSearchCaptionInfoIn"] = t.struct(
        {
            "asrCaption": t.array(t.proxy(renames["VideoContentSearchAsrCaptionIn"])),
            "saftDocument": t.proxy(renames["NlpSaftDocumentIn"]),
        }
    ).named(renames["VideoContentSearchCaptionInfoIn"])
    types["VideoContentSearchCaptionInfoOut"] = t.struct(
        {
            "asrCaption": t.array(t.proxy(renames["VideoContentSearchAsrCaptionOut"])),
            "saftDocument": t.proxy(renames["NlpSaftDocumentOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionInfoOut"])
    types["HtmlrenderWebkitHeadlessProtoModalDialogEventIn"] = t.struct(
        {
            "confirmed": t.boolean().optional(),
            "type": t.string(),
            "message": t.string(),
            "result": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoModalDialogEventIn"])
    types["HtmlrenderWebkitHeadlessProtoModalDialogEventOut"] = t.struct(
        {
            "confirmed": t.boolean().optional(),
            "type": t.string(),
            "message": t.string(),
            "result": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoModalDialogEventOut"])
    types["RepositoryWebrefTripleMentionIn"] = t.struct(
        {
            "scopeFprint": t.string().optional(),
            "scopeEnd": t.integer(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "predMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionIn"]
            ).optional(),
            "scopeBegin": t.integer().optional(),
            "valueMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionIn"]
            ).optional(),
            "subMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefTripleMentionIn"])
    types["RepositoryWebrefTripleMentionOut"] = t.struct(
        {
            "scopeFprint": t.string().optional(),
            "scopeEnd": t.integer(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "predMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionOut"]
            ).optional(),
            "scopeBegin": t.integer().optional(),
            "valueMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionOut"]
            ).optional(),
            "subMention": t.proxy(
                renames["RepositoryWebrefSegmentMentionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefTripleMentionOut"])
    types["NlpSemanticParsingLocalJoinerIn"] = t.struct(
        {
            "type": t.string(),
            "startByteForConversion": t.integer().optional(),
            "text": t.string().optional(),
            "numBytesForConversion": t.integer(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
        }
    ).named(renames["NlpSemanticParsingLocalJoinerIn"])
    types["NlpSemanticParsingLocalJoinerOut"] = t.struct(
        {
            "type": t.string(),
            "startByteForConversion": t.integer().optional(),
            "text": t.string().optional(),
            "numBytesForConversion": t.integer(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalJoinerOut"])
    types["RepositoryWebrefClusterProtoMidListRuleIn"] = t.struct(
        {"id": t.string().optional(), "mid": t.array(t.string()).optional()}
    ).named(renames["RepositoryWebrefClusterProtoMidListRuleIn"])
    types["RepositoryWebrefClusterProtoMidListRuleOut"] = t.struct(
        {
            "id": t.string().optional(),
            "mid": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoMidListRuleOut"])
    types["SocialGraphApiProtoMonthlyRecurrenceIn"] = t.struct(
        {
            "monthlyWeekdayRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyWeekdayRecurrenceIn"]
            ),
            "monthlyDayRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyDayRecurrenceIn"]
            ),
        }
    ).named(renames["SocialGraphApiProtoMonthlyRecurrenceIn"])
    types["SocialGraphApiProtoMonthlyRecurrenceOut"] = t.struct(
        {
            "monthlyWeekdayRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyWeekdayRecurrenceOut"]
            ),
            "monthlyDayRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyDayRecurrenceOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoMonthlyRecurrenceOut"])
    types["VideoVideoStreamInfoMetadataIn"] = t.struct(
        {
            "luts": t.proxy(renames["VideoVideoStreamInfoMetadataLutAttachmentsIn"]),
            "videoFpa": t.proxy(
                renames["VideoFileFramePackingArrangementIn"]
            ).optional(),
        }
    ).named(renames["VideoVideoStreamInfoMetadataIn"])
    types["VideoVideoStreamInfoMetadataOut"] = t.struct(
        {
            "luts": t.proxy(renames["VideoVideoStreamInfoMetadataLutAttachmentsOut"]),
            "videoFpa": t.proxy(
                renames["VideoFileFramePackingArrangementOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoMetadataOut"])
    types["ResearchScienceSearchLicenseIn"] = t.struct(
        {
            "text": t.string().optional(),
            "licenseMid": t.string().optional(),
            "url": t.string().optional(),
            "licenseClass": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["ResearchScienceSearchLicenseIn"])
    types["ResearchScienceSearchLicenseOut"] = t.struct(
        {
            "text": t.string().optional(),
            "licenseMid": t.string().optional(),
            "url": t.string().optional(),
            "licenseClass": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchLicenseOut"])
    types["GeostoreSkiLiftProtoIn"] = t.struct({"type": t.string().optional()}).named(
        renames["GeostoreSkiLiftProtoIn"]
    )
    types["GeostoreSkiLiftProtoOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSkiLiftProtoOut"])
    types["StorageGraphBfgPublicInformationMetadataIn"] = t.struct(
        {
            "lastVerifiedDate": t.string().optional(),
            "attributionUrl": t.array(t.string()).optional(),
        }
    ).named(renames["StorageGraphBfgPublicInformationMetadataIn"])
    types["StorageGraphBfgPublicInformationMetadataOut"] = t.struct(
        {
            "lastVerifiedDate": t.string().optional(),
            "attributionUrl": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgPublicInformationMetadataOut"])
    types["MediaIndexXtagListIn"] = t.struct(
        {"xtags": t.array(t.proxy(renames["MediaIndexXtagIn"]))}
    ).named(renames["MediaIndexXtagListIn"])
    types["MediaIndexXtagListOut"] = t.struct(
        {
            "xtags": t.array(t.proxy(renames["MediaIndexXtagOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexXtagListOut"])
    types["AssistantGroundingRankerMediaGroundingProviderFeaturesIn"] = t.struct(
        {
            "ambiguityClassifier": t.string().optional(),
            "hasTypeSemanticEdge": t.boolean().optional(),
            "isSeedRadio": t.boolean().optional(),
            "albumReleaseType": t.string().optional(),
            "isCastVideo": t.boolean().optional(),
            "youtubeConfidenceScore": t.number(),
            "isSeedRadioRequest": t.boolean().optional(),
            "mediaContentType": t.string().optional(),
            "type": t.string().optional(),
            "mscRate": t.number().optional(),
            "scubedPSaiTvm": t.number().optional(),
            "scubedPSaiMusic": t.number().optional(),
            "isMediaSearchQuerySubsetOfEntityNameAndArtist": t.boolean().optional(),
        }
    ).named(renames["AssistantGroundingRankerMediaGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerMediaGroundingProviderFeaturesOut"] = t.struct(
        {
            "ambiguityClassifier": t.string().optional(),
            "hasTypeSemanticEdge": t.boolean().optional(),
            "isSeedRadio": t.boolean().optional(),
            "albumReleaseType": t.string().optional(),
            "isCastVideo": t.boolean().optional(),
            "youtubeConfidenceScore": t.number(),
            "isSeedRadioRequest": t.boolean().optional(),
            "mediaContentType": t.string().optional(),
            "type": t.string().optional(),
            "mscRate": t.number().optional(),
            "scubedPSaiTvm": t.number().optional(),
            "scubedPSaiMusic": t.number().optional(),
            "isMediaSearchQuerySubsetOfEntityNameAndArtist": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerMediaGroundingProviderFeaturesOut"])
    types["GeostoreOntologyRawGConceptInstanceProtoIn"] = t.struct(
        {
            "instance": t.proxy(renames["GeostoreGConceptInstanceProtoIn"]).optional(),
            "isAddedByEdit": t.boolean().optional(),
            "provider": t.string().optional(),
            "isInferred": t.boolean().optional(),
            "sourceDataset": t.string(),
        }
    ).named(renames["GeostoreOntologyRawGConceptInstanceProtoIn"])
    types["GeostoreOntologyRawGConceptInstanceProtoOut"] = t.struct(
        {
            "instance": t.proxy(renames["GeostoreGConceptInstanceProtoOut"]).optional(),
            "isAddedByEdit": t.boolean().optional(),
            "provider": t.string().optional(),
            "isInferred": t.boolean().optional(),
            "sourceDataset": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreOntologyRawGConceptInstanceProtoOut"])
    types[
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsIn"
    ] = t.struct({"traits": t.array(t.string())}).named(
        renames[
            "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsIn"
        ]
    )
    types[
        "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsOut"
    ] = t.struct(
        {
            "traits": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraitsOut"
        ]
    )
    types["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataIn"] = t.struct(
        {
            "structuredPhone": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneIn"]
            ).optional()
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataOut"] = t.struct(
        {
            "structuredPhone": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataOut"])
    types["QualityPreviewSnippetDocumentFeaturesIn"] = t.struct(
        {
            "leadingtextDistanceScore": t.number(),
            "salientPositionBoostScore": t.number(),
            "unstableTokensScore": t.number(),
            "metaBoostScore": t.number(),
            "experimentalTitleSalientTermsScore": t.number(),
            "salientTermsScore": t.number(),
            "schemaOrgDescriptionBoostScore": t.number(),
        }
    ).named(renames["QualityPreviewSnippetDocumentFeaturesIn"])
    types["QualityPreviewSnippetDocumentFeaturesOut"] = t.struct(
        {
            "leadingtextDistanceScore": t.number(),
            "salientPositionBoostScore": t.number(),
            "unstableTokensScore": t.number(),
            "metaBoostScore": t.number(),
            "experimentalTitleSalientTermsScore": t.number(),
            "salientTermsScore": t.number(),
            "schemaOrgDescriptionBoostScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetDocumentFeaturesOut"])
    types["KnowledgeAnswersIntentQueryCoreferenceIn"] = t.struct(
        {"argPath": t.proxy(renames["KnowledgeAnswersIntentQueryArgPathIn"]).optional()}
    ).named(renames["KnowledgeAnswersIntentQueryCoreferenceIn"])
    types["KnowledgeAnswersIntentQueryCoreferenceOut"] = t.struct(
        {
            "argPath": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgPathOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryCoreferenceOut"])
    types["AssistantApiSettingsDeviceFeatureFiltersIn"] = t.struct(
        {
            "targets": t.array(t.string()).optional(),
            "enabled": t.boolean().optional(),
            "featureFilters": t.proxy(
                renames["AssistantApiSettingsFeatureFiltersIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceFeatureFiltersIn"])
    types["AssistantApiSettingsDeviceFeatureFiltersOut"] = t.struct(
        {
            "targets": t.array(t.string()).optional(),
            "enabled": t.boolean().optional(),
            "featureFilters": t.proxy(
                renames["AssistantApiSettingsFeatureFiltersOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceFeatureFiltersOut"])
    types["GoogleAssistantEmbeddedV1TimersIn"] = t.struct(
        {
            "timers": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1TimerIn"])
            ).optional(),
            "stateFetchError": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1TimersIn"])
    types["GoogleAssistantEmbeddedV1TimersOut"] = t.struct(
        {
            "timers": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1TimerOut"])
            ).optional(),
            "stateFetchError": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1TimersOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSkillsIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSkillsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSkillsOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSkillsOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityIn"
    ] = t.struct(
        {
            "attentionalEntityKey": t.string().optional(),
            "mentionProperties": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesIn"]
            ).optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityIn"]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityOut"
    ] = t.struct(
        {
            "attentionalEntityKey": t.string().optional(),
            "mentionProperties": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityOut"]
    )
    types["GeostoreCurveConnectionProtoCircleParamsIn"] = t.struct(
        {"radius": t.number().optional()}
    ).named(renames["GeostoreCurveConnectionProtoCircleParamsIn"])
    types["GeostoreCurveConnectionProtoCircleParamsOut"] = t.struct(
        {
            "radius": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCurveConnectionProtoCircleParamsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSearchProfileIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "searchProfileData": t.proxy(
                renames["SocialGraphApiProtoSearchProfileDataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSearchProfileIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSearchProfileOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "searchProfileData": t.proxy(
                renames["SocialGraphApiProtoSearchProfileDataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSearchProfileOut"])
    types["KnowledgeAnswersOpaqueOnDeviceTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueOnDeviceTypeIn"])
    types["KnowledgeAnswersOpaqueOnDeviceTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueOnDeviceTypeOut"])
    types["GeostorePriceListProtoIn"] = t.struct(
        {
            "availableTime": t.proxy(renames["GeostoreTimeScheduleProtoIn"]).optional(),
            "cuisines": t.array(t.string()).optional(),
            "sourceUrl": t.proxy(renames["GeostoreUrlListProtoIn"]).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional(),
            "aggregatorId": t.string().optional(),
            "section": t.array(
                t.proxy(renames["GeostorePriceListSectionProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostorePriceListProtoIn"])
    types["GeostorePriceListProtoOut"] = t.struct(
        {
            "availableTime": t.proxy(
                renames["GeostoreTimeScheduleProtoOut"]
            ).optional(),
            "cuisines": t.array(t.string()).optional(),
            "sourceUrl": t.proxy(renames["GeostoreUrlListProtoOut"]).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "aggregatorId": t.string().optional(),
            "section": t.array(
                t.proxy(renames["GeostorePriceListSectionProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceListProtoOut"])
    types["HtmlrenderWebkitHeadlessProtoScriptStackFrameIn"] = t.struct(
        {
            "columnNumber": t.integer().optional(),
            "functionName": t.string().optional(),
            "url": t.string().optional(),
            "lineNumber": t.integer().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoScriptStackFrameIn"])
    types["HtmlrenderWebkitHeadlessProtoScriptStackFrameOut"] = t.struct(
        {
            "columnNumber": t.integer().optional(),
            "functionName": t.string().optional(),
            "url": t.string().optional(),
            "lineNumber": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoScriptStackFrameOut"])
    types["QualityCalypsoAppsLinkIn"] = t.struct(
        {"applicationId": t.array(t.string())}
    ).named(renames["QualityCalypsoAppsLinkIn"])
    types["QualityCalypsoAppsLinkOut"] = t.struct(
        {
            "applicationId": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsLinkOut"])
    types["VideoContentSearchTextMatchInfoIn"] = t.struct(
        {
            "matchedAsrTimeRatio": t.number().optional(),
            "matchScore": t.number().optional(),
            "matchedDescriptionItemIndexRatio": t.number().optional(),
            "matchedAsrTokenCount": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "matchedAsrText": t.string().optional(),
            "matchedAsrStartPos": t.integer().optional(),
            "matchedAsrTimeMs": t.string().optional(),
            "matchedDescriptionTokenCount": t.integer().optional(),
            "durationToPredictedTimeMs": t.string().optional(),
        }
    ).named(renames["VideoContentSearchTextMatchInfoIn"])
    types["VideoContentSearchTextMatchInfoOut"] = t.struct(
        {
            "matchedAsrTimeRatio": t.number().optional(),
            "matchScore": t.number().optional(),
            "matchedDescriptionItemIndexRatio": t.number().optional(),
            "matchedAsrTokenCount": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "matchedAsrText": t.string().optional(),
            "matchedAsrStartPos": t.integer().optional(),
            "matchedAsrTimeMs": t.string().optional(),
            "matchedDescriptionTokenCount": t.integer().optional(),
            "durationToPredictedTimeMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchTextMatchInfoOut"])
    types["NlpSemanticParsingModelsMediaDeeplinkInfoIn"] = t.struct(
        {
            "youtubeDeeplinkInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoIn"]
            ).optional(),
            "platform": t.array(t.string()).optional(),
            "country": t.array(t.string()).optional(),
            "incompatibleWithCredentials": t.boolean().optional(),
            "vuiId": t.string().optional(),
            "paidOfferDetail": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaPaidOfferDetailIn"])
            ).optional(),
            "actionType": t.string().optional(),
            "blacklistedCountry": t.array(t.string()).optional(),
            "tag": t.array(t.string()).optional(),
            "subscriptionPackageName": t.array(t.string()).optional(),
            "validTimeWindow": t.proxy(
                renames["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowIn"]
            ).optional(),
            "offer": t.array(t.string()).optional(),
            "deeplinkForExecution": t.string().optional(),
            "score": t.number().optional(),
            "deeplink": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaDeeplinkInfoIn"])
    types["NlpSemanticParsingModelsMediaDeeplinkInfoOut"] = t.struct(
        {
            "youtubeDeeplinkInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoOut"]
            ).optional(),
            "platform": t.array(t.string()).optional(),
            "country": t.array(t.string()).optional(),
            "incompatibleWithCredentials": t.boolean().optional(),
            "vuiId": t.string().optional(),
            "paidOfferDetail": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaPaidOfferDetailOut"])
            ).optional(),
            "actionType": t.string().optional(),
            "blacklistedCountry": t.array(t.string()).optional(),
            "tag": t.array(t.string()).optional(),
            "subscriptionPackageName": t.array(t.string()).optional(),
            "validTimeWindow": t.proxy(
                renames["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowOut"]
            ).optional(),
            "offer": t.array(t.string()).optional(),
            "deeplinkForExecution": t.string().optional(),
            "score": t.number().optional(),
            "deeplink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaDeeplinkInfoOut"])
    types["AssistantApiSelinaCapabilitesIn"] = t.struct(
        {
            "sleepSensingSupported": t.boolean().optional(),
            "selinaSupported": t.boolean().optional(),
            "gestureCapabilities": t.proxy(
                renames["AssistantApiGestureCapabilitiesIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSelinaCapabilitesIn"])
    types["AssistantApiSelinaCapabilitesOut"] = t.struct(
        {
            "sleepSensingSupported": t.boolean().optional(),
            "selinaSupported": t.boolean().optional(),
            "gestureCapabilities": t.proxy(
                renames["AssistantApiGestureCapabilitiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSelinaCapabilitesOut"])
    types["GeostoreInternalSegmentProtoLaneConnectionReferenceIn"] = t.struct(
        {
            "fromLaneNumber": t.integer().optional(),
            "toLaneNumber": t.integer().optional(),
            "segment": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreInternalSegmentProtoLaneConnectionReferenceIn"])
    types["GeostoreInternalSegmentProtoLaneConnectionReferenceOut"] = t.struct(
        {
            "fromLaneNumber": t.integer().optional(),
            "toLaneNumber": t.integer().optional(),
            "segment": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInternalSegmentProtoLaneConnectionReferenceOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyIn"] = t.struct(
        {
            "datetimeType": t.string().optional(),
            "relativeDatetimeType": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyOut"] = t.struct(
        {
            "datetimeType": t.string().optional(),
            "relativeDatetimeType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyOut"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataIn"] = t.struct(
        {"lastVerifiedMs": t.string().optional(), "firstSeenMs": t.string().optional()}
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataIn"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataOut"] = t.struct(
        {
            "lastVerifiedMs": t.string().optional(),
            "firstSeenMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataOut"])
    types["GoogleCloudContentwarehouseV1AddToFolderActionIn"] = t.struct(
        {"folders": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1AddToFolderActionIn"])
    types["GoogleCloudContentwarehouseV1AddToFolderActionOut"] = t.struct(
        {
            "folders": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1AddToFolderActionOut"])
    types["IndexingEmbeddedContentEmbeddedLinksInfoIn"] = t.struct(
        {
            "sumHttpResponseLength": t.integer().optional(),
            "uncrawledLinkUrl": t.array(t.string()),
            "embedderInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbedderInfoIn"]
            ).optional(),
            "pageSizeInfo": t.proxy(
                renames["IndexingEmbeddedContentPageSizeInfoIn"]
            ).optional(),
            "link": t.array(t.proxy(renames["IndexingEmbeddedContentLinkInfoIn"])),
        }
    ).named(renames["IndexingEmbeddedContentEmbeddedLinksInfoIn"])
    types["IndexingEmbeddedContentEmbeddedLinksInfoOut"] = t.struct(
        {
            "sumHttpResponseLength": t.integer().optional(),
            "uncrawledLinkUrl": t.array(t.string()),
            "embedderInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbedderInfoOut"]
            ).optional(),
            "pageSizeInfo": t.proxy(
                renames["IndexingEmbeddedContentPageSizeInfoOut"]
            ).optional(),
            "link": t.array(t.proxy(renames["IndexingEmbeddedContentLinkInfoOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentEmbeddedLinksInfoOut"])
    types["NlpSaftPhraseIn"] = t.struct(
        {
            "facet": t.string(),
            "start": t.integer().optional(),
            "head": t.integer().optional(),
            "end": t.integer(),
        }
    ).named(renames["NlpSaftPhraseIn"])
    types["NlpSaftPhraseOut"] = t.struct(
        {
            "facet": t.string(),
            "start": t.integer().optional(),
            "head": t.integer().optional(),
            "end": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftPhraseOut"])
    types["AssistantApiCoreTypesKaiOsAppInfoIn"] = t.struct(
        {
            "packageName": t.string().optional(),
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesKaiOsAppInfoIn"])
    types["AssistantApiCoreTypesKaiOsAppInfoOut"] = t.struct(
        {
            "packageName": t.string().optional(),
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesKaiOsAppInfoOut"])
    types["GoogleAssistantEmbeddedV1SurfaceIdentityIn"] = t.struct(
        {"userAgentSuffix": t.string().optional(), "surfaceType": t.string().optional()}
    ).named(renames["GoogleAssistantEmbeddedV1SurfaceIdentityIn"])
    types["GoogleAssistantEmbeddedV1SurfaceIdentityOut"] = t.struct(
        {
            "userAgentSuffix": t.string().optional(),
            "surfaceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1SurfaceIdentityOut"])
    types["VideoDoViDecoderConfigurationIn"] = t.struct(
        {
            "dvVersionMinor": t.integer().optional(),
            "fourccTag": t.string().optional(),
            "elPresentFlag": t.boolean().optional(),
            "dvVersionMajor": t.integer().optional(),
            "rpuPresentFlag": t.boolean().optional(),
            "blPresentFlag": t.boolean().optional(),
            "dvBlSignalCompatibilityId": t.integer().optional(),
            "dvLevel": t.integer(),
            "dvProfile": t.integer(),
        }
    ).named(renames["VideoDoViDecoderConfigurationIn"])
    types["VideoDoViDecoderConfigurationOut"] = t.struct(
        {
            "dvVersionMinor": t.integer().optional(),
            "fourccTag": t.string().optional(),
            "elPresentFlag": t.boolean().optional(),
            "dvVersionMajor": t.integer().optional(),
            "rpuPresentFlag": t.boolean().optional(),
            "blPresentFlag": t.boolean().optional(),
            "dvBlSignalCompatibilityId": t.integer().optional(),
            "dvLevel": t.integer(),
            "dvProfile": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoDoViDecoderConfigurationOut"])
    types["RepositoryWebrefAnnotatorProfileIn"] = t.struct(
        {
            "numEntities": t.integer(),
            "numMentions": t.integer(),
            "processorTimingsRoot": t.proxy(
                renames["RepositoryWebrefProcessorTimingIn"]
            ).optional(),
            "numCandidateMentions": t.integer(),
            "numTokens": t.integer(),
        }
    ).named(renames["RepositoryWebrefAnnotatorProfileIn"])
    types["RepositoryWebrefAnnotatorProfileOut"] = t.struct(
        {
            "numEntities": t.integer(),
            "numMentions": t.integer(),
            "processorTimingsRoot": t.proxy(
                renames["RepositoryWebrefProcessorTimingOut"]
            ).optional(),
            "numCandidateMentions": t.integer(),
            "numTokens": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotatorProfileOut"])
    types["RepositoryWebrefPerDocRelevanceRatingsIn"] = t.struct(
        {
            "taskLevelRating": t.array(
                t.proxy(renames["RepositoryWebrefPerDocRelevanceRatingIn"])
            ),
            "url": t.string().optional(),
            "docFp": t.string().optional(),
            "mentionRating": t.array(
                t.proxy(renames["RepositoryWebrefMentionRatingsIn"])
            ),
            "entityNameRating": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameRatingsIn"])
            ),
        }
    ).named(renames["RepositoryWebrefPerDocRelevanceRatingsIn"])
    types["RepositoryWebrefPerDocRelevanceRatingsOut"] = t.struct(
        {
            "taskLevelRating": t.array(
                t.proxy(renames["RepositoryWebrefPerDocRelevanceRatingOut"])
            ),
            "url": t.string().optional(),
            "docFp": t.string().optional(),
            "mentionRating": t.array(
                t.proxy(renames["RepositoryWebrefMentionRatingsOut"])
            ),
            "entityNameRating": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameRatingsOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPerDocRelevanceRatingsOut"])
    types["RepositoryWebrefClusterProtoRelationRuleIn"] = t.struct(
        {"relation": t.string().optional()}
    ).named(renames["RepositoryWebrefClusterProtoRelationRuleIn"])
    types["RepositoryWebrefClusterProtoRelationRuleOut"] = t.struct(
        {
            "relation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoRelationRuleOut"])
    types["NlpSaftEntityProfileKeywordIn"] = t.struct(
        {
            "type": t.string(),
            "language": t.integer(),
            "term": t.string(),
            "score": t.number().optional(),
            "count": t.integer(),
        }
    ).named(renames["NlpSaftEntityProfileKeywordIn"])
    types["NlpSaftEntityProfileKeywordOut"] = t.struct(
        {
            "type": t.string(),
            "language": t.integer(),
            "term": t.string(),
            "score": t.number().optional(),
            "count": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileKeywordOut"])
    types["RepositoryWebrefLinkKindFlagsIn"] = t.struct(
        {
            "latentEntity": t.string(),
            "implication": t.string(),
            "cluster": t.string(),
            "resolution": t.string(),
            "geoContainment": t.string(),
            "property": t.string(),
            "mdvc": t.string(),
        }
    ).named(renames["RepositoryWebrefLinkKindFlagsIn"])
    types["RepositoryWebrefLinkKindFlagsOut"] = t.struct(
        {
            "latentEntity": t.string(),
            "implication": t.string(),
            "cluster": t.string(),
            "resolution": t.string(),
            "geoContainment": t.string(),
            "property": t.string(),
            "mdvc": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLinkKindFlagsOut"])
    types["QualityNavboostCrapsCrapsDataIn"] = t.struct(
        {
            "lastLongestClicks": t.number().optional(),
            "impressions": t.number().optional(),
            "country": t.string().optional(),
            "badClicks": t.number(),
            "unscaledIpPriorBadFraction": t.number().optional(),
            "agingCounts": t.proxy(
                renames["QualityNavboostCrapsAgingDataIn"]
            ).optional(),
            "mobileData": t.proxy(
                renames["QualityNavboostCrapsCrapsDataIn"]
            ).optional(),
            "features": t.array(
                t.proxy(renames["QualityNavboostCrapsFeatureCrapsDataIn"])
            ).optional(),
            "goodClicks": t.number(),
            "clicks": t.number(),
            "mobileSignals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsIn"]
            ).optional(),
            "unsquashedMobileSignals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsIn"]
            ),
            "sliceTag": t.string().optional(),
            "packedIpAddress": t.string().optional(),
            "language": t.string().optional(),
            "query": t.string(),
            "device": t.proxy(renames["QualityNavboostCrapsCrapsDeviceIn"]).optional(),
            "patternSccStats": t.proxy(
                renames["QualityNavboostCrapsStatsWithWeightsProtoIn"]
            ).optional(),
            "unsquashed": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsIn"]
            ).optional(),
            "squashed": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsIn"]
            ).optional(),
            "url": t.string(),
            "patternLevel": t.integer().optional(),
        }
    ).named(renames["QualityNavboostCrapsCrapsDataIn"])
    types["QualityNavboostCrapsCrapsDataOut"] = t.struct(
        {
            "lastLongestClicks": t.number().optional(),
            "impressions": t.number().optional(),
            "country": t.string().optional(),
            "badClicks": t.number(),
            "unscaledIpPriorBadFraction": t.number().optional(),
            "agingCounts": t.proxy(
                renames["QualityNavboostCrapsAgingDataOut"]
            ).optional(),
            "mobileData": t.proxy(
                renames["QualityNavboostCrapsCrapsDataOut"]
            ).optional(),
            "features": t.array(
                t.proxy(renames["QualityNavboostCrapsFeatureCrapsDataOut"])
            ).optional(),
            "goodClicks": t.number(),
            "clicks": t.number(),
            "mobileSignals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsOut"]
            ).optional(),
            "unsquashedMobileSignals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsOut"]
            ),
            "sliceTag": t.string().optional(),
            "packedIpAddress": t.string().optional(),
            "language": t.string().optional(),
            "query": t.string(),
            "device": t.proxy(renames["QualityNavboostCrapsCrapsDeviceOut"]).optional(),
            "patternSccStats": t.proxy(
                renames["QualityNavboostCrapsStatsWithWeightsProtoOut"]
            ).optional(),
            "unsquashed": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsOut"]
            ).optional(),
            "squashed": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsOut"]
            ).optional(),
            "url": t.string(),
            "patternLevel": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsCrapsDataOut"])
    types["SocialGraphApiProtoContactDeletionContextIn"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextIn"]
            ).optional()
        }
    ).named(renames["SocialGraphApiProtoContactDeletionContextIn"])
    types["SocialGraphApiProtoContactDeletionContextOut"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactDeletionContextOut"])
    types["AssistantDevicesPlatformProtoCloudEndpointIn"] = t.struct(
        {
            "url": t.string().optional(),
            "name": t.string().optional(),
            "scopes": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoCloudEndpointIn"])
    types["AssistantDevicesPlatformProtoCloudEndpointOut"] = t.struct(
        {
            "url": t.string().optional(),
            "name": t.string().optional(),
            "scopes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoCloudEndpointOut"])
    types["ImageUnderstandingIndexingAnnotationIn"] = t.struct(
        {
            "labelGroup": t.array(
                t.proxy(renames["ImageUnderstandingIndexingLabelGroupIn"])
            ).optional(),
            "roi": t.proxy(
                renames["ImageUnderstandingIndexingImageRegionIn"]
            ).optional(),
            "feature": t.array(
                t.proxy(renames["ImageUnderstandingIndexingFeatureIn"])
            ).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingAnnotationIn"])
    types["ImageUnderstandingIndexingAnnotationOut"] = t.struct(
        {
            "labelGroup": t.array(
                t.proxy(renames["ImageUnderstandingIndexingLabelGroupOut"])
            ).optional(),
            "roi": t.proxy(
                renames["ImageUnderstandingIndexingImageRegionOut"]
            ).optional(),
            "feature": t.array(
                t.proxy(renames["ImageUnderstandingIndexingFeatureOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingAnnotationOut"])
    types["GeostoreNameProtoIn"] = t.struct(
        {
            "language": t.string().optional(),
            "rawText": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "text": t.string().optional(),
            "shortText": t.string().optional(),
            "flag": t.array(t.string()).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
        }
    ).named(renames["GeostoreNameProtoIn"])
    types["GeostoreNameProtoOut"] = t.struct(
        {
            "language": t.string().optional(),
            "rawText": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "text": t.string().optional(),
            "shortText": t.string().optional(),
            "flag": t.array(t.string()).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreNameProtoOut"])
    types["AssistantApiSettingsLinkedUserIn"] = t.struct(
        {
            "email": t.string().optional(),
            "castLinkingTime": t.string().optional(),
            "names": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNameIn"])
            ).optional(),
            "gaiaId": t.string(),
        }
    ).named(renames["AssistantApiSettingsLinkedUserIn"])
    types["AssistantApiSettingsLinkedUserOut"] = t.struct(
        {
            "email": t.string().optional(),
            "castLinkingTime": t.string().optional(),
            "names": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNameOut"])
            ).optional(),
            "gaiaId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsLinkedUserOut"])
    types["SecurityCredentialsYoutubeUserProtoIn"] = t.struct(
        {"youtubeUserId": t.string()}
    ).named(renames["SecurityCredentialsYoutubeUserProtoIn"])
    types["SecurityCredentialsYoutubeUserProtoOut"] = t.struct(
        {
            "youtubeUserId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsYoutubeUserProtoOut"])
    types["IndexingConverterRawRedirectInfoIn"] = t.struct(
        {
            "rawFinalTargetFromRendering": t.string().optional(),
            "renderingRedirectLimit": t.integer().optional(),
            "rawFinalTargetFromTrawler": t.string().optional(),
            "rawRedirectChainFromRendering": t.proxy(
                renames["IndexingConverterRedirectChainIn"]
            ).optional(),
        }
    ).named(renames["IndexingConverterRawRedirectInfoIn"])
    types["IndexingConverterRawRedirectInfoOut"] = t.struct(
        {
            "rawFinalTargetFromRendering": t.string().optional(),
            "renderingRedirectLimit": t.integer().optional(),
            "rawFinalTargetFromTrawler": t.string().optional(),
            "rawRedirectChainFromRendering": t.proxy(
                renames["IndexingConverterRedirectChainOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRawRedirectInfoOut"])
    types["QualityLabelsGoogleLabelDataIn"] = t.struct(
        {"label": t.array(t.proxy(renames["QualityLabelsGoogleLabelDataLabelIn"]))}
    ).named(renames["QualityLabelsGoogleLabelDataIn"])
    types["QualityLabelsGoogleLabelDataOut"] = t.struct(
        {
            "label": t.array(t.proxy(renames["QualityLabelsGoogleLabelDataLabelOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityLabelsGoogleLabelDataOut"])
    types["KnowledgeAnswersOpaqueReminderTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueReminderTypeIn"])
    types["KnowledgeAnswersOpaqueReminderTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueReminderTypeOut"])
    types["AssistantApiScreenCapabilitiesIn"] = t.struct(
        {
            "supportedRenderingFormat": t.string().optional(),
            "visionHelpEnabled": t.boolean().optional(),
            "screenOff": t.boolean().optional(),
            "mask": t.proxy(renames["AssistantApiScreenCapabilitiesMaskIn"]).optional(),
            "resolution": t.proxy(
                renames["AssistantApiScreenCapabilitiesResolutionIn"]
            ).optional(),
            "fontScaleFactor": t.number().optional(),
            "screenStateDetection": t.string().optional(),
            "protoLayoutTargetedSchema": t.proxy(
                renames["AssistantApiScreenCapabilitiesProtoLayoutVersionIn"]
            ).optional(),
            "supportedScreenStates": t.array(t.string()).optional(),
            "inputType": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantApiScreenCapabilitiesIn"])
    types["AssistantApiScreenCapabilitiesOut"] = t.struct(
        {
            "supportedRenderingFormat": t.string().optional(),
            "visionHelpEnabled": t.boolean().optional(),
            "screenOff": t.boolean().optional(),
            "mask": t.proxy(
                renames["AssistantApiScreenCapabilitiesMaskOut"]
            ).optional(),
            "resolution": t.proxy(
                renames["AssistantApiScreenCapabilitiesResolutionOut"]
            ).optional(),
            "fontScaleFactor": t.number().optional(),
            "screenStateDetection": t.string().optional(),
            "protoLayoutTargetedSchema": t.proxy(
                renames["AssistantApiScreenCapabilitiesProtoLayoutVersionOut"]
            ).optional(),
            "supportedScreenStates": t.array(t.string()).optional(),
            "inputType": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiScreenCapabilitiesOut"])
    types["ScienceCitationTranslatedAuthorIn"] = t.struct(
        {
            "Email": t.string(),
            "GuessOrderType": t.integer(),
            "LastName": t.string(),
            "OtherNames": t.string(),
            "Type": t.integer(),
            "Department": t.string(),
            "Language": t.string(),
            "Institution": t.string(),
            "SourceText": t.string(),
        }
    ).named(renames["ScienceCitationTranslatedAuthorIn"])
    types["ScienceCitationTranslatedAuthorOut"] = t.struct(
        {
            "Email": t.string(),
            "GuessOrderType": t.integer(),
            "LastName": t.string(),
            "OtherNames": t.string(),
            "Type": t.integer(),
            "Department": t.string(),
            "Language": t.string(),
            "Institution": t.string(),
            "SourceText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationTranslatedAuthorOut"])
    types["QualityQrewriteRelationshipMemoryDataIn"] = t.struct(
        {
            "value": t.string().optional(),
            "contactPointer": t.proxy(
                renames["FocusBackendContactPointerIn"]
            ).optional(),
        }
    ).named(renames["QualityQrewriteRelationshipMemoryDataIn"])
    types["QualityQrewriteRelationshipMemoryDataOut"] = t.struct(
        {
            "value": t.string().optional(),
            "contactPointer": t.proxy(
                renames["FocusBackendContactPointerOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteRelationshipMemoryDataOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTableTableRowIn"] = t.struct(
        {
            "cells": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableCellIn"])
            ).optional()
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTableTableRowOut"] = t.struct(
        {
            "cells": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableCellOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowOut"])
    types["AssistantLogsCommunicationRawDeviceContactInfoLogIn"] = t.struct(
        {"accountType": t.string().optional()}
    ).named(renames["AssistantLogsCommunicationRawDeviceContactInfoLogIn"])
    types["AssistantLogsCommunicationRawDeviceContactInfoLogOut"] = t.struct(
        {
            "accountType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationRawDeviceContactInfoLogOut"])
    types["VideoContentSearchSpanDolphinScoresIn"] = t.struct(
        {
            "spanCandidate": t.array(
                t.proxy(renames["VideoContentSearchSpanDolphinScoresSpanCandidateIn"])
            ).optional(),
            "spanToken": t.array(
                t.proxy(renames["VideoContentSearchSpanDolphinScoresSpanTokenIn"])
            ).optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresIn"])
    types["VideoContentSearchSpanDolphinScoresOut"] = t.struct(
        {
            "spanCandidate": t.array(
                t.proxy(renames["VideoContentSearchSpanDolphinScoresSpanCandidateOut"])
            ).optional(),
            "spanToken": t.array(
                t.proxy(renames["VideoContentSearchSpanDolphinScoresSpanTokenOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresOut"])
    types["SecurityCredentialsGaiaGroupProtoIn"] = t.struct(
        {"groupId": t.string()}
    ).named(renames["SecurityCredentialsGaiaGroupProtoIn"])
    types["SecurityCredentialsGaiaGroupProtoOut"] = t.struct(
        {"groupId": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsGaiaGroupProtoOut"])
    types["ImageRepositorySpeechRecognitionResultIn"] = t.struct(
        {
            "resultEndTime": t.string().optional(),
            "alternatives": t.array(
                t.proxy(renames["ImageRepositorySpeechRecognitionAlternativeIn"])
            ).optional(),
            "languageCode": t.string().optional(),
            "channelTag": t.integer().optional(),
        }
    ).named(renames["ImageRepositorySpeechRecognitionResultIn"])
    types["ImageRepositorySpeechRecognitionResultOut"] = t.struct(
        {
            "resultEndTime": t.string().optional(),
            "alternatives": t.array(
                t.proxy(renames["ImageRepositorySpeechRecognitionAlternativeOut"])
            ).optional(),
            "languageCode": t.string().optional(),
            "channelTag": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositorySpeechRecognitionResultOut"])
    types["DrishtiVesperVideoThumbnailIn"] = t.struct(
        {
            "id": t.string().optional(),
            "thumbnails": t.array(t.proxy(renames["DrishtiVesperThumbnailIn"])),
            "movingThumbnails": t.array(
                t.proxy(renames["DrishtiVesperMovingThumbnailIn"])
            ),
        }
    ).named(renames["DrishtiVesperVideoThumbnailIn"])
    types["DrishtiVesperVideoThumbnailOut"] = t.struct(
        {
            "id": t.string().optional(),
            "thumbnails": t.array(t.proxy(renames["DrishtiVesperThumbnailOut"])),
            "movingThumbnails": t.array(
                t.proxy(renames["DrishtiVesperMovingThumbnailOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperVideoThumbnailOut"])
    types[
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
    ] = t.struct(
        {"mid": t.string().optional(), "rawText": t.string().optional()}
    ).named(
        renames[
            "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
        ]
    )
    types[
        "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
    ] = t.struct(
        {
            "mid": t.string().optional(),
            "rawText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
        ]
    )
    types["AssistantDevicesPlatformProtoAlarmCapabilityIn"] = t.struct(
        {
            "maxSupportedAlarms": t.integer().optional(),
            "restrictAlarmsToNextDay": t.boolean().optional(),
            "supportsStopAction": t.boolean().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoAlarmCapabilityIn"])
    types["AssistantDevicesPlatformProtoAlarmCapabilityOut"] = t.struct(
        {
            "maxSupportedAlarms": t.integer().optional(),
            "restrictAlarmsToNextDay": t.boolean().optional(),
            "supportsStopAction": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoAlarmCapabilityOut"])
    types["AssistantApiImmersiveCanvasSupportIn"] = t.struct(
        {
            "pauseSignalSupported": t.boolean().optional(),
            "confirmationMessageSupported": t.boolean().optional(),
        }
    ).named(renames["AssistantApiImmersiveCanvasSupportIn"])
    types["AssistantApiImmersiveCanvasSupportOut"] = t.struct(
        {
            "pauseSignalSupported": t.boolean().optional(),
            "confirmationMessageSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiImmersiveCanvasSupportOut"])
    types["ImageRepositoryVenomStatusIn"] = t.struct(
        {
            "videoVenomSetting": t.string().optional(),
            "reason": t.string(),
            "transition": t.proxy(renames["VideoAssetsVenomTransitionIn"]).optional(),
            "genus": t.string().optional(),
            "insertionTimestampUsec": t.string(),
            "acl": t.proxy(renames["VideoAssetsVenomACLIn"]).optional(),
            "venomId": t.proxy(renames["VideoAssetsVenomVideoIdIn"]).optional(),
            "venomMutationGeneration": t.string().optional(),
            "deletionTimestampUsec": t.string(),
            "insertionResponseTimestampUsec": t.string().optional(),
            "lastInsertionAttemptsNum": t.integer().optional(),
            "settings": t.array(
                t.proxy(renames["VideoAssetsVenomSettingsIn"])
            ).optional(),
            "state": t.string(),
        }
    ).named(renames["ImageRepositoryVenomStatusIn"])
    types["ImageRepositoryVenomStatusOut"] = t.struct(
        {
            "videoVenomSetting": t.string().optional(),
            "reason": t.string(),
            "transition": t.proxy(renames["VideoAssetsVenomTransitionOut"]).optional(),
            "genus": t.string().optional(),
            "insertionTimestampUsec": t.string(),
            "acl": t.proxy(renames["VideoAssetsVenomACLOut"]).optional(),
            "venomId": t.proxy(renames["VideoAssetsVenomVideoIdOut"]).optional(),
            "venomMutationGeneration": t.string().optional(),
            "deletionTimestampUsec": t.string(),
            "insertionResponseTimestampUsec": t.string().optional(),
            "lastInsertionAttemptsNum": t.integer().optional(),
            "settings": t.array(
                t.proxy(renames["VideoAssetsVenomSettingsOut"])
            ).optional(),
            "state": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVenomStatusOut"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentRequestIn"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentRequestOut"])
    types["VideoFileSphericalMetadataFOVBoundsIn"] = t.struct(
        {
            "endTiltInDegrees": t.number(),
            "startYawInDegrees": t.number(),
            "endYawInDegrees": t.number(),
            "startTiltInDegrees": t.number(),
        }
    ).named(renames["VideoFileSphericalMetadataFOVBoundsIn"])
    types["VideoFileSphericalMetadataFOVBoundsOut"] = t.struct(
        {
            "endTiltInDegrees": t.number(),
            "startYawInDegrees": t.number(),
            "endYawInDegrees": t.number(),
            "startTiltInDegrees": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataFOVBoundsOut"])
    types["AssistantApiTimeZoneIn"] = t.struct({"ianaId": t.string().optional()}).named(
        renames["AssistantApiTimeZoneIn"]
    )
    types["AssistantApiTimeZoneOut"] = t.struct(
        {
            "ianaId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiTimeZoneOut"])
    types["NlpSemanticParsingLocalEvChargingStationConnectorConstraintIn"] = t.struct(
        {"connectorType": t.string()}
    ).named(renames["NlpSemanticParsingLocalEvChargingStationConnectorConstraintIn"])
    types["NlpSemanticParsingLocalEvChargingStationConnectorConstraintOut"] = t.struct(
        {
            "connectorType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalEvChargingStationConnectorConstraintOut"])
    types["AssistantApiSettingsSpeechOutputSettingsIn"] = t.struct(
        {"speechOutput": t.string()}
    ).named(renames["AssistantApiSettingsSpeechOutputSettingsIn"])
    types["AssistantApiSettingsSpeechOutputSettingsOut"] = t.struct(
        {
            "speechOutput": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsSpeechOutputSettingsOut"])
    types["AbuseiamVideoReviewerIn"] = t.struct(
        {"type": t.string(), "username": t.string().optional()}
    ).named(renames["AbuseiamVideoReviewerIn"])
    types["AbuseiamVideoReviewerOut"] = t.struct(
        {
            "type": t.string(),
            "username": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamVideoReviewerOut"])
    types["CloudAiPlatformTenantresourceTenantProjectResourceIn"] = t.struct(
        {
            "tenantProjectNumber": t.string().optional(),
            "cloudSqlInstances": t.array(
                t.proxy(
                    renames["CloudAiPlatformTenantresourceCloudSqlInstanceConfigIn"]
                )
            ).optional(),
            "tag": t.string().optional(),
            "infraSpannerConfigs": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceInfraSpannerConfigIn"])
            ).optional(),
            "iamPolicyBindings": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceIamPolicyBindingIn"])
            ).optional(),
            "tenantServiceAccounts": t.array(
                t.proxy(
                    renames[
                        "CloudAiPlatformTenantresourceTenantServiceAccountIdentityIn"
                    ]
                )
            ).optional(),
            "gcsBuckets": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceGcsBucketConfigIn"])
            ).optional(),
            "tenantProjectConfig": t.proxy(
                renames["CloudAiPlatformTenantresourceTenantProjectConfigIn"]
            ).optional(),
            "tenantProjectId": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantProjectResourceIn"])
    types["CloudAiPlatformTenantresourceTenantProjectResourceOut"] = t.struct(
        {
            "tenantProjectNumber": t.string().optional(),
            "cloudSqlInstances": t.array(
                t.proxy(
                    renames["CloudAiPlatformTenantresourceCloudSqlInstanceConfigOut"]
                )
            ).optional(),
            "tag": t.string().optional(),
            "infraSpannerConfigs": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceInfraSpannerConfigOut"])
            ).optional(),
            "iamPolicyBindings": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceIamPolicyBindingOut"])
            ).optional(),
            "tenantServiceAccounts": t.array(
                t.proxy(
                    renames[
                        "CloudAiPlatformTenantresourceTenantServiceAccountIdentityOut"
                    ]
                )
            ).optional(),
            "gcsBuckets": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceGcsBucketConfigOut"])
            ).optional(),
            "tenantProjectConfig": t.proxy(
                renames["CloudAiPlatformTenantresourceTenantProjectConfigOut"]
            ).optional(),
            "tenantProjectId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantProjectResourceOut"])
    types["VideoContentSearchDescriptionAnchorFeaturesIn"] = t.struct(
        {
            "isDescriptionAnchor": t.boolean().optional(),
            "entityTextCoverage": t.number().optional(),
            "inAsr": t.boolean().optional(),
            "spanToAsrTime": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchDescriptionAnchorFeaturesIn"])
    types["VideoContentSearchDescriptionAnchorFeaturesOut"] = t.struct(
        {
            "isDescriptionAnchor": t.boolean().optional(),
            "entityTextCoverage": t.number().optional(),
            "inAsr": t.boolean().optional(),
            "spanToAsrTime": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDescriptionAnchorFeaturesOut"])
    types["AssistantApiSoftwareCapabilitiesIn"] = t.struct(
        {
            "supportedFeatures": t.proxy(renames["AssistantApiSupportedFeaturesIn"]),
            "appCapabilities": t.array(
                t.proxy(renames["AssistantApiAppCapabilitiesIn"])
            ).optional(),
            "liveTvChannelCapabilities": t.proxy(
                renames["AssistantApiLiveTvChannelCapabilitiesIn"]
            ).optional(),
            "crossDeviceExecutionCapabilities": t.proxy(
                renames["AssistantApiCrossDeviceExecutionCapabilityIn"]
            ).optional(),
            "appCapabilitiesDelta": t.array(
                t.proxy(renames["AssistantApiAppCapabilitiesDeltaIn"])
            ).optional(),
            "homeAppCapabilities": t.proxy(
                renames["AssistantApiCapabilitiesHomeAppCapabilitiesIn"]
            ).optional(),
            "supportedClientOp": t.array(
                t.proxy(renames["AssistantApiSupportedClientOpIn"])
            ),
            "appIntegrationsSettings": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "oemCapabilities": t.proxy(
                renames["AssistantApiOemCapabilitiesIn"]
            ).optional(),
            "onDeviceSmartHomeCapabilities": t.proxy(
                renames["AssistantApiOnDeviceSmartHomeCapabilitiesIn"]
            ).optional(),
            "selinaCapabilities": t.proxy(
                renames["AssistantApiSelinaCapabilitesIn"]
            ).optional(),
            "supportedMsgVersion": t.proxy(
                renames["AssistantApiSupportedProtocolVersionIn"]
            ),
            "supportedProviderTypes": t.proxy(
                renames["AssistantApiSupportedProviderTypesIn"]
            ),
            "clockCapabilities": t.proxy(
                renames["AssistantApiClockCapabilitiesIn"]
            ).optional(),
            "surfaceProperties": t.proxy(renames["AssistantApiSurfacePropertiesIn"]),
            "settingsAppCapabilities": t.proxy(
                renames["AssistantApiSettingsAppCapabilitiesIn"]
            ),
            "gcmCapabilities": t.proxy(renames["AssistantApiGcmCapabilitiesIn"]),
            "onDeviceAssistantCapabilities": t.proxy(
                renames["AssistantApiOnDeviceAssistantCapabilitiesIn"]
            ).optional(),
            "gacsCapabilities": t.proxy(renames["AssistantApiGacsCapabilitiesIn"]),
            "onDeviceStorageCapabilities": t.proxy(
                renames["AssistantApiOnDeviceStorageCapabilitiesIn"]
            ).optional(),
            "conversationVersion": t.proxy(
                renames["AssistantApiSupportedConversationVersionIn"]
            ).optional(),
            "operatingSystem": t.string().optional(),
            "orderedLiveTvProviders": t.array(
                t.proxy(renames["AssistantApiLiveTvProviderIn"])
            ).optional(),
            "carAssistantCapabilities": t.proxy(
                renames["AssistantApiCarAssistantCapabilitiesIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSoftwareCapabilitiesIn"])
    types["AssistantApiSoftwareCapabilitiesOut"] = t.struct(
        {
            "supportedFeatures": t.proxy(renames["AssistantApiSupportedFeaturesOut"]),
            "appCapabilities": t.array(
                t.proxy(renames["AssistantApiAppCapabilitiesOut"])
            ).optional(),
            "liveTvChannelCapabilities": t.proxy(
                renames["AssistantApiLiveTvChannelCapabilitiesOut"]
            ).optional(),
            "crossDeviceExecutionCapabilities": t.proxy(
                renames["AssistantApiCrossDeviceExecutionCapabilityOut"]
            ).optional(),
            "appCapabilitiesDelta": t.array(
                t.proxy(renames["AssistantApiAppCapabilitiesDeltaOut"])
            ).optional(),
            "homeAppCapabilities": t.proxy(
                renames["AssistantApiCapabilitiesHomeAppCapabilitiesOut"]
            ).optional(),
            "supportedClientOp": t.array(
                t.proxy(renames["AssistantApiSupportedClientOpOut"])
            ),
            "appIntegrationsSettings": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "oemCapabilities": t.proxy(
                renames["AssistantApiOemCapabilitiesOut"]
            ).optional(),
            "onDeviceSmartHomeCapabilities": t.proxy(
                renames["AssistantApiOnDeviceSmartHomeCapabilitiesOut"]
            ).optional(),
            "selinaCapabilities": t.proxy(
                renames["AssistantApiSelinaCapabilitesOut"]
            ).optional(),
            "supportedMsgVersion": t.proxy(
                renames["AssistantApiSupportedProtocolVersionOut"]
            ),
            "supportedProviderTypes": t.proxy(
                renames["AssistantApiSupportedProviderTypesOut"]
            ),
            "clockCapabilities": t.proxy(
                renames["AssistantApiClockCapabilitiesOut"]
            ).optional(),
            "surfaceProperties": t.proxy(renames["AssistantApiSurfacePropertiesOut"]),
            "settingsAppCapabilities": t.proxy(
                renames["AssistantApiSettingsAppCapabilitiesOut"]
            ),
            "gcmCapabilities": t.proxy(renames["AssistantApiGcmCapabilitiesOut"]),
            "onDeviceAssistantCapabilities": t.proxy(
                renames["AssistantApiOnDeviceAssistantCapabilitiesOut"]
            ).optional(),
            "gacsCapabilities": t.proxy(renames["AssistantApiGacsCapabilitiesOut"]),
            "onDeviceStorageCapabilities": t.proxy(
                renames["AssistantApiOnDeviceStorageCapabilitiesOut"]
            ).optional(),
            "conversationVersion": t.proxy(
                renames["AssistantApiSupportedConversationVersionOut"]
            ).optional(),
            "operatingSystem": t.string().optional(),
            "orderedLiveTvProviders": t.array(
                t.proxy(renames["AssistantApiLiveTvProviderOut"])
            ).optional(),
            "carAssistantCapabilities": t.proxy(
                renames["AssistantApiCarAssistantCapabilitiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSoftwareCapabilitiesOut"])
    types["AssistantApiTransactionFeaturesSupportIn"] = t.struct(
        {"voicePinSuppressed": t.boolean().optional()}
    ).named(renames["AssistantApiTransactionFeaturesSupportIn"])
    types["AssistantApiTransactionFeaturesSupportOut"] = t.struct(
        {
            "voicePinSuppressed": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiTransactionFeaturesSupportOut"])
    types["ImageExifIPTCMetadataLocationIn"] = t.struct(
        {
            "city": t.string(),
            "country": t.string(),
            "subLocation": t.string(),
            "worldRegion": t.string(),
            "state": t.string(),
            "countryCode": t.string(),
        }
    ).named(renames["ImageExifIPTCMetadataLocationIn"])
    types["ImageExifIPTCMetadataLocationOut"] = t.struct(
        {
            "city": t.string(),
            "country": t.string(),
            "subLocation": t.string(),
            "worldRegion": t.string(),
            "state": t.string(),
            "countryCode": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifIPTCMetadataLocationOut"])
    types["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdIn"] = t.struct(
        {"deviceId": t.string().optional(), "contactId": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdIn"])
    types["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdOut"] = t.struct(
        {
            "deviceId": t.string().optional(),
            "contactId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdOut"])
    types["GeostoreRoadSignProtoIn"] = t.struct(
        {
            "component": t.array(
                t.proxy(renames["GeostoreRoadSignComponentProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreRoadSignProtoIn"])
    types["GeostoreRoadSignProtoOut"] = t.struct(
        {
            "component": t.array(
                t.proxy(renames["GeostoreRoadSignComponentProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRoadSignProtoOut"])
    types[
        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoIn"
    ] = t.struct(
        {"logOnly": t.boolean().optional(), "availablePartnerId": t.string().optional()}
    ).named(
        renames[
            "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoIn"
        ]
    )
    types[
        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoOut"
    ] = t.struct(
        {
            "logOnly": t.boolean().optional(),
            "availablePartnerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoOut"
        ]
    )
    types["AssistantLogsCommunicationDeviceContactInfoLogIn"] = t.struct(
        {
            "rawContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationRawDeviceContactInfoLogIn"])
            ).optional()
        }
    ).named(renames["AssistantLogsCommunicationDeviceContactInfoLogIn"])
    types["AssistantLogsCommunicationDeviceContactInfoLogOut"] = t.struct(
        {
            "rawContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationRawDeviceContactInfoLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationDeviceContactInfoLogOut"])
    types["ShingleSourceIn"] = t.struct(
        {
            "numShingles": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "id": t.integer().optional(),
        }
    ).named(renames["ShingleSourceIn"])
    types["ShingleSourceOut"] = t.struct(
        {
            "numShingles": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShingleSourceOut"])
    types["VideoAssetsVenomVideoIdIn"] = t.struct(
        {"id": t.string().optional(), "ns": t.string().optional()}
    ).named(renames["VideoAssetsVenomVideoIdIn"])
    types["VideoAssetsVenomVideoIdOut"] = t.struct(
        {
            "id": t.string().optional(),
            "ns": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoAssetsVenomVideoIdOut"])
    types["BlogPerDocDataIn"] = t.struct(
        {
            "outlinks": t.array(t.proxy(renames["BlogPerDocDataOutlinksIn"])),
            "postContentFingerprint": t.integer().optional(),
            "clientSpamminess": t.integer().optional(),
            "isSyntacticReshare": t.boolean().optional(),
            "qualityScore": t.integer(),
            "docQualityScore": t.integer(),
            "spamScore": t.integer().optional(),
            "convTree": t.proxy(renames["BlogsearchConversationTreeIn"]).optional(),
            "microblogQualityExptData": t.proxy(
                renames["Proto2BridgeMessageSetIn"]
            ).optional(),
            "universalWhitelisted": t.boolean(),
            "copycatScore": t.integer(),
            "numMentions": t.integer().optional(),
            "userQualityScore": t.integer().optional(),
            "blogurlFp": t.string().optional(),
        }
    ).named(renames["BlogPerDocDataIn"])
    types["BlogPerDocDataOut"] = t.struct(
        {
            "outlinks": t.array(t.proxy(renames["BlogPerDocDataOutlinksOut"])),
            "postContentFingerprint": t.integer().optional(),
            "clientSpamminess": t.integer().optional(),
            "isSyntacticReshare": t.boolean().optional(),
            "qualityScore": t.integer(),
            "docQualityScore": t.integer(),
            "spamScore": t.integer().optional(),
            "convTree": t.proxy(renames["BlogsearchConversationTreeOut"]).optional(),
            "microblogQualityExptData": t.proxy(
                renames["Proto2BridgeMessageSetOut"]
            ).optional(),
            "universalWhitelisted": t.boolean(),
            "copycatScore": t.integer(),
            "numMentions": t.integer().optional(),
            "userQualityScore": t.integer().optional(),
            "blogurlFp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlogPerDocDataOut"])
    types["GoogleCloudContentwarehouseV1CreateDocumentLinkRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
            "documentLink": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentLinkIn"]
            ),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentLinkRequestIn"])
    types["GoogleCloudContentwarehouseV1CreateDocumentLinkRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "documentLink": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentLinkOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentLinkRequestOut"])
    types["RepositoryWebrefNameDebugInfoIn"] = t.struct(
        {
            "query": t.proxy(renames["RepositoryWebrefLocalizedStringIn"]).optional(),
            "weight": t.number().optional(),
            "candidates": t.array(
                t.proxy(renames["RepositoryWebrefNameDebugInfoCandidateInfoIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefNameDebugInfoIn"])
    types["RepositoryWebrefNameDebugInfoOut"] = t.struct(
        {
            "query": t.proxy(renames["RepositoryWebrefLocalizedStringOut"]).optional(),
            "weight": t.number().optional(),
            "candidates": t.array(
                t.proxy(renames["RepositoryWebrefNameDebugInfoCandidateInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNameDebugInfoOut"])
    types["KnowledgeAnswersOpaqueShoppingProductTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingProductTypeIn"])
    types["KnowledgeAnswersOpaqueShoppingProductTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingProductTypeOut"])
    types["VideoContentSearchSimilarityMatchInfoIn"] = t.struct(
        {
            "scoringMethodName": t.string().optional(),
            "referenceTextTimeMs": t.integer().optional(),
            "similarityScore": t.number().optional(),
            "tokenSequenceLength": t.integer().optional(),
            "stepIndex": t.integer().optional(),
            "instructionText": t.string().optional(),
            "instructionStartMs": t.integer().optional(),
            "tokenStartPos": t.integer().optional(),
            "tokenSequence": t.string().optional(),
            "referenceText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchSimilarityMatchInfoIn"])
    types["VideoContentSearchSimilarityMatchInfoOut"] = t.struct(
        {
            "scoringMethodName": t.string().optional(),
            "referenceTextTimeMs": t.integer().optional(),
            "similarityScore": t.number().optional(),
            "tokenSequenceLength": t.integer().optional(),
            "stepIndex": t.integer().optional(),
            "instructionText": t.string().optional(),
            "instructionStartMs": t.integer().optional(),
            "tokenStartPos": t.integer().optional(),
            "tokenSequence": t.string().optional(),
            "referenceText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSimilarityMatchInfoOut"])
    types["VideoContentSearchVideoAnchorSetRatingScoreIn"] = t.struct(
        {
            "averageSetNavigationUsefulness": t.number().optional(),
            "averageSetDescriptionQuality": t.number().optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorSetRatingScoreIn"])
    types["VideoContentSearchVideoAnchorSetRatingScoreOut"] = t.struct(
        {
            "averageSetNavigationUsefulness": t.number().optional(),
            "averageSetDescriptionQuality": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorSetRatingScoreOut"])
    types["VideoContentSearchCaptionEntityDocInfoIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "entityDocCount": t.string().optional(),
            "entityMentionCount": t.string().optional(),
            "totalDocCount": t.string().optional(),
            "totalMentionCount": t.string().optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityDocInfoIn"])
    types["VideoContentSearchCaptionEntityDocInfoOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "entityDocCount": t.string().optional(),
            "entityMentionCount": t.string().optional(),
            "totalDocCount": t.string().optional(),
            "totalMentionCount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityDocInfoOut"])
    types["AssistantRemindersMemoryPayloadIn"] = t.struct(
        {
            "hasReferencedEntityAtCreation": t.boolean().optional(),
            "recordId": t.string().optional(),
        }
    ).named(renames["AssistantRemindersMemoryPayloadIn"])
    types["AssistantRemindersMemoryPayloadOut"] = t.struct(
        {
            "hasReferencedEntityAtCreation": t.boolean().optional(),
            "recordId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantRemindersMemoryPayloadOut"])
    types["SocialGraphApiProtoPronunciationsIn"] = t.struct(
        {
            "pronunciation": t.array(
                t.proxy(renames["SocialGraphApiProtoPronunciationIn"])
            )
        }
    ).named(renames["SocialGraphApiProtoPronunciationsIn"])
    types["SocialGraphApiProtoPronunciationsOut"] = t.struct(
        {
            "pronunciation": t.array(
                t.proxy(renames["SocialGraphApiProtoPronunciationOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPronunciationsOut"])
    types["RepositoryWebrefLightweightTokensPerMentionLightweightTokenIn"] = t.struct(
        {
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenIn"
                    ]
                )
            )
        }
    ).named(renames["RepositoryWebrefLightweightTokensPerMentionLightweightTokenIn"])
    types["RepositoryWebrefLightweightTokensPerMentionLightweightTokenOut"] = t.struct(
        {
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLightweightTokensPerMentionLightweightTokenOut"])
    types["RepositoryWebrefHumanRatingsIn"] = t.struct(
        {"annotationRatings": t.proxy(renames["RepositoryWebrefAnnotationRatingsIn"])}
    ).named(renames["RepositoryWebrefHumanRatingsIn"])
    types["RepositoryWebrefHumanRatingsOut"] = t.struct(
        {
            "annotationRatings": t.proxy(
                renames["RepositoryWebrefAnnotationRatingsOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefHumanRatingsOut"])
    types["GeostoreInternalSourceSummaryProtoIn"] = t.struct(
        {"provider": t.string().optional(), "dataset": t.string().optional()}
    ).named(renames["GeostoreInternalSourceSummaryProtoIn"])
    types["GeostoreInternalSourceSummaryProtoOut"] = t.struct(
        {
            "provider": t.string().optional(),
            "dataset": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInternalSourceSummaryProtoOut"])
    types["AbuseiamUserNotificationIn"] = t.struct({"channel": t.string()}).named(
        renames["AbuseiamUserNotificationIn"]
    )
    types["AbuseiamUserNotificationOut"] = t.struct(
        {"channel": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AbuseiamUserNotificationOut"])
    types["AssistantApiAudioInputIn"] = t.struct(
        {"quality": t.string(), "environment": t.string()}
    ).named(renames["AssistantApiAudioInputIn"])
    types["AssistantApiAudioInputOut"] = t.struct(
        {
            "quality": t.string(),
            "environment": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAudioInputOut"])
    types["RepositoryWebrefCompactKgTopicIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "propertyValue": t.array(
                t.proxy(renames["RepositoryWebrefCompactKgPropertyValueIn"])
            ),
        }
    ).named(renames["RepositoryWebrefCompactKgTopicIn"])
    types["RepositoryWebrefCompactKgTopicOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "propertyValue": t.array(
                t.proxy(renames["RepositoryWebrefCompactKgPropertyValueOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCompactKgTopicOut"])
    types["GeostoreGeopoliticalGeometryProtoIn"] = t.struct(
        {
            "selfPolygon": t.proxy(renames["GeostorePolygonProtoIn"]).optional(),
            "restOfWorldPolygon": t.proxy(renames["GeostorePolygonProtoIn"]).optional(),
        }
    ).named(renames["GeostoreGeopoliticalGeometryProtoIn"])
    types["GeostoreGeopoliticalGeometryProtoOut"] = t.struct(
        {
            "selfPolygon": t.proxy(renames["GeostorePolygonProtoOut"]).optional(),
            "restOfWorldPolygon": t.proxy(
                renames["GeostorePolygonProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreGeopoliticalGeometryProtoOut"])
    types["QualityNavboostCrapsCrapsClickSignalsIn"] = t.struct(
        {
            "badClicks": t.number(),
            "absoluteImpressions": t.number().optional(),
            "unsquashedClicks": t.number().optional(),
            "impressions": t.number(),
            "unsquashedImpressions": t.number().optional(),
            "goodClicks": t.number(),
            "unicornClicks": t.number().optional(),
            "clicks": t.number(),
            "unsquashedLastLongestClicks": t.number(),
            "lastLongestClicks": t.number(),
        }
    ).named(renames["QualityNavboostCrapsCrapsClickSignalsIn"])
    types["QualityNavboostCrapsCrapsClickSignalsOut"] = t.struct(
        {
            "badClicks": t.number(),
            "absoluteImpressions": t.number().optional(),
            "unsquashedClicks": t.number().optional(),
            "impressions": t.number(),
            "unsquashedImpressions": t.number().optional(),
            "goodClicks": t.number(),
            "unicornClicks": t.number().optional(),
            "clicks": t.number(),
            "unsquashedLastLongestClicks": t.number(),
            "lastLongestClicks": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsCrapsClickSignalsOut"])
    types["CountryClickDistributionItemIn"] = t.struct(
        {"value": t.integer(), "doubleValue": t.number(), "name": t.string()}
    ).named(renames["CountryClickDistributionItemIn"])
    types["CountryClickDistributionItemOut"] = t.struct(
        {
            "value": t.integer(),
            "doubleValue": t.number(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryClickDistributionItemOut"])
    types["GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataIn"])
    types["GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadataOut"])
    types["GeostoreAddressLinesProtoIn"] = t.struct(
        {"line": t.array(t.string()).optional(), "language": t.string().optional()}
    ).named(renames["GeostoreAddressLinesProtoIn"])
    types["GeostoreAddressLinesProtoOut"] = t.struct(
        {
            "line": t.array(t.string()).optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAddressLinesProtoOut"])
    types["PairwiseQScoringDataIn"] = t.struct(
        {"confidenceValue": t.number(), "value": t.number()}
    ).named(renames["PairwiseQScoringDataIn"])
    types["PairwiseQScoringDataOut"] = t.struct(
        {
            "confidenceValue": t.number(),
            "value": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PairwiseQScoringDataOut"])
    types["VideoContentSearchVideoScoreInfoIn"] = t.struct(
        {
            "ocrVideoFeature": t.proxy(
                renames["VideoContentSearchOcrVideoFeatureIn"]
            ).optional(),
            "commonFeatures": t.proxy(
                renames["VideoContentSearchVideoCommonFeaturesIn"]
            ).optional(),
            "videoGeneratedQueryFeatures": t.proxy(
                renames["VideoContentSearchVideoGeneratedQueryFeaturesIn"]
            ).optional(),
            "version": t.string().optional(),
            "videoMultimodalTopicFeatures": t.proxy(
                renames["VideoContentSearchVideoMultimodalTopicFeaturesIn"]
            ).optional(),
            "safeSearchClassifierOutput": t.proxy(
                renames["ClassifierPornQueryMultiLabelClassifierOutputIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchVideoScoreInfoIn"])
    types["VideoContentSearchVideoScoreInfoOut"] = t.struct(
        {
            "ocrVideoFeature": t.proxy(
                renames["VideoContentSearchOcrVideoFeatureOut"]
            ).optional(),
            "commonFeatures": t.proxy(
                renames["VideoContentSearchVideoCommonFeaturesOut"]
            ).optional(),
            "videoGeneratedQueryFeatures": t.proxy(
                renames["VideoContentSearchVideoGeneratedQueryFeaturesOut"]
            ).optional(),
            "version": t.string().optional(),
            "videoMultimodalTopicFeatures": t.proxy(
                renames["VideoContentSearchVideoMultimodalTopicFeaturesOut"]
            ).optional(),
            "safeSearchClassifierOutput": t.proxy(
                renames["ClassifierPornQueryMultiLabelClassifierOutputOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoScoreInfoOut"])
    types["GoodocAnchorLabelIn"] = t.struct(
        {"Anchor": t.string().optional(), "anchorScope": t.integer()}
    ).named(renames["GoodocAnchorLabelIn"])
    types["GoodocAnchorLabelOut"] = t.struct(
        {
            "Anchor": t.string().optional(),
            "anchorScope": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocAnchorLabelOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclIn"
    ] = t.struct(
        {"displayName": t.string().optional(), "contactGroupId": t.string().optional()}
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclOut"
    ] = t.struct(
        {
            "displayName": t.string().optional(),
            "contactGroupId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclOut"
        ]
    )
    types["SocialGraphApiProtoRecurrenceIn"] = t.struct(
        {
            "every": t.integer().optional(),
            "singleRecurrence": t.proxy(
                renames["SocialGraphApiProtoSingleRecurrenceIn"]
            ),
            "repeatForever": t.proxy(
                renames["SocialGraphApiProtoRecurrenceRepeatForeverIn"]
            ).optional(),
            "weeklyRecurrence": t.proxy(
                renames["SocialGraphApiProtoWeeklyRecurrenceIn"]
            ),
            "monthlyRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyRecurrenceIn"]
            ),
            "recurrenceEndDate": t.proxy(renames["GoogleTypeDateTimeIn"]).optional(),
            "yearlyRecurrence": t.proxy(
                renames["SocialGraphApiProtoYearlyRecurrenceIn"]
            ),
            "repeatCount": t.integer().optional(),
            "dailyRecurrence": t.proxy(renames["SocialGraphApiProtoDailyRecurrenceIn"]),
            "recurrenceStart": t.proxy(renames["GoogleTypeDateTimeIn"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoRecurrenceIn"])
    types["SocialGraphApiProtoRecurrenceOut"] = t.struct(
        {
            "every": t.integer().optional(),
            "singleRecurrence": t.proxy(
                renames["SocialGraphApiProtoSingleRecurrenceOut"]
            ),
            "repeatForever": t.proxy(
                renames["SocialGraphApiProtoRecurrenceRepeatForeverOut"]
            ).optional(),
            "weeklyRecurrence": t.proxy(
                renames["SocialGraphApiProtoWeeklyRecurrenceOut"]
            ),
            "monthlyRecurrence": t.proxy(
                renames["SocialGraphApiProtoMonthlyRecurrenceOut"]
            ),
            "recurrenceEndDate": t.proxy(renames["GoogleTypeDateTimeOut"]).optional(),
            "yearlyRecurrence": t.proxy(
                renames["SocialGraphApiProtoYearlyRecurrenceOut"]
            ),
            "repeatCount": t.integer().optional(),
            "dailyRecurrence": t.proxy(
                renames["SocialGraphApiProtoDailyRecurrenceOut"]
            ),
            "recurrenceStart": t.proxy(renames["GoogleTypeDateTimeOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoRecurrenceOut"])
    types["NlpSemanticParsingModelsMediaLatLngIn"] = t.struct(
        {"longitude": t.number().optional(), "latitude": t.number().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaLatLngIn"])
    types["NlpSemanticParsingModelsMediaLatLngOut"] = t.struct(
        {
            "longitude": t.number().optional(),
            "latitude": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaLatLngOut"])
    types["ChatBotPlatformBotSendTokenIn"] = t.struct(
        {"expiryTimeMicros": t.string().optional(), "sendToken": t.string().optional()}
    ).named(renames["ChatBotPlatformBotSendTokenIn"])
    types["ChatBotPlatformBotSendTokenOut"] = t.struct(
        {
            "expiryTimeMicros": t.string().optional(),
            "sendToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ChatBotPlatformBotSendTokenOut"])
    types["RepositoryWebrefPreprocessingUrlSourceInfoIn"] = t.struct(
        {
            "source": t.string(),
            "newSchema": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaIn"]
            ),
            "deprecatedOldSchema": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaIn"]
            ),
            "originalUrl": t.string(),
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoIn"])
    types["RepositoryWebrefPreprocessingUrlSourceInfoOut"] = t.struct(
        {
            "source": t.string(),
            "newSchema": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaOut"]
            ),
            "deprecatedOldSchema": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaOut"]
            ),
            "originalUrl": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoOut"])
    types["NlpSemanticParsingLocalImplicitLocalCategoryIn"] = t.struct(
        {
            "movieTheater": t.boolean(),
            "bank": t.boolean(),
            "hotel": t.boolean(),
            "hairSalon": t.boolean(),
            "gym": t.boolean(),
            "spa": t.boolean(),
            "laundromat": t.boolean(),
            "hospital": t.boolean(),
            "chargingStation": t.boolean(),
            "airport": t.boolean(),
            "gasStation": t.boolean(),
            "postOffice": t.boolean(),
        }
    ).named(renames["NlpSemanticParsingLocalImplicitLocalCategoryIn"])
    types["NlpSemanticParsingLocalImplicitLocalCategoryOut"] = t.struct(
        {
            "movieTheater": t.boolean(),
            "bank": t.boolean(),
            "hotel": t.boolean(),
            "hairSalon": t.boolean(),
            "gym": t.boolean(),
            "spa": t.boolean(),
            "laundromat": t.boolean(),
            "hospital": t.boolean(),
            "chargingStation": t.boolean(),
            "airport": t.boolean(),
            "gasStation": t.boolean(),
            "postOffice": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalImplicitLocalCategoryOut"])
    types["GeostoreInternalFeatureProtoIn"] = t.struct(
        {
            "polygonShapeId": t.string().optional(),
            "rightsStatus": t.proxy(renames["GeostoreRightsStatusProtoIn"]).optional(),
            "restOfWorldPolygonShapeId": t.string().optional(),
            "trust": t.proxy(renames["GeostoreTrustSignalsProtoIn"]).optional(),
            "waterRemovedPolygonShapeId": t.string().optional(),
            "selfPolygonShapeId": t.string().optional(),
        }
    ).named(renames["GeostoreInternalFeatureProtoIn"])
    types["GeostoreInternalFeatureProtoOut"] = t.struct(
        {
            "polygonShapeId": t.string().optional(),
            "rightsStatus": t.proxy(renames["GeostoreRightsStatusProtoOut"]).optional(),
            "restOfWorldPolygonShapeId": t.string().optional(),
            "trust": t.proxy(renames["GeostoreTrustSignalsProtoOut"]).optional(),
            "waterRemovedPolygonShapeId": t.string().optional(),
            "selfPolygonShapeId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInternalFeatureProtoOut"])
    types["ScienceCitationAlternateTitleIn"] = t.struct(
        {
            "TitleHtmlLeftOver": t.string().optional(),
            "Language": t.string(),
            "TitleHtml": t.string().optional(),
            "Title": t.string(),
        }
    ).named(renames["ScienceCitationAlternateTitleIn"])
    types["ScienceCitationAlternateTitleOut"] = t.struct(
        {
            "TitleHtmlLeftOver": t.string().optional(),
            "Language": t.string(),
            "TitleHtml": t.string().optional(),
            "Title": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationAlternateTitleOut"])
    types["GeostoreFeatureProtoIn"] = t.struct(
        {
            "skiBoundary": t.proxy(renames["GeostoreSkiBoundaryProtoIn"]),
            "sourceInfo": t.array(
                t.proxy(renames["GeostoreSourceInfoProtoIn"])
            ).optional(),
            "sign": t.proxy(renames["GeostoreRoadSignProtoIn"]),
            "parent": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])),
            "verticalOrdering": t.proxy(
                renames["GeostoreVerticalOrderingProtoIn"]
            ).optional(),
            "accessPoint": t.array(
                t.proxy(renames["GeostoreAccessPointProtoIn"])
            ).optional(),
            "website": t.array(t.proxy(renames["GeostoreUrlProtoIn"])).optional(),
            "rawGconceptInstanceContainer": t.proxy(
                renames["GeostoreOntologyRawGConceptInstanceContainerProtoIn"]
            ).optional(),
            "transitStation": t.proxy(
                renames["GeostoreTransitStationProtoIn"]
            ).optional(),
            "transitLine": t.proxy(renames["GeostoreTransitLineProtoIn"]),
            "route": t.proxy(renames["GeostoreRouteProtoIn"]).optional(),
            "elevation": t.proxy(renames["GeostoreElevationProtoIn"]),
            "dataSource": t.proxy(renames["GeostoreDataSourceProtoIn"]),
            "businessChain": t.proxy(
                renames["GeostoreBusinessChainProtoIn"]
            ).optional(),
            "roadMonitor": t.proxy(renames["GeostoreRoadMonitorProtoIn"]),
            "knowledgeGraphReference": t.proxy(
                renames["GeostoreKnowledgeGraphReferenceProtoIn"]
            ).optional(),
            "building": t.proxy(renames["GeostoreBuildingProtoIn"]),
            "pose": t.proxy(renames["GeostorePoseProtoIn"]).optional(),
            "htmlText": t.array(t.proxy(renames["GeostoreHtmlTextProtoIn"])).optional(),
            "futureGeometryFor": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "address": t.array(t.proxy(renames["GeostoreAddressProtoIn"])).optional(),
            "preferredViewport": t.proxy(renames["GeostoreRectProtoIn"]).optional(),
            "polygonForDisplay": t.proxy(renames["GeostorePolygonProtoIn"]).optional(),
            "relatedBorder": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "schoolDistrict": t.proxy(renames["GeostoreSchoolDistrictProtoIn"]),
            "anchoredGeometry": t.proxy(
                renames["GeostoreAnchoredGeometryProtoIn"]
            ).optional(),
            "level": t.proxy(renames["GeostoreLevelProtoIn"]).optional(),
            "segment": t.proxy(renames["GeostoreSegmentProtoIn"]),
            "tollCluster": t.proxy(renames["GeostoreTollClusterProtoIn"]).optional(),
            "displayData": t.proxy(renames["GeostoreDisplayDataProtoIn"]).optional(),
            "rankDetails": t.proxy(renames["GeostoreRankDetailsProtoIn"]).optional(),
            "syntheticGeometry": t.boolean().optional(),
            "attribute": t.array(
                t.proxy(renames["GeostoreAttributeProtoIn"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFeatureMetadataProtoIn"]).optional(),
            "establishment": t.proxy(
                renames["GeostoreEstablishmentProtoIn"]
            ).optional(),
            "segmentPath": t.proxy(renames["GeostoreSegmentPathProtoIn"]),
            "relatedEntrance": t.array(
                t.proxy(renames["GeostoreEntranceReferenceProtoIn"])
            ).optional(),
            "intersection": t.proxy(renames["GeostoreIntersectionProtoIn"]),
            "regulatedArea": t.proxy(renames["GeostoreRegulatedAreaProtoIn"]),
            "name": t.array(t.proxy(renames["GeostoreNameProtoIn"])).optional(),
            "exemptRegulatedArea": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "polyline": t.array(t.proxy(renames["GeostorePolyLineProtoIn"])),
            "center": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "attachment": t.array(
                t.proxy(renames["GeostoreAttachmentsAttachmentProtoIn"])
            ).optional(),
            "futureGeometry": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "propertyValueStatus": t.array(
                t.proxy(renames["GeostorePropertyValueStatusProtoIn"])
            ).optional(),
            "relatedTerminalPoint": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "polygon": t.array(t.proxy(renames["GeostorePolygonProtoIn"])),
            "border": t.proxy(renames["GeostoreBorderProtoIn"]),
            "political": t.proxy(renames["GeostorePoliticalProtoIn"]).optional(),
            "skiLift": t.proxy(renames["GeostoreSkiLiftProtoIn"]),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "skiTrail": t.proxy(renames["GeostoreSkiTrailProtoIn"]),
            "relatedTimezone": t.array(
                t.proxy(renames["GeostoreTimezoneProtoIn"])
            ).optional(),
            "point": t.array(t.proxy(renames["GeostorePointProtoIn"])).optional(),
            "geopoliticalGeometry": t.proxy(
                renames["GeostoreGeopoliticalGeometryProtoIn"]
            ).optional(),
            "laneMarker": t.proxy(renames["GeostoreLaneMarkerProtoIn"]),
            "logicalBorder": t.proxy(renames["GeostoreLogicalBorderProtoIn"]),
            "rank": t.number().optional(),
            "covering": t.proxy(renames["GeostoreCellCoveringProtoIn"]).optional(),
            "bound": t.proxy(renames["GeostoreRectProtoIn"]).optional(),
            "doodle": t.proxy(renames["GeostoreDoodleProtoIn"]).optional(),
            "transitLineVariant": t.proxy(
                renames["GeostoreTransitLineVariantProtoIn"]
            ).optional(),
            "elevationModel": t.proxy(
                renames["GeostoreElevationModelProtoIn"]
            ).optional(),
            "entrance": t.proxy(renames["GeostoreEntranceProtoIn"]),
            "bestLocale": t.proxy(renames["GeostoreBestLocaleProtoIn"]).optional(),
            "inferredGeometry": t.proxy(renames["GeostoreInferredGeometryProtoIn"]),
            "internal": t.proxy(renames["GeostoreInternalFeatureProtoIn"]).optional(),
            "storefrontGeometry": t.array(
                t.proxy(renames["GeostoreAnchoredGeometryProtoIn"])
            ).optional(),
            "operations": t.proxy(renames["GeostoreOperationsProtoIn"]).optional(),
            "id": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "socialReference": t.proxy(
                renames["GeostoreSocialReferenceProtoIn"]
            ).optional(),
            "parking": t.proxy(renames["GeostoreParkingProtoIn"]).optional(),
            "originalId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "relatedFeature": t.array(
                t.proxy(renames["GeostoreRelationProtoIn"])
            ).optional(),
            "track": t.array(t.proxy(renames["GeostoreTrackProtoIn"])).optional(),
            "type": t.string().optional(),
            "status": t.proxy(renames["GeostoreExistenceProtoIn"]).optional(),
            "threeDimModel": t.proxy(
                renames["GeostoreThreeDimensionalModelProtoIn"]
            ).optional(),
            "interiorCovering": t.proxy(
                renames["GeostoreCellCoveringProtoIn"]
            ).optional(),
            "intersectionGroup": t.proxy(renames["GeostoreIntersectionGroupProtoIn"]),
            "locale": t.proxy(renames["GeostoreLocaleProtoIn"]),
            "kgProperty": t.array(
                t.proxy(renames["FreebasePropertyValueIn"])
            ).optional(),
            "waterRemovedPolygon": t.proxy(
                renames["GeostorePolygonProtoIn"]
            ).optional(),
            "geometryPrecisionMeters": t.number().optional(),
            "restrictionGroup": t.proxy(renames["GeostoreRestrictionGroupProtoIn"]),
            "child": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
        }
    ).named(renames["GeostoreFeatureProtoIn"])
    types["GeostoreFeatureProtoOut"] = t.struct(
        {
            "skiBoundary": t.proxy(renames["GeostoreSkiBoundaryProtoOut"]),
            "sourceInfo": t.array(
                t.proxy(renames["GeostoreSourceInfoProtoOut"])
            ).optional(),
            "sign": t.proxy(renames["GeostoreRoadSignProtoOut"]),
            "parent": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])),
            "verticalOrdering": t.proxy(
                renames["GeostoreVerticalOrderingProtoOut"]
            ).optional(),
            "accessPoint": t.array(
                t.proxy(renames["GeostoreAccessPointProtoOut"])
            ).optional(),
            "website": t.array(t.proxy(renames["GeostoreUrlProtoOut"])).optional(),
            "rawGconceptInstanceContainer": t.proxy(
                renames["GeostoreOntologyRawGConceptInstanceContainerProtoOut"]
            ).optional(),
            "transitStation": t.proxy(
                renames["GeostoreTransitStationProtoOut"]
            ).optional(),
            "transitLine": t.proxy(renames["GeostoreTransitLineProtoOut"]),
            "route": t.proxy(renames["GeostoreRouteProtoOut"]).optional(),
            "elevation": t.proxy(renames["GeostoreElevationProtoOut"]),
            "dataSource": t.proxy(renames["GeostoreDataSourceProtoOut"]),
            "businessChain": t.proxy(
                renames["GeostoreBusinessChainProtoOut"]
            ).optional(),
            "roadMonitor": t.proxy(renames["GeostoreRoadMonitorProtoOut"]),
            "knowledgeGraphReference": t.proxy(
                renames["GeostoreKnowledgeGraphReferenceProtoOut"]
            ).optional(),
            "building": t.proxy(renames["GeostoreBuildingProtoOut"]),
            "pose": t.proxy(renames["GeostorePoseProtoOut"]).optional(),
            "htmlText": t.array(
                t.proxy(renames["GeostoreHtmlTextProtoOut"])
            ).optional(),
            "futureGeometryFor": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "address": t.array(t.proxy(renames["GeostoreAddressProtoOut"])).optional(),
            "preferredViewport": t.proxy(renames["GeostoreRectProtoOut"]).optional(),
            "polygonForDisplay": t.proxy(renames["GeostorePolygonProtoOut"]).optional(),
            "relatedBorder": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "schoolDistrict": t.proxy(renames["GeostoreSchoolDistrictProtoOut"]),
            "anchoredGeometry": t.proxy(
                renames["GeostoreAnchoredGeometryProtoOut"]
            ).optional(),
            "level": t.proxy(renames["GeostoreLevelProtoOut"]).optional(),
            "segment": t.proxy(renames["GeostoreSegmentProtoOut"]),
            "tollCluster": t.proxy(renames["GeostoreTollClusterProtoOut"]).optional(),
            "displayData": t.proxy(renames["GeostoreDisplayDataProtoOut"]).optional(),
            "rankDetails": t.proxy(renames["GeostoreRankDetailsProtoOut"]).optional(),
            "syntheticGeometry": t.boolean().optional(),
            "attribute": t.array(
                t.proxy(renames["GeostoreAttributeProtoOut"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFeatureMetadataProtoOut"]).optional(),
            "establishment": t.proxy(
                renames["GeostoreEstablishmentProtoOut"]
            ).optional(),
            "segmentPath": t.proxy(renames["GeostoreSegmentPathProtoOut"]),
            "relatedEntrance": t.array(
                t.proxy(renames["GeostoreEntranceReferenceProtoOut"])
            ).optional(),
            "intersection": t.proxy(renames["GeostoreIntersectionProtoOut"]),
            "regulatedArea": t.proxy(renames["GeostoreRegulatedAreaProtoOut"]),
            "name": t.array(t.proxy(renames["GeostoreNameProtoOut"])).optional(),
            "exemptRegulatedArea": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "polyline": t.array(t.proxy(renames["GeostorePolyLineProtoOut"])),
            "center": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "attachment": t.array(
                t.proxy(renames["GeostoreAttachmentsAttachmentProtoOut"])
            ).optional(),
            "futureGeometry": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "propertyValueStatus": t.array(
                t.proxy(renames["GeostorePropertyValueStatusProtoOut"])
            ).optional(),
            "relatedTerminalPoint": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "polygon": t.array(t.proxy(renames["GeostorePolygonProtoOut"])),
            "border": t.proxy(renames["GeostoreBorderProtoOut"]),
            "political": t.proxy(renames["GeostorePoliticalProtoOut"]).optional(),
            "skiLift": t.proxy(renames["GeostoreSkiLiftProtoOut"]),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "skiTrail": t.proxy(renames["GeostoreSkiTrailProtoOut"]),
            "relatedTimezone": t.array(
                t.proxy(renames["GeostoreTimezoneProtoOut"])
            ).optional(),
            "point": t.array(t.proxy(renames["GeostorePointProtoOut"])).optional(),
            "geopoliticalGeometry": t.proxy(
                renames["GeostoreGeopoliticalGeometryProtoOut"]
            ).optional(),
            "laneMarker": t.proxy(renames["GeostoreLaneMarkerProtoOut"]),
            "logicalBorder": t.proxy(renames["GeostoreLogicalBorderProtoOut"]),
            "rank": t.number().optional(),
            "covering": t.proxy(renames["GeostoreCellCoveringProtoOut"]).optional(),
            "bound": t.proxy(renames["GeostoreRectProtoOut"]).optional(),
            "doodle": t.proxy(renames["GeostoreDoodleProtoOut"]).optional(),
            "transitLineVariant": t.proxy(
                renames["GeostoreTransitLineVariantProtoOut"]
            ).optional(),
            "elevationModel": t.proxy(
                renames["GeostoreElevationModelProtoOut"]
            ).optional(),
            "entrance": t.proxy(renames["GeostoreEntranceProtoOut"]),
            "bestLocale": t.proxy(renames["GeostoreBestLocaleProtoOut"]).optional(),
            "inferredGeometry": t.proxy(renames["GeostoreInferredGeometryProtoOut"]),
            "internal": t.proxy(renames["GeostoreInternalFeatureProtoOut"]).optional(),
            "storefrontGeometry": t.array(
                t.proxy(renames["GeostoreAnchoredGeometryProtoOut"])
            ).optional(),
            "operations": t.proxy(renames["GeostoreOperationsProtoOut"]).optional(),
            "id": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "socialReference": t.proxy(
                renames["GeostoreSocialReferenceProtoOut"]
            ).optional(),
            "parking": t.proxy(renames["GeostoreParkingProtoOut"]).optional(),
            "originalId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "relatedFeature": t.array(
                t.proxy(renames["GeostoreRelationProtoOut"])
            ).optional(),
            "track": t.array(t.proxy(renames["GeostoreTrackProtoOut"])).optional(),
            "type": t.string().optional(),
            "status": t.proxy(renames["GeostoreExistenceProtoOut"]).optional(),
            "threeDimModel": t.proxy(
                renames["GeostoreThreeDimensionalModelProtoOut"]
            ).optional(),
            "interiorCovering": t.proxy(
                renames["GeostoreCellCoveringProtoOut"]
            ).optional(),
            "intersectionGroup": t.proxy(renames["GeostoreIntersectionGroupProtoOut"]),
            "locale": t.proxy(renames["GeostoreLocaleProtoOut"]),
            "kgProperty": t.array(
                t.proxy(renames["FreebasePropertyValueOut"])
            ).optional(),
            "waterRemovedPolygon": t.proxy(
                renames["GeostorePolygonProtoOut"]
            ).optional(),
            "geometryPrecisionMeters": t.number().optional(),
            "restrictionGroup": t.proxy(renames["GeostoreRestrictionGroupProtoOut"]),
            "child": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureProtoOut"])
    types["AbuseiamRegionIn"] = t.struct({"region": t.string().optional()}).named(
        renames["AbuseiamRegionIn"]
    )
    types["AbuseiamRegionOut"] = t.struct(
        {
            "region": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamRegionOut"])
    types["KnowledgeAnswersContainerTypeIn"] = t.struct(
        {"slotNames": t.array(t.string())}
    ).named(renames["KnowledgeAnswersContainerTypeIn"])
    types["KnowledgeAnswersContainerTypeOut"] = t.struct(
        {
            "slotNames": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersContainerTypeOut"])
    types["PtokenPTokenIn"] = t.struct({"_": t.string().optional()}).named(
        renames["PtokenPTokenIn"]
    )
    types["PtokenPTokenOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["PtokenPTokenOut"])
    types["AssistantApiSurfacePropertiesExecutionCapabilitiesIn"] = t.struct(
        {
            "supportsNonMaterializedInteractions": t.boolean().optional(),
            "supportsClientOpPreloading": t.boolean().optional(),
            "supportsNonFinalizedResponses": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSurfacePropertiesExecutionCapabilitiesIn"])
    types["AssistantApiSurfacePropertiesExecutionCapabilitiesOut"] = t.struct(
        {
            "supportsNonMaterializedInteractions": t.boolean().optional(),
            "supportsClientOpPreloading": t.boolean().optional(),
            "supportsNonFinalizedResponses": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSurfacePropertiesExecutionCapabilitiesOut"])
    types["NlpSemanticParsingModelsMediaGameIn"] = t.struct(
        {
            "isAnnotatedFromText": t.boolean().optional(),
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaGameIn"])
    types["NlpSemanticParsingModelsMediaGameOut"] = t.struct(
        {
            "isAnnotatedFromText": t.boolean().optional(),
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaGameOut"])
    types["IndexingUrlPatternUrlTreeUrlFeatureIn"] = t.struct(
        {
            "type": t.string(),
            "fingerprint": t.string(),
            "groupInType": t.string().optional(),
            "fingerprintWithGroupInType": t.boolean().optional(),
            "value": t.string(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlFeatureIn"])
    types["IndexingUrlPatternUrlTreeUrlFeatureOut"] = t.struct(
        {
            "type": t.string(),
            "fingerprint": t.string(),
            "groupInType": t.string().optional(),
            "fingerprintWithGroupInType": t.boolean().optional(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlFeatureOut"])
    types["SocialGraphApiProtoPromptContentIn"] = t.struct(
        {"title": t.string().optional()}
    ).named(renames["SocialGraphApiProtoPromptContentIn"])
    types["SocialGraphApiProtoPromptContentOut"] = t.struct(
        {
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPromptContentOut"])
    types["VideoContentSearchAsrCaptionIn"] = t.struct(
        {
            "text": t.string().optional(),
            "confidence": t.number().optional(),
            "durationMs": t.number().optional(),
            "startTimeMs": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchAsrCaptionIn"])
    types["VideoContentSearchAsrCaptionOut"] = t.struct(
        {
            "text": t.string().optional(),
            "confidence": t.number().optional(),
            "durationMs": t.number().optional(),
            "startTimeMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAsrCaptionOut"])
    types["QualityTimebasedLastSignificantUpdateAdjustmentsIn"] = t.struct(
        {
            "unboundedTimestampInSeconds": t.string().optional(),
            "unboundedTimestampSource": t.string().optional(),
            "upperboundTimestampInSeconds": t.string().optional(),
            "adjustmentSource": t.string().optional(),
            "isUpperboundTimestampPrecise": t.boolean().optional(),
        }
    ).named(renames["QualityTimebasedLastSignificantUpdateAdjustmentsIn"])
    types["QualityTimebasedLastSignificantUpdateAdjustmentsOut"] = t.struct(
        {
            "unboundedTimestampInSeconds": t.string().optional(),
            "unboundedTimestampSource": t.string().optional(),
            "upperboundTimestampInSeconds": t.string().optional(),
            "adjustmentSource": t.string().optional(),
            "isUpperboundTimestampPrecise": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedLastSignificantUpdateAdjustmentsOut"])
    types["AssistantApiCoreTypesWebProviderInfoIn"] = t.struct(
        {
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "thirdPartyCustomNluInfo": t.proxy(
                renames["AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoIn"]
            ).optional(),
            "homeStorage": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesWebProviderInfoIn"])
    types["AssistantApiCoreTypesWebProviderInfoOut"] = t.struct(
        {
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "thirdPartyCustomNluInfo": t.proxy(
                renames[
                    "AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoOut"
                ]
            ).optional(),
            "homeStorage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesWebProviderInfoOut"])
    types["GoodocDocumentIn"] = t.struct(
        {
            "EditingHistory": t.array(t.string()).optional(),
            "SubDocuments": t.array(t.proxy(renames["GoodocDocumentIn"])).optional(),
            "page": t.array(t.proxy(renames["GoodocDocumentPageIn"])),
            "LogicalEntityMessageName": t.array(t.string()).optional(),
            "header": t.proxy(renames["GoodocDocumentHeaderIn"]),
            "LogicalEntity": t.array(t.string()).optional(),
        }
    ).named(renames["GoodocDocumentIn"])
    types["GoodocDocumentOut"] = t.struct(
        {
            "EditingHistory": t.array(t.string()).optional(),
            "SubDocuments": t.array(t.proxy(renames["GoodocDocumentOut"])).optional(),
            "page": t.array(t.proxy(renames["GoodocDocumentPageOut"])),
            "LogicalEntityMessageName": t.array(t.string()).optional(),
            "header": t.proxy(renames["GoodocDocumentHeaderOut"]),
            "LogicalEntity": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentOut"])
    types[
        "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoIn"
    ] = t.struct({"isDirectClientInteraction": t.boolean().optional()}).named(
        renames["SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoIn"]
    )
    types[
        "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoOut"
    ] = t.struct(
        {
            "isDirectClientInteraction": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoOut"]
    )
    types["VideoCrawlVideoInlinePlaybackMetadataIn"] = t.struct(
        {
            "expirationTimestampSec": t.string().optional(),
            "vastTag": t.string().optional(),
            "videoUrlOnExternalCdn": t.string().optional(),
            "googleAnalyticsId": t.string().optional(),
            "videoId": t.string().optional(),
            "playbackCountryWhitelist": t.array(t.string()).optional(),
            "transcodeItags": t.array(t.integer()).optional(),
            "playbackCountryBlacklist": t.array(t.string()).optional(),
        }
    ).named(renames["VideoCrawlVideoInlinePlaybackMetadataIn"])
    types["VideoCrawlVideoInlinePlaybackMetadataOut"] = t.struct(
        {
            "expirationTimestampSec": t.string().optional(),
            "vastTag": t.string().optional(),
            "videoUrlOnExternalCdn": t.string().optional(),
            "googleAnalyticsId": t.string().optional(),
            "videoId": t.string().optional(),
            "playbackCountryWhitelist": t.array(t.string()).optional(),
            "transcodeItags": t.array(t.integer()).optional(),
            "playbackCountryBlacklist": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoCrawlVideoInlinePlaybackMetadataOut"])
    types["ImageSafesearchContentOCRAnnotationIn"] = t.struct(
        {
            "vulgarI18nBit": t.boolean().optional(),
            "prominentVulgarScore": t.number().optional(),
            "ocrProminenceScore": t.number().optional(),
            "qbstOffensiveScore": t.number().optional(),
            "ocrAnnotationVersion": t.string().optional(),
            "prominentOffensiveScore": t.number().optional(),
            "pornScore": t.number().optional(),
            "vulgarScore": t.number().optional(),
        }
    ).named(renames["ImageSafesearchContentOCRAnnotationIn"])
    types["ImageSafesearchContentOCRAnnotationOut"] = t.struct(
        {
            "vulgarI18nBit": t.boolean().optional(),
            "prominentVulgarScore": t.number().optional(),
            "ocrProminenceScore": t.number().optional(),
            "qbstOffensiveScore": t.number().optional(),
            "ocrAnnotationVersion": t.string().optional(),
            "prominentOffensiveScore": t.number().optional(),
            "pornScore": t.number().optional(),
            "vulgarScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSafesearchContentOCRAnnotationOut"])
    types[
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceIn"
    ] = t.struct(
        {
            "videoEndMs": t.integer(),
            "end": t.integer(),
            "begin": t.integer().optional(),
            "videoBeginMs": t.integer(),
        }
    ).named(
        renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceIn"]
    )
    types[
        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceOut"
    ] = t.struct(
        {
            "videoEndMs": t.integer(),
            "end": t.integer(),
            "begin": t.integer().optional(),
            "videoBeginMs": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceOut"]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallOut"
        ]
    )
    types["TrawlerPolicyDataIn"] = t.struct(
        {"Label": t.string().optional(), "ExtraData": t.integer().optional()}
    ).named(renames["TrawlerPolicyDataIn"])
    types["TrawlerPolicyDataOut"] = t.struct(
        {
            "Label": t.string().optional(),
            "ExtraData": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerPolicyDataOut"])
    types["RepositoryWebrefPreprocessingNameEntityMetadataIn"] = t.struct(
        {
            "isStrongIdentifier": t.boolean().optional(),
            "isLyricsContent": t.boolean().optional(),
            "isBypassedName": t.boolean().optional(),
            "isReferenceName": t.boolean().optional(),
            "isUnnormalizedName": t.boolean().optional(),
            "isGeneratedStreetname": t.boolean().optional(),
            "isTrustedAllcapsName": t.boolean().optional(),
            "isCompoundName": t.boolean().optional(),
            "isSynonymOrFuzzyMatch": t.boolean().optional(),
            "isHierarchyPropagated": t.boolean().optional(),
            "isCompoundRetrievalKey": t.boolean().optional(),
            "isPhoneNumber": t.boolean().optional(),
            "suppressTokenization": t.boolean().optional(),
            "originalNames": t.proxy(
                renames["RepositoryWebrefPreprocessingOriginalNamesIn"]
            ).optional(),
            "isReverseUniquePropertyName": t.boolean().optional(),
            "isEventRetrievalKey": t.boolean().optional(),
            "notGeneratedName": t.boolean().optional(),
            "isRefconName": t.boolean().optional(),
            "isDictionaryTerm": t.boolean().optional(),
            "isIsbn": t.boolean().optional(),
            "isGeneratedName": t.boolean().optional(),
            "isRefpageUrl": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingNameEntityMetadataIn"])
    types["RepositoryWebrefPreprocessingNameEntityMetadataOut"] = t.struct(
        {
            "isStrongIdentifier": t.boolean().optional(),
            "isLyricsContent": t.boolean().optional(),
            "isBypassedName": t.boolean().optional(),
            "isReferenceName": t.boolean().optional(),
            "isUnnormalizedName": t.boolean().optional(),
            "isGeneratedStreetname": t.boolean().optional(),
            "isTrustedAllcapsName": t.boolean().optional(),
            "isCompoundName": t.boolean().optional(),
            "isSynonymOrFuzzyMatch": t.boolean().optional(),
            "isHierarchyPropagated": t.boolean().optional(),
            "isCompoundRetrievalKey": t.boolean().optional(),
            "isPhoneNumber": t.boolean().optional(),
            "suppressTokenization": t.boolean().optional(),
            "originalNames": t.proxy(
                renames["RepositoryWebrefPreprocessingOriginalNamesOut"]
            ).optional(),
            "isReverseUniquePropertyName": t.boolean().optional(),
            "isEventRetrievalKey": t.boolean().optional(),
            "notGeneratedName": t.boolean().optional(),
            "isRefconName": t.boolean().optional(),
            "isDictionaryTerm": t.boolean().optional(),
            "isIsbn": t.boolean().optional(),
            "isGeneratedName": t.boolean().optional(),
            "isRefpageUrl": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingNameEntityMetadataOut"])
    types["AssistantApiCapabilitiesHomeAppCapabilitiesIn"] = t.struct(
        {"setupState": t.string().optional()}
    ).named(renames["AssistantApiCapabilitiesHomeAppCapabilitiesIn"])
    types["AssistantApiCapabilitiesHomeAppCapabilitiesOut"] = t.struct(
        {
            "setupState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCapabilitiesHomeAppCapabilitiesOut"])
    types["GeostoreUrlProtoIn"] = t.struct(
        {
            "language": t.string().optional(),
            "url": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "pagerank": t.integer().optional(),
        }
    ).named(renames["GeostoreUrlProtoIn"])
    types["GeostoreUrlProtoOut"] = t.struct(
        {
            "language": t.string().optional(),
            "url": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "pagerank": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreUrlProtoOut"])
    types["TrawlerClientServiceInfoIn"] = t.struct(
        {
            "clientLabels": t.array(
                t.proxy(renames["TrawlerClientServiceInfoClientLabelsIn"])
            ),
            "ServiceClientID": t.string(),
            "DelegatedProjectName": t.string().optional(),
        }
    ).named(renames["TrawlerClientServiceInfoIn"])
    types["TrawlerClientServiceInfoOut"] = t.struct(
        {
            "clientLabels": t.array(
                t.proxy(renames["TrawlerClientServiceInfoClientLabelsOut"])
            ),
            "ServiceClientID": t.string(),
            "DelegatedProjectName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerClientServiceInfoOut"])
    types["UniversalsearchNewPackerKnowledgeResultSupportProvenanceIn"] = t.struct(
        {
            "entityGroupType": t.string().optional(),
            "fromAnswer": t.boolean().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["UniversalsearchNewPackerKnowledgeResultSupportProvenanceIn"])
    types["UniversalsearchNewPackerKnowledgeResultSupportProvenanceOut"] = t.struct(
        {
            "entityGroupType": t.string().optional(),
            "fromAnswer": t.boolean().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UniversalsearchNewPackerKnowledgeResultSupportProvenanceOut"])
    types["DrishtiVesperThumbnailQualityScoreIn"] = t.struct(
        {"type": t.string(), "score": t.number()}
    ).named(renames["DrishtiVesperThumbnailQualityScoreIn"])
    types["DrishtiVesperThumbnailQualityScoreOut"] = t.struct(
        {
            "type": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperThumbnailQualityScoreOut"])
    types["QualityDialogManagerReminderClientTypeIn"] = t.struct(
        {"type": t.string()}
    ).named(renames["QualityDialogManagerReminderClientTypeIn"])
    types["QualityDialogManagerReminderClientTypeOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["QualityDialogManagerReminderClientTypeOut"])
    types["HtmlrenderWebkitHeadlessProtoOffsetIn"] = t.struct(
        {"value": t.integer(), "unit": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"])
    types["HtmlrenderWebkitHeadlessProtoOffsetOut"] = t.struct(
        {
            "value": t.integer(),
            "unit": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"])
    types["DrishtiIndexedFeatureDataIn"] = t.struct(
        {
            "value": t.array(t.number()),
            "index": t.array(t.string()).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
        }
    ).named(renames["DrishtiIndexedFeatureDataIn"])
    types["DrishtiIndexedFeatureDataOut"] = t.struct(
        {
            "value": t.array(t.number()),
            "index": t.array(t.string()).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiIndexedFeatureDataOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotMapIn"] = t.struct(
        {"slots": t.struct({"_": t.string().optional()})}
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotMapIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotMapOut"] = t.struct(
        {
            "slots": t.struct({"_": t.string().optional()}),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotMapOut"])
    types["LocalsearchDocInfoIn"] = t.struct({"_": t.string().optional()}).named(
        renames["LocalsearchDocInfoIn"]
    )
    types["LocalsearchDocInfoOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["LocalsearchDocInfoOut"])
    types["RepositoryWebrefGenericIndicesIn"] = t.struct(
        {"index": t.integer().optional()}
    ).named(renames["RepositoryWebrefGenericIndicesIn"])
    types["RepositoryWebrefGenericIndicesOut"] = t.struct(
        {
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefGenericIndicesOut"])
    types["SocialGraphApiProtoAndroidDeviceInfoIn"] = t.struct(
        {"id": t.string().optional()}
    ).named(renames["SocialGraphApiProtoAndroidDeviceInfoIn"])
    types["SocialGraphApiProtoAndroidDeviceInfoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoAndroidDeviceInfoOut"])
    types["AbuseiamGeoRestrictionIn"] = t.struct(
        {"locale": t.array(t.proxy(renames["AbuseiamGeoRestrictionLocaleIn"]))}
    ).named(renames["AbuseiamGeoRestrictionIn"])
    types["AbuseiamGeoRestrictionOut"] = t.struct(
        {
            "locale": t.array(t.proxy(renames["AbuseiamGeoRestrictionLocaleOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamGeoRestrictionOut"])
    types["IndexingSignalAggregatorAggregatedScoreIn"] = t.struct(
        {
            "numUrlsMatched": t.string().optional(),
            "patternsUsedInMediation": t.array(t.string()).optional(),
            "signalId": t.integer().optional(),
            "totalWeightLow": t.number().optional(),
            "totalScoreSqrLow": t.number().optional(),
            "numUrlsWithSignal": t.string().optional(),
            "totalScoreLow": t.number().optional(),
            "runningMeanAndVarianceInternalState": t.proxy(
                renames["IndexingSignalAggregatorRunningMeanAndVarianceInternalStateIn"]
            ),
            "numImportantUrls": t.string(),
            "deviation": t.number().optional(),
            "percentile": t.array(t.number()).optional(),
            "patternLayer": t.string().optional(),
            "scores": t.array(t.number()).optional(),
            "totalScore": t.number().optional(),
            "totalScoreSqr": t.number().optional(),
            "minScoreUrl": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreIn"]
            ).optional(),
            "samples": t.array(
                t.proxy(renames["IndexingSignalAggregatorUrlScoreIn"])
            ).optional(),
            "maxScoreUrl": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreIn"]
            ).optional(),
            "totalWeight": t.number().optional(),
            "m2": t.number().optional(),
            "meanScore": t.number().optional(),
            "mean": t.number(),
            "singleUrlScore": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreIn"]
            ).optional(),
        }
    ).named(renames["IndexingSignalAggregatorAggregatedScoreIn"])
    types["IndexingSignalAggregatorAggregatedScoreOut"] = t.struct(
        {
            "numUrlsMatched": t.string().optional(),
            "patternsUsedInMediation": t.array(t.string()).optional(),
            "signalId": t.integer().optional(),
            "totalWeightLow": t.number().optional(),
            "totalScoreSqrLow": t.number().optional(),
            "numUrlsWithSignal": t.string().optional(),
            "totalScoreLow": t.number().optional(),
            "runningMeanAndVarianceInternalState": t.proxy(
                renames[
                    "IndexingSignalAggregatorRunningMeanAndVarianceInternalStateOut"
                ]
            ),
            "numImportantUrls": t.string(),
            "deviation": t.number().optional(),
            "percentile": t.array(t.number()).optional(),
            "patternLayer": t.string().optional(),
            "scores": t.array(t.number()).optional(),
            "totalScore": t.number().optional(),
            "totalScoreSqr": t.number().optional(),
            "minScoreUrl": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreOut"]
            ).optional(),
            "samples": t.array(
                t.proxy(renames["IndexingSignalAggregatorUrlScoreOut"])
            ).optional(),
            "maxScoreUrl": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreOut"]
            ).optional(),
            "totalWeight": t.number().optional(),
            "m2": t.number().optional(),
            "meanScore": t.number().optional(),
            "mean": t.number(),
            "singleUrlScore": t.proxy(
                renames["IndexingSignalAggregatorUrlScoreOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorAggregatedScoreOut"])
    types["LogsSemanticInterpretationIntentQueryLinkKindFlagsIn"] = t.struct(
        {
            "latentEntity": t.string(),
            "geoContainment": t.string(),
            "mdvc": t.string(),
            "cluster": t.string(),
            "implication": t.string(),
            "property": t.string(),
            "resolution": t.string(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsIn"])
    types["LogsSemanticInterpretationIntentQueryLinkKindFlagsOut"] = t.struct(
        {
            "latentEntity": t.string(),
            "geoContainment": t.string(),
            "mdvc": t.string(),
            "cluster": t.string(),
            "implication": t.string(),
            "property": t.string(),
            "resolution": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsOut"])
    types["NlpSemanticParsingLocalServiceConstraintIn"] = t.struct(
        {"serviceType": t.string()}
    ).named(renames["NlpSemanticParsingLocalServiceConstraintIn"])
    types["NlpSemanticParsingLocalServiceConstraintOut"] = t.struct(
        {
            "serviceType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalServiceConstraintOut"])
    types["UtilStatusProtoIn"] = t.struct(
        {
            "message": t.string().optional(),
            "code": t.integer().optional(),
            "space": t.string().optional(),
            "messageSet": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "canonicalCode": t.integer().optional(),
        }
    ).named(renames["UtilStatusProtoIn"])
    types["UtilStatusProtoOut"] = t.struct(
        {
            "message": t.string().optional(),
            "code": t.integer().optional(),
            "space": t.string().optional(),
            "messageSet": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "canonicalCode": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UtilStatusProtoOut"])
    types["ImageQualitySensitiveMediaOrPeopleEntitiesIn"] = t.struct(
        {
            "mediaEntitiesId": t.array(t.string()).optional(),
            "peopleEntitiesId": t.array(t.string()).optional(),
        }
    ).named(renames["ImageQualitySensitiveMediaOrPeopleEntitiesIn"])
    types["ImageQualitySensitiveMediaOrPeopleEntitiesOut"] = t.struct(
        {
            "mediaEntitiesId": t.array(t.string()).optional(),
            "peopleEntitiesId": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageQualitySensitiveMediaOrPeopleEntitiesOut"])
    types["SearchPolicyRankableSensitivityPrefilterIn"] = t.struct(
        {"propagateOnly": t.boolean()}
    ).named(renames["SearchPolicyRankableSensitivityPrefilterIn"])
    types["SearchPolicyRankableSensitivityPrefilterOut"] = t.struct(
        {
            "propagateOnly": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityPrefilterOut"])
    types["QualityShoppingShoppingAttachmentOfferIn"] = t.struct(
        {
            "matchingType": t.string().optional(),
            "fingerprintOfOfferUrls": t.array(t.string()).optional(),
            "nonDisplayableCurrency": t.string(),
            "gtinValue": t.array(t.string()).optional(),
            "nonDisplayableOrganicScoreMillis": t.integer().optional(),
            "nonDisplayableBrandMerchantRelationship": t.string().optional(),
            "merchantItemId": t.string().optional(),
            "refType": t.string(),
            "condition": t.string(),
            "offerDocid": t.string(),
            "inferredImages": t.array(
                t.proxy(renames["ShoppingWebentityShoppingAnnotationInferredImageIn"])
            ).optional(),
            "soriVersionId": t.proxy(
                renames["ShoppingWebentityShoppingAnnotationSoriVersionIdIn"]
            ),
            "merchantAccountId": t.string().optional(),
            "imageId": t.array(t.string()).optional(),
            "controlType": t.string(),
            "isLensBuildable": t.boolean().optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentOfferIn"])
    types["QualityShoppingShoppingAttachmentOfferOut"] = t.struct(
        {
            "matchingType": t.string().optional(),
            "fingerprintOfOfferUrls": t.array(t.string()).optional(),
            "nonDisplayableCurrency": t.string(),
            "gtinValue": t.array(t.string()).optional(),
            "nonDisplayableOrganicScoreMillis": t.integer().optional(),
            "nonDisplayableBrandMerchantRelationship": t.string().optional(),
            "merchantItemId": t.string().optional(),
            "refType": t.string(),
            "condition": t.string(),
            "offerDocid": t.string(),
            "inferredImages": t.array(
                t.proxy(renames["ShoppingWebentityShoppingAnnotationInferredImageOut"])
            ).optional(),
            "soriVersionId": t.proxy(
                renames["ShoppingWebentityShoppingAnnotationSoriVersionIdOut"]
            ),
            "merchantAccountId": t.string().optional(),
            "imageId": t.array(t.string()).optional(),
            "controlType": t.string(),
            "isLensBuildable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentOfferOut"])
    types["ClassifierPornReferrerCountsIn"] = t.struct(
        {
            "adult": t.integer(),
            "porn": t.integer().optional(),
            "total": t.integer().optional(),
        }
    ).named(renames["ClassifierPornReferrerCountsIn"])
    types["ClassifierPornReferrerCountsOut"] = t.struct(
        {
            "adult": t.integer(),
            "porn": t.integer().optional(),
            "total": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornReferrerCountsOut"])
    types["NlpSemanticParsingDateTimeAnnotationIn"] = t.struct(
        {
            "startDate": t.array(t.string()).optional(),
            "startWeekday": t.string(),
            "endTime": t.array(t.string()),
            "startTime": t.array(t.string()),
            "endWeekday": t.string(),
            "endDate": t.array(t.string()),
            "dateType": t.string(),
            "rawText": t.string(),
            "timeType": t.string(),
        }
    ).named(renames["NlpSemanticParsingDateTimeAnnotationIn"])
    types["NlpSemanticParsingDateTimeAnnotationOut"] = t.struct(
        {
            "startDate": t.array(t.string()).optional(),
            "startWeekday": t.string(),
            "endTime": t.array(t.string()),
            "startTime": t.array(t.string()),
            "endWeekday": t.string(),
            "endDate": t.array(t.string()),
            "dateType": t.string(),
            "rawText": t.string(),
            "timeType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDateTimeAnnotationOut"])
    types["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            )
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsOut"])
    types["QualityOrbitAsteroidBeltImageIntentScoresIn"] = t.struct(
        {
            "intents": t.array(t.string()).optional(),
            "scores": t.array(t.integer()).optional(),
        }
    ).named(renames["QualityOrbitAsteroidBeltImageIntentScoresIn"])
    types["QualityOrbitAsteroidBeltImageIntentScoresOut"] = t.struct(
        {
            "intents": t.array(t.string()).optional(),
            "scores": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityOrbitAsteroidBeltImageIntentScoresOut"])
    types["GoodocDocumentHeaderFontIn"] = t.struct(
        {"FontName": t.string(), "FontId": t.integer()}
    ).named(renames["GoodocDocumentHeaderFontIn"])
    types["GoodocDocumentHeaderFontOut"] = t.struct(
        {
            "FontName": t.string(),
            "FontId": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentHeaderFontOut"])
    types["SafesearchVideoContentSignalsIn"] = t.struct(
        {
            "versionTag": t.string(),
            "isAbuseWithHighConfidence": t.boolean().optional(),
            "videoClassifierOutput": t.proxy(
                renames["SafesearchVideoClassifierOutputIn"]
            ).optional(),
            "scores": t.struct({"_": t.string().optional()}),
        }
    ).named(renames["SafesearchVideoContentSignalsIn"])
    types["SafesearchVideoContentSignalsOut"] = t.struct(
        {
            "versionTag": t.string(),
            "isAbuseWithHighConfidence": t.boolean().optional(),
            "videoClassifierOutput": t.proxy(
                renames["SafesearchVideoClassifierOutputOut"]
            ).optional(),
            "scores": t.struct({"_": t.string().optional()}),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SafesearchVideoContentSignalsOut"])
    types["RichsnippetsPageMapTemplateTypeIn"] = t.struct({"src": t.string()}).named(
        renames["RichsnippetsPageMapTemplateTypeIn"]
    )
    types["RichsnippetsPageMapTemplateTypeOut"] = t.struct(
        {"src": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["RichsnippetsPageMapTemplateTypeOut"])
    types["GoogleCloudContentwarehouseV1IntegerTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1IntegerTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1IntegerTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1IntegerTypeOptionsOut"])
    types["ResearchScienceSearchReconciledMetadataIn"] = t.struct(
        {
            "catalog": t.proxy(renames["ResearchScienceSearchCatalogIn"]).optional(),
            "datasetClassificationScore": t.number().optional(),
            "topSalientTermLabel": t.array(t.string()).optional(),
            "metadataType": t.string(),
            "fieldOfStudy": t.array(
                t.proxy(renames["ResearchScienceSearchFieldOfStudyInfoIn"])
            ).optional(),
            "compactIdentifierFromCitation": t.array(t.string()).optional(),
            "basicFieldsHash": t.string().optional(),
            "hasTableSummaries": t.boolean().optional(),
            "scholarQuery": t.string().optional(),
            "funder": t.array(
                t.proxy(renames["ResearchScienceSearchOrganizationIn"])
            ).optional(),
            "imageUrl": t.array(t.string()).optional(),
            "isAccessibleForFree": t.string().optional(),
            "versionEmbeddingFieldsHash": t.string().optional(),
            "licenseDeprecated": t.array(t.string()).optional(),
            "isInferred": t.boolean().optional(),
            "dateModified": t.proxy(renames["ResearchScienceSearchDateIn"]).optional(),
            "numberOfDatasetsAtSourceUrl": t.integer().optional(),
            "denylistStatus": t.array(t.string()),
            "sameAs": t.array(t.string()).optional(),
            "relatedArticleUrl": t.string().optional(),
            "datasetClassificationFieldsHash": t.string().optional(),
            "alternateName": t.array(t.string()).optional(),
            "url": t.array(t.string()).optional(),
            "sourceUrlDocjoinInfo": t.proxy(
                renames["ResearchScienceSearchSourceUrlDocjoinInfoIn"]
            ).optional(),
            "license": t.array(
                t.proxy(renames["ResearchScienceSearchLicenseIn"])
            ).optional(),
            "languageCode": t.string().optional(),
            "publication": t.array(t.proxy(renames["ResearchScienceSearchCitationIn"])),
            "datePublished": t.proxy(renames["ResearchScienceSearchDateIn"]).optional(),
            "versionEmbeddingVector": t.array(t.number()).optional(),
            "mentionedUrls": t.array(t.string()).optional(),
            "fingerprint": t.string().optional(),
            "authorList": t.string().optional(),
            "id": t.string().optional(),
            "dataDownload": t.array(
                t.proxy(renames["ResearchScienceSearchDataDownloadIn"])
            ).optional(),
            "description": t.array(t.string()).optional(),
            "variable": t.array(t.string()).optional(),
            "sourceUrl": t.string().optional(),
            "indexInCluster": t.integer().optional(),
            "coverageStartDate": t.proxy(
                renames["ResearchScienceSearchDateIn"]
            ).optional(),
            "replica": t.array(
                t.proxy(renames["ResearchScienceSearchReplicaIn"])
            ).optional(),
            "doi": t.string().optional(),
            "sourceOrganization": t.array(
                t.proxy(renames["ResearchScienceSearchOrganizationIn"])
            ).optional(),
            "keyword": t.array(t.string()).optional(),
            "identifierFromSource": t.array(t.string()).optional(),
            "doiFromCitation": t.array(t.string()).optional(),
            "dateCreated": t.proxy(renames["ResearchScienceSearchDateIn"]).optional(),
            "descriptionInHtml": t.array(t.string()).optional(),
            "scholarlyArticle": t.proxy(
                renames["ResearchScienceSearchScholarlyArticleIn"]
            ).optional(),
            "isBasedOn": t.array(t.string()).optional(),
            "measurementTechnique": t.array(t.string()).optional(),
            "name": t.array(t.string()).optional(),
            "spatialCoverage": t.array(
                t.proxy(renames["ResearchScienceSearchLocationIn"])
            ).optional(),
            "dateUpdated": t.proxy(renames["ResearchScienceSearchDateIn"]).optional(),
            "versionClusterInfo": t.proxy(
                renames["ResearchScienceSearchVersionClusterInfoIn"]
            ).optional(),
            "coverageEndDate": t.proxy(renames["ResearchScienceSearchDateIn"]),
            "compactIdentifier": t.array(t.string()).optional(),
            "numberOfScholarCitations": t.integer().optional(),
        }
    ).named(renames["ResearchScienceSearchReconciledMetadataIn"])
    types["ResearchScienceSearchReconciledMetadataOut"] = t.struct(
        {
            "catalog": t.proxy(renames["ResearchScienceSearchCatalogOut"]).optional(),
            "datasetClassificationScore": t.number().optional(),
            "topSalientTermLabel": t.array(t.string()).optional(),
            "metadataType": t.string(),
            "fieldOfStudy": t.array(
                t.proxy(renames["ResearchScienceSearchFieldOfStudyInfoOut"])
            ).optional(),
            "compactIdentifierFromCitation": t.array(t.string()).optional(),
            "basicFieldsHash": t.string().optional(),
            "hasTableSummaries": t.boolean().optional(),
            "scholarQuery": t.string().optional(),
            "funder": t.array(
                t.proxy(renames["ResearchScienceSearchOrganizationOut"])
            ).optional(),
            "imageUrl": t.array(t.string()).optional(),
            "isAccessibleForFree": t.string().optional(),
            "versionEmbeddingFieldsHash": t.string().optional(),
            "licenseDeprecated": t.array(t.string()).optional(),
            "isInferred": t.boolean().optional(),
            "dateModified": t.proxy(renames["ResearchScienceSearchDateOut"]).optional(),
            "numberOfDatasetsAtSourceUrl": t.integer().optional(),
            "denylistStatus": t.array(t.string()),
            "sameAs": t.array(t.string()).optional(),
            "relatedArticleUrl": t.string().optional(),
            "datasetClassificationFieldsHash": t.string().optional(),
            "alternateName": t.array(t.string()).optional(),
            "url": t.array(t.string()).optional(),
            "sourceUrlDocjoinInfo": t.proxy(
                renames["ResearchScienceSearchSourceUrlDocjoinInfoOut"]
            ).optional(),
            "license": t.array(
                t.proxy(renames["ResearchScienceSearchLicenseOut"])
            ).optional(),
            "languageCode": t.string().optional(),
            "publication": t.array(
                t.proxy(renames["ResearchScienceSearchCitationOut"])
            ),
            "datePublished": t.proxy(
                renames["ResearchScienceSearchDateOut"]
            ).optional(),
            "versionEmbeddingVector": t.array(t.number()).optional(),
            "mentionedUrls": t.array(t.string()).optional(),
            "fingerprint": t.string().optional(),
            "authorList": t.string().optional(),
            "id": t.string().optional(),
            "dataDownload": t.array(
                t.proxy(renames["ResearchScienceSearchDataDownloadOut"])
            ).optional(),
            "description": t.array(t.string()).optional(),
            "variable": t.array(t.string()).optional(),
            "sourceUrl": t.string().optional(),
            "indexInCluster": t.integer().optional(),
            "coverageStartDate": t.proxy(
                renames["ResearchScienceSearchDateOut"]
            ).optional(),
            "replica": t.array(
                t.proxy(renames["ResearchScienceSearchReplicaOut"])
            ).optional(),
            "doi": t.string().optional(),
            "sourceOrganization": t.array(
                t.proxy(renames["ResearchScienceSearchOrganizationOut"])
            ).optional(),
            "keyword": t.array(t.string()).optional(),
            "identifierFromSource": t.array(t.string()).optional(),
            "doiFromCitation": t.array(t.string()).optional(),
            "dateCreated": t.proxy(renames["ResearchScienceSearchDateOut"]).optional(),
            "descriptionInHtml": t.array(t.string()).optional(),
            "scholarlyArticle": t.proxy(
                renames["ResearchScienceSearchScholarlyArticleOut"]
            ).optional(),
            "isBasedOn": t.array(t.string()).optional(),
            "measurementTechnique": t.array(t.string()).optional(),
            "name": t.array(t.string()).optional(),
            "spatialCoverage": t.array(
                t.proxy(renames["ResearchScienceSearchLocationOut"])
            ).optional(),
            "dateUpdated": t.proxy(renames["ResearchScienceSearchDateOut"]).optional(),
            "versionClusterInfo": t.proxy(
                renames["ResearchScienceSearchVersionClusterInfoOut"]
            ).optional(),
            "coverageEndDate": t.proxy(renames["ResearchScienceSearchDateOut"]),
            "compactIdentifier": t.array(t.string()).optional(),
            "numberOfScholarCitations": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchReconciledMetadataOut"])
    types["VideoVideoGeoLocationIn"] = t.struct(
        {
            "latitudeE7": t.integer().optional(),
            "longitudeE7": t.integer(),
            "altitudeE2": t.integer().optional(),
        }
    ).named(renames["VideoVideoGeoLocationIn"])
    types["VideoVideoGeoLocationOut"] = t.struct(
        {
            "latitudeE7": t.integer().optional(),
            "longitudeE7": t.integer(),
            "altitudeE2": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoGeoLocationOut"])
    types["VideoSEIMessageIn"] = t.struct(
        {
            "payloadtype": t.integer().optional(),
            "count": t.integer().optional(),
            "cumulativeSize": t.string().optional(),
        }
    ).named(renames["VideoSEIMessageIn"])
    types["VideoSEIMessageOut"] = t.struct(
        {
            "payloadtype": t.integer().optional(),
            "count": t.integer().optional(),
            "cumulativeSize": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoSEIMessageOut"])
    types["QualityPreviewRanklabTitleIn"] = t.struct(
        {
            "goldmineForeign": t.number(),
            "goldmineTrustFactor": t.number(),
            "dupTokens": t.integer().optional(),
            "sourceOndomainAnchor": t.boolean(),
            "sourceTitleTag": t.boolean().optional(),
            "goldmineLocalTitleFactor": t.number(),
            "baseRank": t.integer().optional(),
            "docRelevance": t.number(),
            "goldmineSitenameFactor": t.number(),
            "sourceHeadingTag": t.boolean(),
            "goldminePageScore": t.number().optional(),
            "text": t.string().optional(),
            "queryMatch": t.integer().optional(),
            "dataSourceType": t.string().optional(),
            "goldmineReadabilityScore": t.number(),
            "sourceTransliteratedTitle": t.boolean(),
            "goldmineHeadingFactor": t.number(),
            "docLang": t.string().optional(),
            "perTypeRank": t.integer().optional(),
            "widthFraction": t.number().optional(),
            "sourceGeometry": t.boolean(),
            "goldmineHasBoilerplateInTitle": t.number(),
            "isTruncated": t.boolean().optional(),
            "percentBodyTitleTokensCovered": t.number().optional(),
            "goldmineHeaderIsH1": t.number(),
            "testGoldmineFinalScore": t.number().optional(),
            "sourceOnsiteAnchor": t.boolean(),
            "queryRelevance": t.number().optional(),
            "goldmineTitleTagFactor": t.number(),
            "baseGoldmineFinalScore": t.number().optional(),
            "goldmineOgTitleFactor": t.number(),
            "goldmineAnchorFactor": t.number().optional(),
            "sourceOffdomainAnchor": t.boolean(),
            "goldmineFinalScore": t.number().optional(),
            "goldmineBodyFactor": t.number(),
            "goldmineIsTitleTag": t.number(),
            "percentTokensCoveredByBodyTitle": t.number().optional(),
            "goldmineLocationFactor": t.number(),
            "goldmineIsBadTitle": t.number(),
            "goldmineIsTruncated": t.number(),
            "testRank": t.integer().optional(),
            "goldmineSalientTermFactor": t.number(),
            "goldmineHasTitleNgram": t.number(),
            "goldmineOnPageDemotionFactor": t.number(),
            "goldmineOtherBoostFeatureCount": t.integer().optional(),
            "queryMatchFraction": t.number().optional(),
            "goldmineAnchorSupportOnly": t.number(),
            "goldmineIsHeadingTag": t.number(),
            "goldmineNavboostFactor": t.number(),
            "forcedExperimentScore": t.integer().optional(),
            "goldmineAdjustedScore": t.number().optional(),
            "goldmineUrlMatchFactor": t.number(),
            "perTypeQuality": t.string().optional(),
            "goldmineBlockbertFactor": t.number(),
            "goldmineSubHeading": t.number(),
            "sourceLocalTitle": t.boolean(),
            "isValid": t.boolean().optional(),
            "goldmineGeometryFactor": t.number(),
            "hasSiteInfo": t.boolean().optional(),
        }
    ).named(renames["QualityPreviewRanklabTitleIn"])
    types["QualityPreviewRanklabTitleOut"] = t.struct(
        {
            "goldmineForeign": t.number(),
            "goldmineTrustFactor": t.number(),
            "dupTokens": t.integer().optional(),
            "sourceOndomainAnchor": t.boolean(),
            "sourceTitleTag": t.boolean().optional(),
            "goldmineLocalTitleFactor": t.number(),
            "baseRank": t.integer().optional(),
            "docRelevance": t.number(),
            "goldmineSitenameFactor": t.number(),
            "sourceHeadingTag": t.boolean(),
            "goldminePageScore": t.number().optional(),
            "text": t.string().optional(),
            "queryMatch": t.integer().optional(),
            "dataSourceType": t.string().optional(),
            "goldmineReadabilityScore": t.number(),
            "sourceTransliteratedTitle": t.boolean(),
            "goldmineHeadingFactor": t.number(),
            "docLang": t.string().optional(),
            "perTypeRank": t.integer().optional(),
            "widthFraction": t.number().optional(),
            "sourceGeometry": t.boolean(),
            "goldmineHasBoilerplateInTitle": t.number(),
            "isTruncated": t.boolean().optional(),
            "percentBodyTitleTokensCovered": t.number().optional(),
            "goldmineHeaderIsH1": t.number(),
            "testGoldmineFinalScore": t.number().optional(),
            "sourceOnsiteAnchor": t.boolean(),
            "queryRelevance": t.number().optional(),
            "goldmineTitleTagFactor": t.number(),
            "baseGoldmineFinalScore": t.number().optional(),
            "goldmineOgTitleFactor": t.number(),
            "goldmineAnchorFactor": t.number().optional(),
            "sourceOffdomainAnchor": t.boolean(),
            "goldmineFinalScore": t.number().optional(),
            "goldmineBodyFactor": t.number(),
            "goldmineIsTitleTag": t.number(),
            "percentTokensCoveredByBodyTitle": t.number().optional(),
            "goldmineLocationFactor": t.number(),
            "goldmineIsBadTitle": t.number(),
            "goldmineIsTruncated": t.number(),
            "testRank": t.integer().optional(),
            "goldmineSalientTermFactor": t.number(),
            "goldmineHasTitleNgram": t.number(),
            "goldmineOnPageDemotionFactor": t.number(),
            "goldmineOtherBoostFeatureCount": t.integer().optional(),
            "queryMatchFraction": t.number().optional(),
            "goldmineAnchorSupportOnly": t.number(),
            "goldmineIsHeadingTag": t.number(),
            "goldmineNavboostFactor": t.number(),
            "forcedExperimentScore": t.integer().optional(),
            "goldmineAdjustedScore": t.number().optional(),
            "goldmineUrlMatchFactor": t.number(),
            "perTypeQuality": t.string().optional(),
            "goldmineBlockbertFactor": t.number(),
            "goldmineSubHeading": t.number(),
            "sourceLocalTitle": t.boolean(),
            "isValid": t.boolean().optional(),
            "goldmineGeometryFactor": t.number(),
            "hasSiteInfo": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewRanklabTitleOut"])
    types["DrishtiLabelSetElementIn"] = t.struct(
        {"label": t.proxy(renames["DrishtiLabelSetDataIn"]), "name": t.string()}
    ).named(renames["DrishtiLabelSetElementIn"])
    types["DrishtiLabelSetElementOut"] = t.struct(
        {
            "label": t.proxy(renames["DrishtiLabelSetDataOut"]),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiLabelSetElementOut"])
    types["GoogleCloudContentwarehouseV1CreateDocumentResponseIn"] = t.struct(
        {
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentIn"]
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"]
            ).optional(),
            "longRunningOperations": t.array(
                t.proxy(renames["GoogleLongrunningOperationIn"])
            ).optional(),
            "ruleEngineOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEngineOutputIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentResponseIn"])
    types["GoogleCloudContentwarehouseV1CreateDocumentResponseOut"] = t.struct(
        {
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentOut"]
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"]
            ).optional(),
            "longRunningOperations": t.array(
                t.proxy(renames["GoogleLongrunningOperationOut"])
            ).optional(),
            "ruleEngineOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEngineOutputOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentResponseOut"])
    types["GeostoreCrossingStripePatternProtoIn"] = t.struct(
        {
            "color": t.array(
                t.proxy(renames["GeostorePaintedElementLogicalColorProtoIn"])
            ).optional(),
            "borderLine": t.proxy(renames["GeostorePhysicalLineProtoIn"]),
            "borderPattern": t.string(),
            "stripePattern": t.string(),
        }
    ).named(renames["GeostoreCrossingStripePatternProtoIn"])
    types["GeostoreCrossingStripePatternProtoOut"] = t.struct(
        {
            "color": t.array(
                t.proxy(renames["GeostorePaintedElementLogicalColorProtoOut"])
            ).optional(),
            "borderLine": t.proxy(renames["GeostorePhysicalLineProtoOut"]),
            "borderPattern": t.string(),
            "stripePattern": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCrossingStripePatternProtoOut"])
    types["AssistantApiSettingsVideoFilterIn"] = t.struct(
        {
            "providerFilterState": t.string().optional(),
            "state": t.string(),
            "autoplayToggleState": t.string().optional(),
            "whitelistedProviders": t.array(t.string()).optional(),
            "availableProviders": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantApiSettingsVideoFilterIn"])
    types["AssistantApiSettingsVideoFilterOut"] = t.struct(
        {
            "providerFilterState": t.string().optional(),
            "state": t.string(),
            "autoplayToggleState": t.string().optional(),
            "whitelistedProviders": t.array(t.string()).optional(),
            "availableProviders": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsVideoFilterOut"])
    types["VideoContentSearchTextSimilarityFeaturesIn"] = t.struct(
        {
            "similarityScore": t.number().optional(),
            "tokenMatchPercent": t.number().optional(),
            "wordAlignment": t.array(
                t.proxy(renames["VideoContentSearchTokenAlignmentIn"])
            ).optional(),
            "tokenMatchCount": t.integer().optional(),
            "hypothesisText": t.string().optional(),
            "referenceText": t.string(),
            "scoringMethodName": t.string().optional(),
            "hypothesisTextTime": t.string().optional(),
        }
    ).named(renames["VideoContentSearchTextSimilarityFeaturesIn"])
    types["VideoContentSearchTextSimilarityFeaturesOut"] = t.struct(
        {
            "similarityScore": t.number().optional(),
            "tokenMatchPercent": t.number().optional(),
            "wordAlignment": t.array(
                t.proxy(renames["VideoContentSearchTokenAlignmentOut"])
            ).optional(),
            "tokenMatchCount": t.integer().optional(),
            "hypothesisText": t.string().optional(),
            "referenceText": t.string(),
            "scoringMethodName": t.string().optional(),
            "hypothesisTextTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchTextSimilarityFeaturesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterDetailsIn"] = t.struct(
        {
            "rosterMemberCount": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountIn"]
            ).optional(),
            "abridgedRosterMemberships": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberIn"])
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterDetailsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterDetailsOut"] = t.struct(
        {
            "rosterMemberCount": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountOut"]
            ).optional(),
            "abridgedRosterMemberships": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberOut"])
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterDetailsOut"])
    types["AssistantApiOnDeviceStorageCapabilitiesIn"] = t.struct(
        {"isSupported": t.boolean().optional()}
    ).named(renames["AssistantApiOnDeviceStorageCapabilitiesIn"])
    types["AssistantApiOnDeviceStorageCapabilitiesOut"] = t.struct(
        {
            "isSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiOnDeviceStorageCapabilitiesOut"])
    types["AppsDynamiteSharedSegmentedMembershipCountIn"] = t.struct(
        {
            "memberType": t.string(),
            "membershipCount": t.integer().optional(),
            "membershipState": t.string(),
        }
    ).named(renames["AppsDynamiteSharedSegmentedMembershipCountIn"])
    types["AppsDynamiteSharedSegmentedMembershipCountOut"] = t.struct(
        {
            "memberType": t.string(),
            "membershipCount": t.integer().optional(),
            "membershipState": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsDynamiteSharedSegmentedMembershipCountOut"])
    types["SentimentSentimentEmotionsIn"] = t.struct(
        {
            "sadness": t.integer(),
            "disgust": t.integer(),
            "surprise": t.integer(),
            "anger": t.integer(),
            "fear": t.integer(),
            "happiness": t.integer(),
        }
    ).named(renames["SentimentSentimentEmotionsIn"])
    types["SentimentSentimentEmotionsOut"] = t.struct(
        {
            "sadness": t.integer(),
            "disgust": t.integer(),
            "surprise": t.integer(),
            "anger": t.integer(),
            "fear": t.integer(),
            "happiness": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SentimentSentimentEmotionsOut"])
    types["ResearchScamGenericFeatureVectorCrowdingIn"] = t.struct(
        {"crowdingAttribute": t.string().optional()}
    ).named(renames["ResearchScamGenericFeatureVectorCrowdingIn"])
    types["ResearchScamGenericFeatureVectorCrowdingOut"] = t.struct(
        {
            "crowdingAttribute": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorCrowdingOut"])
    types[
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectIn"
    ] = t.struct(
        {"type": t.string().optional(), "confidence": t.number().optional()}
    ).named(
        renames["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectIn"]
    )
    types[
        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectOut"
    ] = t.struct(
        {
            "type": t.string().optional(),
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectOut"
        ]
    )
    types["CloudAiPlatformTenantresourceIamPolicyBindingIn"] = t.struct(
        {
            "resourceType": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "resource": t.string().optional(),
            "role": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceIamPolicyBindingIn"])
    types["CloudAiPlatformTenantresourceIamPolicyBindingOut"] = t.struct(
        {
            "resourceType": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "resource": t.string().optional(),
            "role": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceIamPolicyBindingOut"])
    types["GoodocSemanticLabelTableCellDetailsIn"] = t.struct(
        {
            "Row": t.integer().optional(),
            "Column": t.integer(),
            "ColumnSpan": t.integer(),
            "RowSpan": t.integer(),
        }
    ).named(renames["GoodocSemanticLabelTableCellDetailsIn"])
    types["GoodocSemanticLabelTableCellDetailsOut"] = t.struct(
        {
            "Row": t.integer().optional(),
            "Column": t.integer(),
            "ColumnSpan": t.integer(),
            "RowSpan": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelTableCellDetailsOut"])
    types["RepositoryWebrefEntityLinkMetadataIn"] = t.struct(
        {
            "kindInfo": t.array(
                t.proxy(renames["RepositoryWebrefLinkKindInfoIn"])
            ).optional(),
            "aggregateFlags": t.proxy(
                renames["RepositoryWebrefLinkKindFlagsIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefEntityLinkMetadataIn"])
    types["RepositoryWebrefEntityLinkMetadataOut"] = t.struct(
        {
            "kindInfo": t.array(
                t.proxy(renames["RepositoryWebrefLinkKindInfoOut"])
            ).optional(),
            "aggregateFlags": t.proxy(
                renames["RepositoryWebrefLinkKindFlagsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityLinkMetadataOut"])
    types["AssistantVerticalsHomeautomationProtoRoleInformationIn"] = t.struct(
        {"roleType": t.string(), "iamCheckRequired": t.boolean().optional()}
    ).named(renames["AssistantVerticalsHomeautomationProtoRoleInformationIn"])
    types["AssistantVerticalsHomeautomationProtoRoleInformationOut"] = t.struct(
        {
            "roleType": t.string(),
            "iamCheckRequired": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoRoleInformationOut"])
    types["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoIn"] = t.struct(
        {
            "packageName": t.string(),
            "liveOpEvents": t.array(
                t.proxy(renames["QualityCalypsoAppsUniversalAuLiveOpDetailIn"])
            ),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoIn"])
    types["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoOut"] = t.struct(
        {
            "packageName": t.string(),
            "liveOpEvents": t.array(
                t.proxy(renames["QualityCalypsoAppsUniversalAuLiveOpDetailOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoOut"])
    types["AssistantDevicesPlatformProtoMediaNextCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaNextCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaNextCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaNextCapabilityOut"])
    types[
        "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsIn"
    ] = t.struct(
        {"additionalAnnotationData": t.struct({"_": t.string().optional()}).optional()}
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsOut"
    ] = t.struct(
        {
            "additionalAnnotationData": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsOut"
        ]
    )
    types["AssistantDevicesPlatformProtoProvidedDataIn"] = t.struct(
        {"name": t.string()}
    ).named(renames["AssistantDevicesPlatformProtoProvidedDataIn"])
    types["AssistantDevicesPlatformProtoProvidedDataOut"] = t.struct(
        {"name": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoProvidedDataOut"])
    types["VideoVideoStreamInfoVideoStreamStatisticsIn"] = t.struct(
        {"min": t.string(), "max": t.string(), "mean": t.number()}
    ).named(renames["VideoVideoStreamInfoVideoStreamStatisticsIn"])
    types["VideoVideoStreamInfoVideoStreamStatisticsOut"] = t.struct(
        {
            "min": t.string(),
            "max": t.string(),
            "mean": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoVideoStreamStatisticsOut"])
    types["LensDiscoveryStylePersonDetectionSignalsIn"] = t.struct(
        {
            "detectedPersons": t.array(
                t.proxy(
                    renames["LensDiscoveryStylePersonDetectionSignalsDetectedPersonIn"]
                )
            ).optional(),
            "version": t.string(),
        }
    ).named(renames["LensDiscoveryStylePersonDetectionSignalsIn"])
    types["LensDiscoveryStylePersonDetectionSignalsOut"] = t.struct(
        {
            "detectedPersons": t.array(
                t.proxy(
                    renames["LensDiscoveryStylePersonDetectionSignalsDetectedPersonOut"]
                )
            ).optional(),
            "version": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStylePersonDetectionSignalsOut"])
    types["DrishtiVesperUserReportHumanLabelIn"] = t.struct(
        {"racyLevel": t.string()}
    ).named(renames["DrishtiVesperUserReportHumanLabelIn"])
    types["DrishtiVesperUserReportHumanLabelOut"] = t.struct(
        {"racyLevel": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["DrishtiVesperUserReportHumanLabelOut"])
    types["VideoContentSearchListTrainingDataSetFeaturesIn"] = t.struct(
        {
            "numDescriptionAnchors": t.integer().optional(),
            "editDistanceStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "editDistanceRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "matchedDescriptionAnchorsTimegapStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchListTrainingDataSetFeaturesIn"])
    types["VideoContentSearchListTrainingDataSetFeaturesOut"] = t.struct(
        {
            "numDescriptionAnchors": t.integer().optional(),
            "editDistanceStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "editDistanceRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "matchedDescriptionAnchorsTimegapStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchListTrainingDataSetFeaturesOut"])
    types["LogsSemanticInterpretationIntentQueryEntityLinkMetadataIn"] = t.struct(
        {
            "aggregateFlags": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsIn"]
            ),
            "kindInfo": t.array(
                t.proxy(renames["LogsSemanticInterpretationIntentQueryLinkKindInfoIn"])
            ),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryEntityLinkMetadataIn"])
    types["LogsSemanticInterpretationIntentQueryEntityLinkMetadataOut"] = t.struct(
        {
            "aggregateFlags": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsOut"]
            ),
            "kindInfo": t.array(
                t.proxy(renames["LogsSemanticInterpretationIntentQueryLinkKindInfoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryEntityLinkMetadataOut"])
    types["KnowledgeAnswersIntentQueryArgumentIn"] = t.struct(
        {
            "key": t.proxy(
                renames["KnowledgeAnswersMeaningSchemaSlotKeyIn"]
            ).optional(),
            "modifiers": t.proxy(
                renames["KnowledgeAnswersIntentModifiersIn"]
            ).optional(),
            "heuristicEvalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "name": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "value": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentValueIn"]
            ).optional(),
            "signals": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentSignalsIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentIn"])
    types["KnowledgeAnswersIntentQueryArgumentOut"] = t.struct(
        {
            "key": t.proxy(
                renames["KnowledgeAnswersMeaningSchemaSlotKeyOut"]
            ).optional(),
            "modifiers": t.proxy(
                renames["KnowledgeAnswersIntentModifiersOut"]
            ).optional(),
            "heuristicEvalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "name": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "value": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentValueOut"]
            ).optional(),
            "signals": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentSignalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentOut"])
    types["ImageRepositoryVenomProcessingInfoIn"] = t.struct(
        {
            "venomStatus": t.array(
                t.proxy(renames["ImageRepositoryVenomStatusIn"])
            ).optional()
        }
    ).named(renames["ImageRepositoryVenomProcessingInfoIn"])
    types["ImageRepositoryVenomProcessingInfoOut"] = t.struct(
        {
            "venomStatus": t.array(
                t.proxy(renames["ImageRepositoryVenomStatusOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVenomProcessingInfoOut"])
    types["GeostoreFeatureFieldMetadataProtoIn"] = t.struct(
        {
            "fieldProvenance": t.array(
                t.proxy(renames["GeostoreFeatureFieldMetadataProtoFieldProvenanceIn"])
            )
        }
    ).named(renames["GeostoreFeatureFieldMetadataProtoIn"])
    types["GeostoreFeatureFieldMetadataProtoOut"] = t.struct(
        {
            "fieldProvenance": t.array(
                t.proxy(renames["GeostoreFeatureFieldMetadataProtoFieldProvenanceOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureFieldMetadataProtoOut"])
    types["KnowledgeAnswersOpaqueComponentReferenceIndexTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueComponentReferenceIndexTypeIn"])
    types["KnowledgeAnswersOpaqueComponentReferenceIndexTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueComponentReferenceIndexTypeOut"])
    types["VideoContentSearchListAnchorSetFeaturesIn"] = t.struct(
        {
            "spanTokenCountStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "durationToPredictedTimeMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "babelMatchScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "aggregatedSpanText": t.string().optional(),
            "durationSpanRatio": t.number().optional(),
            "pretriggerScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "listAnchorSource": t.string().optional(),
            "postFilteringListDescriptionItemsSize": t.integer().optional(),
            "matchedListDescriptionAnchorsSize": t.integer().optional(),
            "anchorSetSpanScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "listDescriptionItemsSize": t.integer().optional(),
            "matchedListDescriptionAnchorsRatio": t.number().optional(),
            "contextTokenCountStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "spanTokenCountRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchListAnchorSetFeaturesIn"])
    types["VideoContentSearchListAnchorSetFeaturesOut"] = t.struct(
        {
            "spanTokenCountStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "durationToPredictedTimeMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "babelMatchScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "aggregatedSpanText": t.string().optional(),
            "durationSpanRatio": t.number().optional(),
            "pretriggerScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "listAnchorSource": t.string().optional(),
            "postFilteringListDescriptionItemsSize": t.integer().optional(),
            "matchedListDescriptionAnchorsSize": t.integer().optional(),
            "anchorSetSpanScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "listDescriptionItemsSize": t.integer().optional(),
            "matchedListDescriptionAnchorsRatio": t.number().optional(),
            "contextTokenCountStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "spanTokenCountRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchListAnchorSetFeaturesOut"])
    types["SentimentSentimentIn"] = t.struct(
        {
            "userEmotions": t.proxy(renames["SentimentSentimentEmotionsIn"]).optional(),
            "userBehaviors": t.proxy(renames["SentimentSentimentBehaviorsIn"]),
            "polarity": t.string().optional(),
        }
    ).named(renames["SentimentSentimentIn"])
    types["SentimentSentimentOut"] = t.struct(
        {
            "userEmotions": t.proxy(
                renames["SentimentSentimentEmotionsOut"]
            ).optional(),
            "userBehaviors": t.proxy(renames["SentimentSentimentBehaviorsOut"]),
            "polarity": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SentimentSentimentOut"])
    types["GeostoreFieldMetadataProtoIn"] = t.struct(
        {"internal": t.proxy(renames["GeostoreInternalFieldMetadataProtoIn"])}
    ).named(renames["GeostoreFieldMetadataProtoIn"])
    types["GeostoreFieldMetadataProtoOut"] = t.struct(
        {
            "internal": t.proxy(renames["GeostoreInternalFieldMetadataProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFieldMetadataProtoOut"])
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataIn"
    ] = t.struct({"playStoreAppType": t.string().optional()}).named(
        renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataIn"]
    )
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataOut"
    ] = t.struct(
        {
            "playStoreAppType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataOut"]
    )
    types["AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityIn"] = t.struct(
        {
            "localizedActivityName": t.string().optional(),
            "shortClassName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityIn"])
    types["AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityOut"] = t.struct(
        {
            "localizedActivityName": t.string().optional(),
            "shortClassName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityOut"])
    types["QualityPreviewSnippetQueryTermCoverageFeaturesIn"] = t.struct(
        {
            "snippetQueryTermCoverage": t.number(),
            "titleSnippetQueryTermCoverage": t.number(),
            "titleQueryTermCoverage": t.number(),
        }
    ).named(renames["QualityPreviewSnippetQueryTermCoverageFeaturesIn"])
    types["QualityPreviewSnippetQueryTermCoverageFeaturesOut"] = t.struct(
        {
            "snippetQueryTermCoverage": t.number(),
            "titleSnippetQueryTermCoverage": t.number(),
            "titleQueryTermCoverage": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetQueryTermCoverageFeaturesOut"])
    types["AssistantLogsMediaFocusInfoLogIn"] = t.struct(
        {
            "focusDevice": t.proxy(renames["AssistantLogsDeviceInfoLogIn"]).optional(),
            "currentFocusDurationSec": t.integer().optional(),
            "sourceDeviceId": t.string().optional(),
            "mediaFocusState": t.string().optional(),
            "dialogTriggered": t.boolean().optional(),
        }
    ).named(renames["AssistantLogsMediaFocusInfoLogIn"])
    types["AssistantLogsMediaFocusInfoLogOut"] = t.struct(
        {
            "focusDevice": t.proxy(renames["AssistantLogsDeviceInfoLogOut"]).optional(),
            "currentFocusDurationSec": t.integer().optional(),
            "sourceDeviceId": t.string().optional(),
            "mediaFocusState": t.string().optional(),
            "dialogTriggered": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsMediaFocusInfoLogOut"])
    types["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataIn"] = t.struct(
        {
            "channelData": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiChannelDataIn"])
            ).optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"]
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataOut"] = t.struct(
        {
            "channelData": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiChannelDataOut"])
            ).optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataOut"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorIn"] = t.struct(
        {
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional()
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorIn"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorOut"] = t.struct(
        {
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorOut"])
    types["VideoContentSearchDolphinScoringConfigIn"] = t.struct(
        {
            "descriptivenessOutputKey": t.string().optional(),
            "modelPath": t.string().optional(),
            "inferenceMethod": t.string().optional(),
            "rpcDeadlineSeconds": t.number().optional(),
            "modelName": t.string().optional(),
            "maxRpcRetries": t.integer().optional(),
            "serviceBns": t.string().optional(),
            "inferenceBatchSize": t.integer().optional(),
            "ensembleModelNames": t.array(t.string()).optional(),
            "outputKey": t.string().optional(),
            "usefulnessOutputKey": t.string(),
        }
    ).named(renames["VideoContentSearchDolphinScoringConfigIn"])
    types["VideoContentSearchDolphinScoringConfigOut"] = t.struct(
        {
            "descriptivenessOutputKey": t.string().optional(),
            "modelPath": t.string().optional(),
            "inferenceMethod": t.string().optional(),
            "rpcDeadlineSeconds": t.number().optional(),
            "modelName": t.string().optional(),
            "maxRpcRetries": t.integer().optional(),
            "serviceBns": t.string().optional(),
            "inferenceBatchSize": t.integer().optional(),
            "ensembleModelNames": t.array(t.string()).optional(),
            "outputKey": t.string().optional(),
            "usefulnessOutputKey": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDolphinScoringConfigOut"])
    types["NlpSemanticParsingModelsMediaProviderMetadataIn"] = t.struct(
        {"providerMid": t.string().optional(), "deeplinkUrl": t.string().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaProviderMetadataIn"])
    types["NlpSemanticParsingModelsMediaProviderMetadataOut"] = t.struct(
        {
            "providerMid": t.string().optional(),
            "deeplinkUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaProviderMetadataOut"])
    types["SuperrootPodcastsRecommendationsPodcastRecsFeaturesIn"] = t.struct(
        {
            "colistenedShowColistenAffinity": t.number().optional(),
            "rankPercentContrib": t.number().optional(),
            "peListenTotalScoreEpisode": t.number(),
            "kmeansShowLevelRank": t.string().optional(),
            "explicitShow": t.string().optional(),
            "episodeImpressions": t.string().optional(),
            "longUserListeningWebrefSimilarity": t.number().optional(),
            "listenTimeMin": t.integer().optional(),
            "medicalScore": t.number().optional(),
            "locationFeatureId": t.string().optional(),
            "inClusterProb": t.number().optional(),
            "peFractionScoreShow": t.number(),
            "mediumUserListeningWebrefSimilarity": t.number().optional(),
            "fractionTotalEpisode": t.number().optional(),
            "numListens": t.integer().optional(),
            "linkOwnershipVerified": t.boolean().optional(),
            "showLanguage": t.string().optional(),
            "showOnlyImpressionsPastWeek": t.string(),
            "showBaseQuality": t.number().optional(),
            "languageMatch": t.number().optional(),
            "feedPagerank": t.number().optional(),
            "numUniqueListenersShow": t.string().optional(),
            "peListenScoreShow": t.number().optional(),
            "dnnV2aScoreSigmoid": t.number().optional(),
            "episodesPublishedPerMonth": t.string().optional(),
            "ulpLanguage": t.array(
                t.proxy(
                    renames[
                        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn"
                    ]
                )
            ).optional(),
            "numListenersToShowInKmeansCluster": t.string().optional(),
            "listenedShowListeningAffinity": t.number().optional(),
            "convAiToxicitySevereScore": t.number(),
            "colistenedShowLevelRank": t.string().optional(),
            "peDurationTotalScoreEpisode": t.number(),
            "durationTotalSecondsShow": t.string().optional(),
            "fringeScore": t.number().optional(),
            "positiveReactionBoostScore": t.number().optional(),
            "peDurationScoreEpisode": t.number(),
            "fractionTotalShow": t.number().optional(),
            "offensiveScore": t.number().optional(),
            "secondsSincePublication": t.string().optional(),
            "balancedLift": t.number().optional(),
            "peListenScoreEpisode": t.number(),
            "peListenTotalScoreShow": t.number(),
            "averageDurationSecondsEpisode": t.string().optional(),
            "pornScore": t.number().optional(),
            "showImpressions": t.string().optional(),
            "episodeImpressionsPastWeek": t.string().optional(),
            "ulpLanguageMatch": t.number().optional(),
            "recentUserListeningWebrefSimilarity": t.number().optional(),
            "dnnV2aScore": t.number().optional(),
            "peFractionTotalScoreEpisode": t.number(),
            "popularLift": t.number().optional(),
            "isCanonical": t.boolean().optional(),
            "showOnlyImpressions": t.string().optional(),
            "peFractionScoreEpisode": t.number(),
            "queryLanguage": t.string().optional(),
            "spoofScore": t.number().optional(),
            "negativeReactionBoostScore": t.number().optional(),
            "rank": t.string().optional(),
            "subscribedShowListeningAffinity": t.number().optional(),
            "userClusterDistance": t.number().optional(),
            "violenceScore": t.number().optional(),
            "showImpressionsPastWeek": t.string().optional(),
            "surface": t.string(),
            "userLanguage": t.array(
                t.proxy(
                    renames[
                        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn"
                    ]
                )
            ).optional(),
            "globalProb": t.number().optional(),
            "nicheLift": t.number().optional(),
            "numSubscribersShow": t.string().optional(),
            "userInterestsWebrefSimilarity": t.number().optional(),
            "episodeDurationSec": t.string().optional(),
            "averageFractionShow": t.number().optional(),
            "csaiScore": t.number().optional(),
            "userInterestsSalientSimilarity": t.number().optional(),
            "peDurationTotalScoreShow": t.number(),
            "finalReactionBoostScore": t.number().optional(),
            "vulgarScore": t.number().optional(),
            "clusterFeedMinutes": t.string().optional(),
            "numListenersInKmeansCluster": t.string().optional(),
            "durationTotalSecondsEpisode": t.string().optional(),
            "dnnShowLevelRank": t.string().optional(),
            "showPopularRank": t.string().optional(),
            "averageFractionEpisode": t.number().optional(),
            "categoryMatch": t.number().optional(),
            "averageDurationSecondsShow": t.string().optional(),
            "peFractionTotalScoreShow": t.number(),
            "trendingScorePercent": t.string().optional(),
            "subscriptionShowLevelRank": t.string().optional(),
            "peDurationScoreShow": t.number(),
            "listenedShowLevelRank": t.string().optional(),
        }
    ).named(renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesIn"])
    types["SuperrootPodcastsRecommendationsPodcastRecsFeaturesOut"] = t.struct(
        {
            "colistenedShowColistenAffinity": t.number().optional(),
            "rankPercentContrib": t.number().optional(),
            "peListenTotalScoreEpisode": t.number(),
            "kmeansShowLevelRank": t.string().optional(),
            "explicitShow": t.string().optional(),
            "episodeImpressions": t.string().optional(),
            "longUserListeningWebrefSimilarity": t.number().optional(),
            "listenTimeMin": t.integer().optional(),
            "medicalScore": t.number().optional(),
            "locationFeatureId": t.string().optional(),
            "inClusterProb": t.number().optional(),
            "peFractionScoreShow": t.number(),
            "mediumUserListeningWebrefSimilarity": t.number().optional(),
            "fractionTotalEpisode": t.number().optional(),
            "numListens": t.integer().optional(),
            "linkOwnershipVerified": t.boolean().optional(),
            "showLanguage": t.string().optional(),
            "showOnlyImpressionsPastWeek": t.string(),
            "showBaseQuality": t.number().optional(),
            "languageMatch": t.number().optional(),
            "feedPagerank": t.number().optional(),
            "numUniqueListenersShow": t.string().optional(),
            "peListenScoreShow": t.number().optional(),
            "dnnV2aScoreSigmoid": t.number().optional(),
            "episodesPublishedPerMonth": t.string().optional(),
            "ulpLanguage": t.array(
                t.proxy(
                    renames[
                        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut"
                    ]
                )
            ).optional(),
            "numListenersToShowInKmeansCluster": t.string().optional(),
            "listenedShowListeningAffinity": t.number().optional(),
            "convAiToxicitySevereScore": t.number(),
            "colistenedShowLevelRank": t.string().optional(),
            "peDurationTotalScoreEpisode": t.number(),
            "durationTotalSecondsShow": t.string().optional(),
            "fringeScore": t.number().optional(),
            "positiveReactionBoostScore": t.number().optional(),
            "peDurationScoreEpisode": t.number(),
            "fractionTotalShow": t.number().optional(),
            "offensiveScore": t.number().optional(),
            "secondsSincePublication": t.string().optional(),
            "balancedLift": t.number().optional(),
            "peListenScoreEpisode": t.number(),
            "peListenTotalScoreShow": t.number(),
            "averageDurationSecondsEpisode": t.string().optional(),
            "pornScore": t.number().optional(),
            "showImpressions": t.string().optional(),
            "episodeImpressionsPastWeek": t.string().optional(),
            "ulpLanguageMatch": t.number().optional(),
            "recentUserListeningWebrefSimilarity": t.number().optional(),
            "dnnV2aScore": t.number().optional(),
            "peFractionTotalScoreEpisode": t.number(),
            "popularLift": t.number().optional(),
            "isCanonical": t.boolean().optional(),
            "showOnlyImpressions": t.string().optional(),
            "peFractionScoreEpisode": t.number(),
            "queryLanguage": t.string().optional(),
            "spoofScore": t.number().optional(),
            "negativeReactionBoostScore": t.number().optional(),
            "rank": t.string().optional(),
            "subscribedShowListeningAffinity": t.number().optional(),
            "userClusterDistance": t.number().optional(),
            "violenceScore": t.number().optional(),
            "showImpressionsPastWeek": t.string().optional(),
            "surface": t.string(),
            "userLanguage": t.array(
                t.proxy(
                    renames[
                        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut"
                    ]
                )
            ).optional(),
            "globalProb": t.number().optional(),
            "nicheLift": t.number().optional(),
            "numSubscribersShow": t.string().optional(),
            "userInterestsWebrefSimilarity": t.number().optional(),
            "episodeDurationSec": t.string().optional(),
            "averageFractionShow": t.number().optional(),
            "csaiScore": t.number().optional(),
            "userInterestsSalientSimilarity": t.number().optional(),
            "peDurationTotalScoreShow": t.number(),
            "finalReactionBoostScore": t.number().optional(),
            "vulgarScore": t.number().optional(),
            "clusterFeedMinutes": t.string().optional(),
            "numListenersInKmeansCluster": t.string().optional(),
            "durationTotalSecondsEpisode": t.string().optional(),
            "dnnShowLevelRank": t.string().optional(),
            "showPopularRank": t.string().optional(),
            "averageFractionEpisode": t.number().optional(),
            "categoryMatch": t.number().optional(),
            "averageDurationSecondsShow": t.string().optional(),
            "peFractionTotalScoreShow": t.number(),
            "trendingScorePercent": t.string().optional(),
            "subscriptionShowLevelRank": t.string().optional(),
            "peDurationScoreShow": t.number(),
            "listenedShowLevelRank": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesOut"])
    types["RepositoryWebrefKCAttributeMetadataIn"] = t.struct(
        {"equivalentAttributeId": t.string().optional()}
    ).named(renames["RepositoryWebrefKCAttributeMetadataIn"])
    types["RepositoryWebrefKCAttributeMetadataOut"] = t.struct(
        {
            "equivalentAttributeId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefKCAttributeMetadataOut"])
    types["KnowledgeAnswersValueTypeIn"] = t.struct(
        {
            "dateType": t.proxy(renames["KnowledgeAnswersDateTypeIn"]),
            "booleanType": t.proxy(renames["KnowledgeAnswersBooleanTypeIn"]),
            "stateOfAffairsType": t.proxy(
                renames["KnowledgeAnswersStateOfAffairsTypeIn"]
            ),
            "entityType": t.proxy(renames["KnowledgeAnswersEntityTypeIn"]),
            "semanticType": t.proxy(renames["KnowledgeAnswersSemanticTypeIn"]),
            "stringType": t.proxy(renames["KnowledgeAnswersStringTypeIn"]),
            "polarQuestionType": t.proxy(
                renames["KnowledgeAnswersPolarQuestionTypeIn"]
            ),
            "timezoneType": t.proxy(renames["KnowledgeAnswersTimeZoneTypeIn"]),
            "durationType": t.proxy(renames["KnowledgeAnswersDurationTypeIn"]),
            "attributeType": t.proxy(renames["KnowledgeAnswersAttributeTypeIn"]),
            "plexityRequirement": t.proxy(
                renames["KnowledgeAnswersPlexityRequirementIn"]
            ),
            "collectionType": t.proxy(renames["KnowledgeAnswersCollectionTypeIn"]),
            "compoundType": t.proxy(renames["KnowledgeAnswersCompoundTypeIn"]),
            "opaqueType": t.proxy(renames["KnowledgeAnswersOpaqueTypeIn"]),
            "trackingNumberType": t.proxy(
                renames["KnowledgeAnswersTrackingNumberTypeIn"]
            ),
            "numberType": t.proxy(renames["KnowledgeAnswersNumberTypeIn"]),
            "normalizedStringType": t.proxy(
                renames["KnowledgeAnswersNormalizedStringTypeIn"]
            ).optional(),
            "anyType": t.proxy(renames["KnowledgeAnswersAnyTypeIn"]).optional(),
            "measurementType": t.proxy(renames["KnowledgeAnswersMeasurementTypeIn"]),
            "inputCompositionConfig": t.string().optional(),
            "dependencyType": t.proxy(
                renames["KnowledgeAnswersDependencyTypeIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersValueTypeIn"])
    types["KnowledgeAnswersValueTypeOut"] = t.struct(
        {
            "dateType": t.proxy(renames["KnowledgeAnswersDateTypeOut"]),
            "booleanType": t.proxy(renames["KnowledgeAnswersBooleanTypeOut"]),
            "stateOfAffairsType": t.proxy(
                renames["KnowledgeAnswersStateOfAffairsTypeOut"]
            ),
            "entityType": t.proxy(renames["KnowledgeAnswersEntityTypeOut"]),
            "semanticType": t.proxy(renames["KnowledgeAnswersSemanticTypeOut"]),
            "stringType": t.proxy(renames["KnowledgeAnswersStringTypeOut"]),
            "polarQuestionType": t.proxy(
                renames["KnowledgeAnswersPolarQuestionTypeOut"]
            ),
            "timezoneType": t.proxy(renames["KnowledgeAnswersTimeZoneTypeOut"]),
            "durationType": t.proxy(renames["KnowledgeAnswersDurationTypeOut"]),
            "attributeType": t.proxy(renames["KnowledgeAnswersAttributeTypeOut"]),
            "plexityRequirement": t.proxy(
                renames["KnowledgeAnswersPlexityRequirementOut"]
            ),
            "collectionType": t.proxy(renames["KnowledgeAnswersCollectionTypeOut"]),
            "compoundType": t.proxy(renames["KnowledgeAnswersCompoundTypeOut"]),
            "opaqueType": t.proxy(renames["KnowledgeAnswersOpaqueTypeOut"]),
            "trackingNumberType": t.proxy(
                renames["KnowledgeAnswersTrackingNumberTypeOut"]
            ),
            "numberType": t.proxy(renames["KnowledgeAnswersNumberTypeOut"]),
            "normalizedStringType": t.proxy(
                renames["KnowledgeAnswersNormalizedStringTypeOut"]
            ).optional(),
            "anyType": t.proxy(renames["KnowledgeAnswersAnyTypeOut"]).optional(),
            "measurementType": t.proxy(renames["KnowledgeAnswersMeasurementTypeOut"]),
            "inputCompositionConfig": t.string().optional(),
            "dependencyType": t.proxy(
                renames["KnowledgeAnswersDependencyTypeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersValueTypeOut"])
    types["PornFlagDataIn"] = t.struct(
        {
            "photodnaHash": t.string().optional(),
            "internalSignals": t.proxy(
                renames["SafesearchInternalImageSignalsIn"]
            ).optional(),
            "qbstOffensiveScore": t.number().optional(),
            "coclickBrainScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationIn"]
            ).optional(),
            "csaiScore": t.number().optional(),
            "finalOffensiveScore": t.number().optional(),
            "qbstSpoofScore": t.number().optional(),
            "numberFaces": t.integer().optional(),
            "ocrAnnotation": t.proxy(
                renames["ImageSafesearchContentOCRAnnotationIn"]
            ).optional(),
            "queryTextViolenceScore": t.number().optional(),
            "debugInfo": t.array(t.proxy(renames["ImagePornDebugInfoIn"])).optional(),
            "queryStats": t.proxy(renames["ClassifierPornQueryStatsIn"]).optional(),
            "url": t.string().optional(),
            "finalViolenceScoreVersion": t.string().optional(),
            "pornWithHighConfidence": t.boolean().optional(),
            "referer": t.string().optional(),
            "semanticSexualizationScore": t.number().optional(),
            "finalViolenceScore": t.number().optional(),
            "ocrVulgarScore": t.number().optional(),
            "referrerCounts": t.proxy(
                renames["ClassifierPornReferrerCountsIn"]
            ).optional(),
            "offensiveSymbolDetection": t.proxy(
                renames["ImageSafesearchContentOffensiveSymbolDetectionIn"]
            ).optional(),
            "urlPornScores": t.proxy(
                renames["ClassifierPornAggregatedUrlPornScoresIn"]
            ).optional(),
        }
    ).named(renames["PornFlagDataIn"])
    types["PornFlagDataOut"] = t.struct(
        {
            "photodnaHash": t.string().optional(),
            "internalSignals": t.proxy(
                renames["SafesearchInternalImageSignalsOut"]
            ).optional(),
            "qbstOffensiveScore": t.number().optional(),
            "coclickBrainScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationOut"]
            ).optional(),
            "csaiScore": t.number().optional(),
            "finalOffensiveScore": t.number().optional(),
            "qbstSpoofScore": t.number().optional(),
            "numberFaces": t.integer().optional(),
            "ocrAnnotation": t.proxy(
                renames["ImageSafesearchContentOCRAnnotationOut"]
            ).optional(),
            "queryTextViolenceScore": t.number().optional(),
            "debugInfo": t.array(t.proxy(renames["ImagePornDebugInfoOut"])).optional(),
            "queryStats": t.proxy(renames["ClassifierPornQueryStatsOut"]).optional(),
            "url": t.string().optional(),
            "finalViolenceScoreVersion": t.string().optional(),
            "pornWithHighConfidence": t.boolean().optional(),
            "referer": t.string().optional(),
            "semanticSexualizationScore": t.number().optional(),
            "finalViolenceScore": t.number().optional(),
            "ocrVulgarScore": t.number().optional(),
            "referrerCounts": t.proxy(
                renames["ClassifierPornReferrerCountsOut"]
            ).optional(),
            "offensiveSymbolDetection": t.proxy(
                renames["ImageSafesearchContentOffensiveSymbolDetectionOut"]
            ).optional(),
            "urlPornScores": t.proxy(
                renames["ClassifierPornAggregatedUrlPornScoresOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PornFlagDataOut"])
    types["PhotosImageMetadataIn"] = t.struct(
        {
            "digitalsourcefiletype": t.string(),
            "rating": t.number(),
            "xmp4c": t.proxy(renames["PhotosFourCMetadataIn"]),
            "certificate": t.string(),
            "croppedarealeftpixels": t.integer(),
            "serviceidentifier": t.string(),
            "interoperabilityindex": t.string(),
            "state": t.string(),
            "gcameramotionphotoversion": t.integer().optional(),
            "audiosamplingrate": t.string(),
            "gcameramotionphotopresentationtimestampus": t.integer().optional(),
            "initialhorizontalfovdegrees": t.number(),
            "poseheadingdegrees": t.number(),
            "stitchingsoftware": t.string(),
            "focallengthin35mmfilm": t.integer(),
            "samplesperpixel": t.integer(),
            "rowsperstrip": t.string(),
            "redeyemode": t.boolean(),
            "daylightsavings": t.array(t.integer()).optional(),
            "editstatus": t.string(),
            "personinimage": t.array(t.string()),
            "webstatement": t.string(),
            "altitude": t.number(),
            "colorspace": t.integer(),
            "subjectlocation": t.integer(),
            "imagenumber": t.string(),
            "gpsdestlongitude": t.number(),
            "city": t.string(),
            "locationshown": t.array(t.string()),
            "uno": t.string(),
            "audiosamplingresolution": t.string(),
            "audiooutcue": t.string(),
            "extrasamples": t.integer(),
            "gpsdop": t.number(),
            "gpsimgdirection": t.number(),
            "digitalsourcetype": t.string(),
            "croppedareatoppixels": t.integer(),
            "gpsspeedref": t.string(),
            "yresolution": t.number(),
            "firmware": t.string(),
            "panoramaMetadata": t.proxy(renames["PhotosPanoramaMetadataIn"]),
            "timesent": t.string(),
            "headline": t.string(),
            "gdepthMetadata": t.proxy(renames["PhotosGDepthMetadataIn"]),
            "urgency": t.string(),
            "grayresponseunit": t.integer(),
            "sensorwidth": t.number(),
            "hdrMetadata": t.proxy(renames["PhotosHdrMetadataIn"]).optional(),
            "gpstrack": t.number(),
            "DEPRECATEDLargestvalidinteriorrectleft": t.integer(),
            "ciadrpcode": t.string(),
            "format": t.string(),
            "exposurelockused": t.boolean(),
            "subjectdistancerange": t.integer(),
            "objecttypereference": t.string(),
            "autoenhance": t.boolean().optional(),
            "authorposition": t.string(),
            "language": t.array(t.string()),
            "flashused": t.integer(),
            "projectiontype": t.string(),
            "DEPRECATEDBlendingtype": t.string(),
            "datesent": t.string(),
            "maxavailheight": t.integer(),
            "datetime": t.string(),
            "gpsstatus": t.string(),
            "minsamplevalue": t.integer(),
            "exposuretime": t.number(),
            "referencenumber": t.array(t.string()),
            "photometricinterpretation": t.integer(),
            "saturation": t.integer(),
            "ccdwidth": t.number(),
            "lens": t.string(),
            "scenecapturetype": t.integer(),
            "referenceservice": t.array(t.string()),
            "gaudiomime": t.string(),
            "relation": t.array(t.string()),
            "iptc4c": t.proxy(renames["PhotosFourCMetadataIn"]),
            "source": t.string(),
            "modifydate": t.string(),
            "colormap": t.integer(),
            "addlmodelinfo": t.string(),
            "gpsdestbearing": t.number(),
            "createdate": t.string(),
            "cameramodel": t.string().optional(),
            "offsettimeoriginal": t.string(),
            "imageorientation": t.string(),
            "intellectualgenre": t.string(),
            "serialnumber": t.string(),
            "expirationdate": t.string(),
            "gpsdifferential": t.integer(),
            "owner": t.array(t.string()),
            "minormodelagedisclosure": t.string(),
            "latitude": t.number().optional(),
            "width": t.integer().optional(),
            "dynamicDepthMetadata": t.proxy(
                renames["PhotosDynamicDepthMetadataIn"]
            ).optional(),
            "freebytecounts": t.string(),
            "exposureprogram": t.integer(),
            "identifier": t.array(t.string()),
            "ciadrextadr": t.array(t.string()),
            "exifTimeUtcSource": t.string().optional(),
            "function": t.boolean(),
            "digimageguid": t.string(),
            "cameramake": t.string().optional(),
            "xresolution": t.number(),
            "primarychromaticities": t.number(),
            "destinationLongitude": t.number().optional(),
            "gaincontrol": t.integer(),
            "firstphotodate": t.string(),
            "modelreleasestatus": t.string(),
            "audiotype": t.string(),
            "flashcompensation": t.number(),
            "freeoffsets": t.integer(),
            "mode": t.integer(),
            "gcameramicrovideoversion": t.integer().optional(),
            "bitDepth": t.integer().optional(),
            "brightnessvalue": t.number(),
            "countrycode": t.string(),
            "publisher": t.array(t.string()),
            "gcreationscameraburstid": t.string(),
            "DEPRECATEDLargestvalidinteriorrecttop": t.integer(),
            "relatedimagefileformat": t.string(),
            "modelreleaseid": t.array(t.string()),
            "initialverticalfovdegrees": t.number(),
            "date": t.string(),
            "releasetime": t.string(),
            "ycbcrpositioning": t.integer(),
            "offsettime": t.string(),
            "burstuuid": t.string(),
            "contributor": t.array(t.string()),
            "initialviewrolldegrees": t.integer(),
            "maxsamplevalue": t.integer(),
            "thresholding": t.integer(),
            "advisory": t.array(t.string()),
            "url": t.string(),
            "ycbcrcoefficients": t.number(),
            "caption": t.string().optional(),
            "digitalzoomratio": t.number(),
            "flashreturn": t.integer(),
            "audioduration": t.string(),
            "programversion": t.string(),
            "compressedbitsperpixel": t.number(),
            "height": t.integer(),
            "instructions": t.string(),
            "lastphotodate": t.string(),
            "DEPRECATEDGpstimestamp": t.number().optional(),
            "grayresponsecurve": t.integer(),
            "poserolldegrees": t.number(),
            "cameraid": t.string(),
            "originatingprogram": t.string(),
            "ismpformat": t.boolean().optional(),
            "motionphotovideodataboxheader": t.string().optional(),
            "software": t.string(),
            "modelage": t.array(t.integer()),
            "initialviewheadingdegrees": t.integer(),
            "destination": t.array(t.string()),
            "gcameramicrovideo": t.integer().optional(),
            "stripbytecounts": t.string(),
            "longitude": t.number().optional(),
            "productid": t.array(t.string()),
            "location": t.string(),
            "cvterm": t.array(t.string()),
            "version": t.string(),
            "timezoneoffset": t.array(t.integer()).optional(),
            "nickname": t.string(),
            "focalplaneunits": t.number(),
            "exposuremode": t.integer(),
            "gpsmeasuremode": t.string(),
            "compressionlevel": t.integer(),
            "objectcycle": t.string(),
            "timezoneminutes": t.array(t.integer()).optional(),
            "sharpness": t.integer(),
            "gpsspeed": t.number(),
            "gcameramicrovideopresentationtimestampus": t.integer().optional(),
            "whitepoint": t.number(),
            "gcameramotionphoto": t.integer().optional(),
            "lensid": t.string(),
            "hasAlpha": t.boolean().optional(),
            "usageterms": t.string(),
            "DEPRECATEDLargestvalidinteriorrectwidth": t.integer(),
            "type": t.array(t.string()),
            "captionwriter": t.string(),
            "credits": t.string(),
            "coverage": t.string(),
            "relatedsoundfile": t.string(),
            "baseurl": t.string(),
            "gpstime": t.array(t.number()).optional(),
            "gpsdestdistance": t.number(),
            "gcameraburstid": t.string().optional(),
            "exif4c": t.proxy(renames["PhotosFourCMetadataIn"]).optional(),
            "subjectcode": t.array(t.string()),
            "subsectimeoriginal": t.string(),
            "envelopepriority": t.string(),
            "sourcephotoscount": t.integer(),
            "referencedate": t.array(t.string()),
            "rotate": t.integer().optional(),
            "keyword": t.array(t.string()),
            "datecreated": t.string(),
            "citelwork": t.string(),
            "iptclastedited": t.string(),
            "supplementalcategory": t.array(t.string()),
            "gpsdestlatituderef": t.string(),
            "actionadvised": t.string(),
            "DEPRECATEDIscolor": t.integer(),
            "focalplanexres": t.number(),
            "animationMetadata": t.proxy(renames["PhotosAnimationMetadataIn"]),
            "destinationLatitude": t.number().optional(),
            "distance": t.number(),
            "mimeType": t.integer().optional(),
            "organisationinimagename": t.array(t.string()),
            "artworkorobject": t.array(t.string()),
            "exifTime": t.string().optional(),
            "gpsdestdistanceref": t.string(),
            "microvideooriginaloffset": t.integer().optional(),
            "ownername": t.string(),
            "ycbcrsubsampling": t.integer(),
            "offsettimedigitized": t.string(),
            "croppedareaimagewidthpixels": t.integer(),
            "ciadrctry": t.string(),
            "gpssatellites": t.string(),
            "propertyreleaseid": t.array(t.string()),
            "initialviewpitchdegrees": t.integer(),
            "lensinfo": t.string(),
            "DEPRECATEDProcess": t.integer(),
            "thumbnailerBuildCl": t.integer().optional(),
            "uniqueid": t.string().optional(),
            "gpstrackref": t.string(),
            "gpsdestbearingref": t.string(),
            "shutterspeedvalue": t.number(),
            "label": t.string(),
            "copyrightnotice": t.string(),
            "gimagemime": t.string(),
            "fillorder": t.integer(),
            "contrast": t.integer(),
            "cellwidth": t.integer(),
            "referenceblackwhite": t.number(),
            "subjectarea": t.integer(),
            "contentlocationcode": t.array(t.string()),
            "meteringmode": t.integer(),
            "gpsmapdatum": t.string(),
            "editorialupdate": t.string(),
            "aperturefnumber": t.number(),
            "maxaperturevalue": t.number(),
            "flashenergy": t.number(),
            "orientation": t.integer().optional(),
            "hostcomputer": t.string(),
            "sensingmethod": t.integer(),
            "gcameradisableautocreation": t.array(t.string()).optional(),
            "gpsdestlongituderef": t.string(),
            "expirationtime": t.string(),
            "usepanoramaviewer": t.boolean().optional(),
            "scene": t.array(t.string()),
            "relatedimageheight": t.string(),
            "capturesoftware": t.string(),
            "subjectreference": t.array(t.string()),
            "gpsdatestamp": t.string().optional(),
            "exifTimeUtc": t.string().optional(),
            "subsectime": t.string(),
            "event": t.string(),
            "colorprofile": t.boolean().optional(),
            "objectattributereference": t.array(t.string()),
            "gcameraburstprimary": t.integer().optional(),
            "marked": t.boolean(),
            "celllength": t.integer(),
            "transmissionreference": t.string(),
            "author": t.string(),
            "organisationinimagecode": t.array(t.string()),
            "fullpanoheightpixels": t.integer(),
            "ciadrcity": t.string(),
            "title": t.string(),
            "maxavailwidth": t.integer(),
            "bitspersample": t.integer().optional(),
            "gpsdestlatitude": t.number(),
            "contentlocationname": t.array(t.string()),
            "fixtureidentifier": t.string(),
            "whitebalance": t.integer(),
            "spectralsensitivity": t.string(),
            "sublocation": t.string(),
            "envelopenumber": t.string(),
            "gpsimgdirectionref": t.string(),
            "sensorheight": t.number(),
            "metadatadate": t.string(),
            "contact": t.string(),
            "fullpanowidthpixels": t.integer(),
            "datetimedigitized": t.string(),
            "isoequivalent": t.integer(),
            "subsectimedigitized": t.string(),
            "chromasubsampling": t.string().optional(),
            "posepitchdegrees": t.number(),
            "category": t.string(),
            "focallength": t.number(),
            "releasedate": t.string(),
            "exposureindex": t.number(),
            "stripoffsets": t.string(),
            "DEPRECATEDLargestvalidinteriorrectheight": t.integer(),
            "imagetype": t.string(),
            "croppedareaimageheightpixels": t.integer(),
            "languageidentifier": t.string(),
            "ciemailwork": t.string(),
            "customrendered": t.integer(),
            "ciadrregion": t.string(),
            "exposurebias": t.number(),
            "relatedimagewidth": t.string(),
            "gcameramicrovideooffset": t.integer().optional(),
            "ciurlwork": t.string(),
            "propertyreleasestatus": t.string(),
            "aperturevalue": t.number(),
            "country": t.string(),
            "gcameraspecialtypeid": t.string().optional(),
            "planarconfiguration": t.integer(),
            "gcreationstype": t.string().optional(),
            "resolutionunit": t.integer(),
            "lightsource": t.integer(),
        }
    ).named(renames["PhotosImageMetadataIn"])
    types["PhotosImageMetadataOut"] = t.struct(
        {
            "digitalsourcefiletype": t.string(),
            "rating": t.number(),
            "xmp4c": t.proxy(renames["PhotosFourCMetadataOut"]),
            "certificate": t.string(),
            "croppedarealeftpixels": t.integer(),
            "serviceidentifier": t.string(),
            "interoperabilityindex": t.string(),
            "state": t.string(),
            "gcameramotionphotoversion": t.integer().optional(),
            "audiosamplingrate": t.string(),
            "gcameramotionphotopresentationtimestampus": t.integer().optional(),
            "initialhorizontalfovdegrees": t.number(),
            "poseheadingdegrees": t.number(),
            "stitchingsoftware": t.string(),
            "focallengthin35mmfilm": t.integer(),
            "samplesperpixel": t.integer(),
            "rowsperstrip": t.string(),
            "redeyemode": t.boolean(),
            "daylightsavings": t.array(t.integer()).optional(),
            "editstatus": t.string(),
            "personinimage": t.array(t.string()),
            "webstatement": t.string(),
            "altitude": t.number(),
            "colorspace": t.integer(),
            "subjectlocation": t.integer(),
            "imagenumber": t.string(),
            "gpsdestlongitude": t.number(),
            "city": t.string(),
            "locationshown": t.array(t.string()),
            "uno": t.string(),
            "audiosamplingresolution": t.string(),
            "audiooutcue": t.string(),
            "extrasamples": t.integer(),
            "gpsdop": t.number(),
            "gpsimgdirection": t.number(),
            "digitalsourcetype": t.string(),
            "croppedareatoppixels": t.integer(),
            "gpsspeedref": t.string(),
            "yresolution": t.number(),
            "firmware": t.string(),
            "panoramaMetadata": t.proxy(renames["PhotosPanoramaMetadataOut"]),
            "timesent": t.string(),
            "headline": t.string(),
            "gdepthMetadata": t.proxy(renames["PhotosGDepthMetadataOut"]),
            "urgency": t.string(),
            "grayresponseunit": t.integer(),
            "sensorwidth": t.number(),
            "hdrMetadata": t.proxy(renames["PhotosHdrMetadataOut"]).optional(),
            "gpstrack": t.number(),
            "DEPRECATEDLargestvalidinteriorrectleft": t.integer(),
            "ciadrpcode": t.string(),
            "format": t.string(),
            "exposurelockused": t.boolean(),
            "subjectdistancerange": t.integer(),
            "objecttypereference": t.string(),
            "autoenhance": t.boolean().optional(),
            "authorposition": t.string(),
            "language": t.array(t.string()),
            "flashused": t.integer(),
            "projectiontype": t.string(),
            "DEPRECATEDBlendingtype": t.string(),
            "datesent": t.string(),
            "maxavailheight": t.integer(),
            "datetime": t.string(),
            "gpsstatus": t.string(),
            "minsamplevalue": t.integer(),
            "exposuretime": t.number(),
            "referencenumber": t.array(t.string()),
            "photometricinterpretation": t.integer(),
            "saturation": t.integer(),
            "ccdwidth": t.number(),
            "lens": t.string(),
            "scenecapturetype": t.integer(),
            "referenceservice": t.array(t.string()),
            "gaudiomime": t.string(),
            "relation": t.array(t.string()),
            "iptc4c": t.proxy(renames["PhotosFourCMetadataOut"]),
            "source": t.string(),
            "modifydate": t.string(),
            "colormap": t.integer(),
            "addlmodelinfo": t.string(),
            "gpsdestbearing": t.number(),
            "createdate": t.string(),
            "cameramodel": t.string().optional(),
            "offsettimeoriginal": t.string(),
            "imageorientation": t.string(),
            "intellectualgenre": t.string(),
            "serialnumber": t.string(),
            "expirationdate": t.string(),
            "gpsdifferential": t.integer(),
            "owner": t.array(t.string()),
            "minormodelagedisclosure": t.string(),
            "latitude": t.number().optional(),
            "width": t.integer().optional(),
            "dynamicDepthMetadata": t.proxy(
                renames["PhotosDynamicDepthMetadataOut"]
            ).optional(),
            "freebytecounts": t.string(),
            "exposureprogram": t.integer(),
            "identifier": t.array(t.string()),
            "ciadrextadr": t.array(t.string()),
            "exifTimeUtcSource": t.string().optional(),
            "function": t.boolean(),
            "digimageguid": t.string(),
            "cameramake": t.string().optional(),
            "xresolution": t.number(),
            "primarychromaticities": t.number(),
            "destinationLongitude": t.number().optional(),
            "gaincontrol": t.integer(),
            "firstphotodate": t.string(),
            "modelreleasestatus": t.string(),
            "audiotype": t.string(),
            "flashcompensation": t.number(),
            "freeoffsets": t.integer(),
            "mode": t.integer(),
            "gcameramicrovideoversion": t.integer().optional(),
            "bitDepth": t.integer().optional(),
            "brightnessvalue": t.number(),
            "countrycode": t.string(),
            "publisher": t.array(t.string()),
            "gcreationscameraburstid": t.string(),
            "DEPRECATEDLargestvalidinteriorrecttop": t.integer(),
            "relatedimagefileformat": t.string(),
            "modelreleaseid": t.array(t.string()),
            "initialverticalfovdegrees": t.number(),
            "date": t.string(),
            "releasetime": t.string(),
            "ycbcrpositioning": t.integer(),
            "offsettime": t.string(),
            "burstuuid": t.string(),
            "contributor": t.array(t.string()),
            "initialviewrolldegrees": t.integer(),
            "maxsamplevalue": t.integer(),
            "thresholding": t.integer(),
            "advisory": t.array(t.string()),
            "url": t.string(),
            "ycbcrcoefficients": t.number(),
            "caption": t.string().optional(),
            "digitalzoomratio": t.number(),
            "flashreturn": t.integer(),
            "audioduration": t.string(),
            "programversion": t.string(),
            "compressedbitsperpixel": t.number(),
            "height": t.integer(),
            "instructions": t.string(),
            "lastphotodate": t.string(),
            "DEPRECATEDGpstimestamp": t.number().optional(),
            "grayresponsecurve": t.integer(),
            "poserolldegrees": t.number(),
            "cameraid": t.string(),
            "originatingprogram": t.string(),
            "ismpformat": t.boolean().optional(),
            "motionphotovideodataboxheader": t.string().optional(),
            "software": t.string(),
            "modelage": t.array(t.integer()),
            "initialviewheadingdegrees": t.integer(),
            "destination": t.array(t.string()),
            "gcameramicrovideo": t.integer().optional(),
            "stripbytecounts": t.string(),
            "longitude": t.number().optional(),
            "productid": t.array(t.string()),
            "location": t.string(),
            "cvterm": t.array(t.string()),
            "version": t.string(),
            "timezoneoffset": t.array(t.integer()).optional(),
            "nickname": t.string(),
            "focalplaneunits": t.number(),
            "exposuremode": t.integer(),
            "gpsmeasuremode": t.string(),
            "compressionlevel": t.integer(),
            "objectcycle": t.string(),
            "timezoneminutes": t.array(t.integer()).optional(),
            "sharpness": t.integer(),
            "gpsspeed": t.number(),
            "gcameramicrovideopresentationtimestampus": t.integer().optional(),
            "whitepoint": t.number(),
            "gcameramotionphoto": t.integer().optional(),
            "lensid": t.string(),
            "hasAlpha": t.boolean().optional(),
            "usageterms": t.string(),
            "DEPRECATEDLargestvalidinteriorrectwidth": t.integer(),
            "type": t.array(t.string()),
            "captionwriter": t.string(),
            "credits": t.string(),
            "coverage": t.string(),
            "relatedsoundfile": t.string(),
            "baseurl": t.string(),
            "gpstime": t.array(t.number()).optional(),
            "gpsdestdistance": t.number(),
            "gcameraburstid": t.string().optional(),
            "exif4c": t.proxy(renames["PhotosFourCMetadataOut"]).optional(),
            "subjectcode": t.array(t.string()),
            "subsectimeoriginal": t.string(),
            "envelopepriority": t.string(),
            "sourcephotoscount": t.integer(),
            "referencedate": t.array(t.string()),
            "rotate": t.integer().optional(),
            "keyword": t.array(t.string()),
            "datecreated": t.string(),
            "citelwork": t.string(),
            "iptclastedited": t.string(),
            "supplementalcategory": t.array(t.string()),
            "gpsdestlatituderef": t.string(),
            "actionadvised": t.string(),
            "DEPRECATEDIscolor": t.integer(),
            "focalplanexres": t.number(),
            "animationMetadata": t.proxy(renames["PhotosAnimationMetadataOut"]),
            "destinationLatitude": t.number().optional(),
            "distance": t.number(),
            "mimeType": t.integer().optional(),
            "organisationinimagename": t.array(t.string()),
            "artworkorobject": t.array(t.string()),
            "exifTime": t.string().optional(),
            "gpsdestdistanceref": t.string(),
            "microvideooriginaloffset": t.integer().optional(),
            "ownername": t.string(),
            "ycbcrsubsampling": t.integer(),
            "offsettimedigitized": t.string(),
            "croppedareaimagewidthpixels": t.integer(),
            "ciadrctry": t.string(),
            "gpssatellites": t.string(),
            "propertyreleaseid": t.array(t.string()),
            "initialviewpitchdegrees": t.integer(),
            "lensinfo": t.string(),
            "DEPRECATEDProcess": t.integer(),
            "thumbnailerBuildCl": t.integer().optional(),
            "uniqueid": t.string().optional(),
            "gpstrackref": t.string(),
            "gpsdestbearingref": t.string(),
            "shutterspeedvalue": t.number(),
            "label": t.string(),
            "copyrightnotice": t.string(),
            "gimagemime": t.string(),
            "fillorder": t.integer(),
            "contrast": t.integer(),
            "cellwidth": t.integer(),
            "referenceblackwhite": t.number(),
            "subjectarea": t.integer(),
            "contentlocationcode": t.array(t.string()),
            "meteringmode": t.integer(),
            "gpsmapdatum": t.string(),
            "editorialupdate": t.string(),
            "aperturefnumber": t.number(),
            "maxaperturevalue": t.number(),
            "flashenergy": t.number(),
            "orientation": t.integer().optional(),
            "hostcomputer": t.string(),
            "sensingmethod": t.integer(),
            "gcameradisableautocreation": t.array(t.string()).optional(),
            "gpsdestlongituderef": t.string(),
            "expirationtime": t.string(),
            "usepanoramaviewer": t.boolean().optional(),
            "scene": t.array(t.string()),
            "relatedimageheight": t.string(),
            "capturesoftware": t.string(),
            "subjectreference": t.array(t.string()),
            "gpsdatestamp": t.string().optional(),
            "exifTimeUtc": t.string().optional(),
            "subsectime": t.string(),
            "event": t.string(),
            "colorprofile": t.boolean().optional(),
            "objectattributereference": t.array(t.string()),
            "gcameraburstprimary": t.integer().optional(),
            "marked": t.boolean(),
            "celllength": t.integer(),
            "transmissionreference": t.string(),
            "author": t.string(),
            "organisationinimagecode": t.array(t.string()),
            "fullpanoheightpixels": t.integer(),
            "ciadrcity": t.string(),
            "title": t.string(),
            "maxavailwidth": t.integer(),
            "bitspersample": t.integer().optional(),
            "gpsdestlatitude": t.number(),
            "contentlocationname": t.array(t.string()),
            "fixtureidentifier": t.string(),
            "whitebalance": t.integer(),
            "spectralsensitivity": t.string(),
            "sublocation": t.string(),
            "envelopenumber": t.string(),
            "gpsimgdirectionref": t.string(),
            "sensorheight": t.number(),
            "metadatadate": t.string(),
            "contact": t.string(),
            "fullpanowidthpixels": t.integer(),
            "datetimedigitized": t.string(),
            "isoequivalent": t.integer(),
            "subsectimedigitized": t.string(),
            "chromasubsampling": t.string().optional(),
            "posepitchdegrees": t.number(),
            "category": t.string(),
            "focallength": t.number(),
            "releasedate": t.string(),
            "exposureindex": t.number(),
            "stripoffsets": t.string(),
            "DEPRECATEDLargestvalidinteriorrectheight": t.integer(),
            "imagetype": t.string(),
            "croppedareaimageheightpixels": t.integer(),
            "languageidentifier": t.string(),
            "ciemailwork": t.string(),
            "customrendered": t.integer(),
            "ciadrregion": t.string(),
            "exposurebias": t.number(),
            "relatedimagewidth": t.string(),
            "gcameramicrovideooffset": t.integer().optional(),
            "ciurlwork": t.string(),
            "propertyreleasestatus": t.string(),
            "aperturevalue": t.number(),
            "country": t.string(),
            "gcameraspecialtypeid": t.string().optional(),
            "planarconfiguration": t.integer(),
            "gcreationstype": t.string().optional(),
            "resolutionunit": t.integer(),
            "lightsource": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosImageMetadataOut"])
    types["AssistantApiSettingsInternalAncillaryDeviceIdIn"] = t.struct(
        {"deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional()}
    ).named(renames["AssistantApiSettingsInternalAncillaryDeviceIdIn"])
    types["AssistantApiSettingsInternalAncillaryDeviceIdOut"] = t.struct(
        {
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsInternalAncillaryDeviceIdOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldIn"
    ] = t.struct(
        {
            "value": t.string().optional(),
            "fieldType": t.string(),
            "fieldIndex": t.integer().optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldOut"
    ] = t.struct(
        {
            "value": t.string().optional(),
            "fieldType": t.string(),
            "fieldIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldOut"
        ]
    )
    types["ImageExifIPTCMetadataContactInfoIn"] = t.struct(
        {
            "email": t.string(),
            "webUrl": t.string(),
            "phone": t.string(),
            "state": t.string(),
            "address": t.string(),
            "postalCode": t.string(),
            "city": t.string(),
            "country": t.string(),
        }
    ).named(renames["ImageExifIPTCMetadataContactInfoIn"])
    types["ImageExifIPTCMetadataContactInfoOut"] = t.struct(
        {
            "email": t.string(),
            "webUrl": t.string(),
            "phone": t.string(),
            "state": t.string(),
            "address": t.string(),
            "postalCode": t.string(),
            "city": t.string(),
            "country": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifIPTCMetadataContactInfoOut"])
    types["LensDiscoveryStylePersonDetectionSignalsDetectedPersonIn"] = t.struct(
        {"boundingBox": t.proxy(renames["LensDiscoveryStyleBoundingBoxIn"]).optional()}
    ).named(renames["LensDiscoveryStylePersonDetectionSignalsDetectedPersonIn"])
    types["LensDiscoveryStylePersonDetectionSignalsDetectedPersonOut"] = t.struct(
        {
            "boundingBox": t.proxy(
                renames["LensDiscoveryStyleBoundingBoxOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStylePersonDetectionSignalsDetectedPersonOut"])
    types["AbuseiamManualReviewEvaluationInfoIn"] = t.struct(
        {
            "reviewer": t.proxy(renames["AbuseiamManualReviewerInfoIn"]).optional(),
            "tool": t.proxy(renames["AbuseiamManualReviewToolIn"]).optional(),
        }
    ).named(renames["AbuseiamManualReviewEvaluationInfoIn"])
    types["AbuseiamManualReviewEvaluationInfoOut"] = t.struct(
        {
            "reviewer": t.proxy(renames["AbuseiamManualReviewerInfoOut"]).optional(),
            "tool": t.proxy(renames["AbuseiamManualReviewToolOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamManualReviewEvaluationInfoOut"])
    types["AssistantApiFeatureSpecificActionSupportIn"] = t.struct(
        {"clarificationDataSupported": t.boolean().optional()}
    ).named(renames["AssistantApiFeatureSpecificActionSupportIn"])
    types["AssistantApiFeatureSpecificActionSupportOut"] = t.struct(
        {
            "clarificationDataSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiFeatureSpecificActionSupportOut"])
    types["RepositoryWebrefWebrefAttachmentMetadataIn"] = t.struct(
        {
            "lngE7": t.integer(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "featureType": t.string().optional(),
            "index": t.integer().optional(),
            "latE7": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefWebrefAttachmentMetadataIn"])
    types["RepositoryWebrefWebrefAttachmentMetadataOut"] = t.struct(
        {
            "lngE7": t.integer(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "featureType": t.string().optional(),
            "index": t.integer().optional(),
            "latE7": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefAttachmentMetadataOut"])
    types["GeostoreFeatureIdProtoIn"] = t.struct(
        {
            "cellId": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "fprint": t.string().optional(),
        }
    ).named(renames["GeostoreFeatureIdProtoIn"])
    types["GeostoreFeatureIdProtoOut"] = t.struct(
        {
            "cellId": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "fprint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureIdProtoOut"])
    types["GoodocSemanticLabelContentLinkCitationTargetIn"] = t.struct(
        {
            "Confidence": t.number(),
            "BibKey": t.string(),
            "Authors": t.string().optional(),
            "Title": t.string(),
            "Year": t.integer(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkCitationTargetIn"])
    types["GoodocSemanticLabelContentLinkCitationTargetOut"] = t.struct(
        {
            "Confidence": t.number(),
            "BibKey": t.string(),
            "Authors": t.string().optional(),
            "Title": t.string(),
            "Year": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkCitationTargetOut"])
    types["GeoOndemandAssistantSupportedActionsIn"] = t.struct(
        {
            "restaurantReservationUrl": t.string().optional(),
            "allowsGuestCheckout": t.boolean().optional(),
            "isAsynchronousRestaurantReservation": t.boolean().optional(),
        }
    ).named(renames["GeoOndemandAssistantSupportedActionsIn"])
    types["GeoOndemandAssistantSupportedActionsOut"] = t.struct(
        {
            "restaurantReservationUrl": t.string().optional(),
            "allowsGuestCheckout": t.boolean().optional(),
            "isAsynchronousRestaurantReservation": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeoOndemandAssistantSupportedActionsOut"])
    types["IndexingDocjoinerAnchorStatisticsPerDupStatsIn"] = t.struct(
        {
            "anchorCount": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "collectType": t.integer().optional(),
            "redundantAnchorCount": t.integer().optional(),
            "offdomainAnchorCount": t.integer().optional(),
            "scannedAnchorCount": t.integer().optional(),
            "dupUrl": t.string().optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorStatisticsPerDupStatsIn"])
    types["IndexingDocjoinerAnchorStatisticsPerDupStatsOut"] = t.struct(
        {
            "anchorCount": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "collectType": t.integer().optional(),
            "redundantAnchorCount": t.integer().optional(),
            "offdomainAnchorCount": t.integer().optional(),
            "scannedAnchorCount": t.integer().optional(),
            "dupUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorStatisticsPerDupStatsOut"])
    types["GeostoreUserProtoIn"] = t.struct(
        {
            "username": t.string().optional(),
            "keystoreConfigId": t.integer(),
            "encryptedGaiaId": t.string().optional(),
            "encryptionKeyName": t.string(),
        }
    ).named(renames["GeostoreUserProtoIn"])
    types["GeostoreUserProtoOut"] = t.struct(
        {
            "username": t.string().optional(),
            "keystoreConfigId": t.integer(),
            "encryptedGaiaId": t.string().optional(),
            "encryptionKeyName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreUserProtoOut"])
    types["KnowledgeAnswersOpaqueRecurrenceTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueRecurrenceTypeIn"])
    types["KnowledgeAnswersOpaqueRecurrenceTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueRecurrenceTypeOut"])
    types["QualityNsrVersionedFloatSignalIn"] = t.struct(
        {"versionId": t.integer().optional(), "value": t.number().optional()}
    ).named(renames["QualityNsrVersionedFloatSignalIn"])
    types["QualityNsrVersionedFloatSignalOut"] = t.struct(
        {
            "versionId": t.integer().optional(),
            "value": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrVersionedFloatSignalOut"])
    types["GoogleCloudContentwarehouseV1PropertyTypeOptionsIn"] = t.struct(
        {
            "propertyDefinitions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"])
            )
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1PropertyTypeOptionsOut"] = t.struct(
        {
            "propertyDefinitions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyDefinitionOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyTypeOptionsOut"])
    types[
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionIn"
    ] = t.struct(
        {
            "iconicPersonVisibilityType": t.string().optional(),
            "discretizedIconicPersonVisibilityConfidence": t.integer().optional(),
        }
    ).named(
        renames[
            "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionIn"
        ]
    )
    types[
        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionOut"
    ] = t.struct(
        {
            "iconicPersonVisibilityType": t.string().optional(),
            "discretizedIconicPersonVisibilityConfidence": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionOut"
        ]
    )
    types["NlpSciencelitAuthorIn"] = t.struct(
        {"lastName": t.string(), "firstName": t.string()}
    ).named(renames["NlpSciencelitAuthorIn"])
    types["NlpSciencelitAuthorOut"] = t.struct(
        {
            "lastName": t.string(),
            "firstName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitAuthorOut"])
    types["SocialGraphApiProtoUsageInfoIn"] = t.struct(
        {
            "timesContacted": t.string().optional(),
            "lastTimeContacted": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoUsageInfoIn"])
    types["SocialGraphApiProtoUsageInfoOut"] = t.struct(
        {
            "timesContacted": t.string().optional(),
            "lastTimeContacted": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoUsageInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectIn"] = t.struct(
        {
            "role": t.string(),
            "type": t.string().optional(),
            "description": t.string(),
            "url": t.string(),
            "name": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectOut"] = t.struct(
        {
            "role": t.string(),
            "type": t.string().optional(),
            "description": t.string(),
            "url": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectOut"])
    types["MediaIndexFrameIdentifierIn"] = t.struct(
        {
            "previewFrameZeroVariant": t.proxy(
                renames["MediaIndexFrameIdentifierPreviewFrameZeroVariantIn"]
            ),
            "timestampMs": t.integer().optional(),
        }
    ).named(renames["MediaIndexFrameIdentifierIn"])
    types["MediaIndexFrameIdentifierOut"] = t.struct(
        {
            "previewFrameZeroVariant": t.proxy(
                renames["MediaIndexFrameIdentifierPreviewFrameZeroVariantOut"]
            ),
            "timestampMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexFrameIdentifierOut"])
    types["RepositoryWebrefRefconRefconNameInfoIn"] = t.struct(
        {
            "isGeneratedName": t.boolean(),
            "isStrongIdentifier": t.boolean(),
            "isI18nName": t.boolean(),
            "score": t.number(),
            "namePrior": t.number().optional(),
            "language": t.array(t.integer()).optional(),
            "confidence": t.number(),
            "isTranslatedName": t.boolean(),
            "idfScore": t.number(),
            "originalName": t.string().optional(),
            "normalizedName": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefRefconRefconNameInfoIn"])
    types["RepositoryWebrefRefconRefconNameInfoOut"] = t.struct(
        {
            "isGeneratedName": t.boolean(),
            "isStrongIdentifier": t.boolean(),
            "isI18nName": t.boolean(),
            "score": t.number(),
            "namePrior": t.number().optional(),
            "language": t.array(t.integer()).optional(),
            "confidence": t.number(),
            "isTranslatedName": t.boolean(),
            "idfScore": t.number(),
            "originalName": t.string().optional(),
            "normalizedName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRefconRefconNameInfoOut"])
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateIn"
    ] = t.struct({"supportedLanguageTags": t.array(t.string()).optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateIn"]
    )
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateOut"
    ] = t.struct(
        {
            "supportedLanguageTags": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateOut"]
    )
    types["AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchIn"] = t.struct(
        {"endIndex": t.integer().optional(), "startIndex": t.integer().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchOut"] = t.struct(
        {
            "endIndex": t.integer().optional(),
            "startIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchOut"])
    types["AssistantApiSettingsPoliteModeIn"] = t.struct(
        {"politeModeEnabled": t.boolean()}
    ).named(renames["AssistantApiSettingsPoliteModeIn"])
    types["AssistantApiSettingsPoliteModeOut"] = t.struct(
        {
            "politeModeEnabled": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsPoliteModeOut"])
    types["ScienceCitationUnionCatalogIn"] = t.struct(
        {
            "NumLibraries": t.integer().optional(),
            "MetadataUrl": t.string().optional(),
            "CanonicalUrlfp": t.string(),
            "Url": t.string().optional(),
            "Subject": t.array(t.string()).optional(),
        }
    ).named(renames["ScienceCitationUnionCatalogIn"])
    types["ScienceCitationUnionCatalogOut"] = t.struct(
        {
            "NumLibraries": t.integer().optional(),
            "MetadataUrl": t.string().optional(),
            "CanonicalUrlfp": t.string(),
            "Url": t.string().optional(),
            "Subject": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationUnionCatalogOut"])
    types["NlpSemanticParsingLocalLocationConstraintIn"] = t.struct(
        {
            "quality": t.proxy(renames["NlpSemanticParsingLocalQualityConstraintIn"]),
            "scalableAttribute": t.proxy(
                renames["NlpSemanticParsingLocalScalableAttributeIn"]
            ),
            "new": t.boolean(),
            "cuisine": t.proxy(renames["NlpSemanticParsingLocalCuisineConstraintIn"]),
            "ungroundedConstraint": t.boolean().optional(),
            "price": t.proxy(renames["NlpSemanticParsingLocalPriceConstraintIn"]),
            "visitHistory": t.proxy(
                renames["NlpSemanticParsingLocalVisitHistoryConstraintIn"]
            ),
            "rooms": t.proxy(renames["NlpSemanticParsingLocalRoomConstraintIn"]),
            "amenities": t.proxy(
                renames["NlpSemanticParsingLocalAmenitiesIn"]
            ).optional(),
            "open24Hours": t.boolean(),
            "unspecified": t.boolean().optional(),
            "evcsConnectorConstraint": t.proxy(
                renames["NlpSemanticParsingLocalEvChargingStationConnectorConstraintIn"]
            ).optional(),
            "healthInsurance": t.proxy(
                renames["NlpSemanticParsingLocalHealthInsuranceConstraintIn"]
            ).optional(),
            "startByte": t.integer().optional(),
            "gcidConstraint": t.proxy(
                renames["NlpSemanticParsingLocalGcidConstraintIn"]
            ).optional(),
            "evcsSpeedConstraint": t.proxy(
                renames["NlpSemanticParsingLocalEvChargingStationSpeedConstraintIn"]
            ),
            "menuItem": t.proxy(renames["NlpSemanticParsingLocalMenuItemIn"]),
            "hyperReliableData": t.proxy(
                renames["NlpSemanticParsingLocalHyperReliableDataIn"]
            ).optional(),
            "chainMember": t.proxy(
                renames["NlpSemanticParsingLocalChainMemberConstraintIn"]
            ),
            "numBytes": t.integer(),
            "service": t.proxy(renames["NlpSemanticParsingLocalServiceConstraintIn"]),
            "vaccineType": t.string().optional(),
            "text": t.string(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationConstraintIn"])
    types["NlpSemanticParsingLocalLocationConstraintOut"] = t.struct(
        {
            "quality": t.proxy(renames["NlpSemanticParsingLocalQualityConstraintOut"]),
            "scalableAttribute": t.proxy(
                renames["NlpSemanticParsingLocalScalableAttributeOut"]
            ),
            "new": t.boolean(),
            "cuisine": t.proxy(renames["NlpSemanticParsingLocalCuisineConstraintOut"]),
            "ungroundedConstraint": t.boolean().optional(),
            "price": t.proxy(renames["NlpSemanticParsingLocalPriceConstraintOut"]),
            "visitHistory": t.proxy(
                renames["NlpSemanticParsingLocalVisitHistoryConstraintOut"]
            ),
            "rooms": t.proxy(renames["NlpSemanticParsingLocalRoomConstraintOut"]),
            "amenities": t.proxy(
                renames["NlpSemanticParsingLocalAmenitiesOut"]
            ).optional(),
            "open24Hours": t.boolean(),
            "unspecified": t.boolean().optional(),
            "evcsConnectorConstraint": t.proxy(
                renames[
                    "NlpSemanticParsingLocalEvChargingStationConnectorConstraintOut"
                ]
            ).optional(),
            "healthInsurance": t.proxy(
                renames["NlpSemanticParsingLocalHealthInsuranceConstraintOut"]
            ).optional(),
            "startByte": t.integer().optional(),
            "gcidConstraint": t.proxy(
                renames["NlpSemanticParsingLocalGcidConstraintOut"]
            ).optional(),
            "evcsSpeedConstraint": t.proxy(
                renames["NlpSemanticParsingLocalEvChargingStationSpeedConstraintOut"]
            ),
            "menuItem": t.proxy(renames["NlpSemanticParsingLocalMenuItemOut"]),
            "hyperReliableData": t.proxy(
                renames["NlpSemanticParsingLocalHyperReliableDataOut"]
            ).optional(),
            "chainMember": t.proxy(
                renames["NlpSemanticParsingLocalChainMemberConstraintOut"]
            ),
            "numBytes": t.integer(),
            "service": t.proxy(renames["NlpSemanticParsingLocalServiceConstraintOut"]),
            "vaccineType": t.string().optional(),
            "text": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationConstraintOut"])
    types["TrawlerFetchReplyDataFetchStatsStateStatsIn"] = t.struct(
        {
            "EndTrackingTimeUsec": t.string(),
            "WaitScheduleTimeUsec": t.integer(),
            "WaitFetchClientUsec": t.integer(),
            "WaitDNSTimeUsec": t.integer(),
            "WaitForFetchUsec": t.integer(),
            "WaitForCachedContentStreamingUsec": t.integer(),
            "WaitCredentialTimeUsec": t.integer(),
            "WaitRobotsTimeUsec": t.integer(),
            "WaitNextFlowUsec": t.integer(),
            "StartTrackingTimeUsec": t.string().optional(),
            "WaitRobotsFetchTimeUsec": t.integer().optional(),
            "WaitHostIdTimeUsec": t.integer(),
            "WaitRobotsCacheTimeUsec": t.integer().optional(),
            "WaitCompressTimeUsec": t.integer(),
            "WaitContentCacheUsec": t.integer(),
        }
    ).named(renames["TrawlerFetchReplyDataFetchStatsStateStatsIn"])
    types["TrawlerFetchReplyDataFetchStatsStateStatsOut"] = t.struct(
        {
            "EndTrackingTimeUsec": t.string(),
            "WaitScheduleTimeUsec": t.integer(),
            "WaitFetchClientUsec": t.integer(),
            "WaitDNSTimeUsec": t.integer(),
            "WaitForFetchUsec": t.integer(),
            "WaitForCachedContentStreamingUsec": t.integer(),
            "WaitCredentialTimeUsec": t.integer(),
            "WaitRobotsTimeUsec": t.integer(),
            "WaitNextFlowUsec": t.integer(),
            "StartTrackingTimeUsec": t.string().optional(),
            "WaitRobotsFetchTimeUsec": t.integer().optional(),
            "WaitHostIdTimeUsec": t.integer(),
            "WaitRobotsCacheTimeUsec": t.integer().optional(),
            "WaitCompressTimeUsec": t.integer(),
            "WaitContentCacheUsec": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataFetchStatsStateStatsOut"])
    types["GeostoreFeaturePropertyIdProtoIn"] = t.struct(
        {
            "attachmentTypeId": t.string(),
            "nameLanguage": t.string().optional(),
            "attributeId": t.string(),
            "kgPropertyId": t.string(),
            "fieldType": t.string(),
        }
    ).named(renames["GeostoreFeaturePropertyIdProtoIn"])
    types["GeostoreFeaturePropertyIdProtoOut"] = t.struct(
        {
            "attachmentTypeId": t.string(),
            "nameLanguage": t.string().optional(),
            "attributeId": t.string(),
            "kgPropertyId": t.string(),
            "fieldType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeaturePropertyIdProtoOut"])
    types["NlpSemanticParsingModelsShoppingAssistantMerchantIn"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "mid": t.string().optional(),
            "mcid": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdIn"
                    ]
                )
            ),
            "name": t.string().optional(),
            "merchantId": t.array(t.string()).optional(),
            "localMerchantId": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantMerchantIn"])
    types["NlpSemanticParsingModelsShoppingAssistantMerchantOut"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "mid": t.string().optional(),
            "mcid": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdOut"
                    ]
                )
            ),
            "name": t.string().optional(),
            "merchantId": t.array(t.string()).optional(),
            "localMerchantId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantMerchantOut"])
    types["QualityShoppingShoppingAttachmentPBlockIn"] = t.struct(
        {
            "isFreeReturn": t.boolean(),
            "imageInfo": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentPBlockImageInfoIn"])
            ),
            "title": t.string().optional(),
            "imageDocid": t.array(t.string()).optional(),
            "listTitle": t.string(),
            "minPriceValue": t.number(),
            "maxPriceValue": t.number(),
            "priceValue": t.number(),
            "priceCurrency": t.string(),
            "fullTitle": t.string().optional(),
            "isFreeDelivery": t.boolean(),
            "price": t.string(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentPBlockIn"])
    types["QualityShoppingShoppingAttachmentPBlockOut"] = t.struct(
        {
            "isFreeReturn": t.boolean(),
            "imageInfo": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentPBlockImageInfoOut"])
            ),
            "title": t.string().optional(),
            "imageDocid": t.array(t.string()).optional(),
            "listTitle": t.string(),
            "minPriceValue": t.number(),
            "maxPriceValue": t.number(),
            "priceValue": t.number(),
            "priceCurrency": t.string(),
            "fullTitle": t.string().optional(),
            "isFreeDelivery": t.boolean(),
            "price": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentPBlockOut"])
    types["QualityWebanswersTranscriptAnnotationsIn"] = t.struct(
        {
            "videoTranscriptAnnotations": t.array(
                t.proxy(renames["QualityWebanswersVideoTranscriptAnnotationsIn"])
            )
        }
    ).named(renames["QualityWebanswersTranscriptAnnotationsIn"])
    types["QualityWebanswersTranscriptAnnotationsOut"] = t.struct(
        {
            "videoTranscriptAnnotations": t.array(
                t.proxy(renames["QualityWebanswersVideoTranscriptAnnotationsOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityWebanswersTranscriptAnnotationsOut"])
    types["AssistantApiSystemNotificationRestrictionsIn"] = t.struct(
        {
            "notificationCapabilities": t.string().optional(),
            "categoryState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateIn"
                    ]
                )
            ),
            "channelState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateIn"
                    ]
                )
            ),
        }
    ).named(renames["AssistantApiSystemNotificationRestrictionsIn"])
    types["AssistantApiSystemNotificationRestrictionsOut"] = t.struct(
        {
            "notificationCapabilities": t.string().optional(),
            "categoryState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateOut"
                    ]
                )
            ),
            "channelState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSystemNotificationRestrictionsOut"])
    types["MediaIndexVideoCentroidDomainScoreIn"] = t.struct(
        {
            "score": t.number().optional(),
            "domain": t.string().optional(),
            "numDocs": t.integer().optional(),
        }
    ).named(renames["MediaIndexVideoCentroidDomainScoreIn"])
    types["MediaIndexVideoCentroidDomainScoreOut"] = t.struct(
        {
            "score": t.number().optional(),
            "domain": t.string().optional(),
            "numDocs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexVideoCentroidDomainScoreOut"])
    types["GeostoreLaneProtoIn"] = t.struct(
        {
            "type": t.string().optional(),
            "shared": t.boolean().optional(),
            "surface": t.string().optional(),
            "laneNumber": t.integer().optional(),
            "flow": t.proxy(renames["GeostoreFlowLineProtoIn"]).optional(),
            "laneFollowsSegmentEndFraction": t.number(),
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoIn"])
            ).optional(),
            "laneConnection": t.array(
                t.proxy(renames["GeostoreLaneProtoLaneConnectionIn"])
            ).optional(),
            "distanceToNextLane": t.number().optional(),
            "width": t.number().optional(),
            "conjoinedCategory": t.string().optional(),
            "laneDividerCrossing": t.string().optional(),
            "laneFollowsSegmentBeginFraction": t.number().optional(),
            "laneToken": t.string().optional(),
            "boundingMarker": t.array(
                t.proxy(renames["GeostoreBoundingMarkerProtoIn"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "stopLine": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreLaneProtoIn"])
    types["GeostoreLaneProtoOut"] = t.struct(
        {
            "type": t.string().optional(),
            "shared": t.boolean().optional(),
            "surface": t.string().optional(),
            "laneNumber": t.integer().optional(),
            "flow": t.proxy(renames["GeostoreFlowLineProtoOut"]).optional(),
            "laneFollowsSegmentEndFraction": t.number(),
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoOut"])
            ).optional(),
            "laneConnection": t.array(
                t.proxy(renames["GeostoreLaneProtoLaneConnectionOut"])
            ).optional(),
            "distanceToNextLane": t.number().optional(),
            "width": t.number().optional(),
            "conjoinedCategory": t.string().optional(),
            "laneDividerCrossing": t.string().optional(),
            "laneFollowsSegmentBeginFraction": t.number().optional(),
            "laneToken": t.string().optional(),
            "boundingMarker": t.array(
                t.proxy(renames["GeostoreBoundingMarkerProtoOut"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "stopLine": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLaneProtoOut"])
    types["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "timezone": t.string().optional(),
            "locationName": t.string().optional(),
            "latLng": t.proxy(renames["GoogleTypeLatLngIn"]).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationIn"])
    types["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "timezone": t.string().optional(),
            "locationName": t.string().optional(),
            "latLng": t.proxy(renames["GoogleTypeLatLngOut"]).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationOut"])
    types["QualityNavboostCrapsStatsWithWeightsProtoIn"] = t.struct(
        {
            "kind": t.integer(),
            "varOfMean": t.number(),
            "pc90": t.number(),
            "variance": t.number(),
            "pc25": t.number(),
            "hi": t.number(),
            "median": t.number(),
            "stddev": t.number(),
            "weightedN": t.number(),
            "pc10": t.number(),
            "n": t.integer(),
            "mean": t.number(),
            "pc75": t.number(),
            "stdError": t.number(),
            "lo": t.number(),
        }
    ).named(renames["QualityNavboostCrapsStatsWithWeightsProtoIn"])
    types["QualityNavboostCrapsStatsWithWeightsProtoOut"] = t.struct(
        {
            "kind": t.integer(),
            "varOfMean": t.number(),
            "pc90": t.number(),
            "variance": t.number(),
            "pc25": t.number(),
            "hi": t.number(),
            "median": t.number(),
            "stddev": t.number(),
            "weightedN": t.number(),
            "pc10": t.number(),
            "n": t.integer(),
            "mean": t.number(),
            "pc75": t.number(),
            "stdError": t.number(),
            "lo": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsStatsWithWeightsProtoOut"])
    types["NlxDataSchemaParagraphIn"] = t.struct(
        {
            "sentences": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "text": t.string().optional(),
        }
    ).named(renames["NlxDataSchemaParagraphIn"])
    types["NlxDataSchemaParagraphOut"] = t.struct(
        {
            "sentences": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaParagraphOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSourceIdentityIn"] = t.struct(
        {
            "deleted": t.boolean().optional(),
            "id": t.string().optional(),
            "sourceEtag": t.string().optional(),
            "containerType": t.string().optional(),
            "lastUpdatedMicros": t.string().optional(),
            "lastUpdated": t.string().optional(),
            "container": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSourceIdentityIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSourceIdentityOut"] = t.struct(
        {
            "deleted": t.boolean().optional(),
            "id": t.string().optional(),
            "sourceEtag": t.string().optional(),
            "containerType": t.string().optional(),
            "lastUpdatedMicros": t.string().optional(),
            "lastUpdated": t.string().optional(),
            "container": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSourceIdentityOut"])
    types["RepositoryWebrefFreebaseTypeIn"] = t.struct(
        {
            "score": t.number().optional(),
            "typeMid": t.string().optional(),
            "typeName": t.string().optional(),
            "provenance": t.array(t.string()).optional(),
        }
    ).named(renames["RepositoryWebrefFreebaseTypeIn"])
    types["RepositoryWebrefFreebaseTypeOut"] = t.struct(
        {
            "score": t.number().optional(),
            "typeMid": t.string().optional(),
            "typeName": t.string().optional(),
            "provenance": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefFreebaseTypeOut"])
    types["NlpSciencelitArticleIdIn"] = t.struct(
        {"idType": t.string(), "id": t.string()}
    ).named(renames["NlpSciencelitArticleIdIn"])
    types["NlpSciencelitArticleIdOut"] = t.struct(
        {
            "idType": t.string(),
            "id": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitArticleIdOut"])
    types["GeostorePriceInfoFoodNutritionFactsIn"] = t.struct(
        {
            "protein": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"]
            ).optional(),
            "cholesterol": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"]
            ).optional(),
            "sodium": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"]
            ).optional(),
            "totalCarbohydrate": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"]
            ).optional(),
            "calories": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsCaloriesFactIn"]
            ),
            "totalFat": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"]
            ).optional(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsIn"])
    types["GeostorePriceInfoFoodNutritionFactsOut"] = t.struct(
        {
            "protein": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"]
            ).optional(),
            "cholesterol": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"]
            ).optional(),
            "sodium": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"]
            ).optional(),
            "totalCarbohydrate": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"]
            ).optional(),
            "calories": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsCaloriesFactOut"]
            ),
            "totalFat": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsOut"])
    types["VideoContentSearchAnchorsThumbnailInfoIn"] = t.struct(
        {
            "thumbnailDiversity": t.number().optional(),
            "hasMissingStarburst": t.boolean().optional(),
            "hasMissingThumbnails": t.boolean().optional(),
        }
    ).named(renames["VideoContentSearchAnchorsThumbnailInfoIn"])
    types["VideoContentSearchAnchorsThumbnailInfoOut"] = t.struct(
        {
            "thumbnailDiversity": t.number().optional(),
            "hasMissingStarburst": t.boolean().optional(),
            "hasMissingThumbnails": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorsThumbnailInfoOut"])
    types["QualityShoppingShoppingAttachmentProductIn"] = t.struct(
        {
            "productClusterMid": t.string(),
            "offer": t.proxy(renames["QualityShoppingShoppingAttachmentOfferIn"]),
            "relevanceEmbedding": t.array(
                t.proxy(renames["QualityRankembedMustangMustangRankEmbedInfoIn"])
            ).optional(),
            "outlinkDomainRelationship": t.string().optional(),
            "catalogId": t.string(),
            "mokaFacet": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentMokaFacetValueIn"])
            ),
            "aggregateRating": t.proxy(
                renames["ShoppingWebentityShoppingAnnotationProductRatingIn"]
            ),
            "productPopularity": t.number().optional(),
            "nonDisplayableDescription": t.string(),
            "locale": t.proxy(renames["QualityShoppingShoppingAttachmentLocaleIn"]),
            "weakGlobalProductClusterId": t.string().optional(),
            "pblock": t.proxy(
                renames["QualityShoppingShoppingAttachmentPBlockIn"]
            ).optional(),
            "nonDisplayableTitle": t.string(),
            "globalProductClusterId": t.string(),
            "brandEntityId": t.string(),
            "productBrowseonomyIds": t.array(t.integer()).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentProductIn"])
    types["QualityShoppingShoppingAttachmentProductOut"] = t.struct(
        {
            "productClusterMid": t.string(),
            "offer": t.proxy(renames["QualityShoppingShoppingAttachmentOfferOut"]),
            "relevanceEmbedding": t.array(
                t.proxy(renames["QualityRankembedMustangMustangRankEmbedInfoOut"])
            ).optional(),
            "outlinkDomainRelationship": t.string().optional(),
            "catalogId": t.string(),
            "mokaFacet": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentMokaFacetValueOut"])
            ),
            "aggregateRating": t.proxy(
                renames["ShoppingWebentityShoppingAnnotationProductRatingOut"]
            ),
            "productPopularity": t.number().optional(),
            "nonDisplayableDescription": t.string(),
            "locale": t.proxy(renames["QualityShoppingShoppingAttachmentLocaleOut"]),
            "weakGlobalProductClusterId": t.string().optional(),
            "pblock": t.proxy(
                renames["QualityShoppingShoppingAttachmentPBlockOut"]
            ).optional(),
            "nonDisplayableTitle": t.string(),
            "globalProductClusterId": t.string(),
            "brandEntityId": t.string(),
            "productBrowseonomyIds": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentProductOut"])
    types["LegalCitationCourtDocumentPubIn"] = t.struct(
        {
            "Page": t.string().optional(),
            "Year": t.integer().optional(),
            "Volume": t.integer().optional(),
            "Paragraph": t.string().optional(),
            "Reporter": t.string().optional(),
        }
    ).named(renames["LegalCitationCourtDocumentPubIn"])
    types["LegalCitationCourtDocumentPubOut"] = t.struct(
        {
            "Page": t.string().optional(),
            "Year": t.integer().optional(),
            "Volume": t.integer().optional(),
            "Paragraph": t.string().optional(),
            "Reporter": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentPubOut"])
    types[
        "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsIn"
    ] = t.struct(
        {
            "cmekServiceName": t.string().optional(),
            "cmekCloudResourceName": t.string().optional(),
            "cmekCloudResourceType": t.string().optional(),
        }
    ).named(
        renames[
            "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsIn"
        ]
    )
    types[
        "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsOut"
    ] = t.struct(
        {
            "cmekServiceName": t.string().optional(),
            "cmekCloudResourceName": t.string().optional(),
            "cmekCloudResourceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsOut"
        ]
    )
    types["VideoContentSearchOcrVideoFeatureIn"] = t.struct(
        {
            "langIdDetectedLanguage": t.string().optional(),
            "durationInMs": t.integer().optional(),
            "averageTextAreaRatio": t.number().optional(),
            "numFrames": t.integer().optional(),
            "ocrDetectedLanguage": t.string().optional(),
            "numClusters": t.integer().optional(),
            "clusterIdToFrameSize": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["VideoContentSearchOcrVideoFeatureIn"])
    types["VideoContentSearchOcrVideoFeatureOut"] = t.struct(
        {
            "langIdDetectedLanguage": t.string().optional(),
            "durationInMs": t.integer().optional(),
            "averageTextAreaRatio": t.number().optional(),
            "numFrames": t.integer().optional(),
            "ocrDetectedLanguage": t.string().optional(),
            "numClusters": t.integer().optional(),
            "clusterIdToFrameSize": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOcrVideoFeatureOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyIn"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "key": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "expirationTime": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyOut"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "key": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "expirationTime": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyOut"])
    types["GeostorePoseProtoIn"] = t.struct(
        {
            "index": t.integer().optional(),
            "roll": t.number().optional(),
            "altitude": t.number().optional(),
            "lat": t.number().optional(),
            "pitch": t.number().optional(),
            "yaw": t.number().optional(),
            "lng": t.number().optional(),
        }
    ).named(renames["GeostorePoseProtoIn"])
    types["GeostorePoseProtoOut"] = t.struct(
        {
            "index": t.integer().optional(),
            "roll": t.number().optional(),
            "altitude": t.number().optional(),
            "lat": t.number().optional(),
            "pitch": t.number().optional(),
            "yaw": t.number().optional(),
            "lng": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePoseProtoOut"])
    types["AssistantApiSupportedClientOpSupportedExecutionIn"] = t.struct(
        {
            "supportsSynchronousExecution": t.boolean().optional(),
            "supportsPartialFulfillment": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSupportedClientOpSupportedExecutionIn"])
    types["AssistantApiSupportedClientOpSupportedExecutionOut"] = t.struct(
        {
            "supportsSynchronousExecution": t.boolean().optional(),
            "supportsPartialFulfillment": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedClientOpSupportedExecutionOut"])
    types["RepositoryWebrefUniversalNgramDataIn"] = t.struct(
        {"idf": t.number().optional(), "pluralProb": t.number().optional()}
    ).named(renames["RepositoryWebrefUniversalNgramDataIn"])
    types["RepositoryWebrefUniversalNgramDataOut"] = t.struct(
        {
            "idf": t.number().optional(),
            "pluralProb": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefUniversalNgramDataOut"])
    types["NlpSemanticParsingModelsMediaMusicPlaylistIn"] = t.struct(
        {
            "isAnnotatedFromText": t.boolean().optional(),
            "longtailMood": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "special": t.string(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]).optional(),
            "normalizedText": t.string().optional(),
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicPlaylistIn"])
    types["NlpSemanticParsingModelsMediaMusicPlaylistOut"] = t.struct(
        {
            "isAnnotatedFromText": t.boolean().optional(),
            "longtailMood": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "special": t.string(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]).optional(),
            "normalizedText": t.string().optional(),
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicPlaylistOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataIn"
    ] = t.struct(
        {
            "iconUrls": t.array(t.string()).optional(),
            "characterTags": t.array(t.string()).optional(),
            "agentIds": t.array(t.string()).optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataIn"
        ]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataOut"
    ] = t.struct(
        {
            "iconUrls": t.array(t.string()).optional(),
            "characterTags": t.array(t.string()).optional(),
            "agentIds": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataOut"
        ]
    )
    types["AppsPeopleOzExternalMergedpeopleapiPointSpecIn"] = t.struct(
        {
            "pointSource": t.string(),
            "point": t.proxy(renames["GeostorePointProtoIn"]),
            "bounds": t.proxy(renames["GeostoreRectProtoIn"]),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPointSpecIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPointSpecOut"] = t.struct(
        {
            "pointSource": t.string(),
            "point": t.proxy(renames["GeostorePointProtoOut"]),
            "bounds": t.proxy(renames["GeostoreRectProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPointSpecOut"])
    types["AssistantGroundingRankerDeviceContactAffinityFeaturesIn"] = t.struct(
        {
            "aggregateAffinity": t.number(),
            "callAffinity": t.number(),
            "messageAffinity": t.number(),
        }
    ).named(renames["AssistantGroundingRankerDeviceContactAffinityFeaturesIn"])
    types["AssistantGroundingRankerDeviceContactAffinityFeaturesOut"] = t.struct(
        {
            "aggregateAffinity": t.number(),
            "callAffinity": t.number(),
            "messageAffinity": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerDeviceContactAffinityFeaturesOut"])
    types["PostalAddressIn"] = t.struct(
        {
            "administrativeAreaName": t.string().optional(),
            "sortingCode": t.string().optional(),
            "recipientName": t.string().optional(),
            "postalCodeNumberExtension": t.string().optional(),
            "postBoxNumber": t.string().optional(),
            "countryNameCode": t.string().optional(),
            "addressLine": t.array(t.string()).optional(),
            "dependentLocalityName": t.string().optional(),
            "subAdministrativeAreaName": t.string().optional(),
            "languageCode": t.string().optional(),
            "dependentThoroughfareName": t.string().optional(),
            "thoroughfareNumber": t.string().optional(),
            "localityName": t.string().optional(),
            "countryName": t.string().optional(),
            "thoroughfareName": t.string().optional(),
            "firmName": t.string().optional(),
            "premiseName": t.string().optional(),
            "postalCodeNumber": t.string().optional(),
            "isDisputed": t.boolean(),
            "subPremiseName": t.string().optional(),
        }
    ).named(renames["PostalAddressIn"])
    types["PostalAddressOut"] = t.struct(
        {
            "administrativeAreaName": t.string().optional(),
            "sortingCode": t.string().optional(),
            "recipientName": t.string().optional(),
            "postalCodeNumberExtension": t.string().optional(),
            "postBoxNumber": t.string().optional(),
            "countryNameCode": t.string().optional(),
            "addressLine": t.array(t.string()).optional(),
            "dependentLocalityName": t.string().optional(),
            "subAdministrativeAreaName": t.string().optional(),
            "languageCode": t.string().optional(),
            "dependentThoroughfareName": t.string().optional(),
            "thoroughfareNumber": t.string().optional(),
            "localityName": t.string().optional(),
            "countryName": t.string().optional(),
            "thoroughfareName": t.string().optional(),
            "firmName": t.string().optional(),
            "premiseName": t.string().optional(),
            "postalCodeNumber": t.string().optional(),
            "isDisputed": t.boolean(),
            "subPremiseName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PostalAddressOut"])
    types["RichsnippetsDataObjectAttributeIn"] = t.struct(
        {
            "idata": t.string().optional(),
            "cdata": t.string(),
            "subobject": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "value": t.string().optional(),
            "name": t.string(),
            "tokenize": t.boolean().optional(),
        }
    ).named(renames["RichsnippetsDataObjectAttributeIn"])
    types["RichsnippetsDataObjectAttributeOut"] = t.struct(
        {
            "idata": t.string().optional(),
            "cdata": t.string(),
            "subobject": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "value": t.string().optional(),
            "name": t.string(),
            "tokenize": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RichsnippetsDataObjectAttributeOut"])
    types["SocialGraphApiProtoContactPromptSettingsIn"] = t.struct(
        {"contactActiveState": t.string().optional()}
    ).named(renames["SocialGraphApiProtoContactPromptSettingsIn"])
    types["SocialGraphApiProtoContactPromptSettingsOut"] = t.struct(
        {
            "contactActiveState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactPromptSettingsOut"])
    types["VideoContentSearchVideoAnchorIn"] = t.struct(
        {
            "scoreInfo": t.proxy(
                renames["VideoContentSearchVideoAnchorScoreInfoIn"]
            ).optional(),
            "duration": t.string().optional(),
            "time": t.string().optional(),
            "mid": t.string().optional(),
            "thumbnailUrl": t.string().optional(),
            "isFiltered": t.boolean().optional(),
            "anchorScore": t.number().optional(),
            "namedEntity": t.array(
                t.proxy(renames["VideoContentSearchNamedEntityIn"])
            ).optional(),
            "labelScore": t.number().optional(),
            "contextText": t.string().optional(),
            "precisionScore": t.number().optional(),
            "destinationUrl": t.string().optional(),
            "anchorType": t.string().optional(),
            "isSafe": t.boolean().optional(),
            "starburstFeatures": t.proxy(
                renames["VideoContentSearchVisualFeaturesIn"]
            ).optional(),
            "tokenTimingInfo": t.array(
                t.proxy(renames["VideoContentSearchTokenTimingInfoIn"])
            ).optional(),
            "thumbnail": t.proxy(
                renames["VideoContentSearchAnchorThumbnailIn"]
            ).optional(),
            "isScutiBad": t.boolean().optional(),
            "entityScore": t.number().optional(),
            "filterReason": t.array(t.string()).optional(),
            "label": t.string().optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorIn"])
    types["VideoContentSearchVideoAnchorOut"] = t.struct(
        {
            "scoreInfo": t.proxy(
                renames["VideoContentSearchVideoAnchorScoreInfoOut"]
            ).optional(),
            "duration": t.string().optional(),
            "time": t.string().optional(),
            "mid": t.string().optional(),
            "thumbnailUrl": t.string().optional(),
            "isFiltered": t.boolean().optional(),
            "anchorScore": t.number().optional(),
            "namedEntity": t.array(
                t.proxy(renames["VideoContentSearchNamedEntityOut"])
            ).optional(),
            "labelScore": t.number().optional(),
            "contextText": t.string().optional(),
            "precisionScore": t.number().optional(),
            "destinationUrl": t.string().optional(),
            "anchorType": t.string().optional(),
            "isSafe": t.boolean().optional(),
            "starburstFeatures": t.proxy(
                renames["VideoContentSearchVisualFeaturesOut"]
            ).optional(),
            "tokenTimingInfo": t.array(
                t.proxy(renames["VideoContentSearchTokenTimingInfoOut"])
            ).optional(),
            "thumbnail": t.proxy(
                renames["VideoContentSearchAnchorThumbnailOut"]
            ).optional(),
            "isScutiBad": t.boolean().optional(),
            "entityScore": t.number().optional(),
            "filterReason": t.array(t.string()).optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorOut"])
    types["AssistantApiSettingsHotwordThresholdAdjustmentFactorIn"] = t.struct(
        {"isValid": t.boolean().optional(), "value": t.integer()}
    ).named(renames["AssistantApiSettingsHotwordThresholdAdjustmentFactorIn"])
    types["AssistantApiSettingsHotwordThresholdAdjustmentFactorOut"] = t.struct(
        {
            "isValid": t.boolean().optional(),
            "value": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHotwordThresholdAdjustmentFactorOut"])
    types["KnowledgeAnswersIntentQueryFunctionCallIn"] = t.struct(
        {
            "enabledRemodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingControlIn"]
            ).optional(),
            "catalogVersion": t.string().optional(),
            "unexplainedTokens": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokensIn"])
            ).optional(),
            "sensitivity": t.proxy(
                renames["KnowledgeAnswersSensitivitySensitivityIn"]
            ).optional(),
            "ignoredTokens": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokensIn"])
            ).optional(),
            "name": t.string().optional(),
            "key": t.proxy(renames["KnowledgeAnswersMeaningSchemaKeyIn"]).optional(),
            "modifiers": t.proxy(
                renames["KnowledgeAnswersIntentModifiersIn"]
            ).optional(),
            "marker": t.proxy(renames["KnowledgeAnswersMarkerIn"]).optional(),
            "argument": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentIn"])
            ).optional(),
            "contextualSensitivity": t.array(
                t.proxy(renames["KnowledgeAnswersSensitivitySensitivityIn"])
            ).optional(),
            "signals": t.proxy(
                renames["KnowledgeAnswersIntentQueryFunctionCallSignalsIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryFunctionCallIn"])
    types["KnowledgeAnswersIntentQueryFunctionCallOut"] = t.struct(
        {
            "enabledRemodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingControlOut"]
            ).optional(),
            "catalogVersion": t.string().optional(),
            "unexplainedTokens": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokensOut"])
            ).optional(),
            "sensitivity": t.proxy(
                renames["KnowledgeAnswersSensitivitySensitivityOut"]
            ).optional(),
            "ignoredTokens": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokensOut"])
            ).optional(),
            "name": t.string().optional(),
            "key": t.proxy(renames["KnowledgeAnswersMeaningSchemaKeyOut"]).optional(),
            "modifiers": t.proxy(
                renames["KnowledgeAnswersIntentModifiersOut"]
            ).optional(),
            "marker": t.proxy(renames["KnowledgeAnswersMarkerOut"]).optional(),
            "argument": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentOut"])
            ).optional(),
            "contextualSensitivity": t.array(
                t.proxy(renames["KnowledgeAnswersSensitivitySensitivityOut"])
            ).optional(),
            "signals": t.proxy(
                renames["KnowledgeAnswersIntentQueryFunctionCallSignalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryFunctionCallOut"])
    types["AssistantLogsLumosProcessorInfoIn"] = t.struct(
        {
            "devicesBeforeRun": t.integer().optional(),
            "processorName": t.string().optional(),
            "devicesAfterRun": t.integer().optional(),
        }
    ).named(renames["AssistantLogsLumosProcessorInfoIn"])
    types["AssistantLogsLumosProcessorInfoOut"] = t.struct(
        {
            "devicesBeforeRun": t.integer().optional(),
            "processorName": t.string().optional(),
            "devicesAfterRun": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsLumosProcessorInfoOut"])
    types["AssistantApiSettingsDeviceLogsOptInIn"] = t.struct(
        {"optInEnabled": t.boolean().optional()}
    ).named(renames["AssistantApiSettingsDeviceLogsOptInIn"])
    types["AssistantApiSettingsDeviceLogsOptInOut"] = t.struct(
        {
            "optInEnabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceLogsOptInOut"])
    types["VideoAudioStreamIn"] = t.struct(
        {
            "sampleRate": t.string().optional(),
            "lengthSec": t.number().optional(),
            "codecId": t.integer().optional(),
            "loudness1770Lkfs": t.number(),
            "channels": t.integer().optional(),
            "bitrate": t.string().optional(),
            "contentType": t.string().optional(),
            "streamIndex": t.string().optional(),
            "language": t.string().optional(),
        }
    ).named(renames["VideoAudioStreamIn"])
    types["VideoAudioStreamOut"] = t.struct(
        {
            "sampleRate": t.string().optional(),
            "lengthSec": t.number().optional(),
            "codecId": t.integer().optional(),
            "loudness1770Lkfs": t.number(),
            "channels": t.integer().optional(),
            "bitrate": t.string().optional(),
            "contentType": t.string().optional(),
            "streamIndex": t.string().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoAudioStreamOut"])
    types["NlpSemanticParsingModelsMediaFrequencyIn"] = t.struct(
        {"band": t.string().optional(), "value": t.number().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaFrequencyIn"])
    types["NlpSemanticParsingModelsMediaFrequencyOut"] = t.struct(
        {
            "band": t.string().optional(),
            "value": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaFrequencyOut"])
    types["AssistantApiCoreTypesDeviceIdIn"] = t.struct(
        {
            "opaIosDeviceId": t.string().optional(),
            "deviceType": t.string().optional(),
            "deviceConfig": t.proxy(
                renames["AssistantApiCoreTypesDeviceConfigIn"]
            ).optional(),
            "canonicalDeviceId": t.string().optional(),
            "connectedDockId": t.string().optional(),
            "castDeviceId": t.string().optional(),
            "alloDeviceId": t.string().optional(),
            "multiHotwordArbitrationDeviceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "clientInstanceId": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "quartzDeviceId": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesDeviceIdIn"])
    types["AssistantApiCoreTypesDeviceIdOut"] = t.struct(
        {
            "opaIosDeviceId": t.string().optional(),
            "deviceType": t.string().optional(),
            "deviceConfig": t.proxy(
                renames["AssistantApiCoreTypesDeviceConfigOut"]
            ).optional(),
            "canonicalDeviceId": t.string().optional(),
            "connectedDockId": t.string().optional(),
            "castDeviceId": t.string().optional(),
            "alloDeviceId": t.string().optional(),
            "multiHotwordArbitrationDeviceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "clientInstanceId": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "quartzDeviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesDeviceIdOut"])
    types["AppsPeopleOzExternalMergedpeopleapiProductMetadataIn"] = t.struct(
        {"productSource": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProductMetadataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiProductMetadataOut"] = t.struct(
        {
            "productSource": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProductMetadataOut"])
    types["KnowledgeAnswersOpaqueProductivityListItemTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueProductivityListItemTypeIn"])
    types["KnowledgeAnswersOpaqueProductivityListItemTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueProductivityListItemTypeOut"])
    types["ImageSafesearchContentOffensiveSymbolDetectionIn"] = t.struct(
        {
            "matches": t.array(
                t.proxy(renames["ImageSafesearchContentOffensiveSymbolMatchIn"])
            )
        }
    ).named(renames["ImageSafesearchContentOffensiveSymbolDetectionIn"])
    types["ImageSafesearchContentOffensiveSymbolDetectionOut"] = t.struct(
        {
            "matches": t.array(
                t.proxy(renames["ImageSafesearchContentOffensiveSymbolMatchOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSafesearchContentOffensiveSymbolDetectionOut"])
    types["ImageMonetizationFeaturedImagePropertiesIn"] = t.struct(
        {"inspirationScore": t.number().optional()}
    ).named(renames["ImageMonetizationFeaturedImagePropertiesIn"])
    types["ImageMonetizationFeaturedImagePropertiesOut"] = t.struct(
        {
            "inspirationScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageMonetizationFeaturedImagePropertiesOut"])
    types["AssistantApiSettingsHospitalityModeIn"] = t.struct(
        {
            "verbalResetSupported": t.boolean().optional(),
            "welcomeRequest": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "dialogTtlOverrideMicros": t.string().optional(),
            "lastDeviceClear": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "lastWelcomed": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "cardSettings": t.proxy(
                renames["AssistantApiSettingsHospitalityCardSettingsIn"]
            ),
            "branding": t.proxy(
                renames["AssistantApiSettingsHospitalityModeBrandingIn"]
            ),
            "enterpriseId": t.string().optional(),
            "promotedLanguages": t.array(t.string()).optional(),
            "manualResetRequired": t.boolean().optional(),
            "aogInvocationPhrase": t.string().optional(),
            "lastModifiedTimestamp": t.proxy(
                renames["AssistantApiTimestampIn"]
            ).optional(),
            "aogContextId": t.array(t.string()).optional(),
            "type": t.string(),
            "hospitalityModeEnabled": t.boolean().optional(),
            "deviceClearRequest": t.proxy(
                renames["AssistantApiTimestampIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityModeIn"])
    types["AssistantApiSettingsHospitalityModeOut"] = t.struct(
        {
            "verbalResetSupported": t.boolean().optional(),
            "welcomeRequest": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "dialogTtlOverrideMicros": t.string().optional(),
            "lastDeviceClear": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "lastWelcomed": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "cardSettings": t.proxy(
                renames["AssistantApiSettingsHospitalityCardSettingsOut"]
            ),
            "branding": t.proxy(
                renames["AssistantApiSettingsHospitalityModeBrandingOut"]
            ),
            "enterpriseId": t.string().optional(),
            "promotedLanguages": t.array(t.string()).optional(),
            "manualResetRequired": t.boolean().optional(),
            "aogInvocationPhrase": t.string().optional(),
            "lastModifiedTimestamp": t.proxy(
                renames["AssistantApiTimestampOut"]
            ).optional(),
            "aogContextId": t.array(t.string()).optional(),
            "type": t.string(),
            "hospitalityModeEnabled": t.boolean().optional(),
            "deviceClearRequest": t.proxy(
                renames["AssistantApiTimestampOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityModeOut"])
    types["NlpSemanticParsingLocalAmenitiesIn"] = t.struct(
        {"type": t.array(t.string()).optional()}
    ).named(renames["NlpSemanticParsingLocalAmenitiesIn"])
    types["NlpSemanticParsingLocalAmenitiesOut"] = t.struct(
        {
            "type": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalAmenitiesOut"])
    types["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoIn"] = t.struct(
        {
            "uploaderChannelId": t.string().optional(),
            "clickTrackingId": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoIn"])
    types["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoOut"] = t.struct(
        {
            "uploaderChannelId": t.string().optional(),
            "clickTrackingId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaYouTubeDeeplinkInfoOut"])
    types["AnchorsIn"] = t.struct(
        {
            "redundantAnchorsDropped": t.string().optional(),
            "supplementalAnchorsDropped": t.string().optional(),
            "homepageAnchorsDropped": t.string().optional(),
            "targetDocid": t.string().optional(),
            "anchor": t.array(t.proxy(renames["AnchorsAnchorIn"])),
            "targetUrl": t.string().optional(),
            "redundantanchorinfo": t.array(
                t.proxy(renames["AnchorsRedundantAnchorInfoIn"])
            ),
            "nonlocalAnchorsDropped": t.string().optional(),
            "indexTier": t.integer().optional(),
            "localAnchorsDropped": t.string().optional(),
            "targetSite": t.string().optional(),
        }
    ).named(renames["AnchorsIn"])
    types["AnchorsOut"] = t.struct(
        {
            "redundantAnchorsDropped": t.string().optional(),
            "supplementalAnchorsDropped": t.string().optional(),
            "homepageAnchorsDropped": t.string().optional(),
            "targetDocid": t.string().optional(),
            "anchor": t.array(t.proxy(renames["AnchorsAnchorOut"])),
            "targetUrl": t.string().optional(),
            "redundantanchorinfo": t.array(
                t.proxy(renames["AnchorsRedundantAnchorInfoOut"])
            ),
            "nonlocalAnchorsDropped": t.string().optional(),
            "indexTier": t.integer().optional(),
            "localAnchorsDropped": t.string().optional(),
            "targetSite": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AnchorsOut"])
    types["GoogleCloudDocumentaiV1BoundingPolyIn"] = t.struct(
        {
            "normalizedVertices": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1NormalizedVertexIn"])
            ).optional(),
            "vertices": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1VertexIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1BoundingPolyIn"])
    types["GoogleCloudDocumentaiV1BoundingPolyOut"] = t.struct(
        {
            "normalizedVertices": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1NormalizedVertexOut"])
            ).optional(),
            "vertices": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1VertexOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1BoundingPolyOut"])
    types["KnowledgeAnswersBooleanTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersBooleanTypeIn"])
    types["KnowledgeAnswersBooleanTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersBooleanTypeOut"])
    types["NlpSciencelitTokenizedTextIn"] = t.struct(
        {"text": t.string(), "token": t.array(t.string())}
    ).named(renames["NlpSciencelitTokenizedTextIn"])
    types["NlpSciencelitTokenizedTextOut"] = t.struct(
        {
            "text": t.string(),
            "token": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitTokenizedTextOut"])
    types["SocialCommonSearchLinkDataIn"] = t.struct(
        {
            "queryBroadnessScore": t.number(),
            "mid": t.string().optional(),
            "kgEntityConfidence": t.number().optional(),
        }
    ).named(renames["SocialCommonSearchLinkDataIn"])
    types["SocialCommonSearchLinkDataOut"] = t.struct(
        {
            "queryBroadnessScore": t.number(),
            "mid": t.string().optional(),
            "kgEntityConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonSearchLinkDataOut"])
    types["CrowdingPerDocDataNewsClusterIn"] = t.struct(
        {
            "ClusterSize": t.integer().optional(),
            "ClusterTimeStamp": t.integer().optional(),
            "ClusterId": t.string().optional(),
        }
    ).named(renames["CrowdingPerDocDataNewsClusterIn"])
    types["CrowdingPerDocDataNewsClusterOut"] = t.struct(
        {
            "ClusterSize": t.integer().optional(),
            "ClusterTimeStamp": t.integer().optional(),
            "ClusterId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrowdingPerDocDataNewsClusterOut"])
    types["FatcatCompactRephilClustersIn"] = t.struct(
        {"cluster": t.array(t.proxy(renames["FatcatCompactRephilClustersClusterIn"]))}
    ).named(renames["FatcatCompactRephilClustersIn"])
    types["FatcatCompactRephilClustersOut"] = t.struct(
        {
            "cluster": t.array(
                t.proxy(renames["FatcatCompactRephilClustersClusterOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactRephilClustersOut"])
    types["AssistantVerticalsHomeautomationProtoActionProjectConfigIn"] = t.struct(
        {"contextId": t.string().optional()}
    ).named(renames["AssistantVerticalsHomeautomationProtoActionProjectConfigIn"])
    types["AssistantVerticalsHomeautomationProtoActionProjectConfigOut"] = t.struct(
        {
            "contextId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoActionProjectConfigOut"])
    types["GeostoreRoadSignComponentProtoIn"] = t.struct(
        {
            "majorPosition": t.integer().optional(),
            "text": t.proxy(renames["GeostoreNameProtoIn"]).optional(),
            "minorPosition": t.integer().optional(),
            "routeDirection": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "featureType": t.integer().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["GeostoreRoadSignComponentProtoIn"])
    types["GeostoreRoadSignComponentProtoOut"] = t.struct(
        {
            "majorPosition": t.integer().optional(),
            "text": t.proxy(renames["GeostoreNameProtoOut"]).optional(),
            "minorPosition": t.integer().optional(),
            "routeDirection": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "featureType": t.integer().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRoadSignComponentProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOtherKeywordIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "type": t.string().optional(),
            "value": t.string(),
            "formattedType": t.string().optional(),
            "source": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOtherKeywordIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOtherKeywordOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "type": t.string().optional(),
            "value": t.string(),
            "formattedType": t.string().optional(),
            "source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOtherKeywordOut"])
    types[
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerIn"
    ] = t.struct(
        {
            "eventTrigger": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoCommonEventTriggerIn"]
            ),
            "voiceTrigger": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerIn"]
            ),
        }
    ).named(
        renames[
            "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerIn"
        ]
    )
    types[
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerOut"
    ] = t.struct(
        {
            "eventTrigger": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoCommonEventTriggerOut"]
            ),
            "voiceTrigger": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerOut"
        ]
    )
    types["NlpSciencelitPubDateIn"] = t.struct(
        {"pubType": t.string().optional(), "dateStr": t.string()}
    ).named(renames["NlpSciencelitPubDateIn"])
    types["NlpSciencelitPubDateOut"] = t.struct(
        {
            "pubType": t.string().optional(),
            "dateStr": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitPubDateOut"])
    types[
        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupIn"
    ] = t.struct({"model": t.string(), "tokens": t.array(t.integer())}).named(
        renames[
            "ImageRepositoryShoppingProductInformationProductInformationTokenGroupIn"
        ]
    )
    types[
        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupOut"
    ] = t.struct(
        {
            "model": t.string(),
            "tokens": t.array(t.integer()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "ImageRepositoryShoppingProductInformationProductInformationTokenGroupOut"
        ]
    )
    types["AppsPeopleOzExternalMergedpeopleapiPosixAccountIn"] = t.struct(
        {
            "customerKey": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "accountId": t.string().optional(),
            "gecos": t.string().optional(),
            "fingerprint": t.string().optional(),
            "systemId": t.string().optional(),
            "homeDirectory": t.string().optional(),
            "gid": t.string().optional(),
            "accountType": t.string().optional(),
            "accountNamespace": t.string().optional(),
            "operatingSystemType": t.string().optional(),
            "shell": t.string().optional(),
            "username": t.string().optional(),
            "uid": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPosixAccountIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPosixAccountOut"] = t.struct(
        {
            "customerKey": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "accountId": t.string().optional(),
            "gecos": t.string().optional(),
            "fingerprint": t.string().optional(),
            "systemId": t.string().optional(),
            "homeDirectory": t.string().optional(),
            "gid": t.string().optional(),
            "accountType": t.string().optional(),
            "accountNamespace": t.string().optional(),
            "operatingSystemType": t.string().optional(),
            "shell": t.string().optional(),
            "username": t.string().optional(),
            "uid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPosixAccountOut"])
    types["NlpSemanticParsingLocalChainMemberConstraintIn"] = t.struct(
        {"chainIds": t.array(t.string()).optional()}
    ).named(renames["NlpSemanticParsingLocalChainMemberConstraintIn"])
    types["NlpSemanticParsingLocalChainMemberConstraintOut"] = t.struct(
        {
            "chainIds": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalChainMemberConstraintOut"])
    types["GoogleInternalCommunicationsInstantmessagingV1LocationHintIn"] = t.struct(
        {"format": t.string().optional(), "location": t.string().optional()}
    ).named(renames["GoogleInternalCommunicationsInstantmessagingV1LocationHintIn"])
    types["GoogleInternalCommunicationsInstantmessagingV1LocationHintOut"] = t.struct(
        {
            "format": t.string().optional(),
            "location": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalCommunicationsInstantmessagingV1LocationHintOut"])
    types["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesIn"] = t.struct(
        {
            "workingHours": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaWorkingHoursIn"]
            ).optional(),
            "nextPollTime": t.string().optional(),
            "availabilities": t.array(
                t.proxy(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilityIn"])
            ).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesIn"])
    types["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesOut"] = t.struct(
        {
            "workingHours": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaWorkingHoursOut"]
            ).optional(),
            "nextPollTime": t.string().optional(),
            "availabilities": t.array(
                t.proxy(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilityOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilitiesOut"])
    types["FaceIndexingIn"] = t.struct(
        {"mustangBytesVersion": t.integer(), "mustangBytes": t.string().optional()}
    ).named(renames["FaceIndexingIn"])
    types["FaceIndexingOut"] = t.struct(
        {
            "mustangBytesVersion": t.integer(),
            "mustangBytes": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FaceIndexingOut"])
    types["FreebaseIdIn"] = t.struct(
        {"mid": t.string().optional(), "id": t.string().optional()}
    ).named(renames["FreebaseIdIn"])
    types["FreebaseIdOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseIdOut"])
    types["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityIn"] = t.struct(
        {
            "lastKnownClientLocale": t.string().optional(),
            "lastParamsWriteTimestamp": t.string().optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityIn"])
    types["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityOut"] = t.struct(
        {
            "lastKnownClientLocale": t.string().optional(),
            "lastParamsWriteTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsIn"] = t.struct(
        {
            "photoUrl": t.string().optional(),
            "displayName": t.string().optional(),
            "personId": t.string(),
            "jobTitle": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsOut"] = t.struct(
        {
            "photoUrl": t.string().optional(),
            "displayName": t.string().optional(),
            "personId": t.string(),
            "jobTitle": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsOut"])
    types["AssistantDevicesPlatformProtoMediaPauseCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPauseCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaPauseCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPauseCapabilityOut"])
    types["RepositoryWebrefPreprocessingUrlMatchingMetadataIn"] = t.struct(
        {
            "source": t.array(
                t.proxy(renames["RepositoryWebrefPreprocessingUrlSourceInfoIn"])
            ).optional()
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlMatchingMetadataIn"])
    types["RepositoryWebrefPreprocessingUrlMatchingMetadataOut"] = t.struct(
        {
            "source": t.array(
                t.proxy(renames["RepositoryWebrefPreprocessingUrlSourceInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlMatchingMetadataOut"])
    types["SocialCommonFormattingIn"] = t.struct(
        {
            "underline": t.boolean(),
            "bold": t.boolean(),
            "highlight": t.boolean().optional(),
            "italics": t.boolean(),
            "strikethrough": t.boolean(),
            "style": t.string().optional(),
        }
    ).named(renames["SocialCommonFormattingIn"])
    types["SocialCommonFormattingOut"] = t.struct(
        {
            "underline": t.boolean(),
            "bold": t.boolean(),
            "highlight": t.boolean().optional(),
            "italics": t.boolean(),
            "strikethrough": t.boolean(),
            "style": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonFormattingOut"])
    types["EmbedsTransientDataIn"] = t.struct({"_": t.string().optional()}).named(
        renames["EmbedsTransientDataIn"]
    )
    types["EmbedsTransientDataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["EmbedsTransientDataOut"])
    types["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeIn"] = t.struct(
        {
            "barcode": t.proxy(renames["GoogleCloudDocumentaiV1BarcodeIn"]).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeIn"])
    types["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeOut"] = t.struct(
        {
            "barcode": t.proxy(renames["GoogleCloudDocumentaiV1BarcodeOut"]).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeOut"])
    types["CloudAiPlatformTenantresourceTenantResourceIn"] = t.struct(
        {
            "tenantProjectResources": t.array(
                t.proxy(renames["CloudAiPlatformTenantresourceTenantProjectResourceIn"])
            ).optional(),
            "p4ServiceAccounts": t.array(
                t.proxy(
                    renames["CloudAiPlatformTenantresourceServiceAccountIdentityIn"]
                )
            ).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantResourceIn"])
    types["CloudAiPlatformTenantresourceTenantResourceOut"] = t.struct(
        {
            "tenantProjectResources": t.array(
                t.proxy(
                    renames["CloudAiPlatformTenantresourceTenantProjectResourceOut"]
                )
            ).optional(),
            "p4ServiceAccounts": t.array(
                t.proxy(
                    renames["CloudAiPlatformTenantresourceServiceAccountIdentityOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantResourceOut"])
    types["AssistantApiOnDeviceSmartHomeCapabilitiesIn"] = t.struct(
        {"isOnDeviceSmartHomeSupported": t.boolean().optional()}
    ).named(renames["AssistantApiOnDeviceSmartHomeCapabilitiesIn"])
    types["AssistantApiOnDeviceSmartHomeCapabilitiesOut"] = t.struct(
        {
            "isOnDeviceSmartHomeSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiOnDeviceSmartHomeCapabilitiesOut"])
    types["SocialGraphApiProtoMonthlyWeekdayRecurrenceIn"] = t.struct(
        {"weekDayNumber": t.integer(), "weekDay": t.string().optional()}
    ).named(renames["SocialGraphApiProtoMonthlyWeekdayRecurrenceIn"])
    types["SocialGraphApiProtoMonthlyWeekdayRecurrenceOut"] = t.struct(
        {
            "weekDayNumber": t.integer(),
            "weekDay": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoMonthlyWeekdayRecurrenceOut"])
    types["SocialGraphApiProtoLimitedProfilePictureSettingsIn"] = t.struct(
        {"profilePictureOption": t.string()}
    ).named(renames["SocialGraphApiProtoLimitedProfilePictureSettingsIn"])
    types["SocialGraphApiProtoLimitedProfilePictureSettingsOut"] = t.struct(
        {
            "profilePictureOption": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoLimitedProfilePictureSettingsOut"])
    types["QualityTimebasedLastSignificantUpdateIn"] = t.struct(
        {
            "adjustmentInfo": t.proxy(
                renames["QualityTimebasedLastSignificantUpdateAdjustmentsIn"]
            ).optional(),
            "source": t.string().optional(),
            "date": t.string().optional(),
        }
    ).named(renames["QualityTimebasedLastSignificantUpdateIn"])
    types["QualityTimebasedLastSignificantUpdateOut"] = t.struct(
        {
            "adjustmentInfo": t.proxy(
                renames["QualityTimebasedLastSignificantUpdateAdjustmentsOut"]
            ).optional(),
            "source": t.string().optional(),
            "date": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedLastSignificantUpdateOut"])
    types["AssistantApiCoreTypesCalendarEventAttendeeIn"] = t.struct(
        {
            "id": t.string().optional(),
            "displayName": t.string().optional(),
            "email": t.string().optional(),
            "self": t.boolean().optional(),
            "responseStatus": t.string().optional(),
            "organizer": t.boolean().optional(),
            "givenName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventAttendeeIn"])
    types["AssistantApiCoreTypesCalendarEventAttendeeOut"] = t.struct(
        {
            "id": t.string().optional(),
            "displayName": t.string().optional(),
            "email": t.string().optional(),
            "self": t.boolean().optional(),
            "responseStatus": t.string().optional(),
            "organizer": t.boolean().optional(),
            "givenName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventAttendeeOut"])
    types["DrishtiVesperThumbnailIn"] = t.struct(
        {
            "id": t.string().optional(),
            "encodedImageString": t.string().optional(),
            "encodedThumbnails": t.array(
                t.proxy(renames["DrishtiVesperEncodedThumbnailIn"])
            ).optional(),
            "encodedImageStringSmall": t.string().optional(),
            "ocrText": t.string().optional(),
            "qualityScores": t.array(
                t.proxy(renames["DrishtiVesperThumbnailQualityScoreIn"])
            ).optional(),
            "userReportedThumbnails": t.array(
                t.proxy(renames["DrishtiVesperUserReportUserReportedThumbnailIn"])
            ).optional(),
            "version": t.integer().optional(),
            "timestampMs": t.integer().optional(),
            "denseFeatures": t.array(t.number()).optional(),
            "type": t.string().optional(),
            "thumbnailerModelVersion": t.string().optional(),
            "userReportedThumbnail": t.proxy(
                renames["DrishtiVesperUserReportUserReportedThumbnailIn"]
            ),
            "shouldUpdateDefaultThumbnail": t.boolean().optional(),
        }
    ).named(renames["DrishtiVesperThumbnailIn"])
    types["DrishtiVesperThumbnailOut"] = t.struct(
        {
            "id": t.string().optional(),
            "encodedImageString": t.string().optional(),
            "encodedThumbnails": t.array(
                t.proxy(renames["DrishtiVesperEncodedThumbnailOut"])
            ).optional(),
            "encodedImageStringSmall": t.string().optional(),
            "ocrText": t.string().optional(),
            "qualityScores": t.array(
                t.proxy(renames["DrishtiVesperThumbnailQualityScoreOut"])
            ).optional(),
            "userReportedThumbnails": t.array(
                t.proxy(renames["DrishtiVesperUserReportUserReportedThumbnailOut"])
            ).optional(),
            "version": t.integer().optional(),
            "timestampMs": t.integer().optional(),
            "denseFeatures": t.array(t.number()).optional(),
            "type": t.string().optional(),
            "thumbnailerModelVersion": t.string().optional(),
            "userReportedThumbnail": t.proxy(
                renames["DrishtiVesperUserReportUserReportedThumbnailOut"]
            ),
            "shouldUpdateDefaultThumbnail": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperThumbnailOut"])
    types["NlpSemanticParsingQRefAnnotationEntityRelationshipIn"] = t.struct(
        {
            "implies": t.boolean().optional(),
            "impliedBy": t.boolean().optional(),
            "entityIndex": t.integer().optional(),
            "linkPropertyName": t.array(t.string()).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationEntityRelationshipIn"])
    types["NlpSemanticParsingQRefAnnotationEntityRelationshipOut"] = t.struct(
        {
            "implies": t.boolean().optional(),
            "impliedBy": t.boolean().optional(),
            "entityIndex": t.integer().optional(),
            "linkPropertyName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationEntityRelationshipOut"])
    types["GeostoreLandmarkReferenceProtoIn"] = t.struct(
        {
            "landmark": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "travelMode": t.array(t.string()).optional(),
            "featureType": t.integer().optional(),
        }
    ).named(renames["GeostoreLandmarkReferenceProtoIn"])
    types["GeostoreLandmarkReferenceProtoOut"] = t.struct(
        {
            "landmark": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "travelMode": t.array(t.string()).optional(),
            "featureType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLandmarkReferenceProtoOut"])
    types["SocialGraphApiProtoThirdPartyInfoIn"] = t.struct(
        {"projectNumber": t.string().optional(), "clientName": t.string().optional()}
    ).named(renames["SocialGraphApiProtoThirdPartyInfoIn"])
    types["SocialGraphApiProtoThirdPartyInfoOut"] = t.struct(
        {
            "projectNumber": t.string().optional(),
            "clientName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoThirdPartyInfoOut"])
    types["AssistantApiCameraCapabilitiesIn"] = t.struct(
        {
            "hasCamera": t.boolean().optional(),
            "faceMatchCapable": t.boolean().optional(),
        }
    ).named(renames["AssistantApiCameraCapabilitiesIn"])
    types["AssistantApiCameraCapabilitiesOut"] = t.struct(
        {
            "hasCamera": t.boolean().optional(),
            "faceMatchCapable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCameraCapabilitiesOut"])
    types["QualitySitemapCoClickTargetDocCoClickByLocaleIn"] = t.struct(
        {
            "coClicksParent": t.number(),
            "locale": t.string(),
            "coClicks": t.number(),
            "coClicksCapped": t.number(),
        }
    ).named(renames["QualitySitemapCoClickTargetDocCoClickByLocaleIn"])
    types["QualitySitemapCoClickTargetDocCoClickByLocaleOut"] = t.struct(
        {
            "coClicksParent": t.number(),
            "locale": t.string(),
            "coClicks": t.number(),
            "coClicksCapped": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapCoClickTargetDocCoClickByLocaleOut"])
    types["QualityAuthorityTopicEmbeddingsVersionedItemIn"] = t.struct(
        {
            "versionId": t.integer(),
            "siteRadius": t.number().optional(),
            "siteEmbedding": t.string().optional(),
            "pageEmbedding": t.string(),
            "siteFocusScore": t.number().optional(),
        }
    ).named(renames["QualityAuthorityTopicEmbeddingsVersionedItemIn"])
    types["QualityAuthorityTopicEmbeddingsVersionedItemOut"] = t.struct(
        {
            "versionId": t.integer(),
            "siteRadius": t.number().optional(),
            "siteEmbedding": t.string().optional(),
            "pageEmbedding": t.string(),
            "siteFocusScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityAuthorityTopicEmbeddingsVersionedItemOut"])
    types["NlpMeaningSemanticTypeNameMeaningRemodelingsIn"] = t.struct(
        {
            "name": t.string().optional(),
            "remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]),
        }
    ).named(renames["NlpMeaningSemanticTypeNameMeaningRemodelingsIn"])
    types["NlpMeaningSemanticTypeNameMeaningRemodelingsOut"] = t.struct(
        {
            "name": t.string().optional(),
            "remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpMeaningSemanticTypeNameMeaningRemodelingsOut"])
    types["RepositoryAnnotationsGeoTopicalityIn"] = t.struct(
        {
            "geotopics": t.array(
                t.proxy(renames["RepositoryAnnotationsGeoTopicIn"])
            ).optional()
        }
    ).named(renames["RepositoryAnnotationsGeoTopicalityIn"])
    types["RepositoryAnnotationsGeoTopicalityOut"] = t.struct(
        {
            "geotopics": t.array(
                t.proxy(renames["RepositoryAnnotationsGeoTopicOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsGeoTopicalityOut"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentMetadataIn"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentMetadataOut"])
    types["SecurityCredentialsEmailOwnerProtoIn"] = t.struct(
        {"email": t.string()}
    ).named(renames["SecurityCredentialsEmailOwnerProtoIn"])
    types["SecurityCredentialsEmailOwnerProtoOut"] = t.struct(
        {"email": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsEmailOwnerProtoOut"])
    types["NlpSemanticParsingModelsMediaPodcastInfoIn"] = t.struct(
        {
            "title": t.string(),
            "podcastRecsFeatures": t.proxy(
                renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesIn"]
            ).optional(),
            "feedUrl": t.string().optional(),
            "clusterId": t.string().optional(),
            "episodeGuid": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPodcastInfoIn"])
    types["NlpSemanticParsingModelsMediaPodcastInfoOut"] = t.struct(
        {
            "title": t.string(),
            "podcastRecsFeatures": t.proxy(
                renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesOut"]
            ).optional(),
            "feedUrl": t.string().optional(),
            "clusterId": t.string().optional(),
            "episodeGuid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPodcastInfoOut"])
    types["RepositoryWebrefRefconMentionSpansIn"] = t.struct(
        {
            "token": t.array(t.string()).optional(),
            "segment": t.array(t.string()).optional(),
            "shortToken": t.array(t.integer()).optional(),
        }
    ).named(renames["RepositoryWebrefRefconMentionSpansIn"])
    types["RepositoryWebrefRefconMentionSpansOut"] = t.struct(
        {
            "token": t.array(t.string()).optional(),
            "segment": t.array(t.string()).optional(),
            "shortToken": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRefconMentionSpansOut"])
    types["GoogleCloudContentwarehouseV1DocumentIn"] = t.struct(
        {
            "contentCategory": t.string().optional(),
            "displayName": t.string(),
            "textExtractionEnabled": t.boolean().optional(),
            "rawDocumentFileType": t.string().optional(),
            "title": t.string().optional(),
            "plainText": t.string().optional(),
            "properties": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyIn"])
            ).optional(),
            "textExtractionDisabled": t.boolean().optional(),
            "name": t.string().optional(),
            "updater": t.string().optional(),
            "inlineRawDocument": t.string().optional(),
            "documentSchemaName": t.string().optional(),
            "referenceId": t.string().optional(),
            "displayUri": t.string().optional(),
            "creator": t.string().optional(),
            "rawDocumentPath": t.string().optional(),
            "cloudAiDocument": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentIn"])
    types["GoogleCloudContentwarehouseV1DocumentOut"] = t.struct(
        {
            "contentCategory": t.string().optional(),
            "displayName": t.string(),
            "updateTime": t.string().optional(),
            "textExtractionEnabled": t.boolean().optional(),
            "rawDocumentFileType": t.string().optional(),
            "title": t.string().optional(),
            "plainText": t.string().optional(),
            "createTime": t.string().optional(),
            "properties": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyOut"])
            ).optional(),
            "textExtractionDisabled": t.boolean().optional(),
            "name": t.string().optional(),
            "updater": t.string().optional(),
            "inlineRawDocument": t.string().optional(),
            "documentSchemaName": t.string().optional(),
            "referenceId": t.string().optional(),
            "dispositionTime": t.string().optional(),
            "displayUri": t.string().optional(),
            "creator": t.string().optional(),
            "rawDocumentPath": t.string().optional(),
            "cloudAiDocument": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentOut"])
    types["AssistantApiFluidActionsSupportIn"] = t.struct(
        {"stateSyncMethod": t.string().optional()}
    ).named(renames["AssistantApiFluidActionsSupportIn"])
    types["AssistantApiFluidActionsSupportOut"] = t.struct(
        {
            "stateSyncMethod": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiFluidActionsSupportOut"])
    types["GeostoreEstablishmentProtoIn"] = t.struct(
        {
            "serviceArea": t.proxy(renames["GeostoreServiceAreaProtoIn"]),
            "priceInfo": t.proxy(renames["GeostorePriceInfoProtoIn"]).optional(),
            "openingHours": t.proxy(renames["GeostoreOpeningHoursProtoIn"]).optional(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoIn"]).optional(),
            "bizbuilderReference": t.proxy(
                renames["GeostoreBizBuilderReferenceProtoIn"]
            ).optional(),
            "type": t.string().optional(),
            "telephone": t.array(
                t.proxy(renames["GeostoreTelephoneProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreEstablishmentProtoIn"])
    types["GeostoreEstablishmentProtoOut"] = t.struct(
        {
            "serviceArea": t.proxy(renames["GeostoreServiceAreaProtoOut"]),
            "priceInfo": t.proxy(renames["GeostorePriceInfoProtoOut"]).optional(),
            "openingHours": t.proxy(renames["GeostoreOpeningHoursProtoOut"]).optional(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoOut"]).optional(),
            "bizbuilderReference": t.proxy(
                renames["GeostoreBizBuilderReferenceProtoOut"]
            ).optional(),
            "type": t.string().optional(),
            "telephone": t.array(
                t.proxy(renames["GeostoreTelephoneProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreEstablishmentProtoOut"])
    types["NlpSemanticParsingDatetimeEventIn"] = t.struct(
        {
            "holiday": t.string(),
            "type": t.string(),
            "sunEvent": t.string(),
            "moonEvent": t.proxy(renames["NlpSemanticParsingDatetimeMoonEventInfoIn"]),
        }
    ).named(renames["NlpSemanticParsingDatetimeEventIn"])
    types["NlpSemanticParsingDatetimeEventOut"] = t.struct(
        {
            "holiday": t.string(),
            "type": t.string(),
            "sunEvent": t.string(),
            "moonEvent": t.proxy(renames["NlpSemanticParsingDatetimeMoonEventInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeEventOut"])
    types["LogsSemanticInterpretationIntentQuerySupportTransferRuleIn"] = t.struct(
        {
            "targetCollection": t.string(),
            "allowWildcardIntents": t.boolean(),
            "userLanguage": t.string(),
            "domain": t.string(),
            "userCountry": t.string(),
            "supportShare": t.boolean(),
            "mentionsOnly": t.boolean(),
            "isReverseLink": t.boolean(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQuerySupportTransferRuleIn"])
    types["LogsSemanticInterpretationIntentQuerySupportTransferRuleOut"] = t.struct(
        {
            "targetCollection": t.string(),
            "allowWildcardIntents": t.boolean(),
            "userLanguage": t.string(),
            "domain": t.string(),
            "userCountry": t.string(),
            "supportShare": t.boolean(),
            "mentionsOnly": t.boolean(),
            "isReverseLink": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQuerySupportTransferRuleOut"])
    types["VideoFileSphericalMetadataMeshProjectionIn"] = t.struct(
        {
            "content": t.string(),
            "type": t.string().optional(),
            "bounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsIn"]
            ).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataMeshProjectionIn"])
    types["VideoFileSphericalMetadataMeshProjectionOut"] = t.struct(
        {
            "content": t.string(),
            "type": t.string().optional(),
            "bounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataMeshProjectionOut"])
    types["SdrScrollToIn"] = t.struct(
        {
            "prefix": t.string().optional(),
            "textStart": t.string().optional(),
            "onpageMatches": t.proxy(renames["SdrScrollToOnPageMatchesIn"]),
            "suffix": t.string().optional(),
            "textEnd": t.string().optional(),
        }
    ).named(renames["SdrScrollToIn"])
    types["SdrScrollToOut"] = t.struct(
        {
            "prefix": t.string().optional(),
            "textStart": t.string().optional(),
            "onpageMatches": t.proxy(renames["SdrScrollToOnPageMatchesOut"]),
            "suffix": t.string().optional(),
            "textEnd": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrScrollToOut"])
    types["AppsPeopleOzExternalMergedpeopleapiProfileUrlIn"] = t.struct(
        {
            "url": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProfileUrlIn"])
    types["AppsPeopleOzExternalMergedpeopleapiProfileUrlOut"] = t.struct(
        {
            "url": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProfileUrlOut"])
    types["EmbedsProvenanceIn"] = t.struct(
        {
            "retrievedTimestampMsec": t.string().optional(),
            "retrievedUrl": t.string().optional(),
            "inputUrl": t.string().optional(),
            "itemtype": t.array(t.string()).optional(),
            "canonicalUrl": t.string().optional(),
            "annotationBlob": t.string().optional(),
        }
    ).named(renames["EmbedsProvenanceIn"])
    types["EmbedsProvenanceOut"] = t.struct(
        {
            "retrievedTimestampMsec": t.string().optional(),
            "retrievedUrl": t.string().optional(),
            "inputUrl": t.string().optional(),
            "itemtype": t.array(t.string()).optional(),
            "canonicalUrl": t.string().optional(),
            "annotationBlob": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["EmbedsProvenanceOut"])
    types["ResearchScamCoscamEasyDisjunctionIn"] = t.struct(
        {
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupIn"])
            ).optional(),
            "isPositive": t.boolean().optional(),
        }
    ).named(renames["ResearchScamCoscamEasyDisjunctionIn"])
    types["ResearchScamCoscamEasyDisjunctionOut"] = t.struct(
        {
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupOut"])
            ).optional(),
            "isPositive": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamEasyDisjunctionOut"])
    types["AssistantLogsCommunicationPersonalContactDataLogIn"] = t.struct(
        {
            "gaiaId": t.string().optional(),
            "matchedStarlightLookupName": t.array(t.string()).optional(),
            "originalQueryName": t.string().optional(),
            "phone": t.array(
                t.proxy(renames["AssistantLogsCommunicationPhoneLogIn"])
            ).optional(),
            "source": t.string().optional(),
            "recognitionAlternateSource": t.string().optional(),
            "accountProvenance": t.proxy(
                renames["AssistantLogsCommunicationGoogleAccountProvenanceIn"]
            ).optional(),
            "emailIdCount": t.integer().optional(),
            "conceptId": t.string().optional(),
            "fuzzyNgramMatch": t.array(
                t.proxy(renames["AssistantLogsCommunicationFuzzyNgramMatchLogIn"])
            ).optional(),
            "systemContactGroupId": t.array(t.integer()).optional(),
            "selectedPhone": t.proxy(
                renames["AssistantLogsCommunicationPhoneLogIn"]
            ).optional(),
            "pkgReferenceType": t.string().optional(),
            "isContactFromSecondaryAccount": t.boolean().optional(),
            "recognitionAlternateScore": t.number().optional(),
            "isShared": t.boolean().optional(),
            "isTransliteratedMatch": t.boolean().optional(),
            "nameMatchedContactIndex": t.array(t.integer()).optional(),
            "metadata": t.proxy(
                renames["AssistantLogsCommunicationPersonMetadataLogIn"]
            ).optional(),
            "deviceContactAttributes": t.array(t.integer()).optional(),
            "phoneNumberCount": t.integer().optional(),
            "isVisibleToGuestsRelationship": t.boolean().optional(),
            "isVanityContact": t.boolean().optional(),
            "matchedRecognitionAlternateName": t.string().optional(),
            "shortcutContactInfo": t.proxy(
                renames["MajelContactInformationShortcutInformationIn"]
            ).optional(),
            "matchedNameType": t.string().optional(),
            "whatsappPhoneNumberCount": t.integer().optional(),
            "commonNameAliasConfidence": t.number().optional(),
            "relationshipMemoryCount": t.integer().optional(),
        }
    ).named(renames["AssistantLogsCommunicationPersonalContactDataLogIn"])
    types["AssistantLogsCommunicationPersonalContactDataLogOut"] = t.struct(
        {
            "gaiaId": t.string().optional(),
            "matchedStarlightLookupName": t.array(t.string()).optional(),
            "originalQueryName": t.string().optional(),
            "phone": t.array(
                t.proxy(renames["AssistantLogsCommunicationPhoneLogOut"])
            ).optional(),
            "source": t.string().optional(),
            "recognitionAlternateSource": t.string().optional(),
            "accountProvenance": t.proxy(
                renames["AssistantLogsCommunicationGoogleAccountProvenanceOut"]
            ).optional(),
            "emailIdCount": t.integer().optional(),
            "conceptId": t.string().optional(),
            "fuzzyNgramMatch": t.array(
                t.proxy(renames["AssistantLogsCommunicationFuzzyNgramMatchLogOut"])
            ).optional(),
            "systemContactGroupId": t.array(t.integer()).optional(),
            "selectedPhone": t.proxy(
                renames["AssistantLogsCommunicationPhoneLogOut"]
            ).optional(),
            "pkgReferenceType": t.string().optional(),
            "isContactFromSecondaryAccount": t.boolean().optional(),
            "recognitionAlternateScore": t.number().optional(),
            "isShared": t.boolean().optional(),
            "isTransliteratedMatch": t.boolean().optional(),
            "nameMatchedContactIndex": t.array(t.integer()).optional(),
            "metadata": t.proxy(
                renames["AssistantLogsCommunicationPersonMetadataLogOut"]
            ).optional(),
            "deviceContactAttributes": t.array(t.integer()).optional(),
            "phoneNumberCount": t.integer().optional(),
            "isVisibleToGuestsRelationship": t.boolean().optional(),
            "isVanityContact": t.boolean().optional(),
            "matchedRecognitionAlternateName": t.string().optional(),
            "shortcutContactInfo": t.proxy(
                renames["MajelContactInformationShortcutInformationOut"]
            ).optional(),
            "matchedNameType": t.string().optional(),
            "whatsappPhoneNumberCount": t.integer().optional(),
            "commonNameAliasConfidence": t.number().optional(),
            "relationshipMemoryCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationPersonalContactDataLogOut"])
    types["NlpSemanticParsingLocalBasicLocationIn"] = t.struct(
        {
            "element": t.array(
                t.proxy(renames["NlpSemanticParsingLocalLocationElementIn"])
            )
        }
    ).named(renames["NlpSemanticParsingLocalBasicLocationIn"])
    types["NlpSemanticParsingLocalBasicLocationOut"] = t.struct(
        {
            "element": t.array(
                t.proxy(renames["NlpSemanticParsingLocalLocationElementOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalBasicLocationOut"])
    types["GeostoreAttributeIdProtoIn"] = t.struct(
        {
            "type": t.string(),
            "providerId": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["GeostoreAttributeIdProtoIn"])
    types["GeostoreAttributeIdProtoOut"] = t.struct(
        {
            "type": t.string(),
            "providerId": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAttributeIdProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameIn"] = t.struct(
        {
            "displayNameLastFirst": t.string().optional(),
            "displayName": t.string().optional(),
            "containerType": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameIn"])
    types["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameOut"] = t.struct(
        {
            "displayNameLastFirst": t.string().optional(),
            "displayName": t.string().optional(),
            "containerType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoIn"
    ] = t.struct(
        {
            "executedBy": t.string().optional(),
            "escalateTo": t.string().optional(),
            "reason": t.string().optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoOut"
    ] = t.struct(
        {
            "executedBy": t.string().optional(),
            "escalateTo": t.string().optional(),
            "reason": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoOut"
        ]
    )
    types["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaIn"] = t.struct(
        {"isOfficial": t.boolean()}
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaIn"])
    types["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaOut"] = t.struct(
        {
            "isOfficial": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoOldSchemaOut"])
    types["AssistantLogsAmbiguousTargetDeviceLogIn"] = t.struct(
        {
            "finalTargetDevice": t.proxy(
                renames["AssistantLogsDeviceInfoLogIn"]
            ).optional(),
            "puntInfoLog": t.array(
                t.proxy(renames["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogIn"])
            ).optional(),
            "playabilityFilteredDevicesIndex": t.array(t.integer()).optional(),
            "ambiguousDeviceIndex": t.array(t.integer()).optional(),
            "structureFilteredDeviceIndex": t.array(t.integer()).optional(),
            "devicesAfterPromoters": t.array(
                t.proxy(renames["AssistantLogsDeviceInfoLogIn"])
            ).optional(),
        }
    ).named(renames["AssistantLogsAmbiguousTargetDeviceLogIn"])
    types["AssistantLogsAmbiguousTargetDeviceLogOut"] = t.struct(
        {
            "finalTargetDevice": t.proxy(
                renames["AssistantLogsDeviceInfoLogOut"]
            ).optional(),
            "puntInfoLog": t.array(
                t.proxy(renames["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogOut"])
            ).optional(),
            "playabilityFilteredDevicesIndex": t.array(t.integer()).optional(),
            "ambiguousDeviceIndex": t.array(t.integer()).optional(),
            "structureFilteredDeviceIndex": t.array(t.integer()).optional(),
            "devicesAfterPromoters": t.array(
                t.proxy(renames["AssistantLogsDeviceInfoLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsAmbiguousTargetDeviceLogOut"])
    types["TrawlerClientServiceInfoClientLabelsIn"] = t.struct(
        {
            "values": t.array(t.string()),
            "labelsDeprecated": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string(),
        }
    ).named(renames["TrawlerClientServiceInfoClientLabelsIn"])
    types["TrawlerClientServiceInfoClientLabelsOut"] = t.struct(
        {
            "values": t.array(t.string()),
            "labelsDeprecated": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerClientServiceInfoClientLabelsOut"])
    types["ImageRepositoryVideoIndexingInfoIn"] = t.struct(
        {
            "notIndexedVideoLink": t.array(
                t.proxy(renames["ImageRepositoryVideoLinkIndexingInfoIn"])
            )
        }
    ).named(renames["ImageRepositoryVideoIndexingInfoIn"])
    types["ImageRepositoryVideoIndexingInfoOut"] = t.struct(
        {
            "notIndexedVideoLink": t.array(
                t.proxy(renames["ImageRepositoryVideoLinkIndexingInfoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVideoIndexingInfoOut"])
    types["SecurityCredentialsChatProtoIn"] = t.struct(
        {"chatId": t.string().optional(), "memberType": t.integer().optional()}
    ).named(renames["SecurityCredentialsChatProtoIn"])
    types["SecurityCredentialsChatProtoOut"] = t.struct(
        {
            "chatId": t.string().optional(),
            "memberType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsChatProtoOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxIn"] = t.struct(
        {
            "renderedText": t.string(),
            "box": t.proxy(renames["HtmlrenderWebkitHeadlessProtoBoxIn"]),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxOut"] = t.struct(
        {
            "renderedText": t.string(),
            "box": t.proxy(renames["HtmlrenderWebkitHeadlessProtoBoxOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxOut"])
    types["VideoContentSearchInstructionAnchorFeaturesIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["VideoContentSearchInstructionAnchorFeaturesIn"])
    types["VideoContentSearchInstructionAnchorFeaturesOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["VideoContentSearchInstructionAnchorFeaturesOut"])
    types["AssistantApiScreenCapabilitiesMaskIn"] = t.struct(
        {"type": t.string()}
    ).named(renames["AssistantApiScreenCapabilitiesMaskIn"])
    types["AssistantApiScreenCapabilitiesMaskOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiScreenCapabilitiesMaskOut"])
    types["GoogleCloudContentwarehouseV1RequestMetadataIn"] = t.struct(
        {
            "userInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoIn"]
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1RequestMetadataIn"])
    types["GoogleCloudContentwarehouseV1RequestMetadataOut"] = t.struct(
        {
            "userInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RequestMetadataOut"])
    types["GoogleCloudDocumentaiV1DocumentPageSymbolIn"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageSymbolIn"])
    types["GoogleCloudDocumentaiV1DocumentPageSymbolOut"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageSymbolOut"])
    types["QualityActionsCustomizedNotificationPayloadIn"] = t.struct(
        {"url": t.string().optional()}
    ).named(renames["QualityActionsCustomizedNotificationPayloadIn"])
    types["QualityActionsCustomizedNotificationPayloadOut"] = t.struct(
        {
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsCustomizedNotificationPayloadOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOccupationIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOccupationIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOccupationOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOccupationOut"])
    types["KnowledgeAnswersSensitivityMyActivityPolicyIn"] = t.struct(
        {
            "myActivityRedactionKey": t.string().optional(),
            "myActivityRedactedAction": t.string(),
        }
    ).named(renames["KnowledgeAnswersSensitivityMyActivityPolicyIn"])
    types["KnowledgeAnswersSensitivityMyActivityPolicyOut"] = t.struct(
        {
            "myActivityRedactionKey": t.string().optional(),
            "myActivityRedactedAction": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityMyActivityPolicyOut"])
    types["MediaIndexXtagIn"] = t.struct(
        {"name": t.string().optional(), "value": t.string().optional()}
    ).named(renames["MediaIndexXtagIn"])
    types["MediaIndexXtagOut"] = t.struct(
        {
            "name": t.string().optional(),
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexXtagOut"])
    types["GoogleCloudDocumentaiV1DocumentPageParagraphIn"] = t.struct(
        {
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageParagraphIn"])
    types["GoogleCloudDocumentaiV1DocumentPageParagraphOut"] = t.struct(
        {
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageParagraphOut"])
    types["SnapshotBoxIn"] = t.struct(
        {
            "x": t.integer(),
            "y": t.integer(),
            "height": t.integer(),
            "width": t.integer(),
        }
    ).named(renames["SnapshotBoxIn"])
    types["SnapshotBoxOut"] = t.struct(
        {
            "x": t.integer(),
            "y": t.integer(),
            "height": t.integer(),
            "width": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotBoxOut"])
    types["AbuseiamFeatureIn"] = t.struct(
        {
            "doubleValue": t.number(),
            "timestampSequence": t.array(t.string()).optional(),
            "name": t.string(),
            "stringValue": t.array(t.string()),
            "booleanValue": t.boolean().optional(),
            "integerValue": t.integer().optional(),
            "featureCount": t.string().optional(),
            "int64Value": t.string().optional(),
        }
    ).named(renames["AbuseiamFeatureIn"])
    types["AbuseiamFeatureOut"] = t.struct(
        {
            "doubleValue": t.number(),
            "timestampSequence": t.array(t.string()).optional(),
            "name": t.string(),
            "stringValue": t.array(t.string()),
            "booleanValue": t.boolean().optional(),
            "integerValue": t.integer().optional(),
            "featureCount": t.string().optional(),
            "int64Value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamFeatureOut"])
    types["RepositoryWebrefMentionIn"] = t.struct(
        {
            "nameMetadata": t.proxy(
                renames["RepositoryWebrefConceptNameMetadataIn"]
            ).optional(),
            "lexicalAnnotation": t.proxy(
                renames["RepositoryWebrefLexicalAnnotationIn"]
            ).optional(),
            "subsegmentIndex": t.proxy(
                renames["RepositoryWebrefSubSegmentIndexIn"]
            ).optional(),
            "nonLocationalScore": t.number().optional(),
            "debugInfo": t.proxy(
                renames["RepositoryWebrefMentionDebugInfoIn"]
            ).optional(),
            "referenceScore": t.number().optional(),
            "evalInfo": t.proxy(
                renames["RepositoryWebrefMentionEvalInfoIn"]
            ).optional(),
            "end": t.integer(),
            "timeOffsetMs": t.integer().optional(),
            "timeOffsetConfidence": t.integer().optional(),
            "interpretationNumber": t.array(t.integer()).optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "confidenceScore": t.number().optional(),
            "detailedMentionScores": t.proxy(
                renames["RepositoryWebrefDetailedMentionScoresIn"]
            ).optional(),
            "matchingText": t.string().optional(),
            "additionalExplainedRange": t.array(
                t.proxy(renames["RepositoryWebrefMentionAdditionalExplainedRangeIn"])
            ).optional(),
            "perMentionLightweightToken": t.proxy(
                renames["RepositoryWebrefLightweightTokensPerMentionLightweightTokenIn"]
            ).optional(),
            "personalizationContextOutputs": t.proxy(
                renames["RepositoryWebrefPersonalizationContextOutputsIn"]
            ).optional(),
            "resolutionScore": t.number().optional(),
            "beginTokenIndex": t.integer().optional(),
            "priorProbability": t.number().optional(),
            "begin": t.integer().optional(),
            "compoundMention": t.array(
                t.proxy(renames["RepositoryWebrefMentionCompoundMentionIn"])
            ).optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "trustedNameConfidence": t.number().optional(),
            "endTokenIndex": t.integer(),
            "lowConfidence": t.boolean().optional(),
            "isImplicit": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefMentionIn"])
    types["RepositoryWebrefMentionOut"] = t.struct(
        {
            "nameMetadata": t.proxy(
                renames["RepositoryWebrefConceptNameMetadataOut"]
            ).optional(),
            "lexicalAnnotation": t.proxy(
                renames["RepositoryWebrefLexicalAnnotationOut"]
            ).optional(),
            "subsegmentIndex": t.proxy(
                renames["RepositoryWebrefSubSegmentIndexOut"]
            ).optional(),
            "nonLocationalScore": t.number().optional(),
            "debugInfo": t.proxy(
                renames["RepositoryWebrefMentionDebugInfoOut"]
            ).optional(),
            "referenceScore": t.number().optional(),
            "evalInfo": t.proxy(
                renames["RepositoryWebrefMentionEvalInfoOut"]
            ).optional(),
            "end": t.integer(),
            "timeOffsetMs": t.integer().optional(),
            "timeOffsetConfidence": t.integer().optional(),
            "interpretationNumber": t.array(t.integer()).optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "confidenceScore": t.number().optional(),
            "detailedMentionScores": t.proxy(
                renames["RepositoryWebrefDetailedMentionScoresOut"]
            ).optional(),
            "matchingText": t.string().optional(),
            "additionalExplainedRange": t.array(
                t.proxy(renames["RepositoryWebrefMentionAdditionalExplainedRangeOut"])
            ).optional(),
            "perMentionLightweightToken": t.proxy(
                renames[
                    "RepositoryWebrefLightweightTokensPerMentionLightweightTokenOut"
                ]
            ).optional(),
            "personalizationContextOutputs": t.proxy(
                renames["RepositoryWebrefPersonalizationContextOutputsOut"]
            ).optional(),
            "resolutionScore": t.number().optional(),
            "beginTokenIndex": t.integer().optional(),
            "priorProbability": t.number().optional(),
            "begin": t.integer().optional(),
            "compoundMention": t.array(
                t.proxy(renames["RepositoryWebrefMentionCompoundMentionOut"])
            ).optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "trustedNameConfidence": t.number().optional(),
            "endTokenIndex": t.integer(),
            "lowConfidence": t.boolean().optional(),
            "isImplicit": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionOut"])
    types["SocialGraphApiProtoDecorationOverlayIn"] = t.struct(
        {
            "sibsId": t.string().optional(),
            "overlay": t.proxy(renames["SocialGraphApiProtoPhotoOverlayIn"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoDecorationOverlayIn"])
    types["SocialGraphApiProtoDecorationOverlayOut"] = t.struct(
        {
            "sibsId": t.string().optional(),
            "overlay": t.proxy(
                renames["SocialGraphApiProtoPhotoOverlayOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoDecorationOverlayOut"])
    types["NlpSemanticParsingDatetimeSpanIn"] = t.struct(
        {
            "startByte": t.integer().optional(),
            "text": t.string().optional(),
            "numBytes": t.integer(),
        }
    ).named(renames["NlpSemanticParsingDatetimeSpanIn"])
    types["NlpSemanticParsingDatetimeSpanOut"] = t.struct(
        {
            "startByte": t.integer().optional(),
            "text": t.string().optional(),
            "numBytes": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeSpanOut"])
    types["CopleyLexicalMetadataIn"] = t.struct(
        {"canonicalLexicalMid": t.string().optional()}
    ).named(renames["CopleyLexicalMetadataIn"])
    types["CopleyLexicalMetadataOut"] = t.struct(
        {
            "canonicalLexicalMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleyLexicalMetadataOut"])
    types["KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipIn"] = t.struct(
        {
            "entityIndex": t.integer().optional(),
            "linkPropertyName": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipIn"])
    types["KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipOut"] = t.struct(
        {
            "entityIndex": t.integer().optional(),
            "linkPropertyName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipOut"])
    types["ImageRepositoryShoppingProductInformationBoundingBoxIn"] = t.struct(
        {
            "h": t.number().optional(),
            "x": t.number().optional(),
            "y": t.number().optional(),
            "w": t.number().optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationBoundingBoxIn"])
    types["ImageRepositoryShoppingProductInformationBoundingBoxOut"] = t.struct(
        {
            "h": t.number().optional(),
            "x": t.number().optional(),
            "y": t.number().optional(),
            "w": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationBoundingBoxOut"])
    types["LocalsearchProtoInternalFoodOrderingActionMetadataIn"] = t.struct(
        {
            "unavailabilityReason": t.string().optional(),
            "supportedServiceType": t.string().optional(),
            "isWhitelistedExternalRestaurant": t.boolean().optional(),
            "onlyOrderAheadServicesAvailable": t.boolean().optional(),
            "actionType": t.string().optional(),
            "hasPrimarilyFoodIntent": t.boolean().optional(),
            "serviceInfo": t.array(
                t.proxy(
                    renames[
                        "LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoIn"
                    ]
                )
            ).optional(),
            "nextOpeningTime": t.string().optional(),
            "isOutOfOperationalHours": t.boolean().optional(),
        }
    ).named(renames["LocalsearchProtoInternalFoodOrderingActionMetadataIn"])
    types["LocalsearchProtoInternalFoodOrderingActionMetadataOut"] = t.struct(
        {
            "unavailabilityReason": t.string().optional(),
            "supportedServiceType": t.string().optional(),
            "isWhitelistedExternalRestaurant": t.boolean().optional(),
            "onlyOrderAheadServicesAvailable": t.boolean().optional(),
            "actionType": t.string().optional(),
            "hasPrimarilyFoodIntent": t.boolean().optional(),
            "serviceInfo": t.array(
                t.proxy(
                    renames[
                        "LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoOut"
                    ]
                )
            ).optional(),
            "nextOpeningTime": t.string().optional(),
            "isOutOfOperationalHours": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalsearchProtoInternalFoodOrderingActionMetadataOut"])
    types["AssistantLogsCommunicationGoogleAccountProvenanceIn"] = t.struct(
        {"gaiaId": t.string(), "isDasherAccount": t.boolean(), "email": t.string()}
    ).named(renames["AssistantLogsCommunicationGoogleAccountProvenanceIn"])
    types["AssistantLogsCommunicationGoogleAccountProvenanceOut"] = t.struct(
        {
            "gaiaId": t.string(),
            "isDasherAccount": t.boolean(),
            "email": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationGoogleAccountProvenanceOut"])
    types["KnowledgeAnswersOpaqueAppAnnotationTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueAppAnnotationTypeIn"])
    types["KnowledgeAnswersOpaqueAppAnnotationTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueAppAnnotationTypeOut"])
    types["PhotosHdrMetadataGainmapIn"] = t.struct(
        {"googleHdr": t.boolean().optional(), "adobeHdr": t.boolean().optional()}
    ).named(renames["PhotosHdrMetadataGainmapIn"])
    types["PhotosHdrMetadataGainmapOut"] = t.struct(
        {
            "googleHdr": t.boolean().optional(),
            "adobeHdr": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosHdrMetadataGainmapOut"])
    types["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecIn"] = t.struct(
        {
            "familyNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecIn"]
            ),
            "givenNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecIn"]
            ),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecIn"])
    types["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecOut"] = t.struct(
        {
            "familyNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecOut"]
            ),
            "givenNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecOut"])
    types["ImageMustangImageLinkSelectionInfoIn"] = t.struct(
        {"webRelevanceScore": t.number().optional()}
    ).named(renames["ImageMustangImageLinkSelectionInfoIn"])
    types["ImageMustangImageLinkSelectionInfoOut"] = t.struct(
        {
            "webRelevanceScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageMustangImageLinkSelectionInfoOut"])
    types["DrishtiFeatureSetDataFeatureSetElementIn"] = t.struct(
        {
            "indexed": t.proxy(renames["DrishtiIndexedFeatureDataIn"]),
            "quantized": t.proxy(renames["DrishtiQuantizedDenseFeatureDataIn"]),
            "sparse": t.proxy(renames["DrishtiSparseFeatureDataIn"]),
            "quantizedByteDense": t.proxy(
                renames["DrishtiQuantizedByteDenseFeatureDataIn"]
            ),
            "dense": t.proxy(renames["DrishtiDenseFeatureDataIn"]),
            "compressed": t.proxy(renames["DrishtiCompressedFeatureIn"]),
            "name": t.string().optional(),
            "quantizedByteIndexed": t.proxy(
                renames["DrishtiQuantizedByteIndexedFeatureDataIn"]
            ),
        }
    ).named(renames["DrishtiFeatureSetDataFeatureSetElementIn"])
    types["DrishtiFeatureSetDataFeatureSetElementOut"] = t.struct(
        {
            "indexed": t.proxy(renames["DrishtiIndexedFeatureDataOut"]),
            "quantized": t.proxy(renames["DrishtiQuantizedDenseFeatureDataOut"]),
            "sparse": t.proxy(renames["DrishtiSparseFeatureDataOut"]),
            "quantizedByteDense": t.proxy(
                renames["DrishtiQuantizedByteDenseFeatureDataOut"]
            ),
            "dense": t.proxy(renames["DrishtiDenseFeatureDataOut"]),
            "compressed": t.proxy(renames["DrishtiCompressedFeatureOut"]),
            "name": t.string().optional(),
            "quantizedByteIndexed": t.proxy(
                renames["DrishtiQuantizedByteIndexedFeatureDataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiFeatureSetDataFeatureSetElementOut"])
    types["KnowledgeAnswersOpaqueAogTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueAogTypeIn"])
    types["KnowledgeAnswersOpaqueAogTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueAogTypeOut"])
    types["GeostoreFoodMenuItemProtoIn"] = t.struct(
        {
            "itemOption": t.array(
                t.proxy(renames["GeostoreFoodMenuItemOptionProtoIn"])
            ),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreFoodMenuItemProtoIn"])
    types["GeostoreFoodMenuItemProtoOut"] = t.struct(
        {
            "itemOption": t.array(
                t.proxy(renames["GeostoreFoodMenuItemOptionProtoOut"])
            ),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFoodMenuItemProtoOut"])
    types["HtmlrenderWebkitHeadlessProtoWindowOpenEventIn"] = t.struct(
        {
            "url": t.string().optional(),
            "allowed": t.boolean().optional(),
            "windowName": t.string().optional(),
            "windowFeatures": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoWindowOpenEventIn"])
    types["HtmlrenderWebkitHeadlessProtoWindowOpenEventOut"] = t.struct(
        {
            "url": t.string().optional(),
            "allowed": t.boolean().optional(),
            "windowName": t.string().optional(),
            "windowFeatures": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoWindowOpenEventOut"])
    types["QualitySitemapCoClickTargetDocIn"] = t.struct(
        {
            "title": t.string(),
            "coClickByLocale": t.array(
                t.proxy(renames["QualitySitemapCoClickTargetDocCoClickByLocaleIn"])
            ),
            "url": t.string(),
        }
    ).named(renames["QualitySitemapCoClickTargetDocIn"])
    types["QualitySitemapCoClickTargetDocOut"] = t.struct(
        {
            "title": t.string(),
            "coClickByLocale": t.array(
                t.proxy(renames["QualitySitemapCoClickTargetDocCoClickByLocaleOut"])
            ),
            "url": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapCoClickTargetDocOut"])
    types["IndexingUrlPatternUrlTreeUrlTreeNodeIn"] = t.struct(
        {
            "patternId": t.string().optional(),
            "pathFromRoot": t.string().optional(),
            "indexOfSubTreeWithoutSplittingFeature": t.integer(),
            "splittingFeature": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlFeatureIn"]
            ),
            "indexOfSubTreeWithSplittingFeature": t.integer(),
            "payload": t.proxy(renames["Proto2BridgeMessageSetIn"]),
            "splittingFeatureScore": t.number().optional(),
            "parent": t.integer(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeNodeIn"])
    types["IndexingUrlPatternUrlTreeUrlTreeNodeOut"] = t.struct(
        {
            "patternId": t.string().optional(),
            "pathFromRoot": t.string().optional(),
            "indexOfSubTreeWithoutSplittingFeature": t.integer(),
            "splittingFeature": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlFeatureOut"]
            ),
            "indexOfSubTreeWithSplittingFeature": t.integer(),
            "payload": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "splittingFeatureScore": t.number().optional(),
            "parent": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeNodeOut"])
    types["ResearchScienceSearchOrganizationIn"] = t.struct(
        {
            "organizationName": t.string().optional(),
            "originalOrganizationName": t.string().optional(),
            "organizationMid": t.array(t.string()).optional(),
            "organizationUrl": t.string().optional(),
            "organizationMidLabel": t.array(t.string()).optional(),
        }
    ).named(renames["ResearchScienceSearchOrganizationIn"])
    types["ResearchScienceSearchOrganizationOut"] = t.struct(
        {
            "organizationName": t.string().optional(),
            "originalOrganizationName": t.string().optional(),
            "organizationMid": t.array(t.string()).optional(),
            "organizationUrl": t.string().optional(),
            "organizationMidLabel": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchOrganizationOut"])
    types["AbuseiamManualReviewToolIn"] = t.struct(
        {"experimentId": t.string(), "name": t.string()}
    ).named(renames["AbuseiamManualReviewToolIn"])
    types["AbuseiamManualReviewToolOut"] = t.struct(
        {
            "experimentId": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamManualReviewToolOut"])
    types["RepositoryWebrefAnnotatedCategoryInfoIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "listiness": t.number().optional(),
            "debugString": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefAnnotatedCategoryInfoIn"])
    types["RepositoryWebrefAnnotatedCategoryInfoOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "listiness": t.number().optional(),
            "debugString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotatedCategoryInfoOut"])
    types["BlogPerDocDataOutlinksIn"] = t.struct(
        {
            "title": t.string(),
            "siteSpamScore": t.integer(),
            "aggregationFp": t.string().optional(),
            "resolvedUrl": t.string(),
        }
    ).named(renames["BlogPerDocDataOutlinksIn"])
    types["BlogPerDocDataOutlinksOut"] = t.struct(
        {
            "title": t.string(),
            "siteSpamScore": t.integer(),
            "aggregationFp": t.string().optional(),
            "resolvedUrl": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlogPerDocDataOutlinksOut"])
    types["ExtraSnippetInfoResponseTidbitAnchorInfoIn"] = t.struct(
        {"offdomainCount": t.integer(), "ondomainCount": t.integer()}
    ).named(renames["ExtraSnippetInfoResponseTidbitAnchorInfoIn"])
    types["ExtraSnippetInfoResponseTidbitAnchorInfoOut"] = t.struct(
        {
            "offdomainCount": t.integer(),
            "ondomainCount": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseTidbitAnchorInfoOut"])
    types["AssistantApiSettingsSearchFilterIn"] = t.struct({"state": t.string()}).named(
        renames["AssistantApiSettingsSearchFilterIn"]
    )
    types["AssistantApiSettingsSearchFilterOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiSettingsSearchFilterOut"])
    types["TrawlerFetchReplyDataCrawlDatesIn"] = t.struct(
        {
            "NotChangedDate": t.integer().optional(),
            "ReuseDate": t.integer().optional(),
            "OriginalCrawlDate": t.integer().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataCrawlDatesIn"])
    types["TrawlerFetchReplyDataCrawlDatesOut"] = t.struct(
        {
            "NotChangedDate": t.integer().optional(),
            "ReuseDate": t.integer().optional(),
            "OriginalCrawlDate": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataCrawlDatesOut"])
    types["GoodocParagraphIn"] = t.struct(
        {
            "alignment": t.integer(),
            "RightIndent": t.integer(),
            "Box": t.proxy(renames["GoodocBoundingBoxIn"]),
            "route": t.array(t.proxy(renames["GoodocParagraphRouteIn"])),
            "LeftIndent": t.integer(),
            "SpaceAfter": t.integer(),
            "TextConfidence": t.integer().optional(),
            "SpaceBefore": t.integer(),
            "Label": t.proxy(renames["GoodocLabelIn"]),
            "LineSpacing": t.integer(),
            "OrientationLabel": t.proxy(renames["GoodocOrientationLabelIn"]).optional(),
            "Width": t.integer(),
            "SubsumedParagraphProperties": t.array(
                t.proxy(renames["GoodocParagraphIn"])
            ).optional(),
            "droppedcap": t.proxy(renames["GoodocParagraphDroppedCapIn"]),
            "FirstLineIndent": t.integer(),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxIn"]).optional(),
        }
    ).named(renames["GoodocParagraphIn"])
    types["GoodocParagraphOut"] = t.struct(
        {
            "alignment": t.integer(),
            "RightIndent": t.integer(),
            "Box": t.proxy(renames["GoodocBoundingBoxOut"]),
            "route": t.array(t.proxy(renames["GoodocParagraphRouteOut"])),
            "LeftIndent": t.integer(),
            "SpaceAfter": t.integer(),
            "TextConfidence": t.integer().optional(),
            "SpaceBefore": t.integer(),
            "Label": t.proxy(renames["GoodocLabelOut"]),
            "LineSpacing": t.integer(),
            "OrientationLabel": t.proxy(
                renames["GoodocOrientationLabelOut"]
            ).optional(),
            "Width": t.integer(),
            "SubsumedParagraphProperties": t.array(
                t.proxy(renames["GoodocParagraphOut"])
            ).optional(),
            "droppedcap": t.proxy(renames["GoodocParagraphDroppedCapOut"]),
            "FirstLineIndent": t.integer(),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocParagraphOut"])
    types["GeostoreSegmentPathProtoIn"] = t.struct(
        {"subpath": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional()}
    ).named(renames["GeostoreSegmentPathProtoIn"])
    types["GeostoreSegmentPathProtoOut"] = t.struct(
        {
            "subpath": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSegmentPathProtoOut"])
    types["NlpSemanticParsingModelsMediaTVShowIn"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "providerMetadata": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaProviderMetadataIn"])
            ),
            "isFromFastPath": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaTVShowIn"])
    types["NlpSemanticParsingModelsMediaTVShowOut"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "providerMetadata": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaProviderMetadataOut"])
            ),
            "isFromFastPath": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaTVShowOut"])
    types["ImageRepositoryS3LangIdSignalsIn"] = t.struct(
        {
            "endSec": t.string(),
            "startSec": t.string().optional(),
            "modelVersion": t.string().optional(),
            "langidResult": t.proxy(
                renames["SpeechS3LanguageIdentificationResultIn"]
            ).optional(),
            "speechFrameCount": t.integer(),
            "totalFrameCount": t.integer().optional(),
            "languageIdentification": t.proxy(
                renames["VideoTimedtextS4ALIResultsIn"]
            ).optional(),
            "containsSpeech": t.boolean().optional(),
        }
    ).named(renames["ImageRepositoryS3LangIdSignalsIn"])
    types["ImageRepositoryS3LangIdSignalsOut"] = t.struct(
        {
            "endSec": t.string(),
            "startSec": t.string().optional(),
            "modelVersion": t.string().optional(),
            "langidResult": t.proxy(
                renames["SpeechS3LanguageIdentificationResultOut"]
            ).optional(),
            "speechFrameCount": t.integer(),
            "totalFrameCount": t.integer().optional(),
            "languageIdentification": t.proxy(
                renames["VideoTimedtextS4ALIResultsOut"]
            ).optional(),
            "containsSpeech": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryS3LangIdSignalsOut"])
    types["SdrPageAnchorsSitelinkIn"] = t.struct(
        {
            "text": t.string().optional(),
            "scrollTo": t.proxy(renames["SdrScrollToIn"]),
            "sectionHeight": t.integer().optional(),
            "geometryScore": t.number().optional(),
            "hpScore": t.number().optional(),
            "level": t.integer(),
            "embedding": t.proxy(renames["SdrEmbeddingIn"]).optional(),
            "headingAbbrvScore": t.number().optional(),
        }
    ).named(renames["SdrPageAnchorsSitelinkIn"])
    types["SdrPageAnchorsSitelinkOut"] = t.struct(
        {
            "text": t.string().optional(),
            "scrollTo": t.proxy(renames["SdrScrollToOut"]),
            "sectionHeight": t.integer().optional(),
            "geometryScore": t.number().optional(),
            "hpScore": t.number().optional(),
            "level": t.integer(),
            "embedding": t.proxy(renames["SdrEmbeddingOut"]).optional(),
            "headingAbbrvScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrPageAnchorsSitelinkOut"])
    types["NlpSemanticParsingDatetimeNonGregorianDateIn"] = t.struct(
        {
            "hebrewMonth": t.string(),
            "chineseMonth": t.string(),
            "day": t.integer().optional(),
            "islamicMonth": t.string(),
            "year": t.integer().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeNonGregorianDateIn"])
    types["NlpSemanticParsingDatetimeNonGregorianDateOut"] = t.struct(
        {
            "hebrewMonth": t.string(),
            "chineseMonth": t.string(),
            "day": t.integer().optional(),
            "islamicMonth": t.string(),
            "year": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeNonGregorianDateOut"])
    types["IndexingConverterRedirectParamsIn"] = t.struct(
        {
            "frameTargetDeniesFraming": t.boolean().optional(),
            "isDownload": t.boolean().optional(),
            "delay": t.integer().optional(),
            "metaRedirectFromTrawler": t.boolean().optional(),
            "type": t.string(),
            "isRenderingRedirect": t.boolean().optional(),
        }
    ).named(renames["IndexingConverterRedirectParamsIn"])
    types["IndexingConverterRedirectParamsOut"] = t.struct(
        {
            "frameTargetDeniesFraming": t.boolean().optional(),
            "isDownload": t.boolean().optional(),
            "delay": t.integer().optional(),
            "metaRedirectFromTrawler": t.boolean().optional(),
            "type": t.string(),
            "isRenderingRedirect": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRedirectParamsOut"])
    types["VendingConsumerProtoTrustedGenomeEntityIn"] = t.struct(
        {
            "predicateName": t.string().optional(),
            "level": t.integer().optional(),
            "score": t.number().optional(),
            "userVisible": t.boolean().optional(),
            "id": t.string().optional(),
            "title": t.string().optional(),
            "queryText": t.string().optional(),
            "categoryId": t.string().optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeEntityIn"])
    types["VendingConsumerProtoTrustedGenomeEntityOut"] = t.struct(
        {
            "predicateName": t.string().optional(),
            "level": t.integer().optional(),
            "score": t.number().optional(),
            "userVisible": t.boolean().optional(),
            "id": t.string().optional(),
            "title": t.string().optional(),
            "queryText": t.string().optional(),
            "categoryId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeEntityOut"])
    types["ImageRepositoryAmarnaSignalsBlobIn"] = t.struct(
        {"frameFeatures": t.proxy(renames["DrishtiFeatureSetDataSequenceIn"])}
    ).named(renames["ImageRepositoryAmarnaSignalsBlobIn"])
    types["ImageRepositoryAmarnaSignalsBlobOut"] = t.struct(
        {
            "frameFeatures": t.proxy(renames["DrishtiFeatureSetDataSequenceOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryAmarnaSignalsBlobOut"])
    types["AssistantApiVolumePropertiesIn"] = t.struct(
        {
            "mediumVolumePercentage": t.integer(),
            "levelStepSize": t.number().optional(),
            "lowVolumePercentage": t.integer(),
            "defaultVolumePercentage": t.integer().optional(),
            "veryLowVolumePercentage": t.integer(),
            "veryHighVolumePercentage": t.integer(),
            "maximumVolumeLevel": t.integer().optional(),
            "highVolumePercentage": t.integer(),
        }
    ).named(renames["AssistantApiVolumePropertiesIn"])
    types["AssistantApiVolumePropertiesOut"] = t.struct(
        {
            "mediumVolumePercentage": t.integer(),
            "levelStepSize": t.number().optional(),
            "lowVolumePercentage": t.integer(),
            "defaultVolumePercentage": t.integer().optional(),
            "veryLowVolumePercentage": t.integer(),
            "veryHighVolumePercentage": t.integer(),
            "maximumVolumeLevel": t.integer().optional(),
            "highVolumePercentage": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiVolumePropertiesOut"])
    types["AssistantApiThirdPartyCapabilitiesIn"] = t.struct(
        {"dataSharingRestrictions": t.string().optional()}
    ).named(renames["AssistantApiThirdPartyCapabilitiesIn"])
    types["AssistantApiThirdPartyCapabilitiesOut"] = t.struct(
        {
            "dataSharingRestrictions": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiThirdPartyCapabilitiesOut"])
    types["CompressedQualitySignalsIn"] = t.struct(
        {
            "experimentalQstarSignal": t.number().optional(),
            "pairwiseqScoringData": t.proxy(
                renames["PairwiseQScoringDataIn"]
            ).optional(),
            "experimentalNsrTeamData": t.proxy(
                renames["QualityNsrExperimentalNsrTeamDataIn"]
            ).optional(),
            "siteAuthority": t.integer().optional(),
            "experimentalNsrTeamWsjData": t.array(
                t.proxy(renames["QualityNsrExperimentalNsrTeamWSJDataIn"])
            ).optional(),
            "productReviewPUhqPage": t.integer().optional(),
            "babyPandaDemotion": t.integer().optional(),
            "exactMatchDomainDemotion": t.integer().optional(),
            "babyPandaV2Demotion": t.integer().optional(),
            "experimentalQstarSiteSignal": t.number().optional(),
            "pairwiseqVersionedData": t.array(
                t.proxy(renames["PairwiseQVersionedItemIn"])
            ).optional(),
            "nsrOverrideBid": t.number().optional(),
            "productReviewPDemotePage": t.integer(),
            "anchorMismatchDemotion": t.integer().optional(),
            "productReviewPDemoteSite": t.integer().optional(),
            "navDemotion": t.integer().optional(),
            "experimentalQstarDeltaSignal": t.number().optional(),
            "serpDemotion": t.integer().optional(),
            "crapsAbsoluteHostSignals": t.integer().optional(),
            "vlqNsr": t.integer().optional(),
            "scamness": t.integer().optional(),
            "pqDataProto": t.proxy(renames["QualityNsrPQDataIn"]).optional(),
            "crapsUnscaledIpPriorBadFraction": t.integer(),
            "crapsNewHostSignals": t.string(),
            "productReviewPPromotePage": t.integer(),
            "lowQuality": t.integer().optional(),
            "topicEmbeddingsVersionedData": t.array(
                t.proxy(renames["QualityAuthorityTopicEmbeddingsVersionedItemIn"])
            ).optional(),
            "productReviewPReviewPage": t.integer().optional(),
            "crapsNewPatternSignals": t.string(),
            "productReviewPPromoteSite": t.integer(),
            "pqData": t.integer().optional(),
            "pandaDemotion": t.integer().optional(),
            "nsrConfidence": t.integer().optional(),
            "crapsNewUrlSignals": t.string().optional(),
            "authorityPromotion": t.integer().optional(),
            "nsrVersionedData": t.array(
                t.proxy(renames["NSRVersionedItemIn"])
            ).optional(),
            "unauthoritativeScore": t.integer().optional(),
        }
    ).named(renames["CompressedQualitySignalsIn"])
    types["CompressedQualitySignalsOut"] = t.struct(
        {
            "experimentalQstarSignal": t.number().optional(),
            "pairwiseqScoringData": t.proxy(
                renames["PairwiseQScoringDataOut"]
            ).optional(),
            "experimentalNsrTeamData": t.proxy(
                renames["QualityNsrExperimentalNsrTeamDataOut"]
            ).optional(),
            "siteAuthority": t.integer().optional(),
            "experimentalNsrTeamWsjData": t.array(
                t.proxy(renames["QualityNsrExperimentalNsrTeamWSJDataOut"])
            ).optional(),
            "productReviewPUhqPage": t.integer().optional(),
            "babyPandaDemotion": t.integer().optional(),
            "exactMatchDomainDemotion": t.integer().optional(),
            "babyPandaV2Demotion": t.integer().optional(),
            "experimentalQstarSiteSignal": t.number().optional(),
            "pairwiseqVersionedData": t.array(
                t.proxy(renames["PairwiseQVersionedItemOut"])
            ).optional(),
            "nsrOverrideBid": t.number().optional(),
            "productReviewPDemotePage": t.integer(),
            "anchorMismatchDemotion": t.integer().optional(),
            "productReviewPDemoteSite": t.integer().optional(),
            "navDemotion": t.integer().optional(),
            "experimentalQstarDeltaSignal": t.number().optional(),
            "serpDemotion": t.integer().optional(),
            "crapsAbsoluteHostSignals": t.integer().optional(),
            "vlqNsr": t.integer().optional(),
            "scamness": t.integer().optional(),
            "pqDataProto": t.proxy(renames["QualityNsrPQDataOut"]).optional(),
            "crapsUnscaledIpPriorBadFraction": t.integer(),
            "crapsNewHostSignals": t.string(),
            "productReviewPPromotePage": t.integer(),
            "lowQuality": t.integer().optional(),
            "topicEmbeddingsVersionedData": t.array(
                t.proxy(renames["QualityAuthorityTopicEmbeddingsVersionedItemOut"])
            ).optional(),
            "productReviewPReviewPage": t.integer().optional(),
            "crapsNewPatternSignals": t.string(),
            "productReviewPPromoteSite": t.integer(),
            "pqData": t.integer().optional(),
            "pandaDemotion": t.integer().optional(),
            "nsrConfidence": t.integer().optional(),
            "crapsNewUrlSignals": t.string().optional(),
            "authorityPromotion": t.integer().optional(),
            "nsrVersionedData": t.array(
                t.proxy(renames["NSRVersionedItemOut"])
            ).optional(),
            "unauthoritativeScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompressedQualitySignalsOut"])
    types["TrawlerFetchReplyDataFetchStatsIn"] = t.struct(
        {
            "ServerResponseTimeMs": t.integer().optional(),
            "BotOverheadMS": t.integer().optional(),
            "ClientControlflowStats": t.proxy(
                renames["TrawlerFetchReplyDataFetchStatsClientStateStatsIn"]
            ),
            "SSLConnectTimeMs": t.integer().optional(),
            "ControlflowStats": t.proxy(
                renames["TrawlerFetchReplyDataFetchStatsStateStatsIn"]
            ),
            "DownLoadTime": t.integer().optional(),
            "ConnectTimeMs": t.integer().optional(),
            "EdgeEgressOverheadMs": t.integer().optional(),
            "TransferTimeMs": t.integer().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataFetchStatsIn"])
    types["TrawlerFetchReplyDataFetchStatsOut"] = t.struct(
        {
            "ServerResponseTimeMs": t.integer().optional(),
            "BotOverheadMS": t.integer().optional(),
            "ClientControlflowStats": t.proxy(
                renames["TrawlerFetchReplyDataFetchStatsClientStateStatsOut"]
            ),
            "SSLConnectTimeMs": t.integer().optional(),
            "ControlflowStats": t.proxy(
                renames["TrawlerFetchReplyDataFetchStatsStateStatsOut"]
            ),
            "DownLoadTime": t.integer().optional(),
            "ConnectTimeMs": t.integer().optional(),
            "EdgeEgressOverheadMs": t.integer().optional(),
            "TransferTimeMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataFetchStatsOut"])
    types["SdrScrollToOnPageMatchesIn"] = t.struct(
        {
            "textWithPrefix": t.integer(),
            "textWithPrefixSuffix": t.integer(),
            "text": t.integer(),
            "textWithSuffix": t.integer(),
        }
    ).named(renames["SdrScrollToOnPageMatchesIn"])
    types["SdrScrollToOnPageMatchesOut"] = t.struct(
        {
            "textWithPrefix": t.integer(),
            "textWithPrefixSuffix": t.integer(),
            "text": t.integer(),
            "textWithSuffix": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrScrollToOnPageMatchesOut"])
    types["GoogleCloudContentwarehouseV1PropertyFilterIn"] = t.struct(
        {
            "documentSchemaName": t.string().optional(),
            "condition": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyFilterIn"])
    types["GoogleCloudContentwarehouseV1PropertyFilterOut"] = t.struct(
        {
            "documentSchemaName": t.string().optional(),
            "condition": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyFilterOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerIn"
    ] = t.struct({"email": t.string(), "personId": t.string()}).named(
        renames["AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerOut"
    ] = t.struct(
        {
            "email": t.string(),
            "personId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerOut"
        ]
    )
    types["VideoAssetsVenomACLIn"] = t.struct(
        {
            "owner": t.string().optional(),
            "writer": t.array(t.string()).optional(),
            "reader": t.array(t.string()).optional(),
        }
    ).named(renames["VideoAssetsVenomACLIn"])
    types["VideoAssetsVenomACLOut"] = t.struct(
        {
            "owner": t.string().optional(),
            "writer": t.array(t.string()).optional(),
            "reader": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoAssetsVenomACLOut"])
    types["GoogleInternalAppsWaldoV1alphaInMeetingIn"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "nextAvailable": t.string().optional(),
            "eventSummary": t.string().optional(),
            "inMeetingsUntil": t.string().optional(),
            "occupiedUntil": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaInMeetingIn"])
    types["GoogleInternalAppsWaldoV1alphaInMeetingOut"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "nextAvailable": t.string().optional(),
            "eventSummary": t.string().optional(),
            "inMeetingsUntil": t.string().optional(),
            "occupiedUntil": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaInMeetingOut"])
    types["YoutubeDiscoveryLegosLegosTaxonomicRelationshipIn"] = t.struct(
        {"score": t.number().optional(), "isRedundant": t.boolean().optional()}
    ).named(renames["YoutubeDiscoveryLegosLegosTaxonomicRelationshipIn"])
    types["YoutubeDiscoveryLegosLegosTaxonomicRelationshipOut"] = t.struct(
        {
            "score": t.number().optional(),
            "isRedundant": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosTaxonomicRelationshipOut"])
    types["KnowledgeAnswersAnyTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersAnyTypeIn"])
    types["KnowledgeAnswersAnyTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersAnyTypeOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceIn"
    ] = t.struct({"sourceType": t.string()}).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceOut"
    ] = t.struct(
        {
            "sourceType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceOut"
        ]
    )
    types["VideoFileSphericalMetadataCroppedAreaIn"] = t.struct(
        {
            "left": t.integer(),
            "width": t.integer(),
            "top": t.integer(),
            "height": t.integer(),
        }
    ).named(renames["VideoFileSphericalMetadataCroppedAreaIn"])
    types["VideoFileSphericalMetadataCroppedAreaOut"] = t.struct(
        {
            "left": t.integer(),
            "width": t.integer(),
            "top": t.integer(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataCroppedAreaOut"])
    types["QualityNsrNSRVersionedDataIn"] = t.struct(
        {"versionId": t.integer().optional(), "value": t.number().optional()}
    ).named(renames["QualityNsrNSRVersionedDataIn"])
    types["QualityNsrNSRVersionedDataOut"] = t.struct(
        {
            "versionId": t.integer().optional(),
            "value": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNSRVersionedDataOut"])
    types["ImageRepositoryFileTruncationInfoIn"] = t.struct(
        {
            "originalFileSizeLowerBoundBytes": t.string().optional(),
            "truncationState": t.string().optional(),
        }
    ).named(renames["ImageRepositoryFileTruncationInfoIn"])
    types["ImageRepositoryFileTruncationInfoOut"] = t.struct(
        {
            "originalFileSizeLowerBoundBytes": t.string().optional(),
            "truncationState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryFileTruncationInfoOut"])
    types["GeostoreLogicalBorderProtoIn"] = t.struct(
        {
            "borderSegment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "status": t.string().optional(),
        }
    ).named(renames["GeostoreLogicalBorderProtoIn"])
    types["GeostoreLogicalBorderProtoOut"] = t.struct(
        {
            "borderSegment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "status": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLogicalBorderProtoOut"])
    types["DrishtiLabelSetDataIn"] = t.struct(
        {
            "targetValue": t.array(t.number()),
            "weight": t.number().optional(),
            "targetWeight": t.array(t.number()),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
            "targetClassName": t.array(t.string()),
            "targetClass": t.array(t.string()),
        }
    ).named(renames["DrishtiLabelSetDataIn"])
    types["DrishtiLabelSetDataOut"] = t.struct(
        {
            "targetValue": t.array(t.number()),
            "weight": t.number().optional(),
            "targetWeight": t.array(t.number()),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "targetClassName": t.array(t.string()),
            "targetClass": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiLabelSetDataOut"])
    types["ImageUnderstandingIndexingLabelGroupIn"] = t.struct(
        {
            "version": t.string(),
            "label": t.array(t.proxy(renames["ImageUnderstandingIndexingLabelIn"])),
        }
    ).named(renames["ImageUnderstandingIndexingLabelGroupIn"])
    types["ImageUnderstandingIndexingLabelGroupOut"] = t.struct(
        {
            "version": t.string(),
            "label": t.array(t.proxy(renames["ImageUnderstandingIndexingLabelOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingLabelGroupOut"])
    types["QualityShoppingShoppingAttachmentIn"] = t.struct(
        {
            "singleProductScore": t.integer(),
            "datasetModelProductReviewScore": t.integer(),
            "datasetModelProductTopnScore": t.integer(),
            "multiProductScore": t.integer().optional(),
            "shoppingSiteScore": t.integer().optional(),
            "shoppingSiteScoreShopfab": t.integer().optional(),
            "product": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentProductIn"])
            ),
            "datasetModelMultiProductScore": t.integer().optional(),
            "datasetModelForumSingleScore": t.integer(),
            "datasetModelProductComparisonScore": t.integer(),
            "datasetModelForumListScore": t.integer().optional(),
            "datasetModelQnaListScore": t.integer(),
            "datasetModelInStoreOnlyScore": t.integer(),
            "datasetModelArticleScore": t.integer().optional(),
            "datasetModelQnaSingleScore": t.integer(),
            "datasetModelBuyingGuideScore": t.integer(),
            "expiredShoppingPageScore": t.integer().optional(),
            "datasetModelSoldOutScore": t.integer(),
            "datasetModelIndirectAvailabilityScore": t.integer(),
            "datasetModelSingleProductScore": t.integer(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentIn"])
    types["QualityShoppingShoppingAttachmentOut"] = t.struct(
        {
            "singleProductScore": t.integer(),
            "datasetModelProductReviewScore": t.integer(),
            "datasetModelProductTopnScore": t.integer(),
            "multiProductScore": t.integer().optional(),
            "shoppingSiteScore": t.integer().optional(),
            "shoppingSiteScoreShopfab": t.integer().optional(),
            "product": t.array(
                t.proxy(renames["QualityShoppingShoppingAttachmentProductOut"])
            ),
            "datasetModelMultiProductScore": t.integer().optional(),
            "datasetModelForumSingleScore": t.integer(),
            "datasetModelProductComparisonScore": t.integer(),
            "datasetModelForumListScore": t.integer().optional(),
            "datasetModelQnaListScore": t.integer(),
            "datasetModelInStoreOnlyScore": t.integer(),
            "datasetModelArticleScore": t.integer().optional(),
            "datasetModelQnaSingleScore": t.integer(),
            "datasetModelBuyingGuideScore": t.integer(),
            "expiredShoppingPageScore": t.integer().optional(),
            "datasetModelSoldOutScore": t.integer(),
            "datasetModelIndirectAvailabilityScore": t.integer(),
            "datasetModelSingleProductScore": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentOut"])
    types["AssistantDevicesPlatformProtoIntentIn"] = t.struct(
        {
            "triggerConditions": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoTriggerConditionIn"])
            ).optional(),
            "executionConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoExecutionConfigIn"]
            ).optional(),
            "argSpecs": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "providedDataNames": t.array(t.string()).optional(),
            "securityConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoSecurityConfigIn"]
            ).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoIntentIn"])
    types["AssistantDevicesPlatformProtoIntentOut"] = t.struct(
        {
            "triggerConditions": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoTriggerConditionOut"])
            ).optional(),
            "executionConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoExecutionConfigOut"]
            ).optional(),
            "argSpecs": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "providedDataNames": t.array(t.string()).optional(),
            "securityConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoSecurityConfigOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoIntentOut"])
    types["GoogleCloudContentwarehouseV1PropertyDefinitionIn"] = t.struct(
        {
            "displayName": t.string().optional(),
            "integerTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1IntegerTypeOptionsIn"]
            ).optional(),
            "timestampTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampTypeOptionsIn"]
            ).optional(),
            "propertyTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1PropertyTypeOptionsIn"]
            ).optional(),
            "isFilterable": t.boolean().optional(),
            "isSearchable": t.boolean().optional(),
            "dateTimeTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1DateTimeTypeOptionsIn"]
            ).optional(),
            "isMetadata": t.boolean().optional(),
            "isRepeatable": t.boolean().optional(),
            "schemaSources": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceIn"
                    ]
                )
            ).optional(),
            "mapTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1MapTypeOptionsIn"]
            ).optional(),
            "retrievalImportance": t.string().optional(),
            "floatTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1FloatTypeOptionsIn"]
            ).optional(),
            "name": t.string(),
            "enumTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumTypeOptionsIn"]
            ).optional(),
            "isRequired": t.boolean().optional(),
            "textTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1TextTypeOptionsIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"])
    types["GoogleCloudContentwarehouseV1PropertyDefinitionOut"] = t.struct(
        {
            "displayName": t.string().optional(),
            "integerTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1IntegerTypeOptionsOut"]
            ).optional(),
            "timestampTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampTypeOptionsOut"]
            ).optional(),
            "propertyTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1PropertyTypeOptionsOut"]
            ).optional(),
            "isFilterable": t.boolean().optional(),
            "isSearchable": t.boolean().optional(),
            "dateTimeTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1DateTimeTypeOptionsOut"]
            ).optional(),
            "isMetadata": t.boolean().optional(),
            "isRepeatable": t.boolean().optional(),
            "schemaSources": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceOut"
                    ]
                )
            ).optional(),
            "mapTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1MapTypeOptionsOut"]
            ).optional(),
            "retrievalImportance": t.string().optional(),
            "floatTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1FloatTypeOptionsOut"]
            ).optional(),
            "name": t.string(),
            "enumTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumTypeOptionsOut"]
            ).optional(),
            "isRequired": t.boolean().optional(),
            "textTypeOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1TextTypeOptionsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyDefinitionOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursIn"] = t.struct(
        {
            "weekdayTexts": t.array(t.string()).optional(),
            "openNow": t.boolean().optional(),
            "periods": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodIn"]
                )
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursOut"] = t.struct(
        {
            "weekdayTexts": t.array(t.string()).optional(),
            "openNow": t.boolean().optional(),
            "periods": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodOut"]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn"] = t.struct(
        {
            "id": t.string().optional(),
            "rawDeviceContactAnalyticalInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoIn"
                ]
            ).optional(),
            "accountName": t.string().optional(),
            "appContactData": t.array(
                t.proxy(renames["SocialGraphApiAppContactDataIn"])
            ).optional(),
            "appInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoIn"]
            ).optional(),
            "crossDeviceAllowed": t.boolean().optional(),
            "googleContactId": t.string().optional(),
            "deviceContactMetadata": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn"
                ]
            ).optional(),
            "accountType": t.string().optional(),
            "photoType": t.string().optional(),
            "rawContactId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "rawDeviceContactAnalyticalInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoOut"
                ]
            ).optional(),
            "accountName": t.string().optional(),
            "appContactData": t.array(
                t.proxy(renames["SocialGraphApiAppContactDataOut"])
            ).optional(),
            "appInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoOut"]
            ).optional(),
            "crossDeviceAllowed": t.boolean().optional(),
            "googleContactId": t.string().optional(),
            "deviceContactMetadata": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut"
                ]
            ).optional(),
            "accountType": t.string().optional(),
            "photoType": t.string().optional(),
            "rawContactId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut"])
    types["GeostoreThreeDimensionalModelProtoIn"] = t.struct(
        {
            "pointIndices": t.array(t.integer()).optional(),
            "points": t.array(
                t.proxy(renames["GeostorePointWithHeightProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreThreeDimensionalModelProtoIn"])
    types["GeostoreThreeDimensionalModelProtoOut"] = t.struct(
        {
            "pointIndices": t.array(t.integer()).optional(),
            "points": t.array(
                t.proxy(renames["GeostorePointWithHeightProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreThreeDimensionalModelProtoOut"])
    types["CopleySubreferenceReferenceIn"] = t.struct(
        {
            "relationshipLexicalInfo": t.proxy(
                renames["CopleyLexicalMetadataIn"]
            ).optional(),
            "personalReferenceTypes": t.array(t.string()).optional(),
            "referenceScore": t.number().optional(),
        }
    ).named(renames["CopleySubreferenceReferenceIn"])
    types["CopleySubreferenceReferenceOut"] = t.struct(
        {
            "relationshipLexicalInfo": t.proxy(
                renames["CopleyLexicalMetadataOut"]
            ).optional(),
            "personalReferenceTypes": t.array(t.string()).optional(),
            "referenceScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleySubreferenceReferenceOut"])
    types["RepositoryWebrefMentionAdditionalExplainedRangeIn"] = t.struct(
        {
            "endTokenIndex": t.integer(),
            "end": t.integer(),
            "beginTokenIndex": t.integer(),
            "begin": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefMentionAdditionalExplainedRangeIn"])
    types["RepositoryWebrefMentionAdditionalExplainedRangeOut"] = t.struct(
        {
            "endTokenIndex": t.integer(),
            "end": t.integer(),
            "beginTokenIndex": t.integer(),
            "begin": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionAdditionalExplainedRangeOut"])
    types["GoogleCloudContentwarehouseV1ListLinkedSourcesResponseIn"] = t.struct(
        {
            "documentLinks": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentLinkIn"])
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedSourcesResponseIn"])
    types["GoogleCloudContentwarehouseV1ListLinkedSourcesResponseOut"] = t.struct(
        {
            "documentLinks": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentLinkOut"])
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedSourcesResponseOut"])
    types["GeostoreBestLocaleProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "localizationPolicyId": t.string().optional(),
            "locale": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreBestLocaleProtoIn"])
    types["GeostoreBestLocaleProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "localizationPolicyId": t.string().optional(),
            "locale": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBestLocaleProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiNameIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "honorificSuffix": t.string(),
            "yomiFamilyName": t.string(),
            "displayNameLastFirst": t.string().optional(),
            "yomiFullName": t.string(),
            "familyName": t.string(),
            "middleName": t.string(),
            "givenName": t.string(),
            "pronunciations": t.proxy(
                renames["SocialGraphApiProtoPronunciationsIn"]
            ).optional(),
            "yomiHonorificSuffix": t.string(),
            "displayName": t.string().optional(),
            "formattedName": t.string().optional(),
            "displayNameSource": t.proxy(
                renames["SocialGraphApiProtoDisplayNameSourceIn"]
            ).optional(),
            "shortDisplayName": t.string().optional(),
            "yomiHonorificPrefix": t.string(),
            "yomiGivenName": t.string(),
            "honorificPrefix": t.string(),
            "yomiMiddleName": t.string(),
            "unstructuredName": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiNameIn"])
    types["AppsPeopleOzExternalMergedpeopleapiNameOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "honorificSuffix": t.string(),
            "yomiFamilyName": t.string(),
            "displayNameLastFirst": t.string().optional(),
            "yomiFullName": t.string(),
            "familyName": t.string(),
            "middleName": t.string(),
            "givenName": t.string(),
            "pronunciations": t.proxy(
                renames["SocialGraphApiProtoPronunciationsOut"]
            ).optional(),
            "yomiHonorificSuffix": t.string(),
            "displayName": t.string().optional(),
            "formattedName": t.string().optional(),
            "displayNameSource": t.proxy(
                renames["SocialGraphApiProtoDisplayNameSourceOut"]
            ).optional(),
            "shortDisplayName": t.string().optional(),
            "yomiHonorificPrefix": t.string(),
            "yomiGivenName": t.string(),
            "honorificPrefix": t.string(),
            "yomiMiddleName": t.string(),
            "unstructuredName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiNameOut"])
    types["AssistantLogsDefaultDevicesLogIn"] = t.struct(
        {
            "localDefaultDevices": t.proxy(renames["AssistantLogsDefaultDeviceLogIn"]),
            "nearbyDefaultDevices": t.array(
                t.proxy(renames["AssistantLogsDefaultDeviceLogIn"])
            ).optional(),
        }
    ).named(renames["AssistantLogsDefaultDevicesLogIn"])
    types["AssistantLogsDefaultDevicesLogOut"] = t.struct(
        {
            "localDefaultDevices": t.proxy(renames["AssistantLogsDefaultDeviceLogOut"]),
            "nearbyDefaultDevices": t.array(
                t.proxy(renames["AssistantLogsDefaultDeviceLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDefaultDevicesLogOut"])
    types["I18nPhonenumbersPhoneNumberIn"] = t.struct(
        {
            "nationalNumber": t.string().optional(),
            "countryCodeSource": t.string().optional(),
            "countryCode": t.integer().optional(),
            "numberOfLeadingZeros": t.integer().optional(),
            "extension": t.string().optional(),
            "rawInput": t.string().optional(),
            "italianLeadingZero": t.boolean().optional(),
            "preferredDomesticCarrierCode": t.string().optional(),
        }
    ).named(renames["I18nPhonenumbersPhoneNumberIn"])
    types["I18nPhonenumbersPhoneNumberOut"] = t.struct(
        {
            "nationalNumber": t.string().optional(),
            "countryCodeSource": t.string().optional(),
            "countryCode": t.integer().optional(),
            "numberOfLeadingZeros": t.integer().optional(),
            "extension": t.string().optional(),
            "rawInput": t.string().optional(),
            "italianLeadingZero": t.boolean().optional(),
            "preferredDomesticCarrierCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["I18nPhonenumbersPhoneNumberOut"])
    types["QualityLabelsGoogleLabelDataLabelIn"] = t.struct(
        {
            "globalLabelValue": t.number(),
            "globalLabelBucket": t.integer().optional(),
            "providerId": t.array(t.string()),
            "provider": t.array(
                t.proxy(renames["QualityLabelsGoogleLabelDataLabelProviderIn"])
            ),
            "confidence": t.number().optional(),
            "labelName": t.string(),
            "labelId": t.integer().optional(),
        }
    ).named(renames["QualityLabelsGoogleLabelDataLabelIn"])
    types["QualityLabelsGoogleLabelDataLabelOut"] = t.struct(
        {
            "globalLabelValue": t.number(),
            "globalLabelBucket": t.integer().optional(),
            "providerId": t.array(t.string()),
            "provider": t.array(
                t.proxy(renames["QualityLabelsGoogleLabelDataLabelProviderOut"])
            ),
            "confidence": t.number().optional(),
            "labelName": t.string(),
            "labelId": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityLabelsGoogleLabelDataLabelOut"])
    types["GoogleCloudDocumentaiV1DocumentPageLineIn"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageLineIn"])
    types["GoogleCloudDocumentaiV1DocumentPageLineOut"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageLineOut"])
    types["GoogleCloudDocumentaiV1DocumentPageVisualElementIn"] = t.struct(
        {
            "type": t.string().optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageVisualElementIn"])
    types["GoogleCloudDocumentaiV1DocumentPageVisualElementOut"] = t.struct(
        {
            "type": t.string().optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageVisualElementOut"])
    types["GeostoreRawDataProtoIn"] = t.struct(
        {"valueString": t.string().optional(), "key": t.string().optional()}
    ).named(renames["GeostoreRawDataProtoIn"])
    types["GeostoreRawDataProtoOut"] = t.struct(
        {
            "valueString": t.string().optional(),
            "key": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRawDataProtoOut"])
    types["AssistantVerticalsHomeautomationProtoAgentInformationIn"] = t.struct(
        {
            "authType": t.string(),
            "key": t.string().optional(),
            "executionPath": t.string(),
            "deviceSource": t.string(),
            "id": t.string().optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAgentInformationIn"])
    types["AssistantVerticalsHomeautomationProtoAgentInformationOut"] = t.struct(
        {
            "authType": t.string(),
            "key": t.string().optional(),
            "executionPath": t.string(),
            "deviceSource": t.string(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAgentInformationOut"])
    types["QualitySalientCountriesSalientCountrySetIn"] = t.struct(
        {
            "salientCountry": t.array(
                t.proxy(renames["QualitySalientCountriesSalientCountryIn"])
            ),
            "packedCountry": t.array(t.integer()).optional(),
            "packedSalience": t.array(t.integer()),
        }
    ).named(renames["QualitySalientCountriesSalientCountrySetIn"])
    types["QualitySalientCountriesSalientCountrySetOut"] = t.struct(
        {
            "salientCountry": t.array(
                t.proxy(renames["QualitySalientCountriesSalientCountryOut"])
            ),
            "packedCountry": t.array(t.integer()).optional(),
            "packedSalience": t.array(t.integer()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientCountriesSalientCountrySetOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPhotoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "viewerUrl": t.string().optional(),
            "originalPhoto": t.proxy(
                renames["SocialGraphApiProtoImageReferenceIn"]
            ).optional(),
            "decoration": t.array(
                t.proxy(renames["SocialGraphApiProtoDecorationOverlayIn"])
            ).optional(),
            "emojiAvatarUrl": t.string().optional(),
            "isMonogram": t.boolean().optional(),
            "glyph": t.string().optional(),
            "monogramBackground": t.string().optional(),
            "isDefault": t.boolean().optional(),
            "htmlAttribution": t.array(t.string()).optional(),
            "photoId": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdIn"]
            ).optional(),
            "url": t.string().optional(),
            "photoToken": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhotoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPhotoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "viewerUrl": t.string().optional(),
            "originalPhoto": t.proxy(
                renames["SocialGraphApiProtoImageReferenceOut"]
            ).optional(),
            "decoration": t.array(
                t.proxy(renames["SocialGraphApiProtoDecorationOverlayOut"])
            ).optional(),
            "emojiAvatarUrl": t.string().optional(),
            "isMonogram": t.boolean().optional(),
            "glyph": t.string().optional(),
            "monogramBackground": t.string().optional(),
            "isDefault": t.boolean().optional(),
            "htmlAttribution": t.array(t.string()).optional(),
            "photoId": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdOut"]
            ).optional(),
            "url": t.string().optional(),
            "photoToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhotoOut"])
    types["QualityTimebasedPageTypeIn"] = t.struct(
        {
            "isForumPage": t.boolean().optional(),
            "isPageWithFreshRepeatedDates": t.boolean().optional(),
            "isQnaPage": t.boolean().optional(),
        }
    ).named(renames["QualityTimebasedPageTypeIn"])
    types["QualityTimebasedPageTypeOut"] = t.struct(
        {
            "isForumPage": t.boolean().optional(),
            "isPageWithFreshRepeatedDates": t.boolean().optional(),
            "isQnaPage": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedPageTypeOut"])
    types["AssistantApiCarAssistantCapabilitiesIn"] = t.struct(
        {"shouldPuntMultiAssistantMode": t.boolean().optional()}
    ).named(renames["AssistantApiCarAssistantCapabilitiesIn"])
    types["AssistantApiCarAssistantCapabilitiesOut"] = t.struct(
        {
            "shouldPuntMultiAssistantMode": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCarAssistantCapabilitiesOut"])
    types["RepositoryWebrefPreprocessingOriginalNamesOriginalNameIn"] = t.struct(
        {
            "count": t.integer().optional(),
            "source": t.array(t.integer()).optional(),
            "text": t.string().optional(),
            "score": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingOriginalNamesOriginalNameIn"])
    types["RepositoryWebrefPreprocessingOriginalNamesOriginalNameOut"] = t.struct(
        {
            "count": t.integer().optional(),
            "source": t.array(t.integer()).optional(),
            "text": t.string().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingOriginalNamesOriginalNameOut"])
    types["SocialCommonSegmentIn"] = t.struct(
        {
            "formatting": t.proxy(renames["SocialCommonFormattingIn"]).optional(),
            "linkData": t.proxy(renames["SocialCommonLinkDataIn"]).optional(),
            "type": t.string().optional(),
            "userMentionData": t.proxy(
                renames["SocialCommonUserMentionDataIn"]
            ).optional(),
            "searchLinkData": t.proxy(
                renames["SocialCommonSearchLinkDataIn"]
            ).optional(),
            "hashtagData": t.proxy(renames["SocialCommonHashtagDataIn"]).optional(),
            "text": t.string().optional(),
        }
    ).named(renames["SocialCommonSegmentIn"])
    types["SocialCommonSegmentOut"] = t.struct(
        {
            "formatting": t.proxy(renames["SocialCommonFormattingOut"]).optional(),
            "linkData": t.proxy(renames["SocialCommonLinkDataOut"]).optional(),
            "type": t.string().optional(),
            "userMentionData": t.proxy(
                renames["SocialCommonUserMentionDataOut"]
            ).optional(),
            "searchLinkData": t.proxy(
                renames["SocialCommonSearchLinkDataOut"]
            ).optional(),
            "hashtagData": t.proxy(renames["SocialCommonHashtagDataOut"]).optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonSegmentOut"])
    types["ImageRepositoryVideoPropertiesIn"] = t.struct(
        {
            "contentBasedMetadata": t.proxy(
                renames["ImageRepositoryContentBasedVideoMetadataIn"]
            ).optional(),
            "firstCrawlTimestampSec": t.string().optional(),
            "audioOnly": t.boolean().optional(),
            "firstProcessingTimestampSec": t.string().optional(),
            "inlinePlayback": t.proxy(
                renames["VideoCrawlVideoInlinePlaybackMetadataIn"]
            ).optional(),
            "lastProcessingTimestampSec": t.string().optional(),
            "crawlState": t.proxy(renames["ImageMoosedogCrawlStateIn"]).optional(),
            "url": t.string().optional(),
            "lastCrawlRequestTimestampSec": t.string().optional(),
        }
    ).named(renames["ImageRepositoryVideoPropertiesIn"])
    types["ImageRepositoryVideoPropertiesOut"] = t.struct(
        {
            "contentBasedMetadata": t.proxy(
                renames["ImageRepositoryContentBasedVideoMetadataOut"]
            ).optional(),
            "firstCrawlTimestampSec": t.string().optional(),
            "audioOnly": t.boolean().optional(),
            "firstProcessingTimestampSec": t.string().optional(),
            "inlinePlayback": t.proxy(
                renames["VideoCrawlVideoInlinePlaybackMetadataOut"]
            ).optional(),
            "lastProcessingTimestampSec": t.string().optional(),
            "crawlState": t.proxy(renames["ImageMoosedogCrawlStateOut"]).optional(),
            "url": t.string().optional(),
            "lastCrawlRequestTimestampSec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVideoPropertiesOut"])
    types["AssistantApiContactLookupCapabilitiesIn"] = t.struct(
        {"fallbackToTetheredDevice": t.boolean().optional()}
    ).named(renames["AssistantApiContactLookupCapabilitiesIn"])
    types["AssistantApiContactLookupCapabilitiesOut"] = t.struct(
        {
            "fallbackToTetheredDevice": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiContactLookupCapabilitiesOut"])
    types["GeostoreWeightProtoIn"] = t.struct(
        {"weight": t.number(), "unit": t.string()}
    ).named(renames["GeostoreWeightProtoIn"])
    types["GeostoreWeightProtoOut"] = t.struct(
        {
            "weight": t.number(),
            "unit": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreWeightProtoOut"])
    types["SocialGraphApiProtoWeeklyRecurrenceIn"] = t.struct(
        {"weekDay": t.array(t.string()).optional()}
    ).named(renames["SocialGraphApiProtoWeeklyRecurrenceIn"])
    types["SocialGraphApiProtoWeeklyRecurrenceOut"] = t.struct(
        {
            "weekDay": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoWeeklyRecurrenceOut"])
    types["ResearchScienceSearchDateIn"] = t.struct(
        {"unformatted": t.string(), "formatted": t.string()}
    ).named(renames["ResearchScienceSearchDateIn"])
    types["ResearchScienceSearchDateOut"] = t.struct(
        {
            "unformatted": t.string(),
            "formatted": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchDateOut"])
    types["SecurityCredentialsGaiaUserProtoIn"] = t.struct(
        {"userId": t.string()}
    ).named(renames["SecurityCredentialsGaiaUserProtoIn"])
    types["SecurityCredentialsGaiaUserProtoOut"] = t.struct(
        {"userId": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsGaiaUserProtoOut"])
    types["QualitySitemapTopURLIn"] = t.struct(
        {"score": t.number(), "url": t.string()}
    ).named(renames["QualitySitemapTopURLIn"])
    types["QualitySitemapTopURLOut"] = t.struct(
        {
            "score": t.number(),
            "url": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapTopURLOut"])
    types["GoogleIamV1PolicyIn"] = t.struct(
        {
            "version": t.integer().optional(),
            "bindings": t.array(t.proxy(renames["GoogleIamV1BindingIn"])).optional(),
            "etag": t.string().optional(),
            "auditConfigs": t.array(
                t.proxy(renames["GoogleIamV1AuditConfigIn"])
            ).optional(),
        }
    ).named(renames["GoogleIamV1PolicyIn"])
    types["GoogleIamV1PolicyOut"] = t.struct(
        {
            "version": t.integer().optional(),
            "bindings": t.array(t.proxy(renames["GoogleIamV1BindingOut"])).optional(),
            "etag": t.string().optional(),
            "auditConfigs": t.array(
                t.proxy(renames["GoogleIamV1AuditConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleIamV1PolicyOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderTreeNodeIn"] = t.struct(
        {
            "renderedText": t.string().optional(),
            "styleIndex": t.integer().optional(),
            "childRenderTreeNodeIndex": t.array(t.integer()).optional(),
            "inlineTextBox": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxIn"
                    ]
                )
            ),
            "domTreeNodeIndex": t.integer().optional(),
            "box": t.proxy(renames["HtmlrenderWebkitHeadlessProtoBoxIn"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderTreeNodeOut"] = t.struct(
        {
            "renderedText": t.string().optional(),
            "styleIndex": t.integer().optional(),
            "childRenderTreeNodeIndex": t.array(t.integer()).optional(),
            "inlineTextBox": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBoxOut"
                    ]
                )
            ),
            "domTreeNodeIndex": t.integer().optional(),
            "box": t.proxy(renames["HtmlrenderWebkitHeadlessProtoBoxOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeOut"])
    types["SafesearchVideoClassifierOutputIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SafesearchVideoClassifierOutputIn"])
    types["SafesearchVideoClassifierOutputOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SafesearchVideoClassifierOutputOut"])
    types["AssistantApiSettingsDeviceDowntimeSettingsIn"] = t.struct(
        {
            "targets": t.array(t.string()).optional(),
            "schedules": t.array(
                t.proxy(renames["AssistantApiSettingsLabeledDowntimeScheduleIn"])
            ),
        }
    ).named(renames["AssistantApiSettingsDeviceDowntimeSettingsIn"])
    types["AssistantApiSettingsDeviceDowntimeSettingsOut"] = t.struct(
        {
            "targets": t.array(t.string()).optional(),
            "schedules": t.array(
                t.proxy(renames["AssistantApiSettingsLabeledDowntimeScheduleOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceDowntimeSettingsOut"])
    types["BlueGingerClientVisibleProtoBlueGingerSupportedServicesIn"] = t.struct(
        {
            "modules": t.array(
                t.proxy(
                    renames[
                        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleIn"
                    ]
                )
            ).optional()
        }
    ).named(renames["BlueGingerClientVisibleProtoBlueGingerSupportedServicesIn"])
    types["BlueGingerClientVisibleProtoBlueGingerSupportedServicesOut"] = t.struct(
        {
            "modules": t.array(
                t.proxy(
                    renames[
                        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlueGingerClientVisibleProtoBlueGingerSupportedServicesOut"])
    types["QualityQrewriteFamilyCalendarAliasIn"] = t.struct(
        {"familyCalendarId": t.string()}
    ).named(renames["QualityQrewriteFamilyCalendarAliasIn"])
    types["QualityQrewriteFamilyCalendarAliasOut"] = t.struct(
        {
            "familyCalendarId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteFamilyCalendarAliasOut"])
    types["DrishtiVesperUserReportModelScoreIn"] = t.struct(
        {"modelName": t.string(), "score": t.number()}
    ).named(renames["DrishtiVesperUserReportModelScoreIn"])
    types["DrishtiVesperUserReportModelScoreOut"] = t.struct(
        {
            "modelName": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperUserReportModelScoreOut"])
    types["KnowledgeAnswersIntentQueryArgumentValueIn"] = t.struct(
        {
            "simpleValue": t.proxy(
                renames["KnowledgeAnswersIntentQuerySimpleValueIn"]
            ).optional(),
            "aogSlot": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotIn"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "calendarEventWrapper": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventWrapperIn"]
            ).optional(),
            "audio": t.proxy(renames["NlpSemanticParsingModelsMediaAudioIn"]),
            "reminder": t.proxy(renames["QualityActionsReminderIn"]),
            "funcall": t.proxy(
                renames["KnowledgeAnswersIntentQueryFunctionCallIn"]
            ).optional(),
            "homeAutomationDevice": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceIn"]
            ).optional(),
            "coreference": t.proxy(
                renames["KnowledgeAnswersIntentQueryCoreferenceIn"]
            ).optional(),
            "deviceUserIdentity": t.proxy(
                renames["AssistantApiCoreTypesDeviceUserIdentityIn"]
            ).optional(),
            "productivityListItem": t.proxy(renames["AssistantProductivityListItemIn"]),
            "duration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationIn"]
            ).optional(),
            "messageNotification": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationIn"]
            ).optional(),
            "sensitiveValue": t.proxy(
                renames["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardIn"]
            ).optional(),
            "complexQueriesRewrite": t.proxy(
                renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteIn"]
            ).optional(),
            "appAnnotation": t.proxy(
                renames["NlpSemanticParsingAppAnnotationIn"]
            ).optional(),
            "calendarReference": t.proxy(renames["QualityQrewriteCalendarReferenceIn"]),
            "device": t.proxy(
                renames["NlpSemanticParsingModelsMediaCastDeviceAnnotationIn"]
            ).optional(),
            "sensitivity": t.array(
                t.proxy(renames["KnowledgeAnswersSensitivitySensitivityIn"])
            ).optional(),
            "componentReference": t.proxy(
                renames["RepositoryWebrefComponentReferenceIn"]
            ).optional(),
            "recurrence": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceIn"]
            ).optional(),
            "shoppingProduct": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductIn"]
            ),
            "shoppingStore": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantStoreIn"]
            ),
            "shoppingProductExpression": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductExpressionIn"]
            ),
            "onDevice": t.proxy(
                renames["NlpSemanticParsingModelsOnDeviceIn"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "number": t.proxy(renames["NlpSemanticParsingNumberNumberIn"]).optional(),
            "person": t.proxy(
                renames["NlpSemanticParsingModelsPersonPersonIn"]
            ).optional(),
            "personalIntelligenceEntity": t.proxy(
                renames["NlpSemanticParsingPersonalIntelligenceEntityIn"]
            ).optional(),
            "shoppingOffer": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantOfferIn"]
            ).optional(),
            "narrativeNewsProvider": t.proxy(
                renames["NlpSemanticParsingModelsNarrativeNewsNewsProviderIn"]
            ).optional(),
            "money": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyIn"]
            ).optional(),
            "shoppingMerchant": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantMerchantIn"]
            ),
            "timezone": t.proxy(
                renames["NlpSemanticParsingDatetimeTimeZoneIn"]
            ).optional(),
            "timer": t.proxy(renames["QualityActionsTimerIn"]).optional(),
            "location": t.proxy(
                renames["NlpSemanticParsingLocalLocationIn"]
            ).optional(),
            "media": t.proxy(renames["NlpSemanticParsingModelsMediaMediaAnnotationIn"]),
            "calendarEvent": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentValueIn"])
    types["KnowledgeAnswersIntentQueryArgumentValueOut"] = t.struct(
        {
            "simpleValue": t.proxy(
                renames["KnowledgeAnswersIntentQuerySimpleValueOut"]
            ).optional(),
            "aogSlot": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotOut"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "calendarEventWrapper": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventWrapperOut"]
            ).optional(),
            "audio": t.proxy(renames["NlpSemanticParsingModelsMediaAudioOut"]),
            "reminder": t.proxy(renames["QualityActionsReminderOut"]),
            "funcall": t.proxy(
                renames["KnowledgeAnswersIntentQueryFunctionCallOut"]
            ).optional(),
            "homeAutomationDevice": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceOut"]
            ).optional(),
            "coreference": t.proxy(
                renames["KnowledgeAnswersIntentQueryCoreferenceOut"]
            ).optional(),
            "deviceUserIdentity": t.proxy(
                renames["AssistantApiCoreTypesDeviceUserIdentityOut"]
            ).optional(),
            "productivityListItem": t.proxy(
                renames["AssistantProductivityListItemOut"]
            ),
            "duration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationOut"]
            ).optional(),
            "messageNotification": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationOut"]
            ).optional(),
            "sensitiveValue": t.proxy(
                renames["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardOut"]
            ).optional(),
            "complexQueriesRewrite": t.proxy(
                renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteOut"]
            ).optional(),
            "appAnnotation": t.proxy(
                renames["NlpSemanticParsingAppAnnotationOut"]
            ).optional(),
            "calendarReference": t.proxy(
                renames["QualityQrewriteCalendarReferenceOut"]
            ),
            "device": t.proxy(
                renames["NlpSemanticParsingModelsMediaCastDeviceAnnotationOut"]
            ).optional(),
            "sensitivity": t.array(
                t.proxy(renames["KnowledgeAnswersSensitivitySensitivityOut"])
            ).optional(),
            "componentReference": t.proxy(
                renames["RepositoryWebrefComponentReferenceOut"]
            ).optional(),
            "recurrence": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceOut"]
            ).optional(),
            "shoppingProduct": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductOut"]
            ),
            "shoppingStore": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantStoreOut"]
            ),
            "shoppingProductExpression": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductExpressionOut"]
            ),
            "onDevice": t.proxy(
                renames["NlpSemanticParsingModelsOnDeviceOut"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "number": t.proxy(renames["NlpSemanticParsingNumberNumberOut"]).optional(),
            "person": t.proxy(
                renames["NlpSemanticParsingModelsPersonPersonOut"]
            ).optional(),
            "personalIntelligenceEntity": t.proxy(
                renames["NlpSemanticParsingPersonalIntelligenceEntityOut"]
            ).optional(),
            "shoppingOffer": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantOfferOut"]
            ).optional(),
            "narrativeNewsProvider": t.proxy(
                renames["NlpSemanticParsingModelsNarrativeNewsNewsProviderOut"]
            ).optional(),
            "money": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyOut"]
            ).optional(),
            "shoppingMerchant": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantMerchantOut"]
            ),
            "timezone": t.proxy(
                renames["NlpSemanticParsingDatetimeTimeZoneOut"]
            ).optional(),
            "timer": t.proxy(renames["QualityActionsTimerOut"]).optional(),
            "location": t.proxy(
                renames["NlpSemanticParsingLocalLocationOut"]
            ).optional(),
            "media": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationOut"]
            ),
            "calendarEvent": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentValueOut"])
    types["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceIn"] = t.struct(
        {
            "matchedItemValue": t.array(t.string()).optional(),
            "dtoQueryInfo": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoIn"
                ]
            ).optional(),
            "homeautomationMetadata": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn"
                ]
            ).optional(),
            "matchedItemKey": t.string().optional(),
            "list": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemIn"
                    ]
                )
            ).optional(),
            "dtoError": t.proxy(
                renames["AssistantDeviceTargetingDeviceTargetingErrorIn"]
            ),
            "matchedItemRawvalue": t.string().optional(),
            "deviceSelectionLog": t.proxy(
                renames["AssistantLogsDeviceSelectionLogIn"]
            ).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceIn"])
    types["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceOut"] = t.struct(
        {
            "matchedItemValue": t.array(t.string()).optional(),
            "dtoQueryInfo": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoOut"
                ]
            ).optional(),
            "homeautomationMetadata": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut"
                ]
            ).optional(),
            "matchedItemKey": t.string().optional(),
            "list": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemOut"
                    ]
                )
            ).optional(),
            "dtoError": t.proxy(
                renames["AssistantDeviceTargetingDeviceTargetingErrorOut"]
            ),
            "matchedItemRawvalue": t.string().optional(),
            "deviceSelectionLog": t.proxy(
                renames["AssistantLogsDeviceSelectionLogOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceOut"])
    types["RepositoryWebrefSemanticDateRangeIn"] = t.struct(
        {
            "end": t.string().optional(),
            "start": t.string().optional(),
            "startSourceProperty": t.string().optional(),
            "sourceEntityMid": t.string().optional(),
            "confidence": t.number().optional(),
            "endSourceProperty": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefSemanticDateRangeIn"])
    types["RepositoryWebrefSemanticDateRangeOut"] = t.struct(
        {
            "end": t.string().optional(),
            "start": t.string().optional(),
            "startSourceProperty": t.string().optional(),
            "sourceEntityMid": t.string().optional(),
            "confidence": t.number().optional(),
            "endSourceProperty": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSemanticDateRangeOut"])
    types["KnowledgeAnswersIntentQueryImpliedEntityIn"] = t.struct(
        {
            "isUngroundedValue": t.boolean().optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsIn"]
            ).optional(),
            "mid": t.string().optional(),
            "qrefConfidenceScore": t.number().optional(),
            "annotatedSpan": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryImpliedEntityIn"])
    types["KnowledgeAnswersIntentQueryImpliedEntityOut"] = t.struct(
        {
            "isUngroundedValue": t.boolean().optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsOut"]
            ).optional(),
            "mid": t.string().optional(),
            "qrefConfidenceScore": t.number().optional(),
            "annotatedSpan": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryImpliedEntityOut"])
    types["QualityPreviewRanklabSnippetIn"] = t.struct(
        {
            "snippetInfo": t.proxy(
                renames["QualityPreviewChosenSnippetInfoIn"]
            ).optional(),
            "isMuppetSelectedSnippet": t.boolean().optional(),
            "queryFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryFeaturesIn"]
            ).optional(),
            "experimentalFeatures": t.proxy(
                renames["QualityPreviewSnippetExperimentalFeaturesIn"]
            ).optional(),
            "queryTermCoverageFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesIn"]
            ).optional(),
            "finalScore": t.number().optional(),
            "qualityFeatures": t.proxy(
                renames["QualityPreviewSnippetQualityFeaturesIn"]
            ),
            "documentFeatures": t.proxy(
                renames["QualityPreviewSnippetDocumentFeaturesIn"]
            ),
            "originalQueryTermCoverageFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesIn"]
            ).optional(),
            "radishFeatures": t.proxy(
                renames["QualityPreviewSnippetRadishFeaturesIn"]
            ).optional(),
            "brainFeatures": t.proxy(
                renames["QualityPreviewSnippetBrainFeaturesIn"]
            ).optional(),
        }
    ).named(renames["QualityPreviewRanklabSnippetIn"])
    types["QualityPreviewRanklabSnippetOut"] = t.struct(
        {
            "snippetInfo": t.proxy(
                renames["QualityPreviewChosenSnippetInfoOut"]
            ).optional(),
            "isMuppetSelectedSnippet": t.boolean().optional(),
            "queryFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryFeaturesOut"]
            ).optional(),
            "experimentalFeatures": t.proxy(
                renames["QualityPreviewSnippetExperimentalFeaturesOut"]
            ).optional(),
            "queryTermCoverageFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesOut"]
            ).optional(),
            "finalScore": t.number().optional(),
            "qualityFeatures": t.proxy(
                renames["QualityPreviewSnippetQualityFeaturesOut"]
            ),
            "documentFeatures": t.proxy(
                renames["QualityPreviewSnippetDocumentFeaturesOut"]
            ),
            "originalQueryTermCoverageFeatures": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesOut"]
            ).optional(),
            "radishFeatures": t.proxy(
                renames["QualityPreviewSnippetRadishFeaturesOut"]
            ).optional(),
            "brainFeatures": t.proxy(
                renames["QualityPreviewSnippetBrainFeaturesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewRanklabSnippetOut"])
    types["GeostoreFeatureFieldMetadataProtoFieldProvenanceIn"] = t.struct(
        {
            "provenance": t.proxy(renames["GeostoreProvenanceProtoIn"]),
            "fieldPath": t.array(
                t.proxy(renames["GeostoreStableFieldPathProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreFeatureFieldMetadataProtoFieldProvenanceIn"])
    types["GeostoreFeatureFieldMetadataProtoFieldProvenanceOut"] = t.struct(
        {
            "provenance": t.proxy(renames["GeostoreProvenanceProtoOut"]),
            "fieldPath": t.array(
                t.proxy(renames["GeostoreStableFieldPathProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureFieldMetadataProtoFieldProvenanceOut"])
    types["AssistantProductivityListItemIn"] = t.struct(
        {"name": t.string().optional()}
    ).named(renames["AssistantProductivityListItemIn"])
    types["AssistantProductivityListItemOut"] = t.struct(
        {
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantProductivityListItemOut"])
    types["AssistantGroundingRankerLaaFeaturesContactIn"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesIn"]
            ),
            "deviceContactAffinityFeatures": t.proxy(
                renames["AssistantGroundingRankerDeviceContactAffinityFeaturesIn"]
            ),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesContactIn"])
    types["AssistantGroundingRankerLaaFeaturesContactOut"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesOut"]
            ),
            "deviceContactAffinityFeatures": t.proxy(
                renames["AssistantGroundingRankerDeviceContactAffinityFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesContactOut"])
    types["QualitySnippetsTruncationSnippetBoldedRangeIn"] = t.struct(
        {
            "text": t.string().optional(),
            "end": t.proxy(
                renames["QualitySnippetsTruncationSnippetBoldedRangePositionIn"]
            ),
            "begin": t.proxy(
                renames["QualitySnippetsTruncationSnippetBoldedRangePositionIn"]
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["QualitySnippetsTruncationSnippetBoldedRangeIn"])
    types["QualitySnippetsTruncationSnippetBoldedRangeOut"] = t.struct(
        {
            "text": t.string().optional(),
            "end": t.proxy(
                renames["QualitySnippetsTruncationSnippetBoldedRangePositionOut"]
            ),
            "begin": t.proxy(
                renames["QualitySnippetsTruncationSnippetBoldedRangePositionOut"]
            ).optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySnippetsTruncationSnippetBoldedRangeOut"])
    types["RepositoryWebrefLocalizedStringIn"] = t.struct(
        {
            "region": t.string().optional(),
            "sourceType": t.string().optional(),
            "domain": t.string().optional(),
            "fprintModifier": t.proxy(
                renames["RepositoryWebrefFprintModifierProtoIn"]
            ).optional(),
            "language": t.string().optional(),
            "normalizedString": t.string(),
            "originalString": t.string(),
        }
    ).named(renames["RepositoryWebrefLocalizedStringIn"])
    types["RepositoryWebrefLocalizedStringOut"] = t.struct(
        {
            "region": t.string().optional(),
            "sourceType": t.string().optional(),
            "domain": t.string().optional(),
            "fprintModifier": t.proxy(
                renames["RepositoryWebrefFprintModifierProtoOut"]
            ).optional(),
            "language": t.string().optional(),
            "normalizedString": t.string(),
            "originalString": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLocalizedStringOut"])
    types["AssistantApiProtobufIn"] = t.struct(
        {"protobufType": t.string().optional(), "protobufData": t.string().optional()}
    ).named(renames["AssistantApiProtobufIn"])
    types["AssistantApiProtobufOut"] = t.struct(
        {
            "protobufType": t.string().optional(),
            "protobufData": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiProtobufOut"])
    types["ResearchScamCoscamEasyConjunctionIn"] = t.struct(
        {
            "disjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamEasyDisjunctionIn"])
            ).optional()
        }
    ).named(renames["ResearchScamCoscamEasyConjunctionIn"])
    types["ResearchScamCoscamEasyConjunctionOut"] = t.struct(
        {
            "disjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamEasyDisjunctionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamEasyConjunctionOut"])
    types["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"] = t.struct(
        {
            "unit": t.string().optional(),
            "upperAmount": t.number(),
            "lowerAmount": t.number(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsNutritionFactIn"])
    types["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"] = t.struct(
        {
            "unit": t.string().optional(),
            "upperAmount": t.number(),
            "lowerAmount": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsNutritionFactOut"])
    types["GeostorePriceRangeProtoIn"] = t.struct(
        {
            "upperPrice": t.number(),
            "units": t.string().optional(),
            "lowerPrice": t.number().optional(),
            "currency": t.string().optional(),
        }
    ).named(renames["GeostorePriceRangeProtoIn"])
    types["GeostorePriceRangeProtoOut"] = t.struct(
        {
            "upperPrice": t.number(),
            "units": t.string().optional(),
            "lowerPrice": t.number().optional(),
            "currency": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceRangeProtoOut"])
    types["RepositoryWebrefPersonalizationContextOutputsIn"] = t.struct(
        {
            "outputs": t.array(
                t.proxy(renames["RepositoryWebrefPersonalizationContextOutputIn"])
            ).optional()
        }
    ).named(renames["RepositoryWebrefPersonalizationContextOutputsIn"])
    types["RepositoryWebrefPersonalizationContextOutputsOut"] = t.struct(
        {
            "outputs": t.array(
                t.proxy(renames["RepositoryWebrefPersonalizationContextOutputOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPersonalizationContextOutputsOut"])
    types["QualityPreviewChosenSnippetInfoTidbitInfoIn"] = t.struct(
        {
            "tidbitText": t.string().optional(),
            "tokenBegin": t.string().optional(),
            "sectionName": t.string().optional(),
            "tokenEnd": t.string(),
            "separator": t.string().optional(),
        }
    ).named(renames["QualityPreviewChosenSnippetInfoTidbitInfoIn"])
    types["QualityPreviewChosenSnippetInfoTidbitInfoOut"] = t.struct(
        {
            "tidbitText": t.string().optional(),
            "tokenBegin": t.string().optional(),
            "sectionName": t.string().optional(),
            "tokenEnd": t.string(),
            "separator": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewChosenSnippetInfoTidbitInfoOut"])
    types["SocialGraphApiProtoSearchProfileMetadataIn"] = t.struct(
        {
            "accountId": t.string().optional(),
            "state": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileStateIn"])
            ).optional(),
            "aresId": t.string().optional(),
            "accountMid": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileMetadataIn"])
    types["SocialGraphApiProtoSearchProfileMetadataOut"] = t.struct(
        {
            "accountId": t.string().optional(),
            "state": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileStateOut"])
            ).optional(),
            "aresId": t.string().optional(),
            "accountMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileMetadataOut"])
    types["PhotosVisionObjectrecImageTemplateIn"] = t.struct(
        {
            "objectInfo": t.array(t.string()).optional(),
            "authorName": t.string().optional(),
            "imageHeight": t.integer(),
            "imageWidth": t.integer().optional(),
            "objectName": t.string().optional(),
            "corpus": t.string().optional(),
            "subset": t.array(
                t.proxy(renames["PhotosVisionObjectrecImageTemplateSubSetIn"])
            ),
            "info": t.string(),
            "opaqueData": t.string().optional(),
            "globalFeature": t.array(
                t.proxy(renames["PhotosVisionObjectrecGlobalFeatureIn"])
            ),
            "imageUrl": t.string().optional(),
            "geoLocation": t.proxy(
                renames["PhotosVisionObjectrecGeoLocationIn"]
            ).optional(),
            "version": t.string().optional(),
            "roi": t.proxy(renames["PhotosVisionObjectrecROIIn"]).optional(),
            "imageId": t.string().optional(),
        }
    ).named(renames["PhotosVisionObjectrecImageTemplateIn"])
    types["PhotosVisionObjectrecImageTemplateOut"] = t.struct(
        {
            "objectInfo": t.array(t.string()).optional(),
            "authorName": t.string().optional(),
            "imageHeight": t.integer(),
            "imageWidth": t.integer().optional(),
            "objectName": t.string().optional(),
            "corpus": t.string().optional(),
            "subset": t.array(
                t.proxy(renames["PhotosVisionObjectrecImageTemplateSubSetOut"])
            ),
            "info": t.string(),
            "opaqueData": t.string().optional(),
            "globalFeature": t.array(
                t.proxy(renames["PhotosVisionObjectrecGlobalFeatureOut"])
            ),
            "imageUrl": t.string().optional(),
            "geoLocation": t.proxy(
                renames["PhotosVisionObjectrecGeoLocationOut"]
            ).optional(),
            "version": t.string().optional(),
            "roi": t.proxy(renames["PhotosVisionObjectrecROIOut"]).optional(),
            "imageId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecImageTemplateOut"])
    types["AssistantApiLiveTvChannelCapabilitiesIn"] = t.struct(
        {
            "channelsByProvider": t.array(
                t.proxy(
                    renames["AssistantApiLiveTvChannelCapabilitiesChannelsByProviderIn"]
                )
            ).optional()
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesIn"])
    types["AssistantApiLiveTvChannelCapabilitiesOut"] = t.struct(
        {
            "channelsByProvider": t.array(
                t.proxy(
                    renames[
                        "AssistantApiLiveTvChannelCapabilitiesChannelsByProviderOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesOut"])
    types["AssistantApiCoreTypesChromeOsAppInfoIn"] = t.struct(
        {
            "packageName": t.string().optional(),
            "localizedAppName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesChromeOsAppInfoIn"])
    types["AssistantApiCoreTypesChromeOsAppInfoOut"] = t.struct(
        {
            "packageName": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesChromeOsAppInfoOut"])
    types["GeostoreRightsStatusProtoIn"] = t.struct(
        {"fieldWithRights": t.array(t.proxy(renames["GeostoreFieldWithRightsProtoIn"]))}
    ).named(renames["GeostoreRightsStatusProtoIn"])
    types["GeostoreRightsStatusProtoOut"] = t.struct(
        {
            "fieldWithRights": t.array(
                t.proxy(renames["GeostoreFieldWithRightsProtoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRightsStatusProtoOut"])
    types["AssistantApiSettingsFeatureFiltersIn"] = t.struct(
        {
            "searchFilter": t.proxy(renames["AssistantApiSettingsSearchFilterIn"]),
            "communicationsFilter": t.proxy(
                renames["AssistantApiSettingsCommunicationsFilterIn"]
            ),
            "newsFilter": t.proxy(renames["AssistantApiSettingsNewsFilterIn"]),
            "musicFilter": t.proxy(renames["AssistantApiSettingsMusicFilterIn"]),
            "videoFilter": t.proxy(renames["AssistantApiSettingsVideoFilterIn"]),
            "thirdPartyAppsFilter": t.proxy(
                renames["AssistantApiSettingsThirdPartyAppsFilterIn"]
            ),
            "webviewFilter": t.proxy(renames["AssistantApiSettingsWebviewFilterIn"]),
            "podcastFilter": t.proxy(renames["AssistantApiSettingsPodcastFilterIn"]),
        }
    ).named(renames["AssistantApiSettingsFeatureFiltersIn"])
    types["AssistantApiSettingsFeatureFiltersOut"] = t.struct(
        {
            "searchFilter": t.proxy(renames["AssistantApiSettingsSearchFilterOut"]),
            "communicationsFilter": t.proxy(
                renames["AssistantApiSettingsCommunicationsFilterOut"]
            ),
            "newsFilter": t.proxy(renames["AssistantApiSettingsNewsFilterOut"]),
            "musicFilter": t.proxy(renames["AssistantApiSettingsMusicFilterOut"]),
            "videoFilter": t.proxy(renames["AssistantApiSettingsVideoFilterOut"]),
            "thirdPartyAppsFilter": t.proxy(
                renames["AssistantApiSettingsThirdPartyAppsFilterOut"]
            ),
            "webviewFilter": t.proxy(renames["AssistantApiSettingsWebviewFilterOut"]),
            "podcastFilter": t.proxy(renames["AssistantApiSettingsPodcastFilterOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsFeatureFiltersOut"])
    types[
        "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingIn"
    ] = t.struct(
        {"packedValue": t.array(t.string()).optional(), "value": t.array(t.string())}
    ).named(
        renames["QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingIn"]
    )
    types[
        "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingOut"
    ] = t.struct(
        {
            "packedValue": t.array(t.string()).optional(),
            "value": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingOut"]
    )
    types["QualityQrewriteCandidateIdIn"] = t.struct(
        {"field": t.array(t.proxy(renames["QualityQrewriteCandidateIdFieldIn"]))}
    ).named(renames["QualityQrewriteCandidateIdIn"])
    types["QualityQrewriteCandidateIdOut"] = t.struct(
        {
            "field": t.array(t.proxy(renames["QualityQrewriteCandidateIdFieldOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteCandidateIdOut"])
    types["NlpSemanticParsingLocalEvChargingStationSpeedConstraintIn"] = t.struct(
        {"chargingSpeed": t.string()}
    ).named(renames["NlpSemanticParsingLocalEvChargingStationSpeedConstraintIn"])
    types["NlpSemanticParsingLocalEvChargingStationSpeedConstraintOut"] = t.struct(
        {
            "chargingSpeed": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalEvChargingStationSpeedConstraintOut"])
    types["VideoContentSearchDescriptionSpanInfoIn"] = t.struct(
        {
            "dolphinScores": t.proxy(
                renames["VideoContentSearchSpanDolphinScoresIn"]
            ).optional(),
            "spanTokenCount": t.integer().optional(),
            "spanTokenCountRatio": t.number().optional(),
            "spanDolphinScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "contextTokenCount": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchDescriptionSpanInfoIn"])
    types["VideoContentSearchDescriptionSpanInfoOut"] = t.struct(
        {
            "dolphinScores": t.proxy(
                renames["VideoContentSearchSpanDolphinScoresOut"]
            ).optional(),
            "spanTokenCount": t.integer().optional(),
            "spanTokenCountRatio": t.number().optional(),
            "spanDolphinScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "contextTokenCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDescriptionSpanInfoOut"])
    types["SocialGraphApiProtoSearchProfileDataIn"] = t.struct(
        {
            "education": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEducationIn"])
            ),
            "location": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileLocationIn"])
            ),
            "workplace": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileWorkplaceIn"])
            ),
            "publicEmail": t.array(t.string()).optional(),
            "website": t.array(t.string()),
            "occupation": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"])
            ),
            "socialLink": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileSocialLinkIn"])
            ),
            "metadata": t.proxy(renames["SocialGraphApiProtoSearchProfileMetadataIn"]),
            "interest": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"])
            ),
            "description": t.string().optional(),
            "publicPhoneNumber": t.array(t.string()).optional(),
            "language": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileDataIn"])
    types["SocialGraphApiProtoSearchProfileDataOut"] = t.struct(
        {
            "education": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEducationOut"])
            ),
            "location": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileLocationOut"])
            ),
            "workplace": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileWorkplaceOut"])
            ),
            "publicEmail": t.array(t.string()).optional(),
            "website": t.array(t.string()),
            "occupation": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityOut"])
            ),
            "socialLink": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileSocialLinkOut"])
            ),
            "metadata": t.proxy(renames["SocialGraphApiProtoSearchProfileMetadataOut"]),
            "interest": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityOut"])
            ),
            "description": t.string().optional(),
            "publicPhoneNumber": t.array(t.string()).optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileDataOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotListIn"] = t.struct(
        {
            "slots": t.array(
                t.proxy(renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotIn"])
            )
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotListIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotListOut"] = t.struct(
        {
            "slots": t.array(
                t.proxy(renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotListOut"])
    types["PremiumPerDocDataIn"] = t.struct(
        {
            "Entitlement": t.array(t.integer()).optional(),
            "IsEntitled": t.boolean().optional(),
            "Date": t.string().optional(),
            "Publication": t.string().optional(),
            "Price": t.integer().optional(),
            "Currency": t.integer().optional(),
            "IsArchival": t.boolean().optional(),
        }
    ).named(renames["PremiumPerDocDataIn"])
    types["PremiumPerDocDataOut"] = t.struct(
        {
            "Entitlement": t.array(t.integer()).optional(),
            "IsEntitled": t.boolean().optional(),
            "Date": t.string().optional(),
            "Publication": t.string().optional(),
            "Price": t.integer().optional(),
            "Currency": t.integer().optional(),
            "IsArchival": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PremiumPerDocDataOut"])
    types["AssistantDevicesPlatformProtoClientReconnectCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoClientReconnectCapabilityIn"])
    types["AssistantDevicesPlatformProtoClientReconnectCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoClientReconnectCapabilityOut"])
    types["NlpSaftConstituencyNodeIn"] = t.struct(
        {
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "child": t.array(t.integer()).optional(),
            "label": t.string().optional(),
        }
    ).named(renames["NlpSaftConstituencyNodeIn"])
    types["NlpSaftConstituencyNodeOut"] = t.struct(
        {
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "child": t.array(t.integer()).optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftConstituencyNodeOut"])
    types["ImageRepositoryShoppingProductInformationIn"] = t.struct(
        {
            "productSets": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetIn"
                    ]
                )
            ).optional()
        }
    ).named(renames["ImageRepositoryShoppingProductInformationIn"])
    types["ImageRepositoryShoppingProductInformationOut"] = t.struct(
        {
            "productSets": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationOut"])
    types["SecurityCredentialsHostProtoIn"] = t.struct(
        {"hostName": t.string().optional(), "hostOwner": t.string().optional()}
    ).named(renames["SecurityCredentialsHostProtoIn"])
    types["SecurityCredentialsHostProtoOut"] = t.struct(
        {
            "hostName": t.string().optional(),
            "hostOwner": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsHostProtoOut"])
    types["VideoYoutubeCommentsRankingCTRMetricsIn"] = t.struct(
        {
            "measureWindow": t.string(),
            "upvotes": t.string(),
            "teaserClicks": t.string(),
            "teaserImpressions": t.string(),
            "impressions": t.string(),
            "downvotes": t.string(),
        }
    ).named(renames["VideoYoutubeCommentsRankingCTRMetricsIn"])
    types["VideoYoutubeCommentsRankingCTRMetricsOut"] = t.struct(
        {
            "measureWindow": t.string(),
            "upvotes": t.string(),
            "teaserClicks": t.string(),
            "teaserImpressions": t.string(),
            "impressions": t.string(),
            "downvotes": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoYoutubeCommentsRankingCTRMetricsOut"])
    types["GoodocOrientationLabelIn"] = t.struct(
        {
            "writingDirection": t.string(),
            "mirrored": t.boolean().optional(),
            "textlineOrder": t.string(),
            "deskewAngle": t.number().optional(),
            "orientation": t.string(),
        }
    ).named(renames["GoodocOrientationLabelIn"])
    types["GoodocOrientationLabelOut"] = t.struct(
        {
            "writingDirection": t.string(),
            "mirrored": t.boolean().optional(),
            "textlineOrder": t.string(),
            "deskewAngle": t.number().optional(),
            "orientation": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocOrientationLabelOut"])
    types["GeostoreAttachmentsAttachmentProtoIn"] = t.struct(
        {
            "comment": t.string().optional(),
            "typeId": t.string().optional(),
            "clientNameSpace": t.string().optional(),
            "attachmentId": t.string().optional(),
            "messages": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["GeostoreAttachmentsAttachmentProtoIn"])
    types["GeostoreAttachmentsAttachmentProtoOut"] = t.struct(
        {
            "comment": t.string().optional(),
            "typeId": t.string().optional(),
            "clientNameSpace": t.string().optional(),
            "attachmentId": t.string().optional(),
            "messages": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAttachmentsAttachmentProtoOut"])
    types["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogIn"] = t.struct(
        {
            "mediaExcuse": t.integer().optional(),
            "deviceIndex": t.array(t.integer()).optional(),
            "providerMid": t.string().optional(),
        }
    ).named(renames["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogIn"])
    types["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogOut"] = t.struct(
        {
            "mediaExcuse": t.integer().optional(),
            "deviceIndex": t.array(t.integer()).optional(),
            "providerMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsAmbiguousTargetDeviceLogPuntInfoLogOut"])
    types["RegistrationInfoIn"] = t.struct(
        {"createdDate": t.integer().optional(), "expiredDate": t.integer().optional()}
    ).named(renames["RegistrationInfoIn"])
    types["RegistrationInfoOut"] = t.struct(
        {
            "createdDate": t.integer().optional(),
            "expiredDate": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegistrationInfoOut"])
    types["VideoMediaOverviewDataOverviewIn"] = t.struct(
        {
            "hasOzoAudio": t.boolean().optional(),
            "hasCameraMotionMetadata": t.boolean().optional(),
        }
    ).named(renames["VideoMediaOverviewDataOverviewIn"])
    types["VideoMediaOverviewDataOverviewOut"] = t.struct(
        {
            "hasOzoAudio": t.boolean().optional(),
            "hasCameraMotionMetadata": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaOverviewDataOverviewOut"])
    types["PhilPerDocDataIn"] = t.struct(
        {"PhilString": t.string().optional(), "PhilVersion": t.integer()}
    ).named(renames["PhilPerDocDataIn"])
    types["PhilPerDocDataOut"] = t.struct(
        {
            "PhilString": t.string().optional(),
            "PhilVersion": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhilPerDocDataOut"])
    types["BlogsearchConversationTreeIn"] = t.struct(
        {
            "convId": t.string().optional(),
            "nodes": t.array(
                t.proxy(renames["BlogsearchConversationNodeIn"])
            ).optional(),
        }
    ).named(renames["BlogsearchConversationTreeIn"])
    types["BlogsearchConversationTreeOut"] = t.struct(
        {
            "convId": t.string().optional(),
            "nodes": t.array(
                t.proxy(renames["BlogsearchConversationNodeOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlogsearchConversationTreeOut"])
    types["VideoRational32In"] = t.struct(
        {"denominator": t.integer(), "numerator": t.integer()}
    ).named(renames["VideoRational32In"])
    types["VideoRational32Out"] = t.struct(
        {
            "denominator": t.integer(),
            "numerator": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoRational32Out"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningIn"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningOut"])
    types["GoogleCloudDocumentaiV1DocumentPageBlockIn"] = t.struct(
        {
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageBlockIn"])
    types["GoogleCloudDocumentaiV1DocumentPageBlockOut"] = t.struct(
        {
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageBlockOut"])
    types["QualityTravelGoodSitesDataIn"] = t.struct(
        {
            "signal": t.array(t.proxy(renames["QualityTravelGoodSitesDataSignalIn"])),
            "isHotelOfficial": t.boolean(),
            "site": t.string(),
            "isAttractionOfficial": t.boolean(),
            "normalizationFactor": t.number().optional(),
            "isEntity": t.boolean(),
            "totalScore": t.number().optional(),
            "type": t.string(),
            "isAggr": t.boolean(),
            "i18n": t.array(t.proxy(renames["QualityTravelGoodSitesDataI18nIn"])),
        }
    ).named(renames["QualityTravelGoodSitesDataIn"])
    types["QualityTravelGoodSitesDataOut"] = t.struct(
        {
            "signal": t.array(t.proxy(renames["QualityTravelGoodSitesDataSignalOut"])),
            "isHotelOfficial": t.boolean(),
            "site": t.string(),
            "isAttractionOfficial": t.boolean(),
            "normalizationFactor": t.number().optional(),
            "isEntity": t.boolean(),
            "totalScore": t.number().optional(),
            "type": t.string(),
            "isAggr": t.boolean(),
            "i18n": t.array(t.proxy(renames["QualityTravelGoodSitesDataI18nOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTravelGoodSitesDataOut"])
    types["OceanDocTagNewspaperSpecificIn"] = t.struct(
        {
            "newspaperName": t.string(),
            "publicationDate": t.string().optional(),
            "publisher": t.string().optional(),
            "newspaperDate": t.number().optional(),
            "newspaperUrl": t.string().optional(),
            "articleRollCoords": t.string().optional(),
        }
    ).named(renames["OceanDocTagNewspaperSpecificIn"])
    types["OceanDocTagNewspaperSpecificOut"] = t.struct(
        {
            "newspaperName": t.string(),
            "publicationDate": t.string().optional(),
            "publisher": t.string().optional(),
            "newspaperDate": t.number().optional(),
            "newspaperUrl": t.string().optional(),
            "articleRollCoords": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagNewspaperSpecificOut"])
    types["NlpSemanticParsingModelsRecurrenceWeeklyPatternIn"] = t.struct(
        {
            "weeklyPatternStart": t.string(),
            "weekDay": t.array(t.string()).optional(),
            "weeklyPatternEnd": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceWeeklyPatternIn"])
    types["NlpSemanticParsingModelsRecurrenceWeeklyPatternOut"] = t.struct(
        {
            "weeklyPatternStart": t.string(),
            "weekDay": t.array(t.string()).optional(),
            "weeklyPatternEnd": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceWeeklyPatternOut"])
    types["VideoVideoStreamInfoMetadataLutAttachmentsIn"] = t.struct(
        {
            "lut": t.array(
                t.proxy(renames["VideoVideoStreamInfoMetadataLutAttachmentsLut3DIn"])
            )
        }
    ).named(renames["VideoVideoStreamInfoMetadataLutAttachmentsIn"])
    types["VideoVideoStreamInfoMetadataLutAttachmentsOut"] = t.struct(
        {
            "lut": t.array(
                t.proxy(renames["VideoVideoStreamInfoMetadataLutAttachmentsLut3DOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoMetadataLutAttachmentsOut"])
    types["AssistantApiSettingsSpeechSettingsIn"] = t.struct(
        {
            "speakerIdRecognitionEnabled": t.boolean().optional(),
            "lockscreenEnabled": t.boolean().optional(),
            "voiceMatchSetting": t.string().optional(),
            "sdkVersion": t.integer().optional(),
            "userMigratedToDeclined": t.boolean().optional(),
            "hotwordInNavigationEnabled": t.string().optional(),
            "unlockWithHotwordAvailable": t.boolean().optional(),
            "opaEligible": t.boolean().optional(),
            "continuedConversationEnabled": t.boolean().optional(),
            "dspAvailable": t.boolean().optional(),
            "deviceModelType": t.string().optional(),
            "trustedVoiceEnabled": t.boolean().optional(),
            "hotwordSetting": t.string().optional(),
            "speakerIdModelPresent": t.boolean().optional(),
            "opaEligibilityState": t.string().optional(),
        }
    ).named(renames["AssistantApiSettingsSpeechSettingsIn"])
    types["AssistantApiSettingsSpeechSettingsOut"] = t.struct(
        {
            "speakerIdRecognitionEnabled": t.boolean().optional(),
            "lockscreenEnabled": t.boolean().optional(),
            "voiceMatchSetting": t.string().optional(),
            "sdkVersion": t.integer().optional(),
            "userMigratedToDeclined": t.boolean().optional(),
            "hotwordInNavigationEnabled": t.string().optional(),
            "unlockWithHotwordAvailable": t.boolean().optional(),
            "opaEligible": t.boolean().optional(),
            "continuedConversationEnabled": t.boolean().optional(),
            "dspAvailable": t.boolean().optional(),
            "deviceModelType": t.string().optional(),
            "trustedVoiceEnabled": t.boolean().optional(),
            "hotwordSetting": t.string().optional(),
            "speakerIdModelPresent": t.boolean().optional(),
            "opaEligibilityState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsSpeechSettingsOut"])
    types["GoodocLogicalEntityLinkIn"] = t.struct(
        {
            "WordId": t.integer(),
            "SymbolId": t.integer(),
            "PageId": t.integer(),
            "Url": t.string().optional(),
            "RouteId": t.integer(),
            "BlockId": t.integer(),
            "ParagraphId": t.integer(),
            "Anchor": t.string().optional(),
            "DocId": t.integer().optional(),
        }
    ).named(renames["GoodocLogicalEntityLinkIn"])
    types["GoodocLogicalEntityLinkOut"] = t.struct(
        {
            "WordId": t.integer(),
            "SymbolId": t.integer(),
            "PageId": t.integer(),
            "Url": t.string().optional(),
            "RouteId": t.integer(),
            "BlockId": t.integer(),
            "ParagraphId": t.integer(),
            "Anchor": t.string().optional(),
            "DocId": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocLogicalEntityLinkOut"])
    types["KnowledgeAnswersOpaqueTimerTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueTimerTypeIn"])
    types["KnowledgeAnswersOpaqueTimerTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueTimerTypeOut"])
    types["VideoClosedCaptionsIn"] = t.struct(
        {"videoHasClosedCaptions": t.boolean()}
    ).named(renames["VideoClosedCaptionsIn"])
    types["VideoClosedCaptionsOut"] = t.struct(
        {
            "videoHasClosedCaptions": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoClosedCaptionsOut"])
    types["LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipIn"] = t.struct(
        {
            "linkMetadata": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryEntityLinkMetadataIn"]
            ),
            "linkWeight": t.number(),
            "entityIndex": t.integer(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipIn"])
    types[
        "LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipOut"
    ] = t.struct(
        {
            "linkMetadata": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryEntityLinkMetadataOut"]
            ),
            "linkWeight": t.number(),
            "entityIndex": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipOut"]
    )
    types["AssistantApiProactiveOutputIn"] = t.struct(
        {
            "allowAllPersonalData": t.boolean().optional(),
            "healthAndFitnessProactive": t.string().optional(),
            "androidTvAssistantSettingsSource": t.string().optional(),
            "photosProactive": t.string().optional(),
            "userMatchProactive": t.string().optional(),
            "supportsProactiveOutput": t.boolean().optional(),
        }
    ).named(renames["AssistantApiProactiveOutputIn"])
    types["AssistantApiProactiveOutputOut"] = t.struct(
        {
            "allowAllPersonalData": t.boolean().optional(),
            "healthAndFitnessProactive": t.string().optional(),
            "androidTvAssistantSettingsSource": t.string().optional(),
            "photosProactive": t.string().optional(),
            "userMatchProactive": t.string().optional(),
            "supportsProactiveOutput": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiProactiveOutputOut"])
    types["NlxDataSchemaLanguageSpanIn"] = t.struct(
        {
            "characters": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "languageCode": t.array(t.string()).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
        }
    ).named(renames["NlxDataSchemaLanguageSpanIn"])
    types["NlxDataSchemaLanguageSpanOut"] = t.struct(
        {
            "characters": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "languageCode": t.array(t.string()).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaLanguageSpanOut"])
    types["LegalCitationCourtDocumentUnknownDateIn"] = t.struct(
        {"Description": t.string(), "Date": t.proxy(renames["LegalDateIn"])}
    ).named(renames["LegalCitationCourtDocumentUnknownDateIn"])
    types["LegalCitationCourtDocumentUnknownDateOut"] = t.struct(
        {
            "Description": t.string(),
            "Date": t.proxy(renames["LegalDateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentUnknownDateOut"])
    types["RepositoryWebrefMentionRatingsIn"] = t.struct(
        {
            "mentionMatch": t.array(t.string()),
            "end": t.integer(),
            "singleMentionRating": t.array(
                t.proxy(renames["RepositoryWebrefMentionRatingsSingleMentionRatingIn"])
            ),
            "begin": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefMentionRatingsIn"])
    types["RepositoryWebrefMentionRatingsOut"] = t.struct(
        {
            "mentionMatch": t.array(t.string()),
            "end": t.integer(),
            "singleMentionRating": t.array(
                t.proxy(renames["RepositoryWebrefMentionRatingsSingleMentionRatingOut"])
            ),
            "begin": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionRatingsOut"])
    types["DrishtiVesperMovingThumbnailIn"] = t.struct(
        {
            "movingThumbnailerVersion": t.string().optional(),
            "webpQualityLevel": t.number().optional(),
            "encodedGifAnimation": t.string(),
            "type": t.string().optional(),
            "width": t.integer().optional(),
            "score": t.number().optional(),
            "encodedVideoString": t.string().optional(),
            "name": t.string().optional(),
            "encodedWebpAnimation": t.string().optional(),
            "endTimestampMs": t.integer().optional(),
            "scoreComponents": t.proxy(
                renames["DrishtiVesperMovingThumbnailScoreComponentsIn"]
            ),
            "thumbnails": t.array(
                t.proxy(renames["DrishtiVesperThumbnailIn"])
            ).optional(),
            "id": t.string().optional(),
            "height": t.integer().optional(),
            "beginTimestampMs": t.integer().optional(),
            "durationMs": t.integer().optional(),
        }
    ).named(renames["DrishtiVesperMovingThumbnailIn"])
    types["DrishtiVesperMovingThumbnailOut"] = t.struct(
        {
            "movingThumbnailerVersion": t.string().optional(),
            "webpQualityLevel": t.number().optional(),
            "encodedGifAnimation": t.string(),
            "type": t.string().optional(),
            "width": t.integer().optional(),
            "score": t.number().optional(),
            "encodedVideoString": t.string().optional(),
            "name": t.string().optional(),
            "encodedWebpAnimation": t.string().optional(),
            "endTimestampMs": t.integer().optional(),
            "scoreComponents": t.proxy(
                renames["DrishtiVesperMovingThumbnailScoreComponentsOut"]
            ),
            "thumbnails": t.array(
                t.proxy(renames["DrishtiVesperThumbnailOut"])
            ).optional(),
            "id": t.string().optional(),
            "height": t.integer().optional(),
            "beginTimestampMs": t.integer().optional(),
            "durationMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperMovingThumbnailOut"])
    types["CountryCountryAttachmentIn"] = t.struct(
        {
            "restrictCountries": t.array(t.string()).optional(),
            "weightAboveIdealForLocalness": t.number().optional(),
            "isValidForCountryRestrict": t.boolean().optional(),
            "relatedCountryCodes": t.array(t.integer()),
            "fromUgc": t.boolean(),
            "debugSourceUrl": t.array(t.string()).optional(),
            "urlPatternBasedCountry": t.integer(),
            "provinceGeotokenList": t.array(
                t.proxy(renames["CountryProvinceGeotokenIn"])
            ),
            "global": t.boolean(),
            "fromTld": t.boolean(),
            "geoLocations": t.proxy(renames["CountryGeoLocationsIn"]).optional(),
            "urlPatternBasedLanguage": t.integer().optional(),
            "localCountries": t.array(t.string()).optional(),
            "metroIdList": t.array(
                t.proxy(renames["CountryMetroNBFeatureIn"])
            ).optional(),
            "debug": t.string().optional(),
            "fromLanguageFallback": t.boolean().optional(),
            "clickDistribution": t.proxy(
                renames["CountryClickDistributionIn"]
            ).optional(),
            "userVisibleCountryFromLogs": t.string().optional(),
            "superGlobal": t.boolean().optional(),
            "fromUrlPattern": t.boolean(),
            "documentLocationSource": t.string().optional(),
            "wmxCountry": t.string().optional(),
            "fromWmx": t.boolean(),
            "existNextLevel": t.boolean(),
            "sitename": t.string().optional(),
            "metroLocationId": t.array(t.string()).optional(),
            "localCountryCodes": t.array(t.integer()).optional(),
            "fromRestricts": t.boolean(),
            "fromSgDomains": t.boolean(),
            "relatedCountries": t.array(t.string()).optional(),
            "salientCountries": t.array(
                t.proxy(renames["CountrySalientCountryIn"])
            ).optional(),
            "salientCountrySet": t.proxy(
                renames["QualitySalientCountriesSalientCountrySetIn"]
            ),
            "userVisibleLocalCountry": t.integer().optional(),
            "metroNavboost": t.array(
                t.proxy(renames["CountryMetroNBFeatureIn"])
            ).optional(),
            "countryidFromUgc": t.boolean().optional(),
        }
    ).named(renames["CountryCountryAttachmentIn"])
    types["CountryCountryAttachmentOut"] = t.struct(
        {
            "restrictCountries": t.array(t.string()).optional(),
            "weightAboveIdealForLocalness": t.number().optional(),
            "isValidForCountryRestrict": t.boolean().optional(),
            "relatedCountryCodes": t.array(t.integer()),
            "fromUgc": t.boolean(),
            "debugSourceUrl": t.array(t.string()).optional(),
            "urlPatternBasedCountry": t.integer(),
            "provinceGeotokenList": t.array(
                t.proxy(renames["CountryProvinceGeotokenOut"])
            ),
            "global": t.boolean(),
            "fromTld": t.boolean(),
            "geoLocations": t.proxy(renames["CountryGeoLocationsOut"]).optional(),
            "urlPatternBasedLanguage": t.integer().optional(),
            "localCountries": t.array(t.string()).optional(),
            "metroIdList": t.array(
                t.proxy(renames["CountryMetroNBFeatureOut"])
            ).optional(),
            "debug": t.string().optional(),
            "fromLanguageFallback": t.boolean().optional(),
            "clickDistribution": t.proxy(
                renames["CountryClickDistributionOut"]
            ).optional(),
            "userVisibleCountryFromLogs": t.string().optional(),
            "superGlobal": t.boolean().optional(),
            "fromUrlPattern": t.boolean(),
            "documentLocationSource": t.string().optional(),
            "wmxCountry": t.string().optional(),
            "fromWmx": t.boolean(),
            "existNextLevel": t.boolean(),
            "sitename": t.string().optional(),
            "metroLocationId": t.array(t.string()).optional(),
            "localCountryCodes": t.array(t.integer()).optional(),
            "fromRestricts": t.boolean(),
            "fromSgDomains": t.boolean(),
            "relatedCountries": t.array(t.string()).optional(),
            "salientCountries": t.array(
                t.proxy(renames["CountrySalientCountryOut"])
            ).optional(),
            "salientCountrySet": t.proxy(
                renames["QualitySalientCountriesSalientCountrySetOut"]
            ),
            "userVisibleLocalCountry": t.integer().optional(),
            "metroNavboost": t.array(
                t.proxy(renames["CountryMetroNBFeatureOut"])
            ).optional(),
            "countryidFromUgc": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryCountryAttachmentOut"])
    types["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "channelNumber": t.string().optional(),
            "deeplink": t.string().optional(),
            "channelId": t.string().optional(),
            "networkMid": t.string().optional(),
            "channelName": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelIn"])
    types["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "channelNumber": t.string().optional(),
            "deeplink": t.string().optional(),
            "channelId": t.string().optional(),
            "networkMid": t.string().optional(),
            "channelName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelOut"])
    types["ResearchScamGenericFeatureVectorIn"] = t.struct(
        {
            "featureValueInt64": t.array(t.string()),
            "dataIdStr": t.string().optional(),
            "featureType": t.string().optional(),
            "fixedPointMetadata": t.proxy(
                renames["ResearchScamGenericFeatureVectorFixedPointMetadataIn"]
            ),
            "featureIndex": t.array(t.string()).optional(),
            "classLabel": t.string().optional(),
            "featureValueFloat": t.array(t.number()).optional(),
            "internalOnlyIsSecondaryPartition": t.boolean().optional(),
            "restrictTokens": t.proxy(
                renames["ResearchScamGenericFeatureVectorRestrictTokensIn"]
            ),
            "weight": t.number().optional(),
            "featureValueDouble": t.array(t.number()),
            "tokens": t.array(t.integer()),
            "expirationTimestamp": t.string().optional(),
            "queryMetadata": t.proxy(renames["ResearchScamQueryMetadataIn"]).optional(),
            "featureValueString": t.string(),
            "userinfo": t.string().optional(),
            "normType": t.string().optional(),
            "crowding": t.proxy(renames["ResearchScamGenericFeatureVectorCrowdingIn"]),
            "featureDim": t.string().optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorIn"])
    types["ResearchScamGenericFeatureVectorOut"] = t.struct(
        {
            "featureValueInt64": t.array(t.string()),
            "dataIdStr": t.string().optional(),
            "featureType": t.string().optional(),
            "fixedPointMetadata": t.proxy(
                renames["ResearchScamGenericFeatureVectorFixedPointMetadataOut"]
            ),
            "featureIndex": t.array(t.string()).optional(),
            "classLabel": t.string().optional(),
            "featureValueFloat": t.array(t.number()).optional(),
            "internalOnlyIsSecondaryPartition": t.boolean().optional(),
            "restrictTokens": t.proxy(
                renames["ResearchScamGenericFeatureVectorRestrictTokensOut"]
            ),
            "weight": t.number().optional(),
            "featureValueDouble": t.array(t.number()),
            "tokens": t.array(t.integer()),
            "expirationTimestamp": t.string().optional(),
            "queryMetadata": t.proxy(
                renames["ResearchScamQueryMetadataOut"]
            ).optional(),
            "featureValueString": t.string(),
            "userinfo": t.string().optional(),
            "normType": t.string().optional(),
            "crowding": t.proxy(renames["ResearchScamGenericFeatureVectorCrowdingOut"]),
            "featureDim": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorOut"])
    types["GoogleCloudDocumentaiV1DocumentProvenanceIn"] = t.struct(
        {
            "revision": t.integer().optional(),
            "type": t.string().optional(),
            "id": t.integer().optional(),
            "parents": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentProvenanceParentIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"])
    types["GoogleCloudDocumentaiV1DocumentProvenanceOut"] = t.struct(
        {
            "revision": t.integer().optional(),
            "type": t.string().optional(),
            "id": t.integer().optional(),
            "parents": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentProvenanceParentOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"])
    types["ContentAttributionsIn"] = t.struct(
        {
            "onlineOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionIn"])
            ).optional(),
            "offlineOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionIn"])
            ).optional(),
            "freshdocsOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionIn"])
            ).optional(),
        }
    ).named(renames["ContentAttributionsIn"])
    types["ContentAttributionsOut"] = t.struct(
        {
            "onlineOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionOut"])
            ).optional(),
            "offlineOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionOut"])
            ).optional(),
            "freshdocsOutgoing": t.array(
                t.proxy(renames["ContentAttributionsOutgoingAttributionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ContentAttributionsOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateIn"
    ] = t.struct(
        {
            "intentName": t.string().optional(),
            "argumentName": t.array(t.string()).optional(),
            "currentQueryEvalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional(),
            "dialogIntentStateId": t.string().optional(),
            "previousFunctionCall": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallIn"
                ]
            ),
            "listCandidate": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateIn"
                ]
            ),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateIn"]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateOut"
    ] = t.struct(
        {
            "intentName": t.string().optional(),
            "argumentName": t.array(t.string()).optional(),
            "currentQueryEvalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "dialogIntentStateId": t.string().optional(),
            "previousFunctionCall": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCallOut"
                ]
            ),
            "listCandidate": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateOut"]
    )
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataIn"
    ] = t.struct(
        {
            "documents": t.array(t.string()).optional(),
            "processorInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1ProcessorInfoIn"]
            ).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataIn"
        ]
    )
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataOut"
    ] = t.struct(
        {
            "documents": t.array(t.string()).optional(),
            "processorInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1ProcessorInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataOut"
        ]
    )
    types["GeostoreOverrideBorderStatusProtoIn"] = t.struct(
        {"status": t.string().optional(), "countryCode": t.string().optional()}
    ).named(renames["GeostoreOverrideBorderStatusProtoIn"])
    types["GeostoreOverrideBorderStatusProtoOut"] = t.struct(
        {
            "status": t.string().optional(),
            "countryCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreOverrideBorderStatusProtoOut"])
    types[
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapIn"
    ] = t.struct({"anchorsDropped": t.integer(), "domain": t.string()}).named(
        renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapIn"]
    )
    types[
        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapOut"
    ] = t.struct(
        {
            "anchorsDropped": t.integer(),
            "domain": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapOut"]
    )
    types["QualityQrewriteContactCalendarNameIn"] = t.struct(
        {"contact": t.proxy(renames["NlpSemanticParsingModelsPersonPersonIn"])}
    ).named(renames["QualityQrewriteContactCalendarNameIn"])
    types["QualityQrewriteContactCalendarNameOut"] = t.struct(
        {
            "contact": t.proxy(renames["NlpSemanticParsingModelsPersonPersonOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteContactCalendarNameOut"])
    types["GoodocLanguageCombinationLanguageIn"] = t.struct(
        {"bcp47Tag": t.string().optional(), "weight": t.number().optional()}
    ).named(renames["GoodocLanguageCombinationLanguageIn"])
    types["GoodocLanguageCombinationLanguageOut"] = t.struct(
        {
            "bcp47Tag": t.string().optional(),
            "weight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocLanguageCombinationLanguageOut"])
    types["NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideIn"] = t.struct(
        {"gcidScore": t.number(), "hyperReliableGcid": t.string()}
    ).named(renames["NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideIn"])
    types["NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideOut"] = t.struct(
        {
            "gcidScore": t.number(),
            "hyperReliableGcid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideOut"])
    types["SnippetExtraInfoSnippetScoringInfoIn"] = t.struct(
        {
            "finalScore": t.number().optional(),
            "brainScore": t.number().optional(),
            "brainNg3Score": t.number(),
            "rankBySnippetFlow": t.integer().optional(),
            "features": t.proxy(renames["QualityPreviewRanklabSnippetIn"]).optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetScoringInfoIn"])
    types["SnippetExtraInfoSnippetScoringInfoOut"] = t.struct(
        {
            "finalScore": t.number().optional(),
            "brainScore": t.number().optional(),
            "brainNg3Score": t.number(),
            "rankBySnippetFlow": t.integer().optional(),
            "features": t.proxy(renames["QualityPreviewRanklabSnippetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetScoringInfoOut"])
    types["GoogleApiServiceconsumermanagementV1PolicyBindingIn"] = t.struct(
        {"members": t.array(t.string()).optional(), "role": t.string().optional()}
    ).named(renames["GoogleApiServiceconsumermanagementV1PolicyBindingIn"])
    types["GoogleApiServiceconsumermanagementV1PolicyBindingOut"] = t.struct(
        {
            "members": t.array(t.string()).optional(),
            "role": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleApiServiceconsumermanagementV1PolicyBindingOut"])
    types["GoogleCloudContentwarehouseV1UpdateRuleSetRequestIn"] = t.struct(
        {"ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"])}
    ).named(renames["GoogleCloudContentwarehouseV1UpdateRuleSetRequestIn"])
    types["GoogleCloudContentwarehouseV1UpdateRuleSetRequestOut"] = t.struct(
        {
            "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateRuleSetRequestOut"])
    types["AssistantApiSupportedProviderTypesIn"] = t.struct(
        {"supportedTypes": t.array(t.string())}
    ).named(renames["AssistantApiSupportedProviderTypesIn"])
    types["AssistantApiSupportedProviderTypesOut"] = t.struct(
        {
            "supportedTypes": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedProviderTypesOut"])
    types["SearchPolicyRankableSensitivityIn"] = t.struct(
        {
            "dasherUser": t.boolean().optional(),
            "prefilter": t.proxy(renames["SearchPolicyRankableSensitivityPrefilterIn"]),
            "accountProvenance": t.array(
                t.proxy(renames["QualityQrewriteAccountProvenanceIn"])
            ).optional(),
            "winningFulfillment": t.proxy(
                renames["SearchPolicyRankableSensitivityFulfillmentIn"]
            ),
            "followon": t.proxy(renames["SearchPolicyRankableSensitivityFollowOnIn"]),
            "sensitivityMode": t.string().optional(),
            "groundingProvider": t.proxy(
                renames["SearchPolicyRankableSensitivityGroundingProviderIn"]
            ),
            "attentionalEntity": t.proxy(
                renames["SearchPolicyRankableSensitivityAttentionalEntityIn"]
            ),
            "qu": t.proxy(
                renames["SearchPolicyRankableSensitivityQueryUnderstandingIn"]
            ),
            "syntheticIntent": t.proxy(
                renames["SearchPolicyRankableSensitivitySyntheticIntentIn"]
            ),
        }
    ).named(renames["SearchPolicyRankableSensitivityIn"])
    types["SearchPolicyRankableSensitivityOut"] = t.struct(
        {
            "dasherUser": t.boolean().optional(),
            "prefilter": t.proxy(
                renames["SearchPolicyRankableSensitivityPrefilterOut"]
            ),
            "accountProvenance": t.array(
                t.proxy(renames["QualityQrewriteAccountProvenanceOut"])
            ).optional(),
            "winningFulfillment": t.proxy(
                renames["SearchPolicyRankableSensitivityFulfillmentOut"]
            ),
            "followon": t.proxy(renames["SearchPolicyRankableSensitivityFollowOnOut"]),
            "sensitivityMode": t.string().optional(),
            "groundingProvider": t.proxy(
                renames["SearchPolicyRankableSensitivityGroundingProviderOut"]
            ),
            "attentionalEntity": t.proxy(
                renames["SearchPolicyRankableSensitivityAttentionalEntityOut"]
            ),
            "qu": t.proxy(
                renames["SearchPolicyRankableSensitivityQueryUnderstandingOut"]
            ),
            "syntheticIntent": t.proxy(
                renames["SearchPolicyRankableSensitivitySyntheticIntentOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityOut"])
    types["VideoVideoStreamIn"] = t.struct(
        {
            "streamIndex": t.string().optional(),
            "bitrate": t.string().optional(),
            "codecId": t.integer().optional(),
            "lengthSec": t.number().optional(),
            "height": t.integer(),
            "fps": t.number().optional(),
            "width": t.integer().optional(),
        }
    ).named(renames["VideoVideoStreamIn"])
    types["VideoVideoStreamOut"] = t.struct(
        {
            "streamIndex": t.string().optional(),
            "bitrate": t.string().optional(),
            "codecId": t.integer().optional(),
            "lengthSec": t.number().optional(),
            "height": t.integer(),
            "fps": t.number().optional(),
            "width": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamOut"])
    types["GeostoreMediaItemProtoMediaSizeIn"] = t.struct(
        {"originalHeightPx": t.integer(), "originalWidthPx": t.integer()}
    ).named(renames["GeostoreMediaItemProtoMediaSizeIn"])
    types["GeostoreMediaItemProtoMediaSizeOut"] = t.struct(
        {
            "originalHeightPx": t.integer(),
            "originalWidthPx": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreMediaItemProtoMediaSizeOut"])
    types["AssistantApiOutputRestrictionsIn"] = t.struct(
        {
            "accessControlOutput": t.proxy(
                renames["AssistantApiAccessControlOutputIn"]
            ).optional(),
            "proactiveOutput": t.proxy(
                renames["AssistantApiProactiveOutputIn"]
            ).optional(),
            "youtubeAutoplayRestriction": t.string().optional(),
            "youtubeTvContent": t.string().optional(),
            "personalData": t.string().optional(),
            "googlePhotoContent": t.string().optional(),
            "youtubeContent": t.string().optional(),
            "proactiveNotificationOutput": t.string().optional(),
            "guestAccessOutput": t.proxy(
                renames["AssistantApiGuestAccessOutputIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiOutputRestrictionsIn"])
    types["AssistantApiOutputRestrictionsOut"] = t.struct(
        {
            "accessControlOutput": t.proxy(
                renames["AssistantApiAccessControlOutputOut"]
            ).optional(),
            "proactiveOutput": t.proxy(
                renames["AssistantApiProactiveOutputOut"]
            ).optional(),
            "youtubeAutoplayRestriction": t.string().optional(),
            "youtubeTvContent": t.string().optional(),
            "personalData": t.string().optional(),
            "googlePhotoContent": t.string().optional(),
            "youtubeContent": t.string().optional(),
            "proactiveNotificationOutput": t.string().optional(),
            "guestAccessOutput": t.proxy(
                renames["AssistantApiGuestAccessOutputOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiOutputRestrictionsOut"])
    types["NlpSemanticParsingLocalHyperReliableDataIn"] = t.struct(
        {
            "hyperReliable": t.boolean(),
            "commodityStrength": t.number().optional(),
            "gcidsynsOverride": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideIn"
                    ]
                )
            ),
            "retrievalGcids": t.array(t.string()).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalHyperReliableDataIn"])
    types["NlpSemanticParsingLocalHyperReliableDataOut"] = t.struct(
        {
            "hyperReliable": t.boolean(),
            "commodityStrength": t.number().optional(),
            "gcidsynsOverride": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverrideOut"
                    ]
                )
            ),
            "retrievalGcids": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalHyperReliableDataOut"])
    types["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewIn"] = t.struct(
        {"state": t.string().optional(), "stateMessage": t.string().optional()}
    ).named(renames["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewIn"])
    types["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewOut"] = t.struct(
        {
            "state": t.string().optional(),
            "stateMessage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewOut"])
    types["RepositoryWebrefCategoryInfoIn"] = t.struct(
        {
            "wikipediaCategory": t.array(
                t.proxy(renames["RepositoryWebrefWikipediaCategoryIn"])
            ),
            "oysterType": t.proxy(renames["RepositoryWebrefOysterTypeIn"]),
            "allTypes": t.array(
                t.proxy(renames["RepositoryWebrefFreebaseTypeIn"])
            ).optional(),
            "kgCollection": t.array(t.proxy(renames["RepositoryWebrefKGCollectionIn"])),
            "salientCategory": t.array(
                t.proxy(renames["RepositoryWebrefFatcatCategoryIn"])
            ).optional(),
            "wpCategory": t.array(
                t.proxy(renames["RepositoryWebrefFreebaseTypeIn"])
            ).optional(),
            "freebaseType": t.array(t.proxy(renames["RepositoryWebrefFreebaseTypeIn"])),
        }
    ).named(renames["RepositoryWebrefCategoryInfoIn"])
    types["RepositoryWebrefCategoryInfoOut"] = t.struct(
        {
            "wikipediaCategory": t.array(
                t.proxy(renames["RepositoryWebrefWikipediaCategoryOut"])
            ),
            "oysterType": t.proxy(renames["RepositoryWebrefOysterTypeOut"]),
            "allTypes": t.array(
                t.proxy(renames["RepositoryWebrefFreebaseTypeOut"])
            ).optional(),
            "kgCollection": t.array(
                t.proxy(renames["RepositoryWebrefKGCollectionOut"])
            ),
            "salientCategory": t.array(
                t.proxy(renames["RepositoryWebrefFatcatCategoryOut"])
            ).optional(),
            "wpCategory": t.array(
                t.proxy(renames["RepositoryWebrefFreebaseTypeOut"])
            ).optional(),
            "freebaseType": t.array(
                t.proxy(renames["RepositoryWebrefFreebaseTypeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCategoryInfoOut"])
    types["KnowledgeAnswersSensitivityLoggingPolicyIn"] = t.struct(
        {
            "scrubContext": t.boolean().optional(),
            "scrubArgumentValue": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityLoggingPolicyIn"])
    types["KnowledgeAnswersSensitivityLoggingPolicyOut"] = t.struct(
        {
            "scrubContext": t.boolean().optional(),
            "scrubArgumentValue": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityLoggingPolicyOut"])
    types["QualitySalientTermsSalientTermIn"] = t.struct(
        {
            "signalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSignalTermDataIn"])
            ).optional(),
            "idf": t.number().optional(),
            "weight": t.integer().optional(),
            "label": t.string().optional(),
            "originalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSalientTermIn"])
            ).optional(),
            "virtualTf": t.number().optional(),
            "salience": t.number().optional(),
        }
    ).named(renames["QualitySalientTermsSalientTermIn"])
    types["QualitySalientTermsSalientTermOut"] = t.struct(
        {
            "signalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSignalTermDataOut"])
            ).optional(),
            "idf": t.number().optional(),
            "weight": t.integer().optional(),
            "label": t.string().optional(),
            "originalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSalientTermOut"])
            ).optional(),
            "virtualTf": t.number().optional(),
            "salience": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientTermsSalientTermOut"])
    types["AttentionalEntitiesSurfaceFormIn"] = t.struct({"text": t.string()}).named(
        renames["AttentionalEntitiesSurfaceFormIn"]
    )
    types["AttentionalEntitiesSurfaceFormOut"] = t.struct(
        {"text": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AttentionalEntitiesSurfaceFormOut"])
    types["ResearchScamNearestNeighborsNeighborIn"] = t.struct(
        {
            "docid": t.string().optional(),
            "distance": t.number().optional(),
            "metadata": t.string().optional(),
            "crowdingAttribute": t.string().optional(),
        }
    ).named(renames["ResearchScamNearestNeighborsNeighborIn"])
    types["ResearchScamNearestNeighborsNeighborOut"] = t.struct(
        {
            "docid": t.string().optional(),
            "distance": t.number().optional(),
            "metadata": t.string().optional(),
            "crowdingAttribute": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamNearestNeighborsNeighborOut"])
    types["FreebaseMeasurementIn"] = t.struct(
        {
            "unit": t.array(t.proxy(renames["FreebaseMeasurementUnitIn"])).optional(),
            "magnitude": t.number(),
        }
    ).named(renames["FreebaseMeasurementIn"])
    types["FreebaseMeasurementOut"] = t.struct(
        {
            "unit": t.array(t.proxy(renames["FreebaseMeasurementUnitOut"])).optional(),
            "magnitude": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseMeasurementOut"])
    types["SpamBrainDataIn"] = t.struct(
        {
            "versionedData": t.array(t.proxy(renames["SpamBrainScoreIn"])).optional(),
            "site": t.string().optional(),
        }
    ).named(renames["SpamBrainDataIn"])
    types["SpamBrainDataOut"] = t.struct(
        {
            "versionedData": t.array(t.proxy(renames["SpamBrainScoreOut"])).optional(),
            "site": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpamBrainDataOut"])
    types["AssistantApiCoreTypesDeviceConfigIn"] = t.struct(
        {"agentId": t.string().optional(), "deviceId": t.string().optional()}
    ).named(renames["AssistantApiCoreTypesDeviceConfigIn"])
    types["AssistantApiCoreTypesDeviceConfigOut"] = t.struct(
        {
            "agentId": t.string().optional(),
            "deviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesDeviceConfigOut"])
    types["AssistantLogsInputErrorLogIn"] = t.struct(
        {"errorType": t.string(), "errorCode": t.integer()}
    ).named(renames["AssistantLogsInputErrorLogIn"])
    types["AssistantLogsInputErrorLogOut"] = t.struct(
        {
            "errorType": t.string(),
            "errorCode": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsInputErrorLogOut"])
    types["SocialGraphApiProtoRecurrenceRepeatForeverIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SocialGraphApiProtoRecurrenceRepeatForeverIn"])
    types["SocialGraphApiProtoRecurrenceRepeatForeverOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SocialGraphApiProtoRecurrenceRepeatForeverOut"])
    types["RepositoryWebrefNameDebugInfoCandidateInfoIn"] = t.struct(
        {
            "resultEntityScore": t.number(),
            "isMatchlessResultContext": t.boolean().optional(),
            "mid": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefNameDebugInfoCandidateInfoIn"])
    types["RepositoryWebrefNameDebugInfoCandidateInfoOut"] = t.struct(
        {
            "resultEntityScore": t.number(),
            "isMatchlessResultContext": t.boolean().optional(),
            "mid": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNameDebugInfoCandidateInfoOut"])
    types["AssistantApiSuggestionsSupportIn"] = t.struct(
        {
            "executionContextSupported": t.boolean().optional(),
            "escapeHatchSupported": t.string().optional(),
            "debugDataSupported": t.boolean().optional(),
            "executedTextSupported": t.boolean().optional(),
            "widgetDataSupported": t.boolean().optional(),
            "showTranslationSupported": t.boolean().optional(),
            "multiStepTrySayingSupported": t.boolean().optional(),
            "clickImpersonationSupported": t.boolean().optional(),
            "ruleIdInExecutionContextSupported": t.boolean().optional(),
            "featureSpecificAppActionsNotificationSupported": t.boolean().optional(),
            "supportedDisplayTargets": t.array(
                t.proxy(renames["AssistantApiSuggestionsSupportDisplayTargetSupportIn"])
            ).optional(),
            "featureSpecificActionSupport": t.proxy(
                renames["AssistantApiFeatureSpecificActionSupportIn"]
            ).optional(),
            "showExecutedTextSupported": t.boolean().optional(),
            "drlHistoryChipSupported": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSuggestionsSupportIn"])
    types["AssistantApiSuggestionsSupportOut"] = t.struct(
        {
            "executionContextSupported": t.boolean().optional(),
            "escapeHatchSupported": t.string().optional(),
            "debugDataSupported": t.boolean().optional(),
            "executedTextSupported": t.boolean().optional(),
            "widgetDataSupported": t.boolean().optional(),
            "showTranslationSupported": t.boolean().optional(),
            "multiStepTrySayingSupported": t.boolean().optional(),
            "clickImpersonationSupported": t.boolean().optional(),
            "ruleIdInExecutionContextSupported": t.boolean().optional(),
            "featureSpecificAppActionsNotificationSupported": t.boolean().optional(),
            "supportedDisplayTargets": t.array(
                t.proxy(
                    renames["AssistantApiSuggestionsSupportDisplayTargetSupportOut"]
                )
            ).optional(),
            "featureSpecificActionSupport": t.proxy(
                renames["AssistantApiFeatureSpecificActionSupportOut"]
            ).optional(),
            "showExecutedTextSupported": t.boolean().optional(),
            "drlHistoryChipSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSuggestionsSupportOut"])
    types["SocialGraphApiProtoLimitedProfileSettingsIn"] = t.struct(
        {
            "nameSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfileNameSettingsIn"]
            ),
            "gpayOobe": t.boolean().optional(),
            "profilePictureSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfilePictureSettingsIn"]
            ).optional(),
            "disableReason": t.string().optional(),
            "lastUpdateTime": t.string().optional(),
            "myAccount": t.boolean().optional(),
            "legacyDiscoverability": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoLimitedProfileSettingsIn"])
    types["SocialGraphApiProtoLimitedProfileSettingsOut"] = t.struct(
        {
            "nameSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfileNameSettingsOut"]
            ),
            "gpayOobe": t.boolean().optional(),
            "profilePictureSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfilePictureSettingsOut"]
            ).optional(),
            "disableReason": t.string().optional(),
            "lastUpdateTime": t.string().optional(),
            "myAccount": t.boolean().optional(),
            "legacyDiscoverability": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoLimitedProfileSettingsOut"])
    types["IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsIn"] = t.struct(
        {
            "isSmearedSignal": t.boolean().optional(),
            "basicInfo": t.proxy(
                renames["IndexingMobileInterstitialsProtoInterstitialBasicInfoIn"]
            ),
        }
    ).named(renames["IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsIn"])
    types["IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsOut"] = t.struct(
        {
            "isSmearedSignal": t.boolean().optional(),
            "basicInfo": t.proxy(
                renames["IndexingMobileInterstitialsProtoInterstitialBasicInfoOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsOut"])
    types["AssistantDevicesPlatformProtoCallCallCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoCallCallCapabilityIn"])
    types["AssistantDevicesPlatformProtoCallCallCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoCallCallCapabilityOut"])
    types["BiasingPerDocData2BiasingFieldIn"] = t.struct(
        {
            "compressedName": t.integer().optional(),
            "valueInt": t.integer().optional(),
            "value": t.number().optional(),
            "valueFloat": t.integer().optional(),
        }
    ).named(renames["BiasingPerDocData2BiasingFieldIn"])
    types["BiasingPerDocData2BiasingFieldOut"] = t.struct(
        {
            "compressedName": t.integer().optional(),
            "valueInt": t.integer().optional(),
            "value": t.number().optional(),
            "valueFloat": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BiasingPerDocData2BiasingFieldOut"])
    types["SnippetExtraInfoSnippetCandidateInfoIn"] = t.struct(
        {
            "boldedRanges": t.array(
                t.proxy(renames["QualitySnippetsTruncationSnippetBoldedRangeIn"])
            ).optional(),
            "snippetText": t.string().optional(),
            "snippet": t.array(t.string()).optional(),
            "id": t.integer().optional(),
            "snippetType": t.string(),
            "extendedSnippet": t.proxy(
                renames["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetIn"]
            ),
            "isMuppetSelectedSnippet": t.boolean().optional(),
            "listInfo": t.proxy(
                renames["MustangReposWwwSnippetsOrganicListSnippetResponseIn"]
            ).optional(),
            "scoringInfo": t.proxy(renames["SnippetExtraInfoSnippetScoringInfoIn"]),
            "sentenceStarts": t.array(
                t.proxy(
                    renames["QualitySnippetsTruncationSnippetBoldedRangePositionIn"]
                )
            ).optional(),
            "isSnippetBrainBoldingTriggered": t.boolean().optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetCandidateInfoIn"])
    types["SnippetExtraInfoSnippetCandidateInfoOut"] = t.struct(
        {
            "boldedRanges": t.array(
                t.proxy(renames["QualitySnippetsTruncationSnippetBoldedRangeOut"])
            ).optional(),
            "snippetText": t.string().optional(),
            "snippet": t.array(t.string()).optional(),
            "id": t.integer().optional(),
            "snippetType": t.string(),
            "extendedSnippet": t.proxy(
                renames["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetOut"]
            ),
            "isMuppetSelectedSnippet": t.boolean().optional(),
            "listInfo": t.proxy(
                renames["MustangReposWwwSnippetsOrganicListSnippetResponseOut"]
            ).optional(),
            "scoringInfo": t.proxy(renames["SnippetExtraInfoSnippetScoringInfoOut"]),
            "sentenceStarts": t.array(
                t.proxy(
                    renames["QualitySnippetsTruncationSnippetBoldedRangePositionOut"]
                )
            ).optional(),
            "isSnippetBrainBoldingTriggered": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetCandidateInfoOut"])
    types["KnowledgeAnswersOpaqueShoppingMerchantTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingMerchantTypeIn"])
    types["KnowledgeAnswersOpaqueShoppingMerchantTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingMerchantTypeOut"])
    types["PseudoVideoDataIn"] = t.struct(
        {
            "transcript": t.proxy(renames["PseudoVideoDataTranscriptIn"]),
            "MustangDocId": t.string().optional(),
            "Url": t.string().optional(),
            "s3Mode": t.string(),
            "s3ModelInfoLabel": t.string().optional(),
            "DocKey": t.string().optional(),
            "AsrModel": t.string().optional(),
            "Lang": t.string().optional(),
        }
    ).named(renames["PseudoVideoDataIn"])
    types["PseudoVideoDataOut"] = t.struct(
        {
            "transcript": t.proxy(renames["PseudoVideoDataTranscriptOut"]),
            "MustangDocId": t.string().optional(),
            "Url": t.string().optional(),
            "s3Mode": t.string(),
            "s3ModelInfoLabel": t.string().optional(),
            "DocKey": t.string().optional(),
            "AsrModel": t.string().optional(),
            "Lang": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PseudoVideoDataOut"])
    types["OceanGEPriceIn"] = t.struct(
        {"locale": t.array(t.proxy(renames["OceanGEPriceLocaleIn"]))}
    ).named(renames["OceanGEPriceIn"])
    types["OceanGEPriceOut"] = t.struct(
        {
            "locale": t.array(t.proxy(renames["OceanGEPriceLocaleOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanGEPriceOut"])
    types["VideoContentSearchMultimodalTopicFeaturesIn"] = t.struct(
        {
            "topic": t.string().optional(),
            "navboostAnchorFeatures": t.proxy(
                renames["VideoContentSearchNavboostAnchorFeaturesIn"]
            ).optional(),
            "generativeTopicPredictionFeatures": t.array(
                t.proxy(
                    renames["VideoContentSearchGenerativeTopicPredictionFeaturesIn"]
                )
            ).optional(),
            "topicEndMs": t.string().optional(),
            "frameSimilarityInterval": t.array(
                t.proxy(renames["VideoContentSearchFrameSimilarityIntervalIn"])
            ).optional(),
            "topicStartMs": t.string().optional(),
            "videoQuerySource": t.string().optional(),
        }
    ).named(renames["VideoContentSearchMultimodalTopicFeaturesIn"])
    types["VideoContentSearchMultimodalTopicFeaturesOut"] = t.struct(
        {
            "topic": t.string().optional(),
            "navboostAnchorFeatures": t.proxy(
                renames["VideoContentSearchNavboostAnchorFeaturesOut"]
            ).optional(),
            "generativeTopicPredictionFeatures": t.array(
                t.proxy(
                    renames["VideoContentSearchGenerativeTopicPredictionFeaturesOut"]
                )
            ).optional(),
            "topicEndMs": t.string().optional(),
            "frameSimilarityInterval": t.array(
                t.proxy(renames["VideoContentSearchFrameSimilarityIntervalOut"])
            ).optional(),
            "topicStartMs": t.string().optional(),
            "videoQuerySource": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchMultimodalTopicFeaturesOut"])
    types["NlpSemanticParsingModelsMediaNewsInfoIn"] = t.struct(
        {
            "docid": t.string().optional(),
            "publicationTime": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "publisher": t.string().optional(),
            "newsContentType": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaNewsInfoIn"])
    types["NlpSemanticParsingModelsMediaNewsInfoOut"] = t.struct(
        {
            "docid": t.string().optional(),
            "publicationTime": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "publisher": t.string().optional(),
            "newsContentType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaNewsInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPhoneIn"] = t.struct(
        {
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataIn"]
            ).optional(),
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "uri": t.string(),
            "emergencyInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoIn"]
            ).optional(),
            "type": t.string().optional(),
            "value": t.string(),
            "canonicalizedForm": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhoneIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPhoneOut"] = t.struct(
        {
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPhoneExtendedDataOut"]
            ).optional(),
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "uri": t.string(),
            "emergencyInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoOut"]
            ).optional(),
            "type": t.string().optional(),
            "value": t.string(),
            "canonicalizedForm": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhoneOut"])
    types["AppsDynamiteSharedSegmentedMembershipCountsIn"] = t.struct(
        {
            "value": t.array(
                t.proxy(renames["AppsDynamiteSharedSegmentedMembershipCountIn"])
            )
        }
    ).named(renames["AppsDynamiteSharedSegmentedMembershipCountsIn"])
    types["AppsDynamiteSharedSegmentedMembershipCountsOut"] = t.struct(
        {
            "value": t.array(
                t.proxy(renames["AppsDynamiteSharedSegmentedMembershipCountOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsDynamiteSharedSegmentedMembershipCountsOut"])
    types["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursIn"] = t.struct(
        {"comeBackTime": t.string().optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursIn"])
    types["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursOut"] = t.struct(
        {
            "comeBackTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursOut"])
    types["VideoContentSearchSaftEntityInfoIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "canonicalEntityName": t.string().optional(),
            "entitySalience": t.number().optional(),
            "mentionType": t.string().optional(),
            "entityTypeName": t.string().optional(),
            "originalText": t.string().optional(),
            "mentionText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchSaftEntityInfoIn"])
    types["VideoContentSearchSaftEntityInfoOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "canonicalEntityName": t.string().optional(),
            "entitySalience": t.number().optional(),
            "mentionType": t.string().optional(),
            "entityTypeName": t.string().optional(),
            "originalText": t.string().optional(),
            "mentionText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSaftEntityInfoOut"])
    types["IndexingConverterRichContentDataIn"] = t.struct(
        {"range": t.array(t.proxy(renames["IndexingConverterRichContentDataRangeIn"]))}
    ).named(renames["IndexingConverterRichContentDataIn"])
    types["IndexingConverterRichContentDataOut"] = t.struct(
        {
            "range": t.array(
                t.proxy(renames["IndexingConverterRichContentDataRangeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRichContentDataOut"])
    types["SocialGraphWireProtoPeopleapiAffinityMetadataIn"] = t.struct(
        {
            "clientInteractionInfo": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoIn"
                ]
            ).optional(),
            "cloudScore": t.number().optional(),
            "cloudDeviceDataInfo": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoIn"
                ]
            ).optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiAffinityMetadataIn"])
    types["SocialGraphWireProtoPeopleapiAffinityMetadataOut"] = t.struct(
        {
            "clientInteractionInfo": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfoOut"
                ]
            ).optional(),
            "cloudScore": t.number().optional(),
            "cloudDeviceDataInfo": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiAffinityMetadataOut"])
    types["RepositoryWebrefBootstrappingScoreIn"] = t.struct(
        {"scoreRatio": t.number()}
    ).named(renames["RepositoryWebrefBootstrappingScoreIn"])
    types["RepositoryWebrefBootstrappingScoreOut"] = t.struct(
        {
            "scoreRatio": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefBootstrappingScoreOut"])
    types["AssistantApiSettingsNewsFilterIn"] = t.struct({"state": t.string()}).named(
        renames["AssistantApiSettingsNewsFilterIn"]
    )
    types["AssistantApiSettingsNewsFilterOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiSettingsNewsFilterOut"])
    types["SocialGraphApiProtoContactStateIn"] = t.struct(
        {
            "deletionContext": t.proxy(
                renames["SocialGraphApiProtoContactDeletionContextIn"]
            ).optional(),
            "deletionState": t.string(),
        }
    ).named(renames["SocialGraphApiProtoContactStateIn"])
    types["SocialGraphApiProtoContactStateOut"] = t.struct(
        {
            "deletionContext": t.proxy(
                renames["SocialGraphApiProtoContactDeletionContextOut"]
            ).optional(),
            "deletionState": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactStateOut"])
    types["GeostoreTollClusterProtoIn"] = t.struct(
        {
            "intersection": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreTollClusterProtoIn"])
    types["GeostoreTollClusterProtoOut"] = t.struct(
        {
            "intersection": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTollClusterProtoOut"])
    types["ImageRepositoryCrawlStatusInfoIn"] = t.struct(
        {"code": t.string(), "notCrawledReason": t.string()}
    ).named(renames["ImageRepositoryCrawlStatusInfoIn"])
    types["ImageRepositoryCrawlStatusInfoOut"] = t.struct(
        {
            "code": t.string(),
            "notCrawledReason": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryCrawlStatusInfoOut"])
    types["QualityQrewriteAlternativeNameInfoIn"] = t.struct(
        {
            "source": t.string(),
            "name": t.string(),
            "matchSignal": t.proxy(
                renames["AssistantVerticalsCommonContactMatchSignalIn"]
            ),
        }
    ).named(renames["QualityQrewriteAlternativeNameInfoIn"])
    types["QualityQrewriteAlternativeNameInfoOut"] = t.struct(
        {
            "source": t.string(),
            "name": t.string(),
            "matchSignal": t.proxy(
                renames["AssistantVerticalsCommonContactMatchSignalOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteAlternativeNameInfoOut"])
    types["KnowledgeAnswersIntentQueryTokenIn"] = t.struct(
        {
            "ngram": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "provenance": t.string(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "prior": t.number(),
            "provenanceId": t.array(t.string()).optional(),
            "synonyms": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokenSynonymIn"])
            ),
            "provenanceLanguage": t.string(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryTokenIn"])
    types["KnowledgeAnswersIntentQueryTokenOut"] = t.struct(
        {
            "ngram": t.string().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "provenance": t.string(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "prior": t.number(),
            "provenanceId": t.array(t.string()).optional(),
            "synonyms": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryTokenSynonymOut"])
            ),
            "provenanceLanguage": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryTokenOut"])
    types["MultiscaleFieldPresenceIn"] = t.struct(
        {"wellDefined": t.string(), "present": t.boolean().optional()}
    ).named(renames["MultiscaleFieldPresenceIn"])
    types["MultiscaleFieldPresenceOut"] = t.struct(
        {
            "wellDefined": t.string(),
            "present": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MultiscaleFieldPresenceOut"])
    types["GeostoreTrackProtoIn"] = t.struct(
        {
            "pose": t.array(t.proxy(renames["GeostorePoseProtoIn"])).optional(),
            "index": t.integer().optional(),
        }
    ).named(renames["GeostoreTrackProtoIn"])
    types["GeostoreTrackProtoOut"] = t.struct(
        {
            "pose": t.array(t.proxy(renames["GeostorePoseProtoOut"])).optional(),
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTrackProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiClientDataIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
            "key": t.string(),
            "namespace": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiClientDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiClientDataOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "key": t.string(),
            "namespace": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiClientDataOut"])
    types["GeostoreCountComparisonProtoIn"] = t.struct(
        {"comparisonOperator": t.string(), "count": t.integer()}
    ).named(renames["GeostoreCountComparisonProtoIn"])
    types["GeostoreCountComparisonProtoOut"] = t.struct(
        {
            "comparisonOperator": t.string(),
            "count": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCountComparisonProtoOut"])
    types["GeostoreLevelProtoIn"] = t.struct(
        {
            "number": t.number().optional(),
            "building": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreLevelProtoIn"])
    types["GeostoreLevelProtoOut"] = t.struct(
        {
            "number": t.number().optional(),
            "building": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLevelProtoOut"])
    types["SocialDiscoveryExternalEntityKeyIn"] = t.struct(
        {"email": t.string(), "phone": t.string(), "profileId": t.string().optional()}
    ).named(renames["SocialDiscoveryExternalEntityKeyIn"])
    types["SocialDiscoveryExternalEntityKeyOut"] = t.struct(
        {
            "email": t.string(),
            "phone": t.string(),
            "profileId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialDiscoveryExternalEntityKeyOut"])
    types["IndexingSpeechSpeechPropertiesProtoIn"] = t.struct(
        {
            "estimatedAudioDuration": t.integer().optional(),
            "audioOnly": t.boolean().optional(),
            "audioDuration": t.integer().optional(),
            "speechDuration": t.integer().optional(),
            "numWords": t.integer().optional(),
            "languageCode": t.string().optional(),
            "recognizerAccuracy": t.number().optional(),
            "estimatedAudioDurationConfidence": t.number().optional(),
            "truncatedFile": t.boolean().optional(),
        }
    ).named(renames["IndexingSpeechSpeechPropertiesProtoIn"])
    types["IndexingSpeechSpeechPropertiesProtoOut"] = t.struct(
        {
            "estimatedAudioDuration": t.integer().optional(),
            "audioOnly": t.boolean().optional(),
            "audioDuration": t.integer().optional(),
            "speechDuration": t.integer().optional(),
            "numWords": t.integer().optional(),
            "languageCode": t.string().optional(),
            "recognizerAccuracy": t.number().optional(),
            "estimatedAudioDurationConfidence": t.number().optional(),
            "truncatedFile": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSpeechSpeechPropertiesProtoOut"])
    types["GoogleCloudContentwarehouseV1HistogramQueryIn"] = t.struct(
        {
            "histogramQuery": t.string().optional(),
            "requirePreciseResultSize": t.boolean().optional(),
            "filters": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterIn"
                ]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1HistogramQueryIn"])
    types["GoogleCloudContentwarehouseV1HistogramQueryOut"] = t.struct(
        {
            "histogramQuery": t.string().optional(),
            "requirePreciseResultSize": t.boolean().optional(),
            "filters": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1HistogramQueryOut"])
    types["NlpSemanticParsingModelsDeviceNameIn"] = t.struct(
        {
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "rawText": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsDeviceNameIn"])
    types["NlpSemanticParsingModelsDeviceNameOut"] = t.struct(
        {
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "rawText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDeviceNameOut"])
    types["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn"] = t.struct(
        {
            "flagPredictionVersion": t.string().optional(),
            "flagPredictionScore": t.number().optional(),
        }
    ).named(renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn"])
    types["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut"] = t.struct(
        {
            "flagPredictionVersion": t.string().optional(),
            "flagPredictionScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut"])
    types["TrawlerFetchReplyDataDeliveryReportIn"] = t.struct(
        {
            "filePath": t.string().optional(),
            "events": t.array(t.proxy(renames["TrawlerEventIn"])).optional(),
            "status": t.string().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataDeliveryReportIn"])
    types["TrawlerFetchReplyDataDeliveryReportOut"] = t.struct(
        {
            "filePath": t.string().optional(),
            "events": t.array(t.proxy(renames["TrawlerEventOut"])).optional(),
            "status": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataDeliveryReportOut"])
    types["RepositoryWebrefKGCollectionIn"] = t.struct(
        {"id": t.string().optional(), "debugId": t.string().optional()}
    ).named(renames["RepositoryWebrefKGCollectionIn"])
    types["RepositoryWebrefKGCollectionOut"] = t.struct(
        {
            "id": t.string().optional(),
            "debugId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefKGCollectionOut"])
    types["KnowledgeAnswersDateTypeIn"] = t.struct(
        {
            "allowAllRangeResolutions": t.boolean().optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "allowAllResolutions": t.boolean().optional(),
            "allowAllResolutionsWithoutTime": t.boolean().optional(),
            "allowTimeResolutionsWithoutExplicitTimezone": t.boolean().optional(),
            "allowDayResolutionExceptHolidaysOrOrdinal": t.boolean().optional(),
            "allowYearResolution": t.boolean().optional(),
            "allowMonthResolution": t.boolean().optional(),
            "allowAllResolutionsExceptHolidays": t.boolean().optional(),
            "allowSymbolicTime": t.boolean().optional(),
            "allowHourResolution": t.boolean().optional(),
            "allowDayResolution": t.boolean().optional(),
            "allowNowResolution": t.boolean().optional(),
            "allowAllResolutionsWithout4digit24hrTime": t.boolean().optional(),
            "subType": t.string(),
        }
    ).named(renames["KnowledgeAnswersDateTypeIn"])
    types["KnowledgeAnswersDateTypeOut"] = t.struct(
        {
            "allowAllRangeResolutions": t.boolean().optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "allowAllResolutions": t.boolean().optional(),
            "allowAllResolutionsWithoutTime": t.boolean().optional(),
            "allowTimeResolutionsWithoutExplicitTimezone": t.boolean().optional(),
            "allowDayResolutionExceptHolidaysOrOrdinal": t.boolean().optional(),
            "allowYearResolution": t.boolean().optional(),
            "allowMonthResolution": t.boolean().optional(),
            "allowAllResolutionsExceptHolidays": t.boolean().optional(),
            "allowSymbolicTime": t.boolean().optional(),
            "allowHourResolution": t.boolean().optional(),
            "allowDayResolution": t.boolean().optional(),
            "allowNowResolution": t.boolean().optional(),
            "allowAllResolutionsWithout4digit24hrTime": t.boolean().optional(),
            "subType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersDateTypeOut"])
    types["AbuseiamSpecialRestrictionIn"] = t.struct({"type": t.string()}).named(
        renames["AbuseiamSpecialRestrictionIn"]
    )
    types["AbuseiamSpecialRestrictionOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AbuseiamSpecialRestrictionOut"])
    types["HtmlrenderWebkitHeadlessProtoCookieIn"] = t.struct(
        {
            "name": t.string(),
            "secure": t.boolean(),
            "domain": t.string(),
            "httpOnly": t.boolean(),
            "value": t.string(),
            "path": t.string(),
            "expiration": t.number(),
            "sameSite": t.string(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoCookieIn"])
    types["HtmlrenderWebkitHeadlessProtoCookieOut"] = t.struct(
        {
            "name": t.string(),
            "secure": t.boolean(),
            "domain": t.string(),
            "httpOnly": t.boolean(),
            "value": t.string(),
            "path": t.string(),
            "expiration": t.number(),
            "sameSite": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoCookieOut"])
    types["GeostoreRestrictionProtoIn"] = t.struct(
        {
            "intersectionGroup": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "style": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "restrictionGroup": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "autonomousDrivingProducts": t.array(t.string()).optional(),
            "scope": t.string().optional(),
            "travelMode": t.array(t.string()).optional(),
            "type": t.string().optional(),
            "vehicleAttributeFilter": t.proxy(
                renames["GeostoreVehicleAttributeFilterProtoIn"]
            ).optional(),
            "schedule": t.proxy(renames["GeostoreTimeScheduleProtoIn"]).optional(),
            "subpath": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
        }
    ).named(renames["GeostoreRestrictionProtoIn"])
    types["GeostoreRestrictionProtoOut"] = t.struct(
        {
            "intersectionGroup": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "style": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "restrictionGroup": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "autonomousDrivingProducts": t.array(t.string()).optional(),
            "scope": t.string().optional(),
            "travelMode": t.array(t.string()).optional(),
            "type": t.string().optional(),
            "vehicleAttributeFilter": t.proxy(
                renames["GeostoreVehicleAttributeFilterProtoOut"]
            ).optional(),
            "schedule": t.proxy(renames["GeostoreTimeScheduleProtoOut"]).optional(),
            "subpath": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRestrictionProtoOut"])
    types["CompositeDocLiveExperimentInfoIn"] = t.struct(
        {
            "perLiveExperimentInfo": t.array(
                t.proxy(
                    renames["CompositeDocLiveExperimentInfoPerLiveExperimentInfoIn"]
                )
            ).optional()
        }
    ).named(renames["CompositeDocLiveExperimentInfoIn"])
    types["CompositeDocLiveExperimentInfoOut"] = t.struct(
        {
            "perLiveExperimentInfo": t.array(
                t.proxy(
                    renames["CompositeDocLiveExperimentInfoPerLiveExperimentInfoOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocLiveExperimentInfoOut"])
    types["SocialGraphApiProtoDisplayNameSourceIn"] = t.struct(
        {"source": t.string()}
    ).named(renames["SocialGraphApiProtoDisplayNameSourceIn"])
    types["SocialGraphApiProtoDisplayNameSourceOut"] = t.struct(
        {"source": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SocialGraphApiProtoDisplayNameSourceOut"])
    types["KnowledgeAnswersCollectionTypeIn"] = t.struct(
        {
            "collection": t.array(t.string()).optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersCollectionTypeIn"])
    types["KnowledgeAnswersCollectionTypeOut"] = t.struct(
        {
            "collection": t.array(t.string()).optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersCollectionTypeOut"])
    types["NlpLoggingQusClientCallPathInfoIn"] = t.struct(
        {
            "temporaryAceTag": t.string().optional(),
            "rewriterType": t.string().optional(),
        }
    ).named(renames["NlpLoggingQusClientCallPathInfoIn"])
    types["NlpLoggingQusClientCallPathInfoOut"] = t.struct(
        {
            "temporaryAceTag": t.string().optional(),
            "rewriterType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpLoggingQusClientCallPathInfoOut"])
    types["GoogleCloudContentwarehouseV1ProcessorInfoIn"] = t.struct(
        {
            "schemaName": t.string().optional(),
            "documentType": t.string().optional(),
            "processorName": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ProcessorInfoIn"])
    types["GoogleCloudContentwarehouseV1ProcessorInfoOut"] = t.struct(
        {
            "schemaName": t.string().optional(),
            "documentType": t.string().optional(),
            "processorName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ProcessorInfoOut"])
    types["SdrEmbeddingIn"] = t.struct(
        {
            "values": t.array(t.number()),
            "compressedEmbeddings": t.proxy(
                renames["QualityRankembedMustangMustangRankEmbedInfoIn"]
            ),
            "version": t.integer(),
        }
    ).named(renames["SdrEmbeddingIn"])
    types["SdrEmbeddingOut"] = t.struct(
        {
            "values": t.array(t.number()),
            "compressedEmbeddings": t.proxy(
                renames["QualityRankembedMustangMustangRankEmbedInfoOut"]
            ),
            "version": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrEmbeddingOut"])
    types["VideoFileHDR10PlusStatsIn"] = t.struct(
        {
            "maxNumWindows": t.integer(),
            "masteringDisplayActualPeakLuminanceFlag": t.boolean().optional(),
            "applicationVersion": t.integer().optional(),
            "averageTargetedSystemDisplayMaximumLuminance": t.number().optional(),
            "targetedSystemDisplayActualPeakLuminanceFlag": t.boolean().optional(),
        }
    ).named(renames["VideoFileHDR10PlusStatsIn"])
    types["VideoFileHDR10PlusStatsOut"] = t.struct(
        {
            "maxNumWindows": t.integer(),
            "masteringDisplayActualPeakLuminanceFlag": t.boolean().optional(),
            "applicationVersion": t.integer().optional(),
            "averageTargetedSystemDisplayMaximumLuminance": t.number().optional(),
            "targetedSystemDisplayActualPeakLuminanceFlag": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileHDR10PlusStatsOut"])
    types["GoogleAssistantEmbeddedV1AlarmIn"] = t.struct(
        {
            "datePattern": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "scheduledTime": t.string().optional(),
            "timePattern": t.proxy(renames["GoogleTypeTimeOfDayIn"]).optional(),
            "label": t.string().optional(),
            "alarmId": t.string().optional(),
            "recurrencePattern": t.proxy(
                renames["GoogleAssistantEmbeddedV1AlarmRecurrenceIn"]
            ).optional(),
            "status": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1AlarmIn"])
    types["GoogleAssistantEmbeddedV1AlarmOut"] = t.struct(
        {
            "datePattern": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "scheduledTime": t.string().optional(),
            "timePattern": t.proxy(renames["GoogleTypeTimeOfDayOut"]).optional(),
            "label": t.string().optional(),
            "alarmId": t.string().optional(),
            "recurrencePattern": t.proxy(
                renames["GoogleAssistantEmbeddedV1AlarmRecurrenceOut"]
            ).optional(),
            "status": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1AlarmOut"])
    types["VideoContentSearchNamedEntityIn"] = t.struct(
        {"entityType": t.string().optional(), "text": t.string().optional()}
    ).named(renames["VideoContentSearchNamedEntityIn"])
    types["VideoContentSearchNamedEntityOut"] = t.struct(
        {
            "entityType": t.string().optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchNamedEntityOut"])
    types["AssistantLogsDeviceTargetingTestCodeIn"] = t.struct(
        {"type": t.string()}
    ).named(renames["AssistantLogsDeviceTargetingTestCodeIn"])
    types["AssistantLogsDeviceTargetingTestCodeOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantLogsDeviceTargetingTestCodeOut"])
    types["SecurityCredentialsCloudPrincipalProtoIn"] = t.struct(
        {"id": t.string().optional()}
    ).named(renames["SecurityCredentialsCloudPrincipalProtoIn"])
    types["SecurityCredentialsCloudPrincipalProtoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsCloudPrincipalProtoOut"])
    types["GeostoreParkingProtoIn"] = t.struct(
        {
            "parkingAvailable": t.boolean().optional(),
            "openingHours": t.proxy(renames["GeostoreOpeningHoursProtoIn"]).optional(),
            "allowance": t.array(
                t.proxy(renames["GeostoreParkingAllowanceProtoIn"])
            ).optional(),
            "restriction": t.array(
                t.proxy(renames["GeostoreParkingRestrictionProtoIn"])
            ).optional(),
            "parkingProviderFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreParkingProtoIn"])
    types["GeostoreParkingProtoOut"] = t.struct(
        {
            "parkingAvailable": t.boolean().optional(),
            "openingHours": t.proxy(renames["GeostoreOpeningHoursProtoOut"]).optional(),
            "allowance": t.array(
                t.proxy(renames["GeostoreParkingAllowanceProtoOut"])
            ).optional(),
            "restriction": t.array(
                t.proxy(renames["GeostoreParkingRestrictionProtoOut"])
            ).optional(),
            "parkingProviderFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreParkingProtoOut"])
    types["GoodocOverridesStyleIn"] = t.struct(
        {"value": t.string().optional(), "name": t.string().optional()}
    ).named(renames["GoodocOverridesStyleIn"])
    types["GoodocOverridesStyleOut"] = t.struct(
        {
            "value": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocOverridesStyleOut"])
    types["RepositoryWebrefMentionCompoundMentionIn"] = t.struct(
        {
            "mrfIndex": t.array(t.integer()).optional(),
            "component": t.array(
                t.proxy(renames["RepositoryWebrefMentionComponentIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefMentionCompoundMentionIn"])
    types["RepositoryWebrefMentionCompoundMentionOut"] = t.struct(
        {
            "mrfIndex": t.array(t.integer()).optional(),
            "component": t.array(
                t.proxy(renames["RepositoryWebrefMentionComponentOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionCompoundMentionOut"])
    types["GeostoreDimensionComparisonProtoIn"] = t.struct(
        {
            "comparisonOperator": t.string(),
            "dimensionWithUnit": t.proxy(renames["GeostoreDimensionProtoIn"]),
        }
    ).named(renames["GeostoreDimensionComparisonProtoIn"])
    types["GeostoreDimensionComparisonProtoOut"] = t.struct(
        {
            "comparisonOperator": t.string(),
            "dimensionWithUnit": t.proxy(renames["GeostoreDimensionProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDimensionComparisonProtoOut"])
    types["GoogleCloudContentwarehouseV1EnumValueIn"] = t.struct(
        {"value": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1EnumValueIn"])
    types["GoogleCloudContentwarehouseV1EnumValueOut"] = t.struct(
        {
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1EnumValueOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataIn"
    ] = t.struct(
        {
            "ttsServiceRequestBytes": t.string().optional(),
            "timerHeroUrl": t.string().optional(),
            "agentIds": t.array(t.string()).optional(),
            "animationUrl": t.string().optional(),
            "animationBlob": t.string().optional(),
        }
    ).named(
        renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataIn"]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataOut"
    ] = t.struct(
        {
            "ttsServiceRequestBytes": t.string().optional(),
            "timerHeroUrl": t.string().optional(),
            "agentIds": t.array(t.string()).optional(),
            "animationUrl": t.string().optional(),
            "animationBlob": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataOut"]
    )
    types["GoogleInternalAppsWaldoV1alphaUserStatusIn"] = t.struct(
        {
            "outsideWorkingHours": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursIn"]
            ).optional(),
            "inactive": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaInactiveIn"]
            ).optional(),
            "doNotDisturb": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaDoNotDisturbIn"]
            ).optional(),
            "inMeeting": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaInMeetingIn"]
            ).optional(),
            "calendarBusy": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaCalendarBusyIn"]
            ).optional(),
            "outOfOffice": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOutOfOfficeIn"]
            ).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserStatusIn"])
    types["GoogleInternalAppsWaldoV1alphaUserStatusOut"] = t.struct(
        {
            "outsideWorkingHours": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOutsideWorkingHoursOut"]
            ).optional(),
            "inactive": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaInactiveOut"]
            ).optional(),
            "doNotDisturb": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaDoNotDisturbOut"]
            ).optional(),
            "inMeeting": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaInMeetingOut"]
            ).optional(),
            "calendarBusy": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaCalendarBusyOut"]
            ).optional(),
            "outOfOffice": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOutOfOfficeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserStatusOut"])
    types["NlpSemanticParsingModelsMediaPurchaseInfoIn"] = t.struct(
        {"orderType": t.string(), "purchaseTimestampSec": t.string().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaPurchaseInfoIn"])
    types["NlpSemanticParsingModelsMediaPurchaseInfoOut"] = t.struct(
        {
            "orderType": t.string(),
            "purchaseTimestampSec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPurchaseInfoOut"])
    types["GoogleAssistantEmbeddedV1FitnessActivityIn"] = t.struct(
        {
            "activityId": t.string(),
            "state": t.string().optional(),
            "type": t.string().optional(),
            "previouslyAccumulatedDuration": t.string().optional(),
            "mostRecentStartTime": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1FitnessActivityIn"])
    types["GoogleAssistantEmbeddedV1FitnessActivityOut"] = t.struct(
        {
            "activityId": t.string(),
            "state": t.string().optional(),
            "type": t.string().optional(),
            "previouslyAccumulatedDuration": t.string().optional(),
            "mostRecentStartTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1FitnessActivityOut"])
    types["GeostoreOpeningHoursProtoIn"] = t.struct(
        {
            "regularHours": t.proxy(renames["GeostoreBusinessHoursProtoIn"]).optional(),
            "exception": t.array(
                t.proxy(renames["GeostoreExceptionalHoursProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreOpeningHoursProtoIn"])
    types["GeostoreOpeningHoursProtoOut"] = t.struct(
        {
            "regularHours": t.proxy(
                renames["GeostoreBusinessHoursProtoOut"]
            ).optional(),
            "exception": t.array(
                t.proxy(renames["GeostoreExceptionalHoursProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreOpeningHoursProtoOut"])
    types["GeostoreAddressProtoIn"] = t.struct(
        {
            "addressLines": t.array(
                t.proxy(renames["GeostoreAddressLinesProtoIn"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "crossStreet": t.array(
                t.proxy(renames["GeostoreAddressComponentProtoIn"])
            ).optional(),
            "partialDenormalization": t.proxy(
                renames["GeostoreAddressProtoIn"]
            ).optional(),
            "templateId": t.string().optional(),
            "component": t.array(
                t.proxy(renames["GeostoreAddressComponentProtoIn"])
            ).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["GeostoreAddressProtoIn"])
    types["GeostoreAddressProtoOut"] = t.struct(
        {
            "addressLines": t.array(
                t.proxy(renames["GeostoreAddressLinesProtoOut"])
            ).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "crossStreet": t.array(
                t.proxy(renames["GeostoreAddressComponentProtoOut"])
            ).optional(),
            "partialDenormalization": t.proxy(
                renames["GeostoreAddressProtoOut"]
            ).optional(),
            "templateId": t.string().optional(),
            "component": t.array(
                t.proxy(renames["GeostoreAddressComponentProtoOut"])
            ).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAddressProtoOut"])
    types["QualityActionsRingtoneIn"] = t.struct(
        {
            "soundUrl": t.array(t.string()).optional(),
            "pauseDuration": t.proxy(renames["AssistantApiDurationIn"]).optional(),
        }
    ).named(renames["QualityActionsRingtoneIn"])
    types["QualityActionsRingtoneOut"] = t.struct(
        {
            "soundUrl": t.array(t.string()).optional(),
            "pauseDuration": t.proxy(renames["AssistantApiDurationOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsRingtoneOut"])
    types["EmbedsDeepLinkDataIn"] = t.struct(
        {
            "appId": t.string().optional(),
            "client": t.array(
                t.proxy(renames["EmbedsPackagingServiceClientIn"])
            ).optional(),
            "url": t.string().optional(),
            "deepLinkId": t.string().optional(),
        }
    ).named(renames["EmbedsDeepLinkDataIn"])
    types["EmbedsDeepLinkDataOut"] = t.struct(
        {
            "appId": t.string().optional(),
            "client": t.array(
                t.proxy(renames["EmbedsPackagingServiceClientOut"])
            ).optional(),
            "url": t.string().optional(),
            "deepLinkId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["EmbedsDeepLinkDataOut"])
    types["GoodocBreakLabelIn"] = t.struct(
        {"isPrefix": t.boolean().optional(), "BreakLabelType": t.integer()}
    ).named(renames["GoodocBreakLabelIn"])
    types["GoodocBreakLabelOut"] = t.struct(
        {
            "isPrefix": t.boolean().optional(),
            "BreakLabelType": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocBreakLabelOut"])
    types["AttentionalEntitiesMentionPropertiesListEntryInfoIn"] = t.struct(
        {"index": t.string().optional(), "lexicalGroundingsId": t.string().optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesListEntryInfoIn"])
    types["AttentionalEntitiesMentionPropertiesListEntryInfoOut"] = t.struct(
        {
            "index": t.string().optional(),
            "lexicalGroundingsId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttentionalEntitiesMentionPropertiesListEntryInfoOut"])
    types["RepositoryWebrefGeoMetadataProtoAddressSynonymIn"] = t.struct(
        {"name": t.string(), "type": t.integer().optional(), "language": t.string()}
    ).named(renames["RepositoryWebrefGeoMetadataProtoAddressSynonymIn"])
    types["RepositoryWebrefGeoMetadataProtoAddressSynonymOut"] = t.struct(
        {
            "name": t.string(),
            "type": t.integer().optional(),
            "language": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefGeoMetadataProtoAddressSynonymOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceIn"
    ] = t.struct(
        {
            "contactGroupId": t.string(),
            "isSynthetic": t.boolean().optional(),
            "type": t.string(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceOut"
    ] = t.struct(
        {
            "contactGroupId": t.string(),
            "isSynthetic": t.boolean().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceOut"]
    )
    types["GeostoreRelationProtoIn"] = t.struct(
        {
            "otherFeatureCountryCode": t.string().optional(),
            "relationIsReversed": t.boolean().optional(),
            "otherFeatureType": t.integer().optional(),
            "overlapFraction": t.number().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "otherFeatureName": t.array(
                t.proxy(renames["GeostoreNameProtoIn"])
            ).optional(),
            "relation": t.string().optional(),
            "otherFeatureTerritorialAdministrator": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "otherFeatureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreRelationProtoIn"])
    types["GeostoreRelationProtoOut"] = t.struct(
        {
            "otherFeatureCountryCode": t.string().optional(),
            "relationIsReversed": t.boolean().optional(),
            "otherFeatureType": t.integer().optional(),
            "overlapFraction": t.number().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "otherFeatureName": t.array(
                t.proxy(renames["GeostoreNameProtoOut"])
            ).optional(),
            "relation": t.string().optional(),
            "otherFeatureTerritorialAdministrator": t.string().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "otherFeatureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRelationProtoOut"])
    types["NlpSemanticParsingLocalMenuItemIn"] = t.struct(
        {"menuItemId": t.string().optional()}
    ).named(renames["NlpSemanticParsingLocalMenuItemIn"])
    types["NlpSemanticParsingLocalMenuItemOut"] = t.struct(
        {
            "menuItemId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalMenuItemOut"])
    types["KnowledgeGraphTripleObjProtoIn"] = t.struct(
        {"descriptorFullName": t.string().optional(), "data": t.string().optional()}
    ).named(renames["KnowledgeGraphTripleObjProtoIn"])
    types["KnowledgeGraphTripleObjProtoOut"] = t.struct(
        {
            "descriptorFullName": t.string().optional(),
            "data": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphTripleObjProtoOut"])
    types[
        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdIn"
    ] = t.struct(
        {
            "id": t.string(),
            "isLocal": t.boolean(),
            "isPla": t.boolean(),
            "isGsx": t.boolean(),
        }
    ).named(
        renames["NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdIn"]
    )
    types[
        "NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdOut"
    ] = t.struct(
        {
            "id": t.string(),
            "isLocal": t.boolean(),
            "isPla": t.boolean(),
            "isGsx": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterIdOut"]
    )
    types["AssistantApiThirdPartyActionConfigIn"] = t.struct(
        {
            "deviceActionCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceActionCapabilityIn"]
            ).optional(),
            "projectConfigs": t.array(
                t.proxy(renames["AssistantApiThirdPartyActionConfigProjectConfigIn"])
            ).optional(),
        }
    ).named(renames["AssistantApiThirdPartyActionConfigIn"])
    types["AssistantApiThirdPartyActionConfigOut"] = t.struct(
        {
            "deviceActionCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceActionCapabilityOut"]
            ).optional(),
            "projectConfigs": t.array(
                t.proxy(renames["AssistantApiThirdPartyActionConfigProjectConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiThirdPartyActionConfigOut"])
    types["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"] = t.struct(
        {"failureType": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"])
    types["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"] = t.struct(
        {
            "failureType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"])
    types["AssistantApiThirdPartyActionConfigProjectConfigIn"] = t.struct(
        {"projectId": t.string().optional()}
    ).named(renames["AssistantApiThirdPartyActionConfigProjectConfigIn"])
    types["AssistantApiThirdPartyActionConfigProjectConfigOut"] = t.struct(
        {
            "projectId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiThirdPartyActionConfigProjectConfigOut"])
    types["GeostoreCellCoveringProtoIn"] = t.struct(
        {"cellId": t.array(t.string()).optional()}
    ).named(renames["GeostoreCellCoveringProtoIn"])
    types["GeostoreCellCoveringProtoOut"] = t.struct(
        {
            "cellId": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCellCoveringProtoOut"])
    types["NlpSemanticParsingModelsCommunicationRelationshipArgumentIn"] = t.struct(
        {
            "canonicalLexicalMid": t.string().optional(),
            "canonical": t.string().optional(),
            "alias": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationRelationshipArgumentIn"])
    types["NlpSemanticParsingModelsCommunicationRelationshipArgumentOut"] = t.struct(
        {
            "canonicalLexicalMid": t.string().optional(),
            "canonical": t.string().optional(),
            "alias": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationRelationshipArgumentOut"])
    types["GeostoreBorderProtoIn"] = t.struct(
        {
            "featureIdRight": t.proxy(renames["GeostoreFeatureIdProtoIn"]),
            "status": t.string().optional(),
            "type": t.integer().optional(),
            "featureIdLeft": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "overrideStatus": t.array(
                t.proxy(renames["GeostoreOverrideBorderStatusProtoIn"])
            ).optional(),
            "logicalBorder": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreBorderProtoIn"])
    types["GeostoreBorderProtoOut"] = t.struct(
        {
            "featureIdRight": t.proxy(renames["GeostoreFeatureIdProtoOut"]),
            "status": t.string().optional(),
            "type": t.integer().optional(),
            "featureIdLeft": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "overrideStatus": t.array(
                t.proxy(renames["GeostoreOverrideBorderStatusProtoOut"])
            ).optional(),
            "logicalBorder": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBorderProtoOut"])
    types["SocialGraphApiProtoNotificationTriggerIn"] = t.struct(
        {
            "daysBeforeActiveDate": t.integer().optional(),
            "notificationTimeOfDay": t.proxy(
                renames["GoogleTypeTimeOfDayIn"]
            ).optional(),
        }
    ).named(renames["SocialGraphApiProtoNotificationTriggerIn"])
    types["SocialGraphApiProtoNotificationTriggerOut"] = t.struct(
        {
            "daysBeforeActiveDate": t.integer().optional(),
            "notificationTimeOfDay": t.proxy(
                renames["GoogleTypeTimeOfDayOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoNotificationTriggerOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoIn"] = t.struct(
        {
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataIn"]
            ).optional(),
            "containerId": t.string().optional(),
            "containerType": t.string().optional(),
            "materialized": t.boolean().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoOut"] = t.struct(
        {
            "extendedData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataOut"
                ]
            ).optional(),
            "containerId": t.string().optional(),
            "containerType": t.string().optional(),
            "materialized": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoOut"])
    types["GoogleCloudContentwarehouseV1TimestampTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TimestampTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1TimestampTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TimestampTypeOptionsOut"])
    types["SocialCommonSegmentsIn"] = t.struct(
        {"segments": t.array(t.proxy(renames["SocialCommonSegmentIn"]))}
    ).named(renames["SocialCommonSegmentsIn"])
    types["SocialCommonSegmentsOut"] = t.struct(
        {
            "segments": t.array(t.proxy(renames["SocialCommonSegmentOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonSegmentsOut"])
    types["VideoContentSearchVideoCommonFeaturesIn"] = t.struct(
        {
            "labelPhraseEmbeddingModel": t.string().optional(),
            "captionInfo": t.proxy(
                renames["VideoContentSearchCaptionInfoIn"]
            ).optional(),
            "unifiedScoringBertModels": t.array(t.string()),
            "anchorCount": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchVideoCommonFeaturesIn"])
    types["VideoContentSearchVideoCommonFeaturesOut"] = t.struct(
        {
            "labelPhraseEmbeddingModel": t.string().optional(),
            "captionInfo": t.proxy(
                renames["VideoContentSearchCaptionInfoOut"]
            ).optional(),
            "unifiedScoringBertModels": t.array(t.string()),
            "anchorCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoCommonFeaturesOut"])
    types["VideoContentSearchVideoInfoIn"] = t.struct(
        {
            "transcriptAnnotations": t.proxy(
                renames["QualityWebanswersTranscriptAnnotationsIn"]
            ).optional(),
            "numViews": t.string().optional(),
            "docLanguage": t.string().optional(),
            "videoUrl": t.string().optional(),
            "durationMs": t.number().optional(),
            "webrefEntities": t.proxy(
                renames["RepositoryWebrefWebrefEntitiesIn"]
            ).optional(),
            "hasAsr": t.boolean().optional(),
            "navqueries": t.array(t.string()).optional(),
            "videoGenre": t.string().optional(),
            "hasDescriptionAnchors": t.boolean().optional(),
            "crapsData": t.proxy(renames["QualityNavboostCrapsCrapsDataIn"]).optional(),
            "asrLanguage": t.string().optional(),
            "url": t.string().optional(),
            "isWatchpage": t.boolean().optional(),
            "saftTranscript": t.string().optional(),
            "pseudoVideoData": t.proxy(renames["PseudoVideoDataIn"]).optional(),
            "titleLanguage": t.string().optional(),
            "amarnaDocid": t.string().optional(),
            "verticalItem": t.array(
                t.proxy(renames["IndexingMlVerticalVerticalItemIn"])
            ).optional(),
            "title": t.string().optional(),
            "nsr": t.number().optional(),
            "videoType": t.string(),
            "salientTermSet": t.proxy(
                renames["QualitySalientTermsSalientTermSetIn"]
            ).optional(),
            "uniqueChromeViews": t.integer().optional(),
            "saftDoc": t.proxy(renames["NlpSaftDocumentIn"]).optional(),
            "isSafe": t.boolean().optional(),
            "subindexid": t.array(t.integer()).optional(),
            "description": t.string().optional(),
        }
    ).named(renames["VideoContentSearchVideoInfoIn"])
    types["VideoContentSearchVideoInfoOut"] = t.struct(
        {
            "transcriptAnnotations": t.proxy(
                renames["QualityWebanswersTranscriptAnnotationsOut"]
            ).optional(),
            "numViews": t.string().optional(),
            "docLanguage": t.string().optional(),
            "videoUrl": t.string().optional(),
            "durationMs": t.number().optional(),
            "webrefEntities": t.proxy(
                renames["RepositoryWebrefWebrefEntitiesOut"]
            ).optional(),
            "hasAsr": t.boolean().optional(),
            "navqueries": t.array(t.string()).optional(),
            "videoGenre": t.string().optional(),
            "hasDescriptionAnchors": t.boolean().optional(),
            "crapsData": t.proxy(
                renames["QualityNavboostCrapsCrapsDataOut"]
            ).optional(),
            "asrLanguage": t.string().optional(),
            "url": t.string().optional(),
            "isWatchpage": t.boolean().optional(),
            "saftTranscript": t.string().optional(),
            "pseudoVideoData": t.proxy(renames["PseudoVideoDataOut"]).optional(),
            "titleLanguage": t.string().optional(),
            "amarnaDocid": t.string().optional(),
            "verticalItem": t.array(
                t.proxy(renames["IndexingMlVerticalVerticalItemOut"])
            ).optional(),
            "title": t.string().optional(),
            "nsr": t.number().optional(),
            "videoType": t.string(),
            "salientTermSet": t.proxy(
                renames["QualitySalientTermsSalientTermSetOut"]
            ).optional(),
            "uniqueChromeViews": t.integer().optional(),
            "saftDoc": t.proxy(renames["NlpSaftDocumentOut"]).optional(),
            "isSafe": t.boolean().optional(),
            "subindexid": t.array(t.integer()).optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoInfoOut"])
    types["SecurityCredentialsEventProtoIn"] = t.struct(
        {"eventId": t.string().optional(), "memberType": t.integer().optional()}
    ).named(renames["SecurityCredentialsEventProtoIn"])
    types["SecurityCredentialsEventProtoOut"] = t.struct(
        {
            "eventId": t.string().optional(),
            "memberType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsEventProtoOut"])
    types["QualityTravelGoodSitesDataSignalIn"] = t.struct(
        {"name": t.string(), "value": t.number()}
    ).named(renames["QualityTravelGoodSitesDataSignalIn"])
    types["QualityTravelGoodSitesDataSignalOut"] = t.struct(
        {
            "name": t.string(),
            "value": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTravelGoodSitesDataSignalOut"])
    types["GoogleCloudContentwarehouseV1TextTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TextTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1TextTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TextTypeOptionsOut"])
    types["NlpSemanticParsingModelsMediaQuantificationIn"] = t.struct(
        {"lexical": t.string(), "number": t.integer().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaQuantificationIn"])
    types["NlpSemanticParsingModelsMediaQuantificationOut"] = t.struct(
        {
            "lexical": t.string(),
            "number": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaQuantificationOut"])
    types["RepositoryWebrefLexicalAnnotationIn"] = t.struct(
        {"lexicalRange": t.array(t.proxy(renames["RepositoryWebrefLexicalRangeIn"]))}
    ).named(renames["RepositoryWebrefLexicalAnnotationIn"])
    types["RepositoryWebrefLexicalAnnotationOut"] = t.struct(
        {
            "lexicalRange": t.array(
                t.proxy(renames["RepositoryWebrefLexicalRangeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLexicalAnnotationOut"])
    types["RepositoryWebrefEntityNameSourceIn"] = t.struct(
        {
            "entityScore": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameScoreIn"])
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameSourceIn"])
    types["RepositoryWebrefEntityNameSourceOut"] = t.struct(
        {
            "entityScore": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameScoreOut"])
            ).optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameSourceOut"])
    types["GeostoreLocaleProtoIn"] = t.struct(
        {
            "language": t.array(
                t.proxy(renames["GeostoreLocaleLanguageProtoIn"])
            ).optional(),
            "localizationPolicyId": t.string().optional(),
        }
    ).named(renames["GeostoreLocaleProtoIn"])
    types["GeostoreLocaleProtoOut"] = t.struct(
        {
            "language": t.array(
                t.proxy(renames["GeostoreLocaleLanguageProtoOut"])
            ).optional(),
            "localizationPolicyId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLocaleProtoOut"])
    types["IndexingSignalAggregatorSccSignalIn"] = t.struct(
        {
            "clicksImage": t.number(),
            "debugInfo": t.array(t.string()).optional(),
            "numImageUrls": t.number().optional(),
            "clicksTotal": t.number(),
            "numUrls": t.string(),
            "clicksBad": t.number(),
            "pattern": t.string().optional(),
        }
    ).named(renames["IndexingSignalAggregatorSccSignalIn"])
    types["IndexingSignalAggregatorSccSignalOut"] = t.struct(
        {
            "clicksImage": t.number(),
            "debugInfo": t.array(t.string()).optional(),
            "numImageUrls": t.number().optional(),
            "clicksTotal": t.number(),
            "numUrls": t.string(),
            "clicksBad": t.number(),
            "pattern": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorSccSignalOut"])
    types["RepositoryWebrefClusterMetadataIn"] = t.struct(
        {
            "ruleInstance": t.proxy(
                renames["RepositoryWebrefClusterProtoRuleInstanceIn"]
            ).optional(),
            "isSet": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefClusterMetadataIn"])
    types["RepositoryWebrefClusterMetadataOut"] = t.struct(
        {
            "ruleInstance": t.proxy(
                renames["RepositoryWebrefClusterProtoRuleInstanceOut"]
            ).optional(),
            "isSet": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterMetadataOut"])
    types["VideoMediaOverviewMediaClipInfoOverviewIn"] = t.struct(
        {"hasGeolocation": t.boolean().optional()}
    ).named(renames["VideoMediaOverviewMediaClipInfoOverviewIn"])
    types["VideoMediaOverviewMediaClipInfoOverviewOut"] = t.struct(
        {
            "hasGeolocation": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaOverviewMediaClipInfoOverviewOut"])
    types["DrishtiDenseFeatureDataIn"] = t.struct(
        {
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "value": t.array(t.number()).optional(),
        }
    ).named(renames["DrishtiDenseFeatureDataIn"])
    types["DrishtiDenseFeatureDataOut"] = t.struct(
        {
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "value": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiDenseFeatureDataOut"])
    types["KnowledgeAnswersSensitivityInstructionPreviousQueryIn"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyIn"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyIn"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyIn"]),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionPreviousQueryIn"])
    types["KnowledgeAnswersSensitivityInstructionPreviousQueryOut"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyOut"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyOut"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionPreviousQueryOut"])
    types["GoodocBoxPartitionsIn"] = t.struct(
        {"span": t.array(t.integer()).optional(), "direction": t.integer()}
    ).named(renames["GoodocBoxPartitionsIn"])
    types["GoodocBoxPartitionsOut"] = t.struct(
        {
            "span": t.array(t.integer()).optional(),
            "direction": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocBoxPartitionsOut"])
    types["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyIn"] = t.struct(
        {"keepsConversationAliveAfterOpeningApp": t.boolean().optional()}
    ).named(renames["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyIn"])
    types["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyOut"] = t.struct(
        {
            "keepsConversationAliveAfterOpeningApp": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyOut"])
    types["AssistantApiDateIn"] = t.struct(
        {
            "month": t.integer().optional(),
            "year": t.integer().optional(),
            "day": t.integer().optional(),
        }
    ).named(renames["AssistantApiDateIn"])
    types["AssistantApiDateOut"] = t.struct(
        {
            "month": t.integer().optional(),
            "year": t.integer().optional(),
            "day": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiDateOut"])
    types["AssistantApiAccessControlOutputIn"] = t.struct(
        {
            "guestAccessOnYoutube": t.string(),
            "allowNonUnicornUserAccessYoutubeKids": t.boolean().optional(),
        }
    ).named(renames["AssistantApiAccessControlOutputIn"])
    types["AssistantApiAccessControlOutputOut"] = t.struct(
        {
            "guestAccessOnYoutube": t.string(),
            "allowNonUnicornUserAccessYoutubeKids": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAccessControlOutputOut"])
    types["SocialGraphApiDataColumnIn"] = t.struct(
        {"columnName": t.string().optional(), "value": t.string().optional()}
    ).named(renames["SocialGraphApiDataColumnIn"])
    types["SocialGraphApiDataColumnOut"] = t.struct(
        {
            "columnName": t.string().optional(),
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiDataColumnOut"])
    types["StorageGraphBfgTripleProvenanceIn"] = t.struct(
        {
            "sourceCategory": t.array(t.string()),
            "extractionPattern": t.string(),
            "spiiCertification": t.proxy(renames["StorageGraphBfgSpiiCertificationIn"]),
            "isSupportingData": t.boolean().optional(),
            "authoringTimestamp": t.string(),
            "lgMetadata": t.proxy(
                renames["StorageGraphBfgLivegraphProvenanceMetadataIn"]
            ).optional(),
            "sourceDocId": t.array(t.string()),
            "freebaseAttribution": t.string().optional(),
            "policyMetadata": t.proxy(
                renames["StorageGraphBfgPolicyMetadataIn"]
            ).optional(),
            "process": t.string().optional(),
            "creator": t.string().optional(),
            "restrictions": t.array(t.string()),
            "dataset": t.string().optional(),
            "rankingToken": t.string().optional(),
            "extractionTimestamp": t.string(),
            "source": t.string().optional(),
            "accessRequired": t.string().optional(),
            "provenanceExtension": t.proxy(renames["Proto2BridgeMessageSetIn"]),
            "requiresTriangulation": t.boolean().optional(),
            "accessRequiredInt": t.integer().optional(),
        }
    ).named(renames["StorageGraphBfgTripleProvenanceIn"])
    types["StorageGraphBfgTripleProvenanceOut"] = t.struct(
        {
            "sourceCategory": t.array(t.string()),
            "extractionPattern": t.string(),
            "spiiCertification": t.proxy(
                renames["StorageGraphBfgSpiiCertificationOut"]
            ),
            "isSupportingData": t.boolean().optional(),
            "authoringTimestamp": t.string(),
            "lgMetadata": t.proxy(
                renames["StorageGraphBfgLivegraphProvenanceMetadataOut"]
            ).optional(),
            "sourceDocId": t.array(t.string()),
            "freebaseAttribution": t.string().optional(),
            "policyMetadata": t.proxy(
                renames["StorageGraphBfgPolicyMetadataOut"]
            ).optional(),
            "process": t.string().optional(),
            "creator": t.string().optional(),
            "restrictions": t.array(t.string()),
            "dataset": t.string().optional(),
            "rankingToken": t.string().optional(),
            "extractionTimestamp": t.string(),
            "source": t.string().optional(),
            "accessRequired": t.string().optional(),
            "provenanceExtension": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "requiresTriangulation": t.boolean().optional(),
            "accessRequiredInt": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgTripleProvenanceOut"])
    types["GeostoreBusinessHoursProtoIn"] = t.struct(
        {
            "data": t.proxy(renames["BusinessHoursIn"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
        }
    ).named(renames["GeostoreBusinessHoursProtoIn"])
    types["GeostoreBusinessHoursProtoOut"] = t.struct(
        {
            "data": t.proxy(renames["BusinessHoursOut"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBusinessHoursProtoOut"])
    types["SearchPolicyRankableSensitivityGroundingProviderIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SearchPolicyRankableSensitivityGroundingProviderIn"])
    types["SearchPolicyRankableSensitivityGroundingProviderOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SearchPolicyRankableSensitivityGroundingProviderOut"])
    types["ImageRepositoryYoutubeProcessingFilterIn"] = t.struct(
        {"previewsFilteredReason": t.array(t.string())}
    ).named(renames["ImageRepositoryYoutubeProcessingFilterIn"])
    types["ImageRepositoryYoutubeProcessingFilterOut"] = t.struct(
        {
            "previewsFilteredReason": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryYoutubeProcessingFilterOut"])
    types["LensDiscoveryStyleAestheticsScoreSignalsIn"] = t.struct(
        {"version": t.string(), "discretizedAestheticsScore": t.integer().optional()}
    ).named(renames["LensDiscoveryStyleAestheticsScoreSignalsIn"])
    types["LensDiscoveryStyleAestheticsScoreSignalsOut"] = t.struct(
        {
            "version": t.string(),
            "discretizedAestheticsScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStyleAestheticsScoreSignalsOut"])
    types["NlpSemanticParsingNumberFractionNumberIn"] = t.struct(
        {
            "denominator": t.proxy(renames["NlpSemanticParsingNumberSimpleNumberIn"]),
            "precision": t.integer().optional(),
            "numerator": t.proxy(
                renames["NlpSemanticParsingNumberSimpleNumberIn"]
            ).optional(),
            "wholeNumber": t.proxy(
                renames["NlpSemanticParsingNumberSimpleNumberIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingNumberFractionNumberIn"])
    types["NlpSemanticParsingNumberFractionNumberOut"] = t.struct(
        {
            "denominator": t.proxy(renames["NlpSemanticParsingNumberSimpleNumberOut"]),
            "precision": t.integer().optional(),
            "numerator": t.proxy(
                renames["NlpSemanticParsingNumberSimpleNumberOut"]
            ).optional(),
            "wholeNumber": t.proxy(
                renames["NlpSemanticParsingNumberSimpleNumberOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingNumberFractionNumberOut"])
    types["GoogleCloudContentwarehouseV1InvalidRuleIn"] = t.struct(
        {
            "error": t.string().optional(),
            "rule": t.proxy(renames["GoogleCloudContentwarehouseV1RuleIn"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1InvalidRuleIn"])
    types["GoogleCloudContentwarehouseV1InvalidRuleOut"] = t.struct(
        {
            "error": t.proxy(renames["ErrorResponse"]).optional(),
            "rule": t.proxy(renames["GoogleCloudContentwarehouseV1RuleOut"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1InvalidRuleOut"])
    types["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataIn"] = t.struct(
        {
            "entityType": t.string(),
            "presence": t.string(),
            "segmentedMembershipCounts": t.proxy(
                renames["AppsDynamiteSharedSegmentedMembershipCountsIn"]
            ).optional(),
            "memberCount": t.string().optional(),
            "organizationInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoIn"]
            ),
            "avatarUrl": t.string().optional(),
            "isMembershipVisibleToCaller": t.boolean().optional(),
            "developerName": t.string().optional(),
            "dndState": t.string(),
            "description": t.string().optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataIn"])
    types["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataOut"] = t.struct(
        {
            "entityType": t.string(),
            "presence": t.string(),
            "segmentedMembershipCounts": t.proxy(
                renames["AppsDynamiteSharedSegmentedMembershipCountsOut"]
            ).optional(),
            "memberCount": t.string().optional(),
            "organizationInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoOut"]
            ),
            "avatarUrl": t.string().optional(),
            "isMembershipVisibleToCaller": t.boolean().optional(),
            "developerName": t.string().optional(),
            "dndState": t.string(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataOut"])
    types["GoogleCloudContentwarehouseV1TimestampArrayIn"] = t.struct(
        {
            "values": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1TimestampValueIn"])
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1TimestampArrayIn"])
    types["GoogleCloudContentwarehouseV1TimestampArrayOut"] = t.struct(
        {
            "values": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1TimestampValueOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1TimestampArrayOut"])
    types["RepositoryWebrefLinkInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["RepositoryWebrefEntityLinkMetadataIn"]
            ).optional(),
            "aggregatedScore": t.number().optional(),
            "source": t.array(
                t.proxy(renames["RepositoryWebrefEntityLinkSourceIn"])
            ).optional(),
            "isPreferredDirection": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefLinkInfoIn"])
    types["RepositoryWebrefLinkInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["RepositoryWebrefEntityLinkMetadataOut"]
            ).optional(),
            "aggregatedScore": t.number().optional(),
            "source": t.array(
                t.proxy(renames["RepositoryWebrefEntityLinkSourceOut"])
            ).optional(),
            "isPreferredDirection": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLinkInfoOut"])
    types["NlpSemanticParsingModelsMediaYouTubePlaylistInfoIn"] = t.struct(
        {
            "videoCount": t.integer().optional(),
            "numVidsPlayableInWoodstock": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaYouTubePlaylistInfoIn"])
    types["NlpSemanticParsingModelsMediaYouTubePlaylistInfoOut"] = t.struct(
        {
            "videoCount": t.integer().optional(),
            "numVidsPlayableInWoodstock": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaYouTubePlaylistInfoOut"])
    types["ResearchScamRestrictStatsIn"] = t.struct(
        {
            "numTotalDatapoints": t.string().optional(),
            "numActiveDatapoints": t.string().optional(),
        }
    ).named(renames["ResearchScamRestrictStatsIn"])
    types["ResearchScamRestrictStatsOut"] = t.struct(
        {
            "numTotalDatapoints": t.string().optional(),
            "numActiveDatapoints": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamRestrictStatsOut"])
    types["TrawlerMultiverseClientIdentifierIn"] = t.struct(
        {"topicName": t.string(), "trafficType": t.string()}
    ).named(renames["TrawlerMultiverseClientIdentifierIn"])
    types["TrawlerMultiverseClientIdentifierOut"] = t.struct(
        {
            "topicName": t.string(),
            "trafficType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerMultiverseClientIdentifierOut"])
    types["MediaIndexFrameIdentifierPreviewFrameZeroVariantIn"] = t.struct(
        {
            "xtagList": t.proxy(renames["MediaIndexXtagListIn"]).optional(),
            "previewLength": t.string(),
        }
    ).named(renames["MediaIndexFrameIdentifierPreviewFrameZeroVariantIn"])
    types["MediaIndexFrameIdentifierPreviewFrameZeroVariantOut"] = t.struct(
        {
            "xtagList": t.proxy(renames["MediaIndexXtagListOut"]).optional(),
            "previewLength": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexFrameIdentifierPreviewFrameZeroVariantOut"])
    types["ImageRepositoryAmarnaStatusIn"] = t.struct(
        {"status": t.string(), "reason": t.string()}
    ).named(renames["ImageRepositoryAmarnaStatusIn"])
    types["ImageRepositoryAmarnaStatusOut"] = t.struct(
        {
            "status": t.string(),
            "reason": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryAmarnaStatusOut"])
    types["BiasingPerDocData2In"] = t.struct(
        {"biasingField": t.array(t.proxy(renames["BiasingPerDocData2BiasingFieldIn"]))}
    ).named(renames["BiasingPerDocData2In"])
    types["BiasingPerDocData2Out"] = t.struct(
        {
            "biasingField": t.array(
                t.proxy(renames["BiasingPerDocData2BiasingFieldOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BiasingPerDocData2Out"])
    types["WatchpageLanguageWatchPageLanguageResultIn"] = t.struct(
        {"watchpageLanguage": t.string().optional()}
    ).named(renames["WatchpageLanguageWatchPageLanguageResultIn"])
    types["WatchpageLanguageWatchPageLanguageResultOut"] = t.struct(
        {
            "watchpageLanguage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WatchpageLanguageWatchPageLanguageResultOut"])
    types["KnowledgeGraphQualifierIn"] = t.struct(
        {
            "value": t.proxy(renames["KnowledgeGraphTripleObjIn"]),
            "pred": t.string().optional(),
        }
    ).named(renames["KnowledgeGraphQualifierIn"])
    types["KnowledgeGraphQualifierOut"] = t.struct(
        {
            "value": t.proxy(renames["KnowledgeGraphTripleObjOut"]),
            "pred": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphQualifierOut"])
    types["GeostoreBizBuilderReferenceProtoIn"] = t.struct(
        {"id": t.string().optional()}
    ).named(renames["GeostoreBizBuilderReferenceProtoIn"])
    types["GeostoreBizBuilderReferenceProtoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBizBuilderReferenceProtoOut"])
    types["ScienceCitationReferenceDiscussionIn"] = t.struct(
        {"Level": t.integer(), "TargetID": t.string()}
    ).named(renames["ScienceCitationReferenceDiscussionIn"])
    types["ScienceCitationReferenceDiscussionOut"] = t.struct(
        {
            "Level": t.integer(),
            "TargetID": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationReferenceDiscussionOut"])
    types["GeostoreIntersectionGroupProtoIn"] = t.struct(
        {
            "parentGroup": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "childGroup": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "groupType": t.string(),
            "intersection": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreIntersectionGroupProtoIn"])
    types["GeostoreIntersectionGroupProtoOut"] = t.struct(
        {
            "parentGroup": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "childGroup": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "groupType": t.string(),
            "intersection": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreIntersectionGroupProtoOut"])
    types[
        "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyIn"
    ] = t.struct(
        {
            "skipAndroidAndGsaVersionCheck": t.boolean().optional(),
            "supportedSettings": t.array(t.string()).optional(),
            "supportsMuteUnmute": t.boolean().optional(),
            "supportsDoNotDisturbWithDuration": t.boolean().optional(),
        }
    ).named(
        renames["AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyIn"]
    )
    types[
        "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyOut"
    ] = t.struct(
        {
            "skipAndroidAndGsaVersionCheck": t.boolean().optional(),
            "supportedSettings": t.array(t.string()).optional(),
            "supportsMuteUnmute": t.boolean().optional(),
            "supportsDoNotDisturbWithDuration": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyOut"]
    )
    types["GoogleCloudContentwarehouseV1CustomWeightsMetadataIn"] = t.struct(
        {
            "weightedSchemaProperties": t.array(
                t.proxy(
                    renames["GoogleCloudContentwarehouseV1WeightedSchemaPropertyIn"]
                )
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1CustomWeightsMetadataIn"])
    types["GoogleCloudContentwarehouseV1CustomWeightsMetadataOut"] = t.struct(
        {
            "weightedSchemaProperties": t.array(
                t.proxy(
                    renames["GoogleCloudContentwarehouseV1WeightedSchemaPropertyOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CustomWeightsMetadataOut"])
    types["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryIn"] = t.struct(
        {
            "neuralLocationAnnotator": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn"
                ]
            ),
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional(),
            "eventId": t.proxy(renames["EventIdMessageIn"]).optional(),
            "currentQueryEvalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional(),
            "role": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleIn"
                ]
            ),
            "source": t.string(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryIn"])
    types["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryOut"] = t.struct(
        {
            "neuralLocationAnnotator": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut"
                ]
            ),
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "eventId": t.proxy(renames["EventIdMessageOut"]).optional(),
            "currentQueryEvalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "role": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleOut"
                ]
            ),
            "source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryOut"])
    types["RepositoryWebrefTripleAnnotationsIn"] = t.struct(
        {"annotations": t.array(t.proxy(renames["RepositoryWebrefTripleAnnotationIn"]))}
    ).named(renames["RepositoryWebrefTripleAnnotationsIn"])
    types["RepositoryWebrefTripleAnnotationsOut"] = t.struct(
        {
            "annotations": t.array(
                t.proxy(renames["RepositoryWebrefTripleAnnotationOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefTripleAnnotationsOut"])
    types["SocialGraphApiProtoSingleRecurrenceIn"] = t.struct(
        {"date": t.proxy(renames["GoogleTypeDateIn"])}
    ).named(renames["SocialGraphApiProtoSingleRecurrenceIn"])
    types["SocialGraphApiProtoSingleRecurrenceOut"] = t.struct(
        {
            "date": t.proxy(renames["GoogleTypeDateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSingleRecurrenceOut"])
    types["GoogleInternalAppsWaldoV1alphaUserLocationIn"] = t.struct(
        {
            "officeLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOfficeLocationIn"]
            ).optional(),
            "customLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaCustomLocationIn"]
            ).optional(),
            "homeLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaHomeLocationIn"]
            ).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserLocationIn"])
    types["GoogleInternalAppsWaldoV1alphaUserLocationOut"] = t.struct(
        {
            "officeLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaOfficeLocationOut"]
            ).optional(),
            "customLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaCustomLocationOut"]
            ).optional(),
            "homeLocation": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaHomeLocationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserLocationOut"])
    types["OceanLocaleViewabilityIn"] = t.struct(
        {
            "metadataViewMayIncludeInfoFromScans": t.boolean().optional(),
            "bibkey": t.string().optional(),
            "canUseMetadataCover": t.boolean().optional(),
            "publicDomain": t.boolean().optional(),
            "clientId": t.string().optional(),
            "computedAccessRights": t.proxy(
                renames["OceanVolumeComputedAccessRightsIn"]
            ).optional(),
            "metadataViewSampleAllowed": t.boolean().optional(),
            "accessRights": t.proxy(renames["OceanVolumeAccessRightsIn"]).optional(),
            "dates": t.proxy(renames["OceanLocaleViewabilityDatesIn"]),
            "canDisplayAds": t.boolean().optional(),
            "canDownloadEpub": t.boolean().optional(),
            "allowContinuousBrowse": t.boolean().optional(),
            "canDownloadPdf": t.boolean().optional(),
            "displayDetails": t.proxy(
                renames["OceanVolumeDisplayDetailsIn"]
            ).optional(),
            "sourcedetails": t.proxy(renames["OceanLocaleViewabilitySourceDetailsIn"]),
            "canShowLibraryLinks": t.boolean().optional(),
            "viewType": t.string().optional(),
            "percentBookShown": t.integer().optional(),
            "viewReason": t.string().optional(),
            "canShowPhotos": t.boolean().optional(),
            "allowAddingFrontmatterToPreview": t.boolean().optional(),
            "allowRetailSyndication": t.boolean().optional(),
        }
    ).named(renames["OceanLocaleViewabilityIn"])
    types["OceanLocaleViewabilityOut"] = t.struct(
        {
            "metadataViewMayIncludeInfoFromScans": t.boolean().optional(),
            "bibkey": t.string().optional(),
            "canUseMetadataCover": t.boolean().optional(),
            "publicDomain": t.boolean().optional(),
            "clientId": t.string().optional(),
            "computedAccessRights": t.proxy(
                renames["OceanVolumeComputedAccessRightsOut"]
            ).optional(),
            "metadataViewSampleAllowed": t.boolean().optional(),
            "accessRights": t.proxy(renames["OceanVolumeAccessRightsOut"]).optional(),
            "dates": t.proxy(renames["OceanLocaleViewabilityDatesOut"]),
            "canDisplayAds": t.boolean().optional(),
            "canDownloadEpub": t.boolean().optional(),
            "allowContinuousBrowse": t.boolean().optional(),
            "canDownloadPdf": t.boolean().optional(),
            "displayDetails": t.proxy(
                renames["OceanVolumeDisplayDetailsOut"]
            ).optional(),
            "sourcedetails": t.proxy(renames["OceanLocaleViewabilitySourceDetailsOut"]),
            "canShowLibraryLinks": t.boolean().optional(),
            "viewType": t.string().optional(),
            "percentBookShown": t.integer().optional(),
            "viewReason": t.string().optional(),
            "canShowPhotos": t.boolean().optional(),
            "allowAddingFrontmatterToPreview": t.boolean().optional(),
            "allowRetailSyndication": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanLocaleViewabilityOut"])
    types["LegalCitationIn"] = t.struct(
        {
            "law": t.proxy(renames["LegalCitationLawIn"]),
            "Type": t.integer().optional(),
            "CountryCode": t.string().optional(),
            "ParseType": t.integer(),
            "courtdocument": t.proxy(renames["LegalCitationCourtDocumentIn"]),
            "State": t.string().optional(),
        }
    ).named(renames["LegalCitationIn"])
    types["LegalCitationOut"] = t.struct(
        {
            "law": t.proxy(renames["LegalCitationLawOut"]),
            "Type": t.integer().optional(),
            "CountryCode": t.string().optional(),
            "ParseType": t.integer(),
            "courtdocument": t.proxy(renames["LegalCitationCourtDocumentOut"]),
            "State": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationOut"])
    types["GoodocOrdinalIn"] = t.struct(
        {
            "sectionValue": t.integer(),
            "value": t.integer().optional(),
            "valueType": t.string().optional(),
            "sectionValueType": t.string().optional(),
            "stringValue": t.string().optional(),
            "valueDelta": t.string().optional(),
            "sectionStringValue": t.string(),
            "implicit": t.string(),
        }
    ).named(renames["GoodocOrdinalIn"])
    types["GoodocOrdinalOut"] = t.struct(
        {
            "sectionValue": t.integer(),
            "value": t.integer().optional(),
            "valueType": t.string().optional(),
            "sectionValueType": t.string().optional(),
            "stringValue": t.string().optional(),
            "valueDelta": t.string().optional(),
            "sectionStringValue": t.string(),
            "implicit": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocOrdinalOut"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankIn"] = t.struct(
        {
            "rank": t.string(),
            "categoryName": t.string(),
            "appStoreLink": t.string(),
            "chartType": t.string(),
            "categoryId": t.string(),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankIn"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankOut"] = t.struct(
        {
            "rank": t.string(),
            "categoryName": t.string(),
            "appStoreLink": t.string(),
            "chartType": t.string(),
            "categoryId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankOut"])
    types["NlpSemanticParsingLocalVicinityLocationIn"] = t.struct(
        {
            "connector": t.string().optional(),
            "base": t.proxy(renames["NlpSemanticParsingLocalLocationIn"]).optional(),
            "extent": t.proxy(renames["NlpSemanticParsingLocalExtentIn"]),
        }
    ).named(renames["NlpSemanticParsingLocalVicinityLocationIn"])
    types["NlpSemanticParsingLocalVicinityLocationOut"] = t.struct(
        {
            "connector": t.string().optional(),
            "base": t.proxy(renames["NlpSemanticParsingLocalLocationOut"]).optional(),
            "extent": t.proxy(renames["NlpSemanticParsingLocalExtentOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalVicinityLocationOut"])
    types["VideoContentSearchFrameStarburstDataIn"] = t.struct(
        {
            "timestampMs": t.string().optional(),
            "sbVersion": t.string().optional(),
            "denseVector": t.array(t.number()).optional(),
        }
    ).named(renames["VideoContentSearchFrameStarburstDataIn"])
    types["VideoContentSearchFrameStarburstDataOut"] = t.struct(
        {
            "timestampMs": t.string().optional(),
            "sbVersion": t.string().optional(),
            "denseVector": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchFrameStarburstDataOut"])
    types["KnowledgeAnswersNumberTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "keepAsString": t.boolean().optional(),
            "rangeConstraint": t.proxy(
                renames["KnowledgeAnswersRangeConstraintIn"]
            ).optional(),
            "subType": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersNumberTypeIn"])
    types["KnowledgeAnswersNumberTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "keepAsString": t.boolean().optional(),
            "rangeConstraint": t.proxy(
                renames["KnowledgeAnswersRangeConstraintOut"]
            ).optional(),
            "subType": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersNumberTypeOut"])
    types["QualityActionsAppInfoSourceDataAllowListSourceDataIn"] = t.struct(
        {
            "unknownAppDeviceCompatibility": t.boolean().optional(),
            "preReleaseMode": t.boolean().optional(),
        }
    ).named(renames["QualityActionsAppInfoSourceDataAllowListSourceDataIn"])
    types["QualityActionsAppInfoSourceDataAllowListSourceDataOut"] = t.struct(
        {
            "unknownAppDeviceCompatibility": t.boolean().optional(),
            "preReleaseMode": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsAppInfoSourceDataAllowListSourceDataOut"])
    types["ListSnippetResponseRowIn"] = t.struct({"column": t.array(t.string())}).named(
        renames["ListSnippetResponseRowIn"]
    )
    types["ListSnippetResponseRowOut"] = t.struct(
        {
            "column": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ListSnippetResponseRowOut"])
    types["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataIn"] = t.struct(
        {
            "maskedNumber": t.string().optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"]
            ).optional(),
            "internationalNumber": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataOut"] = t.struct(
        {
            "maskedNumber": t.string().optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"]
            ).optional(),
            "internationalNumber": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataOut"])
    types["RepositoryWebrefBookEditionMetadataIn"] = t.struct(
        {"bookEditionMid": t.string(), "bookEditionIsbn": t.string().optional()}
    ).named(renames["RepositoryWebrefBookEditionMetadataIn"])
    types["RepositoryWebrefBookEditionMetadataOut"] = t.struct(
        {
            "bookEditionMid": t.string(),
            "bookEditionIsbn": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefBookEditionMetadataOut"])
    types["KnowledgeAnswersIntentQuerySignalComputationFallbackIntentIn"] = t.struct(
        {"intent": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQuerySignalComputationFallbackIntentIn"])
    types["KnowledgeAnswersIntentQuerySignalComputationFallbackIntentOut"] = t.struct(
        {
            "intent": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySignalComputationFallbackIntentOut"])
    types["RepositoryWebrefNameInfoIn"] = t.struct(
        {
            "scores": t.proxy(renames["RepositoryWebrefNameScoresIn"]).optional(),
            "aggregatedScores": t.proxy(
                renames["RepositoryWebrefAggregatedEntityNameScoresIn"]
            ).optional(),
            "source": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameSourceIn"])
            ).optional(),
            "name": t.proxy(renames["RepositoryWebrefLocalizedStringIn"]).optional(),
            "ngramData": t.proxy(
                renames["RepositoryWebrefUniversalNgramDataIn"]
            ).optional(),
            "includeInModel": t.boolean().optional(),
            "debugDetails": t.array(
                t.proxy(renames["RepositoryWebrefNameDebugInfoIn"])
            ).optional(),
            "annotatedCategory": t.array(
                t.proxy(renames["RepositoryWebrefAnnotatedCategoryInfoIn"])
            ).optional(),
            "perNameLightweightToken": t.proxy(
                renames["RepositoryWebrefLightweightTokensPerNameLightweightTokenIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefNameInfoIn"])
    types["RepositoryWebrefNameInfoOut"] = t.struct(
        {
            "scores": t.proxy(renames["RepositoryWebrefNameScoresOut"]).optional(),
            "aggregatedScores": t.proxy(
                renames["RepositoryWebrefAggregatedEntityNameScoresOut"]
            ).optional(),
            "source": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameSourceOut"])
            ).optional(),
            "name": t.proxy(renames["RepositoryWebrefLocalizedStringOut"]).optional(),
            "ngramData": t.proxy(
                renames["RepositoryWebrefUniversalNgramDataOut"]
            ).optional(),
            "includeInModel": t.boolean().optional(),
            "debugDetails": t.array(
                t.proxy(renames["RepositoryWebrefNameDebugInfoOut"])
            ).optional(),
            "annotatedCategory": t.array(
                t.proxy(renames["RepositoryWebrefAnnotatedCategoryInfoOut"])
            ).optional(),
            "perNameLightweightToken": t.proxy(
                renames["RepositoryWebrefLightweightTokensPerNameLightweightTokenOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNameInfoOut"])
    types["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardIn"] = t.struct(
        {
            "doNotUseDebugOnlyDecryptedValue": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentValueIn"]
            ).optional(),
            "encryptedValue": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardIn"])
    types["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardOut"] = t.struct(
        {
            "doNotUseDebugOnlyDecryptedValue": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentValueOut"]
            ).optional(),
            "encryptedValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySensitiveArgumentValueGuardOut"])
    types["SecurityCredentialsSimpleSecretLabelProtoIn"] = t.struct(
        {
            "capabilityId": t.integer().optional(),
            "genericLabel": t.string().optional(),
            "type": t.string().optional(),
            "inviteId": t.string().optional(),
        }
    ).named(renames["SecurityCredentialsSimpleSecretLabelProtoIn"])
    types["SecurityCredentialsSimpleSecretLabelProtoOut"] = t.struct(
        {
            "capabilityId": t.integer().optional(),
            "genericLabel": t.string().optional(),
            "type": t.string().optional(),
            "inviteId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsSimpleSecretLabelProtoOut"])
    types["SocialGraphApiProtoBirthdayDecorationIn"] = t.struct(
        {"birthdayDecorationVisibility": t.string()}
    ).named(renames["SocialGraphApiProtoBirthdayDecorationIn"])
    types["SocialGraphApiProtoBirthdayDecorationOut"] = t.struct(
        {
            "birthdayDecorationVisibility": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoBirthdayDecorationOut"])
    types["VideoContentSearchQnaAnchorSetFeaturesIn"] = t.struct(
        {
            "minQuestionDistance": t.number().optional(),
            "ensembleModelPath": t.string().optional(),
            "minEntityTopicalityScore": t.number().optional(),
            "descartesScoreThreshold": t.number().optional(),
            "spanDurationSecs": t.string().optional(),
            "ensembleModelScoreThreshold": t.number().optional(),
            "dolphinConfig": t.proxy(
                renames["VideoContentSearchDolphinScoringConfigIn"]
            ).optional(),
            "descartesModelVersion": t.string().optional(),
            "relatedQuestionsSstablePath": t.string().optional(),
            "backgroundEncodingPath": t.string().optional(),
        }
    ).named(renames["VideoContentSearchQnaAnchorSetFeaturesIn"])
    types["VideoContentSearchQnaAnchorSetFeaturesOut"] = t.struct(
        {
            "minQuestionDistance": t.number().optional(),
            "ensembleModelPath": t.string().optional(),
            "minEntityTopicalityScore": t.number().optional(),
            "descartesScoreThreshold": t.number().optional(),
            "spanDurationSecs": t.string().optional(),
            "ensembleModelScoreThreshold": t.number().optional(),
            "dolphinConfig": t.proxy(
                renames["VideoContentSearchDolphinScoringConfigOut"]
            ).optional(),
            "descartesModelVersion": t.string().optional(),
            "relatedQuestionsSstablePath": t.string().optional(),
            "backgroundEncodingPath": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchQnaAnchorSetFeaturesOut"])
    types["QualityPreviewSnippetBrainFeaturesIn"] = t.struct(
        {
            "isSnippetBrainBoldingTriggered": t.boolean().optional(),
            "modelScore": t.number().optional(),
        }
    ).named(renames["QualityPreviewSnippetBrainFeaturesIn"])
    types["QualityPreviewSnippetBrainFeaturesOut"] = t.struct(
        {
            "isSnippetBrainBoldingTriggered": t.boolean().optional(),
            "modelScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetBrainFeaturesOut"])
    types["NlpSemanticParsingModelsDeviceIn"] = t.struct(
        {
            "deviceName": t.proxy(
                renames["NlpSemanticParsingModelsDeviceNameIn"]
            ).optional(),
            "deviceType": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDeviceIn"])
    types["NlpSemanticParsingModelsDeviceOut"] = t.struct(
        {
            "deviceName": t.proxy(
                renames["NlpSemanticParsingModelsDeviceNameOut"]
            ).optional(),
            "deviceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDeviceOut"])
    types["CompositeDocPartialUpdateInfoLastFullIndexingInfoIn"] = t.struct(
        {
            "lastFullIndexingTsMicros": t.string().optional(),
            "corpus": t.string().optional(),
        }
    ).named(renames["CompositeDocPartialUpdateInfoLastFullIndexingInfoIn"])
    types["CompositeDocPartialUpdateInfoLastFullIndexingInfoOut"] = t.struct(
        {
            "lastFullIndexingTsMicros": t.string().optional(),
            "corpus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocPartialUpdateInfoLastFullIndexingInfoOut"])
    types["RepositoryWebrefWebrefDocumentInfoIn"] = t.struct(
        {
            "outlinkInfos": t.proxy(
                renames["RepositoryWebrefWebrefOutlinkInfosIn"]
            ).optional(),
            "extensions": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "webrefParsedContentSentence": t.array(t.string()).optional(),
            "documentMetadata": t.proxy(
                renames["RepositoryWebrefDocumentMetadataIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefDocumentInfoIn"])
    types["RepositoryWebrefWebrefDocumentInfoOut"] = t.struct(
        {
            "outlinkInfos": t.proxy(
                renames["RepositoryWebrefWebrefOutlinkInfosOut"]
            ).optional(),
            "extensions": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "webrefParsedContentSentence": t.array(t.string()).optional(),
            "documentMetadata": t.proxy(
                renames["RepositoryWebrefDocumentMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefDocumentInfoOut"])
    types["VideoContentSearchOcrAsrSetFeatureIn"] = t.struct(
        {
            "wordOverlapScore": t.number().optional(),
            "normalizedWordOverlapScore": t.number().optional(),
        }
    ).named(renames["VideoContentSearchOcrAsrSetFeatureIn"])
    types["VideoContentSearchOcrAsrSetFeatureOut"] = t.struct(
        {
            "wordOverlapScore": t.number().optional(),
            "normalizedWordOverlapScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOcrAsrSetFeatureOut"])
    types["AttentionalEntitiesSemanticRoleIdIn"] = t.struct(
        {"intentId": t.string().optional(), "roleId": t.string().optional()}
    ).named(renames["AttentionalEntitiesSemanticRoleIdIn"])
    types["AttentionalEntitiesSemanticRoleIdOut"] = t.struct(
        {
            "intentId": t.string().optional(),
            "roleId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttentionalEntitiesSemanticRoleIdOut"])
    types["RepositoryWebrefConceptNameMetadataIn"] = t.struct(
        {"nameTypeMask": t.string().optional()}
    ).named(renames["RepositoryWebrefConceptNameMetadataIn"])
    types["RepositoryWebrefConceptNameMetadataOut"] = t.struct(
        {
            "nameTypeMask": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefConceptNameMetadataOut"])
    types["QualityShoppingShoppingAttachmentMokaFacetValueIn"] = t.struct(
        {"measureValue": t.number(), "facetId": t.string(), "tagId": t.string()}
    ).named(renames["QualityShoppingShoppingAttachmentMokaFacetValueIn"])
    types["QualityShoppingShoppingAttachmentMokaFacetValueOut"] = t.struct(
        {
            "measureValue": t.number(),
            "facetId": t.string(),
            "tagId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentMokaFacetValueOut"])
    types["CrawlerChangerateUrlChangeIn"] = t.struct(
        {
            "simhash": t.string().optional(),
            "offDomainLinksChange": t.boolean().optional(),
            "simhashIsTrusted": t.boolean().optional(),
            "onDomainLinksCount": t.integer().optional(),
            "onDomainLinksCountChange": t.boolean().optional(),
            "shingleSimhash": t.proxy(
                renames["IndexingConverterShingleFingerprintIn"]
            ).optional(),
            "interval": t.integer().optional(),
            "offDomainLinksCount": t.integer().optional(),
            "fractionalTileChange": t.number().optional(),
            "additionalChangesMerged": t.integer().optional(),
            "simhashV2IsTrusted": t.boolean().optional(),
            "simhashV2": t.string().optional(),
        }
    ).named(renames["CrawlerChangerateUrlChangeIn"])
    types["CrawlerChangerateUrlChangeOut"] = t.struct(
        {
            "simhash": t.string().optional(),
            "offDomainLinksChange": t.boolean().optional(),
            "simhashIsTrusted": t.boolean().optional(),
            "onDomainLinksCount": t.integer().optional(),
            "onDomainLinksCountChange": t.boolean().optional(),
            "shingleSimhash": t.proxy(
                renames["IndexingConverterShingleFingerprintOut"]
            ).optional(),
            "interval": t.integer().optional(),
            "offDomainLinksCount": t.integer().optional(),
            "fractionalTileChange": t.number().optional(),
            "additionalChangesMerged": t.integer().optional(),
            "simhashV2IsTrusted": t.boolean().optional(),
            "simhashV2": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateUrlChangeOut"])
    types["NlpSaftSemanticNodeIn"] = t.struct(
        {
            "type": t.string().optional(),
            "value": t.string().optional(),
            "kind": t.string().optional(),
            "implicit": t.boolean().optional(),
            "measure": t.integer().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "arc": t.array(t.proxy(renames["NlpSaftSemanticNodeArcIn"])).optional(),
            "confidence": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "mention": t.integer(),
            "description": t.string().optional(),
            "entity": t.integer().optional(),
        }
    ).named(renames["NlpSaftSemanticNodeIn"])
    types["NlpSaftSemanticNodeOut"] = t.struct(
        {
            "type": t.string().optional(),
            "value": t.string().optional(),
            "kind": t.string().optional(),
            "implicit": t.boolean().optional(),
            "measure": t.integer().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "arc": t.array(t.proxy(renames["NlpSaftSemanticNodeArcOut"])).optional(),
            "confidence": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "mention": t.integer(),
            "description": t.string().optional(),
            "entity": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftSemanticNodeOut"])
    types["NlpSemanticParsingPersonalIntelligenceEntityIn"] = t.struct(
        {
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "name": t.string().optional(),
            "qrefAnnotation": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "airlineConfig": t.proxy(
                renames["TravelFlightsAirlineConfigIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingPersonalIntelligenceEntityIn"])
    types["NlpSemanticParsingPersonalIntelligenceEntityOut"] = t.struct(
        {
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "name": t.string().optional(),
            "qrefAnnotation": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "airlineConfig": t.proxy(
                renames["TravelFlightsAirlineConfigOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingPersonalIntelligenceEntityOut"])
    types["MediaIndexBoundingboxIn"] = t.struct(
        {
            "xmin": t.number(),
            "xmax": t.number(),
            "areaFraction": t.number().optional(),
            "ymax": t.number(),
            "ymin": t.number(),
        }
    ).named(renames["MediaIndexBoundingboxIn"])
    types["MediaIndexBoundingboxOut"] = t.struct(
        {
            "xmin": t.number(),
            "xmax": t.number(),
            "areaFraction": t.number().optional(),
            "ymax": t.number(),
            "ymin": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexBoundingboxOut"])
    types["RepositoryWebrefEntityNameScoreIn"] = t.struct(
        {
            "rangeMetadata": t.array(
                t.proxy(renames["RepositoryWebrefRangeMetadataIn"])
            ).optional(),
            "isPruned": t.boolean().optional(),
            "internalIsClusterParent": t.boolean(),
            "scoreRatio": t.number().optional(),
            "isMatchlessResultContext": t.boolean().optional(),
            "nameMetadata": t.proxy(
                renames["RepositoryWebrefPreprocessingNameEntityMetadataIn"]
            ).optional(),
            "confidence": t.number().optional(),
            "volumeBasedScore": t.number().optional(),
            "useAsNameCandidate": t.boolean().optional(),
            "debugVariantSignals": t.array(
                t.proxy(renames["RepositoryWebrefPreprocessingNameVariantSignalsIn"])
            ).optional(),
            "score": t.number().optional(),
            "isClusterGlobal": t.boolean().optional(),
            "extendedScoreRatio": t.array(
                t.proxy(renames["RepositoryWebrefExtendedEntityNameScoreIn"])
            ).optional(),
            "mid": t.string().optional(),
            "internalBootstrapIsOpenWorld": t.boolean().optional(),
            "isDropped": t.boolean().optional(),
            "includeInModel": t.boolean().optional(),
            "debugInfo": t.array(
                t.proxy(renames["RepositoryWebrefEntityDebugInfoIn"])
            ).optional(),
            "bootstrappingPreviousIteration": t.proxy(
                renames["RepositoryWebrefBootstrappingScoreIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameScoreIn"])
    types["RepositoryWebrefEntityNameScoreOut"] = t.struct(
        {
            "rangeMetadata": t.array(
                t.proxy(renames["RepositoryWebrefRangeMetadataOut"])
            ).optional(),
            "isPruned": t.boolean().optional(),
            "internalIsClusterParent": t.boolean(),
            "scoreRatio": t.number().optional(),
            "isMatchlessResultContext": t.boolean().optional(),
            "nameMetadata": t.proxy(
                renames["RepositoryWebrefPreprocessingNameEntityMetadataOut"]
            ).optional(),
            "confidence": t.number().optional(),
            "volumeBasedScore": t.number().optional(),
            "useAsNameCandidate": t.boolean().optional(),
            "debugVariantSignals": t.array(
                t.proxy(renames["RepositoryWebrefPreprocessingNameVariantSignalsOut"])
            ).optional(),
            "score": t.number().optional(),
            "isClusterGlobal": t.boolean().optional(),
            "extendedScoreRatio": t.array(
                t.proxy(renames["RepositoryWebrefExtendedEntityNameScoreOut"])
            ).optional(),
            "mid": t.string().optional(),
            "internalBootstrapIsOpenWorld": t.boolean().optional(),
            "isDropped": t.boolean().optional(),
            "includeInModel": t.boolean().optional(),
            "debugInfo": t.array(
                t.proxy(renames["RepositoryWebrefEntityDebugInfoOut"])
            ).optional(),
            "bootstrappingPreviousIteration": t.proxy(
                renames["RepositoryWebrefBootstrappingScoreOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameScoreOut"])
    types["AssistantLogsNearbyDevicesLogIn"] = t.struct(
        {
            "numFurtherDevices": t.integer(),
            "numHearingDevices": t.integer(),
            "eliminatedByUnknownDifferentRoom": t.integer(),
            "deviceArbitrationCreationTimestampMs": t.string().optional(),
            "eliminatedByUnregisteredDevice": t.integer(),
            "deviceTargetingInputCreationTimestampMs": t.string().optional(),
            "eliminatedByFurtherDistance": t.integer(),
            "numEquallyCloseDevices": t.integer(),
            "nearbyDevices": t.array(t.proxy(renames["AssistantLogsDeviceInfoLogIn"])),
            "numClosestDevices": t.integer(),
            "numUnknownDistanceDevices": t.integer(),
            "localDevice": t.proxy(renames["AssistantLogsDeviceInfoLogIn"]),
            "eliminatedByLocalClosest": t.integer(),
        }
    ).named(renames["AssistantLogsNearbyDevicesLogIn"])
    types["AssistantLogsNearbyDevicesLogOut"] = t.struct(
        {
            "numFurtherDevices": t.integer(),
            "numHearingDevices": t.integer(),
            "eliminatedByUnknownDifferentRoom": t.integer(),
            "deviceArbitrationCreationTimestampMs": t.string().optional(),
            "eliminatedByUnregisteredDevice": t.integer(),
            "deviceTargetingInputCreationTimestampMs": t.string().optional(),
            "eliminatedByFurtherDistance": t.integer(),
            "numEquallyCloseDevices": t.integer(),
            "nearbyDevices": t.array(t.proxy(renames["AssistantLogsDeviceInfoLogOut"])),
            "numClosestDevices": t.integer(),
            "numUnknownDistanceDevices": t.integer(),
            "localDevice": t.proxy(renames["AssistantLogsDeviceInfoLogOut"]),
            "eliminatedByLocalClosest": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsNearbyDevicesLogOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleDateTimeIn"] = t.struct(
        {
            "date": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "property": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyIn"]
            ).optional(),
            "timeZone": t.proxy(renames["GoogleTypeTimeZoneIn"]).optional(),
            "time": t.proxy(renames["GoogleTypeTimeOfDayIn"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleDateTimeOut"] = t.struct(
        {
            "date": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "property": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimePropertyOut"]
            ).optional(),
            "timeZone": t.proxy(renames["GoogleTypeTimeZoneOut"]).optional(),
            "time": t.proxy(renames["GoogleTypeTimeOfDayOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeOut"])
    types["RepositoryWebrefEntityNameRatingsEntityNameRatingIn"] = t.struct(
        {"comment": t.string().optional(), "source": t.string(), "label": t.string()}
    ).named(renames["RepositoryWebrefEntityNameRatingsEntityNameRatingIn"])
    types["RepositoryWebrefEntityNameRatingsEntityNameRatingOut"] = t.struct(
        {
            "comment": t.string().optional(),
            "source": t.string(),
            "label": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameRatingsEntityNameRatingOut"])
    types["ImageBaseVideoPreviewMetadataIn"] = t.struct(
        {
            "duration": t.integer().optional(),
            "docid": t.string().optional(),
            "height": t.integer().optional(),
            "width": t.integer().optional(),
            "mimeType": t.string().optional(),
            "timestamp": t.integer().optional(),
            "fprint": t.string().optional(),
            "videoSegmentEndUs": t.string().optional(),
            "state": t.string().optional(),
            "byteSize": t.integer().optional(),
            "videoSegmentStartUs": t.string().optional(),
            "type": t.string().optional(),
            "expirationTimestampMicros": t.string().optional(),
        }
    ).named(renames["ImageBaseVideoPreviewMetadataIn"])
    types["ImageBaseVideoPreviewMetadataOut"] = t.struct(
        {
            "duration": t.integer().optional(),
            "docid": t.string().optional(),
            "height": t.integer().optional(),
            "width": t.integer().optional(),
            "mimeType": t.string().optional(),
            "timestamp": t.integer().optional(),
            "fprint": t.string().optional(),
            "videoSegmentEndUs": t.string().optional(),
            "state": t.string().optional(),
            "byteSize": t.integer().optional(),
            "videoSegmentStartUs": t.string().optional(),
            "type": t.string().optional(),
            "expirationTimestampMicros": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageBaseVideoPreviewMetadataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSortKeysIn"] = t.struct(
        {
            "lastName": t.string(),
            "nameRaw": t.string().optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityIn"])
            ),
            "name": t.string(),
            "lastNameRaw": t.string(),
            "interactionRank": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSortKeysIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSortKeysOut"] = t.struct(
        {
            "lastName": t.string(),
            "nameRaw": t.string().optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityOut"])
            ),
            "name": t.string(),
            "lastNameRaw": t.string(),
            "interactionRank": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSortKeysOut"])
    types["ScienceCitationAccessURLIn"] = t.struct(
        {
            "UrlStr": t.string(),
            "AccessMonth": t.integer().optional(),
            "AccessYear": t.integer(),
            "AccessDay": t.integer(),
        }
    ).named(renames["ScienceCitationAccessURLIn"])
    types["ScienceCitationAccessURLOut"] = t.struct(
        {
            "UrlStr": t.string(),
            "AccessMonth": t.integer().optional(),
            "AccessYear": t.integer(),
            "AccessDay": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationAccessURLOut"])
    types["NlpSemanticParsingLocalLocationIn"] = t.struct(
        {
            "compoundLocation": t.proxy(
                renames["NlpSemanticParsingLocalCompoundLocationIn"]
            ),
            "resolvedLocalResult": t.proxy(
                renames["QualityDialogManagerLocalResultIn"]
            ).optional(),
            "text": t.string().optional(),
            "vicinityLocation": t.proxy(
                renames["NlpSemanticParsingLocalVicinityLocationIn"]
            ),
            "locationConstraint": t.array(
                t.proxy(renames["NlpSemanticParsingLocalLocationConstraintIn"])
            ).optional(),
            "isMerged": t.boolean().optional(),
            "contactLocation": t.proxy(
                renames["NlpSemanticParsingLocalContactLocationIn"]
            ).optional(),
            "userSpecifiedLocation": t.proxy(
                renames["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationIn"]
            ).optional(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
            "basicLocation": t.proxy(
                renames["NlpSemanticParsingLocalBasicLocationIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationIn"])
    types["NlpSemanticParsingLocalLocationOut"] = t.struct(
        {
            "compoundLocation": t.proxy(
                renames["NlpSemanticParsingLocalCompoundLocationOut"]
            ),
            "resolvedLocalResult": t.proxy(
                renames["QualityDialogManagerLocalResultOut"]
            ).optional(),
            "text": t.string().optional(),
            "vicinityLocation": t.proxy(
                renames["NlpSemanticParsingLocalVicinityLocationOut"]
            ),
            "locationConstraint": t.array(
                t.proxy(renames["NlpSemanticParsingLocalLocationConstraintOut"])
            ).optional(),
            "isMerged": t.boolean().optional(),
            "contactLocation": t.proxy(
                renames["NlpSemanticParsingLocalContactLocationOut"]
            ).optional(),
            "userSpecifiedLocation": t.proxy(
                renames["KnowledgeVerticalsWeatherProtoUserSpecifiedLocationOut"]
            ).optional(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
            "basicLocation": t.proxy(
                renames["NlpSemanticParsingLocalBasicLocationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationOut"])
    types["SpeechS3LocaleIn"] = t.struct(
        {"format": t.integer().optional(), "locale": t.string()}
    ).named(renames["SpeechS3LocaleIn"])
    types["SpeechS3LocaleOut"] = t.struct(
        {
            "format": t.integer().optional(),
            "locale": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpeechS3LocaleOut"])
    types["QualityShoppingShoppingAttachmentLocaleIn"] = t.struct(
        {"languageId": t.integer().optional(), "regionId": t.integer()}
    ).named(renames["QualityShoppingShoppingAttachmentLocaleIn"])
    types["QualityShoppingShoppingAttachmentLocaleOut"] = t.struct(
        {
            "languageId": t.integer().optional(),
            "regionId": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentLocaleOut"])
    types["ImageRepositoryAmarnaSignalsBlobInfoIn"] = t.struct(
        {
            "signalsBlobUpdateTimestamp": t.string().optional(),
            "signalsBlobId": t.string().optional(),
        }
    ).named(renames["ImageRepositoryAmarnaSignalsBlobInfoIn"])
    types["ImageRepositoryAmarnaSignalsBlobInfoOut"] = t.struct(
        {
            "signalsBlobUpdateTimestamp": t.string().optional(),
            "signalsBlobId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryAmarnaSignalsBlobInfoOut"])
    types["GoogleCloudContentwarehouseV1RunPipelineMetadataIn"] = t.struct(
        {
            "gcsIngestPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataIn"
                ]
            ).optional(),
            "failedFileCount": t.integer().optional(),
            "individualDocumentStatuses": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusIn"
                    ]
                )
            ).optional(),
            "totalFileCount": t.integer().optional(),
            "userInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoIn"]
            ).optional(),
            "exportToCdwPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataIn"
                ]
            ).optional(),
            "processWithDocAiPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataIn"
                ]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RunPipelineMetadataIn"])
    types["GoogleCloudContentwarehouseV1RunPipelineMetadataOut"] = t.struct(
        {
            "gcsIngestPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataOut"
                ]
            ).optional(),
            "failedFileCount": t.integer().optional(),
            "individualDocumentStatuses": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusOut"
                    ]
                )
            ).optional(),
            "totalFileCount": t.integer().optional(),
            "userInfo": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoOut"]
            ).optional(),
            "exportToCdwPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataOut"
                ]
            ).optional(),
            "processWithDocAiPipelineMetadata": t.proxy(
                renames[
                    "GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadataOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RunPipelineMetadataOut"])
    types["RepositoryWebrefGeoMetadataProtoIn"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "bound": t.proxy(renames["GeostoreRectProtoIn"]).optional(),
            "areaKm2": t.number().optional(),
            "address": t.proxy(renames["GeostoreAddressProtoIn"]).optional(),
            "location": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "wpLocation": t.array(
                t.proxy(renames["RepositoryWebrefWikipediaGeocodeIn"])
            ).optional(),
            "name": t.proxy(renames["GeostoreNameProtoIn"]).optional(),
            "addressSynonyms": t.array(
                t.proxy(renames["RepositoryWebrefGeoMetadataProtoAddressSynonymIn"])
            ),
            "timezone": t.string().optional(),
            "stableIntegerCountryCode": t.integer().optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["RepositoryWebrefGeoMetadataProtoIn"])
    types["RepositoryWebrefGeoMetadataProtoOut"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "bound": t.proxy(renames["GeostoreRectProtoOut"]).optional(),
            "areaKm2": t.number().optional(),
            "address": t.proxy(renames["GeostoreAddressProtoOut"]).optional(),
            "location": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "wpLocation": t.array(
                t.proxy(renames["RepositoryWebrefWikipediaGeocodeOut"])
            ).optional(),
            "name": t.proxy(renames["GeostoreNameProtoOut"]).optional(),
            "addressSynonyms": t.array(
                t.proxy(renames["RepositoryWebrefGeoMetadataProtoAddressSynonymOut"])
            ),
            "timezone": t.string().optional(),
            "stableIntegerCountryCode": t.integer().optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefGeoMetadataProtoOut"])
    types["NlpSaftAnnotatedPhraseIn"] = t.struct(
        {
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
        }
    ).named(renames["NlpSaftAnnotatedPhraseIn"])
    types["NlpSaftAnnotatedPhraseOut"] = t.struct(
        {
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftAnnotatedPhraseOut"])
    types["RepositoryWebrefPerDocRelevanceRatingIn"] = t.struct(
        {
            "pageIsAboutChain": t.string().optional(),
            "topicIsChain": t.string().optional(),
            "furballUrl": t.string().optional(),
            "raterCanUnderstandTopic": t.boolean().optional(),
            "displayString": t.string().optional(),
            "projectId": t.string().optional(),
            "taskId": t.string(),
            "itemId": t.string(),
            "contentRelevant": t.string(),
            "taskDetails": t.proxy(renames["RepositoryWebrefTaskDetailsIn"]),
        }
    ).named(renames["RepositoryWebrefPerDocRelevanceRatingIn"])
    types["RepositoryWebrefPerDocRelevanceRatingOut"] = t.struct(
        {
            "pageIsAboutChain": t.string().optional(),
            "topicIsChain": t.string().optional(),
            "furballUrl": t.string().optional(),
            "raterCanUnderstandTopic": t.boolean().optional(),
            "displayString": t.string().optional(),
            "projectId": t.string().optional(),
            "taskId": t.string(),
            "itemId": t.string(),
            "contentRelevant": t.string(),
            "taskDetails": t.proxy(renames["RepositoryWebrefTaskDetailsOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPerDocRelevanceRatingOut"])
    types["RepositoryWebrefEntityLinkSourceIn"] = t.struct(
        {
            "kgProperty": t.string().optional(),
            "type": t.string(),
            "score": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefEntityLinkSourceIn"])
    types["RepositoryWebrefEntityLinkSourceOut"] = t.struct(
        {
            "kgProperty": t.string().optional(),
            "type": t.string(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityLinkSourceOut"])
    types["QualitySitemapBreadcrumbTargetDocIn"] = t.struct(
        {"url": t.string(), "title": t.string(), "count": t.integer().optional()}
    ).named(renames["QualitySitemapBreadcrumbTargetDocIn"])
    types["QualitySitemapBreadcrumbTargetDocOut"] = t.struct(
        {
            "url": t.string(),
            "title": t.string(),
            "count": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapBreadcrumbTargetDocOut"])
    types["SocialPersonalizationKnexAnnotationItemTopicIn"] = t.struct(
        {"score": t.number(), "mid": t.string()}
    ).named(renames["SocialPersonalizationKnexAnnotationItemTopicIn"])
    types["SocialPersonalizationKnexAnnotationItemTopicOut"] = t.struct(
        {
            "score": t.number(),
            "mid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialPersonalizationKnexAnnotationItemTopicOut"])
    types["SecurityCredentialsCircleProtoIn"] = t.struct(
        {
            "circleId": t.string().optional(),
            "ownerGaiaId": t.string().optional(),
            "requiredConsistencyTimestampUsec": t.string().optional(),
        }
    ).named(renames["SecurityCredentialsCircleProtoIn"])
    types["SecurityCredentialsCircleProtoOut"] = t.struct(
        {
            "circleId": t.string().optional(),
            "ownerGaiaId": t.string().optional(),
            "requiredConsistencyTimestampUsec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsCircleProtoOut"])
    types["AssistantDevicesPlatformProtoDeviceActionCapabilityIn"] = t.struct(
        {
            "inlinedActionCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoInlinedActionCapabilityIn"]
            ).optional(),
            "customIntentMode": t.string().optional(),
            "traits": t.array(t.string()).optional(),
            "assistantDeviceInRoomOptOut": t.boolean().optional(),
            "understandingConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoUnderstandingConfigIn"]
            ).optional(),
            "providedData": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoProvidedDataIn"])
            ).optional(),
            "defaultExecutionConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoExecutionConfigIn"]
            ).optional(),
            "intents": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoIntentIn"])
            ).optional(),
            "builtInIntentMode": t.string().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoDeviceActionCapabilityIn"])
    types["AssistantDevicesPlatformProtoDeviceActionCapabilityOut"] = t.struct(
        {
            "inlinedActionCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoInlinedActionCapabilityOut"]
            ).optional(),
            "customIntentMode": t.string().optional(),
            "traits": t.array(t.string()).optional(),
            "assistantDeviceInRoomOptOut": t.boolean().optional(),
            "understandingConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoUnderstandingConfigOut"]
            ).optional(),
            "providedData": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoProvidedDataOut"])
            ).optional(),
            "defaultExecutionConfig": t.proxy(
                renames["AssistantDevicesPlatformProtoExecutionConfigOut"]
            ).optional(),
            "intents": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoIntentOut"])
            ).optional(),
            "builtInIntentMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoDeviceActionCapabilityOut"])
    types["GoogleTypeExprIn"] = t.struct(
        {
            "expression": t.string().optional(),
            "description": t.string().optional(),
            "location": t.string().optional(),
            "title": t.string().optional(),
        }
    ).named(renames["GoogleTypeExprIn"])
    types["GoogleTypeExprOut"] = t.struct(
        {
            "expression": t.string().optional(),
            "description": t.string().optional(),
            "location": t.string().optional(),
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeExprOut"])
    types["ImageExactBoostNavQueryIn"] = t.struct(
        {
            "navFp": t.string().optional(),
            "navQuery": t.string().optional(),
            "confidence": t.integer().optional(),
            "referrerRank": t.integer().optional(),
            "referrerDocid": t.array(t.string()).optional(),
            "imageClickRank": t.integer().optional(),
        }
    ).named(renames["ImageExactBoostNavQueryIn"])
    types["ImageExactBoostNavQueryOut"] = t.struct(
        {
            "navFp": t.string().optional(),
            "navQuery": t.string().optional(),
            "confidence": t.integer().optional(),
            "referrerRank": t.integer().optional(),
            "referrerDocid": t.array(t.string()).optional(),
            "imageClickRank": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExactBoostNavQueryOut"])
    types["AssistantApiSettingsNotificationProfileIn"] = t.struct(
        {
            "alloNotificationProfile": t.proxy(
                renames[
                    "AssistantApiSettingsNotificationProfileAlloNotificationProfileIn"
                ]
            ).optional()
        }
    ).named(renames["AssistantApiSettingsNotificationProfileIn"])
    types["AssistantApiSettingsNotificationProfileOut"] = t.struct(
        {
            "alloNotificationProfile": t.proxy(
                renames[
                    "AssistantApiSettingsNotificationProfileAlloNotificationProfileOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsNotificationProfileOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMatchInfoIn"] = t.struct(
        {
            "match": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchIn"
                    ]
                )
            ).optional(),
            "query": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMatchInfoOut"] = t.struct(
        {
            "match": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatchOut"
                    ]
                )
            ).optional(),
            "query": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoOut"])
    types["RepositoryWebrefSegmentMentionsIn"] = t.struct(
        {
            "mention": t.array(
                t.proxy(renames["RepositoryWebrefMentionIn"])
            ).optional(),
            "segmentType": t.string(),
        }
    ).named(renames["RepositoryWebrefSegmentMentionsIn"])
    types["RepositoryWebrefSegmentMentionsOut"] = t.struct(
        {
            "mention": t.array(
                t.proxy(renames["RepositoryWebrefMentionOut"])
            ).optional(),
            "segmentType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSegmentMentionsOut"])
    types["QualityQrewriteCandidateIdFieldIn"] = t.struct(
        {"type": t.string(), "index": t.integer().optional()}
    ).named(renames["QualityQrewriteCandidateIdFieldIn"])
    types["QualityQrewriteCandidateIdFieldOut"] = t.struct(
        {
            "type": t.string(),
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteCandidateIdFieldOut"])
    types["AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberIn"] = t.struct(
        {
            "e164": t.string(),
            "i18nData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataIn"
                ]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberIn"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberOut"
    ] = t.struct(
        {
            "e164": t.string(),
            "i18nData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberOut"]
    )
    types["GoogleCloudDocumentaiV1DocumentEntityIn"] = t.struct(
        {
            "mentionText": t.string().optional(),
            "type": t.string(),
            "id": t.string().optional(),
            "redacted": t.boolean().optional(),
            "normalizedValue": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueIn"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "mentionId": t.string().optional(),
            "properties": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityIn"])
            ).optional(),
            "confidence": t.number().optional(),
            "pageAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageAnchorIn"]
            ).optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityIn"])
    types["GoogleCloudDocumentaiV1DocumentEntityOut"] = t.struct(
        {
            "mentionText": t.string().optional(),
            "type": t.string(),
            "id": t.string().optional(),
            "redacted": t.boolean().optional(),
            "normalizedValue": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueOut"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "mentionId": t.string().optional(),
            "properties": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityOut"])
            ).optional(),
            "confidence": t.number().optional(),
            "pageAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageAnchorOut"]
            ).optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityOut"])
    types["AssistantLogsStructureAnnotationLogIn"] = t.struct(
        {
            "userDefinedName": t.string(),
            "type": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
        }
    ).named(renames["AssistantLogsStructureAnnotationLogIn"])
    types["AssistantLogsStructureAnnotationLogOut"] = t.struct(
        {
            "userDefinedName": t.string(),
            "type": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsStructureAnnotationLogOut"])
    types["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"] = t.struct(
        {
            "hourState": t.string().optional(),
            "timezone": t.string().optional(),
            "holiday": t.proxy(
                renames["NlpSemanticParsingDatetimeHolidayIn"]
            ).optional(),
            "second": t.integer(),
            "weekday": t.string().optional(),
            "rangeModifier": t.string().optional(),
            "day": t.integer(),
            "quarter": t.string(),
            "deleted11": t.string().optional(),
            "year": t.integer().optional(),
            "allowPersonal": t.boolean().optional(),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimePropertyIn"]
            ),
            "season": t.string(),
            "month": t.string(),
            "modifier": t.string().optional(),
            "minute": t.integer(),
            "partialSecond": t.number(),
            "hour": t.integer().optional(),
            "nonGregorianDate": t.proxy(
                renames["NlpSemanticParsingDatetimeNonGregorianDateIn"]
            ).optional(),
            "isBc": t.boolean().optional(),
            "meridiem": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"])
    types["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"] = t.struct(
        {
            "hourState": t.string().optional(),
            "timezone": t.string().optional(),
            "holiday": t.proxy(
                renames["NlpSemanticParsingDatetimeHolidayOut"]
            ).optional(),
            "second": t.integer(),
            "weekday": t.string().optional(),
            "rangeModifier": t.string().optional(),
            "day": t.integer(),
            "quarter": t.string(),
            "deleted11": t.string().optional(),
            "year": t.integer().optional(),
            "allowPersonal": t.boolean().optional(),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimePropertyOut"]
            ),
            "season": t.string(),
            "month": t.string(),
            "modifier": t.string().optional(),
            "minute": t.integer(),
            "partialSecond": t.number(),
            "hour": t.integer().optional(),
            "nonGregorianDate": t.proxy(
                renames["NlpSemanticParsingDatetimeNonGregorianDateOut"]
            ).optional(),
            "isBc": t.boolean().optional(),
            "meridiem": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"])
    types["NlpSciencelitArticleDataIn"] = t.struct(
        {
            "scholarDocument": t.array(t.proxy(renames["CompositeDocIn"])).optional(),
            "parsedFrom": t.string().optional(),
            "wordCount": t.string().optional(),
            "citation": t.array(
                t.proxy(renames["NlpSciencelitCitationDataIn"])
            ).optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdIn"])),
            "title": t.string(),
            "analyzedText": t.proxy(renames["NlxDataSchemaScaleSetIn"]).optional(),
            "scholarCitation": t.proxy(renames["ScienceCitationIn"]).optional(),
            "referencedBlock": t.array(
                t.proxy(renames["NlpSciencelitReferencedBlockIn"])
            ).optional(),
            "pubDate": t.array(t.proxy(renames["NlpSciencelitPubDateIn"])).optional(),
            "earliestPubDate": t.string().optional(),
            "nonAbstractWordCount": t.string(),
            "source": t.string().optional(),
            "metadata": t.proxy(renames["NlpSciencelitArticleMetadataIn"]),
            "scholarSignal": t.proxy(renames["ScienceIndexSignalIn"]).optional(),
        }
    ).named(renames["NlpSciencelitArticleDataIn"])
    types["NlpSciencelitArticleDataOut"] = t.struct(
        {
            "scholarDocument": t.array(t.proxy(renames["CompositeDocOut"])).optional(),
            "parsedFrom": t.string().optional(),
            "wordCount": t.string().optional(),
            "citation": t.array(
                t.proxy(renames["NlpSciencelitCitationDataOut"])
            ).optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdOut"])),
            "title": t.string(),
            "analyzedText": t.proxy(renames["NlxDataSchemaScaleSetOut"]).optional(),
            "scholarCitation": t.proxy(renames["ScienceCitationOut"]).optional(),
            "referencedBlock": t.array(
                t.proxy(renames["NlpSciencelitReferencedBlockOut"])
            ).optional(),
            "pubDate": t.array(t.proxy(renames["NlpSciencelitPubDateOut"])).optional(),
            "earliestPubDate": t.string().optional(),
            "nonAbstractWordCount": t.string(),
            "source": t.string().optional(),
            "metadata": t.proxy(renames["NlpSciencelitArticleMetadataOut"]),
            "scholarSignal": t.proxy(renames["ScienceIndexSignalOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitArticleDataOut"])
    types["QualitySalientTermsSignalDataIn"] = t.struct(
        {
            "noiseCorrection": t.number().optional(),
            "volume": t.number().optional(),
            "confidence": t.number().optional(),
            "observedVolume": t.number().optional(),
            "bias": t.number().optional(),
            "source": t.string().optional(),
            "halfSalience": t.number().optional(),
            "rawVolume": t.number().optional(),
            "observedConfidence": t.number().optional(),
        }
    ).named(renames["QualitySalientTermsSignalDataIn"])
    types["QualitySalientTermsSignalDataOut"] = t.struct(
        {
            "noiseCorrection": t.number().optional(),
            "volume": t.number().optional(),
            "confidence": t.number().optional(),
            "observedVolume": t.number().optional(),
            "bias": t.number().optional(),
            "source": t.string().optional(),
            "halfSalience": t.number().optional(),
            "rawVolume": t.number().optional(),
            "observedConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientTermsSignalDataOut"])
    types["GoogleCloudContentwarehouseV1SynonymSetIn"] = t.struct(
        {
            "synonyms": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetSynonymIn"])
            ).optional(),
            "name": t.string().optional(),
            "context": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SynonymSetIn"])
    types["GoogleCloudContentwarehouseV1SynonymSetOut"] = t.struct(
        {
            "synonyms": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetSynonymOut"])
            ).optional(),
            "name": t.string().optional(),
            "context": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SynonymSetOut"])
    types[
        "AssistantApiSettingsNotificationProfileAlloNotificationProfileIn"
    ] = t.struct(
        {
            "id": t.proxy(renames["ChatBotPlatformFireballIdIn"]).optional(),
            "botSendToken": t.proxy(
                renames["ChatBotPlatformBotSendTokenIn"]
            ).optional(),
        }
    ).named(
        renames["AssistantApiSettingsNotificationProfileAlloNotificationProfileIn"]
    )
    types[
        "AssistantApiSettingsNotificationProfileAlloNotificationProfileOut"
    ] = t.struct(
        {
            "id": t.proxy(renames["ChatBotPlatformFireballIdOut"]).optional(),
            "botSendToken": t.proxy(
                renames["ChatBotPlatformBotSendTokenOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiSettingsNotificationProfileAlloNotificationProfileOut"]
    )
    types["SocialGraphApiProtoImageReferenceIn"] = t.struct(
        {"mediaId": t.string().optional(), "contentVersion": t.string().optional()}
    ).named(renames["SocialGraphApiProtoImageReferenceIn"])
    types["SocialGraphApiProtoImageReferenceOut"] = t.struct(
        {
            "mediaId": t.string().optional(),
            "contentVersion": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoImageReferenceOut"])
    types["VideoPipelineViperVSIColumnDataVsiStatsIn"] = t.struct(
        {"vsiTime": t.number().optional(), "partialVsi": t.boolean().optional()}
    ).named(renames["VideoPipelineViperVSIColumnDataVsiStatsIn"])
    types["VideoPipelineViperVSIColumnDataVsiStatsOut"] = t.struct(
        {
            "vsiTime": t.number().optional(),
            "partialVsi": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoPipelineViperVSIColumnDataVsiStatsOut"])
    types["StorageGraphBfgLegalRequestMetadataIn"] = t.struct(
        {"bugId": t.string().optional()}
    ).named(renames["StorageGraphBfgLegalRequestMetadataIn"])
    types["StorageGraphBfgLegalRequestMetadataOut"] = t.struct(
        {
            "bugId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgLegalRequestMetadataOut"])
    types["NlpSemanticParsingAnnotationEvalDataIn"] = t.struct(
        {
            "startToken": t.integer().optional(),
            "numTokens": t.integer(),
            "additionalSpans": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
        }
    ).named(renames["NlpSemanticParsingAnnotationEvalDataIn"])
    types["NlpSemanticParsingAnnotationEvalDataOut"] = t.struct(
        {
            "startToken": t.integer().optional(),
            "numTokens": t.integer(),
            "additionalSpans": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "startByte": t.integer().optional(),
            "numBytes": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingAnnotationEvalDataOut"])
    types["AssistantApiRecurrenceIn"] = t.struct(
        {
            "dayOfWeek": t.array(t.integer()).optional(),
            "dayOfMonth": t.array(t.integer()).optional(),
            "weekOfMonth": t.array(t.integer()).optional(),
            "begin": t.proxy(renames["AssistantApiDateIn"]).optional(),
            "blacklistedRanges": t.array(
                t.proxy(renames["AssistantApiRecurrenceDatetimeRangeIn"])
            ).optional(),
            "end": t.proxy(renames["AssistantApiDateIn"]).optional(),
            "monthOfYear": t.array(t.integer()).optional(),
            "every": t.integer().optional(),
            "numOccurrences": t.integer().optional(),
        }
    ).named(renames["AssistantApiRecurrenceIn"])
    types["AssistantApiRecurrenceOut"] = t.struct(
        {
            "dayOfWeek": t.array(t.integer()).optional(),
            "dayOfMonth": t.array(t.integer()).optional(),
            "weekOfMonth": t.array(t.integer()).optional(),
            "begin": t.proxy(renames["AssistantApiDateOut"]).optional(),
            "blacklistedRanges": t.array(
                t.proxy(renames["AssistantApiRecurrenceDatetimeRangeOut"])
            ).optional(),
            "end": t.proxy(renames["AssistantApiDateOut"]).optional(),
            "monthOfYear": t.array(t.integer()).optional(),
            "every": t.integer().optional(),
            "numOccurrences": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiRecurrenceOut"])
    types["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextIn"] = t.struct(
        {
            "location": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserLocationIn"]
            ).optional()
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextIn"])
    types["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextOut"] = t.struct(
        {
            "location": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserLocationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextOut"])
    types["AssistantApiCoreTypesSurfaceVersionIn"] = t.struct(
        {"minor": t.integer(), "major": t.integer()}
    ).named(renames["AssistantApiCoreTypesSurfaceVersionIn"])
    types["AssistantApiCoreTypesSurfaceVersionOut"] = t.struct(
        {
            "minor": t.integer(),
            "major": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesSurfaceVersionOut"])
    types["AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "contactCreateContext": t.proxy(
                renames["SocialGraphApiProtoContactCreateContextIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "contactCreateContext": t.proxy(
                renames["SocialGraphApiProtoContactCreateContextOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoOut"])
    types["VideoContentSearchCommentAnchorSetFeaturesCommentIn"] = t.struct(
        {
            "publishedAt": t.string().optional(),
            "likeCount": t.integer().optional(),
            "textOriginal": t.string().optional(),
            "miniStanza": t.proxy(
                renames["YoutubeCommentsClusteringMiniStanzaIn"]
            ).optional(),
            "commentId": t.string().optional(),
            "textDisplay": t.string().optional(),
            "updatedAt": t.string().optional(),
        }
    ).named(renames["VideoContentSearchCommentAnchorSetFeaturesCommentIn"])
    types["VideoContentSearchCommentAnchorSetFeaturesCommentOut"] = t.struct(
        {
            "publishedAt": t.string().optional(),
            "likeCount": t.integer().optional(),
            "textOriginal": t.string().optional(),
            "miniStanza": t.proxy(
                renames["YoutubeCommentsClusteringMiniStanzaOut"]
            ).optional(),
            "commentId": t.string().optional(),
            "textDisplay": t.string().optional(),
            "updatedAt": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCommentAnchorSetFeaturesCommentOut"])
    types["NlpSemanticParsingDatetimeResolutionPropertiesIn"] = t.struct(
        {
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ).optional(),
            "metadata": t.string().optional(),
            "meridiem": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeResolutionPropertiesIn"])
    types["NlpSemanticParsingDatetimeResolutionPropertiesOut"] = t.struct(
        {
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ).optional(),
            "metadata": t.string().optional(),
            "meridiem": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeResolutionPropertiesOut"])
    types["RepositoryWebrefPreprocessingOriginalNamesIn"] = t.struct(
        {
            "name": t.array(
                t.proxy(
                    renames["RepositoryWebrefPreprocessingOriginalNamesOriginalNameIn"]
                )
            ),
            "count": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingOriginalNamesIn"])
    types["RepositoryWebrefPreprocessingOriginalNamesOut"] = t.struct(
        {
            "name": t.array(
                t.proxy(
                    renames["RepositoryWebrefPreprocessingOriginalNamesOriginalNameOut"]
                )
            ),
            "count": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingOriginalNamesOut"])
    types["AssistantLogsAllMediaStreamLogIn"] = t.struct(
        {
            "targetStream": t.proxy(
                renames["AssistantLogsMediaStreamLogIn"]
            ).optional(),
            "streams": t.array(
                t.proxy(renames["AssistantLogsMediaStreamLogIn"])
            ).optional(),
        }
    ).named(renames["AssistantLogsAllMediaStreamLogIn"])
    types["AssistantLogsAllMediaStreamLogOut"] = t.struct(
        {
            "targetStream": t.proxy(
                renames["AssistantLogsMediaStreamLogOut"]
            ).optional(),
            "streams": t.array(
                t.proxy(renames["AssistantLogsMediaStreamLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsAllMediaStreamLogOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataIn"
    ] = t.struct(
        {"ringtoneLabel": t.string().optional(), "isEnabled": t.boolean()}
    ).named(
        renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataIn"]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataOut"
    ] = t.struct(
        {
            "ringtoneLabel": t.string().optional(),
            "isEnabled": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataOut"
        ]
    )
    types["CountryGeoLocationsIn"] = t.struct(
        {
            "geoLocation": t.array(t.proxy(renames["CountryGeoLocationIn"])),
            "propagationDepthFromParent": t.integer().optional(),
            "isNonLocationSpecific": t.boolean().optional(),
        }
    ).named(renames["CountryGeoLocationsIn"])
    types["CountryGeoLocationsOut"] = t.struct(
        {
            "geoLocation": t.array(t.proxy(renames["CountryGeoLocationOut"])),
            "propagationDepthFromParent": t.integer().optional(),
            "isNonLocationSpecific": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryGeoLocationsOut"])
    types["NlpSemanticParsingLocalPriceConstraintIn"] = t.struct(
        {
            "unspecified": t.boolean().optional(),
            "cheap": t.boolean(),
            "currencyCode": t.string().optional(),
            "maxPrice": t.number(),
            "moderatelyPriced": t.boolean(),
            "minPrice": t.number(),
            "expensive": t.boolean(),
        }
    ).named(renames["NlpSemanticParsingLocalPriceConstraintIn"])
    types["NlpSemanticParsingLocalPriceConstraintOut"] = t.struct(
        {
            "unspecified": t.boolean().optional(),
            "cheap": t.boolean(),
            "currencyCode": t.string().optional(),
            "maxPrice": t.number(),
            "moderatelyPriced": t.boolean(),
            "minPrice": t.number(),
            "expensive": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalPriceConstraintOut"])
    types["GoogleIamV1AuditConfigIn"] = t.struct(
        {
            "auditLogConfigs": t.array(
                t.proxy(renames["GoogleIamV1AuditLogConfigIn"])
            ).optional(),
            "service": t.string().optional(),
        }
    ).named(renames["GoogleIamV1AuditConfigIn"])
    types["GoogleIamV1AuditConfigOut"] = t.struct(
        {
            "auditLogConfigs": t.array(
                t.proxy(renames["GoogleIamV1AuditLogConfigOut"])
            ).optional(),
            "service": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleIamV1AuditConfigOut"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestIn"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentLinkRequestOut"])
    types["IndexingDocjoinerAnchorStatisticsIn"] = t.struct(
        {
            "localAnchorCount": t.integer(),
            "droppedRedundantAnchorCount": t.integer().optional(),
            "totalDomainPhrasePairsAboveLimit": t.integer().optional(),
            "redundantanchorinfo": t.array(
                t.proxy(
                    renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoIn"]
                )
            ),
            "globalAnchorDelta": t.integer().optional(),
            "mediumCorpusAnchorCount": t.integer(),
            "pageMismatchTaggedAnchors": t.integer(),
            "spamLog10Odds": t.number().optional(),
            "onsiteAnchorCount": t.integer(),
            "penguinTooManySources": t.boolean().optional(),
            "phraseAnchorSpamInfo": t.proxy(
                renames["IndexingDocjoinerAnchorPhraseSpamInfoIn"]
            ).optional(),
            "anchorSpamInfo": t.proxy(
                renames["IndexingDocjoinerAnchorSpamInfoIn"]
            ).optional(),
            "topPrOndomainAnchorCount": t.integer(),
            "skippedOrReusedReason": t.string().optional(),
            "baseAnchorCount": t.integer(),
            "redundantanchorinfoforphrasecap": t.array(
                t.proxy(
                    renames[
                        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapIn"
                    ]
                )
            ),
            "fakeAnchorCount": t.integer(),
            "totalDomainPhrasePairsSeenApprox": t.integer().optional(),
            "anchorsWithDedupedImprovanchors": t.integer().optional(),
            "forwardedOffdomainAnchorCount": t.integer(),
            "anchorCount": t.integer(),
            "linkBeforeSitechangeTaggedAnchors": t.integer(),
            "badbacklinksPenalized": t.boolean().optional(),
            "timestamp": t.integer().optional(),
            "droppedNonLocalAnchorCount": t.integer(),
            "ondomainAnchorCount": t.integer(),
            "scannedAnchorCount": t.integer().optional(),
            "totalDomainsAbovePhraseCap": t.integer().optional(),
            "skippedAccumulate": t.integer().optional(),
            "redundantAnchorForPhraseCapCount": t.integer().optional(),
            "totalDomainsSeen": t.integer().optional(),
            "perdupstats": t.array(
                t.proxy(renames["IndexingDocjoinerAnchorStatisticsPerDupStatsIn"])
            ),
            "minDomainHomePageLocalOutdegree": t.integer().optional(),
            "nonLocalAnchorCount": t.integer(),
            "mediumCorpusOffdomainAnchorCount": t.integer(),
            "topPrOnsiteAnchorCount": t.integer().optional(),
            "pageFromExpiredTaggedAnchors": t.integer().optional(),
            "penguinLastUpdate": t.integer().optional(),
            "lowCorpusAnchorCount": t.integer(),
            "droppedHomepageAnchorCount": t.integer(),
            "baseOffdomainAnchorCount": t.integer(),
            "offdomainAnchorCount": t.integer(),
            "penguinEarlyAnchorProtected": t.boolean().optional(),
            "forwardedAnchorCount": t.integer(),
            "lowCorpusOffdomainAnchorCount": t.integer(),
            "minHostHomePageLocalOutdegree": t.integer().optional(),
            "droppedLocalAnchorCount": t.integer(),
            "penguinPenalty": t.number().optional(),
            "topPrOffdomainAnchorCount": t.integer(),
            "anchorPhraseCount": t.integer().optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorStatisticsIn"])
    types["IndexingDocjoinerAnchorStatisticsOut"] = t.struct(
        {
            "localAnchorCount": t.integer(),
            "droppedRedundantAnchorCount": t.integer().optional(),
            "totalDomainPhrasePairsAboveLimit": t.integer().optional(),
            "redundantanchorinfo": t.array(
                t.proxy(
                    renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoOut"]
                )
            ),
            "globalAnchorDelta": t.integer().optional(),
            "mediumCorpusAnchorCount": t.integer(),
            "pageMismatchTaggedAnchors": t.integer(),
            "spamLog10Odds": t.number().optional(),
            "onsiteAnchorCount": t.integer(),
            "penguinTooManySources": t.boolean().optional(),
            "phraseAnchorSpamInfo": t.proxy(
                renames["IndexingDocjoinerAnchorPhraseSpamInfoOut"]
            ).optional(),
            "anchorSpamInfo": t.proxy(
                renames["IndexingDocjoinerAnchorSpamInfoOut"]
            ).optional(),
            "topPrOndomainAnchorCount": t.integer(),
            "skippedOrReusedReason": t.string().optional(),
            "baseAnchorCount": t.integer(),
            "redundantanchorinfoforphrasecap": t.array(
                t.proxy(
                    renames[
                        "IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCapOut"
                    ]
                )
            ),
            "fakeAnchorCount": t.integer(),
            "totalDomainPhrasePairsSeenApprox": t.integer().optional(),
            "anchorsWithDedupedImprovanchors": t.integer().optional(),
            "forwardedOffdomainAnchorCount": t.integer(),
            "anchorCount": t.integer(),
            "linkBeforeSitechangeTaggedAnchors": t.integer(),
            "badbacklinksPenalized": t.boolean().optional(),
            "timestamp": t.integer().optional(),
            "droppedNonLocalAnchorCount": t.integer(),
            "ondomainAnchorCount": t.integer(),
            "scannedAnchorCount": t.integer().optional(),
            "totalDomainsAbovePhraseCap": t.integer().optional(),
            "skippedAccumulate": t.integer().optional(),
            "redundantAnchorForPhraseCapCount": t.integer().optional(),
            "totalDomainsSeen": t.integer().optional(),
            "perdupstats": t.array(
                t.proxy(renames["IndexingDocjoinerAnchorStatisticsPerDupStatsOut"])
            ),
            "minDomainHomePageLocalOutdegree": t.integer().optional(),
            "nonLocalAnchorCount": t.integer(),
            "mediumCorpusOffdomainAnchorCount": t.integer(),
            "topPrOnsiteAnchorCount": t.integer().optional(),
            "pageFromExpiredTaggedAnchors": t.integer().optional(),
            "penguinLastUpdate": t.integer().optional(),
            "lowCorpusAnchorCount": t.integer(),
            "droppedHomepageAnchorCount": t.integer(),
            "baseOffdomainAnchorCount": t.integer(),
            "offdomainAnchorCount": t.integer(),
            "penguinEarlyAnchorProtected": t.boolean().optional(),
            "forwardedAnchorCount": t.integer(),
            "lowCorpusOffdomainAnchorCount": t.integer(),
            "minHostHomePageLocalOutdegree": t.integer().optional(),
            "droppedLocalAnchorCount": t.integer(),
            "penguinPenalty": t.number().optional(),
            "topPrOffdomainAnchorCount": t.integer(),
            "anchorPhraseCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorStatisticsOut"])
    types["NlpSemanticParsingLocalGcidConstraintIn"] = t.struct(
        {"gcid": t.string().optional()}
    ).named(renames["NlpSemanticParsingLocalGcidConstraintIn"])
    types["NlpSemanticParsingLocalGcidConstraintOut"] = t.struct(
        {
            "gcid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalGcidConstraintOut"])
    types["NlpSemanticParsingModelsMediaAudiobookInfoIn"] = t.struct(
        {
            "authors": t.array(t.string()),
            "bookMid": t.string().optional(),
            "audiobookMid": t.string().optional(),
            "narrators": t.array(t.string()),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAudiobookInfoIn"])
    types["NlpSemanticParsingModelsMediaAudiobookInfoOut"] = t.struct(
        {
            "authors": t.array(t.string()),
            "bookMid": t.string().optional(),
            "audiobookMid": t.string().optional(),
            "narrators": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAudiobookInfoOut"])
    types["AssistantApiSpeechCapabilitiesIn"] = t.struct(
        {
            "dspAvailable": t.boolean().optional(),
            "unlockWithHotwordAvailable": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSpeechCapabilitiesIn"])
    types["AssistantApiSpeechCapabilitiesOut"] = t.struct(
        {
            "dspAvailable": t.boolean().optional(),
            "unlockWithHotwordAvailable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSpeechCapabilitiesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPronounIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "pronounData": t.proxy(renames["SocialGraphApiProtoPronounDataIn"]),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPronounIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPronounOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "pronounData": t.proxy(renames["SocialGraphApiProtoPronounDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPronounOut"])
    types["KnowledgeAnswersOpaqueLocationTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueLocationTypeIn"])
    types["KnowledgeAnswersOpaqueLocationTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueLocationTypeOut"])
    types["IndexingUrlPatternUrlTreeUrlTreeDebugInfoIn"] = t.struct(
        {"innerSimilarity": t.number()}
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeDebugInfoIn"])
    types["IndexingUrlPatternUrlTreeUrlTreeDebugInfoOut"] = t.struct(
        {
            "innerSimilarity": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeDebugInfoOut"])
    types["MustangReposWwwSnippetsCandidateFeatureIn"] = t.struct(
        {"name": t.string().optional(), "score": t.number()}
    ).named(renames["MustangReposWwwSnippetsCandidateFeatureIn"])
    types["MustangReposWwwSnippetsCandidateFeatureOut"] = t.struct(
        {
            "name": t.string().optional(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MustangReposWwwSnippetsCandidateFeatureOut"])
    types["NlpSemanticParsingModelsShoppingAssistantProductIn"] = t.struct(
        {
            "mediaProduct": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductIn"
                ]
            ).optional(),
            "minPrice": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyIn"]
            ).optional(),
            "catalogId": t.string().optional(),
            "mid": t.string().optional(),
            "maxPrice": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyIn"]
            ).optional(),
            "title": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductIn"])
    types["NlpSemanticParsingModelsShoppingAssistantProductOut"] = t.struct(
        {
            "mediaProduct": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductOut"
                ]
            ).optional(),
            "minPrice": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyOut"]
            ).optional(),
            "catalogId": t.string().optional(),
            "mid": t.string().optional(),
            "maxPrice": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyOut"]
            ).optional(),
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductOut"])
    types["TrawlerFetchStatusIn"] = t.struct(
        {"Reason": t.integer().optional(), "State": t.string().optional()}
    ).named(renames["TrawlerFetchStatusIn"])
    types["TrawlerFetchStatusOut"] = t.struct(
        {
            "Reason": t.integer().optional(),
            "State": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchStatusOut"])
    types["NlpSaftMentionResolutionIn"] = t.struct(
        {
            "profile": t.proxy(renames["NlpSaftEntityProfileIn"]).optional(),
            "type": t.string(),
        }
    ).named(renames["NlpSaftMentionResolutionIn"])
    types["NlpSaftMentionResolutionOut"] = t.struct(
        {
            "profile": t.proxy(renames["NlpSaftEntityProfileOut"]).optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftMentionResolutionOut"])
    types["IndexingEmbeddedContentFetchHostCountCounterIn"] = t.struct(
        {"num": t.integer(), "name": t.string()}
    ).named(renames["IndexingEmbeddedContentFetchHostCountCounterIn"])
    types["IndexingEmbeddedContentFetchHostCountCounterOut"] = t.struct(
        {
            "num": t.integer(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentFetchHostCountCounterOut"])
    types["EmbedsPackagingServiceClientIn"] = t.struct(
        {
            "type": t.string().optional(),
            "iosBundleId": t.string().optional(),
            "iosAppStoreId": t.string().optional(),
            "androidPackageName": t.string().optional(),
        }
    ).named(renames["EmbedsPackagingServiceClientIn"])
    types["EmbedsPackagingServiceClientOut"] = t.struct(
        {
            "type": t.string().optional(),
            "iosBundleId": t.string().optional(),
            "iosAppStoreId": t.string().optional(),
            "androidPackageName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["EmbedsPackagingServiceClientOut"])
    types["LocalWWWInfoWrapptorItemIn"] = t.struct(
        {"bizName": t.string(), "phoneFprint": t.string(), "addrFprint": t.string()}
    ).named(renames["LocalWWWInfoWrapptorItemIn"])
    types["LocalWWWInfoWrapptorItemOut"] = t.struct(
        {
            "bizName": t.string(),
            "phoneFprint": t.string(),
            "addrFprint": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoWrapptorItemOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoIn"] = t.struct(
        {
            "rawDeviceContactInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn"]
                )
            ).optional()
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoOut"] = t.struct(
        {
            "rawDeviceContactInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoOut"])
    types["AssistantGroundingRankerProviderGroundingProviderFeaturesIn"] = t.struct(
        {
            "pslScore": t.number().optional(),
            "providerId": t.proxy(renames["AssistantContextProviderIdIn"]).optional(),
            "providerClusterIdDeprecated": t.array(t.string()).optional(),
            "isInAppProvider": t.boolean().optional(),
        }
    ).named(renames["AssistantGroundingRankerProviderGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerProviderGroundingProviderFeaturesOut"] = t.struct(
        {
            "pslScore": t.number().optional(),
            "providerId": t.proxy(renames["AssistantContextProviderIdOut"]).optional(),
            "providerClusterIdDeprecated": t.array(t.string()).optional(),
            "isInAppProvider": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerProviderGroundingProviderFeaturesOut"])
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeIn"
    ] = t.struct(
        {
            "language": t.string().optional(),
            "localizedTg": t.proxy(
                renames["VendingConsumerProtoTrustedGenomeAnnotationIn"]
            ).optional(),
        }
    ).named(
        renames[
            "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeIn"
        ]
    )
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeOut"
    ] = t.struct(
        {
            "language": t.string().optional(),
            "localizedTg": t.proxy(
                renames["VendingConsumerProtoTrustedGenomeAnnotationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeOut"
        ]
    )
    types["NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoIn"] = t.struct(
        {"itemId": t.string(), "listId": t.string()}
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoIn"])
    types[
        "NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoOut"
    ] = t.struct(
        {
            "itemId": t.string(),
            "listId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoOut"]
    )
    types["RepositoryWebrefDetailedEntityScoresIn"] = t.struct(
        {
            "localEntityLocationConfidence": t.number().optional(),
            "isAuthor": t.boolean().optional(),
            "geoTopicNormalizedScore": t.number().optional(),
            "relevanceScore": t.number().optional(),
            "referencePageScores": t.proxy(
                renames["RepositoryWebrefReferencePageScoresIn"]
            ).optional(),
            "isPublisher": t.boolean().optional(),
            "isReferencePage": t.boolean().optional(),
            "docScore": t.number().optional(),
            "connectedness": t.number().optional(),
            "normalizedTopicality": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefDetailedEntityScoresIn"])
    types["RepositoryWebrefDetailedEntityScoresOut"] = t.struct(
        {
            "localEntityLocationConfidence": t.number().optional(),
            "isAuthor": t.boolean().optional(),
            "geoTopicNormalizedScore": t.number().optional(),
            "relevanceScore": t.number().optional(),
            "referencePageScores": t.proxy(
                renames["RepositoryWebrefReferencePageScoresOut"]
            ).optional(),
            "isPublisher": t.boolean().optional(),
            "isReferencePage": t.boolean().optional(),
            "docScore": t.number().optional(),
            "connectedness": t.number().optional(),
            "normalizedTopicality": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDetailedEntityScoresOut"])
    types["AssistantLogsReminderLogIn"] = t.struct(
        {
            "createdSecondsAgo": t.string().optional(),
            "retrievedRankingClass": t.integer().optional(),
        }
    ).named(renames["AssistantLogsReminderLogIn"])
    types["AssistantLogsReminderLogOut"] = t.struct(
        {
            "createdSecondsAgo": t.string().optional(),
            "retrievedRankingClass": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsReminderLogOut"])
    types["SecurityCredentialsContactGroupProtoIn"] = t.struct(
        {
            "requiredConsistencyTimestampUsec": t.string().optional(),
            "ownerGaiaId": t.string(),
            "groupId": t.string().optional(),
        }
    ).named(renames["SecurityCredentialsContactGroupProtoIn"])
    types["SecurityCredentialsContactGroupProtoOut"] = t.struct(
        {
            "requiredConsistencyTimestampUsec": t.string().optional(),
            "ownerGaiaId": t.string(),
            "groupId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsContactGroupProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsIn"] = t.struct(
        {"mobileOwnerId": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsOut"] = t.struct(
        {
            "mobileOwnerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsOut"])
    types["NlpSemanticParsingLocalVisitHistoryConstraintIn"] = t.struct(
        {"visitedType": t.string()}
    ).named(renames["NlpSemanticParsingLocalVisitHistoryConstraintIn"])
    types["NlpSemanticParsingLocalVisitHistoryConstraintOut"] = t.struct(
        {
            "visitedType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalVisitHistoryConstraintOut"])
    types["HtmlrenderWebkitHeadlessProtoResourceIn"] = t.struct(
        {
            "method": t.integer().optional(),
            "postData": t.string(),
            "content": t.string().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoIn"])
            ).optional(),
            "metadata": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchMetadataIn"])
            ),
            "url": t.string(),
            "finalContentUrl": t.string().optional(),
            "requestHeader": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderIn"])
            ).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoResourceIn"])
    types["HtmlrenderWebkitHeadlessProtoResourceOut"] = t.struct(
        {
            "method": t.integer().optional(),
            "postData": t.string(),
            "content": t.string().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoOut"])
            ).optional(),
            "metadata": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchMetadataOut"])
            ),
            "url": t.string(),
            "finalContentUrl": t.string().optional(),
            "requestHeader": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoResourceOut"])
    types["AssistantApiCameraReceiverCapabilitiesIn"] = t.struct(
        {
            "hasLimitedCameraStreamCapability": t.boolean().optional(),
            "supportedCameraReceivers": t.array(
                t.proxy(renames["AssistantApiCoreTypesCastAppInfoIn"])
            ).optional(),
        }
    ).named(renames["AssistantApiCameraReceiverCapabilitiesIn"])
    types["AssistantApiCameraReceiverCapabilitiesOut"] = t.struct(
        {
            "hasLimitedCameraStreamCapability": t.boolean().optional(),
            "supportedCameraReceivers": t.array(
                t.proxy(renames["AssistantApiCoreTypesCastAppInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCameraReceiverCapabilitiesOut"])
    types["GeostoreServicedStopProtoIn"] = t.struct(
        {
            "id": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "index": t.integer().optional(),
        }
    ).named(renames["GeostoreServicedStopProtoIn"])
    types["GeostoreServicedStopProtoOut"] = t.struct(
        {
            "id": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreServicedStopProtoOut"])
    types["AssistantVerticalsHomeautomationProtoConciergeFeaturesIn"] = t.struct(
        {"conciergeProductFeatures": t.array(t.string())}
    ).named(renames["AssistantVerticalsHomeautomationProtoConciergeFeaturesIn"])
    types["AssistantVerticalsHomeautomationProtoConciergeFeaturesOut"] = t.struct(
        {
            "conciergeProductFeatures": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoConciergeFeaturesOut"])
    types["WirelessTranscoderFetchFetchSourceInfoIn"] = t.struct(
        {"detail": t.string().optional(), "source": t.string().optional()}
    ).named(renames["WirelessTranscoderFetchFetchSourceInfoIn"])
    types["WirelessTranscoderFetchFetchSourceInfoOut"] = t.struct(
        {
            "detail": t.string().optional(),
            "source": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WirelessTranscoderFetchFetchSourceInfoOut"])
    types["GoogleCloudDocumentaiV1DocumentPageMatrixIn"] = t.struct(
        {
            "type": t.integer().optional(),
            "rows": t.integer().optional(),
            "data": t.string().optional(),
            "cols": t.integer().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageMatrixIn"])
    types["GoogleCloudDocumentaiV1DocumentPageMatrixOut"] = t.struct(
        {
            "type": t.integer().optional(),
            "rows": t.integer().optional(),
            "data": t.string().optional(),
            "cols": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageMatrixOut"])
    types["GeostoreTelephoneProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "callRate": t.array(
                t.proxy(renames["GeostorePriceRangeProtoIn"])
            ).optional(),
            "contactCategory": t.string().optional(),
            "number": t.proxy(renames["TelephoneNumberIn"]).optional(),
            "label": t.array(t.proxy(renames["GeostoreNameProtoIn"])).optional(),
            "type": t.string(),
            "language": t.array(t.string()).optional(),
            "serviceLocationFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "isSharedNumber": t.boolean().optional(),
            "phoneNumber": t.proxy(renames["I18nPhonenumbersPhoneNumberIn"]).optional(),
            "flag": t.array(t.string()),
        }
    ).named(renames["GeostoreTelephoneProtoIn"])
    types["GeostoreTelephoneProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "callRate": t.array(
                t.proxy(renames["GeostorePriceRangeProtoOut"])
            ).optional(),
            "contactCategory": t.string().optional(),
            "number": t.proxy(renames["TelephoneNumberOut"]).optional(),
            "label": t.array(t.proxy(renames["GeostoreNameProtoOut"])).optional(),
            "type": t.string(),
            "language": t.array(t.string()).optional(),
            "serviceLocationFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "isSharedNumber": t.boolean().optional(),
            "phoneNumber": t.proxy(
                renames["I18nPhonenumbersPhoneNumberOut"]
            ).optional(),
            "flag": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTelephoneProtoOut"])
    types["LocalsearchChainIdIn"] = t.struct(
        {
            "category": t.string().optional(),
            "sitechunk": t.string().optional(),
            "prominentEntityId": t.string().optional(),
        }
    ).named(renames["LocalsearchChainIdIn"])
    types["LocalsearchChainIdOut"] = t.struct(
        {
            "category": t.string().optional(),
            "sitechunk": t.string().optional(),
            "prominentEntityId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalsearchChainIdOut"])
    types["AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigIn"] = t.struct(
        {
            "text": t.string().optional(),
            "imageUrl": t.string().optional(),
            "playlistId": t.string().optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigIn"])
    types["AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigOut"] = t.struct(
        {
            "text": t.string().optional(),
            "imageUrl": t.string().optional(),
            "playlistId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigOut"])
    types["RepositoryWebrefWikipediaGeocodeIn"] = t.struct(
        {
            "location": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "sourceUrl": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefWikipediaGeocodeIn"])
    types["RepositoryWebrefWikipediaGeocodeOut"] = t.struct(
        {
            "location": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "sourceUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWikipediaGeocodeOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationshipInterestIn"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationshipInterestIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationshipInterestOut"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationshipInterestOut"])
    types["AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn"] = t.struct(
        {
            "attributes": t.array(t.string()).optional(),
            "usageInfo": t.array(
                t.proxy(renames["SocialGraphApiProtoUsageInfoIn"])
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut"
    ] = t.struct(
        {
            "attributes": t.array(t.string()).optional(),
            "usageInfo": t.array(
                t.proxy(renames["SocialGraphApiProtoUsageInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut"]
    )
    types["VideoAssetsVenomSettingsIn"] = t.struct({"_": t.string().optional()}).named(
        renames["VideoAssetsVenomSettingsIn"]
    )
    types["VideoAssetsVenomSettingsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["VideoAssetsVenomSettingsOut"])
    types["NlpSemanticParsingQRefAnnotationSubClusterIn"] = t.struct(
        {
            "clusterSetScore": t.number(),
            "clusterId": t.string(),
            "clusterSiblingMid": t.array(t.string()),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationSubClusterIn"])
    types["NlpSemanticParsingQRefAnnotationSubClusterOut"] = t.struct(
        {
            "clusterSetScore": t.number(),
            "clusterId": t.string(),
            "clusterSiblingMid": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationSubClusterOut"])
    types["KnowledgeAnswersNormalizedStringTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "normalizedValue": t.array(t.string()),
        }
    ).named(renames["KnowledgeAnswersNormalizedStringTypeIn"])
    types["KnowledgeAnswersNormalizedStringTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "normalizedValue": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersNormalizedStringTypeOut"])
    types["YoutubeCommentsRankingYouTubeCommentTextEmbeddingIn"] = t.struct(
        {"textEmbedding": t.array(t.number()).optional()}
    ).named(renames["YoutubeCommentsRankingYouTubeCommentTextEmbeddingIn"])
    types["YoutubeCommentsRankingYouTubeCommentTextEmbeddingOut"] = t.struct(
        {
            "textEmbedding": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeCommentsRankingYouTubeCommentTextEmbeddingOut"])
    types["NlpSciencelitMeshHeadingIn"] = t.struct(
        {
            "meshDescriptor": t.proxy(renames["NlpSciencelitSubjectHeadingIn"]),
            "meshQualifier": t.array(t.proxy(renames["NlpSciencelitSubjectHeadingIn"])),
        }
    ).named(renames["NlpSciencelitMeshHeadingIn"])
    types["NlpSciencelitMeshHeadingOut"] = t.struct(
        {
            "meshDescriptor": t.proxy(renames["NlpSciencelitSubjectHeadingOut"]),
            "meshQualifier": t.array(
                t.proxy(renames["NlpSciencelitSubjectHeadingOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitMeshHeadingOut"])
    types["CompositeDocIn"] = t.struct(
        {
            "subindexid": t.array(t.string()),
            "urldate": t.string().optional(),
            "registrationinfo": t.proxy(renames["RegistrationInfoIn"]).optional(),
            "richcontentData": t.proxy(
                renames["IndexingConverterRichContentDataIn"]
            ).optional(),
            "liveexperimentinfo": t.proxy(renames["CompositeDocLiveExperimentInfoIn"]),
            "labelData": t.proxy(renames["QualityLabelsGoogleLabelDataIn"]).optional(),
            "accessRequirements": t.proxy(
                renames["IndexingPrivacyAccessAccessRequirementsIn"]
            ).optional(),
            "embeddedContentInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbeddedContentInfoIn"]
            ).optional(),
            "ContentChecksum96": t.string().optional(),
            "indexingIntermediate": t.string().optional(),
            "sitemap": t.proxy(renames["SitemapIn"]).optional(),
            "anchors": t.proxy(renames["AnchorsIn"]),
            "dataVersion": t.proxy(
                renames["IndexingDocjoinerDataVersionIn"]
            ).optional(),
            "storageRowTimestampMicros": t.string().optional(),
            "badSslCertificate": t.proxy(
                renames["IndexingBadSSLCertificateIn"]
            ).optional(),
            "alternatename": t.array(t.proxy(renames["CompositeDocAlternateNameIn"])),
            "docVideos": t.array(
                t.proxy(renames["ImageRepositoryVideoPropertiesIn"])
            ).optional(),
            "extradup": t.array(t.proxy(renames["CompositeDocExtraDupIn"])),
            "robotsinfolist": t.proxy(renames["CompositeDocRobotsInfoListIn"]),
            "localizedvariations": t.proxy(
                renames["CompositeDocLocalizedVariationsIn"]
            ),
            "url": t.string().optional(),
            "ptoken": t.proxy(renames["PtokenPTokenIn"]).optional(),
            "qualitysignals": t.proxy(renames["CompositeDocQualitySignalsIn"]),
            "richsnippet": t.proxy(renames["RichsnippetsPageMapIn"]).optional(),
            "localizedAlternateName": t.array(
                t.proxy(renames["IndexingConverterLocalizedAlternateNameIn"])
            ).optional(),
            "cseId": t.array(t.proxy(renames["QualityProseCSEUrlInfoIn"])),
            "porninfo": t.proxy(renames["ClassifierPornDocumentDataIn"]).optional(),
            "additionalchecksums": t.proxy(
                renames["CompositeDocAdditionalChecksumsIn"]
            ),
            "partialUpdateInfo": t.proxy(
                renames["CompositeDocPartialUpdateInfoIn"]
            ).optional(),
            "includedcontent": t.array(
                t.proxy(renames["CompositeDocIncludedContentIn"])
            ),
            "properties": t.proxy(renames["DocPropertiesIn"]),
            "docAttachments": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "syntacticDate": t.proxy(renames["QualityTimebasedSyntacticDateIn"]),
            "docinfoPassthroughAttachments": t.proxy(
                renames["Proto2BridgeMessageSetIn"]
            ).optional(),
            "doc": t.proxy(renames["GDocumentBaseIn"]),
            "localinfo": t.proxy(renames["LocalWWWInfoIn"]),
            "perDocData": t.proxy(renames["PerDocDataIn"]),
            "anchorStats": t.proxy(renames["IndexingDocjoinerAnchorStatisticsIn"]),
            "forwardingdup": t.array(t.proxy(renames["CompositeDocForwardingDupIn"])),
            "docImages": t.array(t.proxy(renames["ImageDataIn"])).optional(),
            "indexinginfo": t.proxy(renames["CompositeDocIndexingInfoIn"]),
            "scaledIndyRank": t.integer().optional(),
            "csePagerankCutoff": t.integer().optional(),
        }
    ).named(renames["CompositeDocIn"])
    types["CompositeDocOut"] = t.struct(
        {
            "subindexid": t.array(t.string()),
            "urldate": t.string().optional(),
            "registrationinfo": t.proxy(renames["RegistrationInfoOut"]).optional(),
            "richcontentData": t.proxy(
                renames["IndexingConverterRichContentDataOut"]
            ).optional(),
            "liveexperimentinfo": t.proxy(renames["CompositeDocLiveExperimentInfoOut"]),
            "labelData": t.proxy(renames["QualityLabelsGoogleLabelDataOut"]).optional(),
            "accessRequirements": t.proxy(
                renames["IndexingPrivacyAccessAccessRequirementsOut"]
            ).optional(),
            "embeddedContentInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbeddedContentInfoOut"]
            ).optional(),
            "ContentChecksum96": t.string().optional(),
            "indexingIntermediate": t.string().optional(),
            "sitemap": t.proxy(renames["SitemapOut"]).optional(),
            "anchors": t.proxy(renames["AnchorsOut"]),
            "dataVersion": t.proxy(
                renames["IndexingDocjoinerDataVersionOut"]
            ).optional(),
            "storageRowTimestampMicros": t.string().optional(),
            "badSslCertificate": t.proxy(
                renames["IndexingBadSSLCertificateOut"]
            ).optional(),
            "alternatename": t.array(t.proxy(renames["CompositeDocAlternateNameOut"])),
            "docVideos": t.array(
                t.proxy(renames["ImageRepositoryVideoPropertiesOut"])
            ).optional(),
            "extradup": t.array(t.proxy(renames["CompositeDocExtraDupOut"])),
            "robotsinfolist": t.proxy(renames["CompositeDocRobotsInfoListOut"]),
            "localizedvariations": t.proxy(
                renames["CompositeDocLocalizedVariationsOut"]
            ),
            "url": t.string().optional(),
            "ptoken": t.proxy(renames["PtokenPTokenOut"]).optional(),
            "qualitysignals": t.proxy(renames["CompositeDocQualitySignalsOut"]),
            "richsnippet": t.proxy(renames["RichsnippetsPageMapOut"]).optional(),
            "localizedAlternateName": t.array(
                t.proxy(renames["IndexingConverterLocalizedAlternateNameOut"])
            ).optional(),
            "cseId": t.array(t.proxy(renames["QualityProseCSEUrlInfoOut"])),
            "porninfo": t.proxy(renames["ClassifierPornDocumentDataOut"]).optional(),
            "additionalchecksums": t.proxy(
                renames["CompositeDocAdditionalChecksumsOut"]
            ),
            "partialUpdateInfo": t.proxy(
                renames["CompositeDocPartialUpdateInfoOut"]
            ).optional(),
            "includedcontent": t.array(
                t.proxy(renames["CompositeDocIncludedContentOut"])
            ),
            "properties": t.proxy(renames["DocPropertiesOut"]),
            "docAttachments": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "syntacticDate": t.proxy(renames["QualityTimebasedSyntacticDateOut"]),
            "docinfoPassthroughAttachments": t.proxy(
                renames["Proto2BridgeMessageSetOut"]
            ).optional(),
            "doc": t.proxy(renames["GDocumentBaseOut"]),
            "localinfo": t.proxy(renames["LocalWWWInfoOut"]),
            "perDocData": t.proxy(renames["PerDocDataOut"]),
            "anchorStats": t.proxy(renames["IndexingDocjoinerAnchorStatisticsOut"]),
            "forwardingdup": t.array(t.proxy(renames["CompositeDocForwardingDupOut"])),
            "docImages": t.array(t.proxy(renames["ImageDataOut"])).optional(),
            "indexinginfo": t.proxy(renames["CompositeDocIndexingInfoOut"]),
            "scaledIndyRank": t.integer().optional(),
            "csePagerankCutoff": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderResponseIn"] = t.struct(
        {
            "localStorage": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemIn"])
            ).optional(),
            "chromiumTrace": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoChromiumTraceIn"]
            ).optional(),
            "cookie": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoCookieIn"])
            ).optional(),
            "referencedResourceContent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoResourceIn"])
            ).optional(),
            "finalClientUrl": t.string().optional(),
            "renderStats": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderStatsIn"]
            ).optional(),
            "partialRender": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoPartialRenderIn"])
            ).optional(),
            "exceptions": t.string().optional(),
            "extensionResult": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderExtensionResultIn"]
            ).optional(),
            "pdf": t.proxy(renames["HtmlrenderWebkitHeadlessProtoPdfIn"]).optional(),
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentIn"]
            ).optional(),
            "image": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoImageIn"])
            ).optional(),
            "exceptionDetail": t.string().optional(),
            "sessionStorage": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemIn"])
            ).optional(),
            "title": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderResponseIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderResponseOut"] = t.struct(
        {
            "localStorage": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemOut"])
            ).optional(),
            "chromiumTrace": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoChromiumTraceOut"]
            ).optional(),
            "cookie": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoCookieOut"])
            ).optional(),
            "referencedResourceContent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoResourceOut"])
            ).optional(),
            "finalClientUrl": t.string().optional(),
            "renderStats": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderStatsOut"]
            ).optional(),
            "partialRender": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoPartialRenderOut"])
            ).optional(),
            "exceptions": t.string().optional(),
            "extensionResult": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderExtensionResultOut"]
            ).optional(),
            "pdf": t.proxy(renames["HtmlrenderWebkitHeadlessProtoPdfOut"]).optional(),
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentOut"]
            ).optional(),
            "image": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoImageOut"])
            ).optional(),
            "exceptionDetail": t.string().optional(),
            "sessionStorage": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemOut"])
            ).optional(),
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderResponseOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakIn"] = t.struct(
        {"type": t.string().optional()}
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakOut"])
    types["TrawlerSSLCertificateInfoIn"] = t.struct(
        {
            "SSLCipherSuite": t.integer(),
            "ALPNNegotiatedProtocol": t.string().optional(),
            "SSLCipherSuiteName": t.string(),
            "ErrorMessages": t.array(t.string()).optional(),
            "SSLProtocolVersionName": t.string().optional(),
            "CertificateChain": t.array(t.string()).optional(),
            "IsTruncated": t.boolean().optional(),
            "SSLProtocolVersion": t.integer().optional(),
            "OCSPResponse": t.string().optional(),
            "SCTList": t.string().optional(),
        }
    ).named(renames["TrawlerSSLCertificateInfoIn"])
    types["TrawlerSSLCertificateInfoOut"] = t.struct(
        {
            "SSLCipherSuite": t.integer(),
            "ALPNNegotiatedProtocol": t.string().optional(),
            "SSLCipherSuiteName": t.string(),
            "ErrorMessages": t.array(t.string()).optional(),
            "SSLProtocolVersionName": t.string().optional(),
            "CertificateChain": t.array(t.string()).optional(),
            "IsTruncated": t.boolean().optional(),
            "SSLProtocolVersion": t.integer().optional(),
            "OCSPResponse": t.string().optional(),
            "SCTList": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerSSLCertificateInfoOut"])
    types["VideoContentSearchQbstTermsOverlapFeaturesIn"] = t.struct(
        {
            "qbstNavboostOverlap": t.number().optional(),
            "qbstAnchorOverlap": t.number().optional(),
        }
    ).named(renames["VideoContentSearchQbstTermsOverlapFeaturesIn"])
    types["VideoContentSearchQbstTermsOverlapFeaturesOut"] = t.struct(
        {
            "qbstNavboostOverlap": t.number().optional(),
            "qbstAnchorOverlap": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchQbstTermsOverlapFeaturesOut"])
    types["AssistantApiSettingsHomeGraphDataIn"] = t.struct(
        {
            "agentId": t.string().optional(),
            "shouldWriteToHomeGraph": t.boolean().optional(),
            "attributes": t.struct({"_": t.string().optional()}).optional(),
            "deviceType": t.string().optional(),
            "supportedTraits": t.array(t.string()).optional(),
            "deviceId": t.string().optional(),
            "supportsDirectResponse": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsHomeGraphDataIn"])
    types["AssistantApiSettingsHomeGraphDataOut"] = t.struct(
        {
            "agentId": t.string().optional(),
            "shouldWriteToHomeGraph": t.boolean().optional(),
            "attributes": t.struct({"_": t.string().optional()}).optional(),
            "deviceType": t.string().optional(),
            "supportedTraits": t.array(t.string()).optional(),
            "deviceId": t.string().optional(),
            "supportsDirectResponse": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHomeGraphDataOut"])
    types["AssistantApiAssistantContinuedPresenceSupportIn"] = t.struct(
        {"plateSupport": t.string().optional()}
    ).named(renames["AssistantApiAssistantContinuedPresenceSupportIn"])
    types["AssistantApiAssistantContinuedPresenceSupportOut"] = t.struct(
        {
            "plateSupport": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAssistantContinuedPresenceSupportOut"])
    types["AssistantDevicesPlatformProtoProviderFulfillCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoProviderFulfillCapabilityIn"])
    types["AssistantDevicesPlatformProtoProviderFulfillCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoProviderFulfillCapabilityOut"])
    types["TrawlerFetchReplyDataIn"] = t.struct(
        {
            "ClientServiceInfo": t.proxy(
                renames["TrawlerClientServiceInfoIn"]
            ).optional(),
            "originalProtocolUrl": t.string().optional(),
            "LastUrlStatus": t.proxy(renames["TrawlerFetchStatusIn"]).optional(),
            "crawldates": t.proxy(renames["TrawlerFetchReplyDataCrawlDatesIn"]),
            "RedirectSourceFetchId": t.string().optional(),
            "HostId": t.string().optional(),
            "HSTSInfo": t.string().optional(),
            "partialresponse": t.proxy(
                renames["TrawlerFetchReplyDataPartialResponseIn"]
            ),
            "FetchPatternFp": t.string().optional(),
            "fetchstats": t.proxy(renames["TrawlerFetchReplyDataFetchStatsIn"]),
            "UrlEncoding": t.integer().optional(),
            "Events": t.array(t.proxy(renames["TrawlerEventIn"])),
            "PolicyData": t.array(t.proxy(renames["TrawlerPolicyDataIn"])).optional(),
            "ReuseInfo": t.string().optional(),
            "RobotsInfo": t.integer().optional(),
            "ID": t.string().optional(),
            "TrawlerPrivate": t.proxy(
                renames["TrawlerTrawlerPrivateFetchReplyDataIn"]
            ).optional(),
            "RequestorIPAddressPacked": t.string().optional(),
            "PredictedDownloadTimeMs": t.integer().optional(),
            "UseHtmlCompressDictionary": t.boolean().optional(),
            "TotalFetchedSize": t.string().optional(),
            "PostData": t.string().optional(),
            "BadSSLCertificate": t.string().optional(),
            "deliveryReport": t.proxy(
                renames["TrawlerFetchReplyDataDeliveryReportIn"]
            ).optional(),
            "TimestampInMS": t.string().optional(),
            "HopRobotsInfo": t.integer().optional(),
            "DownloadTime": t.integer().optional(),
            "GeoCrawlFallback": t.boolean().optional(),
            "HostBucketData": t.proxy(renames["TrawlerHostBucketDataIn"]).optional(),
            "RobotsStatus": t.proxy(renames["TrawlerFetchStatusIn"]).optional(),
            "EgressRegion": t.string().optional(),
            "CompressedBody": t.boolean().optional(),
            "HttpRequestHeaders": t.string().optional(),
            "HttpResponseHeaders": t.string().optional(),
            "ProtocolVersionFallback": t.boolean().optional(),
            "trafficType": t.string().optional(),
            "ThrottleClient": t.proxy(
                renames["TrawlerThrottleClientDataIn"]
            ).optional(),
            "HopCacheKeyForUpdate": t.string(),
            "HttpProtocol": t.string().optional(),
            "CrawlTimes": t.proxy(renames["TrawlerCrawlTimesIn"]),
            "HTTPTrailers": t.array(
                t.proxy(renames["TrawlerFetchReplyDataHTTPHeaderIn"])
            ).optional(),
            "TransparentRewrites": t.array(t.string()).optional(),
            "Url": t.string().optional(),
            "HopCacheKeyForLookup": t.string().optional(),
            "RequestorID": t.string().optional(),
            "DNSHost": t.string().optional(),
            "Status": t.proxy(renames["TrawlerFetchStatusIn"]).optional(),
            "EligibleGeoCrawlEgressRegion": t.string().optional(),
            "GeoCrawlEgressRegion": t.string().optional(),
            "RobotsTxt": t.string().optional(),
            "redirects": t.array(t.proxy(renames["TrawlerFetchReplyDataRedirectsIn"])),
            "FlooEgressRegion": t.string().optional(),
            "HttpVersion": t.string().optional(),
            "Endpoints": t.proxy(renames["TrawlerTCPIPInfoIn"]).optional(),
            "HopReuseInfo": t.string().optional(),
            "protocolresponse": t.proxy(
                renames["TrawlerFetchReplyDataProtocolResponseIn"]
            ),
            "GeoCrawlLocationAttempted": t.string().optional(),
            "ThrownAwayBytes": t.string().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataIn"])
    types["TrawlerFetchReplyDataOut"] = t.struct(
        {
            "ClientServiceInfo": t.proxy(
                renames["TrawlerClientServiceInfoOut"]
            ).optional(),
            "originalProtocolUrl": t.string().optional(),
            "LastUrlStatus": t.proxy(renames["TrawlerFetchStatusOut"]).optional(),
            "crawldates": t.proxy(renames["TrawlerFetchReplyDataCrawlDatesOut"]),
            "RedirectSourceFetchId": t.string().optional(),
            "HostId": t.string().optional(),
            "HSTSInfo": t.string().optional(),
            "partialresponse": t.proxy(
                renames["TrawlerFetchReplyDataPartialResponseOut"]
            ),
            "FetchPatternFp": t.string().optional(),
            "fetchstats": t.proxy(renames["TrawlerFetchReplyDataFetchStatsOut"]),
            "UrlEncoding": t.integer().optional(),
            "Events": t.array(t.proxy(renames["TrawlerEventOut"])),
            "PolicyData": t.array(t.proxy(renames["TrawlerPolicyDataOut"])).optional(),
            "ReuseInfo": t.string().optional(),
            "RobotsInfo": t.integer().optional(),
            "ID": t.string().optional(),
            "TrawlerPrivate": t.proxy(
                renames["TrawlerTrawlerPrivateFetchReplyDataOut"]
            ).optional(),
            "RequestorIPAddressPacked": t.string().optional(),
            "PredictedDownloadTimeMs": t.integer().optional(),
            "UseHtmlCompressDictionary": t.boolean().optional(),
            "TotalFetchedSize": t.string().optional(),
            "PostData": t.string().optional(),
            "BadSSLCertificate": t.string().optional(),
            "deliveryReport": t.proxy(
                renames["TrawlerFetchReplyDataDeliveryReportOut"]
            ).optional(),
            "TimestampInMS": t.string().optional(),
            "HopRobotsInfo": t.integer().optional(),
            "DownloadTime": t.integer().optional(),
            "GeoCrawlFallback": t.boolean().optional(),
            "HostBucketData": t.proxy(renames["TrawlerHostBucketDataOut"]).optional(),
            "RobotsStatus": t.proxy(renames["TrawlerFetchStatusOut"]).optional(),
            "EgressRegion": t.string().optional(),
            "CompressedBody": t.boolean().optional(),
            "HttpRequestHeaders": t.string().optional(),
            "HttpResponseHeaders": t.string().optional(),
            "ProtocolVersionFallback": t.boolean().optional(),
            "trafficType": t.string().optional(),
            "ThrottleClient": t.proxy(
                renames["TrawlerThrottleClientDataOut"]
            ).optional(),
            "HopCacheKeyForUpdate": t.string(),
            "HttpProtocol": t.string().optional(),
            "CrawlTimes": t.proxy(renames["TrawlerCrawlTimesOut"]),
            "HTTPTrailers": t.array(
                t.proxy(renames["TrawlerFetchReplyDataHTTPHeaderOut"])
            ).optional(),
            "TransparentRewrites": t.array(t.string()).optional(),
            "Url": t.string().optional(),
            "HopCacheKeyForLookup": t.string().optional(),
            "RequestorID": t.string().optional(),
            "DNSHost": t.string().optional(),
            "Status": t.proxy(renames["TrawlerFetchStatusOut"]).optional(),
            "EligibleGeoCrawlEgressRegion": t.string().optional(),
            "GeoCrawlEgressRegion": t.string().optional(),
            "RobotsTxt": t.string().optional(),
            "redirects": t.array(t.proxy(renames["TrawlerFetchReplyDataRedirectsOut"])),
            "FlooEgressRegion": t.string().optional(),
            "HttpVersion": t.string().optional(),
            "Endpoints": t.proxy(renames["TrawlerTCPIPInfoOut"]).optional(),
            "HopReuseInfo": t.string().optional(),
            "protocolresponse": t.proxy(
                renames["TrawlerFetchReplyDataProtocolResponseOut"]
            ),
            "GeoCrawlLocationAttempted": t.string().optional(),
            "ThrownAwayBytes": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataOut"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextIn"] = t.struct(
        {"isTextToSpeechSupported": t.boolean().optional()}
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextIn"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextOut"] = t.struct(
        {
            "isTextToSpeechSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextOut"])
    types["VideoFileContentLightLevelIn"] = t.struct(
        {
            "maxContentLightLevel": t.integer().optional(),
            "maxFrameAverageLightLevel": t.integer().optional(),
        }
    ).named(renames["VideoFileContentLightLevelIn"])
    types["VideoFileContentLightLevelOut"] = t.struct(
        {
            "maxContentLightLevel": t.integer().optional(),
            "maxFrameAverageLightLevel": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileContentLightLevelOut"])
    types["S3AudioLanguageS3AudioLanguageIn"] = t.struct(
        {
            "speechClass": t.string().optional(),
            "language": t.string().optional(),
            "languageConfidence": t.string().optional(),
        }
    ).named(renames["S3AudioLanguageS3AudioLanguageIn"])
    types["S3AudioLanguageS3AudioLanguageOut"] = t.struct(
        {
            "speechClass": t.string().optional(),
            "language": t.string().optional(),
            "languageConfidence": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["S3AudioLanguageS3AudioLanguageOut"])
    types["VideoContentSearchAspectIn"] = t.struct(
        {"saftAspect": t.string().optional(), "fallbackAspect": t.string().optional()}
    ).named(renames["VideoContentSearchAspectIn"])
    types["VideoContentSearchAspectOut"] = t.struct(
        {
            "saftAspect": t.string().optional(),
            "fallbackAspect": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAspectOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"] = t.struct(
        {
            "containerType": t.string().optional(),
            "fieldAcl": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclIn"]
            ).optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityIn"])
            ).optional(),
            "containerId": t.string().optional(),
            "otherDedupedContainers": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoIn"]
                )
            ).optional(),
            "productMetadata": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiProductMetadataIn"])
            ).optional(),
            "primary": t.boolean().optional(),
            "additionalContainerInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoIn"]
            ).optional(),
            "containerPrimary": t.boolean().optional(),
            "writeable": t.boolean().optional(),
            "verified": t.boolean().optional(),
            "visibility": t.string().optional(),
            "encodedContainerId": t.string().optional(),
            "aclChoices": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclIn"])
            ).optional(),
            "matchingInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoIn"])
            ).optional(),
            "contactVisibility": t.array(t.string()).optional(),
            "edgeKeyInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoIn"])
            ).optional(),
            "lastUpdateTime": t.string().optional(),
            "edgeKey": t.boolean().optional(),
            "deprecatedContactContainerId": t.string().optional(),
            "container": t.string().optional(),
            "crossDeviceAllowed": t.boolean().optional(),
            "defaultAclChoice": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclIn"]
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"] = t.struct(
        {
            "containerType": t.string().optional(),
            "fieldAcl": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclOut"]
            ).optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityOut"])
            ).optional(),
            "containerId": t.string().optional(),
            "otherDedupedContainers": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoOut"
                    ]
                )
            ).optional(),
            "productMetadata": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiProductMetadataOut"]
                )
            ).optional(),
            "primary": t.boolean().optional(),
            "additionalContainerInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfoOut"]
            ).optional(),
            "containerPrimary": t.boolean().optional(),
            "writeable": t.boolean().optional(),
            "verified": t.boolean().optional(),
            "visibility": t.string().optional(),
            "encodedContainerId": t.string().optional(),
            "aclChoices": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclOut"])
            ).optional(),
            "matchingInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMatchInfoOut"])
            ).optional(),
            "contactVisibility": t.array(t.string()).optional(),
            "edgeKeyInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoOut"])
            ).optional(),
            "lastUpdateTime": t.string().optional(),
            "edgeKey": t.boolean().optional(),
            "deprecatedContactContainerId": t.string().optional(),
            "container": t.string().optional(),
            "crossDeviceAllowed": t.boolean().optional(),
            "defaultAclChoice": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"])
    types["GeostoreInternalSegmentProtoIn"] = t.struct(
        {
            "travelAllowance": t.array(
                t.proxy(renames["GeostoreRestrictionProtoIn"])
            ).optional(),
            "disallowedConnections": t.array(
                t.proxy(
                    renames["GeostoreInternalSegmentProtoLaneConnectionReferenceIn"]
                )
            ).optional(),
            "disallowedPrimaryConnection": t.array(
                t.proxy(
                    renames["GeostoreInternalSegmentProtoLaneConnectionReferenceIn"]
                )
            ).optional(),
        }
    ).named(renames["GeostoreInternalSegmentProtoIn"])
    types["GeostoreInternalSegmentProtoOut"] = t.struct(
        {
            "travelAllowance": t.array(
                t.proxy(renames["GeostoreRestrictionProtoOut"])
            ).optional(),
            "disallowedConnections": t.array(
                t.proxy(
                    renames["GeostoreInternalSegmentProtoLaneConnectionReferenceOut"]
                )
            ).optional(),
            "disallowedPrimaryConnection": t.array(
                t.proxy(
                    renames["GeostoreInternalSegmentProtoLaneConnectionReferenceOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInternalSegmentProtoOut"])
    types["GoogleCloudContentwarehouseV1FileTypeFilterIn"] = t.struct(
        {"fileType": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1FileTypeFilterIn"])
    types["GoogleCloudContentwarehouseV1FileTypeFilterOut"] = t.struct(
        {
            "fileType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FileTypeFilterOut"])
    types["ChatBotPlatformFireballIdIn"] = t.struct(
        {
            "id": t.proxy(
                renames["GoogleInternalCommunicationsInstantmessagingV1IdIn"]
            ).optional()
        }
    ).named(renames["ChatBotPlatformFireballIdIn"])
    types["ChatBotPlatformFireballIdOut"] = t.struct(
        {
            "id": t.proxy(
                renames["GoogleInternalCommunicationsInstantmessagingV1IdOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ChatBotPlatformFireballIdOut"])
    types["GoogleAssistantAccessoryV1AudioOutConfigIn"] = t.struct(
        {
            "audioRoutingMode": t.string().optional(),
            "encoding": t.string().optional(),
            "audioMode": t.string().optional(),
            "preferredBitrateBps": t.integer().optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1AudioOutConfigIn"])
    types["GoogleAssistantAccessoryV1AudioOutConfigOut"] = t.struct(
        {
            "audioRoutingMode": t.string().optional(),
            "encoding": t.string().optional(),
            "audioMode": t.string().optional(),
            "preferredBitrateBps": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1AudioOutConfigOut"])
    types["VideoContentSearchOnScreenTextClusterFeatureIn"] = t.struct(
        {
            "maximumDurationRatio": t.number().optional(),
            "averageOfAverageTextHeightRatio": t.number().optional(),
            "countingNumberRatio": t.number().optional(),
            "averageHorizontalPosition": t.number(),
            "logOcrTextLengthStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "clusterRatio": t.number().optional(),
            "medianClusteringDistance": t.number().optional(),
            "frameSizeRatio": t.number().optional(),
            "logTextHeightRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "medianDurationRatio": t.number(),
            "logp1000DurationMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "maxVideoDurationRatioBetweenAnchors": t.number().optional(),
            "textHeightRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "averageDurationRatio": t.number(),
            "durationMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "ocrAsrFeature": t.proxy(
                renames["VideoContentSearchOcrAsrSetFeatureIn"]
            ).optional(),
            "medianOfAverageTextHeightRatio": t.number().optional(),
            "ocrTextLengthStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "stddevDurationRatio": t.number(),
            "clusterSize": t.integer().optional(),
            "averageConfidence": t.number().optional(),
            "averageVerticalPosition": t.number().optional(),
            "averageOcrTextLength": t.number().optional(),
        }
    ).named(renames["VideoContentSearchOnScreenTextClusterFeatureIn"])
    types["VideoContentSearchOnScreenTextClusterFeatureOut"] = t.struct(
        {
            "maximumDurationRatio": t.number().optional(),
            "averageOfAverageTextHeightRatio": t.number().optional(),
            "countingNumberRatio": t.number().optional(),
            "averageHorizontalPosition": t.number(),
            "logOcrTextLengthStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "clusterRatio": t.number().optional(),
            "medianClusteringDistance": t.number().optional(),
            "frameSizeRatio": t.number().optional(),
            "logTextHeightRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "medianDurationRatio": t.number(),
            "logp1000DurationMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "maxVideoDurationRatioBetweenAnchors": t.number().optional(),
            "textHeightRatioStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "averageDurationRatio": t.number(),
            "durationMsStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "ocrAsrFeature": t.proxy(
                renames["VideoContentSearchOcrAsrSetFeatureOut"]
            ).optional(),
            "medianOfAverageTextHeightRatio": t.number().optional(),
            "ocrTextLengthStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "stddevDurationRatio": t.number(),
            "clusterSize": t.integer().optional(),
            "averageConfidence": t.number().optional(),
            "averageVerticalPosition": t.number().optional(),
            "averageOcrTextLength": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOnScreenTextClusterFeatureOut"])
    types["ImageRepositoryFramePerdocIn"] = t.struct(
        {
            "timestampMsec": t.integer().optional(),
            "frameIdentifier": t.proxy(renames["ImageRepositoryFrameIdentifierIn"]),
            "perdoc": t.proxy(renames["ImageDataIn"]),
        }
    ).named(renames["ImageRepositoryFramePerdocIn"])
    types["ImageRepositoryFramePerdocOut"] = t.struct(
        {
            "timestampMsec": t.integer().optional(),
            "frameIdentifier": t.proxy(renames["ImageRepositoryFrameIdentifierOut"]),
            "perdoc": t.proxy(renames["ImageDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryFramePerdocOut"])
    types["SocialGraphApiProtoPronounDataIn"] = t.struct(
        {"pronounEntry": t.array(t.proxy(renames["SocialGraphApiProtoPronounEntryIn"]))}
    ).named(renames["SocialGraphApiProtoPronounDataIn"])
    types["SocialGraphApiProtoPronounDataOut"] = t.struct(
        {
            "pronounEntry": t.array(
                t.proxy(renames["SocialGraphApiProtoPronounEntryOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPronounDataOut"])
    types["GoodocSemanticLabelContentLinkInVolumeTargetIn"] = t.struct(
        {
            "LogicalEntity": t.proxy(renames["GoodocLogicalEntityIn"]).optional(),
            "Confidence": t.number(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkInVolumeTargetIn"])
    types["GoodocSemanticLabelContentLinkInVolumeTargetOut"] = t.struct(
        {
            "LogicalEntity": t.proxy(renames["GoodocLogicalEntityOut"]).optional(),
            "Confidence": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkInVolumeTargetOut"])
    types["GeostoreGradeLevelProtoIn"] = t.struct(
        {"index": t.integer().optional(), "level": t.integer().optional()}
    ).named(renames["GeostoreGradeLevelProtoIn"])
    types["GeostoreGradeLevelProtoOut"] = t.struct(
        {
            "index": t.integer().optional(),
            "level": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreGradeLevelProtoOut"])
    types[
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataIn"
    ] = t.struct(
        {
            "familyStatus": t.string().optional(),
            "hideType": t.string().optional(),
            "hiddenKeys": t.array(
                t.proxy(renames["SocialDiscoveryExternalEntityKeyIn"])
            ).optional(),
            "birthdayStatus": t.string().optional(),
        }
    ).named(
        renames["SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataIn"]
    )
    types[
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataOut"
    ] = t.struct(
        {
            "familyStatus": t.string().optional(),
            "hideType": t.string().optional(),
            "hiddenKeys": t.array(
                t.proxy(renames["SocialDiscoveryExternalEntityKeyOut"])
            ).optional(),
            "birthdayStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataOut"
        ]
    )
    types["GeostoreFeatureMetadataProtoIn"] = t.struct(
        {
            "bulkUpdatable": t.string().optional(),
            "forwardings": t.proxy(
                renames["GeostoreFeatureIdForwardingsProtoIn"]
            ).optional(),
            "fieldMetadata": t.proxy(
                renames["GeostoreFeatureFieldMetadataProtoIn"]
            ).optional(),
            "history": t.proxy(
                renames["GeostoreFeatureHistoryMetadataProtoIn"]
            ).optional(),
            "coreVersionToken": t.string().optional(),
            "versionToken": t.string().optional(),
            "featureReplacementInfo": t.proxy(
                renames["GeostoreFeatureReplacementInfoProtoIn"]
            ).optional(),
        }
    ).named(renames["GeostoreFeatureMetadataProtoIn"])
    types["GeostoreFeatureMetadataProtoOut"] = t.struct(
        {
            "bulkUpdatable": t.string().optional(),
            "forwardings": t.proxy(
                renames["GeostoreFeatureIdForwardingsProtoOut"]
            ).optional(),
            "fieldMetadata": t.proxy(
                renames["GeostoreFeatureFieldMetadataProtoOut"]
            ).optional(),
            "history": t.proxy(
                renames["GeostoreFeatureHistoryMetadataProtoOut"]
            ).optional(),
            "coreVersionToken": t.string().optional(),
            "versionToken": t.string().optional(),
            "featureReplacementInfo": t.proxy(
                renames["GeostoreFeatureReplacementInfoProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureMetadataProtoOut"])
    types["KnowledgeGraphQualifierSetIn"] = t.struct(
        {"qualifiers": t.array(t.proxy(renames["KnowledgeGraphQualifierIn"]))}
    ).named(renames["KnowledgeGraphQualifierSetIn"])
    types["KnowledgeGraphQualifierSetOut"] = t.struct(
        {
            "qualifiers": t.array(t.proxy(renames["KnowledgeGraphQualifierOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphQualifierSetOut"])
    types["RepositoryWebrefAnnotationStatsPerTypeIn"] = t.struct(
        {
            "tokenType": t.string().optional(),
            "avgOpenWorldCap": t.number(),
            "avgOpenWorld": t.number().optional(),
            "avgOpenWorldUncap": t.number(),
            "numRangesWithCandidatesUncap": t.string(),
            "numRangesWithCandidates": t.string().optional(),
            "numRangesWithCandidatesCap": t.string(),
        }
    ).named(renames["RepositoryWebrefAnnotationStatsPerTypeIn"])
    types["RepositoryWebrefAnnotationStatsPerTypeOut"] = t.struct(
        {
            "tokenType": t.string().optional(),
            "avgOpenWorldCap": t.number(),
            "avgOpenWorld": t.number().optional(),
            "avgOpenWorldUncap": t.number(),
            "numRangesWithCandidatesUncap": t.string(),
            "numRangesWithCandidates": t.string().optional(),
            "numRangesWithCandidatesCap": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotationStatsPerTypeOut"])
    types["ResearchScienceSearchScholarlyArticleIn"] = t.struct(
        {
            "figureOrTableOcrText": t.string().optional(),
            "landingPageUrl": t.string().optional(),
            "figureOrTableImage": t.string().optional(),
            "citation": t.proxy(renames["ScienceCitationIn"]).optional(),
            "pdfDownloadUrl": t.string().optional(),
            "pageNumber": t.integer().optional(),
        }
    ).named(renames["ResearchScienceSearchScholarlyArticleIn"])
    types["ResearchScienceSearchScholarlyArticleOut"] = t.struct(
        {
            "figureOrTableOcrText": t.string().optional(),
            "landingPageUrl": t.string().optional(),
            "figureOrTableImage": t.string().optional(),
            "citation": t.proxy(renames["ScienceCitationOut"]).optional(),
            "pdfDownloadUrl": t.string().optional(),
            "pageNumber": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchScholarlyArticleOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoIn"] = t.struct(
        {
            "italic": t.boolean().optional(),
            "strikeout": t.boolean().optional(),
            "bold": t.boolean().optional(),
            "fontType": t.string().optional(),
            "smallcaps": t.boolean().optional(),
            "fontWeight": t.integer().optional(),
            "textColor": t.proxy(renames["GoogleTypeColorIn"]).optional(),
            "letterSpacing": t.number().optional(),
            "backgroundColor": t.proxy(renames["GoogleTypeColorIn"]).optional(),
            "pixelFontSize": t.number().optional(),
            "subscript": t.boolean().optional(),
            "fontSize": t.integer().optional(),
            "superscript": t.boolean().optional(),
            "underlined": t.boolean().optional(),
            "handwritten": t.boolean().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoOut"] = t.struct(
        {
            "italic": t.boolean().optional(),
            "strikeout": t.boolean().optional(),
            "bold": t.boolean().optional(),
            "fontType": t.string().optional(),
            "smallcaps": t.boolean().optional(),
            "fontWeight": t.integer().optional(),
            "textColor": t.proxy(renames["GoogleTypeColorOut"]).optional(),
            "letterSpacing": t.number().optional(),
            "backgroundColor": t.proxy(renames["GoogleTypeColorOut"]).optional(),
            "pixelFontSize": t.number().optional(),
            "subscript": t.boolean().optional(),
            "fontSize": t.integer().optional(),
            "superscript": t.boolean().optional(),
            "underlined": t.boolean().optional(),
            "handwritten": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoOut"])
    types["LocalWWWInfoPhoneIn"] = t.struct(
        {
            "phoneNumber": t.proxy(renames["TelephoneNumberIn"]),
            "phoneFprint": t.string(),
        }
    ).named(renames["LocalWWWInfoPhoneIn"])
    types["LocalWWWInfoPhoneOut"] = t.struct(
        {
            "phoneNumber": t.proxy(renames["TelephoneNumberOut"]),
            "phoneFprint": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoPhoneOut"])
    types["GoogleRpcStatusIn"] = t.struct(
        {
            "code": t.integer().optional(),
            "details": t.array(t.struct({"_": t.string().optional()})).optional(),
            "message": t.string().optional(),
        }
    ).named(renames["GoogleRpcStatusIn"])
    types["GoogleRpcStatusOut"] = t.struct(
        {
            "code": t.integer().optional(),
            "details": t.array(t.struct({"_": t.string().optional()})).optional(),
            "message": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleRpcStatusOut"])
    types["GoogleCloudContentwarehouseV1DateTimeArrayIn"] = t.struct(
        {"values": t.array(t.proxy(renames["GoogleTypeDateTimeIn"])).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DateTimeArrayIn"])
    types["GoogleCloudContentwarehouseV1DateTimeArrayOut"] = t.struct(
        {
            "values": t.array(t.proxy(renames["GoogleTypeDateTimeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DateTimeArrayOut"])
    types["NlpSemanticParsingDatetimeTimeZoneIn"] = t.struct(
        {"timezone": t.string()}
    ).named(renames["NlpSemanticParsingDatetimeTimeZoneIn"])
    types["NlpSemanticParsingDatetimeTimeZoneOut"] = t.struct(
        {"timezone": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["NlpSemanticParsingDatetimeTimeZoneOut"])
    types["ImageMustangShoppingOfferIn"] = t.struct(
        {"inferredImageTypes": t.array(t.string()), "ipsOfferId": t.string()}
    ).named(renames["ImageMustangShoppingOfferIn"])
    types["ImageMustangShoppingOfferOut"] = t.struct(
        {
            "inferredImageTypes": t.array(t.string()),
            "ipsOfferId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageMustangShoppingOfferOut"])
    types["TrawlerCrawlTimesIn"] = t.struct(
        {
            "OriginalCrawlTimeMs": t.string().optional(),
            "NotChangedTimeMs": t.string().optional(),
            "ReuseTimeMs": t.string().optional(),
        }
    ).named(renames["TrawlerCrawlTimesIn"])
    types["TrawlerCrawlTimesOut"] = t.struct(
        {
            "OriginalCrawlTimeMs": t.string().optional(),
            "NotChangedTimeMs": t.string().optional(),
            "ReuseTimeMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerCrawlTimesOut"])
    types["ResearchScienceSearchCatalogIn"] = t.struct(
        {
            "url": t.string().optional(),
            "name": t.string().optional(),
            "mid": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["ResearchScienceSearchCatalogIn"])
    types["ResearchScienceSearchCatalogOut"] = t.struct(
        {
            "url": t.string().optional(),
            "name": t.string().optional(),
            "mid": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchCatalogOut"])
    types["NlpMeaningMeaningRemodelingsIn"] = t.struct(
        {"remodeling": t.array(t.proxy(renames["NlpMeaningMeaningRemodelingIn"]))}
    ).named(renames["NlpMeaningMeaningRemodelingsIn"])
    types["NlpMeaningMeaningRemodelingsOut"] = t.struct(
        {
            "remodeling": t.array(t.proxy(renames["NlpMeaningMeaningRemodelingOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpMeaningMeaningRemodelingsOut"])
    types["GeostorePedestrianCrossingProtoIn"] = t.struct(
        {
            "angleDegrees": t.number().optional(),
            "crossingType": t.string().optional(),
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoIn"])
            ).optional(),
            "offset": t.number().optional(),
            "crossAnywhere": t.boolean().optional(),
            "width": t.number().optional(),
        }
    ).named(renames["GeostorePedestrianCrossingProtoIn"])
    types["GeostorePedestrianCrossingProtoOut"] = t.struct(
        {
            "angleDegrees": t.number().optional(),
            "crossingType": t.string().optional(),
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoOut"])
            ).optional(),
            "offset": t.number().optional(),
            "crossAnywhere": t.boolean().optional(),
            "width": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePedestrianCrossingProtoOut"])
    types["AssistantDevicesPlatformProtoSupportedDeviceOpsIn"] = t.struct(
        {
            "callCall": t.proxy(
                renames["AssistantDevicesPlatformProtoCallCallCapabilityIn"]
            ).optional(),
            "mediaResume": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaResumeCapabilityIn"]
            ),
            "deviceModifySetting": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityIn"]
            ).optional(),
            "providerFulfill": t.proxy(
                renames["AssistantDevicesPlatformProtoProviderFulfillCapabilityIn"]
            ).optional(),
            "mediaPrevious": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPreviousCapabilityIn"]
            ),
            "coreDismissAssistant": t.proxy(
                renames["AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityIn"]
            ).optional(),
            "clientReconnect": t.proxy(
                renames["AssistantDevicesPlatformProtoClientReconnectCapabilityIn"]
            ).optional(),
            "providerOpen": t.proxy(
                renames["AssistantDevicesPlatformProtoProviderOpenCapabilityIn"]
            ).optional(),
            "mediaNext": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaNextCapabilityIn"]
            ),
            "mediaStop": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaStopCapabilityIn"]
            ),
            "sendChatMessage": t.proxy(
                renames["AssistantDevicesPlatformProtoSendChatMessageCapabilityIn"]
            ).optional(),
            "mediaPlayMedia": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityIn"]
            ),
            "mediaPause": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPauseCapabilityIn"]
            ),
            "deviceTakePhoto": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityIn"]
            ).optional(),
            "mediaShowControls": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaShowControlsCapabilityIn"]
            ),
        }
    ).named(renames["AssistantDevicesPlatformProtoSupportedDeviceOpsIn"])
    types["AssistantDevicesPlatformProtoSupportedDeviceOpsOut"] = t.struct(
        {
            "callCall": t.proxy(
                renames["AssistantDevicesPlatformProtoCallCallCapabilityOut"]
            ).optional(),
            "mediaResume": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaResumeCapabilityOut"]
            ),
            "deviceModifySetting": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityOut"]
            ).optional(),
            "providerFulfill": t.proxy(
                renames["AssistantDevicesPlatformProtoProviderFulfillCapabilityOut"]
            ).optional(),
            "mediaPrevious": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPreviousCapabilityOut"]
            ),
            "coreDismissAssistant": t.proxy(
                renames[
                    "AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityOut"
                ]
            ).optional(),
            "clientReconnect": t.proxy(
                renames["AssistantDevicesPlatformProtoClientReconnectCapabilityOut"]
            ).optional(),
            "providerOpen": t.proxy(
                renames["AssistantDevicesPlatformProtoProviderOpenCapabilityOut"]
            ).optional(),
            "mediaNext": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaNextCapabilityOut"]
            ),
            "mediaStop": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaStopCapabilityOut"]
            ),
            "sendChatMessage": t.proxy(
                renames["AssistantDevicesPlatformProtoSendChatMessageCapabilityOut"]
            ).optional(),
            "mediaPlayMedia": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityOut"]
            ),
            "mediaPause": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaPauseCapabilityOut"]
            ),
            "deviceTakePhoto": t.proxy(
                renames["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityOut"]
            ).optional(),
            "mediaShowControls": t.proxy(
                renames["AssistantDevicesPlatformProtoMediaShowControlsCapabilityOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoSupportedDeviceOpsOut"])
    types["HtmlrenderWebkitHeadlessProtoBoxIn"] = t.struct(
        {
            "x": t.integer().optional(),
            "y": t.integer().optional(),
            "height": t.integer(),
            "width": t.integer(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoBoxIn"])
    types["HtmlrenderWebkitHeadlessProtoBoxOut"] = t.struct(
        {
            "x": t.integer().optional(),
            "y": t.integer().optional(),
            "height": t.integer(),
            "width": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoBoxOut"])
    types["FatcatCompactTaxonomicClassificationCategoryIn"] = t.struct(
        {"id": t.integer().optional(), "discreteWeight": t.integer().optional()}
    ).named(renames["FatcatCompactTaxonomicClassificationCategoryIn"])
    types["FatcatCompactTaxonomicClassificationCategoryOut"] = t.struct(
        {
            "id": t.integer().optional(),
            "discreteWeight": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactTaxonomicClassificationCategoryOut"])
    types["HtmlrenderWebkitHeadlessProtoInitialLoadEventIn"] = t.struct(
        {"url": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoInitialLoadEventIn"])
    types["HtmlrenderWebkitHeadlessProtoInitialLoadEventOut"] = t.struct(
        {"url": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoInitialLoadEventOut"])
    types["GeostoreAttributeProtoIn"] = t.struct(
        {
            "protoValue": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "valueType": t.string(),
            "stringValue": t.string().optional(),
            "canonicalAttributeId": t.proxy(
                renames["GeostoreAttributeIdProtoIn"]
            ).optional(),
            "valueDisplay": t.array(
                t.proxy(renames["GeostoreAttributeValueDisplayProtoIn"])
            ).optional(),
            "booleanValue": t.boolean(),
            "uint32Value": t.integer(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "doubleValue": t.number(),
            "floatValue": t.number(),
            "enumIdValue": t.string().optional(),
            "integerValue": t.integer(),
            "valueSpaceId": t.proxy(renames["GeostoreAttributeIdProtoIn"]),
            "applicationData": t.proxy(renames["Proto2BridgeMessageSetIn"]),
            "int64Value": t.string(),
            "itemClassId": t.proxy(renames["GeostoreAttributeIdProtoIn"]),
            "attributeDisplay": t.array(
                t.proxy(renames["GeostoreAttributeValueDisplayProtoIn"])
            ),
        }
    ).named(renames["GeostoreAttributeProtoIn"])
    types["GeostoreAttributeProtoOut"] = t.struct(
        {
            "protoValue": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "valueType": t.string(),
            "stringValue": t.string().optional(),
            "canonicalAttributeId": t.proxy(
                renames["GeostoreAttributeIdProtoOut"]
            ).optional(),
            "valueDisplay": t.array(
                t.proxy(renames["GeostoreAttributeValueDisplayProtoOut"])
            ).optional(),
            "booleanValue": t.boolean(),
            "uint32Value": t.integer(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "doubleValue": t.number(),
            "floatValue": t.number(),
            "enumIdValue": t.string().optional(),
            "integerValue": t.integer(),
            "valueSpaceId": t.proxy(renames["GeostoreAttributeIdProtoOut"]),
            "applicationData": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "int64Value": t.string(),
            "itemClassId": t.proxy(renames["GeostoreAttributeIdProtoOut"]),
            "attributeDisplay": t.array(
                t.proxy(renames["GeostoreAttributeValueDisplayProtoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAttributeProtoOut"])
    types["KnowledgeAnswersIntentQueryRelatednessSignalsIn"] = t.struct(
        {"queryPopularity": t.number(), "youtubeViews": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryRelatednessSignalsIn"])
    types["KnowledgeAnswersIntentQueryRelatednessSignalsOut"] = t.struct(
        {
            "queryPopularity": t.number(),
            "youtubeViews": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryRelatednessSignalsOut"])
    types[
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberIn"
    ] = t.struct(
        {
            "annotationSource": t.string(),
            "languageCode": t.array(t.string()),
            "url": t.string(),
        }
    ).named(
        renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberIn"]
    )
    types[
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberOut"
    ] = t.struct(
        {
            "annotationSource": t.string(),
            "languageCode": t.array(t.string()),
            "url": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberOut"
        ]
    )
    types["AssistantApiCoreTypesAndroidAppInfoActivityInfoIn"] = t.struct(
        {
            "activeLaunchableActivities": t.array(
                t.proxy(
                    renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityIn"]
                )
            ).optional()
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoIn"])
    types["AssistantApiCoreTypesAndroidAppInfoActivityInfoOut"] = t.struct(
        {
            "activeLaunchableActivities": t.array(
                t.proxy(
                    renames[
                        "AssistantApiCoreTypesAndroidAppInfoActivityInfoActivityOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaOut"
        ]
    )
    types["ResearchScamV3RestrictIn"] = t.struct(
        {
            "numericNamespaces": t.array(
                t.proxy(renames["ResearchScamNumericRestrictNamespaceIn"])
            ).optional(),
            "namespaces": t.array(
                t.proxy(renames["ResearchScamTokenNamespaceIn"])
            ).optional(),
        }
    ).named(renames["ResearchScamV3RestrictIn"])
    types["ResearchScamV3RestrictOut"] = t.struct(
        {
            "numericNamespaces": t.array(
                t.proxy(renames["ResearchScamNumericRestrictNamespaceOut"])
            ).optional(),
            "namespaces": t.array(
                t.proxy(renames["ResearchScamTokenNamespaceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamV3RestrictOut"])
    types["AssistantApiCoreTypesCalendarEventWrapperIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantApiCoreTypesCalendarEventWrapperIn"])
    types["AssistantApiCoreTypesCalendarEventWrapperOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiCoreTypesCalendarEventWrapperOut"])
    types["GoogleAssistantEmbeddedV1TimerIn"] = t.struct(
        {
            "status": t.string().optional(),
            "remainingDuration": t.string().optional(),
            "expireTime": t.string().optional(),
            "originalDuration": t.string().optional(),
            "label": t.string().optional(),
            "timerId": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1TimerIn"])
    types["GoogleAssistantEmbeddedV1TimerOut"] = t.struct(
        {
            "status": t.string().optional(),
            "remainingDuration": t.string().optional(),
            "expireTime": t.string().optional(),
            "originalDuration": t.string().optional(),
            "label": t.string().optional(),
            "timerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1TimerOut"])
    types["ShoppingWebentityShoppingAnnotationProductRatingIn"] = t.struct(
        {
            "value": t.number().optional(),
            "count": t.string().optional(),
            "valueMillis": t.string().optional(),
            "minValueMillis": t.string().optional(),
            "maxValueMillis": t.string(),
            "source": t.string(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationProductRatingIn"])
    types["ShoppingWebentityShoppingAnnotationProductRatingOut"] = t.struct(
        {
            "value": t.number().optional(),
            "count": t.string().optional(),
            "valueMillis": t.string().optional(),
            "minValueMillis": t.string().optional(),
            "maxValueMillis": t.string(),
            "source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationProductRatingOut"])
    types["GoogleCloudContentwarehouseV1GetDocumentRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1GetDocumentRequestIn"])
    types["GoogleCloudContentwarehouseV1GetDocumentRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1GetDocumentRequestOut"])
    types["KnowledgeAnswersMarkerStateOfAffairsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersMarkerStateOfAffairsIn"])
    types["KnowledgeAnswersMarkerStateOfAffairsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersMarkerStateOfAffairsOut"])
    types["BlobstoreBlobRefIn"] = t.struct(
        {
            "Size": t.string().optional(),
            "Options": t.string(),
            "RefID": t.string(),
            "SourceV2BlobID": t.string().optional(),
            "V2ReadBlobToken": t.string().optional(),
            "BlobID": t.string(),
            "ShardBin": t.integer(),
        }
    ).named(renames["BlobstoreBlobRefIn"])
    types["BlobstoreBlobRefOut"] = t.struct(
        {
            "Size": t.string().optional(),
            "Options": t.string(),
            "RefID": t.string(),
            "SourceV2BlobID": t.string().optional(),
            "V2ReadBlobToken": t.string().optional(),
            "BlobID": t.string(),
            "ShardBin": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlobstoreBlobRefOut"])
    types["AssistantGroundingRankerLaaFeaturesIn"] = t.struct(
        {
            "contact": t.proxy(renames["AssistantGroundingRankerLaaFeaturesContactIn"]),
            "bindingSet": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesBindingSetIn"]
            ),
            "communicationEndpoint": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesCommunicationEndpointIn"]
            ),
            "features": t.array(
                t.proxy(renames["AssistantGroundingRankerLaaFeatureIn"])
            ),
            "provider": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesProviderIn"]
            ),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesIn"])
    types["AssistantGroundingRankerLaaFeaturesOut"] = t.struct(
        {
            "contact": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesContactOut"]
            ),
            "bindingSet": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesBindingSetOut"]
            ),
            "communicationEndpoint": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesCommunicationEndpointOut"]
            ),
            "features": t.array(
                t.proxy(renames["AssistantGroundingRankerLaaFeatureOut"])
            ),
            "provider": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesProviderOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesOut"])
    types["NlpSemanticParsingLocalCompoundLocationIn"] = t.struct(
        {
            "location2": t.proxy(
                renames["NlpSemanticParsingLocalLocationIn"]
            ).optional(),
            "location1": t.proxy(renames["NlpSemanticParsingLocalLocationIn"]),
            "joiner": t.proxy(renames["NlpSemanticParsingLocalJoinerIn"]),
        }
    ).named(renames["NlpSemanticParsingLocalCompoundLocationIn"])
    types["NlpSemanticParsingLocalCompoundLocationOut"] = t.struct(
        {
            "location2": t.proxy(
                renames["NlpSemanticParsingLocalLocationOut"]
            ).optional(),
            "location1": t.proxy(renames["NlpSemanticParsingLocalLocationOut"]),
            "joiner": t.proxy(renames["NlpSemanticParsingLocalJoinerOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalCompoundLocationOut"])
    types["VideoFileMasteringDisplayMetadataIn"] = t.struct(
        {
            "red": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"]
            ).optional(),
            "maxLuminance": t.number().optional(),
            "blue": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"]
            ).optional(),
            "green": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"]
            ).optional(),
            "minLuminance": t.number().optional(),
            "whitePoint": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"]
            ).optional(),
        }
    ).named(renames["VideoFileMasteringDisplayMetadataIn"])
    types["VideoFileMasteringDisplayMetadataOut"] = t.struct(
        {
            "red": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"]
            ).optional(),
            "maxLuminance": t.number().optional(),
            "blue": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"]
            ).optional(),
            "green": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"]
            ).optional(),
            "minLuminance": t.number().optional(),
            "whitePoint": t.proxy(
                renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileMasteringDisplayMetadataOut"])
    types["DrishtiVesperMovingThumbnailScoreComponentsIn"] = t.struct(
        {
            "matchingScore": t.number(),
            "titleMatchingScore": t.number(),
            "audienceRewindRatioScore": t.number(),
            "iconicFaceScore": t.number(),
            "videoThumbQualityScore": t.number(),
            "motionScore": t.number(),
        }
    ).named(renames["DrishtiVesperMovingThumbnailScoreComponentsIn"])
    types["DrishtiVesperMovingThumbnailScoreComponentsOut"] = t.struct(
        {
            "matchingScore": t.number(),
            "titleMatchingScore": t.number(),
            "audienceRewindRatioScore": t.number(),
            "iconicFaceScore": t.number(),
            "videoThumbQualityScore": t.number(),
            "motionScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperMovingThumbnailScoreComponentsOut"])
    types["SnippetExtraInfoSnippetsBrainModelInfoIn"] = t.struct(
        {
            "snippetsbrainTokenizerType": t.string(),
            "snippetsbrainModelName": t.string().optional(),
            "snippetsbrainModelPartition": t.string(),
            "ng3ModelName": t.string(),
        }
    ).named(renames["SnippetExtraInfoSnippetsBrainModelInfoIn"])
    types["SnippetExtraInfoSnippetsBrainModelInfoOut"] = t.struct(
        {
            "snippetsbrainTokenizerType": t.string(),
            "snippetsbrainModelName": t.string().optional(),
            "snippetsbrainModelPartition": t.string(),
            "ng3ModelName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetsBrainModelInfoOut"])
    types["ImageRepositoryApiXtagListIn"] = t.struct(
        {"xtags": t.array(t.proxy(renames["ImageRepositoryApiXtagIn"]))}
    ).named(renames["ImageRepositoryApiXtagListIn"])
    types["ImageRepositoryApiXtagListOut"] = t.struct(
        {
            "xtags": t.array(t.proxy(renames["ImageRepositoryApiXtagOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryApiXtagListOut"])
    types["SentenceBoundaryAnnotationsInstanceIn"] = t.struct(
        {
            "text": t.string().optional(),
            "contextBegin": t.integer().optional(),
            "context": t.string().optional(),
            "end": t.integer(),
            "begin": t.integer(),
            "cleanText": t.string().optional(),
            "contextEnd": t.integer(),
            "toIndex": t.boolean().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["SentenceBoundaryAnnotationsInstanceIn"])
    types["SentenceBoundaryAnnotationsInstanceOut"] = t.struct(
        {
            "text": t.string().optional(),
            "contextBegin": t.integer().optional(),
            "context": t.string().optional(),
            "end": t.integer(),
            "begin": t.integer(),
            "cleanText": t.string().optional(),
            "contextEnd": t.integer(),
            "toIndex": t.boolean().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SentenceBoundaryAnnotationsInstanceOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut"
        ]
    )
    types["AbuseiamVideoReviewDataIn"] = t.struct(
        {
            "videoId": t.string().optional(),
            "reviewer": t.proxy(renames["AbuseiamVideoReviewerIn"]).optional(),
            "referenceFragment": t.array(t.string()).optional(),
        }
    ).named(renames["AbuseiamVideoReviewDataIn"])
    types["AbuseiamVideoReviewDataOut"] = t.struct(
        {
            "videoId": t.string().optional(),
            "reviewer": t.proxy(renames["AbuseiamVideoReviewerOut"]).optional(),
            "referenceFragment": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamVideoReviewDataOut"])
    types["GoogleTypeTimeOfDayIn"] = t.struct(
        {
            "seconds": t.integer().optional(),
            "nanos": t.integer().optional(),
            "minutes": t.integer().optional(),
            "hours": t.integer().optional(),
        }
    ).named(renames["GoogleTypeTimeOfDayIn"])
    types["GoogleTypeTimeOfDayOut"] = t.struct(
        {
            "seconds": t.integer().optional(),
            "nanos": t.integer().optional(),
            "minutes": t.integer().optional(),
            "hours": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeTimeOfDayOut"])
    types["IndexingMobileInterstitialsProtoDesktopInterstitialsIn"] = t.struct(
        {
            "pipelineEpoch": t.string().optional(),
            "pipelinePattern": t.string().optional(),
            "urlTree": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlTreeIn"]
            ).optional(),
            "violatesDesktopInterstitialPolicy": t.boolean().optional(),
            "details": t.array(
                t.proxy(
                    renames[
                        "IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsIn"
                    ]
                )
            ),
        }
    ).named(renames["IndexingMobileInterstitialsProtoDesktopInterstitialsIn"])
    types["IndexingMobileInterstitialsProtoDesktopInterstitialsOut"] = t.struct(
        {
            "pipelineEpoch": t.string().optional(),
            "pipelinePattern": t.string().optional(),
            "urlTree": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlTreeOut"]
            ).optional(),
            "violatesDesktopInterstitialPolicy": t.boolean().optional(),
            "details": t.array(
                t.proxy(
                    renames[
                        "IndexingMobileInterstitialsProtoDesktopInterstitialsDetailsOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMobileInterstitialsProtoDesktopInterstitialsOut"])
    types["NlpSaftMentionIn"] = t.struct(
        {
            "role": t.string(),
            "type": t.string(),
            "resolution": t.proxy(renames["NlpSaftMentionResolutionIn"]).optional(),
            "nestingRelation": t.string(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "kind": t.string(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "confidence": t.number().optional(),
        }
    ).named(renames["NlpSaftMentionIn"])
    types["NlpSaftMentionOut"] = t.struct(
        {
            "role": t.string(),
            "type": t.string(),
            "resolution": t.proxy(renames["NlpSaftMentionResolutionOut"]).optional(),
            "nestingRelation": t.string(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "kind": t.string(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftMentionOut"])
    types["MediaIndexVideoFramesIn"] = t.struct(
        {"videoFrames": t.array(t.proxy(renames["MediaIndexVideoFrameIn"]))}
    ).named(renames["MediaIndexVideoFramesIn"])
    types["MediaIndexVideoFramesOut"] = t.struct(
        {
            "videoFrames": t.array(t.proxy(renames["MediaIndexVideoFrameOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexVideoFramesOut"])
    types["SnippetExtraInfoIn"] = t.struct(
        {
            "containUserQuotes": t.boolean().optional(),
            "snippetBrainSelectedCandidateIndex": t.integer().optional(),
            "containVulgarCandidates": t.boolean().optional(),
            "disableQueryFeatures": t.boolean().optional(),
            "snippetsbrainModelInfo": t.proxy(
                renames["SnippetExtraInfoSnippetsBrainModelInfoIn"]
            ).optional(),
            "candidateInfo": t.array(
                t.proxy(renames["SnippetExtraInfoSnippetCandidateInfoIn"])
            ).optional(),
        }
    ).named(renames["SnippetExtraInfoIn"])
    types["SnippetExtraInfoOut"] = t.struct(
        {
            "containUserQuotes": t.boolean().optional(),
            "snippetBrainSelectedCandidateIndex": t.integer().optional(),
            "containVulgarCandidates": t.boolean().optional(),
            "disableQueryFeatures": t.boolean().optional(),
            "snippetsbrainModelInfo": t.proxy(
                renames["SnippetExtraInfoSnippetsBrainModelInfoOut"]
            ).optional(),
            "candidateInfo": t.array(
                t.proxy(renames["SnippetExtraInfoSnippetCandidateInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetExtraInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodIn"] = t.struct(
        {
            "close": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn"]
            ),
            "open": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodOut"] = t.struct(
        {
            "close": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut"]
            ),
            "open": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriodOut"])
    types[
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationIn"
    ] = t.struct(
        {
            "endToken": t.string().optional(),
            "magnitude": t.number().optional(),
            "polarity": t.number().optional(),
            "score": t.number().optional(),
            "startToken": t.string().optional(),
        }
    ).named(
        renames[
            "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationIn"
        ]
    )
    types[
        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationOut"
    ] = t.struct(
        {
            "endToken": t.string().optional(),
            "magnitude": t.number().optional(),
            "polarity": t.number().optional(),
            "score": t.number().optional(),
            "startToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationOut"
        ]
    )
    types["LongStructuredSnippetIn"] = t.struct(
        {"entry": t.array(t.proxy(renames["LongStructuredSnippetEntryIn"]))}
    ).named(renames["LongStructuredSnippetIn"])
    types["LongStructuredSnippetOut"] = t.struct(
        {
            "entry": t.array(t.proxy(renames["LongStructuredSnippetEntryOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LongStructuredSnippetOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryIn"
    ] = t.struct(
        {
            "nameLastModified": t.string().optional(),
            "nameChangesRemaining": t.integer().optional(),
            "quotaEnforcementStatus": t.string(),
            "computedNameChangesRemaining": t.integer().optional(),
            "nicknameLastModified": t.string().optional(),
            "computedNicknameChangesRemaining": t.integer().optional(),
            "nicknameChangesRemaining": t.integer().optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryOut"
    ] = t.struct(
        {
            "nameLastModified": t.string().optional(),
            "nameChangesRemaining": t.integer().optional(),
            "quotaEnforcementStatus": t.string(),
            "computedNameChangesRemaining": t.integer().optional(),
            "nicknameLastModified": t.string().optional(),
            "computedNicknameChangesRemaining": t.integer().optional(),
            "nicknameChangesRemaining": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryOut"
        ]
    )
    types["KnowledgeAnswersOpaqueDeviceTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceTypeIn"])
    types["KnowledgeAnswersOpaqueDeviceTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceTypeOut"])
    types["QualitySherlockKnexAnnotationIn"] = t.struct(
        {"item": t.array(t.proxy(renames["QualitySherlockKnexAnnotationItemIn"]))}
    ).named(renames["QualitySherlockKnexAnnotationIn"])
    types["QualitySherlockKnexAnnotationOut"] = t.struct(
        {
            "item": t.array(t.proxy(renames["QualitySherlockKnexAnnotationItemOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySherlockKnexAnnotationOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn"] = t.struct(
        {
            "people": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ),
            "totalNumber": t.integer().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut"] = t.struct(
        {
            "people": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ),
            "totalNumber": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut"])
    types["RepositoryWebrefWebrefEntityIn"] = t.struct(
        {
            "id": t.proxy(renames["RepositoryWebrefWebrefEntityIdIn"]).optional(),
            "collections": t.proxy(
                renames["RepositoryWebrefWebrefEntityCollectionsIn"]
            ).optional(),
            "annotatedRelationship": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityRelationshipIn"])
            ).optional(),
            "entityJoin": t.proxy(renames["RepositoryWebrefEntityJoinIn"]).optional(),
            "annotations": t.proxy(
                renames["RepositoryWebrefEntityAnnotationsIn"]
            ).optional(),
            "mrf": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityIn"])
    types["RepositoryWebrefWebrefEntityOut"] = t.struct(
        {
            "id": t.proxy(renames["RepositoryWebrefWebrefEntityIdOut"]).optional(),
            "collections": t.proxy(
                renames["RepositoryWebrefWebrefEntityCollectionsOut"]
            ).optional(),
            "annotatedRelationship": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityRelationshipOut"])
            ).optional(),
            "entityJoin": t.proxy(renames["RepositoryWebrefEntityJoinOut"]).optional(),
            "annotations": t.proxy(
                renames["RepositoryWebrefEntityAnnotationsOut"]
            ).optional(),
            "mrf": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityOut"])
    types["QualityShoppingShoppingAttachmentPBlockImageInfoIn"] = t.struct(
        {"width": t.integer(), "height": t.integer()}
    ).named(renames["QualityShoppingShoppingAttachmentPBlockImageInfoIn"])
    types["QualityShoppingShoppingAttachmentPBlockImageInfoOut"] = t.struct(
        {
            "width": t.integer(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityShoppingShoppingAttachmentPBlockImageInfoOut"])
    types["AssistantVerticalsCommonContactMatchSignalIn"] = t.struct(
        {"matchScore": t.number().optional()}
    ).named(renames["AssistantVerticalsCommonContactMatchSignalIn"])
    types["AssistantVerticalsCommonContactMatchSignalOut"] = t.struct(
        {
            "matchScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsCommonContactMatchSignalOut"])
    types["AssistantDevicesPlatformProtoProviderOpenCapabilityIn"] = t.struct(
        {
            "clientOpProperty": t.proxy(
                renames["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyIn"]
            )
        }
    ).named(renames["AssistantDevicesPlatformProtoProviderOpenCapabilityIn"])
    types["AssistantDevicesPlatformProtoProviderOpenCapabilityOut"] = t.struct(
        {
            "clientOpProperty": t.proxy(
                renames["AssistantApiClientOpPropertiesProviderOpenClientOpPropertyOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoProviderOpenCapabilityOut"])
    types["NetFabricRpcVirtualNetworkIdIn"] = t.struct(
        {"id": t.integer().optional()}
    ).named(renames["NetFabricRpcVirtualNetworkIdIn"])
    types["NetFabricRpcVirtualNetworkIdOut"] = t.struct(
        {
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetFabricRpcVirtualNetworkIdOut"])
    types[
        "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoIn"
    ] = t.struct(
        {
            "annotatedSpanRoom": t.string().optional(),
            "annotatedSpanDevice": t.string().optional(),
            "annotatedSpanStructure": t.string().optional(),
            "processedMentionedSpan": t.string().optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoIn"]
    )
    types[
        "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoOut"
    ] = t.struct(
        {
            "annotatedSpanRoom": t.string().optional(),
            "annotatedSpanDevice": t.string().optional(),
            "annotatedSpanStructure": t.string().optional(),
            "processedMentionedSpan": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfoOut"
        ]
    )
    types["ImageSearchImageIndexingInfoIn"] = t.struct(
        {
            "rejectedNotIndexedImageLink": t.array(
                t.proxy(renames["ImageSearchUnindexedImageLinkIn"])
            ).optional(),
            "imageLinkSelectionInfo": t.array(
                t.proxy(renames["ImageSearchImageSelectionInfoIn"])
            ).optional(),
            "selectedNotIndexedImageLink": t.array(
                t.proxy(renames["ImageSearchUnindexedImageLinkIn"])
            ).optional(),
        }
    ).named(renames["ImageSearchImageIndexingInfoIn"])
    types["ImageSearchImageIndexingInfoOut"] = t.struct(
        {
            "rejectedNotIndexedImageLink": t.array(
                t.proxy(renames["ImageSearchUnindexedImageLinkOut"])
            ).optional(),
            "imageLinkSelectionInfo": t.array(
                t.proxy(renames["ImageSearchImageSelectionInfoOut"])
            ).optional(),
            "selectedNotIndexedImageLink": t.array(
                t.proxy(renames["ImageSearchUnindexedImageLinkOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSearchImageIndexingInfoOut"])
    types["RepositoryWebrefEntityDebugInfoIn"] = t.struct(
        {
            "url": t.string().optional(),
            "title": t.string().optional(),
            "language": t.string().optional(),
            "score": t.number().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefEntityDebugInfoIn"])
    types["RepositoryWebrefEntityDebugInfoOut"] = t.struct(
        {
            "url": t.string().optional(),
            "title": t.string().optional(),
            "language": t.string().optional(),
            "score": t.number().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityDebugInfoOut"])
    types["AppsDynamiteSharedOrganizationInfoCustomerInfoIn"] = t.struct(
        {"customerId": t.proxy(renames["AppsDynamiteCustomerIdIn"])}
    ).named(renames["AppsDynamiteSharedOrganizationInfoCustomerInfoIn"])
    types["AppsDynamiteSharedOrganizationInfoCustomerInfoOut"] = t.struct(
        {
            "customerId": t.proxy(renames["AppsDynamiteCustomerIdOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsDynamiteSharedOrganizationInfoCustomerInfoOut"])
    types["NlpSemanticParsingLocalQualityConstraintIn"] = t.struct(
        {
            "best": t.boolean(),
            "starType": t.string(),
            "highlyRated": t.boolean(),
            "stars": t.proxy(renames["NlpSemanticParsingLocalStarRatingsIn"]),
            "unspecified": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingLocalQualityConstraintIn"])
    types["NlpSemanticParsingLocalQualityConstraintOut"] = t.struct(
        {
            "best": t.boolean(),
            "starType": t.string(),
            "highlyRated": t.boolean(),
            "stars": t.proxy(renames["NlpSemanticParsingLocalStarRatingsOut"]),
            "unspecified": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalQualityConstraintOut"])
    types["YoutubeDiscoveryLegosLegosFormatRelationshipIn"] = t.struct(
        {"confidence": t.number().optional()}
    ).named(renames["YoutubeDiscoveryLegosLegosFormatRelationshipIn"])
    types["YoutubeDiscoveryLegosLegosFormatRelationshipOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosFormatRelationshipOut"])
    types["ImageContentFlowProtoProdIn"] = t.struct(
        {
            "starburst": t.array(
                t.proxy(renames["ImageContentStarburstVersionGroupIn"])
            ).optional()
        }
    ).named(renames["ImageContentFlowProtoProdIn"])
    types["ImageContentFlowProtoProdOut"] = t.struct(
        {
            "starburst": t.array(
                t.proxy(renames["ImageContentStarburstVersionGroupOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageContentFlowProtoProdOut"])
    types["HtmlrenderWebkitHeadlessProtoDOMStorageItemIn"] = t.struct(
        {"key": t.string(), "securityOrigin": t.string(), "value": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemIn"])
    types["HtmlrenderWebkitHeadlessProtoDOMStorageItemOut"] = t.struct(
        {
            "key": t.string(),
            "securityOrigin": t.string(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMStorageItemOut"])
    types["GDocumentBaseContentIn"] = t.struct(
        {
            "OriginalEncoding": t.integer().optional(),
            "Representation": t.string().optional(),
            "VisualType": t.integer().optional(),
            "encodedGeometryAnnotations": t.string().optional(),
            "crawledFileSize": t.integer().optional(),
            "AuthMethod": t.integer(),
            "ContentLength": t.integer().optional(),
            "Encoding": t.integer().optional(),
            "ContentType": t.integer().optional(),
            "Language": t.integer().optional(),
            "HasHttpHeader": t.boolean().optional(),
            "UncompressedLength": t.integer().optional(),
            "CrawlTime": t.string().optional(),
        }
    ).named(renames["GDocumentBaseContentIn"])
    types["GDocumentBaseContentOut"] = t.struct(
        {
            "OriginalEncoding": t.integer().optional(),
            "Representation": t.string().optional(),
            "VisualType": t.integer().optional(),
            "encodedGeometryAnnotations": t.string().optional(),
            "crawledFileSize": t.integer().optional(),
            "AuthMethod": t.integer(),
            "ContentLength": t.integer().optional(),
            "Encoding": t.integer().optional(),
            "ContentType": t.integer().optional(),
            "Language": t.integer().optional(),
            "HasHttpHeader": t.boolean().optional(),
            "UncompressedLength": t.integer().optional(),
            "CrawlTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GDocumentBaseContentOut"])
    types["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsIn"] = t.struct(
        {
            "screenDpi": t.number().optional(),
            "screenWidthPx": t.integer().optional(),
            "screenShape": t.string().optional(),
            "screenHeightPx": t.integer().optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsIn"])
    types["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsOut"] = t.struct(
        {
            "screenDpi": t.number().optional(),
            "screenWidthPx": t.integer().optional(),
            "screenShape": t.string().optional(),
            "screenHeightPx": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsOut"])
    types["LocalWWWInfoIn"] = t.struct(
        {
            "phone": t.array(t.proxy(renames["LocalWWWInfoPhoneIn"])),
            "docid": t.string(),
            "hours": t.array(t.proxy(renames["LocalWWWInfoOpeningHoursIn"])),
            "brickAndMortarStrength": t.number(),
            "isLargeChain": t.boolean().optional(),
            "cluster": t.array(t.proxy(renames["LocalWWWInfoClusterIn"])),
            "address": t.array(t.proxy(renames["LocalWWWInfoAddressIn"])),
            "siteSiblings": t.integer().optional(),
            "url": t.string().optional(),
            "wrapptorItem": t.array(t.proxy(renames["LocalWWWInfoWrapptorItemIn"])),
            "geotopicality": t.proxy(
                renames["RepositoryAnnotationsGeoTopicalityIn"]
            ).optional(),
            "isLargeLocalwwwinfo": t.boolean(),
        }
    ).named(renames["LocalWWWInfoIn"])
    types["LocalWWWInfoOut"] = t.struct(
        {
            "phone": t.array(t.proxy(renames["LocalWWWInfoPhoneOut"])),
            "docid": t.string(),
            "hours": t.array(t.proxy(renames["LocalWWWInfoOpeningHoursOut"])),
            "brickAndMortarStrength": t.number(),
            "isLargeChain": t.boolean().optional(),
            "cluster": t.array(t.proxy(renames["LocalWWWInfoClusterOut"])),
            "address": t.array(t.proxy(renames["LocalWWWInfoAddressOut"])),
            "siteSiblings": t.integer().optional(),
            "url": t.string().optional(),
            "wrapptorItem": t.array(t.proxy(renames["LocalWWWInfoWrapptorItemOut"])),
            "geotopicality": t.proxy(
                renames["RepositoryAnnotationsGeoTopicalityOut"]
            ).optional(),
            "isLargeLocalwwwinfo": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoOut"])
    types["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn"] = t.struct(
        {"targetType": t.string(), "devtoolsFrameId": t.string().optional()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn"])
    types["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut"] = t.struct(
        {
            "targetType": t.string(),
            "devtoolsFrameId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut"])
    types["KnowledgeAnswersPlexityRequirementIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "simplePlexity": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersPlexityRequirementIn"])
    types["KnowledgeAnswersPlexityRequirementOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "simplePlexity": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersPlexityRequirementOut"])
    types["NlpSemanticParsingDatetimeTargetToFetchIn"] = t.struct(
        {
            "quarter": t.string(),
            "reference": t.string(),
            "unit": t.string().optional(),
            "event": t.proxy(renames["NlpSemanticParsingDatetimeEventIn"]),
            "season": t.string(),
            "month": t.string(),
            "fuzzyRange": t.string(),
            "weekday": t.array(t.string()).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeTargetToFetchIn"])
    types["NlpSemanticParsingDatetimeTargetToFetchOut"] = t.struct(
        {
            "quarter": t.string(),
            "reference": t.string(),
            "unit": t.string().optional(),
            "event": t.proxy(renames["NlpSemanticParsingDatetimeEventOut"]),
            "season": t.string(),
            "month": t.string(),
            "fuzzyRange": t.string(),
            "weekday": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeTargetToFetchOut"])
    types["MapsQualitySpecialWordsProtoIn"] = t.struct(
        {
            "canonical": t.array(t.string()).optional(),
            "alternate": t.array(t.string()).optional(),
            "language": t.array(t.string()).optional(),
            "position": t.string(),
            "visibleTypeId": t.array(t.string()).optional(),
            "country": t.array(t.string()).optional(),
            "flags": t.proxy(renames["MapsQualitySpecialWordsFlagsIn"]).optional(),
        }
    ).named(renames["MapsQualitySpecialWordsProtoIn"])
    types["MapsQualitySpecialWordsProtoOut"] = t.struct(
        {
            "canonical": t.array(t.string()).optional(),
            "alternate": t.array(t.string()).optional(),
            "language": t.array(t.string()).optional(),
            "position": t.string(),
            "visibleTypeId": t.array(t.string()).optional(),
            "country": t.array(t.string()).optional(),
            "flags": t.proxy(renames["MapsQualitySpecialWordsFlagsOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MapsQualitySpecialWordsProtoOut"])
    types["VideoContentSearchVideoAnchorRatingScoreIn"] = t.struct(
        {
            "furballUrl": t.array(t.string()).optional(),
            "averageBookmarkUsefulness": t.number().optional(),
            "averageDescriptionQuality": t.number().optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorRatingScoreIn"])
    types["VideoContentSearchVideoAnchorRatingScoreOut"] = t.struct(
        {
            "furballUrl": t.array(t.string()).optional(),
            "averageBookmarkUsefulness": t.number().optional(),
            "averageDescriptionQuality": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorRatingScoreOut"])
    types["AppsPeopleActivityBackendDestinationStreamIn"] = t.struct(
        {"id": t.array(t.string()).optional(), "namespace": t.string()}
    ).named(renames["AppsPeopleActivityBackendDestinationStreamIn"])
    types["AppsPeopleActivityBackendDestinationStreamOut"] = t.struct(
        {
            "id": t.array(t.string()).optional(),
            "namespace": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleActivityBackendDestinationStreamOut"])
    types["QualityVidyaVideoLanguageVideoLanguageIn"] = t.struct(
        {"speechClass": t.string().optional(), "language": t.string().optional()}
    ).named(renames["QualityVidyaVideoLanguageVideoLanguageIn"])
    types["QualityVidyaVideoLanguageVideoLanguageOut"] = t.struct(
        {
            "speechClass": t.string().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityVidyaVideoLanguageVideoLanguageOut"])
    types["FocusBackendDeviceContactIdIn"] = t.struct(
        {
            "ContactId": t.string().optional(),
            "DeviceId": t.proxy(renames["FocusBackendDeviceIdIn"]).optional(),
        }
    ).named(renames["FocusBackendDeviceContactIdIn"])
    types["FocusBackendDeviceContactIdOut"] = t.struct(
        {
            "ContactId": t.string().optional(),
            "DeviceId": t.proxy(renames["FocusBackendDeviceIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendDeviceContactIdOut"])
    types["KnowledgeAnswersOpaqueMessageNotificationTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueMessageNotificationTypeIn"])
    types["KnowledgeAnswersOpaqueMessageNotificationTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueMessageNotificationTypeOut"])
    types["AppsPeopleOzExternalMergedpeopleapiGenderIn"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "addressMeAs": t.string().optional(),
            "type": t.string().optional(),
            "customType": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGenderIn"])
    types["AppsPeopleOzExternalMergedpeopleapiGenderOut"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "addressMeAs": t.string().optional(),
            "type": t.string().optional(),
            "customType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGenderOut"])
    types["LegalPersonIn"] = t.struct(
        {"LastName": t.string(), "Description": t.string(), "OtherNames": t.string()}
    ).named(renames["LegalPersonIn"])
    types["LegalPersonOut"] = t.struct(
        {
            "LastName": t.string(),
            "Description": t.string(),
            "OtherNames": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalPersonOut"])
    types["KnowledgeAnswersOpaqueCalendarEventWrapperTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarEventWrapperTypeIn"])
    types["KnowledgeAnswersOpaqueCalendarEventWrapperTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarEventWrapperTypeOut"])
    types["AssistantApiAppControlSupportIn"] = t.struct({"enabled": t.string()}).named(
        renames["AssistantApiAppControlSupportIn"]
    )
    types["AssistantApiAppControlSupportOut"] = t.struct(
        {"enabled": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiAppControlSupportOut"])
    types["ResearchScamQueryMetadataIn"] = t.struct(
        {
            "neighborSelectionOverride": t.proxy(
                renames["ResearchScamNeighborSelectionOverrideIn"]
            )
        }
    ).named(renames["ResearchScamQueryMetadataIn"])
    types["ResearchScamQueryMetadataOut"] = t.struct(
        {
            "neighborSelectionOverride": t.proxy(
                renames["ResearchScamNeighborSelectionOverrideOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamQueryMetadataOut"])
    types["GeostoreSchoolDistrictProtoIn"] = t.struct({"type": t.string()}).named(
        renames["GeostoreSchoolDistrictProtoIn"]
    )
    types["GeostoreSchoolDistrictProtoOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GeostoreSchoolDistrictProtoOut"])
    types["AssistantDevicesPlatformProtoMediaPreviousCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPreviousCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaPreviousCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPreviousCapabilityOut"])
    types["AssistantApiSupportedProtocolVersionIn"] = t.struct(
        {
            "messageVersion": t.array(
                t.proxy(
                    renames["AssistantApiSupportedProtocolVersionMessageVersionPairIn"]
                )
            )
        }
    ).named(renames["AssistantApiSupportedProtocolVersionIn"])
    types["AssistantApiSupportedProtocolVersionOut"] = t.struct(
        {
            "messageVersion": t.array(
                t.proxy(
                    renames["AssistantApiSupportedProtocolVersionMessageVersionPairOut"]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedProtocolVersionOut"])
    types["AssistantApiCoreTypesInternalProviderInfoIn"] = t.struct(
        {"type": t.string().optional()}
    ).named(renames["AssistantApiCoreTypesInternalProviderInfoIn"])
    types["AssistantApiCoreTypesInternalProviderInfoOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesInternalProviderInfoOut"])
    types["GoodocSemanticLabelIn"] = t.struct(
        {
            "ModificationRecord": t.string().optional(),
            "PageNumberOrdinal": t.proxy(renames["GoodocOrdinalIn"]).optional(),
            "ContinuesFromPreviousPage": t.boolean(),
            "contentlink": t.proxy(renames["GoodocSemanticLabelContentLinkIn"]),
            "appearance": t.integer(),
            "AlternateText": t.string().optional(),
            "ChapterStart": t.boolean().optional(),
            "tablecelldetails": t.proxy(
                renames["GoodocSemanticLabelTableCellDetailsIn"]
            ),
            "ContinuesFromPreviousPageHyphenated": t.boolean().optional(),
            "tabledetails": t.proxy(renames["GoodocSemanticLabelTableDetailsIn"]),
            "Flow": t.string().optional(),
            "CleanupAnnotation": t.array(t.integer()),
            "columndetails": t.proxy(renames["GoodocSemanticLabelColumnDetailsIn"]),
            "EndOfSpanningLabel": t.proxy(renames["GoodocLogicalEntityIn"]).optional(),
            "editcorrectioncandidate": t.array(
                t.proxy(renames["GoodocSemanticLabelEditCorrectionCandidateIn"])
            ),
            "Attribute": t.array(t.string()).optional(),
            "ContinuesOnNextPage": t.boolean().optional(),
            "snippetfilter": t.array(
                t.proxy(renames["GoodocSemanticLabelSnippetFilterIn"])
            ),
            "overrides": t.proxy(renames["GoodocOverridesIn"]).optional(),
            "ExperimentalData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelIn"])
    types["GoodocSemanticLabelOut"] = t.struct(
        {
            "ModificationRecord": t.string().optional(),
            "PageNumberOrdinal": t.proxy(renames["GoodocOrdinalOut"]).optional(),
            "ContinuesFromPreviousPage": t.boolean(),
            "contentlink": t.proxy(renames["GoodocSemanticLabelContentLinkOut"]),
            "appearance": t.integer(),
            "AlternateText": t.string().optional(),
            "ChapterStart": t.boolean().optional(),
            "tablecelldetails": t.proxy(
                renames["GoodocSemanticLabelTableCellDetailsOut"]
            ),
            "ContinuesFromPreviousPageHyphenated": t.boolean().optional(),
            "tabledetails": t.proxy(renames["GoodocSemanticLabelTableDetailsOut"]),
            "Flow": t.string().optional(),
            "CleanupAnnotation": t.array(t.integer()),
            "columndetails": t.proxy(renames["GoodocSemanticLabelColumnDetailsOut"]),
            "EndOfSpanningLabel": t.proxy(renames["GoodocLogicalEntityOut"]).optional(),
            "editcorrectioncandidate": t.array(
                t.proxy(renames["GoodocSemanticLabelEditCorrectionCandidateOut"])
            ),
            "Attribute": t.array(t.string()).optional(),
            "ContinuesOnNextPage": t.boolean().optional(),
            "snippetfilter": t.array(
                t.proxy(renames["GoodocSemanticLabelSnippetFilterOut"])
            ),
            "overrides": t.proxy(renames["GoodocOverridesOut"]).optional(),
            "ExperimentalData": t.proxy(
                renames["Proto2BridgeMessageSetOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelOut"])
    types["CrawlerChangerateUrlHistoryIn"] = t.struct(
        {
            "latestVersion": t.proxy(
                renames["CrawlerChangerateUrlVersionIn"]
            ).optional(),
            "change": t.array(
                t.proxy(renames["CrawlerChangerateUrlChangeIn"])
            ).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["CrawlerChangerateUrlHistoryIn"])
    types["CrawlerChangerateUrlHistoryOut"] = t.struct(
        {
            "latestVersion": t.proxy(
                renames["CrawlerChangerateUrlVersionOut"]
            ).optional(),
            "change": t.array(
                t.proxy(renames["CrawlerChangerateUrlChangeOut"])
            ).optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateUrlHistoryOut"])
    types["VideoContentSearchNavboostAnchorFeaturesIn"] = t.struct(
        {
            "navboostText": t.string().optional(),
            "source": t.string().optional(),
            "anchorText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchNavboostAnchorFeaturesIn"])
    types["VideoContentSearchNavboostAnchorFeaturesOut"] = t.struct(
        {
            "navboostText": t.string().optional(),
            "source": t.string().optional(),
            "anchorText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchNavboostAnchorFeaturesOut"])
    types["GoodocWordAlternatesIn"] = t.struct(
        {
            "ErrorProbability": t.integer().optional(),
            "alternate": t.array(t.proxy(renames["GoodocWordAlternatesAlternateIn"])),
        }
    ).named(renames["GoodocWordAlternatesIn"])
    types["GoodocWordAlternatesOut"] = t.struct(
        {
            "ErrorProbability": t.integer().optional(),
            "alternate": t.array(t.proxy(renames["GoodocWordAlternatesAlternateOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocWordAlternatesOut"])
    types["CopleyPersonalReferenceMetadataIn"] = t.struct(
        {
            "references": t.array(
                t.proxy(renames["CopleyPersonalReferenceIn"])
            ).optional(),
            "referenceScore": t.number().optional(),
            "subreferenceMetadata": t.proxy(
                renames["CopleySubreferenceMetadataIn"]
            ).optional(),
        }
    ).named(renames["CopleyPersonalReferenceMetadataIn"])
    types["CopleyPersonalReferenceMetadataOut"] = t.struct(
        {
            "references": t.array(
                t.proxy(renames["CopleyPersonalReferenceOut"])
            ).optional(),
            "referenceScore": t.number().optional(),
            "subreferenceMetadata": t.proxy(
                renames["CopleySubreferenceMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleyPersonalReferenceMetadataOut"])
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataIn"
    ] = t.struct(
        {
            "outputPath": t.string().optional(),
            "docAiDataset": t.string().optional(),
            "documents": t.array(t.string()).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataIn"
        ]
    )
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataOut"
    ] = t.struct(
        {
            "outputPath": t.string().optional(),
            "docAiDataset": t.string().optional(),
            "documents": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadataOut"
        ]
    )
    types["GoogleCloudContentwarehouseV1SearchDocumentsRequestIn"] = t.struct(
        {
            "qaSizeLimit": t.integer().optional(),
            "pageSize": t.integer().optional(),
            "histogramQueries": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1HistogramQueryIn"])
            ).optional(),
            "documentQuery": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentQueryIn"]
            ).optional(),
            "requireTotalSize": t.boolean().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
            "totalResultSize": t.string().optional(),
            "orderBy": t.string().optional(),
            "pageToken": t.string().optional(),
            "offset": t.integer().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SearchDocumentsRequestIn"])
    types["GoogleCloudContentwarehouseV1SearchDocumentsRequestOut"] = t.struct(
        {
            "qaSizeLimit": t.integer().optional(),
            "pageSize": t.integer().optional(),
            "histogramQueries": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1HistogramQueryOut"])
            ).optional(),
            "documentQuery": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentQueryOut"]
            ).optional(),
            "requireTotalSize": t.boolean().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "totalResultSize": t.string().optional(),
            "orderBy": t.string().optional(),
            "pageToken": t.string().optional(),
            "offset": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SearchDocumentsRequestOut"])
    types["TrawlerClientServiceInfoClientLabelsClientLabelValuesIn"] = t.struct(
        {"value": t.array(t.string())}
    ).named(renames["TrawlerClientServiceInfoClientLabelsClientLabelValuesIn"])
    types["TrawlerClientServiceInfoClientLabelsClientLabelValuesOut"] = t.struct(
        {
            "value": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerClientServiceInfoClientLabelsClientLabelValuesOut"])
    types["NSRVersionedItemIn"] = t.struct(
        {"value": t.number().optional(), "versionId": t.integer().optional()}
    ).named(renames["NSRVersionedItemIn"])
    types["NSRVersionedItemOut"] = t.struct(
        {
            "value": t.number().optional(),
            "versionId": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NSRVersionedItemOut"])
    types["IndexingDocjoinerAnchorPhraseSpamInfoIn"] = t.struct(
        {
            "phraseAnchorSpamEnd": t.integer().optional(),
            "phraseAnchorSpamRate": t.number().optional(),
            "phraseAnchorSpamDemoted": t.integer().optional(),
            "phraseAnchorSpamStart": t.integer().optional(),
            "phraseAnchorSpamPenalty": t.number().optional(),
            "phraseAnchorSpamDays": t.number().optional(),
            "phraseAnchorSpamProcessed": t.integer().optional(),
            "phraseAnchorSpamFraq": t.number().optional(),
            "phraseAnchorSpamCount": t.number().optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorPhraseSpamInfoIn"])
    types["IndexingDocjoinerAnchorPhraseSpamInfoOut"] = t.struct(
        {
            "phraseAnchorSpamEnd": t.integer().optional(),
            "phraseAnchorSpamRate": t.number().optional(),
            "phraseAnchorSpamDemoted": t.integer().optional(),
            "phraseAnchorSpamStart": t.integer().optional(),
            "phraseAnchorSpamPenalty": t.number().optional(),
            "phraseAnchorSpamDays": t.number().optional(),
            "phraseAnchorSpamProcessed": t.integer().optional(),
            "phraseAnchorSpamFraq": t.number().optional(),
            "phraseAnchorSpamCount": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorPhraseSpamInfoOut"])
    types["KnowledgeAnswersSensitivityArgumentEvalPolicyIn"] = t.struct(
        {
            "redactQuerySpan": t.boolean().optional(),
            "replacement": t.string().optional(),
            "policyName": t.string().optional(),
            "scrubArgumentValue": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityArgumentEvalPolicyIn"])
    types["KnowledgeAnswersSensitivityArgumentEvalPolicyOut"] = t.struct(
        {
            "redactQuerySpan": t.boolean().optional(),
            "replacement": t.string().optional(),
            "policyName": t.string().optional(),
            "scrubArgumentValue": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityArgumentEvalPolicyOut"])
    types["RepositoryWebrefClusterProtoMidListRuleInstanceIn"] = t.struct(
        {
            "rule": t.proxy(
                renames["RepositoryWebrefClusterProtoMidListRuleIn"]
            ).optional(),
            "role": t.string(),
        }
    ).named(renames["RepositoryWebrefClusterProtoMidListRuleInstanceIn"])
    types["RepositoryWebrefClusterProtoMidListRuleInstanceOut"] = t.struct(
        {
            "rule": t.proxy(
                renames["RepositoryWebrefClusterProtoMidListRuleOut"]
            ).optional(),
            "role": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoMidListRuleInstanceOut"])
    types["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneIn"] = t.struct(
        {
            "phoneNumber": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberIn"
                ]
            ),
            "formattedType": t.string().optional(),
            "type": t.string().optional(),
            "shortCode": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneIn"])
    types["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneOut"] = t.struct(
        {
            "phoneNumber": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberOut"
                ]
            ),
            "formattedType": t.string().optional(),
            "type": t.string().optional(),
            "shortCode": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneOut"])
    types["Proto2BridgeMessageSetIn"] = t.struct({"_": t.string().optional()}).named(
        renames["Proto2BridgeMessageSetIn"]
    )
    types["Proto2BridgeMessageSetOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["Proto2BridgeMessageSetOut"])
    types["VideoPipelineViperVSIColumnDataIn"] = t.struct(
        {
            "totalVsiTime": t.number().optional(),
            "inputReadTime": t.number().optional(),
            "info": t.proxy(renames["VideoVideoStreamInfoIn"]),
            "partialFile": t.boolean().optional(),
            "vsiStats": t.array(
                t.proxy(renames["VideoPipelineViperVSIColumnDataVsiStatsIn"])
            ),
        }
    ).named(renames["VideoPipelineViperVSIColumnDataIn"])
    types["VideoPipelineViperVSIColumnDataOut"] = t.struct(
        {
            "totalVsiTime": t.number().optional(),
            "inputReadTime": t.number().optional(),
            "info": t.proxy(renames["VideoVideoStreamInfoOut"]),
            "partialFile": t.boolean().optional(),
            "vsiStats": t.array(
                t.proxy(renames["VideoPipelineViperVSIColumnDataVsiStatsOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoPipelineViperVSIColumnDataOut"])
    types["ScienceCitationDownloadURLIn"] = t.struct(
        {
            "MetadataUrl": t.string().optional(),
            "LikelyAheadPrint": t.boolean().optional(),
            "LikelyNoCache": t.boolean().optional(),
            "UrlAfterRedirects": t.string(),
            "LegalMustInclude": t.boolean().optional(),
            "LikelyDifferentMetricsVenue": t.boolean().optional(),
            "MaybeNoIndexReparse": t.boolean().optional(),
            "HostedNumPages": t.integer().optional(),
            "ContentChecksum": t.string().optional(),
            "CanonicalUrlfp": t.string(),
            "ExcerptContent": t.string().optional(),
            "MustInclude": t.boolean().optional(),
            "LikelyWorldViewable": t.boolean().optional(),
            "InPrevIndex": t.boolean().optional(),
            "BrokenLandingPage": t.boolean().optional(),
            "LongChunkCount": t.integer().optional(),
            "ExcerptDebugLabel": t.string().optional(),
            "WordCount": t.integer().optional(),
            "DMCANotice": t.string().optional(),
            "DownloadYear": t.integer().optional(),
            "FirstDiscovered": t.string().optional(),
            "IndexPriority": t.integer().optional(),
            "LikelyLegalJournal": t.boolean().optional(),
            "OceanView": t.proxy(renames["ScienceOceanViewIn"]).optional(),
            "Type": t.integer().optional(),
            "CrawlTimestamp": t.string().optional(),
            "PageCount": t.integer().optional(),
            "OutLinkCount": t.integer().optional(),
            "DisplayOrg": t.string().optional(),
            "HtmlTitle": t.string().optional(),
            "ReferencesInPrevIndex": t.boolean().optional(),
            "DisplayPriority": t.integer().optional(),
            "HostedStartPage": t.integer(),
            "NoIndex": t.boolean().optional(),
            "NoArchive": t.boolean().optional(),
            "LikelyNoIndex": t.boolean().optional(),
            "DownloadMonth": t.integer().optional(),
            "WorldViewable": t.boolean().optional(),
            "NoSnippet": t.boolean().optional(),
            "DownloadDay": t.integer(),
            "UrlStr": t.string(),
            "ContentType": t.integer().optional(),
        }
    ).named(renames["ScienceCitationDownloadURLIn"])
    types["ScienceCitationDownloadURLOut"] = t.struct(
        {
            "MetadataUrl": t.string().optional(),
            "LikelyAheadPrint": t.boolean().optional(),
            "LikelyNoCache": t.boolean().optional(),
            "UrlAfterRedirects": t.string(),
            "LegalMustInclude": t.boolean().optional(),
            "LikelyDifferentMetricsVenue": t.boolean().optional(),
            "MaybeNoIndexReparse": t.boolean().optional(),
            "HostedNumPages": t.integer().optional(),
            "ContentChecksum": t.string().optional(),
            "CanonicalUrlfp": t.string(),
            "ExcerptContent": t.string().optional(),
            "MustInclude": t.boolean().optional(),
            "LikelyWorldViewable": t.boolean().optional(),
            "InPrevIndex": t.boolean().optional(),
            "BrokenLandingPage": t.boolean().optional(),
            "LongChunkCount": t.integer().optional(),
            "ExcerptDebugLabel": t.string().optional(),
            "WordCount": t.integer().optional(),
            "DMCANotice": t.string().optional(),
            "DownloadYear": t.integer().optional(),
            "FirstDiscovered": t.string().optional(),
            "IndexPriority": t.integer().optional(),
            "LikelyLegalJournal": t.boolean().optional(),
            "OceanView": t.proxy(renames["ScienceOceanViewOut"]).optional(),
            "Type": t.integer().optional(),
            "CrawlTimestamp": t.string().optional(),
            "PageCount": t.integer().optional(),
            "OutLinkCount": t.integer().optional(),
            "DisplayOrg": t.string().optional(),
            "HtmlTitle": t.string().optional(),
            "ReferencesInPrevIndex": t.boolean().optional(),
            "DisplayPriority": t.integer().optional(),
            "HostedStartPage": t.integer(),
            "NoIndex": t.boolean().optional(),
            "NoArchive": t.boolean().optional(),
            "LikelyNoIndex": t.boolean().optional(),
            "DownloadMonth": t.integer().optional(),
            "WorldViewable": t.boolean().optional(),
            "NoSnippet": t.boolean().optional(),
            "DownloadDay": t.integer(),
            "UrlStr": t.string(),
            "ContentType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationDownloadURLOut"])
    types["VideoContentSearchVideoMultimodalTopicFeaturesIn"] = t.struct(
        {
            "frameStarburstData": t.array(
                t.proxy(renames["VideoContentSearchFrameStarburstDataIn"])
            ).optional()
        }
    ).named(renames["VideoContentSearchVideoMultimodalTopicFeaturesIn"])
    types["VideoContentSearchVideoMultimodalTopicFeaturesOut"] = t.struct(
        {
            "frameStarburstData": t.array(
                t.proxy(renames["VideoContentSearchFrameStarburstDataOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoMultimodalTopicFeaturesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsProfileIn"] = t.struct(
        {
            "websiteLink": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkIn"]
            ).optional(),
            "tagline": t.string(),
            "fieldRestriction": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionIn"
                    ]
                )
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsProfileOut"] = t.struct(
        {
            "websiteLink": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkOut"]
            ).optional(),
            "tagline": t.string(),
            "fieldRestriction": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionOut"
                    ]
                )
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileOut"])
    types["VideoFileSphericalMetadataPoseIn"] = t.struct(
        {
            "rollDegrees": t.number(),
            "headingDegrees": t.number(),
            "pitchDegrees": t.number(),
        }
    ).named(renames["VideoFileSphericalMetadataPoseIn"])
    types["VideoFileSphericalMetadataPoseOut"] = t.struct(
        {
            "rollDegrees": t.number(),
            "headingDegrees": t.number(),
            "pitchDegrees": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataPoseOut"])
    types["HtmlrenderWebkitHeadlessProtoPdfIn"] = t.struct(
        {"data": t.string().optional()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoPdfIn"])
    types["HtmlrenderWebkitHeadlessProtoPdfOut"] = t.struct(
        {
            "data": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoPdfOut"])
    types["SecurityCredentialsRbacSubjectProtoIn"] = t.struct(
        {"username": t.string().optional()}
    ).named(renames["SecurityCredentialsRbacSubjectProtoIn"])
    types["SecurityCredentialsRbacSubjectProtoOut"] = t.struct(
        {
            "username": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsRbacSubjectProtoOut"])
    types["GoogleCloudContentwarehouseV1AccessControlActionIn"] = t.struct(
        {
            "policy": t.proxy(renames["GoogleIamV1PolicyIn"]).optional(),
            "operationType": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1AccessControlActionIn"])
    types["GoogleCloudContentwarehouseV1AccessControlActionOut"] = t.struct(
        {
            "policy": t.proxy(renames["GoogleIamV1PolicyOut"]).optional(),
            "operationType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1AccessControlActionOut"])
    types[
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn"
    ] = t.struct(
        {
            "answersHeaderSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsIn"
                ]
            ).optional(),
            "propertyValue": t.array(t.proxy(renames["FreebasePropertyValueIn"])),
            "responseMeaningApplication": t.string().optional(),
        }
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut"
    ] = t.struct(
        {
            "answersHeaderSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsOut"
                ]
            ).optional(),
            "propertyValue": t.array(t.proxy(renames["FreebasePropertyValueOut"])),
            "responseMeaningApplication": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut"
        ]
    )
    types["ContentAwareCropsIndexingIn"] = t.struct(
        {"mustangBytes": t.string().optional(), "mustangBytesVersion": t.integer()}
    ).named(renames["ContentAwareCropsIndexingIn"])
    types["ContentAwareCropsIndexingOut"] = t.struct(
        {
            "mustangBytes": t.string().optional(),
            "mustangBytesVersion": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ContentAwareCropsIndexingOut"])
    types["FocusBackendContactPointerIn"] = t.struct(
        {
            "annotationId": t.string().optional(),
            "otherContactId": t.proxy(
                renames["FocusBackendOtherContactIdIn"]
            ).optional(),
            "deviceRawContactId": t.proxy(
                renames["FocusBackendDeviceRawContactIdIn"]
            ).optional(),
            "focusContactId": t.string().optional(),
            "secondaryId": t.proxy(
                renames["FocusBackendSecondaryContactIdIn"]
            ).optional(),
        }
    ).named(renames["FocusBackendContactPointerIn"])
    types["FocusBackendContactPointerOut"] = t.struct(
        {
            "annotationId": t.string().optional(),
            "otherContactId": t.proxy(
                renames["FocusBackendOtherContactIdOut"]
            ).optional(),
            "deviceRawContactId": t.proxy(
                renames["FocusBackendDeviceRawContactIdOut"]
            ).optional(),
            "focusContactId": t.string().optional(),
            "secondaryId": t.proxy(
                renames["FocusBackendSecondaryContactIdOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendContactPointerOut"])
    types["SearchPolicyRankableSensitivityFollowOnIn"] = t.struct(
        {
            "ignoreQueryUnderstanding": t.boolean().optional(),
            "blockNonV2SearchBackends": t.boolean().optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityFollowOnIn"])
    types["SearchPolicyRankableSensitivityFollowOnOut"] = t.struct(
        {
            "ignoreQueryUnderstanding": t.boolean().optional(),
            "blockNonV2SearchBackends": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityFollowOnOut"])
    types["DrishtiVesperEncodedThumbnailIn"] = t.struct(
        {
            "encodingQuality": t.integer().optional(),
            "width": t.integer().optional(),
            "imageBytes": t.string().optional(),
            "height": t.integer(),
            "encodingType": t.string().optional(),
            "imageString": t.string().optional(),
        }
    ).named(renames["DrishtiVesperEncodedThumbnailIn"])
    types["DrishtiVesperEncodedThumbnailOut"] = t.struct(
        {
            "encodingQuality": t.integer().optional(),
            "width": t.integer().optional(),
            "imageBytes": t.string().optional(),
            "height": t.integer(),
            "encodingType": t.string().optional(),
            "imageString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiVesperEncodedThumbnailOut"])
    types["QualityActionsAppInfoIn"] = t.struct(
        {
            "packageName": t.string().optional(),
            "source": t.string().optional(),
            "appName": t.string().optional(),
            "fallbackUrl": t.string().optional(),
            "confidence": t.number(),
            "androidIntent": t.array(t.string()).optional(),
            "sourceData": t.array(
                t.proxy(renames["QualityActionsAppInfoSourceDataIn"])
            ),
            "category": t.proxy(
                renames["QualityActionsAppUnderstandingCategoryIn"]
            ).optional(),
            "displayName": t.string().optional(),
        }
    ).named(renames["QualityActionsAppInfoIn"])
    types["QualityActionsAppInfoOut"] = t.struct(
        {
            "packageName": t.string().optional(),
            "source": t.string().optional(),
            "appName": t.string().optional(),
            "fallbackUrl": t.string().optional(),
            "confidence": t.number(),
            "androidIntent": t.array(t.string()).optional(),
            "sourceData": t.array(
                t.proxy(renames["QualityActionsAppInfoSourceDataOut"])
            ),
            "category": t.proxy(
                renames["QualityActionsAppUnderstandingCategoryOut"]
            ).optional(),
            "displayName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsAppInfoOut"])
    types["NlpSemanticParsingModelsShoppingAssistantPhraseIn"] = t.struct(
        {
            "brand": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantBrandPhraseIn"]
            ),
            "offer": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantOfferIn"]
            ),
            "unrecognized": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseIn"]
            ),
            "product": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductPhraseIn"]
            ),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantPhraseIn"])
    types["NlpSemanticParsingModelsShoppingAssistantPhraseOut"] = t.struct(
        {
            "brand": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantBrandPhraseOut"]
            ),
            "offer": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantOfferOut"]
            ),
            "unrecognized": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseOut"
                ]
            ),
            "product": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductPhraseOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantPhraseOut"])
    types["NlpSemanticParsingQRefAnnotationCollectionMembershipIn"] = t.struct(
        {
            "collectionId": t.string().optional(),
            "collectionScore": t.number().optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationCollectionMembershipIn"])
    types["NlpSemanticParsingQRefAnnotationCollectionMembershipOut"] = t.struct(
        {
            "collectionId": t.string().optional(),
            "collectionScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationCollectionMembershipOut"])
    types["AssistantApiCoreTypesMessageNotificationNotificationEntryIn"] = t.struct(
        {
            "mimeType": t.string().optional(),
            "messageBody": t.string().optional(),
            "postTime": t.string().optional(),
            "dataUri": t.string().optional(),
            "sender": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationPersonIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiCoreTypesMessageNotificationNotificationEntryIn"])
    types["AssistantApiCoreTypesMessageNotificationNotificationEntryOut"] = t.struct(
        {
            "mimeType": t.string().optional(),
            "messageBody": t.string().optional(),
            "postTime": t.string().optional(),
            "dataUri": t.string().optional(),
            "sender": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationPersonOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesMessageNotificationNotificationEntryOut"])
    types["WebutilHtmlTypesSafeHtmlProtoIn"] = t.struct(
        {"privateDoNotAccessOrElseSafeHtmlWrappedValue": t.string().optional()}
    ).named(renames["WebutilHtmlTypesSafeHtmlProtoIn"])
    types["WebutilHtmlTypesSafeHtmlProtoOut"] = t.struct(
        {
            "privateDoNotAccessOrElseSafeHtmlWrappedValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WebutilHtmlTypesSafeHtmlProtoOut"])
    types["SocialGraphApiProtoSearchProfileEducationIn"] = t.struct(
        {
            "fieldOfStudy": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"])
            ),
            "institution": t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"]),
            "endTime": t.proxy(renames["GoogleTypeDateIn"]),
            "startTime": t.proxy(renames["GoogleTypeDateIn"]),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileEducationIn"])
    types["SocialGraphApiProtoSearchProfileEducationOut"] = t.struct(
        {
            "fieldOfStudy": t.array(
                t.proxy(renames["SocialGraphApiProtoSearchProfileEntityOut"])
            ),
            "institution": t.proxy(
                renames["SocialGraphApiProtoSearchProfileEntityOut"]
            ),
            "endTime": t.proxy(renames["GoogleTypeDateOut"]),
            "startTime": t.proxy(renames["GoogleTypeDateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileEducationOut"])
    types["AssistantLogsSettingsDeviceIdLogIn"] = t.struct(
        {
            "castDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "canonicalDeviceId": t.string().optional(),
            "clientInstanceId": t.string().optional(),
        }
    ).named(renames["AssistantLogsSettingsDeviceIdLogIn"])
    types["AssistantLogsSettingsDeviceIdLogOut"] = t.struct(
        {
            "castDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "canonicalDeviceId": t.string().optional(),
            "clientInstanceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsSettingsDeviceIdLogOut"])
    types["RepositoryWebrefExtraMetadataIn"] = t.struct(
        {
            "bookEditionMetadata": t.array(
                t.proxy(renames["RepositoryWebrefBookEditionMetadataIn"])
            ).optional(),
            "supportTransferRules": t.array(
                t.proxy(renames["RepositoryWebrefSupportTransferRuleIn"])
            ).optional(),
            "entityScores": t.proxy(
                renames["RepositoryWebrefEntityScoresIn"]
            ).optional(),
            "specialEntityType": t.string().optional(),
            "clusterMetadata": t.proxy(
                renames["RepositoryWebrefClusterMetadataIn"]
            ).optional(),
            "mdvcMetadata": t.proxy(
                renames["RepositoryWebrefMdvcMetadataIn"]
            ).optional(),
            "displayInfo": t.proxy(renames["RepositoryWebrefDisplayInfoIn"]).optional(),
            "kcAttributeMetadata": t.proxy(
                renames["RepositoryWebrefKCAttributeMetadataIn"]
            ).optional(),
            "equivalentEntityId": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityIdIn"])
            ).optional(),
            "specialWord": t.array(t.proxy(renames["MapsQualitySpecialWordsProtoIn"])),
            "productMetadata": t.proxy(
                renames["RepositoryWebrefProductMetadataIn"]
            ).optional(),
            "primaryRecording": t.string().optional(),
            "geoMetadata": t.proxy(
                renames["RepositoryWebrefGeoMetadataProtoIn"]
            ).optional(),
            "categoryInfo": t.proxy(
                renames["RepositoryWebrefCategoryInfoIn"]
            ).optional(),
            "latentEntities": t.proxy(
                renames["RepositoryWebrefLatentEntitiesIn"]
            ).optional(),
            "otherMetadata": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["RepositoryWebrefExtraMetadataIn"])
    types["RepositoryWebrefExtraMetadataOut"] = t.struct(
        {
            "bookEditionMetadata": t.array(
                t.proxy(renames["RepositoryWebrefBookEditionMetadataOut"])
            ).optional(),
            "supportTransferRules": t.array(
                t.proxy(renames["RepositoryWebrefSupportTransferRuleOut"])
            ).optional(),
            "entityScores": t.proxy(
                renames["RepositoryWebrefEntityScoresOut"]
            ).optional(),
            "specialEntityType": t.string().optional(),
            "clusterMetadata": t.proxy(
                renames["RepositoryWebrefClusterMetadataOut"]
            ).optional(),
            "mdvcMetadata": t.proxy(
                renames["RepositoryWebrefMdvcMetadataOut"]
            ).optional(),
            "displayInfo": t.proxy(
                renames["RepositoryWebrefDisplayInfoOut"]
            ).optional(),
            "kcAttributeMetadata": t.proxy(
                renames["RepositoryWebrefKCAttributeMetadataOut"]
            ).optional(),
            "equivalentEntityId": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityIdOut"])
            ).optional(),
            "specialWord": t.array(t.proxy(renames["MapsQualitySpecialWordsProtoOut"])),
            "productMetadata": t.proxy(
                renames["RepositoryWebrefProductMetadataOut"]
            ).optional(),
            "primaryRecording": t.string().optional(),
            "geoMetadata": t.proxy(
                renames["RepositoryWebrefGeoMetadataProtoOut"]
            ).optional(),
            "categoryInfo": t.proxy(
                renames["RepositoryWebrefCategoryInfoOut"]
            ).optional(),
            "latentEntities": t.proxy(
                renames["RepositoryWebrefLatentEntitiesOut"]
            ).optional(),
            "otherMetadata": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefExtraMetadataOut"])
    types["RepositoryAnnotationsGeoTopicalityScoreIn"] = t.struct(
        {"type": t.string(), "rawScore": t.number()}
    ).named(renames["RepositoryAnnotationsGeoTopicalityScoreIn"])
    types["RepositoryAnnotationsGeoTopicalityScoreOut"] = t.struct(
        {
            "type": t.string(),
            "rawScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsGeoTopicalityScoreOut"])
    types["KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsIn"])
    types["KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsOut"])
    types["GoogleTypeMoneyIn"] = t.struct(
        {
            "units": t.string().optional(),
            "currencyCode": t.string().optional(),
            "nanos": t.integer().optional(),
        }
    ).named(renames["GoogleTypeMoneyIn"])
    types["GoogleTypeMoneyOut"] = t.struct(
        {
            "units": t.string().optional(),
            "currencyCode": t.string().optional(),
            "nanos": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeMoneyOut"])
    types["GoogleCloudContentwarehouseV1CreateDocumentMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentMetadataIn"])
    types["GoogleCloudContentwarehouseV1CreateDocumentMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentMetadataOut"])
    types["QualityPreviewSnippetQualityFeaturesIn"] = t.struct(
        {
            "redundancyScore": t.number(),
            "hiddenRatioScore": t.number(),
            "numVisibleTokensScore": t.number(),
            "sentenceStartScore": t.number(),
            "numTidbitsScore": t.number(),
            "outlinkScore": t.number(),
            "foreignMetaScore": t.number(),
        }
    ).named(renames["QualityPreviewSnippetQualityFeaturesIn"])
    types["QualityPreviewSnippetQualityFeaturesOut"] = t.struct(
        {
            "redundancyScore": t.number(),
            "hiddenRatioScore": t.number(),
            "numVisibleTokensScore": t.number(),
            "sentenceStartScore": t.number(),
            "numTidbitsScore": t.number(),
            "outlinkScore": t.number(),
            "foreignMetaScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetQualityFeaturesOut"])
    types["ImageContentQueryBoostIn"] = t.struct(
        {"queryboost": t.array(t.proxy(renames["ImageContentQueryBoostQueryBoostIn"]))}
    ).named(renames["ImageContentQueryBoostIn"])
    types["ImageContentQueryBoostOut"] = t.struct(
        {
            "queryboost": t.array(
                t.proxy(renames["ImageContentQueryBoostQueryBoostOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageContentQueryBoostOut"])
    types["GeostoreSpeedLimitProtoIn"] = t.struct(
        {
            "variableSpeed": t.proxy(
                renames["GeostoreVariableSpeedProtoIn"]
            ).optional(),
            "sourceType": t.string().optional(),
            "category": t.string().optional(),
            "unlimitedSpeed": t.proxy(
                renames["GeostoreUnlimitedSpeedProtoIn"]
            ).optional(),
            "condition": t.array(
                t.proxy(renames["GeostoreRoadConditionalProtoIn"])
            ).optional(),
            "speedWithUnit": t.proxy(renames["GeostoreSpeedProtoIn"]).optional(),
        }
    ).named(renames["GeostoreSpeedLimitProtoIn"])
    types["GeostoreSpeedLimitProtoOut"] = t.struct(
        {
            "variableSpeed": t.proxy(
                renames["GeostoreVariableSpeedProtoOut"]
            ).optional(),
            "sourceType": t.string().optional(),
            "category": t.string().optional(),
            "unlimitedSpeed": t.proxy(
                renames["GeostoreUnlimitedSpeedProtoOut"]
            ).optional(),
            "condition": t.array(
                t.proxy(renames["GeostoreRoadConditionalProtoOut"])
            ).optional(),
            "speedWithUnit": t.proxy(renames["GeostoreSpeedProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSpeedLimitProtoOut"])
    types["KnowledgeAnswersOpaqueDeviceIdTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceIdTypeIn"])
    types["KnowledgeAnswersOpaqueDeviceIdTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceIdTypeOut"])
    types["AssistantApiAndroidIntentCapabilitiesIn"] = t.struct(
        {
            "androidIntentCapability": t.array(
                t.proxy(
                    renames[
                        "AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityIn"
                    ]
                )
            )
        }
    ).named(renames["AssistantApiAndroidIntentCapabilitiesIn"])
    types["AssistantApiAndroidIntentCapabilitiesOut"] = t.struct(
        {
            "androidIntentCapability": t.array(
                t.proxy(
                    renames[
                        "AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAndroidIntentCapabilitiesOut"])
    types["SentenceBoundaryAnnotationsIn"] = t.struct(
        {
            "instance": t.array(
                t.proxy(renames["SentenceBoundaryAnnotationsInstanceIn"])
            ),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["SentenceBoundaryAnnotationsIn"])
    types["SentenceBoundaryAnnotationsOut"] = t.struct(
        {
            "instance": t.array(
                t.proxy(renames["SentenceBoundaryAnnotationsInstanceOut"])
            ),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SentenceBoundaryAnnotationsOut"])
    types["CopleyPersonalReferenceIn"] = t.struct(
        {"personalReferenceType": t.string().optional()}
    ).named(renames["CopleyPersonalReferenceIn"])
    types["CopleyPersonalReferenceOut"] = t.struct(
        {
            "personalReferenceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleyPersonalReferenceOut"])
    types["RepositoryWebrefGlobalLinkInfoIn"] = t.struct(
        {
            "isBoostedPrimaryWeightLink": t.boolean().optional(),
            "variantInfo": t.array(
                t.proxy(renames["RepositoryWebrefLinkInfoIn"])
            ).optional(),
            "debugTitle": t.string().optional(),
            "targetMid": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefGlobalLinkInfoIn"])
    types["RepositoryWebrefGlobalLinkInfoOut"] = t.struct(
        {
            "isBoostedPrimaryWeightLink": t.boolean().optional(),
            "variantInfo": t.array(
                t.proxy(renames["RepositoryWebrefLinkInfoOut"])
            ).optional(),
            "debugTitle": t.string().optional(),
            "targetMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefGlobalLinkInfoOut"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn"] = t.struct(
        {
            "annotationSourceInfo": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoIn"
                    ]
                )
            ),
            "url": t.string().optional(),
            "crossDomain": t.boolean().optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut"] = t.struct(
        {
            "annotationSourceInfo": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoOut"
                    ]
                )
            ),
            "url": t.string().optional(),
            "crossDomain": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut"])
    types["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesIn"] = t.struct(
        {
            "medianEditDistance": t.integer().optional(),
            "maxEditDistance": t.integer().optional(),
            "maxEditDistanceRatio": t.number().optional(),
        }
    ).named(renames["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesIn"])
    types["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesOut"] = t.struct(
        {
            "medianEditDistance": t.integer().optional(),
            "maxEditDistance": t.integer().optional(),
            "maxEditDistanceRatio": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesOut"])
    types["PhotosDynamicDepthMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["PhotosDynamicDepthMetadataIn"])
    types["PhotosDynamicDepthMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["PhotosDynamicDepthMetadataOut"])
    types["GoogleCloudContentwarehouseV1CreateDocumentRequestIn"] = t.struct(
        {
            "document": t.proxy(renames["GoogleCloudContentwarehouseV1DocumentIn"]),
            "policy": t.proxy(renames["GoogleIamV1PolicyIn"]).optional(),
            "cloudAiDocumentOption": t.proxy(
                renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn"]
            ).optional(),
            "createMask": t.string().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentRequestIn"])
    types["GoogleCloudContentwarehouseV1CreateDocumentRequestOut"] = t.struct(
        {
            "document": t.proxy(renames["GoogleCloudContentwarehouseV1DocumentOut"]),
            "policy": t.proxy(renames["GoogleIamV1PolicyOut"]).optional(),
            "cloudAiDocumentOption": t.proxy(
                renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut"]
            ).optional(),
            "createMask": t.string().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CreateDocumentRequestOut"])
    types["GoogleCloudContentwarehouseV1SetAclResponseIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"]
            ).optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyIn"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SetAclResponseIn"])
    types["GoogleCloudContentwarehouseV1SetAclResponseOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"]
            ).optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SetAclResponseOut"])
    types["GeostoreRoadConditionalProtoIn"] = t.struct(
        {
            "timeSchedule": t.proxy(renames["GeostoreTimeScheduleProtoIn"]).optional(),
            "vehicleType": t.array(t.string()).optional(),
            "vehicleAttribute": t.proxy(
                renames["GeostoreVehicleAttributeFilterProtoIn"]
            ).optional(),
        }
    ).named(renames["GeostoreRoadConditionalProtoIn"])
    types["GeostoreRoadConditionalProtoOut"] = t.struct(
        {
            "timeSchedule": t.proxy(renames["GeostoreTimeScheduleProtoOut"]).optional(),
            "vehicleType": t.array(t.string()).optional(),
            "vehicleAttribute": t.proxy(
                renames["GeostoreVehicleAttributeFilterProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRoadConditionalProtoOut"])
    types["VideoFileFramePackingArrangementIn"] = t.struct(
        {
            "gridOffset1Horizontal": t.integer(),
            "gridOffset1Vertical": t.integer(),
            "type": t.string().optional(),
            "gridOffset0Horizontal": t.integer().optional(),
            "quincunxSampling": t.boolean().optional(),
            "gridOffset0Vertical": t.integer(),
            "interpretation": t.string().optional(),
        }
    ).named(renames["VideoFileFramePackingArrangementIn"])
    types["VideoFileFramePackingArrangementOut"] = t.struct(
        {
            "gridOffset1Horizontal": t.integer(),
            "gridOffset1Vertical": t.integer(),
            "type": t.string().optional(),
            "gridOffset0Horizontal": t.integer().optional(),
            "quincunxSampling": t.boolean().optional(),
            "gridOffset0Vertical": t.integer(),
            "interpretation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileFramePackingArrangementOut"])
    types["SecurityCredentialsSigningKeyPossessorProtoIn"] = t.struct(
        {
            "keymasterKeyType": t.integer().optional(),
            "serializedVerificationKey": t.string().optional(),
            "serializedVerificationKeyset": t.string().optional(),
        }
    ).named(renames["SecurityCredentialsSigningKeyPossessorProtoIn"])
    types["SecurityCredentialsSigningKeyPossessorProtoOut"] = t.struct(
        {
            "keymasterKeyType": t.integer().optional(),
            "serializedVerificationKey": t.string().optional(),
            "serializedVerificationKeyset": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsSigningKeyPossessorProtoOut"])
    types["GoogleCloudContentwarehouseV1TimeFilterIn"] = t.struct(
        {
            "timeField": t.string().optional(),
            "timeRange": t.proxy(renames["GoogleTypeIntervalIn"]),
        }
    ).named(renames["GoogleCloudContentwarehouseV1TimeFilterIn"])
    types["GoogleCloudContentwarehouseV1TimeFilterOut"] = t.struct(
        {
            "timeField": t.string().optional(),
            "timeRange": t.proxy(renames["GoogleTypeIntervalOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1TimeFilterOut"])
    types["GoogleCloudContentwarehouseV1SearchDocumentsResponseIn"] = t.struct(
        {
            "histogramQueryResults": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1HistogramQueryResultIn"])
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"]
            ).optional(),
            "totalSize": t.integer().optional(),
            "matchingDocuments": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentIn"
                    ]
                )
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SearchDocumentsResponseIn"])
    types["GoogleCloudContentwarehouseV1SearchDocumentsResponseOut"] = t.struct(
        {
            "histogramQueryResults": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1HistogramQueryResultOut"])
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"]
            ).optional(),
            "totalSize": t.integer().optional(),
            "matchingDocuments": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentOut"
                    ]
                )
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SearchDocumentsResponseOut"])
    types["AssistantApiSettingsDeviceSupervisionSettingsIn"] = t.struct(
        {
            "downtimeSettings": t.proxy(
                renames["AssistantApiSettingsDeviceDowntimeSettingsIn"]
            ).optional(),
            "featureFilters": t.proxy(
                renames["AssistantApiSettingsDeviceFeatureFiltersIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSupervisionSettingsIn"])
    types["AssistantApiSettingsDeviceSupervisionSettingsOut"] = t.struct(
        {
            "downtimeSettings": t.proxy(
                renames["AssistantApiSettingsDeviceDowntimeSettingsOut"]
            ).optional(),
            "featureFilters": t.proxy(
                renames["AssistantApiSettingsDeviceFeatureFiltersOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSupervisionSettingsOut"])
    types["ImageExifImageEmbeddedMetadataIn"] = t.struct(
        {
            "maxApertureAtShortFocal": t.number(),
            "cameraModel": t.string().optional(),
            "destBearing": t.number(),
            "focalPlaneResUnit": t.integer(),
            "subjectLocationX": t.integer(),
            "yResolution": t.number().optional(),
            "author": t.string().optional(),
            "gpsStatus": t.string(),
            "flashUsed": t.boolean(),
            "altitude": t.number(),
            "hPositioningError": t.number().optional(),
            "latitude": t.number().optional(),
            "iptc": t.proxy(renames["ImageExifIPTCMetadataIn"]),
            "destLatitude": t.number().optional(),
            "orientation": t.string(),
            "lensMaker": t.string(),
            "comments": t.string().optional(),
            "iso": t.integer(),
            "longitude": t.number().optional(),
            "imageHeight": t.integer(),
            "imgDirectionRef": t.string(),
            "maxApertureAtLongFocal": t.number(),
            "xResolution": t.number().optional(),
            "shortFocal": t.integer(),
            "description": t.string().optional(),
            "comments2": t.string().optional(),
            "author2": t.string().optional(),
            "imageWidth": t.integer(),
            "destBearingRef": t.number().optional(),
            "lightSource": t.integer(),
            "colorSpace": t.integer(),
            "destLongitude": t.number(),
            "focalPlaneXres": t.number(),
            "brightness": t.number(),
            "exposureTime": t.number(),
            "copyright": t.string().optional(),
            "gpsMeasureMode": t.string(),
            "gpsDop": t.number().optional(),
            "exposureProgram": t.integer().optional(),
            "keywords": t.string().optional(),
            "continousDriveMode": t.boolean(),
            "software": t.string().optional(),
            "title": t.string().optional(),
            "cameraMaker": t.string().optional(),
            "destDistance": t.number(),
            "subject": t.string().optional(),
            "focalLength35mm": t.number().optional(),
            "lensId": t.string().optional(),
            "subjectLocationY": t.integer(),
            "deprecatedCity": t.string().optional(),
            "imgDirection": t.number().optional(),
            "modificationTime": t.string().optional(),
            "deprecatedState": t.string(),
            "focusMode": t.string(),
            "captureTime": t.string().optional(),
            "aperture": t.number(),
            "focalLength": t.number(),
            "cameraSerialNumber": t.string().optional(),
            "deprecatedCountry": t.string(),
            "meteringMode": t.integer().optional(),
            "subjectDistance": t.number(),
            "exposureBias": t.number(),
            "digitalZoomRatio": t.number(),
            "longFocal": t.integer(),
        }
    ).named(renames["ImageExifImageEmbeddedMetadataIn"])
    types["ImageExifImageEmbeddedMetadataOut"] = t.struct(
        {
            "maxApertureAtShortFocal": t.number(),
            "cameraModel": t.string().optional(),
            "destBearing": t.number(),
            "focalPlaneResUnit": t.integer(),
            "subjectLocationX": t.integer(),
            "yResolution": t.number().optional(),
            "author": t.string().optional(),
            "gpsStatus": t.string(),
            "flashUsed": t.boolean(),
            "altitude": t.number(),
            "hPositioningError": t.number().optional(),
            "latitude": t.number().optional(),
            "iptc": t.proxy(renames["ImageExifIPTCMetadataOut"]),
            "destLatitude": t.number().optional(),
            "orientation": t.string(),
            "lensMaker": t.string(),
            "comments": t.string().optional(),
            "iso": t.integer(),
            "longitude": t.number().optional(),
            "imageHeight": t.integer(),
            "imgDirectionRef": t.string(),
            "maxApertureAtLongFocal": t.number(),
            "xResolution": t.number().optional(),
            "shortFocal": t.integer(),
            "description": t.string().optional(),
            "comments2": t.string().optional(),
            "author2": t.string().optional(),
            "imageWidth": t.integer(),
            "destBearingRef": t.number().optional(),
            "lightSource": t.integer(),
            "colorSpace": t.integer(),
            "destLongitude": t.number(),
            "focalPlaneXres": t.number(),
            "brightness": t.number(),
            "exposureTime": t.number(),
            "copyright": t.string().optional(),
            "gpsMeasureMode": t.string(),
            "gpsDop": t.number().optional(),
            "exposureProgram": t.integer().optional(),
            "keywords": t.string().optional(),
            "continousDriveMode": t.boolean(),
            "software": t.string().optional(),
            "title": t.string().optional(),
            "cameraMaker": t.string().optional(),
            "destDistance": t.number(),
            "subject": t.string().optional(),
            "focalLength35mm": t.number().optional(),
            "lensId": t.string().optional(),
            "subjectLocationY": t.integer(),
            "deprecatedCity": t.string().optional(),
            "imgDirection": t.number().optional(),
            "modificationTime": t.string().optional(),
            "deprecatedState": t.string(),
            "focusMode": t.string(),
            "captureTime": t.string().optional(),
            "aperture": t.number(),
            "focalLength": t.number(),
            "cameraSerialNumber": t.string().optional(),
            "deprecatedCountry": t.string(),
            "meteringMode": t.integer().optional(),
            "subjectDistance": t.number(),
            "exposureBias": t.number(),
            "digitalZoomRatio": t.number(),
            "longFocal": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifImageEmbeddedMetadataOut"])
    types["HomeGraphCommonRouteIn"] = t.struct(
        {
            "chipEndpoint": t.array(t.integer()).optional(),
            "agentDeviceId": t.string().optional(),
            "targetType": t.string().optional(),
            "agentId": t.string().optional(),
        }
    ).named(renames["HomeGraphCommonRouteIn"])
    types["HomeGraphCommonRouteOut"] = t.struct(
        {
            "chipEndpoint": t.array(t.integer()).optional(),
            "agentDeviceId": t.string().optional(),
            "targetType": t.string().optional(),
            "agentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HomeGraphCommonRouteOut"])
    types["ImageRepositoryVideoPreviewsDebuggingInfoIn"] = t.struct(
        {
            "processingEngine": t.string().optional(),
            "lastAmarnaProcessingTime": t.string().optional(),
        }
    ).named(renames["ImageRepositoryVideoPreviewsDebuggingInfoIn"])
    types["ImageRepositoryVideoPreviewsDebuggingInfoOut"] = t.struct(
        {
            "processingEngine": t.string().optional(),
            "lastAmarnaProcessingTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVideoPreviewsDebuggingInfoOut"])
    types["VideoContentSearchQnaAnchorFeaturesIn"] = t.struct(
        {
            "editDistance": t.number().optional(),
            "webrefMid": t.string().optional(),
            "descartesDotScore": t.number(),
            "qbstScore": t.number().optional(),
            "descartesRankingScore": t.number(),
            "questionTitleSimilarity": t.number(),
            "videoDurationMs": t.string().optional(),
            "ensembleScore": t.number(),
            "answer": t.string().optional(),
            "question": t.string().optional(),
            "startMs": t.string().optional(),
            "isDuplicateOfTitle": t.boolean().optional(),
            "videoTitle": t.string().optional(),
            "pointwiseNormalizedGapScore": t.number().optional(),
            "neonScore": t.number().optional(),
            "dolphinModelType": t.string(),
            "queryDocCount": t.number().optional(),
            "questionType": t.string(),
            "endMs": t.string().optional(),
            "dolphinScore": t.number().optional(),
            "queryCount": t.number().optional(),
            "webrefTopicalityScore": t.number().optional(),
        }
    ).named(renames["VideoContentSearchQnaAnchorFeaturesIn"])
    types["VideoContentSearchQnaAnchorFeaturesOut"] = t.struct(
        {
            "editDistance": t.number().optional(),
            "webrefMid": t.string().optional(),
            "descartesDotScore": t.number(),
            "qbstScore": t.number().optional(),
            "descartesRankingScore": t.number(),
            "questionTitleSimilarity": t.number(),
            "videoDurationMs": t.string().optional(),
            "ensembleScore": t.number(),
            "answer": t.string().optional(),
            "question": t.string().optional(),
            "startMs": t.string().optional(),
            "isDuplicateOfTitle": t.boolean().optional(),
            "videoTitle": t.string().optional(),
            "pointwiseNormalizedGapScore": t.number().optional(),
            "neonScore": t.number().optional(),
            "dolphinModelType": t.string(),
            "queryDocCount": t.number().optional(),
            "questionType": t.string(),
            "endMs": t.string().optional(),
            "dolphinScore": t.number().optional(),
            "queryCount": t.number().optional(),
            "webrefTopicalityScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchQnaAnchorFeaturesOut"])
    types["GoogleIamV1AuditLogConfigIn"] = t.struct(
        {
            "logType": t.string().optional(),
            "exemptedMembers": t.array(t.string()).optional(),
        }
    ).named(renames["GoogleIamV1AuditLogConfigIn"])
    types["GoogleIamV1AuditLogConfigOut"] = t.struct(
        {
            "logType": t.string().optional(),
            "exemptedMembers": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleIamV1AuditLogConfigOut"])
    types["KnowledgeGraphNestedStructPredicateObjsIn"] = t.struct(
        {
            "objs": t.array(t.proxy(renames["KnowledgeGraphTripleObjIn"])),
            "pred": t.string(),
        }
    ).named(renames["KnowledgeGraphNestedStructPredicateObjsIn"])
    types["KnowledgeGraphNestedStructPredicateObjsOut"] = t.struct(
        {
            "objs": t.array(t.proxy(renames["KnowledgeGraphTripleObjOut"])),
            "pred": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphNestedStructPredicateObjsOut"])
    types["ImageRepositoryAmarnaCloudSpeechSignalsIn"] = t.struct(
        {
            "modelIdentifier": t.string().optional(),
            "langWithoutLocale": t.string().optional(),
            "duplicateOfYtS3Asr": t.boolean().optional(),
            "transcriptAsr": t.proxy(renames["PseudoVideoDataIn"]).optional(),
            "results": t.array(
                t.proxy(renames["ImageRepositorySpeechRecognitionResultIn"])
            ).optional(),
        }
    ).named(renames["ImageRepositoryAmarnaCloudSpeechSignalsIn"])
    types["ImageRepositoryAmarnaCloudSpeechSignalsOut"] = t.struct(
        {
            "modelIdentifier": t.string().optional(),
            "langWithoutLocale": t.string().optional(),
            "duplicateOfYtS3Asr": t.boolean().optional(),
            "transcriptAsr": t.proxy(renames["PseudoVideoDataOut"]).optional(),
            "results": t.array(
                t.proxy(renames["ImageRepositorySpeechRecognitionResultOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryAmarnaCloudSpeechSignalsOut"])
    types["RepositoryWebrefSimplifiedCompositeDocIn"] = t.struct(
        {
            "refconDocumentMetadata": t.proxy(
                renames["RepositoryWebrefRefconRefconDocumentMetadataIn"]
            ).optional(),
            "sourceSnapshotType": t.string(),
            "documentMentionSpans": t.proxy(
                renames["RepositoryWebrefRefconDocumentMentionSpansIn"]
            ).optional(),
            "anchors": t.proxy(
                renames["RepositoryWebrefSimplifiedAnchorsIn"]
            ).optional(),
            "url": t.string().optional(),
            "matchingMetadata": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlMatchingMetadataIn"]
            ).optional(),
            "cdocContainer": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "webrefOutlinks": t.proxy(renames["Proto2BridgeMessageSetIn"]),
        }
    ).named(renames["RepositoryWebrefSimplifiedCompositeDocIn"])
    types["RepositoryWebrefSimplifiedCompositeDocOut"] = t.struct(
        {
            "refconDocumentMetadata": t.proxy(
                renames["RepositoryWebrefRefconRefconDocumentMetadataOut"]
            ).optional(),
            "sourceSnapshotType": t.string(),
            "documentMentionSpans": t.proxy(
                renames["RepositoryWebrefRefconDocumentMentionSpansOut"]
            ).optional(),
            "anchors": t.proxy(
                renames["RepositoryWebrefSimplifiedAnchorsOut"]
            ).optional(),
            "url": t.string().optional(),
            "matchingMetadata": t.proxy(
                renames["RepositoryWebrefPreprocessingUrlMatchingMetadataOut"]
            ).optional(),
            "cdocContainer": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "webrefOutlinks": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSimplifiedCompositeDocOut"])
    types["AssistantApiCoreTypesCalendarEventIn"] = t.struct(
        {
            "guestsCanSeeGuests": t.boolean().optional(),
            "end": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "visibility": t.string().optional(),
            "summary": t.string().optional(),
            "guestsCanInviteOthers": t.boolean().optional(),
            "start": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "otherAttendeesExcluded": t.boolean().optional(),
            "calendarId": t.string().optional(),
            "description": t.string().optional(),
            "rooms": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventRoomIn"])
            ).optional(),
            "recurringEventId": t.string().optional(),
            "backgroundColor": t.integer().optional(),
            "guestsCanModify": t.boolean().optional(),
            "location": t.string().optional(),
            "creator": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventAttendeeIn"]
            ).optional(),
            "htmlLink": t.string().optional(),
            "habitStatus": t.string().optional(),
            "organizer": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventAttendeeIn"]
            ).optional(),
            "eventId": t.string().optional(),
            "flairName": t.string().optional(),
            "habitId": t.string().optional(),
            "attendees": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventAttendeeIn"])
            ).optional(),
            "participationResponse": t.string().optional(),
            "foregroundColor": t.integer().optional(),
            "meetingContacts": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventMeetingContactIn"])
            ),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventIn"])
    types["AssistantApiCoreTypesCalendarEventOut"] = t.struct(
        {
            "guestsCanSeeGuests": t.boolean().optional(),
            "end": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "visibility": t.string().optional(),
            "summary": t.string().optional(),
            "guestsCanInviteOthers": t.boolean().optional(),
            "start": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "otherAttendeesExcluded": t.boolean().optional(),
            "calendarId": t.string().optional(),
            "description": t.string().optional(),
            "rooms": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventRoomOut"])
            ).optional(),
            "recurringEventId": t.string().optional(),
            "backgroundColor": t.integer().optional(),
            "guestsCanModify": t.boolean().optional(),
            "location": t.string().optional(),
            "creator": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventAttendeeOut"]
            ).optional(),
            "htmlLink": t.string().optional(),
            "habitStatus": t.string().optional(),
            "organizer": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventAttendeeOut"]
            ).optional(),
            "eventId": t.string().optional(),
            "flairName": t.string().optional(),
            "habitId": t.string().optional(),
            "attendees": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventAttendeeOut"])
            ).optional(),
            "participationResponse": t.string().optional(),
            "foregroundColor": t.integer().optional(),
            "meetingContacts": t.array(
                t.proxy(renames["AssistantApiCoreTypesCalendarEventMeetingContactOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "entityType": t.string(),
            "applicationId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "entityType": t.string(),
            "applicationId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoOut"])
    types["GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataIn"])
    types["GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1beta1CreateDocumentMetadataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiChannelDataIn"] = t.struct(
        {
            "channelId": t.string().optional(),
            "playlistCount": t.string(),
            "profileUrl": t.string().optional(),
            "usesYoutubeNames": t.boolean().optional(),
            "profilePictureUrl": t.string().optional(),
            "commentCount": t.string().optional(),
            "title": t.string().optional(),
            "videoCount": t.string().optional(),
            "subscriberCount": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiChannelDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiChannelDataOut"] = t.struct(
        {
            "channelId": t.string().optional(),
            "playlistCount": t.string(),
            "profileUrl": t.string().optional(),
            "usesYoutubeNames": t.boolean().optional(),
            "profilePictureUrl": t.string().optional(),
            "commentCount": t.string().optional(),
            "title": t.string().optional(),
            "videoCount": t.string().optional(),
            "subscriberCount": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiChannelDataOut"])
    types["QualityNsrPQDataIn"] = t.struct(
        {
            "deltaAutopilotScore": t.number(),
            "deltaLinkIncoming": t.number(),
            "chard": t.integer().optional(),
            "page2vecLq": t.number(),
            "numOffdomainAnchors": t.number().optional(),
            "linkIncoming": t.number(),
            "linkOutgoing": t.number(),
            "subchunkData": t.array(t.proxy(renames["QualityNsrPQDataSubchunkDataIn"])),
            "tofu": t.number().optional(),
            "deltaLinkOutgoing": t.number(),
            "vlq": t.number().optional(),
            "urlAutopilotScore": t.number(),
            "deltaPageQuality": t.number().optional(),
            "deltaSubchunkAdjustment": t.number().optional(),
        }
    ).named(renames["QualityNsrPQDataIn"])
    types["QualityNsrPQDataOut"] = t.struct(
        {
            "deltaAutopilotScore": t.number(),
            "deltaLinkIncoming": t.number(),
            "chard": t.integer().optional(),
            "page2vecLq": t.number(),
            "numOffdomainAnchors": t.number().optional(),
            "linkIncoming": t.number(),
            "linkOutgoing": t.number(),
            "subchunkData": t.array(
                t.proxy(renames["QualityNsrPQDataSubchunkDataOut"])
            ),
            "tofu": t.number().optional(),
            "deltaLinkOutgoing": t.number(),
            "vlq": t.number().optional(),
            "urlAutopilotScore": t.number(),
            "deltaPageQuality": t.number().optional(),
            "deltaSubchunkAdjustment": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrPQDataOut"])
    types["QualityLabelsGoogleLabelDataLabelProviderIn"] = t.struct(
        {
            "id": t.string().optional(),
            "labelBucket": t.integer().optional(),
            "name": t.string().optional(),
            "feed": t.boolean().optional(),
            "labelValue": t.number(),
        }
    ).named(renames["QualityLabelsGoogleLabelDataLabelProviderIn"])
    types["QualityLabelsGoogleLabelDataLabelProviderOut"] = t.struct(
        {
            "id": t.string().optional(),
            "labelBucket": t.integer().optional(),
            "name": t.string().optional(),
            "feed": t.boolean().optional(),
            "labelValue": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityLabelsGoogleLabelDataLabelProviderOut"])
    types["AssistantApiGacsCapabilitiesIn"] = t.struct(
        {
            "responseConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1ResponseConfigIn"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "ttsEncoding": t.string().optional(),
        }
    ).named(renames["AssistantApiGacsCapabilitiesIn"])
    types["AssistantApiGacsCapabilitiesOut"] = t.struct(
        {
            "responseConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1ResponseConfigOut"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "ttsEncoding": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiGacsCapabilitiesOut"])
    types["LocalWWWInfoClusterIn"] = t.struct(
        {
            "phoneFprint": t.string(),
            "addrFprint": t.string(),
            "makePlusboxVisible": t.boolean().optional(),
            "confidence": t.number().optional(),
            "clusterid": t.string(),
            "phoneNumber": t.proxy(renames["TelephoneNumberIn"]),
            "source": t.array(t.string()),
            "isPlusbox": t.boolean().optional(),
            "title": t.string(),
            "showInSnippets": t.boolean(),
            "level": t.integer().optional(),
            "pageTypeFlags": t.integer().optional(),
            "hoursSource": t.string(),
            "featureType": t.integer().optional(),
            "longitudeE6": t.integer(),
            "includeInIndex": t.boolean(),
            "latitudeE6": t.integer(),
            "clusterdocid": t.string(),
            "relevance": t.number().optional(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoIn"]).optional(),
            "menuUrl": t.array(t.string()).optional(),
            "annotationConfidence": t.number().optional(),
            "postalAddress": t.proxy(renames["PostalAddressIn"]),
        }
    ).named(renames["LocalWWWInfoClusterIn"])
    types["LocalWWWInfoClusterOut"] = t.struct(
        {
            "phoneFprint": t.string(),
            "addrFprint": t.string(),
            "makePlusboxVisible": t.boolean().optional(),
            "confidence": t.number().optional(),
            "clusterid": t.string(),
            "phoneNumber": t.proxy(renames["TelephoneNumberOut"]),
            "source": t.array(t.string()),
            "isPlusbox": t.boolean().optional(),
            "title": t.string(),
            "showInSnippets": t.boolean(),
            "level": t.integer().optional(),
            "pageTypeFlags": t.integer().optional(),
            "hoursSource": t.string(),
            "featureType": t.integer().optional(),
            "longitudeE6": t.integer(),
            "includeInIndex": t.boolean(),
            "latitudeE6": t.integer(),
            "clusterdocid": t.string(),
            "relevance": t.number().optional(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoOut"]).optional(),
            "menuUrl": t.array(t.string()).optional(),
            "annotationConfidence": t.number().optional(),
            "postalAddress": t.proxy(renames["PostalAddressOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoClusterOut"])
    types["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"] = t.struct(
        {"languageCode": t.string().optional(), "confidence": t.number().optional()}
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"])
    types["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"] = t.struct(
        {
            "languageCode": t.string().optional(),
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"])
    types["AbuseiamClientIn"] = t.struct(
        {"subservice": t.string().optional(), "id": t.string()}
    ).named(renames["AbuseiamClientIn"])
    types["AbuseiamClientOut"] = t.struct(
        {
            "subservice": t.string().optional(),
            "id": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamClientOut"])
    types["VideoContentSearchDolphinFeaturesIn"] = t.struct(
        {
            "timeMs": t.string().optional(),
            "url": t.string().optional(),
            "title": t.string().optional(),
            "answer": t.string().optional(),
            "altQuery": t.string().optional(),
            "query": t.string().optional(),
        }
    ).named(renames["VideoContentSearchDolphinFeaturesIn"])
    types["VideoContentSearchDolphinFeaturesOut"] = t.struct(
        {
            "timeMs": t.string().optional(),
            "url": t.string().optional(),
            "title": t.string().optional(),
            "answer": t.string().optional(),
            "altQuery": t.string().optional(),
            "query": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDolphinFeaturesOut"])
    types["IndexingMobileVoltCoreWebVitalsIn"] = t.struct(
        {
            "lcp": t.string().optional(),
            "inp": t.string(),
            "fid": t.string().optional(),
            "cls": t.string().optional(),
        }
    ).named(renames["IndexingMobileVoltCoreWebVitalsIn"])
    types["IndexingMobileVoltCoreWebVitalsOut"] = t.struct(
        {
            "lcp": t.string().optional(),
            "inp": t.string(),
            "fid": t.string().optional(),
            "cls": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMobileVoltCoreWebVitalsOut"])
    types["ResearchScamCoscamConjunctionIn"] = t.struct(
        {
            "disjunctionId": t.array(t.string()).optional(),
            "isPositive": t.array(t.boolean()),
        }
    ).named(renames["ResearchScamCoscamConjunctionIn"])
    types["ResearchScamCoscamConjunctionOut"] = t.struct(
        {
            "disjunctionId": t.array(t.string()).optional(),
            "isPositive": t.array(t.boolean()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamConjunctionOut"])
    types["QualitySherlockKnexAnnotationItemIn"] = t.struct(
        {
            "version": t.integer(),
            "calibratedScore": t.number().optional(),
            "score": t.number().optional(),
            "debugName": t.string(),
            "equivalentMid": t.string().optional(),
        }
    ).named(renames["QualitySherlockKnexAnnotationItemIn"])
    types["QualitySherlockKnexAnnotationItemOut"] = t.struct(
        {
            "version": t.integer(),
            "calibratedScore": t.number().optional(),
            "score": t.number().optional(),
            "debugName": t.string(),
            "equivalentMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySherlockKnexAnnotationItemOut"])
    types["VendingConsumerProtoTrustedGenomeHierarchyIn"] = t.struct(
        {
            "trustedGenomeType": t.string().optional(),
            "source": t.string().optional(),
            "hierarchyType": t.string().optional(),
            "entity": t.array(
                t.proxy(renames["VendingConsumerProtoTrustedGenomeEntityIn"])
            ).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeHierarchyIn"])
    types["VendingConsumerProtoTrustedGenomeHierarchyOut"] = t.struct(
        {
            "trustedGenomeType": t.string().optional(),
            "source": t.string().optional(),
            "hierarchyType": t.string().optional(),
            "entity": t.array(
                t.proxy(renames["VendingConsumerProtoTrustedGenomeEntityOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeHierarchyOut"])
    types["NlpSemanticParsingModelsRecurrenceIn"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "yearlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceYearlyPatternIn"]
            ).optional(),
            "frequency": t.string(),
            "time": t.proxy(renames["NlpSemanticParsingDatetimeDateTimeIn"]).optional(),
            "numInstancesInFrequency": t.integer().optional(),
            "recurrenceStart": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceRecurrenceStartIn"]
            ),
            "dailyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceDailyPatternIn"]
            ).optional(),
            "monthlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternIn"]
            ).optional(),
            "every": t.integer().optional(),
            "recurrenceEnd": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceRecurrenceEndIn"]
            ),
            "weeklyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceWeeklyPatternIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceIn"])
    types["NlpSemanticParsingModelsRecurrenceOut"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "yearlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceYearlyPatternOut"]
            ).optional(),
            "frequency": t.string(),
            "time": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "numInstancesInFrequency": t.integer().optional(),
            "recurrenceStart": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceRecurrenceStartOut"]
            ),
            "dailyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceDailyPatternOut"]
            ).optional(),
            "monthlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternOut"]
            ).optional(),
            "every": t.integer().optional(),
            "recurrenceEnd": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceRecurrenceEndOut"]
            ),
            "weeklyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceWeeklyPatternOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceOut"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentRequestIn"] = t.struct(
        {
            "updateOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1UpdateOptionsIn"]
            ).optional(),
            "cloudAiDocumentOption": t.proxy(
                renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn"]
            ).optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
            "document": t.proxy(renames["GoogleCloudContentwarehouseV1DocumentIn"]),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentRequestIn"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentRequestOut"] = t.struct(
        {
            "updateOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1UpdateOptionsOut"]
            ).optional(),
            "cloudAiDocumentOption": t.proxy(
                renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut"]
            ).optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "document": t.proxy(renames["GoogleCloudContentwarehouseV1DocumentOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentRequestOut"])
    types["VideoUserDataUnregisteredIn"] = t.struct(
        {
            "payload": t.string().optional(),
            "uuid": t.string(),
            "count": t.integer().optional(),
        }
    ).named(renames["VideoUserDataUnregisteredIn"])
    types["VideoUserDataUnregisteredOut"] = t.struct(
        {
            "payload": t.string().optional(),
            "uuid": t.string(),
            "count": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoUserDataUnregisteredOut"])
    types["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoIn"] = t.struct(
        {
            "hasCrossDeviceData": t.boolean().optional(),
            "lookupKey": t.string().optional(),
            "rawContactInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoIn"]
                )
            ).optional(),
            "id": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdIn"]
            ).optional(),
            "deviceContactMetadata": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataIn"
                ]
            ).optional(),
            "lastClientUpdateTime": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoOut"] = t.struct(
        {
            "hasCrossDeviceData": t.boolean().optional(),
            "lookupKey": t.string().optional(),
            "rawContactInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfoOut"
                    ]
                )
            ).optional(),
            "id": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactIdOut"]
            ).optional(),
            "deviceContactMetadata": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadataOut"
                ]
            ).optional(),
            "lastClientUpdateTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoOut"])
    types["GeostoreStableFieldPathProtoStableFieldSelectorIn"] = t.struct(
        {"fieldNum": t.integer().optional(), "versionToken": t.string().optional()}
    ).named(renames["GeostoreStableFieldPathProtoStableFieldSelectorIn"])
    types["GeostoreStableFieldPathProtoStableFieldSelectorOut"] = t.struct(
        {
            "fieldNum": t.integer().optional(),
            "versionToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreStableFieldPathProtoStableFieldSelectorOut"])
    types["GeostoreInferredGeometryProtoIn"] = t.struct(
        {
            "definesGeometryFor": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "geometryComposition": t.proxy(
                renames["GeostoreGeometryCompositionIn"]
            ).optional(),
        }
    ).named(renames["GeostoreInferredGeometryProtoIn"])
    types["GeostoreInferredGeometryProtoOut"] = t.struct(
        {
            "definesGeometryFor": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "geometryComposition": t.proxy(
                renames["GeostoreGeometryCompositionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInferredGeometryProtoOut"])
    types["SocialCommonAttachmentAttachmentIn"] = t.struct(
        {
            "embedItem": t.proxy(renames["EmbedsEmbedClientItemIn"]).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["SocialCommonAttachmentAttachmentIn"])
    types["SocialCommonAttachmentAttachmentOut"] = t.struct(
        {
            "embedItem": t.proxy(renames["EmbedsEmbedClientItemOut"]).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonAttachmentAttachmentOut"])
    types["GeostoreFeatureIdListProtoIn"] = t.struct(
        {"id": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional()}
    ).named(renames["GeostoreFeatureIdListProtoIn"])
    types["GeostoreFeatureIdListProtoOut"] = t.struct(
        {
            "id": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureIdListProtoOut"])
    types["MapsQualitySpecialWordsFlagsIn"] = t.struct(
        {
            "isForbiddenWord": t.boolean().optional(),
            "isNotForLegacyStreetNumberDetection": t.boolean().optional(),
            "isStreetNumberIdentifier": t.boolean().optional(),
            "isPenalizedIfMissing": t.boolean().optional(),
            "isDirectionalModifier": t.boolean().optional(),
            "isNumber": t.boolean().optional(),
            "isIntersectionConnector": t.boolean().optional(),
            "isNumberSuffix": t.boolean().optional(),
            "isAlleyAffix": t.boolean().optional(),
            "isPersonalTitle": t.boolean().optional(),
            "isStopWord": t.boolean().optional(),
            "isOptional": t.boolean().optional(),
            "isNameSynonym": t.boolean().optional(),
            "isLanguageIndicator": t.boolean().optional(),
            "isDeconstructible": t.boolean().optional(),
            "isNotOptionalizable": t.boolean().optional(),
            "isOrdinalNumber": t.boolean().optional(),
            "isLandmarkIdentifier": t.boolean().optional(),
            "isCommonWord": t.boolean().optional(),
            "isHouseIdIdentifier": t.boolean().optional(),
            "isDistanceMarker": t.boolean().optional(),
        }
    ).named(renames["MapsQualitySpecialWordsFlagsIn"])
    types["MapsQualitySpecialWordsFlagsOut"] = t.struct(
        {
            "isForbiddenWord": t.boolean().optional(),
            "isNotForLegacyStreetNumberDetection": t.boolean().optional(),
            "isStreetNumberIdentifier": t.boolean().optional(),
            "isPenalizedIfMissing": t.boolean().optional(),
            "isDirectionalModifier": t.boolean().optional(),
            "isNumber": t.boolean().optional(),
            "isIntersectionConnector": t.boolean().optional(),
            "isNumberSuffix": t.boolean().optional(),
            "isAlleyAffix": t.boolean().optional(),
            "isPersonalTitle": t.boolean().optional(),
            "isStopWord": t.boolean().optional(),
            "isOptional": t.boolean().optional(),
            "isNameSynonym": t.boolean().optional(),
            "isLanguageIndicator": t.boolean().optional(),
            "isDeconstructible": t.boolean().optional(),
            "isNotOptionalizable": t.boolean().optional(),
            "isOrdinalNumber": t.boolean().optional(),
            "isLandmarkIdentifier": t.boolean().optional(),
            "isCommonWord": t.boolean().optional(),
            "isHouseIdIdentifier": t.boolean().optional(),
            "isDistanceMarker": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MapsQualitySpecialWordsFlagsOut"])
    types["VideoYoutubeCommentsClassificationProtoSmartSuggestionIn"] = t.struct(
        {
            "score": t.number().optional(),
            "replyContent": t.string().optional(),
            "diversificationThreshold": t.number().optional(),
            "likelihoodBiasWeight": t.number().optional(),
        }
    ).named(renames["VideoYoutubeCommentsClassificationProtoSmartSuggestionIn"])
    types["VideoYoutubeCommentsClassificationProtoSmartSuggestionOut"] = t.struct(
        {
            "score": t.number().optional(),
            "replyContent": t.string().optional(),
            "diversificationThreshold": t.number().optional(),
            "likelihoodBiasWeight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoYoutubeCommentsClassificationProtoSmartSuggestionOut"])
    types["ResearchScienceSearchCitationIn"] = t.struct(
        {
            "citation": t.string(),
            "safeHtmlCitation": t.proxy(
                renames["WebutilHtmlTypesSafeHtmlProtoIn"]
            ).optional(),
        }
    ).named(renames["ResearchScienceSearchCitationIn"])
    types["ResearchScienceSearchCitationOut"] = t.struct(
        {
            "citation": t.string(),
            "safeHtmlCitation": t.proxy(
                renames["WebutilHtmlTypesSafeHtmlProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchCitationOut"])
    types["AssistantApiMessageCapabilitiesIn"] = t.struct(
        {
            "fallbackToTetheredDeviceAppCapabilities": t.boolean().optional(),
            "supportedRecipientTypes": t.array(t.string()).optional(),
            "preferTargetingPrimaryDevice": t.boolean().optional(),
        }
    ).named(renames["AssistantApiMessageCapabilitiesIn"])
    types["AssistantApiMessageCapabilitiesOut"] = t.struct(
        {
            "fallbackToTetheredDeviceAppCapabilities": t.boolean().optional(),
            "supportedRecipientTypes": t.array(t.string()).optional(),
            "preferTargetingPrimaryDevice": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiMessageCapabilitiesOut"])
    types["VideoThumbnailsThumbnailScoreIn"] = t.struct(
        {
            "colorSampling": t.integer().optional(),
            "isAssigned": t.boolean().optional(),
            "modelVersion": t.string(),
            "denseGeneralExtraFeatures": t.proxy(
                renames["DrishtiFeatureExtraIn"]
            ).optional(),
            "sparseFeatures": t.proxy(renames["DrishtiSparseFeatureDataIn"]).optional(),
            "thumbnailVersion": t.string().optional(),
            "type": t.string(),
            "thumbnailSet": t.string(),
            "externalImageId": t.string().optional(),
            "denseFeatures": t.array(t.number()).optional(),
            "score": t.number(),
            "quantizedFeatures": t.string().optional(),
            "checksum": t.string().optional(),
            "isInstant": t.boolean().optional(),
            "overwriteReason": t.string(),
        }
    ).named(renames["VideoThumbnailsThumbnailScoreIn"])
    types["VideoThumbnailsThumbnailScoreOut"] = t.struct(
        {
            "colorSampling": t.integer().optional(),
            "isAssigned": t.boolean().optional(),
            "modelVersion": t.string(),
            "denseGeneralExtraFeatures": t.proxy(
                renames["DrishtiFeatureExtraOut"]
            ).optional(),
            "sparseFeatures": t.proxy(
                renames["DrishtiSparseFeatureDataOut"]
            ).optional(),
            "thumbnailVersion": t.string().optional(),
            "type": t.string(),
            "thumbnailSet": t.string(),
            "externalImageId": t.string().optional(),
            "denseFeatures": t.array(t.number()).optional(),
            "score": t.number(),
            "quantizedFeatures": t.string().optional(),
            "checksum": t.string().optional(),
            "isInstant": t.boolean().optional(),
            "overwriteReason": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoThumbnailsThumbnailScoreOut"])
    types["QualityPreviewSnippetExperimentalFeaturesIn"] = t.struct(
        {
            "numTidbits": t.integer(),
            "numQueryItems": t.integer(),
            "isLikelyHomepage": t.boolean(),
            "numVisibleTokens": t.integer(),
            "radish": t.proxy(renames["QualityPreviewSnippetRadishFeaturesIn"]),
        }
    ).named(renames["QualityPreviewSnippetExperimentalFeaturesIn"])
    types["QualityPreviewSnippetExperimentalFeaturesOut"] = t.struct(
        {
            "numTidbits": t.integer(),
            "numQueryItems": t.integer(),
            "isLikelyHomepage": t.boolean(),
            "numVisibleTokens": t.integer(),
            "radish": t.proxy(renames["QualityPreviewSnippetRadishFeaturesOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetExperimentalFeaturesOut"])
    types["GeostoreBusinessChainProtoIn"] = t.struct(
        {
            "canonicalGconcepts": t.array(
                t.proxy(renames["GeostoreCanonicalGConceptProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreBusinessChainProtoIn"])
    types["GeostoreBusinessChainProtoOut"] = t.struct(
        {
            "canonicalGconcepts": t.array(
                t.proxy(renames["GeostoreCanonicalGConceptProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBusinessChainProtoOut"])
    types["CompositeDocIndexingInfoIn"] = t.struct(
        {
            "urlChangerate": t.proxy(
                renames["CrawlerChangerateUrlChangerateIn"]
            ).optional(),
            "hostid": t.string().optional(),
            "noLongerCanonicalTimestamp": t.string().optional(),
            "urlHistory": t.proxy(renames["CrawlerChangerateUrlHistoryIn"]).optional(),
            "isSiblingDeletion": t.boolean().optional(),
            "demotionTags": t.array(t.string()),
            "convertToRobotedReason": t.integer().optional(),
            "imageIndexingInfo": t.proxy(
                renames["ImageSearchImageIndexingInfoIn"]
            ).optional(),
            "normalizedClickScore": t.number().optional(),
            "contentProtected": t.boolean().optional(),
            "cdocBuildInfo": t.proxy(
                renames["IndexingDocjoinerCDocBuildInfoIn"]
            ).optional(),
            "tracingId": t.array(t.string()).optional(),
            "ieIdentifier": t.string().optional(),
            "crawlStatus": t.integer().optional(),
            "selectionTierRank": t.number().optional(),
            "rawNavboost": t.integer().optional(),
            "freshdocsCorpora": t.array(t.string()),
            "indexingTs": t.string().optional(),
            "videoIndexingInfo": t.proxy(
                renames["ImageRepositoryVideoIndexingInfoIn"]
            ).optional(),
            "rowTimestamp": t.string().optional(),
            "errorType": t.integer().optional(),
            "urlPatternSignals": t.proxy(
                renames["IndexingSignalAggregatorUrlPatternSignalsIn"]
            ).optional(),
        }
    ).named(renames["CompositeDocIndexingInfoIn"])
    types["CompositeDocIndexingInfoOut"] = t.struct(
        {
            "urlChangerate": t.proxy(
                renames["CrawlerChangerateUrlChangerateOut"]
            ).optional(),
            "hostid": t.string().optional(),
            "noLongerCanonicalTimestamp": t.string().optional(),
            "urlHistory": t.proxy(renames["CrawlerChangerateUrlHistoryOut"]).optional(),
            "isSiblingDeletion": t.boolean().optional(),
            "demotionTags": t.array(t.string()),
            "convertToRobotedReason": t.integer().optional(),
            "imageIndexingInfo": t.proxy(
                renames["ImageSearchImageIndexingInfoOut"]
            ).optional(),
            "normalizedClickScore": t.number().optional(),
            "contentProtected": t.boolean().optional(),
            "cdocBuildInfo": t.proxy(
                renames["IndexingDocjoinerCDocBuildInfoOut"]
            ).optional(),
            "tracingId": t.array(t.string()).optional(),
            "ieIdentifier": t.string().optional(),
            "crawlStatus": t.integer().optional(),
            "selectionTierRank": t.number().optional(),
            "rawNavboost": t.integer().optional(),
            "freshdocsCorpora": t.array(t.string()),
            "indexingTs": t.string().optional(),
            "videoIndexingInfo": t.proxy(
                renames["ImageRepositoryVideoIndexingInfoOut"]
            ).optional(),
            "rowTimestamp": t.string().optional(),
            "errorType": t.integer().optional(),
            "urlPatternSignals": t.proxy(
                renames["IndexingSignalAggregatorUrlPatternSignalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocIndexingInfoOut"])
    types["LocalWWWInfoOpeningHoursIn"] = t.struct(
        {
            "hoursFprint": t.string(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoIn"]),
        }
    ).named(renames["LocalWWWInfoOpeningHoursIn"])
    types["LocalWWWInfoOpeningHoursOut"] = t.struct(
        {
            "hoursFprint": t.string(),
            "hours": t.proxy(renames["GeostoreTimeScheduleProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoOpeningHoursOut"])
    types["AttentionalEntitiesMentionPropertiesSourceUserIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceUserIn"])
    types["AttentionalEntitiesMentionPropertiesSourceUserOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceUserOut"])
    types["VideoMediaOverviewIn"] = t.struct(
        {
            "audioOverview": t.array(
                t.proxy(renames["VideoMediaOverviewAudioOverviewIn"])
            ),
            "colorDynamicRange": t.string(),
            "stereoMode": t.string(),
            "creationTimeStampUsec": t.string().optional(),
            "videoOverview": t.array(
                t.proxy(renames["VideoMediaOverviewVideoOverviewIn"])
            ),
            "aspectRatio": t.string(),
            "dataOverview": t.array(
                t.proxy(renames["VideoMediaOverviewDataOverviewIn"])
            ),
            "hasChapters": t.boolean().optional(),
            "origin": t.string(),
            "orientation": t.string().optional(),
            "authoringTool": t.string(),
            "resolution": t.string().optional(),
            "frameRate": t.string(),
            "timedtextOverview": t.array(
                t.proxy(renames["VideoMediaOverviewTimedTextOverviewIn"])
            ),
            "spatialAudioMode": t.string(),
            "mediaClipInfoOverview": t.proxy(
                renames["VideoMediaOverviewMediaClipInfoOverviewIn"]
            ),
            "projection": t.string(),
            "wallyMeshType": t.string().optional(),
        }
    ).named(renames["VideoMediaOverviewIn"])
    types["VideoMediaOverviewOut"] = t.struct(
        {
            "audioOverview": t.array(
                t.proxy(renames["VideoMediaOverviewAudioOverviewOut"])
            ),
            "colorDynamicRange": t.string(),
            "stereoMode": t.string(),
            "creationTimeStampUsec": t.string().optional(),
            "videoOverview": t.array(
                t.proxy(renames["VideoMediaOverviewVideoOverviewOut"])
            ),
            "aspectRatio": t.string(),
            "dataOverview": t.array(
                t.proxy(renames["VideoMediaOverviewDataOverviewOut"])
            ),
            "hasChapters": t.boolean().optional(),
            "origin": t.string(),
            "orientation": t.string().optional(),
            "authoringTool": t.string(),
            "resolution": t.string().optional(),
            "frameRate": t.string(),
            "timedtextOverview": t.array(
                t.proxy(renames["VideoMediaOverviewTimedTextOverviewOut"])
            ),
            "spatialAudioMode": t.string(),
            "mediaClipInfoOverview": t.proxy(
                renames["VideoMediaOverviewMediaClipInfoOverviewOut"]
            ),
            "projection": t.string(),
            "wallyMeshType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaOverviewOut"])
    types["AssistantApiGestureCapabilitiesIn"] = t.struct(
        {
            "tapGestureCapable": t.boolean().optional(),
            "gestureSensing": t.boolean().optional(),
            "omniswipeGestureCapable": t.boolean().optional(),
        }
    ).named(renames["AssistantApiGestureCapabilitiesIn"])
    types["AssistantApiGestureCapabilitiesOut"] = t.struct(
        {
            "tapGestureCapable": t.boolean().optional(),
            "gestureSensing": t.boolean().optional(),
            "omniswipeGestureCapable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiGestureCapabilitiesOut"])
    types["VideoContentSearchEntityGroupInfoIn"] = t.struct(
        {"label": t.string().optional(), "collectionId": t.string().optional()}
    ).named(renames["VideoContentSearchEntityGroupInfoIn"])
    types["VideoContentSearchEntityGroupInfoOut"] = t.struct(
        {
            "label": t.string().optional(),
            "collectionId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchEntityGroupInfoOut"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentActionIn"] = t.struct(
        {"enableHardDelete": t.boolean().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentActionIn"])
    types["GoogleCloudContentwarehouseV1DeleteDocumentActionOut"] = t.struct(
        {
            "enableHardDelete": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DeleteDocumentActionOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataIn"
    ] = t.struct(
        {
            "regionCode": t.string(),
            "validationResult": t.string(),
            "countryCode": t.integer(),
            "internationalNumber": t.string(),
            "nationalNumber": t.string(),
            "isValid": t.boolean(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataOut"
    ] = t.struct(
        {
            "regionCode": t.string(),
            "validationResult": t.string(),
            "countryCode": t.integer(),
            "internationalNumber": t.string(),
            "nationalNumber": t.string(),
            "isValid": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nDataOut"
        ]
    )
    types["ResearchScamNumericRestrictNamespaceIn"] = t.struct(
        {
            "valueFloat": t.number(),
            "namespace": t.string().optional(),
            "valueInt": t.string().optional(),
            "valueDouble": t.number(),
            "op": t.string().optional(),
        }
    ).named(renames["ResearchScamNumericRestrictNamespaceIn"])
    types["ResearchScamNumericRestrictNamespaceOut"] = t.struct(
        {
            "valueFloat": t.number(),
            "namespace": t.string().optional(),
            "valueInt": t.string().optional(),
            "valueDouble": t.number(),
            "op": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamNumericRestrictNamespaceOut"])
    types["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresIn"] = t.struct(
        {
            "detectedDefects": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectIn"
                    ]
                )
            ).optional(),
            "qualityScore": t.number().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresIn"])
    types["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresOut"] = t.struct(
        {
            "detectedDefects": t.array(
                t.proxy(
                    renames[
                        "GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectOut"
                    ]
                )
            ).optional(),
            "qualityScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresOut"])
    types["RichsnippetsDataObjectIn"] = t.struct(
        {
            "source": t.string(),
            "AccessKey": t.string(),
            "type": t.string().optional(),
            "attribute": t.array(t.proxy(renames["RichsnippetsDataObjectAttributeIn"])),
        }
    ).named(renames["RichsnippetsDataObjectIn"])
    types["RichsnippetsDataObjectOut"] = t.struct(
        {
            "source": t.string(),
            "AccessKey": t.string(),
            "type": t.string().optional(),
            "attribute": t.array(
                t.proxy(renames["RichsnippetsDataObjectAttributeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RichsnippetsDataObjectOut"])
    types["YoutubeCommentsSentimentSentimentIn"] = t.struct(
        {
            "score": t.number().optional(),
            "polarity": t.number().optional(),
            "magnitude": t.number().optional(),
            "entitySentiment": t.array(
                t.proxy(
                    renames[
                        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationIn"
                    ]
                )
            ),
        }
    ).named(renames["YoutubeCommentsSentimentSentimentIn"])
    types["YoutubeCommentsSentimentSentimentOut"] = t.struct(
        {
            "score": t.number().optional(),
            "polarity": t.number().optional(),
            "magnitude": t.number().optional(),
            "entitySentiment": t.array(
                t.proxy(
                    renames[
                        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeCommentsSentimentSentimentOut"])
    types["AppsPeopleOzExternalMergedpeopleapiLatLngIn"] = t.struct(
        {"lng": t.number(), "lat": t.number()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLatLngIn"])
    types["AppsPeopleOzExternalMergedpeopleapiLatLngOut"] = t.struct(
        {
            "lng": t.number(),
            "lat": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLatLngOut"])
    types["GeostoreTransitLineProtoIn"] = t.struct(
        {
            "labelTextColor": t.integer().optional(),
            "stations": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "vehicleType": t.string().optional(),
            "agency": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
            "labelBackgroundColor": t.integer().optional(),
        }
    ).named(renames["GeostoreTransitLineProtoIn"])
    types["GeostoreTransitLineProtoOut"] = t.struct(
        {
            "labelTextColor": t.integer().optional(),
            "stations": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "vehicleType": t.string().optional(),
            "agency": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])).optional(),
            "labelBackgroundColor": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTransitLineProtoOut"])
    types["AssistantApiCoreTypesCalendarEventMeetingContactIn"] = t.struct(
        {
            "universalPinNumber": t.string().optional(),
            "source": t.string(),
            "conferenceId": t.string().optional(),
            "url": t.string().optional(),
            "dialInNumberClasses": t.array(t.string()),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderIn"]).optional(),
            "phoneNumberUri": t.string().optional(),
            "regionCode": t.string().optional(),
            "pinNumber": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventMeetingContactIn"])
    types["AssistantApiCoreTypesCalendarEventMeetingContactOut"] = t.struct(
        {
            "universalPinNumber": t.string().optional(),
            "source": t.string(),
            "conferenceId": t.string().optional(),
            "url": t.string().optional(),
            "dialInNumberClasses": t.array(t.string()),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderOut"]).optional(),
            "phoneNumberUri": t.string().optional(),
            "regionCode": t.string().optional(),
            "pinNumber": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventMeetingContactOut"])
    types["RepositoryWebrefRangeAnnotationsIn"] = t.struct(
        {
            "segmentMentions": t.array(
                t.proxy(renames["RepositoryWebrefSegmentMentionsIn"])
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefRangeAnnotationsIn"])
    types["RepositoryWebrefRangeAnnotationsOut"] = t.struct(
        {
            "segmentMentions": t.array(
                t.proxy(renames["RepositoryWebrefSegmentMentionsOut"])
            ).optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRangeAnnotationsOut"])
    types["MustangReposWwwSnippetsSnippetCandidateIn"] = t.struct(
        {
            "text": t.string(),
            "features": t.array(
                t.proxy(renames["MustangReposWwwSnippetsCandidateFeatureIn"])
            ),
            "dataSourceType": t.integer().optional(),
        }
    ).named(renames["MustangReposWwwSnippetsSnippetCandidateIn"])
    types["MustangReposWwwSnippetsSnippetCandidateOut"] = t.struct(
        {
            "text": t.string(),
            "features": t.array(
                t.proxy(renames["MustangReposWwwSnippetsCandidateFeatureOut"])
            ),
            "dataSourceType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MustangReposWwwSnippetsSnippetCandidateOut"])
    types["WeboftrustLiveResultsDocAttachmentsIn"] = t.struct(
        {
            "docBoost": t.array(
                t.proxy(renames["WeboftrustLiveResultDocBoostDataIn"])
            ).optional(),
            "providerAttachment": t.array(
                t.proxy(renames["WeboftrustLiveResultProviderDocAttachmentIn"])
            ).optional(),
        }
    ).named(renames["WeboftrustLiveResultsDocAttachmentsIn"])
    types["WeboftrustLiveResultsDocAttachmentsOut"] = t.struct(
        {
            "docBoost": t.array(
                t.proxy(renames["WeboftrustLiveResultDocBoostDataOut"])
            ).optional(),
            "providerAttachment": t.array(
                t.proxy(renames["WeboftrustLiveResultProviderDocAttachmentOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WeboftrustLiveResultsDocAttachmentsOut"])
    types["GoogleCloudDocumentaiV1DocumentPageFormFieldIn"] = t.struct(
        {
            "correctedValueText": t.string().optional(),
            "valueDetectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "correctedKeyText": t.string().optional(),
            "valueType": t.string().optional(),
            "fieldValue": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "fieldName": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "nameDetectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageFormFieldIn"])
    types["GoogleCloudDocumentaiV1DocumentPageFormFieldOut"] = t.struct(
        {
            "correctedValueText": t.string().optional(),
            "valueDetectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "correctedKeyText": t.string().optional(),
            "valueType": t.string().optional(),
            "fieldValue": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "fieldName": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "nameDetectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageFormFieldOut"])
    types["GeostorePoliticalProtoIn"] = t.struct(
        {
            "population": t.string().optional(),
            "literacyPercent": t.number().optional(),
            "capital": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "grossDomesticProductUsdMillions": t.number().optional(),
        }
    ).named(renames["GeostorePoliticalProtoIn"])
    types["GeostorePoliticalProtoOut"] = t.struct(
        {
            "population": t.string().optional(),
            "literacyPercent": t.number().optional(),
            "capital": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "grossDomesticProductUsdMillions": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePoliticalProtoOut"])
    types["KnowledgeAnswersIntentQueryIdentifierIn"] = t.struct(
        {"id": t.string(), "idType": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryIdentifierIn"])
    types["KnowledgeAnswersIntentQueryIdentifierOut"] = t.struct(
        {
            "id": t.string(),
            "idType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryIdentifierOut"])
    types["NlpSaftEntityTypeIn"] = t.struct(
        {
            "score": t.number().optional(),
            "basedOnMention": t.integer().optional(),
            "domain": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["NlpSaftEntityTypeIn"])
    types["NlpSaftEntityTypeOut"] = t.struct(
        {
            "score": t.number().optional(),
            "basedOnMention": t.integer().optional(),
            "domain": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityTypeOut"])
    types["MustangSnippetsRenderedTokenIn"] = t.struct(
        {
            "byteOffsetBegin": t.integer().optional(),
            "byteOffsetEnd": t.integer().optional(),
            "bolded": t.boolean().optional(),
            "tokenPos": t.string(),
            "section": t.string().optional(),
        }
    ).named(renames["MustangSnippetsRenderedTokenIn"])
    types["MustangSnippetsRenderedTokenOut"] = t.struct(
        {
            "byteOffsetBegin": t.integer().optional(),
            "byteOffsetEnd": t.integer().optional(),
            "bolded": t.boolean().optional(),
            "tokenPos": t.string(),
            "section": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MustangSnippetsRenderedTokenOut"])
    types["GoogleTypeIntervalIn"] = t.struct(
        {"startTime": t.string().optional(), "endTime": t.string().optional()}
    ).named(renames["GoogleTypeIntervalIn"])
    types["GoogleTypeIntervalOut"] = t.struct(
        {
            "startTime": t.string().optional(),
            "endTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeIntervalOut"])
    types["AssistantApiCoreTypesDeviceUserIdentityIn"] = t.struct(
        {
            "gaiaId": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesDeviceUserIdentityIn"])
    types["AssistantApiCoreTypesDeviceUserIdentityOut"] = t.struct(
        {
            "gaiaId": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesDeviceUserIdentityOut"])
    types["AssistantTeleportTeleportNicknameSignalsIn"] = t.struct(
        {
            "installInfo": t.string().optional(),
            "isGeneric": t.boolean().optional(),
            "hasLocationInterpretation": t.boolean().optional(),
            "source": t.string(),
            "nicknameTier": t.string().optional(),
        }
    ).named(renames["AssistantTeleportTeleportNicknameSignalsIn"])
    types["AssistantTeleportTeleportNicknameSignalsOut"] = t.struct(
        {
            "installInfo": t.string().optional(),
            "isGeneric": t.boolean().optional(),
            "hasLocationInterpretation": t.boolean().optional(),
            "source": t.string(),
            "nicknameTier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantTeleportTeleportNicknameSignalsOut"])
    types["GeostoreDurationBasedRateProtoIn"] = t.struct(
        {
            "isFree": t.boolean().optional(),
            "rangeEndSeconds": t.integer().optional(),
            "rangeStartSeconds": t.integer().optional(),
            "periodicitySeconds": t.integer().optional(),
            "price": t.array(t.proxy(renames["FreebaseTopicIn"])).optional(),
        }
    ).named(renames["GeostoreDurationBasedRateProtoIn"])
    types["GeostoreDurationBasedRateProtoOut"] = t.struct(
        {
            "isFree": t.boolean().optional(),
            "rangeEndSeconds": t.integer().optional(),
            "rangeStartSeconds": t.integer().optional(),
            "periodicitySeconds": t.integer().optional(),
            "price": t.array(t.proxy(renames["FreebaseTopicOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDurationBasedRateProtoOut"])
    types["GoogleInternalAppsWaldoV1alphaDoNotDisturbIn"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "nextAvailable": t.string().optional(),
            "occupiedUntil": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaDoNotDisturbIn"])
    types["GoogleInternalAppsWaldoV1alphaDoNotDisturbOut"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "nextAvailable": t.string().optional(),
            "occupiedUntil": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaDoNotDisturbOut"])
    types["AttentionalEntitiesMentionPropertiesSourceClientIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceClientIn"])
    types["AttentionalEntitiesMentionPropertiesSourceClientOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceClientOut"])
    types["MultiscalePointerSpanIn"] = t.struct(
        {"start": t.integer().optional(), "limit": t.integer().optional()}
    ).named(renames["MultiscalePointerSpanIn"])
    types["MultiscalePointerSpanOut"] = t.struct(
        {
            "start": t.integer().optional(),
            "limit": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MultiscalePointerSpanOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueIn"
    ] = t.struct(
        {
            "eventId": t.proxy(renames["EventIdMessageIn"]).optional(),
            "valueIndex": t.integer().optional(),
            "metadataValueIndex": t.integer().optional(),
            "text": t.string().optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueIn"]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueOut"
    ] = t.struct(
        {
            "eventId": t.proxy(renames["EventIdMessageOut"]).optional(),
            "valueIndex": t.integer().optional(),
            "metadataValueIndex": t.integer().optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueOut"]
    )
    types["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerIn"] = t.struct(
        {"query": t.string()}
    ).named(renames["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerIn"])
    types["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerOut"] = t.struct(
        {"query": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantVerticalsHomeautomationProtoCommonVoiceTriggerOut"])
    types["TrawlerTrawlerPrivateFetchReplyDataIn"] = t.struct(
        {
            "isBidiStreamingFetch": t.boolean().optional(),
            "isFromGrpcProxy": t.boolean().optional(),
            "PostDataSize": t.string().optional(),
            "multiverseClientIdentifier": t.proxy(
                renames["TrawlerMultiverseClientIdentifierIn"]
            ).optional(),
            "originalClientParams": t.proxy(
                renames["TrawlerOriginalClientParamsIn"]
            ).optional(),
            "resourceBucket": t.string().optional(),
            "dependentFetchType": t.string().optional(),
            "Is5xxHostId": t.boolean().optional(),
            "cdnProvider": t.string(),
            "IsRobotsFetch": t.boolean().optional(),
            "bypassedHostOverfull": t.boolean().optional(),
            "subResourceBucket": t.string(),
            "HintIPAddress": t.string().optional(),
            "ResponseBytes": t.string().optional(),
            "isVpcTraffic": t.boolean().optional(),
            "cacheAcceptableAfterDate": t.integer().optional(),
            "Producer": t.string().optional(),
            "downloadFileName": t.string().optional(),
            "isFloonetFetch": t.boolean().optional(),
            "authenticationInfo": t.string().optional(),
            "UserAgentSent": t.string().optional(),
            "numDroppedReplies": t.string().optional(),
            "HadInMemCacheHit": t.boolean(),
            "RpcStartDeadlineLeftMs": t.integer().optional(),
            "HSTSHeaderValue": t.string().optional(),
            "UserAgentSentFp": t.string().optional(),
            "tier": t.string().optional(),
            "BotGroupName": t.string().optional(),
            "cacheAcceptableAge": t.integer().optional(),
            "RpcEndDeadlineLeftMs": t.integer().optional(),
            "FetcherTaskNumber": t.integer().optional(),
            "BotHostname": t.string().optional(),
            "RobotsBody": t.string().optional(),
            "TrawlerInstance": t.string().optional(),
            "largeStoreHitLocation": t.string().optional(),
            "concurrentStreamNum": t.string().optional(),
            "httpVersion": t.string().optional(),
            "ProxyInstance": t.string().optional(),
            "CacheRequestorID": t.string().optional(),
            "RequestUserName": t.string().optional(),
            "cacheHitType": t.string().optional(),
            "vpcDestination": t.proxy(
                renames["TrawlerLoggedVPCDestinationIn"]
            ).optional(),
            "ServerSignature": t.string().optional(),
        }
    ).named(renames["TrawlerTrawlerPrivateFetchReplyDataIn"])
    types["TrawlerTrawlerPrivateFetchReplyDataOut"] = t.struct(
        {
            "isBidiStreamingFetch": t.boolean().optional(),
            "isFromGrpcProxy": t.boolean().optional(),
            "PostDataSize": t.string().optional(),
            "multiverseClientIdentifier": t.proxy(
                renames["TrawlerMultiverseClientIdentifierOut"]
            ).optional(),
            "originalClientParams": t.proxy(
                renames["TrawlerOriginalClientParamsOut"]
            ).optional(),
            "resourceBucket": t.string().optional(),
            "dependentFetchType": t.string().optional(),
            "Is5xxHostId": t.boolean().optional(),
            "cdnProvider": t.string(),
            "IsRobotsFetch": t.boolean().optional(),
            "bypassedHostOverfull": t.boolean().optional(),
            "subResourceBucket": t.string(),
            "HintIPAddress": t.string().optional(),
            "ResponseBytes": t.string().optional(),
            "isVpcTraffic": t.boolean().optional(),
            "cacheAcceptableAfterDate": t.integer().optional(),
            "Producer": t.string().optional(),
            "downloadFileName": t.string().optional(),
            "isFloonetFetch": t.boolean().optional(),
            "authenticationInfo": t.string().optional(),
            "UserAgentSent": t.string().optional(),
            "numDroppedReplies": t.string().optional(),
            "HadInMemCacheHit": t.boolean(),
            "RpcStartDeadlineLeftMs": t.integer().optional(),
            "HSTSHeaderValue": t.string().optional(),
            "UserAgentSentFp": t.string().optional(),
            "tier": t.string().optional(),
            "BotGroupName": t.string().optional(),
            "cacheAcceptableAge": t.integer().optional(),
            "RpcEndDeadlineLeftMs": t.integer().optional(),
            "FetcherTaskNumber": t.integer().optional(),
            "BotHostname": t.string().optional(),
            "RobotsBody": t.string().optional(),
            "TrawlerInstance": t.string().optional(),
            "largeStoreHitLocation": t.string().optional(),
            "concurrentStreamNum": t.string().optional(),
            "httpVersion": t.string().optional(),
            "ProxyInstance": t.string().optional(),
            "CacheRequestorID": t.string().optional(),
            "RequestUserName": t.string().optional(),
            "cacheHitType": t.string().optional(),
            "vpcDestination": t.proxy(
                renames["TrawlerLoggedVPCDestinationOut"]
            ).optional(),
            "ServerSignature": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerTrawlerPrivateFetchReplyDataOut"])
    types["AssistantApiSettingsMarketplaceDisclosureIn"] = t.struct(
        {"timestampMs": t.string().optional(), "confirmed": t.boolean().optional()}
    ).named(renames["AssistantApiSettingsMarketplaceDisclosureIn"])
    types["AssistantApiSettingsMarketplaceDisclosureOut"] = t.struct(
        {
            "timestampMs": t.string().optional(),
            "confirmed": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsMarketplaceDisclosureOut"])
    types["KnowledgeAnswersSensitivityServingPolicyIn"] = t.struct(
        {"enableRpcWhitelist": t.boolean().optional()}
    ).named(renames["KnowledgeAnswersSensitivityServingPolicyIn"])
    types["KnowledgeAnswersSensitivityServingPolicyOut"] = t.struct(
        {
            "enableRpcWhitelist": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityServingPolicyOut"])
    types[
        "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoIn"
    ] = t.struct(
        {
            "isDeviceDataKnown": t.boolean().optional(),
            "deviceScore": t.number().optional(),
        }
    ).named(
        renames["SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoIn"]
    )
    types[
        "SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoOut"
    ] = t.struct(
        {
            "isDeviceDataKnown": t.boolean().optional(),
            "deviceScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfoOut"]
    )
    types["ScienceCitationAuthorIn"] = t.struct(
        {
            "OtherNames": t.string(),
            "Department": t.string().optional(),
            "LastName": t.string(),
            "Email": t.string(),
            "IsCorrespondingAuthor": t.boolean(),
            "ID": t.array(t.string()).optional(),
            "Type": t.integer().optional(),
            "IsCJKForeignName": t.boolean(),
            "Institution": t.string().optional(),
            "GuessOrderType": t.integer().optional(),
            "Comment": t.string(),
            "SourceText": t.string(),
        }
    ).named(renames["ScienceCitationAuthorIn"])
    types["ScienceCitationAuthorOut"] = t.struct(
        {
            "OtherNames": t.string(),
            "Department": t.string().optional(),
            "LastName": t.string(),
            "Email": t.string(),
            "IsCorrespondingAuthor": t.boolean(),
            "ID": t.array(t.string()).optional(),
            "Type": t.integer().optional(),
            "IsCJKForeignName": t.boolean(),
            "Institution": t.string().optional(),
            "GuessOrderType": t.integer().optional(),
            "Comment": t.string(),
            "SourceText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationAuthorOut"])
    types["ResearchScamNeighborSelectionOverrideIn"] = t.struct(
        {
            "epsilonDistance": t.number().optional(),
            "treeXHybridLeavesSearchedOverride": t.integer().optional(),
            "approxNumNeighbors": t.integer().optional(),
            "perCrowdingAttributeNumNeighbors": t.integer().optional(),
            "perCrowdingAttributePreReorderingNumNeighbors": t.integer().optional(),
            "approxEpsilonDistance": t.number().optional(),
            "numSingleShardNeighbors": t.integer().optional(),
            "numNeighbors": t.integer().optional(),
        }
    ).named(renames["ResearchScamNeighborSelectionOverrideIn"])
    types["ResearchScamNeighborSelectionOverrideOut"] = t.struct(
        {
            "epsilonDistance": t.number().optional(),
            "treeXHybridLeavesSearchedOverride": t.integer().optional(),
            "approxNumNeighbors": t.integer().optional(),
            "perCrowdingAttributeNumNeighbors": t.integer().optional(),
            "perCrowdingAttributePreReorderingNumNeighbors": t.integer().optional(),
            "approxEpsilonDistance": t.number().optional(),
            "numSingleShardNeighbors": t.integer().optional(),
            "numNeighbors": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamNeighborSelectionOverrideOut"])
    types["NlxDataSchemaTokenDependencyEdgeIn"] = t.struct(
        {
            "deprel": t.string().optional(),
            "head": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
        }
    ).named(renames["NlxDataSchemaTokenDependencyEdgeIn"])
    types["NlxDataSchemaTokenDependencyEdgeOut"] = t.struct(
        {
            "deprel": t.string().optional(),
            "head": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaTokenDependencyEdgeOut"])
    types["GeostoreCurveConnectionProtoBezierParamsIn"] = t.struct(
        {
            "controlPoint": t.array(
                t.proxy(
                    renames["GeostoreCurveConnectionProtoBezierParamsControlPointIn"]
                )
            ).optional()
        }
    ).named(renames["GeostoreCurveConnectionProtoBezierParamsIn"])
    types["GeostoreCurveConnectionProtoBezierParamsOut"] = t.struct(
        {
            "controlPoint": t.array(
                t.proxy(
                    renames["GeostoreCurveConnectionProtoBezierParamsControlPointOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCurveConnectionProtoBezierParamsOut"])
    types["YoutubeDiscoveryLegosLegosPresentRelationshipIn"] = t.struct(
        {
            "contexts": t.array(
                t.proxy(
                    renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn"]
                )
            ).optional(),
            "confidence": t.number().optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosPresentRelationshipIn"])
    types["YoutubeDiscoveryLegosLegosPresentRelationshipOut"] = t.struct(
        {
            "contexts": t.array(
                t.proxy(
                    renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut"]
                )
            ).optional(),
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosPresentRelationshipOut"])
    types[
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentIn"
    ] = t.struct(
        {
            "searchTextSnippet": t.string().optional(),
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentIn"]
            ).optional(),
            "qaResult": t.proxy(
                renames["GoogleCloudContentwarehouseV1QAResultIn"]
            ).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentIn"
        ]
    )
    types[
        "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentOut"
    ] = t.struct(
        {
            "searchTextSnippet": t.string().optional(),
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentOut"]
            ).optional(),
            "qaResult": t.proxy(
                renames["GoogleCloudContentwarehouseV1QAResultOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocumentOut"
        ]
    )
    types["RepositoryWebrefWebrefOutlinkInfoIn"] = t.struct(
        {
            "isNofollow": t.boolean().optional(),
            "topicalityWeight": t.array(t.number()).optional(),
            "byteLength": t.array(t.string()).optional(),
            "byteOffset": t.array(t.string()).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefWebrefOutlinkInfoIn"])
    types["RepositoryWebrefWebrefOutlinkInfoOut"] = t.struct(
        {
            "isNofollow": t.boolean().optional(),
            "topicalityWeight": t.array(t.number()).optional(),
            "byteLength": t.array(t.string()).optional(),
            "byteOffset": t.array(t.string()).optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefOutlinkInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoIn"] = t.struct(
        {"type": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoOut"])
    types["IndexingCrawlerIdServingDocumentIdentifierIn"] = t.struct(
        {
            "doubleIndexingExperimentId": t.string().optional(),
            "key": t.string().optional(),
            "dupExperimentId": t.string().optional(),
        }
    ).named(renames["IndexingCrawlerIdServingDocumentIdentifierIn"])
    types["IndexingCrawlerIdServingDocumentIdentifierOut"] = t.struct(
        {
            "doubleIndexingExperimentId": t.string().optional(),
            "key": t.string().optional(),
            "dupExperimentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingCrawlerIdServingDocumentIdentifierOut"])
    types["WeboftrustTimeRangeIn"] = t.struct(
        {"endUnixTime": t.string(), "startUnixTime": t.string().optional()}
    ).named(renames["WeboftrustTimeRangeIn"])
    types["WeboftrustTimeRangeOut"] = t.struct(
        {
            "endUnixTime": t.string(),
            "startUnixTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WeboftrustTimeRangeOut"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceIn"] = t.struct(
        {
            "previousQuery": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryIn"]
            ),
            "currentQuery": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryIn"]
            ).optional(),
            "anaphor": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorIn"]
            ).optional(),
            "searchAnswerValue": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueIn"
                ]
            ),
            "attentionalEntity": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityIn"
                ]
            ),
            "previousTaskState": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateIn"
                ]
            ),
            "previousResponseMeaning": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningIn"
                ]
            ),
            "injectedContextualSchema": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaIn"
                ]
            ),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceIn"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceOut"] = t.struct(
        {
            "previousQuery": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryOut"]
            ),
            "currentQuery": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryOut"]
            ).optional(),
            "anaphor": t.proxy(
                renames["KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphorOut"]
            ).optional(),
            "searchAnswerValue": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValueOut"
                ]
            ),
            "attentionalEntity": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntityOut"
                ]
            ),
            "previousTaskState": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateOut"
                ]
            ),
            "previousResponseMeaning": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningOut"
                ]
            ),
            "injectedContextualSchema": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchemaOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceOut"])
    types["ImageExifIPTCMetadataIn"] = t.struct(
        {
            "dateExpired": t.string(),
            "creator": t.array(t.string()).optional(),
            "artwork": t.array(t.proxy(renames["ImageExifIPTCMetadataArtworkIn"])),
            "event": t.string(),
            "copyrightNotice": t.string(),
            "locationShown": t.array(
                t.proxy(renames["ImageExifIPTCMetadataLocationInfoIn"])
            ).optional(),
            "creditLine": t.string(),
            "rightsUsageTerms": t.string(),
            "title": t.string().optional(),
            "dateReleased": t.string(),
            "instructions": t.string(),
            "licenseUrl": t.string().optional(),
            "description": t.string(),
            "supplementalCategories": t.array(t.string()),
            "acquireLicensePage": t.string().optional(),
            "propertyReleaseStatus": t.string(),
            "contactinfo": t.proxy(renames["ImageExifIPTCMetadataContactInfoIn"]),
            "location": t.proxy(renames["ImageExifIPTCMetadataLocationIn"]),
            "modelReleaseStatus": t.string(),
            "source": t.string(),
            "locationCreated": t.proxy(
                renames["ImageExifIPTCMetadataLocationInfoIn"]
            ).optional(),
            "dateCreated": t.string().optional(),
            "headline": t.string(),
            "imageSupplier": t.string().optional(),
            "keywords": t.array(t.string()),
        }
    ).named(renames["ImageExifIPTCMetadataIn"])
    types["ImageExifIPTCMetadataOut"] = t.struct(
        {
            "dateExpired": t.string(),
            "creator": t.array(t.string()).optional(),
            "artwork": t.array(t.proxy(renames["ImageExifIPTCMetadataArtworkOut"])),
            "event": t.string(),
            "copyrightNotice": t.string(),
            "locationShown": t.array(
                t.proxy(renames["ImageExifIPTCMetadataLocationInfoOut"])
            ).optional(),
            "creditLine": t.string(),
            "rightsUsageTerms": t.string(),
            "title": t.string().optional(),
            "dateReleased": t.string(),
            "instructions": t.string(),
            "licenseUrl": t.string().optional(),
            "description": t.string(),
            "supplementalCategories": t.array(t.string()),
            "acquireLicensePage": t.string().optional(),
            "propertyReleaseStatus": t.string(),
            "contactinfo": t.proxy(renames["ImageExifIPTCMetadataContactInfoOut"]),
            "location": t.proxy(renames["ImageExifIPTCMetadataLocationOut"]),
            "modelReleaseStatus": t.string(),
            "source": t.string(),
            "locationCreated": t.proxy(
                renames["ImageExifIPTCMetadataLocationInfoOut"]
            ).optional(),
            "dateCreated": t.string().optional(),
            "headline": t.string(),
            "imageSupplier": t.string().optional(),
            "keywords": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifIPTCMetadataOut"])
    types["OceanImageSizeIn"] = t.struct(
        {"width": t.integer().optional(), "height": t.integer().optional()}
    ).named(renames["OceanImageSizeIn"])
    types["OceanImageSizeOut"] = t.struct(
        {
            "width": t.integer().optional(),
            "height": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanImageSizeOut"])
    types["RepositoryWebrefTaskDetailsIn"] = t.struct(
        {
            "lastSubmitTimestamp": t.string(),
            "topicDescription": t.string(),
            "topicName": t.string(),
            "topicUrl": t.string(),
            "experimentId": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefTaskDetailsIn"])
    types["RepositoryWebrefTaskDetailsOut"] = t.struct(
        {
            "lastSubmitTimestamp": t.string(),
            "topicDescription": t.string(),
            "topicName": t.string(),
            "topicUrl": t.string(),
            "experimentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefTaskDetailsOut"])
    types["TravelFlightsAirlineConfigIn"] = t.struct(
        {
            "shortNames": t.proxy(
                renames["TravelFlightsNameCatalogProtoIn"]
            ).optional(),
            "popularity": t.integer().optional(),
            "mid": t.string().optional(),
            "urls": t.proxy(renames["TravelFlightsNameCatalogProtoIn"]).optional(),
            "countryContactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigCountryContactInfoIn"])
            ).optional(),
            "dupFlag": t.boolean().optional(),
            "passengerAssistanceUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoIn"]
            ).optional(),
            "fqtvPartnerCode": t.array(t.string()).optional(),
            "type": t.string(),
            "iataCode": t.string().optional(),
            "localizedContactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigLocalizedContactInfoIn"])
            ),
            "countryCode": t.string().optional(),
            "alliance": t.string().optional(),
            "baggageFeeUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoIn"]
            ).optional(),
            "baggageCarryonLimitationsUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoIn"]
            ).optional(),
            "innovataCode": t.string().optional(),
            "icaoCode": t.string().optional(),
            "waiverSummaryUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoIn"]
            ).optional(),
            "names": t.proxy(renames["TravelFlightsNameCatalogProtoIn"]).optional(),
            "fareFamilyUrls": t.proxy(renames["TravelFlightsNameCatalogProtoIn"]),
        }
    ).named(renames["TravelFlightsAirlineConfigIn"])
    types["TravelFlightsAirlineConfigOut"] = t.struct(
        {
            "shortNames": t.proxy(
                renames["TravelFlightsNameCatalogProtoOut"]
            ).optional(),
            "popularity": t.integer().optional(),
            "mid": t.string().optional(),
            "urls": t.proxy(renames["TravelFlightsNameCatalogProtoOut"]).optional(),
            "countryContactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigCountryContactInfoOut"])
            ).optional(),
            "dupFlag": t.boolean().optional(),
            "passengerAssistanceUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoOut"]
            ).optional(),
            "fqtvPartnerCode": t.array(t.string()).optional(),
            "type": t.string(),
            "iataCode": t.string().optional(),
            "localizedContactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigLocalizedContactInfoOut"])
            ),
            "countryCode": t.string().optional(),
            "alliance": t.string().optional(),
            "baggageFeeUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoOut"]
            ).optional(),
            "baggageCarryonLimitationsUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoOut"]
            ).optional(),
            "innovataCode": t.string().optional(),
            "icaoCode": t.string().optional(),
            "waiverSummaryUrls": t.proxy(
                renames["TravelFlightsNameCatalogProtoOut"]
            ).optional(),
            "names": t.proxy(renames["TravelFlightsNameCatalogProtoOut"]).optional(),
            "fareFamilyUrls": t.proxy(renames["TravelFlightsNameCatalogProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsAirlineConfigOut"])
    types["AssistantApiRecurrenceDatetimeRangeIn"] = t.struct(
        {
            "startDate": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "endDate": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
        }
    ).named(renames["AssistantApiRecurrenceDatetimeRangeIn"])
    types["AssistantApiRecurrenceDatetimeRangeOut"] = t.struct(
        {
            "startDate": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "endDate": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiRecurrenceDatetimeRangeOut"])
    types["PhotosVisionObjectrecGeoLocationIn"] = t.struct(
        {
            "latErrorBound": t.number().optional(),
            "lonErrorBound": t.number(),
            "altitudeMeters": t.number().optional(),
            "fromGps": t.boolean().optional(),
            "countryCode": t.string().optional(),
            "lat": t.number().optional(),
            "lon": t.number().optional(),
        }
    ).named(renames["PhotosVisionObjectrecGeoLocationIn"])
    types["PhotosVisionObjectrecGeoLocationOut"] = t.struct(
        {
            "latErrorBound": t.number().optional(),
            "lonErrorBound": t.number(),
            "altitudeMeters": t.number().optional(),
            "fromGps": t.boolean().optional(),
            "countryCode": t.string().optional(),
            "lat": t.number().optional(),
            "lon": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecGeoLocationOut"])
    types["AssistantApiSignInMethodIn"] = t.struct(
        {"method": t.string(), "signInRequired": t.boolean().optional()}
    ).named(renames["AssistantApiSignInMethodIn"])
    types["AssistantApiSignInMethodOut"] = t.struct(
        {
            "method": t.string(),
            "signInRequired": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSignInMethodOut"])
    types["AssistantApiSettingsThirdPartyAppsFilterIn"] = t.struct(
        {"state": t.string()}
    ).named(renames["AssistantApiSettingsThirdPartyAppsFilterIn"])
    types["AssistantApiSettingsThirdPartyAppsFilterOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiSettingsThirdPartyAppsFilterOut"])
    types["AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsIn"] = t.struct(
        {
            "neverAskAgain": t.boolean().optional(),
            "trustDeviceExpirationTimestamp": t.string().optional(),
            "neverAskExpirationTimestamp": t.string().optional(),
        }
    ).named(renames["AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsIn"])
    types["AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsOut"] = t.struct(
        {
            "neverAskAgain": t.boolean().optional(),
            "trustDeviceExpirationTimestamp": t.string().optional(),
            "neverAskExpirationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettingsOut"])
    types["GeostoreLaneMarkerProtoIn"] = t.struct(
        {
            "linearPattern": t.proxy(
                renames["GeostoreLinearStripePatternProtoIn"]
            ).optional(),
            "crossingPattern": t.proxy(
                renames["GeostoreCrossingStripePatternProtoIn"]
            ).optional(),
            "barrierMaterials": t.proxy(
                renames["GeostoreBarrierLogicalMaterialProtoIn"]
            ).optional(),
        }
    ).named(renames["GeostoreLaneMarkerProtoIn"])
    types["GeostoreLaneMarkerProtoOut"] = t.struct(
        {
            "linearPattern": t.proxy(
                renames["GeostoreLinearStripePatternProtoOut"]
            ).optional(),
            "crossingPattern": t.proxy(
                renames["GeostoreCrossingStripePatternProtoOut"]
            ).optional(),
            "barrierMaterials": t.proxy(
                renames["GeostoreBarrierLogicalMaterialProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLaneMarkerProtoOut"])
    types["OceanDocTagBookSpecificNumberingRangeIn"] = t.struct(
        {
            "numberingSchema": t.array(t.integer()),
            "numberType": t.array(t.integer()),
            "endNumbering": t.array(t.string()),
            "startNumbering": t.array(t.string()),
        }
    ).named(renames["OceanDocTagBookSpecificNumberingRangeIn"])
    types["OceanDocTagBookSpecificNumberingRangeOut"] = t.struct(
        {
            "numberingSchema": t.array(t.integer()),
            "numberType": t.array(t.integer()),
            "endNumbering": t.array(t.string()),
            "startNumbering": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagBookSpecificNumberingRangeOut"])
    types["ScienceCitationCategoryIn"] = t.struct(
        {"Name": t.string(), "Type": t.string().optional()}
    ).named(renames["ScienceCitationCategoryIn"])
    types["ScienceCitationCategoryOut"] = t.struct(
        {
            "Name": t.string(),
            "Type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationCategoryOut"])
    types["NlpSemanticParsingModelsMoneyMoneyIn"] = t.struct(
        {
            "amount": t.proxy(renames["NlpSemanticParsingNumberNumberIn"]),
            "currency": t.proxy(renames["NlpSemanticParsingModelsMoneyCurrencyIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMoneyMoneyIn"])
    types["NlpSemanticParsingModelsMoneyMoneyOut"] = t.struct(
        {
            "amount": t.proxy(renames["NlpSemanticParsingNumberNumberOut"]),
            "currency": t.proxy(renames["NlpSemanticParsingModelsMoneyCurrencyOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMoneyMoneyOut"])
    types[
        "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextIn"
    ] = t.struct({"docId": t.string().optional(), "url": t.string().optional()}).named(
        renames["PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextIn"]
    )
    types[
        "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextOut"
    ] = t.struct(
        {
            "docId": t.string().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextOut"]
    )
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn"] = t.struct(
        {"name": t.string(), "value": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn"])
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut"] = t.struct(
        {
            "name": t.string(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataIn"] = t.struct(
        {
            "isPlaceholder": t.boolean().optional(),
            "usesConfusingCharacters": t.boolean().optional(),
            "smtpServerSupportsTls": t.boolean().optional(),
            "internalExternal": t.proxy(
                renames["PeoplestackFlexorgsProtoInternalExternalIn"]
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataOut"] = t.struct(
        {
            "isPlaceholder": t.boolean().optional(),
            "usesConfusingCharacters": t.boolean().optional(),
            "smtpServerSupportsTls": t.boolean().optional(),
            "internalExternal": t.proxy(
                renames["PeoplestackFlexorgsProtoInternalExternalOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataOut"])
    types["KnowledgeAnswersSensitivityIntentEvalPolicyIn"] = t.struct(
        {
            "scrubEntireIntent": t.boolean().optional(),
            "allArguments": t.proxy(
                renames["KnowledgeAnswersSensitivityArgumentEvalPolicyIn"]
            ).optional(),
            "enabled": t.boolean().optional(),
            "nestedIntentOnly": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityIntentEvalPolicyIn"])
    types["KnowledgeAnswersSensitivityIntentEvalPolicyOut"] = t.struct(
        {
            "scrubEntireIntent": t.boolean().optional(),
            "allArguments": t.proxy(
                renames["KnowledgeAnswersSensitivityArgumentEvalPolicyOut"]
            ).optional(),
            "enabled": t.boolean().optional(),
            "nestedIntentOnly": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityIntentEvalPolicyOut"])
    types["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn"] = t.struct(
        {
            "incomingAnyCircleCount": t.string().optional(),
            "viewCount": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut"] = t.struct(
        {
            "incomingAnyCircleCount": t.string().optional(),
            "viewCount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataIn"] = t.struct(
        {
            "totalUnlockedAchievements": t.string().optional(),
            "profileVisibility": t.string().optional(),
            "avatarImageUrl": t.string().optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"]
            ).optional(),
            "achievements": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementIn"
                    ]
                )
            ).optional(),
            "totalFriendsCount": t.string().optional(),
            "gamerTag": t.string().optional(),
            "playerLevel": t.integer().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataOut"] = t.struct(
        {
            "totalUnlockedAchievements": t.string().optional(),
            "profileVisibility": t.string().optional(),
            "avatarImageUrl": t.string().optional(),
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"]
            ).optional(),
            "achievements": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementOut"
                    ]
                )
            ).optional(),
            "totalFriendsCount": t.string().optional(),
            "gamerTag": t.string().optional(),
            "playerLevel": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataOut"])
    types["NlpSemanticParsingQRefAnnotationMerlotCategoryDataIn"] = t.struct(
        {"confidence": t.number(), "categoryId": t.integer()}
    ).named(renames["NlpSemanticParsingQRefAnnotationMerlotCategoryDataIn"])
    types["NlpSemanticParsingQRefAnnotationMerlotCategoryDataOut"] = t.struct(
        {
            "confidence": t.number(),
            "categoryId": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationMerlotCategoryDataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataIn"] = t.struct(
        {
            "callerIdSource": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceIn"
                ]
            ).optional()
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataOut"] = t.struct(
        {
            "callerIdSource": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSourceOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataOut"])
    types["NlxDataSchemaCharacterIn"] = t.struct(
        {
            "paragraph": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "token": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "text": t.string().optional(),
            "sentence": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
        }
    ).named(renames["NlxDataSchemaCharacterIn"])
    types["NlxDataSchemaCharacterOut"] = t.struct(
        {
            "paragraph": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "token": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "text": t.string().optional(),
            "sentence": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaCharacterOut"])
    types["StorageGraphBfgSpiiCertificationIn"] = t.struct(
        {
            "authorityFeedback": t.proxy(
                renames["StorageGraphBfgAuthorityFeedbackMetadataIn"]
            ).optional(),
            "legalRequest": t.proxy(
                renames["StorageGraphBfgLegalRequestMetadataIn"]
            ).optional(),
            "publicInformation": t.proxy(
                renames["StorageGraphBfgPublicInformationMetadataIn"]
            ).optional(),
        }
    ).named(renames["StorageGraphBfgSpiiCertificationIn"])
    types["StorageGraphBfgSpiiCertificationOut"] = t.struct(
        {
            "authorityFeedback": t.proxy(
                renames["StorageGraphBfgAuthorityFeedbackMetadataOut"]
            ).optional(),
            "legalRequest": t.proxy(
                renames["StorageGraphBfgLegalRequestMetadataOut"]
            ).optional(),
            "publicInformation": t.proxy(
                renames["StorageGraphBfgPublicInformationMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgSpiiCertificationOut"])
    types["GoogleInternalAppsWaldoV1alphaHomeLocationIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaHomeLocationIn"])
    types["GoogleInternalAppsWaldoV1alphaHomeLocationOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaHomeLocationOut"])
    types["BiasingPerDocDataIn"] = t.struct(
        {"biasingfield": t.array(t.proxy(renames["BiasingPerDocDataBiasingFieldIn"]))}
    ).named(renames["BiasingPerDocDataIn"])
    types["BiasingPerDocDataOut"] = t.struct(
        {
            "biasingfield": t.array(
                t.proxy(renames["BiasingPerDocDataBiasingFieldOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BiasingPerDocDataOut"])
    types["GoogleCloudDocumentaiV1VertexIn"] = t.struct(
        {"y": t.integer().optional(), "x": t.integer().optional()}
    ).named(renames["GoogleCloudDocumentaiV1VertexIn"])
    types["GoogleCloudDocumentaiV1VertexOut"] = t.struct(
        {
            "y": t.integer().optional(),
            "x": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1VertexOut"])
    types["AppsPeopleOzExternalMergedpeopleapiFileAsIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFileAsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiFileAsOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFileAsOut"])
    types["ImageRepositoryUnwantedContentIn"] = t.struct(
        {"deletionReason": t.string(), "hideReason": t.string()}
    ).named(renames["ImageRepositoryUnwantedContentIn"])
    types["ImageRepositoryUnwantedContentOut"] = t.struct(
        {
            "deletionReason": t.string(),
            "hideReason": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryUnwantedContentOut"])
    types["KnowledgeAnswersIntentQueryMuninSignalsIn"] = t.struct(
        {
            "textIsGenerated": t.boolean().optional(),
            "isIsolated": t.boolean().optional(),
            "softModifierCollection": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryMuninSignalsIn"])
    types["KnowledgeAnswersIntentQueryMuninSignalsOut"] = t.struct(
        {
            "textIsGenerated": t.boolean().optional(),
            "isIsolated": t.boolean().optional(),
            "softModifierCollection": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryMuninSignalsOut"])
    types["KnowledgeAnswersSameTypeIn"] = t.struct({"slotName": t.string()}).named(
        renames["KnowledgeAnswersSameTypeIn"]
    )
    types["KnowledgeAnswersSameTypeOut"] = t.struct(
        {"slotName": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersSameTypeOut"])
    types["ResearchScamCoscamRestrictTokensV2In"] = t.struct(
        {
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupIn"])
            ).optional()
        }
    ).named(renames["ResearchScamCoscamRestrictTokensV2In"])
    types["ResearchScamCoscamRestrictTokensV2Out"] = t.struct(
        {
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamRestrictTokensV2Out"])
    types["ImageDataIn"] = t.struct(
        {
            "photoDetectorScore": t.number(),
            "precomputedRestricts": t.proxy(
                renames["PrecomputedRestrictsIn"]
            ).optional(),
            "firstTimeSeenOnDocSec": t.integer().optional(),
            "hateLogoDetection": t.proxy(
                renames["ImageUnderstandingIndexingAnnotationGroupIn"]
            ).optional(),
            "colorScoreVersion": t.integer(),
            "onPageAlternateUrl": t.string().optional(),
            "colorScore": t.array(t.number()).optional(),
            "brainPornScoresVersion": t.string().optional(),
            "clusterId": t.string().optional(),
            "adaboostImageFeaturePornMinorVersion": t.integer(),
            "nearDupFeaturesSmall": t.array(t.string()),
            "clickMagnetScore": t.number().optional(),
            "canonicalDocid": t.string().optional(),
            "h2i": t.number().optional(),
            "numberFaces": t.integer().optional(),
            "lastCrawlTime": t.integer().optional(),
            "imageExactBoost": t.proxy(renames["ImageExactBoostIn"]).optional(),
            "thumbHeight": t.integer(),
            "deepImageEngagingness": t.proxy(
                renames["ImageRepositoryDeepImageEngagingnessOutputIn"]
            ).optional(),
            "largestFaceFrac": t.number().optional(),
            "width": t.integer(),
            "rankInNeardupCluster": t.integer().optional(),
            "animatedImageData": t.proxy(
                renames["ImageRepositoryAnimatedImagePerdocDataIn"]
            ).optional(),
            "noIndexReason": t.array(t.string()),
            "styleAestheticsScore": t.proxy(
                renames["LensDiscoveryStyleAestheticsScoreSignalsIn"]
            ).optional(),
            "pornFlagData": t.proxy(renames["PornFlagDataIn"]).optional(),
            "expirationTimestamp": t.string().optional(),
            "isIndexedByImagesearch": t.boolean().optional(),
            "restrictStrings": t.array(t.string()).optional(),
            "coloredPixelsFrac": t.number().optional(),
            "nearDupFeaturesSmallVersion": t.integer().optional(),
            "clipartDetectorVersion": t.integer(),
            "flags": t.integer().optional(),
            "isIipInScope": t.boolean().optional(),
            "nimaAva": t.proxy(renames["ImageRepositoryNimaOutputIn"]).optional(),
            "adaboostImageFeaturePorn": t.number().optional(),
            "whiteBackgroundScoreVersion": t.integer().optional(),
            "finalPornScore": t.number().optional(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdIn"]).optional(),
            "deepTags": t.proxy(renames["CommerceDatastoreImageDeepTagsIn"]).optional(),
            "adaboostImageFeaturePornVersion": t.integer(),
            "imagerank": t.integer(),
            "packedFullFaceInfo": t.proxy(renames["FaceIndexingIn"]).optional(),
            "codomainStrength": t.integer().optional(),
            "extendedExif": t.proxy(renames["PhotosImageMetadataIn"]).optional(),
            "height": t.integer().optional(),
            "testingScore": t.integer().optional(),
            "unavailableAfterSecs": t.string().optional(),
            "finalPornScoreVersion": t.string().optional(),
            "personAttributes": t.proxy(
                renames["LensDiscoveryStylePersonAttributesIn"]
            ).optional(),
            "ocrGoodoc": t.proxy(renames["GoodocDocumentIn"]).optional(),
            "imageLicenseInfo": t.proxy(
                renames["ImageSearchImageLicenseInfoIn"]
            ).optional(),
            "nimaVq": t.proxy(renames["ImageRepositoryNimaOutputIn"]).optional(),
            "featuredImageProp": t.proxy(
                renames["ImageMonetizationFeaturedImagePropertiesIn"]
            ).optional(),
            "deepCrop": t.proxy(renames["DeepCropIndexingIn"]).optional(),
            "clipartDetectorScore": t.number().optional(),
            "imageRegions": t.proxy(renames["ImageRegionsImageRegionsIn"]).optional(),
            "photoDetectorVersion": t.integer(),
            "styleImageType": t.proxy(
                renames["LensDiscoveryStyleStyleImageTypeSignalsIn"]
            ).optional(),
            "nearDupFeaturesVersion": t.integer().optional(),
            "firstCrawlTime": t.integer().optional(),
            "thumbSize": t.integer(),
            "smearedTopWebLandingPageDocids": t.array(t.string()).optional(),
            "isVisible": t.boolean().optional(),
            "corpusSelectionInfo": t.array(
                t.proxy(renames["CorpusSelectionInfoIn"])
            ).optional(),
            "ocrTextboxes": t.array(t.proxy(renames["OcrPhotoTextBoxIn"])).optional(),
            "nearDupFeatures": t.string(),
            "fileFormat": t.string().optional(),
            "licensedWebImagesOptInState": t.string().optional(),
            "isUnwantedContent": t.boolean().optional(),
            "smearedTopWebLandingPages": t.array(
                t.proxy(renames["SmearedWebLandingPageEntryIn"])
            ),
            "url": t.string().optional(),
            "multibangKgEntities": t.proxy(renames["ImageDataMultibangEntitiesIn"]),
            "brainPornScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationIn"]
            ).optional(),
            "lineartDetectorVersion": t.integer(),
            "ocrTaser": t.proxy(renames["GoodocDocumentIn"]).optional(),
            "embeddedMetadata": t.proxy(
                renames["ImageExifImageEmbeddedMetadataIn"]
            ).optional(),
            "docid": t.string().optional(),
            "crops": t.proxy(renames["ContentAwareCropsIndexingIn"]).optional(),
            "contentFirstCrawlTime": t.integer().optional(),
            "personDetectionSignals": t.proxy(
                renames["LensDiscoveryStylePersonDetectionSignalsIn"]
            ).optional(),
            "size": t.integer().optional(),
            "h2c": t.number(),
            "thumbnail": t.array(t.proxy(renames["ImageDataThumbnailIn"])),
            "shoppingProductInformation": t.proxy(
                renames["ImageRepositoryShoppingProductInformationIn"]
            ).optional(),
            "imageContentQueryBoost": t.proxy(
                renames["ImageContentQueryBoostIn"]
            ).optional(),
            "robotedAgents": t.string().optional(),
            "isMultiframe": t.boolean().optional(),
            "lineartDetectorScore": t.number(),
            "largestFaceFraction": t.integer().optional(),
            "whiteBackgroundScore": t.number(),
            "thumbWidth": t.integer().optional(),
        }
    ).named(renames["ImageDataIn"])
    types["ImageDataOut"] = t.struct(
        {
            "photoDetectorScore": t.number(),
            "precomputedRestricts": t.proxy(
                renames["PrecomputedRestrictsOut"]
            ).optional(),
            "firstTimeSeenOnDocSec": t.integer().optional(),
            "hateLogoDetection": t.proxy(
                renames["ImageUnderstandingIndexingAnnotationGroupOut"]
            ).optional(),
            "colorScoreVersion": t.integer(),
            "onPageAlternateUrl": t.string().optional(),
            "colorScore": t.array(t.number()).optional(),
            "brainPornScoresVersion": t.string().optional(),
            "clusterId": t.string().optional(),
            "adaboostImageFeaturePornMinorVersion": t.integer(),
            "nearDupFeaturesSmall": t.array(t.string()),
            "clickMagnetScore": t.number().optional(),
            "canonicalDocid": t.string().optional(),
            "h2i": t.number().optional(),
            "numberFaces": t.integer().optional(),
            "lastCrawlTime": t.integer().optional(),
            "imageExactBoost": t.proxy(renames["ImageExactBoostOut"]).optional(),
            "thumbHeight": t.integer(),
            "deepImageEngagingness": t.proxy(
                renames["ImageRepositoryDeepImageEngagingnessOutputOut"]
            ).optional(),
            "largestFaceFrac": t.number().optional(),
            "width": t.integer(),
            "rankInNeardupCluster": t.integer().optional(),
            "animatedImageData": t.proxy(
                renames["ImageRepositoryAnimatedImagePerdocDataOut"]
            ).optional(),
            "noIndexReason": t.array(t.string()),
            "styleAestheticsScore": t.proxy(
                renames["LensDiscoveryStyleAestheticsScoreSignalsOut"]
            ).optional(),
            "pornFlagData": t.proxy(renames["PornFlagDataOut"]).optional(),
            "expirationTimestamp": t.string().optional(),
            "isIndexedByImagesearch": t.boolean().optional(),
            "restrictStrings": t.array(t.string()).optional(),
            "coloredPixelsFrac": t.number().optional(),
            "nearDupFeaturesSmallVersion": t.integer().optional(),
            "clipartDetectorVersion": t.integer(),
            "flags": t.integer().optional(),
            "isIipInScope": t.boolean().optional(),
            "nimaAva": t.proxy(renames["ImageRepositoryNimaOutputOut"]).optional(),
            "adaboostImageFeaturePorn": t.number().optional(),
            "whiteBackgroundScoreVersion": t.integer().optional(),
            "finalPornScore": t.number().optional(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdOut"]).optional(),
            "deepTags": t.proxy(
                renames["CommerceDatastoreImageDeepTagsOut"]
            ).optional(),
            "adaboostImageFeaturePornVersion": t.integer(),
            "imagerank": t.integer(),
            "packedFullFaceInfo": t.proxy(renames["FaceIndexingOut"]).optional(),
            "codomainStrength": t.integer().optional(),
            "extendedExif": t.proxy(renames["PhotosImageMetadataOut"]).optional(),
            "height": t.integer().optional(),
            "testingScore": t.integer().optional(),
            "unavailableAfterSecs": t.string().optional(),
            "finalPornScoreVersion": t.string().optional(),
            "personAttributes": t.proxy(
                renames["LensDiscoveryStylePersonAttributesOut"]
            ).optional(),
            "ocrGoodoc": t.proxy(renames["GoodocDocumentOut"]).optional(),
            "imageLicenseInfo": t.proxy(
                renames["ImageSearchImageLicenseInfoOut"]
            ).optional(),
            "nimaVq": t.proxy(renames["ImageRepositoryNimaOutputOut"]).optional(),
            "featuredImageProp": t.proxy(
                renames["ImageMonetizationFeaturedImagePropertiesOut"]
            ).optional(),
            "deepCrop": t.proxy(renames["DeepCropIndexingOut"]).optional(),
            "clipartDetectorScore": t.number().optional(),
            "imageRegions": t.proxy(renames["ImageRegionsImageRegionsOut"]).optional(),
            "photoDetectorVersion": t.integer(),
            "styleImageType": t.proxy(
                renames["LensDiscoveryStyleStyleImageTypeSignalsOut"]
            ).optional(),
            "nearDupFeaturesVersion": t.integer().optional(),
            "firstCrawlTime": t.integer().optional(),
            "thumbSize": t.integer(),
            "smearedTopWebLandingPageDocids": t.array(t.string()).optional(),
            "isVisible": t.boolean().optional(),
            "corpusSelectionInfo": t.array(
                t.proxy(renames["CorpusSelectionInfoOut"])
            ).optional(),
            "ocrTextboxes": t.array(t.proxy(renames["OcrPhotoTextBoxOut"])).optional(),
            "nearDupFeatures": t.string(),
            "fileFormat": t.string().optional(),
            "licensedWebImagesOptInState": t.string().optional(),
            "isUnwantedContent": t.boolean().optional(),
            "smearedTopWebLandingPages": t.array(
                t.proxy(renames["SmearedWebLandingPageEntryOut"])
            ),
            "url": t.string().optional(),
            "multibangKgEntities": t.proxy(renames["ImageDataMultibangEntitiesOut"]),
            "brainPornScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationOut"]
            ).optional(),
            "lineartDetectorVersion": t.integer(),
            "ocrTaser": t.proxy(renames["GoodocDocumentOut"]).optional(),
            "embeddedMetadata": t.proxy(
                renames["ImageExifImageEmbeddedMetadataOut"]
            ).optional(),
            "docid": t.string().optional(),
            "crops": t.proxy(renames["ContentAwareCropsIndexingOut"]).optional(),
            "contentFirstCrawlTime": t.integer().optional(),
            "personDetectionSignals": t.proxy(
                renames["LensDiscoveryStylePersonDetectionSignalsOut"]
            ).optional(),
            "size": t.integer().optional(),
            "h2c": t.number(),
            "thumbnail": t.array(t.proxy(renames["ImageDataThumbnailOut"])),
            "shoppingProductInformation": t.proxy(
                renames["ImageRepositoryShoppingProductInformationOut"]
            ).optional(),
            "imageContentQueryBoost": t.proxy(
                renames["ImageContentQueryBoostOut"]
            ).optional(),
            "robotedAgents": t.string().optional(),
            "isMultiframe": t.boolean().optional(),
            "lineartDetectorScore": t.number(),
            "largestFaceFraction": t.integer().optional(),
            "whiteBackgroundScore": t.number(),
            "thumbWidth": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageDataOut"])
    types["AssistantApiCoreTypesCloudProviderInfoAgentStyleIn"] = t.struct(
        {
            "headerTheme": t.string(),
            "landscapeBackgroundImageUrl": t.string().optional(),
            "logoUrl": t.string().optional(),
            "primaryColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorIn"]
            ).optional(),
            "maskColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorIn"]
            ).optional(),
            "portraitBackgroundImageUrl": t.string().optional(),
            "backgroundColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCloudProviderInfoAgentStyleIn"])
    types["AssistantApiCoreTypesCloudProviderInfoAgentStyleOut"] = t.struct(
        {
            "headerTheme": t.string(),
            "landscapeBackgroundImageUrl": t.string().optional(),
            "logoUrl": t.string().optional(),
            "primaryColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorOut"]
            ).optional(),
            "maskColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorOut"]
            ).optional(),
            "portraitBackgroundImageUrl": t.string().optional(),
            "backgroundColor": t.proxy(
                renames["AssistantApiCoreTypesGovernedColorOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCloudProviderInfoAgentStyleOut"])
    types["GoogleCloudDocumentaiV1DocumentPageDimensionIn"] = t.struct(
        {
            "width": t.number().optional(),
            "height": t.number().optional(),
            "unit": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDimensionIn"])
    types["GoogleCloudDocumentaiV1DocumentPageDimensionOut"] = t.struct(
        {
            "width": t.number().optional(),
            "height": t.number().optional(),
            "unit": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageDimensionOut"])
    types["GeostoreComposableItemProtoIn"] = t.struct(
        {
            "jobMetadata": t.proxy(renames["GeostoreJobMetadataIn"]),
            "price": t.proxy(renames["GeostorePriceRangeProtoIn"]).optional(),
            "callToAction": t.proxy(renames["GeostoreCallToActionProtoIn"]).optional(),
            "priceFormat": t.string().optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoIn"])).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional(),
            "rankingHint": t.number().optional(),
            "offered": t.string().optional(),
        }
    ).named(renames["GeostoreComposableItemProtoIn"])
    types["GeostoreComposableItemProtoOut"] = t.struct(
        {
            "jobMetadata": t.proxy(renames["GeostoreJobMetadataOut"]),
            "price": t.proxy(renames["GeostorePriceRangeProtoOut"]).optional(),
            "callToAction": t.proxy(renames["GeostoreCallToActionProtoOut"]).optional(),
            "priceFormat": t.string().optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoOut"])).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "rankingHint": t.number().optional(),
            "offered": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreComposableItemProtoOut"])
    types["ImageRepositoryVideoLinkIndexingInfoIn"] = t.struct(
        {
            "url": t.string().optional(),
            "crawlStatusInfo": t.proxy(
                renames["ImageRepositoryCrawlStatusInfoIn"]
            ).optional(),
        }
    ).named(renames["ImageRepositoryVideoLinkIndexingInfoIn"])
    types["ImageRepositoryVideoLinkIndexingInfoOut"] = t.struct(
        {
            "url": t.string().optional(),
            "crawlStatusInfo": t.proxy(
                renames["ImageRepositoryCrawlStatusInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVideoLinkIndexingInfoOut"])
    types["VideoContentSearchListTrainingDataAnchorFeaturesIn"] = t.struct(
        {
            "matchedSpanText": t.string().optional(),
            "editDistance": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "descriptionAnchorTimeToMatchedTimeMs": t.string().optional(),
            "editDistanceRatio": t.number().optional(),
            "descriptionAnchorTimeMs": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchListTrainingDataAnchorFeaturesIn"])
    types["VideoContentSearchListTrainingDataAnchorFeaturesOut"] = t.struct(
        {
            "matchedSpanText": t.string().optional(),
            "editDistance": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "descriptionAnchorTimeToMatchedTimeMs": t.string().optional(),
            "editDistanceRatio": t.number().optional(),
            "descriptionAnchorTimeMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchListTrainingDataAnchorFeaturesOut"])
    types["FocusBackendSecondaryContactIdIn"] = t.struct(
        {
            "contactDetailHash": t.array(
                t.proxy(renames["FocusBackendContactDetailHashIn"])
            ).optional(),
            "contactName": t.string().optional(),
            "contactNameHash": t.string().optional(),
        }
    ).named(renames["FocusBackendSecondaryContactIdIn"])
    types["FocusBackendSecondaryContactIdOut"] = t.struct(
        {
            "contactDetailHash": t.array(
                t.proxy(renames["FocusBackendContactDetailHashOut"])
            ).optional(),
            "contactName": t.string().optional(),
            "contactNameHash": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendSecondaryContactIdOut"])
    types["GoogleCloudContentwarehouseV1PublishActionIn"] = t.struct(
        {"topicId": t.string().optional(), "messages": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1PublishActionIn"])
    types["GoogleCloudContentwarehouseV1PublishActionOut"] = t.struct(
        {
            "topicId": t.string().optional(),
            "messages": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PublishActionOut"])
    types["KnowledgeAnswersIntentQueryArgumentSignalsIn"] = t.struct(
        {
            "webrefListSource": t.string().optional(),
            "chainId": t.array(t.proxy(renames["LocalsearchChainIdIn"])).optional(),
            "clusterInfo": t.proxy(
                renames["QualityViewsExtractionClusterInfoIn"]
            ).optional(),
            "fromManualSymbolAnnotation": t.boolean().optional(),
            "collectionMembership": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryCollectionMembershipIn"])
            ).optional(),
            "locationMarkersSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryLocationMarkersSignalsIn"]
            ).optional(),
            "expressionStatus": t.proxy(
                renames["NlpSemanticParsingExpressionStatusIn"]
            ).optional(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsIn"]
            ).optional(),
            "isEvalDataHeuristic": t.boolean().optional(),
            "mediaEntitySignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryMediaEntitySignalsIn"]
            ).optional(),
            "rawQueryText": t.string().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingRelatedEntityIn"])
            ).optional(),
            "groundingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryGroundingSignalsIn"]
            ),
            "midEquivalentToCollection": t.string().optional(),
            "relatednessSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryRelatednessSignalsIn"]
            ).optional(),
            "isIntentgenAnnotation": t.boolean().optional(),
            "isAUngroundedTypeOf": t.string().optional(),
            "qrefInterpretationIndex": t.integer().optional(),
            "qrefConfidenceScore": t.number().optional(),
            "fromSymbolAnnotation": t.boolean().optional(),
            "saftSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySaftSignalsIn"]
            ).optional(),
            "gaiaId": t.string().optional(),
            "entityRelationship": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationEntityRelationshipIn"])
            ).optional(),
            "provenance": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentProvenanceIn"])
            ).optional(),
            "deprecatedSupportingMid": t.array(t.string()).optional(),
            "personalEntity": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryPersonalEntityIn"])
            ).optional(),
            "isDefaultValue": t.boolean().optional(),
            "onDeviceAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsIn"]
            ).optional(),
            "location": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "isEnum": t.boolean().optional(),
            "resultSupport": t.array(
                t.proxy(renames["UniversalsearchNewPackerKnowledgeResultSupportIn"])
            ).optional(),
            "annotatedRelationship": t.array(
                t.proxy(
                    renames[
                        "LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipIn"
                    ]
                )
            ).optional(),
            "webrefEntitiesIndex": t.integer().optional(),
            "isNimbleAnnotation": t.boolean().optional(),
            "muninSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryMuninSignalsIn"]
            ).optional(),
            "responseMeaningSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsIn"
                ]
            ),
            "allowedFuzzyMatch": t.boolean().optional(),
            "annotationLayerSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryAnnotationLayerSignalsIn"]
            ).optional(),
            "ungroundedValueType": t.proxy(
                renames["KnowledgeAnswersValueTypeIn"]
            ).optional(),
            "deprecatedFreebaseType": t.array(t.string()).optional(),
            "resolvedFromPronoun": t.boolean().optional(),
            "mergedImpliedEntity": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryImpliedEntityIn"])
            ).optional(),
            "contextResolution": t.string().optional(),
            "isGenieAnnotation": t.boolean().optional(),
            "supportTransferRules": t.array(
                t.proxy(
                    renames[
                        "LogsSemanticInterpretationIntentQuerySupportTransferRuleIn"
                    ]
                )
            ).optional(),
            "supportTransferSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySupportTransferSignalsIn"]
            ).optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "multipleHorizontalListSelectionMatches": t.boolean().optional(),
            "entityNumber": t.integer().optional(),
            "resolvedFromContext": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentSignalsIn"])
    types["KnowledgeAnswersIntentQueryArgumentSignalsOut"] = t.struct(
        {
            "webrefListSource": t.string().optional(),
            "chainId": t.array(t.proxy(renames["LocalsearchChainIdOut"])).optional(),
            "clusterInfo": t.proxy(
                renames["QualityViewsExtractionClusterInfoOut"]
            ).optional(),
            "fromManualSymbolAnnotation": t.boolean().optional(),
            "collectionMembership": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryCollectionMembershipOut"])
            ).optional(),
            "locationMarkersSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryLocationMarkersSignalsOut"]
            ).optional(),
            "expressionStatus": t.proxy(
                renames["NlpSemanticParsingExpressionStatusOut"]
            ).optional(),
            "parsedDueToExperiment": t.array(t.string()).optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsOut"]
            ).optional(),
            "isEvalDataHeuristic": t.boolean().optional(),
            "mediaEntitySignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryMediaEntitySignalsOut"]
            ).optional(),
            "rawQueryText": t.string().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingRelatedEntityOut"])
            ).optional(),
            "groundingSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryGroundingSignalsOut"]
            ),
            "midEquivalentToCollection": t.string().optional(),
            "relatednessSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryRelatednessSignalsOut"]
            ).optional(),
            "isIntentgenAnnotation": t.boolean().optional(),
            "isAUngroundedTypeOf": t.string().optional(),
            "qrefInterpretationIndex": t.integer().optional(),
            "qrefConfidenceScore": t.number().optional(),
            "fromSymbolAnnotation": t.boolean().optional(),
            "saftSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySaftSignalsOut"]
            ).optional(),
            "gaiaId": t.string().optional(),
            "entityRelationship": t.array(
                t.proxy(
                    renames["NlpSemanticParsingQRefAnnotationEntityRelationshipOut"]
                )
            ).optional(),
            "provenance": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgumentProvenanceOut"])
            ).optional(),
            "deprecatedSupportingMid": t.array(t.string()).optional(),
            "personalEntity": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryPersonalEntityOut"])
            ).optional(),
            "isDefaultValue": t.boolean().optional(),
            "onDeviceAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsOut"]
            ).optional(),
            "location": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "isEnum": t.boolean().optional(),
            "resultSupport": t.array(
                t.proxy(renames["UniversalsearchNewPackerKnowledgeResultSupportOut"])
            ).optional(),
            "annotatedRelationship": t.array(
                t.proxy(
                    renames[
                        "LogsSemanticInterpretationIntentQueryWebrefEntityRelationshipOut"
                    ]
                )
            ).optional(),
            "webrefEntitiesIndex": t.integer().optional(),
            "isNimbleAnnotation": t.boolean().optional(),
            "muninSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryMuninSignalsOut"]
            ).optional(),
            "responseMeaningSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignalsOut"
                ]
            ),
            "allowedFuzzyMatch": t.boolean().optional(),
            "annotationLayerSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryAnnotationLayerSignalsOut"]
            ).optional(),
            "ungroundedValueType": t.proxy(
                renames["KnowledgeAnswersValueTypeOut"]
            ).optional(),
            "deprecatedFreebaseType": t.array(t.string()).optional(),
            "resolvedFromPronoun": t.boolean().optional(),
            "mergedImpliedEntity": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryImpliedEntityOut"])
            ).optional(),
            "contextResolution": t.string().optional(),
            "isGenieAnnotation": t.boolean().optional(),
            "supportTransferRules": t.array(
                t.proxy(
                    renames[
                        "LogsSemanticInterpretationIntentQuerySupportTransferRuleOut"
                    ]
                )
            ).optional(),
            "supportTransferSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySupportTransferSignalsOut"]
            ).optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "multipleHorizontalListSelectionMatches": t.boolean().optional(),
            "entityNumber": t.integer().optional(),
            "resolvedFromContext": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentSignalsOut"])
    types["VideoVideoStreamInfoIn"] = t.struct(
        {
            "audioStreamCodecTag": t.string(),
            "partialFile": t.boolean().optional(),
            "audioBitrate": t.number().optional(),
            "audioStartTimestamp": t.string(),
            "videoHasPossibleOpenGop": t.boolean().optional(),
            "audioSampleSize": t.integer().optional(),
            "audioNumberOfFrames": t.string().optional(),
            "pixFmt": t.string().optional(),
            "videoHasNonZeroStartEditList": t.boolean().optional(),
            "audioCodecId": t.string().optional(),
            "audioEndTimestamp": t.string(),
            "numVideoStreams": t.integer().optional(),
            "audioChannels": t.integer().optional(),
            "audioFrameSize": t.string().optional(),
            "level": t.integer(),
            "fileModifiedTime": t.string().optional(),
            "videoFrameSize": t.string().optional(),
            "videostreaminfoVersion": t.integer().optional(),
            "numTimedtextStreams": t.integer().optional(),
            "displayHeight": t.integer(),
            "fileType": t.integer().optional(),
            "videoCodecId": t.string().optional(),
            "avLength": t.number().optional(),
            "numDataStreams": t.integer().optional(),
            "imageStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoVideoStreamIn"])
            ),
            "isVideoInsaneSize": t.boolean().optional(),
            "videoEndTimestamp": t.string(),
            "videoNumberOfInvisibleFrames": t.integer().optional(),
            "audioStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoAudioStreamIn"])
            ),
            "timedtextStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoTimedTextStreamIn"])
            ),
            "containerId": t.string().optional(),
            "dataStream": t.array(t.proxy(renames["VideoVideoStreamInfoDataStreamIn"])),
            "fileHeaderFingerprint": t.string().optional(),
            "videoStreamCodecTag": t.integer(),
            "videoHasNonMonotonicDts": t.boolean().optional(),
            "avDistance": t.string().optional(),
            "videoHeight": t.integer(),
            "videoStartTimestamp": t.string().optional(),
            "profile": t.string().optional(),
            "audioSampleRate": t.string().optional(),
            "videoLength": t.number().optional(),
            "googleVideoClipInfo": t.proxy(
                renames["VideoGoogleVideoClipInfoIn"]
            ).optional(),
            "buildLabel": t.string().optional(),
            "videoHasLeadingMoovAtom": t.boolean().optional(),
            "videoHasBFrames": t.boolean().optional(),
            "isAsf": t.boolean().optional(),
            "isImageFile": t.boolean().optional(),
            "fileSize": t.string().optional(),
            "yPsnr": t.number().optional(),
            "videoNumberOfFrames": t.string().optional(),
            "numAudioStreams": t.integer().optional(),
            "containerType": t.string().optional(),
            "videoHasFragments": t.boolean().optional(),
            "videoHasNonMonotonicPts": t.boolean().optional(),
            "videoClipInfo": t.proxy(renames["VideoVideoClipInfoIn"]).optional(),
            "numImageStreams": t.integer().optional(),
            "parsedByFfmpeg": t.boolean().optional(),
            "videoStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoVideoStreamIn"])
            ),
            "displayWidth": t.integer().optional(),
            "videoWidth": t.integer().optional(),
            "metadata": t.proxy(renames["VideoVideoStreamInfoMetadataIn"]),
            "fileMagic": t.string().optional(),
            "averageVideoFps": t.number().optional(),
            "videoHasVariableAspectRatio": t.boolean().optional(),
            "containsChapters": t.boolean().optional(),
            "audioLength": t.number().optional(),
            "videoInterlace": t.string().optional(),
            "videoFps": t.number().optional(),
            "videoRotation": t.string().optional(),
            "videoBitrate": t.number().optional(),
            "fileName": t.string().optional(),
            "videoPixelAspectRatio": t.number().optional(),
        }
    ).named(renames["VideoVideoStreamInfoIn"])
    types["VideoVideoStreamInfoOut"] = t.struct(
        {
            "audioStreamCodecTag": t.string(),
            "partialFile": t.boolean().optional(),
            "audioBitrate": t.number().optional(),
            "audioStartTimestamp": t.string(),
            "videoHasPossibleOpenGop": t.boolean().optional(),
            "audioSampleSize": t.integer().optional(),
            "audioNumberOfFrames": t.string().optional(),
            "pixFmt": t.string().optional(),
            "videoHasNonZeroStartEditList": t.boolean().optional(),
            "audioCodecId": t.string().optional(),
            "audioEndTimestamp": t.string(),
            "numVideoStreams": t.integer().optional(),
            "audioChannels": t.integer().optional(),
            "audioFrameSize": t.string().optional(),
            "level": t.integer(),
            "fileModifiedTime": t.string().optional(),
            "videoFrameSize": t.string().optional(),
            "videostreaminfoVersion": t.integer().optional(),
            "numTimedtextStreams": t.integer().optional(),
            "displayHeight": t.integer(),
            "fileType": t.integer().optional(),
            "videoCodecId": t.string().optional(),
            "avLength": t.number().optional(),
            "numDataStreams": t.integer().optional(),
            "imageStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoVideoStreamOut"])
            ),
            "isVideoInsaneSize": t.boolean().optional(),
            "videoEndTimestamp": t.string(),
            "videoNumberOfInvisibleFrames": t.integer().optional(),
            "audioStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoAudioStreamOut"])
            ),
            "timedtextStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoTimedTextStreamOut"])
            ),
            "containerId": t.string().optional(),
            "dataStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoDataStreamOut"])
            ),
            "fileHeaderFingerprint": t.string().optional(),
            "videoStreamCodecTag": t.integer(),
            "videoHasNonMonotonicDts": t.boolean().optional(),
            "avDistance": t.string().optional(),
            "videoHeight": t.integer(),
            "videoStartTimestamp": t.string().optional(),
            "profile": t.string().optional(),
            "audioSampleRate": t.string().optional(),
            "videoLength": t.number().optional(),
            "googleVideoClipInfo": t.proxy(
                renames["VideoGoogleVideoClipInfoOut"]
            ).optional(),
            "buildLabel": t.string().optional(),
            "videoHasLeadingMoovAtom": t.boolean().optional(),
            "videoHasBFrames": t.boolean().optional(),
            "isAsf": t.boolean().optional(),
            "isImageFile": t.boolean().optional(),
            "fileSize": t.string().optional(),
            "yPsnr": t.number().optional(),
            "videoNumberOfFrames": t.string().optional(),
            "numAudioStreams": t.integer().optional(),
            "containerType": t.string().optional(),
            "videoHasFragments": t.boolean().optional(),
            "videoHasNonMonotonicPts": t.boolean().optional(),
            "videoClipInfo": t.proxy(renames["VideoVideoClipInfoOut"]).optional(),
            "numImageStreams": t.integer().optional(),
            "parsedByFfmpeg": t.boolean().optional(),
            "videoStream": t.array(
                t.proxy(renames["VideoVideoStreamInfoVideoStreamOut"])
            ),
            "displayWidth": t.integer().optional(),
            "videoWidth": t.integer().optional(),
            "metadata": t.proxy(renames["VideoVideoStreamInfoMetadataOut"]),
            "fileMagic": t.string().optional(),
            "averageVideoFps": t.number().optional(),
            "videoHasVariableAspectRatio": t.boolean().optional(),
            "containsChapters": t.boolean().optional(),
            "audioLength": t.number().optional(),
            "videoInterlace": t.string().optional(),
            "videoFps": t.number().optional(),
            "videoRotation": t.string().optional(),
            "videoBitrate": t.number().optional(),
            "fileName": t.string().optional(),
            "videoPixelAspectRatio": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoOut"])
    types["YoutubeDiscoveryLegosLegosAnnotationsIn"] = t.struct(
        {
            "annotations": t.array(
                t.proxy(renames["YoutubeDiscoveryLegosLegosAnnotationIn"])
            ).optional()
        }
    ).named(renames["YoutubeDiscoveryLegosLegosAnnotationsIn"])
    types["YoutubeDiscoveryLegosLegosAnnotationsOut"] = t.struct(
        {
            "annotations": t.array(
                t.proxy(renames["YoutubeDiscoveryLegosLegosAnnotationOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosAnnotationsOut"])
    types["GoogleCloudDocumentaiV1DocumentPageIn"] = t.struct(
        {
            "imageQualityScores": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresIn"]
            ).optional(),
            "pageNumber": t.integer().optional(),
            "paragraphs": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageParagraphIn"])
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "dimension": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageDimensionIn"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "lines": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageLineIn"])
            ).optional(),
            "tables": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableIn"])
            ).optional(),
            "transforms": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageMatrixIn"])
            ).optional(),
            "image": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageImageIn"]
            ).optional(),
            "blocks": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageBlockIn"])
            ).optional(),
            "tokens": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTokenIn"])
            ).optional(),
            "visualElements": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageVisualElementIn"])
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "formFields": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageFormFieldIn"])
            ).optional(),
            "detectedBarcodes": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeIn"])
            ).optional(),
            "symbols": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageSymbolIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageIn"])
    types["GoogleCloudDocumentaiV1DocumentPageOut"] = t.struct(
        {
            "imageQualityScores": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageImageQualityScoresOut"]
            ).optional(),
            "pageNumber": t.integer().optional(),
            "paragraphs": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageParagraphOut"])
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "dimension": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageDimensionOut"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "lines": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageLineOut"])
            ).optional(),
            "tables": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableOut"])
            ).optional(),
            "transforms": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageMatrixOut"])
            ).optional(),
            "image": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageImageOut"]
            ).optional(),
            "blocks": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageBlockOut"])
            ).optional(),
            "tokens": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTokenOut"])
            ).optional(),
            "visualElements": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageVisualElementOut"])
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "formFields": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageFormFieldOut"])
            ).optional(),
            "detectedBarcodes": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeOut"]
                )
            ).optional(),
            "symbols": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageSymbolOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageOut"])
    types["FreebaseNestedStructIn"] = t.struct(
        {"propertyValue": t.array(t.proxy(renames["FreebasePropertyValueIn"]))}
    ).named(renames["FreebaseNestedStructIn"])
    types["FreebaseNestedStructOut"] = t.struct(
        {
            "propertyValue": t.array(t.proxy(renames["FreebasePropertyValueOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseNestedStructOut"])
    types["AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipIn"] = t.struct(
        {
            "systemContactGroupId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "delegatedGroupInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoIn"]
            ).optional(),
            "contactGroupId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipIn"])
    types["AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipOut"] = t.struct(
        {
            "systemContactGroupId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "delegatedGroupInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoOut"]
            ).optional(),
            "contactGroupId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipOut"])
    types["QualityViewsExtractionClusterInfoIn"] = t.struct(
        {
            "clusterId": t.string().optional(),
            "subCluster": t.array(
                t.proxy(renames["QualityViewsExtractionClusterInfoIn"])
            ),
            "score": t.number().optional(),
            "clusterSetScore": t.number().optional(),
            "clusterSiblingMid": t.array(t.string()).optional(),
        }
    ).named(renames["QualityViewsExtractionClusterInfoIn"])
    types["QualityViewsExtractionClusterInfoOut"] = t.struct(
        {
            "clusterId": t.string().optional(),
            "subCluster": t.array(
                t.proxy(renames["QualityViewsExtractionClusterInfoOut"])
            ),
            "score": t.number().optional(),
            "clusterSetScore": t.number().optional(),
            "clusterSiblingMid": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityViewsExtractionClusterInfoOut"])
    types["NlpSemanticParsingModelsRecurrenceMonthlyPatternIn"] = t.struct(
        {
            "monthDay": t.array(t.integer()).optional(),
            "weekDayNumber": t.integer().optional(),
            "lastDay": t.boolean().optional(),
            "weekDay": t.string().optional(),
            "lastWeek": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternIn"])
    types["NlpSemanticParsingModelsRecurrenceMonthlyPatternOut"] = t.struct(
        {
            "monthDay": t.array(t.integer()).optional(),
            "weekDayNumber": t.integer().optional(),
            "lastDay": t.boolean().optional(),
            "weekDay": t.string().optional(),
            "lastWeek": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternOut"])
    types["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataIn"] = t.struct(
        {"isIncomplete": t.boolean().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataOut"] = t.struct(
        {
            "isIncomplete": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataOut"])
    types["AssistantApiSupportedConversationVersionIn"] = t.struct(
        {
            "supportsConversationProtocol": t.boolean().optional(),
            "version": t.integer().optional(),
        }
    ).named(renames["AssistantApiSupportedConversationVersionIn"])
    types["AssistantApiSupportedConversationVersionOut"] = t.struct(
        {
            "supportsConversationProtocol": t.boolean().optional(),
            "version": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedConversationVersionOut"])
    types["FocusBackendOtherContactIdIn"] = t.struct(
        {
            "deviceContactId": t.array(
                t.proxy(renames["FocusBackendDeviceContactIdIn"])
            ).optional()
        }
    ).named(renames["FocusBackendOtherContactIdIn"])
    types["FocusBackendOtherContactIdOut"] = t.struct(
        {
            "deviceContactId": t.array(
                t.proxy(renames["FocusBackendDeviceContactIdOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendOtherContactIdOut"])
    types["ResearchScienceSearchFieldOfStudyInfoIn"] = t.struct(
        {
            "classificationSource": t.string().optional(),
            "probability": t.number().optional(),
            "isAboveThreshold": t.string().optional(),
            "label": t.string().optional(),
        }
    ).named(renames["ResearchScienceSearchFieldOfStudyInfoIn"])
    types["ResearchScienceSearchFieldOfStudyInfoOut"] = t.struct(
        {
            "classificationSource": t.string().optional(),
            "probability": t.number().optional(),
            "isAboveThreshold": t.string().optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchFieldOfStudyInfoOut"])
    types["GeostoreSkiBoundaryProtoIn"] = t.struct({"type": t.string()}).named(
        renames["GeostoreSkiBoundaryProtoIn"]
    )
    types["GeostoreSkiBoundaryProtoOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GeostoreSkiBoundaryProtoOut"])
    types["AssistantApiOnDeviceAssistantCapabilitiesIn"] = t.struct(
        {
            "isOnDeviceArbitrationSupported": t.boolean().optional(),
            "isOnDeviceUnderstandingSupported": t.boolean().optional(),
            "isLocalNetworkArbitrationSupported": t.boolean().optional(),
            "isOnDeviceAssistantSupported": t.boolean().optional(),
        }
    ).named(renames["AssistantApiOnDeviceAssistantCapabilitiesIn"])
    types["AssistantApiOnDeviceAssistantCapabilitiesOut"] = t.struct(
        {
            "isOnDeviceArbitrationSupported": t.boolean().optional(),
            "isOnDeviceUnderstandingSupported": t.boolean().optional(),
            "isLocalNetworkArbitrationSupported": t.boolean().optional(),
            "isOnDeviceAssistantSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiOnDeviceAssistantCapabilitiesOut"])
    types["IndexingSignalAggregatorUrlScoreIn"] = t.struct(
        {
            "firstServedTimestamp": t.string().optional(),
            "weight": t.number().optional(),
            "url": t.string().optional(),
            "score": t.number().optional(),
            "dsacNumWeeklyPerfRecords": t.integer().optional(),
            "isImportant": t.boolean().optional(),
            "eligibleExperimentalLayer": t.string().optional(),
        }
    ).named(renames["IndexingSignalAggregatorUrlScoreIn"])
    types["IndexingSignalAggregatorUrlScoreOut"] = t.struct(
        {
            "firstServedTimestamp": t.string().optional(),
            "weight": t.number().optional(),
            "url": t.string().optional(),
            "score": t.number().optional(),
            "dsacNumWeeklyPerfRecords": t.integer().optional(),
            "isImportant": t.boolean().optional(),
            "eligibleExperimentalLayer": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorUrlScoreOut"])
    types["OceanDocTagPatentSpecificIn"] = t.struct(
        {
            "internationalClassification": t.array(t.string()),
            "domesticClassification": t.array(t.string()).optional(),
            "documentNumber": t.string().optional(),
            "relativeThumbnailPath": t.string().optional(),
            "docType": t.integer(),
            "contentLanguage": t.string().optional(),
            "tenCharUsClassification": t.array(t.string()),
            "issueDate": t.string().optional(),
            "publicationNumber": t.string().optional(),
            "applicationDate": t.string().optional(),
            "patentAssignee": t.string(),
        }
    ).named(renames["OceanDocTagPatentSpecificIn"])
    types["OceanDocTagPatentSpecificOut"] = t.struct(
        {
            "internationalClassification": t.array(t.string()),
            "domesticClassification": t.array(t.string()).optional(),
            "documentNumber": t.string().optional(),
            "relativeThumbnailPath": t.string().optional(),
            "docType": t.integer(),
            "contentLanguage": t.string().optional(),
            "tenCharUsClassification": t.array(t.string()),
            "issueDate": t.string().optional(),
            "publicationNumber": t.string().optional(),
            "applicationDate": t.string().optional(),
            "patentAssignee": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagPatentSpecificOut"])
    types["NlpSemanticParsingModelsMediaAlbumTitleIn"] = t.struct(
        {
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "favorite": t.boolean().optional(),
            "latest": t.boolean().optional(),
            "rawText": t.string(),
            "playMore": t.boolean().optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "isFromFastPath": t.boolean().optional(),
            "first": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAlbumTitleIn"])
    types["NlpSemanticParsingModelsMediaAlbumTitleOut"] = t.struct(
        {
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "favorite": t.boolean().optional(),
            "latest": t.boolean().optional(),
            "rawText": t.string(),
            "playMore": t.boolean().optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "isFromFastPath": t.boolean().optional(),
            "first": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAlbumTitleOut"])
    types["AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetIn"] = t.struct(
        {
            "app": t.array(t.string()),
            "type": t.string(),
            "clientData": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataIn"
                    ]
                )
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string().optional(),
            "originatingField": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetIn"])
    types["AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOut"] = t.struct(
        {
            "app": t.array(t.string()),
            "type": t.string(),
            "clientData": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataOut"
                    ]
                )
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string().optional(),
            "originatingField": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingFieldOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOut"])
    types["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataIn"] = t.struct(
        {"urlFoundOnPage": t.boolean().optional()}
    ).named(renames["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataIn"])
    types["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataOut"] = t.struct(
        {
            "urlFoundOnPage": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoIn"
    ] = t.struct(
        {
            "namePronunciationAudioMetadata": t.proxy(
                renames["SocialGraphApiProtoNamePronunciationAudioMetadataIn"]
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoOut"
    ] = t.struct(
        {
            "namePronunciationAudioMetadata": t.proxy(
                renames["SocialGraphApiProtoNamePronunciationAudioMetadataOut"]
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoOut"
        ]
    )
    types["RepositoryWebrefTripleAnnotationIn"] = t.struct(
        {
            "isImplied": t.boolean().optional(),
            "confidenceScore": t.number().optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "triple": t.proxy(renames["KnowledgeGraphTripleIn"]),
            "kgVerified": t.boolean().optional(),
            "predMid": t.array(t.string()).optional(),
            "mentions": t.array(
                t.proxy(renames["RepositoryWebrefTripleMentionIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefTripleAnnotationIn"])
    types["RepositoryWebrefTripleAnnotationOut"] = t.struct(
        {
            "isImplied": t.boolean().optional(),
            "confidenceScore": t.number().optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "triple": t.proxy(renames["KnowledgeGraphTripleOut"]),
            "kgVerified": t.boolean().optional(),
            "predMid": t.array(t.string()).optional(),
            "mentions": t.array(
                t.proxy(renames["RepositoryWebrefTripleMentionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefTripleAnnotationOut"])
    types["KnowledgeAnswersOpaqueMoneyTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueMoneyTypeIn"])
    types["KnowledgeAnswersOpaqueMoneyTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueMoneyTypeOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodIn"
    ] = t.struct(
        {
            "gracePeriodType": t.string(),
            "gracePeriodStart": t.string().optional(),
            "gracePeriodEnd": t.string().optional(),
            "manualGracePeriodInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoIn"
                ]
            ),
            "calendarDay": t.proxy(renames["GoogleTypeDateIn"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodOut"
    ] = t.struct(
        {
            "gracePeriodType": t.string(),
            "gracePeriodStart": t.string().optional(),
            "gracePeriodEnd": t.string().optional(),
            "manualGracePeriodInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfoOut"
                ]
            ),
            "calendarDay": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodOut"]
    )
    types["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsIn"] = t.struct(
        {
            "uploaderName": t.string(),
            "durationMs": t.integer(),
            "instances": t.array(
                t.proxy(
                    renames[
                        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceIn"
                    ]
                )
            ),
        }
    ).named(renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsIn"])
    types["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsOut"] = t.struct(
        {
            "uploaderName": t.string(),
            "durationMs": t.integer(),
            "instances": t.array(
                t.proxy(
                    renames[
                        "QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstanceOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsOut"])
    types["RepositoryWebrefPersonalizationContextOutputIn"] = t.struct(
        {"type": t.string(), "score": t.number().optional()}
    ).named(renames["RepositoryWebrefPersonalizationContextOutputIn"])
    types["RepositoryWebrefPersonalizationContextOutputOut"] = t.struct(
        {
            "type": t.string(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPersonalizationContextOutputOut"])
    types["AppsPeopleOzExternalMergedpeopleapiTaglineIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiTaglineIn"])
    types["AppsPeopleOzExternalMergedpeopleapiTaglineOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiTaglineOut"])
    types["MobilePerDocDataIn"] = t.struct(
        {
            "flags": t.integer(),
            "mobileurl": t.string().optional(),
            "transcodedPageScore": t.integer().optional(),
        }
    ).named(renames["MobilePerDocDataIn"])
    types["MobilePerDocDataOut"] = t.struct(
        {
            "flags": t.integer(),
            "mobileurl": t.string().optional(),
            "transcodedPageScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MobilePerDocDataOut"])
    types["SearchPolicyRankableSensitivityAttentionalEntityIn"] = t.struct(
        {"aeOrigin": t.string()}
    ).named(renames["SearchPolicyRankableSensitivityAttentionalEntityIn"])
    types["SearchPolicyRankableSensitivityAttentionalEntityOut"] = t.struct(
        {"aeOrigin": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SearchPolicyRankableSensitivityAttentionalEntityOut"])
    types["SpamBrainScoreIn"] = t.struct(
        {"versionId": t.integer().optional(), "sbScore": t.number().optional()}
    ).named(renames["SpamBrainScoreIn"])
    types["SpamBrainScoreOut"] = t.struct(
        {
            "versionId": t.integer().optional(),
            "sbScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpamBrainScoreOut"])
    types["QualityProseCSEUrlInfoIn"] = t.struct(
        {"cseId": t.string().optional()}
    ).named(renames["QualityProseCSEUrlInfoIn"])
    types["QualityProseCSEUrlInfoOut"] = t.struct(
        {
            "cseId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityProseCSEUrlInfoOut"])
    types["QualityQrewritePersonalContactDataIn"] = t.struct(
        {
            "familyName": t.string(),
            "conceptIdEn": t.string().optional(),
            "lookupNameSource": t.string(),
            "pkgReferenceType": t.string(),
            "givenName": t.string(),
            "relationshipLexicalInfo": t.proxy(
                renames["CopleyLexicalMetadataIn"]
            ).optional(),
            "recognitionAlternateScore": t.number().optional(),
            "personData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"]
            ).optional(),
            "hasGplusProfile": t.boolean(),
            "commonNameAliasConfidence": t.number().optional(),
            "isVisibleToGuestsRelationship": t.boolean().optional(),
            "matchedRecognitionAlternateName": t.string().optional(),
            "displayName": t.string().optional(),
            "gaiaId": t.string(),
            "relationshipMemory": t.array(
                t.proxy(renames["QualityQrewriteRelationshipMemoryDataIn"])
            ).optional(),
            "pkgPerson": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationIn"]
            ).optional(),
            "isTransliteratedMatch": t.boolean().optional(),
            "conceptId": t.string().optional(),
            "additionalContactMetadata": t.array(
                t.struct({"_": t.string().optional()})
            ).optional(),
            "recognitionAlternateSource": t.string().optional(),
            "matchSignal": t.proxy(
                renames["AssistantVerticalsCommonContactMatchSignalIn"]
            ).optional(),
            "ffracScore": t.number().optional(),
            "accountProvenance": t.proxy(
                renames["QualityQrewriteAccountProvenanceIn"]
            ).optional(),
            "sharedContactOwnerGaiaId": t.string().optional(),
            "isFromOnDeviceLookup": t.boolean().optional(),
            "source": t.string().optional(),
            "hasAddressForDeviceContacts": t.boolean().optional(),
            "personalContactDataLog": t.proxy(
                renames["AssistantLogsCommunicationPersonalContactDataLogIn"]
            ).optional(),
            "matchedNameType": t.string().optional(),
        }
    ).named(renames["QualityQrewritePersonalContactDataIn"])
    types["QualityQrewritePersonalContactDataOut"] = t.struct(
        {
            "familyName": t.string(),
            "conceptIdEn": t.string().optional(),
            "lookupNameSource": t.string(),
            "pkgReferenceType": t.string(),
            "givenName": t.string(),
            "relationshipLexicalInfo": t.proxy(
                renames["CopleyLexicalMetadataOut"]
            ).optional(),
            "recognitionAlternateScore": t.number().optional(),
            "personData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"]
            ).optional(),
            "hasGplusProfile": t.boolean(),
            "commonNameAliasConfidence": t.number().optional(),
            "isVisibleToGuestsRelationship": t.boolean().optional(),
            "matchedRecognitionAlternateName": t.string().optional(),
            "displayName": t.string().optional(),
            "gaiaId": t.string(),
            "relationshipMemory": t.array(
                t.proxy(renames["QualityQrewriteRelationshipMemoryDataOut"])
            ).optional(),
            "pkgPerson": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationOut"]
            ).optional(),
            "isTransliteratedMatch": t.boolean().optional(),
            "conceptId": t.string().optional(),
            "additionalContactMetadata": t.array(
                t.struct({"_": t.string().optional()})
            ).optional(),
            "recognitionAlternateSource": t.string().optional(),
            "matchSignal": t.proxy(
                renames["AssistantVerticalsCommonContactMatchSignalOut"]
            ).optional(),
            "ffracScore": t.number().optional(),
            "accountProvenance": t.proxy(
                renames["QualityQrewriteAccountProvenanceOut"]
            ).optional(),
            "sharedContactOwnerGaiaId": t.string().optional(),
            "isFromOnDeviceLookup": t.boolean().optional(),
            "source": t.string().optional(),
            "hasAddressForDeviceContacts": t.boolean().optional(),
            "personalContactDataLog": t.proxy(
                renames["AssistantLogsCommunicationPersonalContactDataLogOut"]
            ).optional(),
            "matchedNameType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewritePersonalContactDataOut"])
    types["VideoContentSearchAnchorCommonFeatureSetIn"] = t.struct(
        {
            "bleurtFeatures": t.proxy(
                renames["VideoContentSearchBleurtFeaturesIn"]
            ).optional(),
            "descriptionAverageBabelSimilarityScore": t.number().optional(),
            "titleAnchorBabelMatchScore": t.number().optional(),
            "timestamp": t.array(
                t.proxy(
                    renames[
                        "VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampIn"
                    ]
                )
            ),
            "retentionScore": t.number().optional(),
            "mumDescriptivenessScore": t.number().optional(),
            "descriptionMaximumBabelSimilarityScore": t.number().optional(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentIn"]).optional(),
            "mumUsefulnessScore": t.number().optional(),
            "bleurtScore": t.number().optional(),
            "dolphinScore": t.number().optional(),
            "dolphinDescriptivenessScore": t.number().optional(),
            "anchorQbstDistance": t.number().optional(),
            "asrAverageBabelSimilarityScore": t.number().optional(),
            "timedLabelFeatures": t.array(
                t.proxy(renames["VideoContentSearchCaptionLabelFeaturesIn"])
            ).optional(),
            "descartesScoreWithTitle": t.number().optional(),
            "dolphinEnsembleScore": t.array(
                t.proxy(renames["VideoContentSearchDolphinEnsembleScoreIn"])
            ).optional(),
            "dolphinFeatures": t.proxy(
                renames["VideoContentSearchDolphinFeaturesIn"]
            ).optional(),
            "dolphinUsefulnessScore": t.number(),
            "asrMaximumBabelSimilarityScore": t.number().optional(),
            "labelPhraseEmbedding": t.array(t.number()).optional(),
        }
    ).named(renames["VideoContentSearchAnchorCommonFeatureSetIn"])
    types["VideoContentSearchAnchorCommonFeatureSetOut"] = t.struct(
        {
            "bleurtFeatures": t.proxy(
                renames["VideoContentSearchBleurtFeaturesOut"]
            ).optional(),
            "descriptionAverageBabelSimilarityScore": t.number().optional(),
            "titleAnchorBabelMatchScore": t.number().optional(),
            "timestamp": t.array(
                t.proxy(
                    renames[
                        "VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampOut"
                    ]
                )
            ),
            "retentionScore": t.number().optional(),
            "mumDescriptivenessScore": t.number().optional(),
            "descriptionMaximumBabelSimilarityScore": t.number().optional(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentOut"]).optional(),
            "mumUsefulnessScore": t.number().optional(),
            "bleurtScore": t.number().optional(),
            "dolphinScore": t.number().optional(),
            "dolphinDescriptivenessScore": t.number().optional(),
            "anchorQbstDistance": t.number().optional(),
            "asrAverageBabelSimilarityScore": t.number().optional(),
            "timedLabelFeatures": t.array(
                t.proxy(renames["VideoContentSearchCaptionLabelFeaturesOut"])
            ).optional(),
            "descartesScoreWithTitle": t.number().optional(),
            "dolphinEnsembleScore": t.array(
                t.proxy(renames["VideoContentSearchDolphinEnsembleScoreOut"])
            ).optional(),
            "dolphinFeatures": t.proxy(
                renames["VideoContentSearchDolphinFeaturesOut"]
            ).optional(),
            "dolphinUsefulnessScore": t.number(),
            "asrMaximumBabelSimilarityScore": t.number().optional(),
            "labelPhraseEmbedding": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorCommonFeatureSetOut"])
    types["GoogleProtobufEmptyIn"] = t.struct({"_": t.string().optional()}).named(
        renames["GoogleProtobufEmptyIn"]
    )
    types["GoogleProtobufEmptyOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleProtobufEmptyOut"])
    types["RepositoryWebrefWebrefEntityRelationshipIn"] = t.struct(
        {
            "entityIndex": t.integer().optional(),
            "linkMetadata": t.proxy(
                renames["RepositoryWebrefEntityLinkMetadataIn"]
            ).optional(),
            "linkWeight": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityRelationshipIn"])
    types["RepositoryWebrefWebrefEntityRelationshipOut"] = t.struct(
        {
            "entityIndex": t.integer().optional(),
            "linkMetadata": t.proxy(
                renames["RepositoryWebrefEntityLinkMetadataOut"]
            ).optional(),
            "linkWeight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityRelationshipOut"])
    types["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemIn"] = t.struct(
        {
            "homeautomationMetadata": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn"
                ]
            ).optional(),
            "matchedItemRawvalue": t.string().optional(),
            "matchedItemKey": t.string().optional(),
            "matchedItemValue": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemIn"])
    types[
        "AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemOut"
    ] = t.struct(
        {
            "homeautomationMetadata": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut"
                ]
            ).optional(),
            "matchedItemRawvalue": t.string().optional(),
            "matchedItemKey": t.string().optional(),
            "matchedItemValue": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItemOut"]
    )
    types["ImageSearchImageSelectionInfoIn"] = t.struct(
        {
            "imageLinkSelectionInfo": t.proxy(
                renames["ImageMustangImageLinkSelectionInfoIn"]
            ).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["ImageSearchImageSelectionInfoIn"])
    types["ImageSearchImageSelectionInfoOut"] = t.struct(
        {
            "imageLinkSelectionInfo": t.proxy(
                renames["ImageMustangImageLinkSelectionInfoOut"]
            ).optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSearchImageSelectionInfoOut"])
    types["NlpSemanticParsingModelsMediaNewsTopicIn"] = t.struct(
        {
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaNewsTopicIn"])
    types["NlpSemanticParsingModelsMediaNewsTopicOut"] = t.struct(
        {
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaNewsTopicOut"])
    types["OceanLocaleViewabilityDatesIn"] = t.struct(
        {"effectiveDate": t.string().optional()}
    ).named(renames["OceanLocaleViewabilityDatesIn"])
    types["OceanLocaleViewabilityDatesOut"] = t.struct(
        {
            "effectiveDate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanLocaleViewabilityDatesOut"])
    types["AssistantApiTimeOfDayIn"] = t.struct(
        {
            "hour": t.integer().optional(),
            "nanosecond": t.integer().optional(),
            "minute": t.integer().optional(),
            "second": t.integer().optional(),
        }
    ).named(renames["AssistantApiTimeOfDayIn"])
    types["AssistantApiTimeOfDayOut"] = t.struct(
        {
            "hour": t.integer().optional(),
            "nanosecond": t.integer().optional(),
            "minute": t.integer().optional(),
            "second": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiTimeOfDayOut"])
    types["SocialGraphApiProtoSearchProfileLocationInfoIn"] = t.struct(
        {
            "lat": t.number().optional(),
            "radius": t.number().optional(),
            "lon": t.number().optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileLocationInfoIn"])
    types["SocialGraphApiProtoSearchProfileLocationInfoOut"] = t.struct(
        {
            "lat": t.number().optional(),
            "radius": t.number().optional(),
            "lon": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileLocationInfoOut"])
    types["NlpSaftEntityProfileReferenceIn"] = t.struct(
        {"docid": t.string(), "entity": t.integer()}
    ).named(renames["NlpSaftEntityProfileReferenceIn"])
    types["NlpSaftEntityProfileReferenceOut"] = t.struct(
        {
            "docid": t.string(),
            "entity": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileReferenceOut"])
    types["NlpSemanticParsingLocalRoomConstraintIn"] = t.struct(
        {"minNumBathrooms": t.number().optional(), "minNumBedrooms": t.integer()}
    ).named(renames["NlpSemanticParsingLocalRoomConstraintIn"])
    types["NlpSemanticParsingLocalRoomConstraintOut"] = t.struct(
        {
            "minNumBathrooms": t.number().optional(),
            "minNumBedrooms": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalRoomConstraintOut"])
    types["TravelFlightsNameCatalogEntryIn"] = t.struct(
        {"text": t.string(), "language": t.string()}
    ).named(renames["TravelFlightsNameCatalogEntryIn"])
    types["TravelFlightsNameCatalogEntryOut"] = t.struct(
        {
            "text": t.string(),
            "language": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsNameCatalogEntryOut"])
    types["NlpSciencelitCitationDataIn"] = t.struct(
        {
            "externalLink": t.string(),
            "scholarCitation": t.proxy(renames["ScienceCitationIn"]).optional(),
            "reference": t.string().optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdIn"])),
            "author": t.array(t.proxy(renames["NlpSciencelitAuthorIn"])),
            "title": t.string().optional(),
            "fullText": t.string(),
        }
    ).named(renames["NlpSciencelitCitationDataIn"])
    types["NlpSciencelitCitationDataOut"] = t.struct(
        {
            "externalLink": t.string(),
            "scholarCitation": t.proxy(renames["ScienceCitationOut"]).optional(),
            "reference": t.string().optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdOut"])),
            "author": t.array(t.proxy(renames["NlpSciencelitAuthorOut"])),
            "title": t.string().optional(),
            "fullText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitCitationDataOut"])
    types["NlpSemanticParsingDatetimeRangeIn"] = t.struct(
        {
            "rangeModifier": t.string().optional(),
            "end": t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"]),
            "endRelative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ),
            "start": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesIn"]
            ),
            "begin": t.proxy(
                renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"]
            ).optional(),
            "exclusive": t.boolean(),
            "duration": t.proxy(
                renames["NlpSemanticParsingDatetimeQuantityIn"]
            ).optional(),
            "beginRelative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ),
            "symbolicValue": t.string().optional(),
            "fuzzyRange": t.string(),
            "finish": t.proxy(renames["NlpSemanticParsingDatetimeDateTimeIn"]),
            "metadata": t.string(),
        }
    ).named(renames["NlpSemanticParsingDatetimeRangeIn"])
    types["NlpSemanticParsingDatetimeRangeOut"] = t.struct(
        {
            "rangeModifier": t.string().optional(),
            "end": t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"]),
            "endRelative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ),
            "start": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesOut"]
            ),
            "begin": t.proxy(
                renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"]
            ).optional(),
            "exclusive": t.boolean(),
            "duration": t.proxy(
                renames["NlpSemanticParsingDatetimeQuantityOut"]
            ).optional(),
            "beginRelative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ),
            "symbolicValue": t.string().optional(),
            "fuzzyRange": t.string(),
            "finish": t.proxy(renames["NlpSemanticParsingDatetimeDateTimeOut"]),
            "metadata": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeRangeOut"])
    types["ImageContentQueryBoostQueryBoostIn"] = t.struct(
        {"boost": t.number().optional(), "query": t.string().optional()}
    ).named(renames["ImageContentQueryBoostQueryBoostIn"])
    types["ImageContentQueryBoostQueryBoostOut"] = t.struct(
        {
            "boost": t.number().optional(),
            "query": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageContentQueryBoostQueryBoostOut"])
    types["AppsPeopleOzExternalMergedpeopleapiIdentityInfoIn"] = t.struct(
        {
            "sourceIds": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSourceIdentityIn"])
            ).optional(),
            "previousPersonId": t.array(t.string()).optional(),
            "originalLookupToken": t.array(t.string()).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiIdentityInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiIdentityInfoOut"] = t.struct(
        {
            "sourceIds": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSourceIdentityOut"])
            ).optional(),
            "previousPersonId": t.array(t.string()).optional(),
            "originalLookupToken": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiIdentityInfoOut"])
    types["AssistantApiSupportedProtocolVersionMessageVersionPairIn"] = t.struct(
        {"version": t.integer().optional(), "messageName": t.string().optional()}
    ).named(renames["AssistantApiSupportedProtocolVersionMessageVersionPairIn"])
    types["AssistantApiSupportedProtocolVersionMessageVersionPairOut"] = t.struct(
        {
            "version": t.integer().optional(),
            "messageName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedProtocolVersionMessageVersionPairOut"])
    types["SecurityCredentialsLdapUserProtoIn"] = t.struct(
        {"userName": t.string()}
    ).named(renames["SecurityCredentialsLdapUserProtoIn"])
    types["SecurityCredentialsLdapUserProtoOut"] = t.struct(
        {"userName": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsLdapUserProtoOut"])
    types["GoogleInternalAppsWaldoV1alphaUpcomingOooContextIn"] = t.struct(
        {
            "timeRange": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaTimeRangeIn"]
            ).optional()
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUpcomingOooContextIn"])
    types["GoogleInternalAppsWaldoV1alphaUpcomingOooContextOut"] = t.struct(
        {
            "timeRange": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaTimeRangeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUpcomingOooContextOut"])
    types["IndexingMlVerticalVerticalItemIn"] = t.struct(
        {
            "petacatId": t.integer().optional(),
            "probability": t.number().optional(),
            "name": t.string().optional(),
            "id": t.integer().optional(),
        }
    ).named(renames["IndexingMlVerticalVerticalItemIn"])
    types["IndexingMlVerticalVerticalItemOut"] = t.struct(
        {
            "petacatId": t.integer().optional(),
            "probability": t.number().optional(),
            "name": t.string().optional(),
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMlVerticalVerticalItemOut"])
    types["NlpSemanticParsingDatetimeRecurrentIn"] = t.struct(
        {
            "start": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeDateTimeIn"])
            ).optional(),
            "unit": t.string(),
            "startRelative": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"])
            ),
            "exception": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeDateTimeIn"])
            ).optional(),
            "period": t.integer().optional(),
            "startPoint": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"])
            ).optional(),
            "timeInterval": t.proxy(
                renames["NlpSemanticParsingDatetimeQuantityIn"]
            ).optional(),
            "metadata": t.string(),
            "rangeRestriction": t.proxy(renames["NlpSemanticParsingDatetimeRangeIn"]),
            "countRestriction": t.integer().optional(),
            "restriction": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "frequency": t.integer().optional(),
            "target": t.proxy(
                renames["NlpSemanticParsingDatetimeTargetToFetchIn"]
            ).optional(),
            "relativeRangeRestriction": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ),
            "startRange": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRangeIn"])
            ),
        }
    ).named(renames["NlpSemanticParsingDatetimeRecurrentIn"])
    types["NlpSemanticParsingDatetimeRecurrentOut"] = t.struct(
        {
            "start": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeDateTimeOut"])
            ).optional(),
            "unit": t.string(),
            "startRelative": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"])
            ),
            "exception": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeDateTimeOut"])
            ).optional(),
            "period": t.integer().optional(),
            "startPoint": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"])
            ).optional(),
            "timeInterval": t.proxy(
                renames["NlpSemanticParsingDatetimeQuantityOut"]
            ).optional(),
            "metadata": t.string(),
            "rangeRestriction": t.proxy(renames["NlpSemanticParsingDatetimeRangeOut"]),
            "countRestriction": t.integer().optional(),
            "restriction": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "frequency": t.integer().optional(),
            "target": t.proxy(
                renames["NlpSemanticParsingDatetimeTargetToFetchOut"]
            ).optional(),
            "relativeRangeRestriction": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ),
            "startRange": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRangeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeRecurrentOut"])
    types["NlpSemanticParsingModelsPersonPersonIn"] = t.struct(
        {
            "annotationSource": t.array(t.string()),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "alternativeNameInfo": t.array(
                t.proxy(renames["QualityQrewriteAlternativeNameInfoIn"])
            ).optional(),
            "alternativeNames": t.array(t.string()).optional(),
            "rawText": t.string(),
            "isPersonGroupReference": t.boolean().optional(),
            "pkgSemantics": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationIn"]
            ).optional(),
            "normalizedText": t.string().optional(),
            "isPersonalContact": t.boolean().optional(),
            "contactData": t.array(
                t.proxy(renames["QualityQrewritePersonalContactDataIn"])
            ).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsPersonPersonIn"])
    types["NlpSemanticParsingModelsPersonPersonOut"] = t.struct(
        {
            "annotationSource": t.array(t.string()),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "alternativeNameInfo": t.array(
                t.proxy(renames["QualityQrewriteAlternativeNameInfoOut"])
            ).optional(),
            "alternativeNames": t.array(t.string()).optional(),
            "rawText": t.string(),
            "isPersonGroupReference": t.boolean().optional(),
            "pkgSemantics": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationOut"]
            ).optional(),
            "normalizedText": t.string().optional(),
            "isPersonalContact": t.boolean().optional(),
            "contactData": t.array(
                t.proxy(renames["QualityQrewritePersonalContactDataOut"])
            ).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsPersonPersonOut"])
    types["NlpSemanticParsingNumberNumberIn"] = t.struct(
        {
            "modifier": t.string().optional(),
            "fractionNumber": t.proxy(
                renames["NlpSemanticParsingNumberFractionNumberIn"]
            ),
            "rawText": t.string().optional(),
            "spelledOutType": t.string().optional(),
            "isSpelledOut": t.boolean().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "simpleNumber": t.proxy(renames["NlpSemanticParsingNumberSimpleNumberIn"]),
            "normalizedValue": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingNumberNumberIn"])
    types["NlpSemanticParsingNumberNumberOut"] = t.struct(
        {
            "modifier": t.string().optional(),
            "fractionNumber": t.proxy(
                renames["NlpSemanticParsingNumberFractionNumberOut"]
            ),
            "rawText": t.string().optional(),
            "spelledOutType": t.string().optional(),
            "isSpelledOut": t.boolean().optional(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "simpleNumber": t.proxy(renames["NlpSemanticParsingNumberSimpleNumberOut"]),
            "normalizedValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingNumberNumberOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataIn"
    ] = t.struct(
        {"blueDiff": t.number(), "redDiff": t.number(), "greenDiff": t.number()}
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataOut"
    ] = t.struct(
        {
            "blueDiff": t.number(),
            "redDiff": t.number(),
            "greenDiff": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataOut"
        ]
    )
    types["GeostoreLinearStripePatternProtoIn"] = t.struct(
        {"line": t.array(t.proxy(renames["GeostorePhysicalLineProtoIn"])).optional()}
    ).named(renames["GeostoreLinearStripePatternProtoIn"])
    types["GeostoreLinearStripePatternProtoOut"] = t.struct(
        {
            "line": t.array(
                t.proxy(renames["GeostorePhysicalLineProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLinearStripePatternProtoOut"])
    types["YoutubeCommentsClusteringMiniStanzaIn"] = t.struct(
        {
            "lowQualityDecisions": t.struct({"_": t.string().optional()}).optional(),
            "parentId": t.string().optional(),
            "channelId": t.string().optional(),
            "ytAuthorChannelId": t.string().optional(),
            "sentiment": t.proxy(
                renames["YoutubeCommentsSentimentSentimentIn"]
            ).optional(),
            "isDeleted": t.boolean().optional(),
            "isPubliclyVisible": t.boolean().optional(),
            "textQualityScores2": t.proxy(
                renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn"]
            ).optional(),
            "creationDevice": t.string().optional(),
            "stanzaRestrictions": t.array(
                t.proxy(renames["SocialStanzaStanzaRestrictionIn"])
            ).optional(),
            "wordEntropy": t.number().optional(),
            "postId": t.string().optional(),
            "hasCreatorReply": t.boolean().optional(),
            "numDislikes": t.integer().optional(),
            "isSubscriber": t.boolean().optional(),
            "channelDiscussionId": t.string().optional(),
            "segments": t.proxy(renames["SocialCommonSegmentsIn"]).optional(),
            "fds": t.number().optional(),
            "commentClassificationRanking": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "smartReplies": t.struct({"_": t.string().optional()}).optional(),
            "numReplies": t.integer().optional(),
            "blarneyStoneScore": t.proxy(
                renames["YoutubeDistillerBlarneyStoneScoresIn"]
            ).optional(),
            "commentType": t.string().optional(),
            "isPinned": t.boolean().optional(),
            "videoTimestamps": t.array(t.integer()).optional(),
            "misinfoScores": t.struct({"_": t.string().optional()}).optional(),
            "isReply": t.boolean().optional(),
            "lastReplyTimestampUsec": t.string().optional(),
            "hasCreatorHeart": t.boolean().optional(),
            "subjectIsVideoOwner": t.boolean().optional(),
            "superThanksInfo": t.proxy(
                renames["YoutubeBackstageSuperVodCommentInfoIn"]
            ).optional(),
            "mentionedTimestampCommentSecond": t.integer().optional(),
            "distillerEngagements": t.proxy(
                renames["AppsPeopleActivityStreamqualityDistillerEngagementsIn"]
            ).optional(),
            "content": t.string().optional(),
            "textLength": t.integer().optional(),
            "videoId": t.string().optional(),
            "isAuthorSponsor": t.boolean().optional(),
            "numSubscribersBucket": t.integer().optional(),
            "textQualityScores": t.proxy(
                renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationIn"]
            ).optional(),
            "creationTimeInSeconds": t.string().optional(),
            "ytCommentQualityScore2": t.number(),
            "sensitivityScores": t.struct({"_": t.string().optional()}).optional(),
            "automodScores": t.struct({"_": t.string().optional()}).optional(),
            "subject": t.proxy(
                renames["SecurityCredentialsPrincipalProtoIn"]
            ).optional(),
            "empiricalCtrs": t.proxy(
                renames["VideoYoutubeCommentsRankingCTRMetricsIn"]
            ).optional(),
            "detailedLanguageCode": t.string().optional(),
            "ytReplyToItemId": t.string().optional(),
            "ytCommentQualityScore": t.number().optional(),
            "channelProfileQualityScores": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "coverageSamplingEligible": t.boolean().optional(),
            "stanzaId": t.string().optional(),
            "eligibleQualifiedTeaserFilters": t.array(t.string()).optional(),
            "textEmbedding": t.struct({"_": t.string().optional()}).optional(),
            "commentClassificationBuckets": t.array(t.string()).optional(),
            "numLikes": t.integer().optional(),
            "ytCommentQualityScore3": t.number(),
            "rankingPostLanguage": t.string().optional(),
            "contentUpdateTimestamp": t.string().optional(),
            "shortReplyVideoId": t.string().optional(),
            "languageCode": t.string().optional(),
            "subscriptionTimestamp": t.string().optional(),
            "numRepliers": t.integer().optional(),
            "commentClassification": t.struct({"_": t.string().optional()}).optional(),
            "ansibleScores": t.struct({"_": t.string().optional()}).optional(),
            "offlineEngagementScores": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "charEntropy": t.number().optional(),
            "impersonationScores": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["YoutubeCommentsClusteringMiniStanzaIn"])
    types["YoutubeCommentsClusteringMiniStanzaOut"] = t.struct(
        {
            "lowQualityDecisions": t.struct({"_": t.string().optional()}).optional(),
            "parentId": t.string().optional(),
            "channelId": t.string().optional(),
            "ytAuthorChannelId": t.string().optional(),
            "sentiment": t.proxy(
                renames["YoutubeCommentsSentimentSentimentOut"]
            ).optional(),
            "isDeleted": t.boolean().optional(),
            "isPubliclyVisible": t.boolean().optional(),
            "textQualityScores2": t.proxy(
                renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut"]
            ).optional(),
            "creationDevice": t.string().optional(),
            "stanzaRestrictions": t.array(
                t.proxy(renames["SocialStanzaStanzaRestrictionOut"])
            ).optional(),
            "wordEntropy": t.number().optional(),
            "postId": t.string().optional(),
            "hasCreatorReply": t.boolean().optional(),
            "numDislikes": t.integer().optional(),
            "isSubscriber": t.boolean().optional(),
            "channelDiscussionId": t.string().optional(),
            "segments": t.proxy(renames["SocialCommonSegmentsOut"]).optional(),
            "fds": t.number().optional(),
            "commentClassificationRanking": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "smartReplies": t.struct({"_": t.string().optional()}).optional(),
            "numReplies": t.integer().optional(),
            "blarneyStoneScore": t.proxy(
                renames["YoutubeDistillerBlarneyStoneScoresOut"]
            ).optional(),
            "commentType": t.string().optional(),
            "isPinned": t.boolean().optional(),
            "videoTimestamps": t.array(t.integer()).optional(),
            "misinfoScores": t.struct({"_": t.string().optional()}).optional(),
            "isReply": t.boolean().optional(),
            "lastReplyTimestampUsec": t.string().optional(),
            "hasCreatorHeart": t.boolean().optional(),
            "subjectIsVideoOwner": t.boolean().optional(),
            "superThanksInfo": t.proxy(
                renames["YoutubeBackstageSuperVodCommentInfoOut"]
            ).optional(),
            "mentionedTimestampCommentSecond": t.integer().optional(),
            "distillerEngagements": t.proxy(
                renames["AppsPeopleActivityStreamqualityDistillerEngagementsOut"]
            ).optional(),
            "content": t.string().optional(),
            "textLength": t.integer().optional(),
            "videoId": t.string().optional(),
            "isAuthorSponsor": t.boolean().optional(),
            "numSubscribersBucket": t.integer().optional(),
            "textQualityScores": t.proxy(
                renames["YoutubeCommentsRankingYouTubeCommentTextQualityAnnotationOut"]
            ).optional(),
            "creationTimeInSeconds": t.string().optional(),
            "ytCommentQualityScore2": t.number(),
            "sensitivityScores": t.struct({"_": t.string().optional()}).optional(),
            "automodScores": t.struct({"_": t.string().optional()}).optional(),
            "subject": t.proxy(
                renames["SecurityCredentialsPrincipalProtoOut"]
            ).optional(),
            "empiricalCtrs": t.proxy(
                renames["VideoYoutubeCommentsRankingCTRMetricsOut"]
            ).optional(),
            "detailedLanguageCode": t.string().optional(),
            "ytReplyToItemId": t.string().optional(),
            "ytCommentQualityScore": t.number().optional(),
            "channelProfileQualityScores": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "coverageSamplingEligible": t.boolean().optional(),
            "stanzaId": t.string().optional(),
            "eligibleQualifiedTeaserFilters": t.array(t.string()).optional(),
            "textEmbedding": t.struct({"_": t.string().optional()}).optional(),
            "commentClassificationBuckets": t.array(t.string()).optional(),
            "numLikes": t.integer().optional(),
            "ytCommentQualityScore3": t.number(),
            "rankingPostLanguage": t.string().optional(),
            "contentUpdateTimestamp": t.string().optional(),
            "shortReplyVideoId": t.string().optional(),
            "languageCode": t.string().optional(),
            "subscriptionTimestamp": t.string().optional(),
            "numRepliers": t.integer().optional(),
            "commentClassification": t.struct({"_": t.string().optional()}).optional(),
            "ansibleScores": t.struct({"_": t.string().optional()}).optional(),
            "offlineEngagementScores": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "charEntropy": t.number().optional(),
            "impersonationScores": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeCommentsClusteringMiniStanzaOut"])
    types["RepositoryWebrefImageQueryIndicesIn"] = t.struct(
        {
            "imageIndex": t.integer().optional(),
            "docid": t.string(),
            "canonicalDocid": t.string().optional(),
            "queryIndex": t.proxy(renames["RepositoryWebrefQueryIndicesIn"]).optional(),
        }
    ).named(renames["RepositoryWebrefImageQueryIndicesIn"])
    types["RepositoryWebrefImageQueryIndicesOut"] = t.struct(
        {
            "imageIndex": t.integer().optional(),
            "docid": t.string(),
            "canonicalDocid": t.string().optional(),
            "queryIndex": t.proxy(
                renames["RepositoryWebrefQueryIndicesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefImageQueryIndicesOut"])
    types["GeostoreTimezoneProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["GeostoreTimezoneProtoIn"])
    types["GeostoreTimezoneProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimezoneProtoOut"])
    types["QualityCalypsoAppsUniversalImageIn"] = t.struct(
        {"width": t.integer(), "fifeUrl": t.string(), "height": t.integer()}
    ).named(renames["QualityCalypsoAppsUniversalImageIn"])
    types["QualityCalypsoAppsUniversalImageOut"] = t.struct(
        {
            "width": t.integer(),
            "fifeUrl": t.string(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalImageOut"])
    types["AssistantGroundingRankerGroundingProviderFeaturesIn"] = t.struct(
        {
            "providerGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerProviderGroundingProviderFeaturesIn"]
            ),
            "deviceGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerDeviceGroundingProviderFeaturesIn"]
            ),
            "podcastGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerPodcastGroundingProviderFeaturesIn"]
            ),
            "mediaGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerMediaGroundingProviderFeaturesIn"]
            ),
            "contactGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerContactGroundingProviderFeaturesIn"]
            ),
        }
    ).named(renames["AssistantGroundingRankerGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerGroundingProviderFeaturesOut"] = t.struct(
        {
            "providerGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerProviderGroundingProviderFeaturesOut"]
            ),
            "deviceGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerDeviceGroundingProviderFeaturesOut"]
            ),
            "podcastGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerPodcastGroundingProviderFeaturesOut"]
            ),
            "mediaGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerMediaGroundingProviderFeaturesOut"]
            ),
            "contactGroundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerContactGroundingProviderFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerGroundingProviderFeaturesOut"])
    types["GoogleTypeLatLngIn"] = t.struct(
        {"latitude": t.number().optional(), "longitude": t.number().optional()}
    ).named(renames["GoogleTypeLatLngIn"])
    types["GoogleTypeLatLngOut"] = t.struct(
        {
            "latitude": t.number().optional(),
            "longitude": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeLatLngOut"])
    types["ImageRepositoryDeepImageEngagingnessOutputIn"] = t.struct(
        {"score": t.number().optional()}
    ).named(renames["ImageRepositoryDeepImageEngagingnessOutputIn"])
    types["ImageRepositoryDeepImageEngagingnessOutputOut"] = t.struct(
        {
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryDeepImageEngagingnessOutputOut"])
    types["VideoLegosLegosAnnotationsSetsIn"] = t.struct(
        {"annotationsSet": t.array(t.proxy(renames["VideoLegosLegosAnnotationsSetIn"]))}
    ).named(renames["VideoLegosLegosAnnotationsSetsIn"])
    types["VideoLegosLegosAnnotationsSetsOut"] = t.struct(
        {
            "annotationsSet": t.array(
                t.proxy(renames["VideoLegosLegosAnnotationsSetOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoLegosLegosAnnotationsSetsOut"])
    types["QualityDialogManagerLocalResultIn"] = t.struct(
        {
            "distanceUnits": t.string().optional(),
            "streetName": t.string(),
            "neighborhood": t.string().optional(),
            "inUserCountry": t.boolean().optional(),
            "resultId": t.proxy(
                renames["NlpSemanticParsingLocalLocalResultIdIn"]
            ).optional(),
            "countryCode": t.string().optional(),
            "country": t.string(),
            "adminArea1": t.string().optional(),
            "availableIntents": t.proxy(
                renames["QualityDialogManagerLocalIntentOptionsIn"]
            ).optional(),
            "synonym": t.array(t.string()).optional(),
            "businessType": t.proxy(
                renames["NlpSemanticParsingLocalBusinessTypeIn"]
            ).optional(),
            "isBusinessChain": t.boolean().optional(),
            "externalIds": t.proxy(
                renames["QualityDialogManagerExternalIdsIn"]
            ).optional(),
            "streetNumber": t.string(),
            "inUserLocality": t.boolean().optional(),
            "locality": t.string().optional(),
            "ttsAddress": t.string().optional(),
            "distanceMeters": t.string().optional(),
            "internalFoodOrderingMetadata": t.proxy(
                renames["LocalsearchProtoInternalFoodOrderingActionMetadataIn"]
            ).optional(),
            "featureType": t.string(),
            "name": t.string().optional(),
            "inUserAdminArea1": t.boolean().optional(),
        }
    ).named(renames["QualityDialogManagerLocalResultIn"])
    types["QualityDialogManagerLocalResultOut"] = t.struct(
        {
            "distanceUnits": t.string().optional(),
            "streetName": t.string(),
            "neighborhood": t.string().optional(),
            "inUserCountry": t.boolean().optional(),
            "resultId": t.proxy(
                renames["NlpSemanticParsingLocalLocalResultIdOut"]
            ).optional(),
            "countryCode": t.string().optional(),
            "country": t.string(),
            "adminArea1": t.string().optional(),
            "availableIntents": t.proxy(
                renames["QualityDialogManagerLocalIntentOptionsOut"]
            ).optional(),
            "synonym": t.array(t.string()).optional(),
            "businessType": t.proxy(
                renames["NlpSemanticParsingLocalBusinessTypeOut"]
            ).optional(),
            "isBusinessChain": t.boolean().optional(),
            "externalIds": t.proxy(
                renames["QualityDialogManagerExternalIdsOut"]
            ).optional(),
            "streetNumber": t.string(),
            "inUserLocality": t.boolean().optional(),
            "locality": t.string().optional(),
            "ttsAddress": t.string().optional(),
            "distanceMeters": t.string().optional(),
            "internalFoodOrderingMetadata": t.proxy(
                renames["LocalsearchProtoInternalFoodOrderingActionMetadataOut"]
            ).optional(),
            "featureType": t.string(),
            "name": t.string().optional(),
            "inUserAdminArea1": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityDialogManagerLocalResultOut"])
    types["GenericSnippetResponseIn"] = t.struct(
        {
            "wwwSnippetResponse": t.proxy(renames["WWWSnippetResponseIn"]).optional(),
            "snippet": t.array(t.string()).optional(),
            "title": t.string().optional(),
            "debugInfo": t.array(t.string()).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["GenericSnippetResponseIn"])
    types["GenericSnippetResponseOut"] = t.struct(
        {
            "wwwSnippetResponse": t.proxy(renames["WWWSnippetResponseOut"]).optional(),
            "snippet": t.array(t.string()).optional(),
            "title": t.string().optional(),
            "debugInfo": t.array(t.string()).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GenericSnippetResponseOut"])
    types["GoogleCloudContentwarehouseV1DocumentQueryIn"] = t.struct(
        {
            "queryContext": t.array(t.string()).optional(),
            "fileTypeFilter": t.proxy(
                renames["GoogleCloudContentwarehouseV1FileTypeFilterIn"]
            ).optional(),
            "propertyFilter": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyFilterIn"])
            ).optional(),
            "customWeightsMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1CustomWeightsMetadataIn"]
            ).optional(),
            "documentSchemaNames": t.array(t.string()).optional(),
            "documentCreatorFilter": t.array(t.string()).optional(),
            "query": t.string().optional(),
            "folderNameFilter": t.string().optional(),
            "timeFilters": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1TimeFilterIn"])
            ).optional(),
            "isNlQuery": t.boolean().optional(),
            "customPropertyFilter": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentQueryIn"])
    types["GoogleCloudContentwarehouseV1DocumentQueryOut"] = t.struct(
        {
            "queryContext": t.array(t.string()).optional(),
            "fileTypeFilter": t.proxy(
                renames["GoogleCloudContentwarehouseV1FileTypeFilterOut"]
            ).optional(),
            "propertyFilter": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyFilterOut"])
            ).optional(),
            "customWeightsMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1CustomWeightsMetadataOut"]
            ).optional(),
            "documentSchemaNames": t.array(t.string()).optional(),
            "documentCreatorFilter": t.array(t.string()).optional(),
            "query": t.string().optional(),
            "folderNameFilter": t.string().optional(),
            "timeFilters": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1TimeFilterOut"])
            ).optional(),
            "isNlQuery": t.boolean().optional(),
            "customPropertyFilter": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentQueryOut"])
    types["AppsDynamiteSharedOrganizationInfoConsumerInfoIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AppsDynamiteSharedOrganizationInfoConsumerInfoIn"])
    types["AppsDynamiteSharedOrganizationInfoConsumerInfoOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AppsDynamiteSharedOrganizationInfoConsumerInfoOut"])
    types["AssistantApiDeviceCapabilitiesIn"] = t.struct(
        {
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "surfaceTypeString": t.string().optional(),
            "callCapabilities": t.proxy(
                renames["AssistantApiCallCapabilitiesIn"]
            ).optional(),
            "systemNotificationRestrictions": t.proxy(
                renames["AssistantApiSystemNotificationRestrictionsIn"]
            ).optional(),
            "notificationOutputRestrictions": t.proxy(
                renames["AssistantApiNotificationOutputRestrictionsIn"]
            ).optional(),
            "cast": t.proxy(renames["AssistantApiCastCapabilitiesIn"]).optional(),
            "messageCapabilities": t.proxy(
                renames["AssistantApiMessageCapabilitiesIn"]
            ),
            "hasVoiceTelephony": t.boolean().optional(),
            "androidIntentCapabilities": t.proxy(
                renames["AssistantApiAndroidIntentCapabilitiesIn"]
            ).optional(),
            "safetyRestrictions": t.string().optional(),
            "bluetoothCapabilities": t.proxy(
                renames["AssistantApiBluetoothCapabilitiesIn"]
            ).optional(),
            "sodaCapabilities": t.proxy(
                renames["AssistantApiSodaCapabilitiesIn"]
            ).optional(),
            "surfaceIdentity": t.proxy(
                renames["AssistantApiCoreTypesSurfaceIdentityIn"]
            ).optional(),
            "lensPerceptionCapabilities": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesIn"]
            ).optional(),
            "location": t.proxy(
                renames["AssistantApiLocationCapabilitiesIn"]
            ).optional(),
            "deviceUxMode": t.string().optional(),
            "software": t.proxy(
                renames["AssistantApiSoftwareCapabilitiesIn"]
            ).optional(),
            "carUxRestrictions": t.array(t.string()).optional(),
            "communicationUiCapabilities": t.proxy(
                renames["AssistantApiCommunicationUiCapabilitiesIn"]
            ),
            "loggingOnlyData": t.proxy(
                renames["AssistantApiLoggingOnlyDataIn"]
            ).optional(),
            "speechCapabilities": t.proxy(
                renames["AssistantApiSpeechCapabilitiesIn"]
            ).optional(),
            "outputRestrictions": t.proxy(
                renames["AssistantApiOutputRestrictionsIn"]
            ).optional(),
            "camera": t.proxy(renames["AssistantApiCameraCapabilitiesIn"]).optional(),
            "jwnCapabilities": t.proxy(
                renames["AssistantApiJwnCapabilitiesIn"]
            ).optional(),
            "notificationCapabilities": t.string().optional(),
            "audioInput": t.proxy(renames["AssistantApiAudioInputIn"]).optional(),
            "movement": t.proxy(
                renames["AssistantApiMovementCapabilitiesIn"]
            ).optional(),
            "contactLookupCapabilities": t.proxy(
                renames["AssistantApiContactLookupCapabilitiesIn"]
            ),
            "screen": t.proxy(renames["AssistantApiScreenCapabilitiesIn"]).optional(),
            "audioOutput": t.proxy(renames["AssistantApiAudioOutputIn"]).optional(),
            "supportedLocale": t.array(t.string()).optional(),
            "popOnLockscreenCapability": t.string().optional(),
            "thirdPartyCapabilities": t.proxy(
                renames["AssistantApiThirdPartyCapabilitiesIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiDeviceCapabilitiesIn"])
    types["AssistantApiDeviceCapabilitiesOut"] = t.struct(
        {
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "surfaceTypeString": t.string().optional(),
            "callCapabilities": t.proxy(
                renames["AssistantApiCallCapabilitiesOut"]
            ).optional(),
            "systemNotificationRestrictions": t.proxy(
                renames["AssistantApiSystemNotificationRestrictionsOut"]
            ).optional(),
            "notificationOutputRestrictions": t.proxy(
                renames["AssistantApiNotificationOutputRestrictionsOut"]
            ).optional(),
            "cast": t.proxy(renames["AssistantApiCastCapabilitiesOut"]).optional(),
            "messageCapabilities": t.proxy(
                renames["AssistantApiMessageCapabilitiesOut"]
            ),
            "hasVoiceTelephony": t.boolean().optional(),
            "androidIntentCapabilities": t.proxy(
                renames["AssistantApiAndroidIntentCapabilitiesOut"]
            ).optional(),
            "safetyRestrictions": t.string().optional(),
            "bluetoothCapabilities": t.proxy(
                renames["AssistantApiBluetoothCapabilitiesOut"]
            ).optional(),
            "sodaCapabilities": t.proxy(
                renames["AssistantApiSodaCapabilitiesOut"]
            ).optional(),
            "surfaceIdentity": t.proxy(
                renames["AssistantApiCoreTypesSurfaceIdentityOut"]
            ).optional(),
            "lensPerceptionCapabilities": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesOut"]
            ).optional(),
            "location": t.proxy(
                renames["AssistantApiLocationCapabilitiesOut"]
            ).optional(),
            "deviceUxMode": t.string().optional(),
            "software": t.proxy(
                renames["AssistantApiSoftwareCapabilitiesOut"]
            ).optional(),
            "carUxRestrictions": t.array(t.string()).optional(),
            "communicationUiCapabilities": t.proxy(
                renames["AssistantApiCommunicationUiCapabilitiesOut"]
            ),
            "loggingOnlyData": t.proxy(
                renames["AssistantApiLoggingOnlyDataOut"]
            ).optional(),
            "speechCapabilities": t.proxy(
                renames["AssistantApiSpeechCapabilitiesOut"]
            ).optional(),
            "outputRestrictions": t.proxy(
                renames["AssistantApiOutputRestrictionsOut"]
            ).optional(),
            "camera": t.proxy(renames["AssistantApiCameraCapabilitiesOut"]).optional(),
            "jwnCapabilities": t.proxy(
                renames["AssistantApiJwnCapabilitiesOut"]
            ).optional(),
            "notificationCapabilities": t.string().optional(),
            "audioInput": t.proxy(renames["AssistantApiAudioInputOut"]).optional(),
            "movement": t.proxy(
                renames["AssistantApiMovementCapabilitiesOut"]
            ).optional(),
            "contactLookupCapabilities": t.proxy(
                renames["AssistantApiContactLookupCapabilitiesOut"]
            ),
            "screen": t.proxy(renames["AssistantApiScreenCapabilitiesOut"]).optional(),
            "audioOutput": t.proxy(renames["AssistantApiAudioOutputOut"]).optional(),
            "supportedLocale": t.array(t.string()).optional(),
            "popOnLockscreenCapability": t.string().optional(),
            "thirdPartyCapabilities": t.proxy(
                renames["AssistantApiThirdPartyCapabilitiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiDeviceCapabilitiesOut"])
    types["KnowledgeAnswersIntentQueryShoppingIdsIn"] = t.struct(
        {
            "bxCategoryIds": t.array(t.integer()).optional(),
            "merchantSourceIds": t.array(t.string()).optional(),
            "merchantIds": t.array(t.string()).optional(),
            "brandEntityId": t.string().optional(),
            "measures": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueIn"])
            ),
            "aspectClusterIds": t.array(t.string()).optional(),
            "tagIds": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryShoppingIdsIn"])
    types["KnowledgeAnswersIntentQueryShoppingIdsOut"] = t.struct(
        {
            "bxCategoryIds": t.array(t.integer()).optional(),
            "merchantSourceIds": t.array(t.string()).optional(),
            "merchantIds": t.array(t.string()).optional(),
            "brandEntityId": t.string().optional(),
            "measures": t.array(
                t.proxy(
                    renames["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueOut"]
                )
            ),
            "aspectClusterIds": t.array(t.string()).optional(),
            "tagIds": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryShoppingIdsOut"])
    types["ImageSearchUnindexedImageLinkIn"] = t.struct(
        {
            "amarnaStatus": t.proxy(
                renames["ImageRepositoryAmarnaStatusIn"]
            ).optional(),
            "url": t.string().optional(),
            "crawlStatusInfo": t.proxy(
                renames["ImageRepositoryCrawlStatusInfoIn"]
            ).optional(),
        }
    ).named(renames["ImageSearchUnindexedImageLinkIn"])
    types["ImageSearchUnindexedImageLinkOut"] = t.struct(
        {
            "amarnaStatus": t.proxy(
                renames["ImageRepositoryAmarnaStatusOut"]
            ).optional(),
            "url": t.string().optional(),
            "crawlStatusInfo": t.proxy(
                renames["ImageRepositoryCrawlStatusInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSearchUnindexedImageLinkOut"])
    types["NlpSciencelitRetrievalQueryEncodingDebugInfoIn"] = t.struct(
        {
            "scamQueryEncoding": t.proxy(
                renames["ResearchScamGenericFeatureVectorIn"]
            ).optional()
        }
    ).named(renames["NlpSciencelitRetrievalQueryEncodingDebugInfoIn"])
    types["NlpSciencelitRetrievalQueryEncodingDebugInfoOut"] = t.struct(
        {
            "scamQueryEncoding": t.proxy(
                renames["ResearchScamGenericFeatureVectorOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitRetrievalQueryEncodingDebugInfoOut"])
    types["DrishtiFeatureSetDataIn"] = t.struct(
        {
            "label": t.array(t.proxy(renames["DrishtiLabelSetElementIn"])).optional(),
            "feature": t.array(
                t.proxy(renames["DrishtiFeatureSetDataFeatureSetElementIn"])
            ).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
        }
    ).named(renames["DrishtiFeatureSetDataIn"])
    types["DrishtiFeatureSetDataOut"] = t.struct(
        {
            "label": t.array(t.proxy(renames["DrishtiLabelSetElementOut"])).optional(),
            "feature": t.array(
                t.proxy(renames["DrishtiFeatureSetDataFeatureSetElementOut"])
            ).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiFeatureSetDataOut"])
    types[
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateIn"
    ] = t.struct({"categoryGroup": t.string(), "state": t.string()}).named(
        renames[
            "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateIn"
        ]
    )
    types[
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateOut"
    ] = t.struct(
        {
            "categoryGroup": t.string(),
            "state": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateOut"
        ]
    )
    types["AssistantVerticalsHomeautomationProtoCommonEventTriggerIn"] = t.struct(
        {
            "enabled": t.boolean(),
            "triggerSource": t.integer().optional(),
            "eventTriggerType": t.string().optional(),
            "eventTriggerPayload": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoCommonEventTriggerIn"])
    types["AssistantVerticalsHomeautomationProtoCommonEventTriggerOut"] = t.struct(
        {
            "enabled": t.boolean(),
            "triggerSource": t.integer().optional(),
            "eventTriggerType": t.string().optional(),
            "eventTriggerPayload": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoCommonEventTriggerOut"])
    types["PhotosHdrMetadataIn"] = t.struct(
        {"gainmap": t.proxy(renames["PhotosHdrMetadataGainmapIn"]).optional()}
    ).named(renames["PhotosHdrMetadataIn"])
    types["PhotosHdrMetadataOut"] = t.struct(
        {
            "gainmap": t.proxy(renames["PhotosHdrMetadataGainmapOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosHdrMetadataOut"])
    types["CorpusSelectionInfoIn"] = t.struct(
        {
            "referrerUrls": t.array(t.string()).optional(),
            "referrerDocid": t.array(t.string()).optional(),
            "corpus": t.string(),
            "corpusScore": t.number().optional(),
            "isSelectedForIndexing": t.boolean().optional(),
        }
    ).named(renames["CorpusSelectionInfoIn"])
    types["CorpusSelectionInfoOut"] = t.struct(
        {
            "referrerUrls": t.array(t.string()).optional(),
            "referrerDocid": t.array(t.string()).optional(),
            "corpus": t.string(),
            "corpusScore": t.number().optional(),
            "isSelectedForIndexing": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CorpusSelectionInfoOut"])
    types["BiasingPerDocDataBiasingFieldIn"] = t.struct(
        {"Name": t.string().optional(), "Value": t.number().optional()}
    ).named(renames["BiasingPerDocDataBiasingFieldIn"])
    types["BiasingPerDocDataBiasingFieldOut"] = t.struct(
        {
            "Name": t.string().optional(),
            "Value": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BiasingPerDocDataBiasingFieldOut"])
    types["LegalCitationCourtDocumentOpinionInfoIn"] = t.struct(
        {
            "JoinedBy": t.proxy(renames["LegalPersonIn"]).optional(),
            "Bench": t.integer(),
            "Type": t.integer().optional(),
            "DeliveredBy": t.proxy(renames["LegalPersonIn"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentOpinionInfoIn"])
    types["LegalCitationCourtDocumentOpinionInfoOut"] = t.struct(
        {
            "JoinedBy": t.proxy(renames["LegalPersonOut"]).optional(),
            "Bench": t.integer(),
            "Type": t.integer().optional(),
            "DeliveredBy": t.proxy(renames["LegalPersonOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentOpinionInfoOut"])
    types["ResearchScienceSearchVersionClusterInfoIn"] = t.struct(
        {
            "versionClusterId": t.string().optional(),
            "numVersions": t.integer().optional(),
            "indexInVersionCluster": t.integer().optional(),
        }
    ).named(renames["ResearchScienceSearchVersionClusterInfoIn"])
    types["ResearchScienceSearchVersionClusterInfoOut"] = t.struct(
        {
            "versionClusterId": t.string().optional(),
            "numVersions": t.integer().optional(),
            "indexInVersionCluster": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchVersionClusterInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiBraggingRightsIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBraggingRightsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiBraggingRightsOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBraggingRightsOut"])
    types["AssistantRemindersAttachmentLinkIn"] = t.struct(
        {
            "notificationText": t.proxy(
                renames["AssistantRemindersNlgTemplateKeyIn"]
            ).optional(),
            "linkUrl": t.string().optional(),
        }
    ).named(renames["AssistantRemindersAttachmentLinkIn"])
    types["AssistantRemindersAttachmentLinkOut"] = t.struct(
        {
            "notificationText": t.proxy(
                renames["AssistantRemindersNlgTemplateKeyOut"]
            ).optional(),
            "linkUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantRemindersAttachmentLinkOut"])
    types["TrawlerThrottleClientDataIn"] = t.struct(
        {"MaxAllowedRate": t.number().optional(), "IsBandwidthThrottle": t.boolean()}
    ).named(renames["TrawlerThrottleClientDataIn"])
    types["TrawlerThrottleClientDataOut"] = t.struct(
        {
            "MaxAllowedRate": t.number().optional(),
            "IsBandwidthThrottle": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerThrottleClientDataOut"])
    types["OceanDocTagWorkClusterIn"] = t.struct(
        {"workId": t.string(), "clusterSize": t.integer()}
    ).named(renames["OceanDocTagWorkClusterIn"])
    types["OceanDocTagWorkClusterOut"] = t.struct(
        {
            "workId": t.string(),
            "clusterSize": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagWorkClusterOut"])
    types["ShoppingWebentityShoppingAnnotationInferredImageIn"] = t.struct(
        {
            "inferredImageType": t.string(),
            "inferredImageSource": t.string(),
            "inferredImageId": t.string(),
            "neardupInfo": t.array(
                t.proxy(
                    renames[
                        "ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationInferredImageIn"])
    types["ShoppingWebentityShoppingAnnotationInferredImageOut"] = t.struct(
        {
            "inferredImageType": t.string(),
            "inferredImageSource": t.string(),
            "inferredImageId": t.string(),
            "neardupInfo": t.array(
                t.proxy(
                    renames[
                        "ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationInferredImageOut"])
    types["AssistantApiMediaControlSupportIn"] = t.struct(
        {"skipConfirmationsWhilePlaying": t.boolean().optional()}
    ).named(renames["AssistantApiMediaControlSupportIn"])
    types["AssistantApiMediaControlSupportOut"] = t.struct(
        {
            "skipConfirmationsWhilePlaying": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiMediaControlSupportOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionIn"
    ] = t.struct({"clientData": t.string().optional(), "type": t.string()}).named(
        renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionOut"
    ] = t.struct(
        {
            "clientData": t.string().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestrictionOut"]
    )
    types["AssistantApiAudioOutputIn"] = t.struct(
        {
            "volumeProperties": t.proxy(renames["AssistantApiVolumePropertiesIn"]),
            "alwaysOnSpeaker": t.string(),
            "mediaTtsMixable": t.string(),
            "quality": t.string(),
            "environment": t.string(),
        }
    ).named(renames["AssistantApiAudioOutputIn"])
    types["AssistantApiAudioOutputOut"] = t.struct(
        {
            "volumeProperties": t.proxy(renames["AssistantApiVolumePropertiesOut"]),
            "alwaysOnSpeaker": t.string(),
            "mediaTtsMixable": t.string(),
            "quality": t.string(),
            "environment": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAudioOutputOut"])
    types["VendingConsumerProtoTrustedGenomePolicyIn"] = t.struct(
        {
            "targetRegion": t.array(
                t.proxy(
                    renames["VendingConsumerProtoTrustedGenomePolicyTargetRegionIn"]
                )
            ).optional(),
            "localizedRegionOverride": t.string().optional(),
            "policyType": t.array(t.string()).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomePolicyIn"])
    types["VendingConsumerProtoTrustedGenomePolicyOut"] = t.struct(
        {
            "targetRegion": t.array(
                t.proxy(
                    renames["VendingConsumerProtoTrustedGenomePolicyTargetRegionOut"]
                )
            ).optional(),
            "localizedRegionOverride": t.string().optional(),
            "policyType": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomePolicyOut"])
    types["GeostoreFeatureHistoryMetadataProtoIn"] = t.struct(
        {
            "featureBirthTimestampUs": t.string().optional(),
            "lastModificationTimestampUs": t.string().optional(),
            "removalTimestampUs": t.string().optional(),
        }
    ).named(renames["GeostoreFeatureHistoryMetadataProtoIn"])
    types["GeostoreFeatureHistoryMetadataProtoOut"] = t.struct(
        {
            "featureBirthTimestampUs": t.string().optional(),
            "lastModificationTimestampUs": t.string().optional(),
            "removalTimestampUs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureHistoryMetadataProtoOut"])
    types["NlpSaftSemanticNodeArcIn"] = t.struct(
        {
            "type": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "semanticNode": t.integer().optional(),
            "description": t.string().optional(),
            "implicit": t.boolean().optional(),
        }
    ).named(renames["NlpSaftSemanticNodeArcIn"])
    types["NlpSaftSemanticNodeArcOut"] = t.struct(
        {
            "type": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "semanticNode": t.integer().optional(),
            "description": t.string().optional(),
            "implicit": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftSemanticNodeArcOut"])
    types["GeostoreFoodMenuItemOptionProtoIngredientIn"] = t.struct(
        {
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoIngredientIn"])
    types["GeostoreFoodMenuItemOptionProtoIngredientOut"] = t.struct(
        {
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoIngredientOut"])
    types["AssistantGroundingRankerLaaFeatureIn"] = t.struct(
        {"value": t.number(), "name": t.string()}
    ).named(renames["AssistantGroundingRankerLaaFeatureIn"])
    types["AssistantGroundingRankerLaaFeatureOut"] = t.struct(
        {
            "value": t.number(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeatureOut"])
    types["RepositoryWebrefNgramMentionIn"] = t.struct(
        {"mid": t.string().optional(), "score": t.number().optional()}
    ).named(renames["RepositoryWebrefNgramMentionIn"])
    types["RepositoryWebrefNgramMentionOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNgramMentionOut"])
    types["SocialGraphApiProtoPronounEntryIn"] = t.struct(
        {
            "value": t.string().optional(),
            "pronounType": t.string().optional(),
            "languageCode": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoPronounEntryIn"])
    types["SocialGraphApiProtoPronounEntryOut"] = t.struct(
        {
            "value": t.string().optional(),
            "pronounType": t.string().optional(),
            "languageCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPronounEntryOut"])
    types[
        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetIn"
    ] = t.struct(
        {
            "version": t.integer().optional(),
            "products": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationProductInformationIn"
                    ]
                )
            ).optional(),
            "modelType": t.string().optional(),
        }
    ).named(
        renames[
            "ImageRepositoryShoppingProductInformationVersionedProductInformationSetIn"
        ]
    )
    types[
        "ImageRepositoryShoppingProductInformationVersionedProductInformationSetOut"
    ] = t.struct(
        {
            "version": t.integer().optional(),
            "products": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationProductInformationOut"
                    ]
                )
            ).optional(),
            "modelType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "ImageRepositoryShoppingProductInformationVersionedProductInformationSetOut"
        ]
    )
    types["AssistantApiCoreTypesGovernedDeviceConfigIn"] = t.struct(
        {"agentId": t.string().optional(), "deviceId": t.string().optional()}
    ).named(renames["AssistantApiCoreTypesGovernedDeviceConfigIn"])
    types["AssistantApiCoreTypesGovernedDeviceConfigOut"] = t.struct(
        {
            "agentId": t.string().optional(),
            "deviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedDeviceConfigOut"])
    types["VideoContentSearchVideoAnchorsScoreInfoIn"] = t.struct(
        {
            "ratingScore": t.proxy(
                renames["VideoContentSearchVideoAnchorSetRatingScoreIn"]
            ).optional(),
            "commentAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCommentAnchorSetFeaturesIn"]
            ).optional(),
            "ocrAnchorClusterFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextClusterFeatureIn"]
            ).optional(),
            "captionSpanAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCaptionSpanAnchorSetFeaturesIn"]
            ),
            "filtered": t.boolean().optional(),
            "ocrDescriptionTrainingDataSetFeatures": t.proxy(
                renames["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesIn"]
            ).optional(),
            "listAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchListAnchorSetFeaturesIn"]
            ).optional(),
            "captionEntityAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCaptionEntityAnchorSetFeaturesIn"]
            ).optional(),
            "listTrainingDataSetFeatures": t.proxy(
                renames["VideoContentSearchListTrainingDataSetFeaturesIn"]
            ).optional(),
            "qnaAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchQnaAnchorSetFeaturesIn"]
            ).optional(),
            "sportsKeyMomentsAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesIn"]
            ),
            "anchorsCommonFeatureSet": t.proxy(
                renames["VideoContentSearchAnchorsCommonFeatureSetIn"]
            ).optional(),
            "descriptionAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchDescriptionAnchorSetFeaturesIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorsScoreInfoIn"])
    types["VideoContentSearchVideoAnchorsScoreInfoOut"] = t.struct(
        {
            "ratingScore": t.proxy(
                renames["VideoContentSearchVideoAnchorSetRatingScoreOut"]
            ).optional(),
            "commentAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCommentAnchorSetFeaturesOut"]
            ).optional(),
            "ocrAnchorClusterFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextClusterFeatureOut"]
            ).optional(),
            "captionSpanAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCaptionSpanAnchorSetFeaturesOut"]
            ),
            "filtered": t.boolean().optional(),
            "ocrDescriptionTrainingDataSetFeatures": t.proxy(
                renames["VideoContentSearchOcrDescriptionTrainingDataSetFeaturesOut"]
            ).optional(),
            "listAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchListAnchorSetFeaturesOut"]
            ).optional(),
            "captionEntityAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchCaptionEntityAnchorSetFeaturesOut"]
            ).optional(),
            "listTrainingDataSetFeatures": t.proxy(
                renames["VideoContentSearchListTrainingDataSetFeaturesOut"]
            ).optional(),
            "qnaAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchQnaAnchorSetFeaturesOut"]
            ).optional(),
            "sportsKeyMomentsAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesOut"]
            ),
            "anchorsCommonFeatureSet": t.proxy(
                renames["VideoContentSearchAnchorsCommonFeatureSetOut"]
            ).optional(),
            "descriptionAnchorSetFeatures": t.proxy(
                renames["VideoContentSearchDescriptionAnchorSetFeaturesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorsScoreInfoOut"])
    types["IndexingDupsLocalizedLocalizedClusterIn"] = t.struct(
        {
            "cluster": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterClusterIn"])
            ),
            "inbodyTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn"]
            ),
            "outlinksTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn"]
            ),
            "deprecatedHreflangInfo": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn"]
            ).optional(),
            "warningMessage": t.array(t.string()).optional(),
            "boostSourceBlocker": t.boolean().optional(),
            "hreflangTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn"]
            ),
            "documentLanguage": t.string().optional(),
            "deprecatedOutlinksInfo": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn"]
            ),
            "sitedupRuleId": t.array(t.string()).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterIn"])
    types["IndexingDupsLocalizedLocalizedClusterOut"] = t.struct(
        {
            "cluster": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterClusterOut"])
            ),
            "inbodyTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut"]
            ),
            "outlinksTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut"]
            ),
            "deprecatedHreflangInfo": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut"]
            ).optional(),
            "warningMessage": t.array(t.string()).optional(),
            "boostSourceBlocker": t.boolean().optional(),
            "hreflangTargetLink": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut"]
            ),
            "documentLanguage": t.string().optional(),
            "deprecatedOutlinksInfo": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut"]
            ),
            "sitedupRuleId": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterOut"])
    types["RepositoryWebrefWebrefEntityCollectionsIn"] = t.struct(
        {"collection": t.array(t.proxy(renames["RepositoryWebrefKGCollectionIn"]))}
    ).named(renames["RepositoryWebrefWebrefEntityCollectionsIn"])
    types["RepositoryWebrefWebrefEntityCollectionsOut"] = t.struct(
        {
            "collection": t.array(t.proxy(renames["RepositoryWebrefKGCollectionOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityCollectionsOut"])
    types["GoodocParagraphRouteIn"] = t.struct(
        {
            "EndPoint": t.proxy(renames["GoodocRoutePointIn"]).optional(),
            "Weight": t.integer().optional(),
            "StartPoint": t.proxy(renames["GoodocRoutePointIn"]).optional(),
            "Word": t.array(t.proxy(renames["GoodocWordIn"])).optional(),
        }
    ).named(renames["GoodocParagraphRouteIn"])
    types["GoodocParagraphRouteOut"] = t.struct(
        {
            "EndPoint": t.proxy(renames["GoodocRoutePointOut"]).optional(),
            "Weight": t.integer().optional(),
            "StartPoint": t.proxy(renames["GoodocRoutePointOut"]).optional(),
            "Word": t.array(t.proxy(renames["GoodocWordOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocParagraphRouteOut"])
    types["RepositoryWebrefSegmentMentionIn"] = t.struct(
        {
            "mention": t.proxy(renames["RepositoryWebrefMentionIn"]),
            "segmentType": t.string(),
        }
    ).named(renames["RepositoryWebrefSegmentMentionIn"])
    types["RepositoryWebrefSegmentMentionOut"] = t.struct(
        {
            "mention": t.proxy(renames["RepositoryWebrefMentionOut"]),
            "segmentType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSegmentMentionOut"])
    types["AssistantContextMediaProviderIdIn"] = t.struct(
        {
            "kgProviderKey": t.string().optional(),
            "chromeOsPackageName": t.string().optional(),
            "iosBundleIdentifier": t.string().optional(),
            "homeAppPackageName": t.string().optional(),
            "sipProviderId": t.string().optional(),
            "providerVariant": t.proxy(
                renames["AssistantContextProviderVariantIn"]
            ).optional(),
            "castAppId": t.string().optional(),
            "mid": t.string().optional(),
            "kaiOsPackageName": t.string().optional(),
            "androidPackageName": t.string().optional(),
        }
    ).named(renames["AssistantContextMediaProviderIdIn"])
    types["AssistantContextMediaProviderIdOut"] = t.struct(
        {
            "kgProviderKey": t.string().optional(),
            "chromeOsPackageName": t.string().optional(),
            "iosBundleIdentifier": t.string().optional(),
            "homeAppPackageName": t.string().optional(),
            "sipProviderId": t.string().optional(),
            "providerVariant": t.proxy(
                renames["AssistantContextProviderVariantOut"]
            ).optional(),
            "castAppId": t.string().optional(),
            "mid": t.string().optional(),
            "kaiOsPackageName": t.string().optional(),
            "androidPackageName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantContextMediaProviderIdOut"])
    types["KnowledgeAnswersIntentQuerySimpleValueIn"] = t.struct(
        {
            "intValue": t.string(),
            "doubleValue": t.number(),
            "identifier": t.proxy(renames["KnowledgeAnswersIntentQueryIdentifierIn"]),
            "ungroundedValue": t.string().optional(),
            "stringValue": t.string(),
            "boolValue": t.boolean(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySimpleValueIn"])
    types["KnowledgeAnswersIntentQuerySimpleValueOut"] = t.struct(
        {
            "intValue": t.string(),
            "doubleValue": t.number(),
            "identifier": t.proxy(renames["KnowledgeAnswersIntentQueryIdentifierOut"]),
            "ungroundedValue": t.string().optional(),
            "stringValue": t.string(),
            "boolValue": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySimpleValueOut"])
    types["KnowledgeAnswersCompoundTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersCompoundTypeIn"])
    types["KnowledgeAnswersCompoundTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersCompoundTypeOut"])
    types["QualitySitemapBreadcrumbTargetIn"] = t.struct(
        {"docs": t.array(t.proxy(renames["QualitySitemapBreadcrumbTargetDocIn"]))}
    ).named(renames["QualitySitemapBreadcrumbTargetIn"])
    types["QualitySitemapBreadcrumbTargetOut"] = t.struct(
        {
            "docs": t.array(t.proxy(renames["QualitySitemapBreadcrumbTargetDocOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapBreadcrumbTargetOut"])
    types["SecurityCredentialsOAuthConsumerProtoIn"] = t.struct(
        {"domain": t.string()}
    ).named(renames["SecurityCredentialsOAuthConsumerProtoIn"])
    types["SecurityCredentialsOAuthConsumerProtoOut"] = t.struct(
        {"domain": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsOAuthConsumerProtoOut"])
    types["KnowledgeAnswersTrackingNumberTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersTrackingNumberTypeIn"])
    types["KnowledgeAnswersTrackingNumberTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersTrackingNumberTypeOut"])
    types["KnowledgeAnswersOpaqueShoppingStoreTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingStoreTypeIn"])
    types["KnowledgeAnswersOpaqueShoppingStoreTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingStoreTypeOut"])
    types["VideoAmbisonicsAmbisonicsMetadataIn"] = t.struct(
        {
            "version": t.integer(),
            "channelOrdering": t.string(),
            "nonDiegeticStereo": t.boolean(),
            "order": t.integer(),
            "channelMap": t.array(t.integer()).optional(),
            "normalization": t.string(),
            "type": t.string(),
            "numChannels": t.integer(),
        }
    ).named(renames["VideoAmbisonicsAmbisonicsMetadataIn"])
    types["VideoAmbisonicsAmbisonicsMetadataOut"] = t.struct(
        {
            "version": t.integer(),
            "channelOrdering": t.string(),
            "nonDiegeticStereo": t.boolean(),
            "order": t.integer(),
            "channelMap": t.array(t.integer()).optional(),
            "normalization": t.string(),
            "type": t.string(),
            "numChannels": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoAmbisonicsAmbisonicsMetadataOut"])
    types["WWWDocInfoThumbnailIn"] = t.struct(
        {
            "type": t.integer().optional(),
            "expirationTimestampMicros": t.string(),
            "width": t.integer(),
            "height": t.integer(),
        }
    ).named(renames["WWWDocInfoThumbnailIn"])
    types["WWWDocInfoThumbnailOut"] = t.struct(
        {
            "type": t.integer().optional(),
            "expirationTimestampMicros": t.string(),
            "width": t.integer(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWDocInfoThumbnailOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTableIn"] = t.struct(
        {
            "headerRows": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowIn"])
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "bodyRows": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowIn"])
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTableOut"] = t.struct(
        {
            "headerRows": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowOut"])
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "bodyRows": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageTableTableRowOut"])
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableOut"])
    types["RepositoryWebrefAnnotatorCheckpointFprintIn"] = t.struct(
        {"fingerprint": t.string(), "label": t.string()}
    ).named(renames["RepositoryWebrefAnnotatorCheckpointFprintIn"])
    types["RepositoryWebrefAnnotatorCheckpointFprintOut"] = t.struct(
        {
            "fingerprint": t.string(),
            "label": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotatorCheckpointFprintOut"])
    types["QualityCalypsoAppsUniversalAuLiveOpDetailIn"] = t.struct(
        {
            "eventType": t.string().optional(),
            "defaultFormatInformation": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpFormatIn"]
            ).optional(),
            "countryLevelScheduleInformation": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "eventId": t.string().optional(),
            "defaultScheduleInformation": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpEventIn"]
            ).optional(),
            "eventUrl": t.string().optional(),
            "localeLevelFormatInformation": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "priority": t.string(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpDetailIn"])
    types["QualityCalypsoAppsUniversalAuLiveOpDetailOut"] = t.struct(
        {
            "eventType": t.string().optional(),
            "defaultFormatInformation": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpFormatOut"]
            ).optional(),
            "countryLevelScheduleInformation": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "eventId": t.string().optional(),
            "defaultScheduleInformation": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpEventOut"]
            ).optional(),
            "eventUrl": t.string().optional(),
            "localeLevelFormatInformation": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "priority": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpDetailOut"])
    types["KnowledgeAnswersIntentQueryQrefAnnotationSignalsIn"] = t.struct(
        {"score": t.number().optional(), "trustedNameConfidence": t.number().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryQrefAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQueryQrefAnnotationSignalsOut"] = t.struct(
        {
            "score": t.number().optional(),
            "trustedNameConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryQrefAnnotationSignalsOut"])
    types["AssistantApiCoreTypesGovernedRingtoneTaskMetadataIn"] = t.struct(
        {
            "routineAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataIn"
                ]
            ),
            "funtimeMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataIn"
                ]
            ),
            "gentleWakeInfo": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoIn"
                ]
            ).optional(),
            "genMlAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataIn"
                ]
            ),
            "characterTag": t.string(),
            "characterAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataIn"
                ]
            ),
            "category": t.string().optional(),
            "onDeviceAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataIn"
                ]
            ),
            "onDeviceAlarmSound": t.string().optional(),
            "entityMid": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataIn"])
    types["AssistantApiCoreTypesGovernedRingtoneTaskMetadataOut"] = t.struct(
        {
            "routineAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataOut"
                ]
            ),
            "funtimeMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadataOut"
                ]
            ),
            "gentleWakeInfo": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoOut"
                ]
            ).optional(),
            "genMlAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadataOut"
                ]
            ),
            "characterTag": t.string(),
            "characterAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadataOut"
                ]
            ),
            "category": t.string().optional(),
            "onDeviceAlarmMetadata": t.proxy(
                renames[
                    "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataOut"
                ]
            ),
            "onDeviceAlarmSound": t.string().optional(),
            "entityMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataOut"])
    types["RepositoryWebrefNameScoresIn"] = t.struct(
        {
            "totalScore": t.number().optional(),
            "contextWeight": t.number().optional(),
            "openWorldVolumeModifier": t.number().optional(),
            "idfScore": t.number().optional(),
            "completeWorldVolume": t.number().optional(),
            "contextFringeScore": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefNameScoresIn"])
    types["RepositoryWebrefNameScoresOut"] = t.struct(
        {
            "totalScore": t.number().optional(),
            "contextWeight": t.number().optional(),
            "openWorldVolumeModifier": t.number().optional(),
            "idfScore": t.number().optional(),
            "completeWorldVolume": t.number().optional(),
            "contextFringeScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNameScoresOut"])
    types["GoogleCloudContentwarehouseV1RuleEngineOutputIn"] = t.struct(
        {
            "ruleEvaluatorOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEvaluatorOutputIn"]
            ).optional(),
            "actionExecutorOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1ActionExecutorOutputIn"]
            ).optional(),
            "documentName": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleEngineOutputIn"])
    types["GoogleCloudContentwarehouseV1RuleEngineOutputOut"] = t.struct(
        {
            "ruleEvaluatorOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEvaluatorOutputOut"]
            ).optional(),
            "actionExecutorOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1ActionExecutorOutputOut"]
            ).optional(),
            "documentName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleEngineOutputOut"])
    types["GeostoreOperationsProtoIn"] = t.struct(
        {
            "temporaryClosure": t.array(
                t.proxy(renames["GeostoreTemporaryClosureProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreOperationsProtoIn"])
    types["GeostoreOperationsProtoOut"] = t.struct(
        {
            "temporaryClosure": t.array(
                t.proxy(renames["GeostoreTemporaryClosureProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreOperationsProtoOut"])
    types["NlpSemanticParsingDatetimeDateTimeIn"] = t.struct(
        {
            "deleted7": t.boolean().optional(),
            "span": t.proxy(renames["NlpSemanticParsingDatetimeSpanIn"]).optional(),
            "groundingStage": t.string(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "recurrent": t.proxy(renames["NlpSemanticParsingDatetimeRecurrentIn"]),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesIn"]
            ),
            "deleted8": t.boolean(),
            "point": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"])
            ),
            "range": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRangeIn"])
            ).optional(),
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ),
            "compositionElement": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeDateTimeIn"])
    types["NlpSemanticParsingDatetimeDateTimeOut"] = t.struct(
        {
            "deleted7": t.boolean().optional(),
            "span": t.proxy(renames["NlpSemanticParsingDatetimeSpanOut"]).optional(),
            "groundingStage": t.string(),
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "recurrent": t.proxy(renames["NlpSemanticParsingDatetimeRecurrentOut"]),
            "properties": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesOut"]
            ),
            "deleted8": t.boolean(),
            "point": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"])
            ),
            "range": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeRangeOut"])
            ).optional(),
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ),
            "compositionElement": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeDateTimeOut"])
    types["RepositoryWebrefWebrefAnnotationStatsIn"] = t.struct(
        {
            "numConceptsWithCandidates": t.string().optional(),
            "numCandidates": t.string().optional(),
            "statsPerType": t.array(
                t.proxy(renames["RepositoryWebrefAnnotationStatsPerTypeIn"])
            ).optional(),
            "numRangesWithCandidates": t.string().optional(),
            "docWeight": t.number().optional(),
            "numConceptsWithMentions": t.string().optional(),
            "ngramContext": t.array(
                t.proxy(renames["RepositoryWebrefNgramContextIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefAnnotationStatsIn"])
    types["RepositoryWebrefWebrefAnnotationStatsOut"] = t.struct(
        {
            "numConceptsWithCandidates": t.string().optional(),
            "numCandidates": t.string().optional(),
            "statsPerType": t.array(
                t.proxy(renames["RepositoryWebrefAnnotationStatsPerTypeOut"])
            ).optional(),
            "numRangesWithCandidates": t.string().optional(),
            "docWeight": t.number().optional(),
            "numConceptsWithMentions": t.string().optional(),
            "ngramContext": t.array(
                t.proxy(renames["RepositoryWebrefNgramContextOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefAnnotationStatsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSipAddressIn"] = t.struct(
        {
            "type": t.string().optional(),
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSipAddressIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSipAddressOut"] = t.struct(
        {
            "type": t.string().optional(),
            "formattedType": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSipAddressOut"])
    types["SecurityCredentialsSimpleSecretHolderProtoIn"] = t.struct(
        {
            "label": t.proxy(
                renames["SecurityCredentialsSimpleSecretLabelProtoIn"]
            ).optional()
        }
    ).named(renames["SecurityCredentialsSimpleSecretHolderProtoIn"])
    types["SecurityCredentialsSimpleSecretHolderProtoOut"] = t.struct(
        {
            "label": t.proxy(
                renames["SecurityCredentialsSimpleSecretLabelProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsSimpleSecretHolderProtoOut"])
    types["VideoContentSearchGenerativePredictionFeaturesIn"] = t.struct(
        {
            "predictions": t.array(t.string()).optional(),
            "target": t.string(),
            "passage": t.string().optional(),
        }
    ).named(renames["VideoContentSearchGenerativePredictionFeaturesIn"])
    types["VideoContentSearchGenerativePredictionFeaturesOut"] = t.struct(
        {
            "predictions": t.array(t.string()).optional(),
            "target": t.string(),
            "passage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchGenerativePredictionFeaturesOut"])
    types["PhotosPanoramaMetadataIn"] = t.struct(
        {"vr180Panorama": t.boolean().optional(), "sphericalPanorama": t.boolean()}
    ).named(renames["PhotosPanoramaMetadataIn"])
    types["PhotosPanoramaMetadataOut"] = t.struct(
        {
            "vr180Panorama": t.boolean().optional(),
            "sphericalPanorama": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosPanoramaMetadataOut"])
    types["GoogleApiServiceconsumermanagementV1BillingConfigIn"] = t.struct(
        {"billingAccount": t.string().optional()}
    ).named(renames["GoogleApiServiceconsumermanagementV1BillingConfigIn"])
    types["GoogleApiServiceconsumermanagementV1BillingConfigOut"] = t.struct(
        {
            "billingAccount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleApiServiceconsumermanagementV1BillingConfigOut"])
    types["DocPropertiesBadTitleInfoIn"] = t.struct(
        {"type": t.string(), "score": t.number()}
    ).named(renames["DocPropertiesBadTitleInfoIn"])
    types["DocPropertiesBadTitleInfoOut"] = t.struct(
        {
            "type": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DocPropertiesBadTitleInfoOut"])
    types["IndexingDocjoinerDataVersionVersionInfoIn"] = t.struct(
        {"humanReadableVersion": t.string(), "timestampMicros": t.string()}
    ).named(renames["IndexingDocjoinerDataVersionVersionInfoIn"])
    types["IndexingDocjoinerDataVersionVersionInfoOut"] = t.struct(
        {
            "humanReadableVersion": t.string(),
            "timestampMicros": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerDataVersionVersionInfoOut"])
    types["AbuseiamClusterEvaluationContextIn"] = t.struct(
        {
            "clusterFamily": t.string().optional(),
            "clusterRowkey": t.string().optional(),
            "gaiaIdToEscalate": t.string().optional(),
        }
    ).named(renames["AbuseiamClusterEvaluationContextIn"])
    types["AbuseiamClusterEvaluationContextOut"] = t.struct(
        {
            "clusterFamily": t.string().optional(),
            "clusterRowkey": t.string().optional(),
            "gaiaIdToEscalate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamClusterEvaluationContextOut"])
    types["RepositoryWebrefDocLevelRelevanceRatingsIn"] = t.struct(
        {
            "perDocRelevanceRatings": t.array(
                t.proxy(renames["RepositoryWebrefPerDocRelevanceRatingsIn"])
            )
        }
    ).named(renames["RepositoryWebrefDocLevelRelevanceRatingsIn"])
    types["RepositoryWebrefDocLevelRelevanceRatingsOut"] = t.struct(
        {
            "perDocRelevanceRatings": t.array(
                t.proxy(renames["RepositoryWebrefPerDocRelevanceRatingsOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDocLevelRelevanceRatingsOut"])
    types["AssistantApiCoreTypesIosAppInfoIn"] = t.struct(
        {
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "bundleIdentifier": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesIosAppInfoIn"])
    types["AssistantApiCoreTypesIosAppInfoOut"] = t.struct(
        {
            "openAppUrl": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "bundleIdentifier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesIosAppInfoOut"])
    types["NlpSemanticParsingModelsCommunicationRecipientIn"] = t.struct(
        {
            "relationship": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationRelationshipArgumentIn"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "isAnnotatedFromText": t.boolean(),
            "recipientType": t.string(),
            "rawText": t.string().optional(),
            "nameAnnotationSource": t.string().optional(),
            "calendarEvent": t.proxy(renames["AssistantApiCoreTypesCalendarEventIn"]),
            "calendarEventWrapper": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventWrapperIn"]
            ),
            "numberAnnotationSource": t.string(),
            "sensitiveNumBytes": t.integer(),
            "sensitiveStartByte": t.integer().optional(),
            "contact": t.proxy(
                renames["NlpSemanticParsingModelsPersonPersonIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationRecipientIn"])
    types["NlpSemanticParsingModelsCommunicationRecipientOut"] = t.struct(
        {
            "relationship": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationRelationshipArgumentOut"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "isAnnotatedFromText": t.boolean(),
            "recipientType": t.string(),
            "rawText": t.string().optional(),
            "nameAnnotationSource": t.string().optional(),
            "calendarEvent": t.proxy(renames["AssistantApiCoreTypesCalendarEventOut"]),
            "calendarEventWrapper": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventWrapperOut"]
            ),
            "numberAnnotationSource": t.string(),
            "sensitiveNumBytes": t.integer(),
            "sensitiveStartByte": t.integer().optional(),
            "contact": t.proxy(
                renames["NlpSemanticParsingModelsPersonPersonOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationRecipientOut"])
    types["GoogleCloudContentwarehouseV1InitializeProjectRequestIn"] = t.struct(
        {
            "accessControlMode": t.string(),
            "kmsKey": t.string().optional(),
            "documentCreatorDefaultRole": t.string().optional(),
            "databaseType": t.string(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1InitializeProjectRequestIn"])
    types["GoogleCloudContentwarehouseV1InitializeProjectRequestOut"] = t.struct(
        {
            "accessControlMode": t.string(),
            "kmsKey": t.string().optional(),
            "documentCreatorDefaultRole": t.string().optional(),
            "databaseType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1InitializeProjectRequestOut"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorIn"])
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorOut"]
    )
    types["QualityCopiaFireflySiteSignalIn"] = t.struct(
        {
            "dailyClicks": t.string(),
            "totalImpressions": t.string(),
            "firstBoostedTimeSec": t.string(),
            "recentImpForQuotaSystem": t.string(),
            "siteFp": t.string().optional(),
            "numOfArticles8": t.string(),
            "latestFirstseenSec": t.string(),
            "latestBylineDateSec": t.string(),
            "dailyGoodClicks": t.string(),
            "numOfGamblingPages": t.string(),
            "impressionsInBoostedPeriod": t.string(),
            "dataTimeSec": t.string(),
            "numOfUrlsByPeriods": t.array(t.string()).optional(),
            "numOfUrls": t.string(),
            "numOfArticlesByPeriods": t.array(t.string()).optional(),
        }
    ).named(renames["QualityCopiaFireflySiteSignalIn"])
    types["QualityCopiaFireflySiteSignalOut"] = t.struct(
        {
            "dailyClicks": t.string(),
            "totalImpressions": t.string(),
            "firstBoostedTimeSec": t.string(),
            "recentImpForQuotaSystem": t.string(),
            "siteFp": t.string().optional(),
            "numOfArticles8": t.string(),
            "latestFirstseenSec": t.string(),
            "latestBylineDateSec": t.string(),
            "dailyGoodClicks": t.string(),
            "numOfGamblingPages": t.string(),
            "impressionsInBoostedPeriod": t.string(),
            "dataTimeSec": t.string(),
            "numOfUrlsByPeriods": t.array(t.string()).optional(),
            "numOfUrls": t.string(),
            "numOfArticlesByPeriods": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCopiaFireflySiteSignalOut"])
    types["AssistantRemindersNlgTemplateKeyIn"] = t.struct(
        {"templateName": t.string().optional(), "messageSet": t.string().optional()}
    ).named(renames["AssistantRemindersNlgTemplateKeyIn"])
    types["AssistantRemindersNlgTemplateKeyOut"] = t.struct(
        {
            "templateName": t.string().optional(),
            "messageSet": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantRemindersNlgTemplateKeyOut"])
    types["NlpSemanticParsingDatetimeShiftedRelativeDateTimeIn"] = t.struct(
        {
            "shiftAmount": t.proxy(renames["NlpSemanticParsingDatetimeQuantityIn"]),
            "metadata": t.string().optional(),
            "baseType": t.string(),
            "base": t.proxy(
                renames["NlpSemanticParsingDatetimeAbsoluteDateTimeIn"]
            ).optional(),
            "relativeBase": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesIn"]
            ),
            "shiftPast": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeShiftedRelativeDateTimeIn"])
    types["NlpSemanticParsingDatetimeShiftedRelativeDateTimeOut"] = t.struct(
        {
            "shiftAmount": t.proxy(renames["NlpSemanticParsingDatetimeQuantityOut"]),
            "metadata": t.string().optional(),
            "baseType": t.string(),
            "base": t.proxy(
                renames["NlpSemanticParsingDatetimeAbsoluteDateTimeOut"]
            ).optional(),
            "relativeBase": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesOut"]
            ),
            "shiftPast": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeShiftedRelativeDateTimeOut"])
    types["NlpSemanticParsingModelsMoneyCurrencyIn"] = t.struct(
        {"freebaseMid": t.string().optional()}
    ).named(renames["NlpSemanticParsingModelsMoneyCurrencyIn"])
    types["NlpSemanticParsingModelsMoneyCurrencyOut"] = t.struct(
        {
            "freebaseMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMoneyCurrencyOut"])
    types["NlpSemanticParsingRelatedEntityIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "composedFromRelation": t.string().optional(),
            "mdvcRelation": t.string().optional(),
            "supportTransferRelation": t.string().optional(),
            "targetIsStbrSource": t.boolean().optional(),
            "clusterSupportTransferRelation": t.string().optional(),
            "equivalentRelation": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingRelatedEntityIn"])
    types["NlpSemanticParsingRelatedEntityOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "composedFromRelation": t.string().optional(),
            "mdvcRelation": t.string().optional(),
            "supportTransferRelation": t.string().optional(),
            "targetIsStbrSource": t.boolean().optional(),
            "clusterSupportTransferRelation": t.string().optional(),
            "equivalentRelation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingRelatedEntityOut"])
    types["SocialCommonHashtagDataIn"] = t.struct({"searchText": t.string()}).named(
        renames["SocialCommonHashtagDataIn"]
    )
    types["SocialCommonHashtagDataOut"] = t.struct(
        {
            "searchText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonHashtagDataOut"])
    types["VideoVideoClipInfoIn"] = t.struct(
        {
            "artist": t.string().optional(),
            "performer": t.string(),
            "requirements": t.string(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoIn"])).optional(),
            "sourceProvider": t.string().optional(),
            "keywords": t.string().optional(),
            "producer": t.string(),
            "info": t.string(),
            "digitizationTime": t.string(),
            "geolocation": t.proxy(renames["VideoVideoGeoLocationIn"]).optional(),
            "director": t.string(),
            "engineer": t.string().optional(),
            "software": t.string().optional(),
            "commissioned": t.string().optional(),
            "technician": t.string().optional(),
            "audioVendorId": t.string().optional(),
            "make": t.string().optional(),
            "copyright": t.string().optional(),
            "title": t.string(),
            "videoVendorId": t.string().optional(),
            "author": t.string().optional(),
            "model": t.string().optional(),
            "medium": t.string().optional(),
            "comment": t.string(),
            "subject": t.string().optional(),
        }
    ).named(renames["VideoVideoClipInfoIn"])
    types["VideoVideoClipInfoOut"] = t.struct(
        {
            "artist": t.string().optional(),
            "performer": t.string(),
            "requirements": t.string(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoOut"])).optional(),
            "sourceProvider": t.string().optional(),
            "keywords": t.string().optional(),
            "producer": t.string(),
            "info": t.string(),
            "digitizationTime": t.string(),
            "geolocation": t.proxy(renames["VideoVideoGeoLocationOut"]).optional(),
            "director": t.string(),
            "engineer": t.string().optional(),
            "software": t.string().optional(),
            "commissioned": t.string().optional(),
            "technician": t.string().optional(),
            "audioVendorId": t.string().optional(),
            "make": t.string().optional(),
            "copyright": t.string().optional(),
            "title": t.string(),
            "videoVendorId": t.string().optional(),
            "author": t.string().optional(),
            "model": t.string().optional(),
            "medium": t.string().optional(),
            "comment": t.string(),
            "subject": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoClipInfoOut"])
    types["OceanVolumeDisplayDetailsIn"] = t.struct(
        {"ccLicense": t.integer().optional()}
    ).named(renames["OceanVolumeDisplayDetailsIn"])
    types["OceanVolumeDisplayDetailsOut"] = t.struct(
        {
            "ccLicense": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeDisplayDetailsOut"])
    types["GeostoreVariableSpeedProtoIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GeostoreVariableSpeedProtoIn"])
    types["GeostoreVariableSpeedProtoOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GeostoreVariableSpeedProtoOut"])
    types["IndexingEmbeddedContentSelectionResultIn"] = t.struct(
        {"selectorId": t.string().optional(), "renderEffort": t.string()}
    ).named(renames["IndexingEmbeddedContentSelectionResultIn"])
    types["IndexingEmbeddedContentSelectionResultOut"] = t.struct(
        {
            "selectorId": t.string().optional(),
            "renderEffort": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentSelectionResultOut"])
    types["AssistantApiSettingsAutoFramingSettingsIn"] = t.struct(
        {"isAutoFramingEnabled": t.boolean()}
    ).named(renames["AssistantApiSettingsAutoFramingSettingsIn"])
    types["AssistantApiSettingsAutoFramingSettingsOut"] = t.struct(
        {
            "isAutoFramingEnabled": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsAutoFramingSettingsOut"])
    types["AssistantVerticalsHomeautomationProtoPhysicalLocationIn"] = t.struct(
        {"geoLocation": t.proxy(renames["GoogleTypeLatLngIn"]), "address": t.string()}
    ).named(renames["AssistantVerticalsHomeautomationProtoPhysicalLocationIn"])
    types["AssistantVerticalsHomeautomationProtoPhysicalLocationOut"] = t.struct(
        {
            "geoLocation": t.proxy(renames["GoogleTypeLatLngOut"]),
            "address": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoPhysicalLocationOut"])
    types["RepositoryWebrefCategoryAnnotationIn"] = t.struct(
        {
            "shopping": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationShoppingSignalsIn"]
            ).optional(),
            "mid": t.string().optional(),
            "browsyTopic": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationBrowsyTopicIn"]
            ).optional(),
            "hitcat": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationHitCatSourceIn"]
            ).optional(),
            "debugString": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationIn"])
    types["RepositoryWebrefCategoryAnnotationOut"] = t.struct(
        {
            "shopping": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationShoppingSignalsOut"]
            ).optional(),
            "mid": t.string().optional(),
            "browsyTopic": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationBrowsyTopicOut"]
            ).optional(),
            "hitcat": t.proxy(
                renames["RepositoryWebrefCategoryAnnotationHitCatSourceOut"]
            ).optional(),
            "debugString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationOut"])
    types["QualityGeoBrainlocBrainlocAttachmentIn"] = t.struct(
        {
            "topStatesVocabIds": t.array(t.integer()),
            "topStatesRawScores": t.array(t.integer()),
            "topCountriesRawScores": t.array(t.integer()),
            "topCountiesVocabIds": t.array(t.integer()),
            "topCitiesRawScores": t.array(t.integer()),
            "brainlocVersion": t.integer(),
            "topCitiesVocabIds": t.array(t.integer()).optional(),
            "topCountriesVocabIds": t.array(t.integer()),
            "topCountiesRawScores": t.array(t.integer()),
        }
    ).named(renames["QualityGeoBrainlocBrainlocAttachmentIn"])
    types["QualityGeoBrainlocBrainlocAttachmentOut"] = t.struct(
        {
            "topStatesVocabIds": t.array(t.integer()),
            "topStatesRawScores": t.array(t.integer()),
            "topCountriesRawScores": t.array(t.integer()),
            "topCountiesVocabIds": t.array(t.integer()),
            "topCitiesRawScores": t.array(t.integer()),
            "brainlocVersion": t.integer(),
            "topCitiesVocabIds": t.array(t.integer()).optional(),
            "topCountriesVocabIds": t.array(t.integer()),
            "topCountiesRawScores": t.array(t.integer()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityGeoBrainlocBrainlocAttachmentOut"])
    types["GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn"] = t.struct(
        {
            "customizedEntitiesPropertiesConversions": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "enableEntitiesConversions": t.boolean().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionIn"])
    types["GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut"] = t.struct(
        {
            "customizedEntitiesPropertiesConversions": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "enableEntitiesConversions": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1CloudAIDocumentOptionOut"])
    types["LegalCitationCourtDocumentIn"] = t.struct(
        {
            "CourtTerm": t.string().optional(),
            "opinioninfo": t.array(
                t.proxy(renames["LegalCitationCourtDocumentOpinionInfoIn"])
            ),
            "MemoID": t.string().optional(),
            "FiledDate": t.proxy(renames["LegalDateIn"]),
            "perdocketinfo": t.array(
                t.proxy(renames["LegalCitationCourtDocumentPerDocketInfoIn"])
            ),
            "DecidedDate": t.proxy(renames["LegalDateIn"]).optional(),
            "court": t.proxy(renames["LegalCitationCourtDocumentCourtIn"]),
            "Syllabus": t.string().optional(),
            "CertiorariRelationship": t.integer(),
            "ArguedBefore": t.array(t.proxy(renames["LegalPersonIn"])).optional(),
            "unknowndate": t.array(
                t.proxy(renames["LegalCitationCourtDocumentUnknownDateIn"])
            ),
            "ArguedDate": t.proxy(renames["LegalDateIn"]),
            "ModifiedDate": t.proxy(renames["LegalDateIn"]),
            "CertiorariCourtName": t.string().optional(),
            "pub": t.array(t.proxy(renames["LegalCitationCourtDocumentPubIn"])),
        }
    ).named(renames["LegalCitationCourtDocumentIn"])
    types["LegalCitationCourtDocumentOut"] = t.struct(
        {
            "CourtTerm": t.string().optional(),
            "opinioninfo": t.array(
                t.proxy(renames["LegalCitationCourtDocumentOpinionInfoOut"])
            ),
            "MemoID": t.string().optional(),
            "FiledDate": t.proxy(renames["LegalDateOut"]),
            "perdocketinfo": t.array(
                t.proxy(renames["LegalCitationCourtDocumentPerDocketInfoOut"])
            ),
            "DecidedDate": t.proxy(renames["LegalDateOut"]).optional(),
            "court": t.proxy(renames["LegalCitationCourtDocumentCourtOut"]),
            "Syllabus": t.string().optional(),
            "CertiorariRelationship": t.integer(),
            "ArguedBefore": t.array(t.proxy(renames["LegalPersonOut"])).optional(),
            "unknowndate": t.array(
                t.proxy(renames["LegalCitationCourtDocumentUnknownDateOut"])
            ),
            "ArguedDate": t.proxy(renames["LegalDateOut"]),
            "ModifiedDate": t.proxy(renames["LegalDateOut"]),
            "CertiorariCourtName": t.string().optional(),
            "pub": t.array(t.proxy(renames["LegalCitationCourtDocumentPubOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentOut"])
    types["NlpSemanticParsingModelsMediaPodcastIn"] = t.struct(
        {
            "rawText": t.string(),
            "isAnnotatedFromText": t.boolean().optional(),
            "normalizedText": t.string().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPodcastIn"])
    types["NlpSemanticParsingModelsMediaPodcastOut"] = t.struct(
        {
            "rawText": t.string(),
            "isAnnotatedFromText": t.boolean().optional(),
            "normalizedText": t.string().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPodcastOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoIn"
    ] = t.struct(
        {
            "syncInfo": t.proxy(renames["SocialGraphApiProtoSyncInfoIn"]).optional(),
            "dataSet": t.string().optional(),
            "sourceIdExist": t.boolean().optional(),
            "dirty": t.boolean().optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoOut"
    ] = t.struct(
        {
            "syncInfo": t.proxy(renames["SocialGraphApiProtoSyncInfoOut"]).optional(),
            "dataSet": t.string().optional(),
            "sourceIdExist": t.boolean().optional(),
            "dirty": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfoOut"]
    )
    types["GeostoreSpeedProtoIn"] = t.struct(
        {"unit": t.string().optional(), "speed": t.number().optional()}
    ).named(renames["GeostoreSpeedProtoIn"])
    types["GeostoreSpeedProtoOut"] = t.struct(
        {
            "unit": t.string().optional(),
            "speed": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSpeedProtoOut"])
    types["RepositoryWebrefPreprocessingNameVariantSignalsIn"] = t.struct(
        {
            "source": t.string().optional(),
            "scores": t.proxy(
                renames["RepositoryWebrefPreprocessingNameEntityScoresIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingNameVariantSignalsIn"])
    types["RepositoryWebrefPreprocessingNameVariantSignalsOut"] = t.struct(
        {
            "source": t.string().optional(),
            "scores": t.proxy(
                renames["RepositoryWebrefPreprocessingNameEntityScoresOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingNameVariantSignalsOut"])
    types["QualityCalypsoAppsUniversalAuLiveOpFormatIn"] = t.struct(
        {
            "deeplink": t.string(),
            "eyebrow": t.string().optional(),
            "squareImageUrl": t.string(),
            "videoUrl": t.string(),
            "title": t.string(),
            "originalImageUrl": t.string(),
            "status": t.string().optional(),
            "videoId": t.string(),
            "description": t.string(),
            "imageUrl": t.string(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpFormatIn"])
    types["QualityCalypsoAppsUniversalAuLiveOpFormatOut"] = t.struct(
        {
            "deeplink": t.string(),
            "eyebrow": t.string().optional(),
            "squareImageUrl": t.string(),
            "videoUrl": t.string(),
            "title": t.string(),
            "originalImageUrl": t.string(),
            "status": t.string().optional(),
            "videoId": t.string(),
            "description": t.string(),
            "imageUrl": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpFormatOut"])
    types["AssistantApiCoreTypesAndroidAppInfoIn"] = t.struct(
        {
            "shortcutId": t.string().optional(),
            "appVersion": t.integer().optional(),
            "appUniqueId": t.string().optional(),
            "versionName": t.string().optional(),
            "isBroadcastIntent": t.boolean().optional(),
            "providerType": t.string().optional(),
            "activityInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoIn"]
            ),
            "androidIntent": t.string().optional(),
            "isDefault": t.boolean().optional(),
            "accountType": t.string(),
            "longVersionCode": t.string().optional(),
            "targetClass": t.string().optional(),
            "mimetype": t.string().optional(),
            "packageName": t.string().optional(),
            "dataMimetype": t.string().optional(),
            "localizedAppName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoIn"])
    types["AssistantApiCoreTypesAndroidAppInfoOut"] = t.struct(
        {
            "shortcutId": t.string().optional(),
            "appVersion": t.integer().optional(),
            "appUniqueId": t.string().optional(),
            "versionName": t.string().optional(),
            "isBroadcastIntent": t.boolean().optional(),
            "providerType": t.string().optional(),
            "activityInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoActivityInfoOut"]
            ),
            "androidIntent": t.string().optional(),
            "isDefault": t.boolean().optional(),
            "accountType": t.string(),
            "longVersionCode": t.string().optional(),
            "targetClass": t.string().optional(),
            "mimetype": t.string().optional(),
            "packageName": t.string().optional(),
            "dataMimetype": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoOut"])
    types["GoogleInternalAppsWaldoV1alphaUserAvailabilityIn"] = t.struct(
        {
            "status": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserStatusIn"]
            ).optional(),
            "timeRange": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaTimeRangeIn"]
            ).optional(),
            "contexts": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserContextIn"]
            ).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilityIn"])
    types["GoogleInternalAppsWaldoV1alphaUserAvailabilityOut"] = t.struct(
        {
            "status": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserStatusOut"]
            ).optional(),
            "timeRange": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaTimeRangeOut"]
            ).optional(),
            "contexts": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserContextOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserAvailabilityOut"])
    types["GoogleInternalAppsWaldoV1alphaUserContextIn"] = t.struct(
        {
            "upcomingCommitmentContext": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextIn"]
            ).optional(),
            "upcomingOoo": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUpcomingOooContextIn"]
            ).optional(),
            "workingElsewhere": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextIn"]
            ).optional(),
            "localTime": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaLocalTimeContextIn"]
            ).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserContextIn"])
    types["GoogleInternalAppsWaldoV1alphaUserContextOut"] = t.struct(
        {
            "upcomingCommitmentContext": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextOut"]
            ).optional(),
            "upcomingOoo": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUpcomingOooContextOut"]
            ).optional(),
            "workingElsewhere": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaWorkingElsewhereContextOut"]
            ).optional(),
            "localTime": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaLocalTimeContextOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUserContextOut"])
    types["RepositoryWebrefLinkKindInfoIn"] = t.struct(
        {
            "topicPropertyName": t.string().optional(),
            "flags": t.proxy(renames["RepositoryWebrefLinkKindFlagsIn"]).optional(),
            "kcLinkName": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefLinkKindInfoIn"])
    types["RepositoryWebrefLinkKindInfoOut"] = t.struct(
        {
            "topicPropertyName": t.string().optional(),
            "flags": t.proxy(renames["RepositoryWebrefLinkKindFlagsOut"]).optional(),
            "kcLinkName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLinkKindInfoOut"])
    types["SocialStanzaStanzaRestrictionIn"] = t.struct(
        {
            "destinationStream": t.proxy(
                renames["AppsPeopleActivityBackendDestinationStreamIn"]
            ),
            "deleteReason": t.array(t.string()).optional(),
            "abuseTypes": t.array(t.proxy(renames["AbuseiamAbuseTypeIn"])).optional(),
            "moderationInfo": t.proxy(
                renames["SocialStanzaModerationInfoIn"]
            ).optional(),
            "contentRestriction": t.proxy(
                renames["AbuseiamContentRestrictionIn"]
            ).optional(),
            "deliveryRestriction": t.proxy(
                renames["SocialStanzaDeliveryRestrictionIn"]
            ).optional(),
            "moderationState": t.string().optional(),
            "appealState": t.string().optional(),
        }
    ).named(renames["SocialStanzaStanzaRestrictionIn"])
    types["SocialStanzaStanzaRestrictionOut"] = t.struct(
        {
            "destinationStream": t.proxy(
                renames["AppsPeopleActivityBackendDestinationStreamOut"]
            ),
            "deleteReason": t.array(t.string()).optional(),
            "abuseTypes": t.array(t.proxy(renames["AbuseiamAbuseTypeOut"])).optional(),
            "moderationInfo": t.proxy(
                renames["SocialStanzaModerationInfoOut"]
            ).optional(),
            "contentRestriction": t.proxy(
                renames["AbuseiamContentRestrictionOut"]
            ).optional(),
            "deliveryRestriction": t.proxy(
                renames["SocialStanzaDeliveryRestrictionOut"]
            ).optional(),
            "moderationState": t.string().optional(),
            "appealState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialStanzaStanzaRestrictionOut"])
    types["KnowledgeAnswersMarkerCommandIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersMarkerCommandIn"])
    types["KnowledgeAnswersMarkerCommandOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersMarkerCommandOut"])
    types["GoogleCloudContentwarehouseV1ListLinkedSourcesRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
            "pageSize": t.integer().optional(),
            "pageToken": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedSourcesRequestIn"])
    types["GoogleCloudContentwarehouseV1ListLinkedSourcesRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "pageSize": t.integer().optional(),
            "pageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedSourcesRequestOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "state": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "state": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateOut"])
    types["GoodocParagraphDroppedCapIn"] = t.struct(
        {"Box": t.proxy(renames["GoodocBoundingBoxIn"]), "LettersCount": t.integer()}
    ).named(renames["GoodocParagraphDroppedCapIn"])
    types["GoodocParagraphDroppedCapOut"] = t.struct(
        {
            "Box": t.proxy(renames["GoodocBoundingBoxOut"]),
            "LettersCount": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocParagraphDroppedCapOut"])
    types["AssistantApiSettingsAmbientSettingsIn"] = t.struct(
        {
            "showPersonalPhotos": t.boolean().optional(),
            "showPersonalPhotoData": t.boolean().optional(),
            "anyUserHasSetPersonalPhotos": t.boolean().optional(),
            "recentHighlightsEnabled": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsAmbientSettingsIn"])
    types["AssistantApiSettingsAmbientSettingsOut"] = t.struct(
        {
            "showPersonalPhotos": t.boolean().optional(),
            "showPersonalPhotoData": t.boolean().optional(),
            "anyUserHasSetPersonalPhotos": t.boolean().optional(),
            "recentHighlightsEnabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsAmbientSettingsOut"])
    types["GeostoreElevationProtoIn"] = t.struct(
        {
            "peak": t.proxy(renames["GeostorePeakProtoIn"]).optional(),
            "averageElevationMeters": t.number().optional(),
        }
    ).named(renames["GeostoreElevationProtoIn"])
    types["GeostoreElevationProtoOut"] = t.struct(
        {
            "peak": t.proxy(renames["GeostorePeakProtoOut"]).optional(),
            "averageElevationMeters": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreElevationProtoOut"])
    types["FatcatCompactTaxonomicClassificationIn"] = t.struct(
        {
            "classifierVersion": t.string(),
            "category": t.array(
                t.proxy(renames["FatcatCompactTaxonomicClassificationCategoryIn"])
            ),
            "taxonomyName": t.string(),
            "taxonomy": t.string().optional(),
        }
    ).named(renames["FatcatCompactTaxonomicClassificationIn"])
    types["FatcatCompactTaxonomicClassificationOut"] = t.struct(
        {
            "classifierVersion": t.string(),
            "category": t.array(
                t.proxy(renames["FatcatCompactTaxonomicClassificationCategoryOut"])
            ),
            "taxonomyName": t.string(),
            "taxonomy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactTaxonomicClassificationOut"])
    types["QualityFringeFringeQueryPriorPerDocDataIn"] = t.struct(
        {
            "sensitiveEntitiesIndices": t.array(t.integer()).optional(),
            "encodedChardXlqHoaxPrediction": t.integer().optional(),
            "encodedFringeSitePriorScoreForQfsTraining": t.integer().optional(),
            "encodedFringePriorScore": t.integer().optional(),
            "encodedChardXlqYmylPrediction": t.integer().optional(),
            "encodedDocumentFringeVulnerability": t.integer().optional(),
            "encodedFringeSitePriorScore": t.integer().optional(),
            "encodedPredictedXlqScoreAndConfidence": t.integer().optional(),
            "encodedCalibratedFringeSitePriorScore": t.integer(),
            "encodedProximityScore": t.integer().optional(),
            "encodedEntityPriorScore": t.integer().optional(),
        }
    ).named(renames["QualityFringeFringeQueryPriorPerDocDataIn"])
    types["QualityFringeFringeQueryPriorPerDocDataOut"] = t.struct(
        {
            "sensitiveEntitiesIndices": t.array(t.integer()).optional(),
            "encodedChardXlqHoaxPrediction": t.integer().optional(),
            "encodedFringeSitePriorScoreForQfsTraining": t.integer().optional(),
            "encodedFringePriorScore": t.integer().optional(),
            "encodedChardXlqYmylPrediction": t.integer().optional(),
            "encodedDocumentFringeVulnerability": t.integer().optional(),
            "encodedFringeSitePriorScore": t.integer().optional(),
            "encodedPredictedXlqScoreAndConfidence": t.integer().optional(),
            "encodedCalibratedFringeSitePriorScore": t.integer(),
            "encodedProximityScore": t.integer().optional(),
            "encodedEntityPriorScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityFringeFringeQueryPriorPerDocDataOut"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataIn"] = t.struct(
        {
            "contentLanguage": t.string().optional(),
            "outgoingLinkData": t.array(
                t.proxy(
                    renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn"]
                )
            ).optional(),
            "crawlStatus": t.string(),
            "isCanonical": t.boolean().optional(),
            "crawlTimestampSeconds": t.integer().optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataIn"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataOut"] = t.struct(
        {
            "contentLanguage": t.string().optional(),
            "outgoingLinkData": t.array(
                t.proxy(
                    renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut"]
                )
            ).optional(),
            "crawlStatus": t.string(),
            "isCanonical": t.boolean().optional(),
            "crawlTimestampSeconds": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataOut"])
    types["KnowledgeAnswersIntentQueryGroundingSignalsIn"] = t.struct(
        {
            "pgrpOutputFormat": t.string().optional(),
            "numGroundedArgs": t.number().optional(),
            "groundabilityScore": t.number().optional(),
            "sentiment": t.string(),
            "numConstraintsSatisfied": t.number().optional(),
            "numVariablesGrounded": t.number().optional(),
            "addedByGrounding": t.boolean().optional(),
            "provenance": t.string(),
            "numVariables": t.number().optional(),
            "usesGroundingBox": t.boolean().optional(),
            "numGroundableArgs": t.number().optional(),
            "numConstraints": t.number().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryGroundingSignalsIn"])
    types["KnowledgeAnswersIntentQueryGroundingSignalsOut"] = t.struct(
        {
            "pgrpOutputFormat": t.string().optional(),
            "numGroundedArgs": t.number().optional(),
            "groundabilityScore": t.number().optional(),
            "sentiment": t.string(),
            "numConstraintsSatisfied": t.number().optional(),
            "numVariablesGrounded": t.number().optional(),
            "addedByGrounding": t.boolean().optional(),
            "provenance": t.string(),
            "numVariables": t.number().optional(),
            "usesGroundingBox": t.boolean().optional(),
            "numGroundableArgs": t.number().optional(),
            "numConstraints": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryGroundingSignalsOut"])
    types["StorageGraphBfgLivegraphProvenanceMetadataIn"] = t.struct(
        {
            "triangulationKey": t.array(t.string()).optional(),
            "weakData": t.boolean().optional(),
            "provenanceOnlyAddition": t.boolean().optional(),
            "lgInternalWriterId": t.string().optional(),
            "directWriteRecordIds": t.array(t.string()).optional(),
        }
    ).named(renames["StorageGraphBfgLivegraphProvenanceMetadataIn"])
    types["StorageGraphBfgLivegraphProvenanceMetadataOut"] = t.struct(
        {
            "triangulationKey": t.array(t.string()).optional(),
            "weakData": t.boolean().optional(),
            "provenanceOnlyAddition": t.boolean().optional(),
            "lgInternalWriterId": t.string().optional(),
            "directWriteRecordIds": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgLivegraphProvenanceMetadataOut"])
    types["LensDiscoveryStyleBoundingBoxIn"] = t.struct(
        {"x1": t.integer(), "y2": t.integer(), "y1": t.integer(), "x2": t.integer()}
    ).named(renames["LensDiscoveryStyleBoundingBoxIn"])
    types["LensDiscoveryStyleBoundingBoxOut"] = t.struct(
        {
            "x1": t.integer(),
            "y2": t.integer(),
            "y1": t.integer(),
            "x2": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStyleBoundingBoxOut"])
    types["NlpSemanticParsingDatetimeQuantityIn"] = t.struct(
        {
            "modifier": t.string().optional(),
            "number": t.number().optional(),
            "numberSpan": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "symbolicQuantity": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeQuantityIn"])
            ).optional(),
            "unit": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeQuantityIn"])
    types["NlpSemanticParsingDatetimeQuantityOut"] = t.struct(
        {
            "modifier": t.string().optional(),
            "number": t.number().optional(),
            "numberSpan": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "symbolicQuantity": t.array(
                t.proxy(renames["NlpSemanticParsingDatetimeQuantityOut"])
            ).optional(),
            "unit": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeQuantityOut"])
    types["GoogleAssistantEmbeddedV1AlarmRecurrenceIn"] = t.struct(
        {"dayOfWeek": t.array(t.string()).optional()}
    ).named(renames["GoogleAssistantEmbeddedV1AlarmRecurrenceIn"])
    types["GoogleAssistantEmbeddedV1AlarmRecurrenceOut"] = t.struct(
        {
            "dayOfWeek": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1AlarmRecurrenceOut"])
    types["GoogleCloudDocumentaiV1DocumentIn"] = t.struct(
        {
            "textStyles": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentStyleIn"])
            ).optional(),
            "textChanges": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentTextChangeIn"])
            ).optional(),
            "mimeType": t.string().optional(),
            "error": t.proxy(renames["GoogleRpcStatusIn"]).optional(),
            "uri": t.string().optional(),
            "entities": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityIn"])
            ).optional(),
            "revisions": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentRevisionIn"])
            ).optional(),
            "entityRelations": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityRelationIn"])
            ).optional(),
            "pages": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageIn"])
            ).optional(),
            "content": t.string().optional(),
            "text": t.string().optional(),
            "shardInfo": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentShardInfoIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentIn"])
    types["GoogleCloudDocumentaiV1DocumentOut"] = t.struct(
        {
            "textStyles": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentStyleOut"])
            ).optional(),
            "textChanges": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentTextChangeOut"])
            ).optional(),
            "mimeType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
            "uri": t.string().optional(),
            "entities": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityOut"])
            ).optional(),
            "revisions": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentRevisionOut"])
            ).optional(),
            "entityRelations": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentEntityRelationOut"])
            ).optional(),
            "pages": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageOut"])
            ).optional(),
            "content": t.string().optional(),
            "text": t.string().optional(),
            "shardInfo": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentShardInfoOut"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCalendarIn"] = t.struct(
        {
            "url": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "formattedType": t.string().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCalendarIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCalendarOut"] = t.struct(
        {
            "url": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "formattedType": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCalendarOut"])
    types["AssistantDevicesPlatformProtoSecurityConfigIn"] = t.struct(
        {"authMechanismForRemoteRequests": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoSecurityConfigIn"])
    types["AssistantDevicesPlatformProtoSecurityConfigOut"] = t.struct(
        {
            "authMechanismForRemoteRequests": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoSecurityConfigOut"])
    types["GeostoreAppliedSpeedLimitProtoIn"] = t.struct(
        {
            "trustLevel": t.string().optional(),
            "speedLimit": t.proxy(renames["GeostoreSpeedLimitProtoIn"]).optional(),
        }
    ).named(renames["GeostoreAppliedSpeedLimitProtoIn"])
    types["GeostoreAppliedSpeedLimitProtoOut"] = t.struct(
        {
            "trustLevel": t.string().optional(),
            "speedLimit": t.proxy(renames["GeostoreSpeedLimitProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAppliedSpeedLimitProtoOut"])
    types["GoodocRoutePointIn"] = t.struct(
        {"RouteIndex": t.integer().optional(), "WordIndex": t.integer().optional()}
    ).named(renames["GoodocRoutePointIn"])
    types["GoodocRoutePointOut"] = t.struct(
        {
            "RouteIndex": t.integer().optional(),
            "WordIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocRoutePointOut"])
    types["SocialGraphApiProtoRelativePositionIn"] = t.struct(
        {"y": t.number(), "x": t.number()}
    ).named(renames["SocialGraphApiProtoRelativePositionIn"])
    types["SocialGraphApiProtoRelativePositionOut"] = t.struct(
        {
            "y": t.number(),
            "x": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoRelativePositionOut"])
    types["GoodocSummaryStatsIn"] = t.struct(
        {
            "medianLineSpan": t.integer().optional(),
            "numLines": t.integer().optional(),
            "meanWordsPerBlock": t.integer(),
            "medianSymbolsPerBlock": t.integer(),
            "medianWordsPerLine": t.integer(),
            "meanSymbolsPerParagraph": t.integer(),
            "medianFullPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]).optional(),
            "medianSymbolsPerParagraph": t.integer(),
            "medianSymbolsPerWord": t.integer(),
            "numLineSpaces": t.integer().optional(),
            "numParagraphSpaces": t.integer().optional(),
            "numBlockSpaces": t.integer().optional(),
            "numNonGraphicBlocks": t.integer(),
            "numParagraphs": t.integer().optional(),
            "medianWordsPerBlock": t.integer(),
            "medianBlockSpace": t.integer().optional(),
            "medianParagraphSpace": t.integer().optional(),
            "medianFullEvenPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]),
            "meanSymbolsPerWord": t.integer(),
            "numBlocks": t.integer().optional(),
            "medianWidth": t.integer(),
            "medianWordsPerParagraph": t.integer(),
            "numWords": t.integer().optional(),
            "medianFullOddPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]),
            "medianParagraphIndent": t.integer().optional(),
            "medianOddPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]).optional(),
            "meanWordsPerParagraph": t.integer(),
            "medianHorizontalDpi": t.integer(),
            "medianLineHeight": t.integer().optional(),
            "medianSymbolsPerLine": t.integer(),
            "numSymbols": t.integer().optional(),
            "meanSymbolsPerLine": t.integer(),
            "medianPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]).optional(),
            "meanWordsPerLine": t.integer(),
            "estimatedFontSizes": t.boolean().optional(),
            "numPages": t.integer().optional(),
            "meanSymbolsPerBlock": t.integer(),
            "fontSizeHistogram": t.array(
                t.proxy(renames["GoodocFontSizeStatsIn"])
            ).optional(),
            "medianLineSpace": t.integer().optional(),
            "medianVerticalDpi": t.integer(),
            "medianHeight": t.integer(),
            "medianEvenPrintedBox": t.proxy(renames["GoodocBoundingBoxIn"]).optional(),
        }
    ).named(renames["GoodocSummaryStatsIn"])
    types["GoodocSummaryStatsOut"] = t.struct(
        {
            "medianLineSpan": t.integer().optional(),
            "numLines": t.integer().optional(),
            "meanWordsPerBlock": t.integer(),
            "medianSymbolsPerBlock": t.integer(),
            "medianWordsPerLine": t.integer(),
            "meanSymbolsPerParagraph": t.integer(),
            "medianFullPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]).optional(),
            "medianSymbolsPerParagraph": t.integer(),
            "medianSymbolsPerWord": t.integer(),
            "numLineSpaces": t.integer().optional(),
            "numParagraphSpaces": t.integer().optional(),
            "numBlockSpaces": t.integer().optional(),
            "numNonGraphicBlocks": t.integer(),
            "numParagraphs": t.integer().optional(),
            "medianWordsPerBlock": t.integer(),
            "medianBlockSpace": t.integer().optional(),
            "medianParagraphSpace": t.integer().optional(),
            "medianFullEvenPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]),
            "meanSymbolsPerWord": t.integer(),
            "numBlocks": t.integer().optional(),
            "medianWidth": t.integer(),
            "medianWordsPerParagraph": t.integer(),
            "numWords": t.integer().optional(),
            "medianFullOddPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]),
            "medianParagraphIndent": t.integer().optional(),
            "medianOddPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]).optional(),
            "meanWordsPerParagraph": t.integer(),
            "medianHorizontalDpi": t.integer(),
            "medianLineHeight": t.integer().optional(),
            "medianSymbolsPerLine": t.integer(),
            "numSymbols": t.integer().optional(),
            "meanSymbolsPerLine": t.integer(),
            "medianPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]).optional(),
            "meanWordsPerLine": t.integer(),
            "estimatedFontSizes": t.boolean().optional(),
            "numPages": t.integer().optional(),
            "meanSymbolsPerBlock": t.integer(),
            "fontSizeHistogram": t.array(
                t.proxy(renames["GoodocFontSizeStatsOut"])
            ).optional(),
            "medianLineSpace": t.integer().optional(),
            "medianVerticalDpi": t.integer(),
            "medianHeight": t.integer(),
            "medianEvenPrintedBox": t.proxy(renames["GoodocBoundingBoxOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSummaryStatsOut"])
    types["GoodocLanguageLabelIn"] = t.struct(
        {
            "LanguageCode": t.string().optional(),
            "ClosestLanguageId": t.integer().optional(),
            "Confidence": t.integer().optional(),
        }
    ).named(renames["GoodocLanguageLabelIn"])
    types["GoodocLanguageLabelOut"] = t.struct(
        {
            "LanguageCode": t.string().optional(),
            "ClosestLanguageId": t.integer().optional(),
            "Confidence": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocLanguageLabelOut"])
    types["GoogleCloudContentwarehouseV1IntegerArrayIn"] = t.struct(
        {"values": t.array(t.integer()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1IntegerArrayIn"])
    types["GoogleCloudContentwarehouseV1IntegerArrayOut"] = t.struct(
        {
            "values": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1IntegerArrayOut"])
    types["HtmlrenderWebkitHeadlessProtoRedirectEventIn"] = t.struct(
        {
            "targetContentDownloaded": t.boolean().optional(),
            "httpMethod": t.string().optional(),
            "targetUrl": t.string(),
            "httpStatusCode": t.integer().optional(),
            "type": t.string(),
            "refreshType": t.string(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRedirectEventIn"])
    types["HtmlrenderWebkitHeadlessProtoRedirectEventOut"] = t.struct(
        {
            "targetContentDownloaded": t.boolean().optional(),
            "httpMethod": t.string().optional(),
            "targetUrl": t.string(),
            "httpStatusCode": t.integer().optional(),
            "type": t.string(),
            "refreshType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRedirectEventOut"])
    types["IndexingDocjoinerAnchorTrustedInfoIn"] = t.struct(
        {
            "phrasesScore": t.number().optional(),
            "text": t.array(t.string()).optional(),
            "matchedScoreInfo": t.array(t.string()).optional(),
            "site": t.string().optional(),
            "matchedScore": t.number().optional(),
            "trustedScore": t.number().optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorTrustedInfoIn"])
    types["IndexingDocjoinerAnchorTrustedInfoOut"] = t.struct(
        {
            "phrasesScore": t.number().optional(),
            "text": t.array(t.string()).optional(),
            "matchedScoreInfo": t.array(t.string()).optional(),
            "site": t.string().optional(),
            "matchedScore": t.number().optional(),
            "trustedScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorTrustedInfoOut"])
    types["AssistantDevicesPlatformProtoMediaStopCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaStopCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaStopCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaStopCapabilityOut"])
    types["ImageSearchImageLicenseInfoIn"] = t.struct(
        {
            "safesearchFlags": t.integer().optional(),
            "creditTextSourceType": t.string().optional(),
            "creator": t.array(t.string()).optional(),
            "sourceType": t.string(),
            "copyrightNoticeSourceType": t.string().optional(),
            "licenseUrl": t.string().optional(),
            "licenseType": t.string(),
            "creatorSourceType": t.string().optional(),
            "copyrightNotice": t.string().optional(),
            "isRetiredCcUrl": t.boolean().optional(),
            "creditText": t.string().optional(),
            "acquireLicensePage": t.string().optional(),
        }
    ).named(renames["ImageSearchImageLicenseInfoIn"])
    types["ImageSearchImageLicenseInfoOut"] = t.struct(
        {
            "safesearchFlags": t.integer().optional(),
            "creditTextSourceType": t.string().optional(),
            "creator": t.array(t.string()).optional(),
            "sourceType": t.string(),
            "copyrightNoticeSourceType": t.string().optional(),
            "licenseUrl": t.string().optional(),
            "licenseType": t.string(),
            "creatorSourceType": t.string().optional(),
            "copyrightNotice": t.string().optional(),
            "isRetiredCcUrl": t.boolean().optional(),
            "creditText": t.string().optional(),
            "acquireLicensePage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSearchImageLicenseInfoOut"])
    types["NlxDataSchemaMentionIn"] = t.struct(
        {
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "type": t.string().optional(),
            "text": t.string().optional(),
            "kind": t.string().optional(),
            "entity": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
        }
    ).named(renames["NlxDataSchemaMentionIn"])
    types["NlxDataSchemaMentionOut"] = t.struct(
        {
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "type": t.string().optional(),
            "text": t.string().optional(),
            "kind": t.string().optional(),
            "entity": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaMentionOut"])
    types["GoogleCloudContentwarehouseV1DataValidationActionIn"] = t.struct(
        {"conditions": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DataValidationActionIn"])
    types["GoogleCloudContentwarehouseV1DataValidationActionOut"] = t.struct(
        {
            "conditions": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DataValidationActionOut"])
    types["ImageMoosedogCrawlStateIn"] = t.struct(
        {
            "notCrawledReason": t.string(),
            "detailedReason": t.integer().optional(),
            "isTerminal": t.boolean().optional(),
            "url": t.string().optional(),
            "internalStatus": t.proxy(renames["UtilStatusProtoIn"]).optional(),
            "urlDeleted": t.boolean().optional(),
            "overrodeTerminalState": t.boolean().optional(),
            "noIndexAfterTimestamp": t.string().optional(),
            "robotedAgents": t.string().optional(),
            "repid": t.string().optional(),
            "code": t.string(),
        }
    ).named(renames["ImageMoosedogCrawlStateIn"])
    types["ImageMoosedogCrawlStateOut"] = t.struct(
        {
            "notCrawledReason": t.string(),
            "detailedReason": t.integer().optional(),
            "isTerminal": t.boolean().optional(),
            "url": t.string().optional(),
            "internalStatus": t.proxy(renames["UtilStatusProtoOut"]).optional(),
            "urlDeleted": t.boolean().optional(),
            "overrodeTerminalState": t.boolean().optional(),
            "noIndexAfterTimestamp": t.string().optional(),
            "robotedAgents": t.string().optional(),
            "repid": t.string().optional(),
            "code": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageMoosedogCrawlStateOut"])
    types["VideoFileSphericalMetadataViewDirectionIn"] = t.struct(
        {
            "headingDegrees": t.integer(),
            "rollDegrees": t.integer(),
            "pitchDegrees": t.integer(),
        }
    ).named(renames["VideoFileSphericalMetadataViewDirectionIn"])
    types["VideoFileSphericalMetadataViewDirectionOut"] = t.struct(
        {
            "headingDegrees": t.integer(),
            "rollDegrees": t.integer(),
            "pitchDegrees": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataViewDirectionOut"])
    types["PhotosFourCMetadataIn"] = t.struct(
        {
            "caption": t.string(),
            "creator": t.array(t.string()),
            "copyright": t.string(),
            "credit": t.string(),
        }
    ).named(renames["PhotosFourCMetadataIn"])
    types["PhotosFourCMetadataOut"] = t.struct(
        {
            "caption": t.string(),
            "creator": t.array(t.string()),
            "copyright": t.string(),
            "credit": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosFourCMetadataOut"])
    types["NlpLoggingQRewriteClientCallPathInfoIn"] = t.struct(
        {
            "qusCandidateId": t.proxy(
                renames["QualityQrewriteCandidateIdIn"]
            ).optional(),
            "qrewriteCandidateId": t.proxy(
                renames["QualityQrewriteCandidateIdIn"]
            ).optional(),
            "qusPhase": t.string().optional(),
            "qusClientCallPathInfo": t.proxy(
                renames["NlpLoggingQusClientCallPathInfoIn"]
            ).optional(),
        }
    ).named(renames["NlpLoggingQRewriteClientCallPathInfoIn"])
    types["NlpLoggingQRewriteClientCallPathInfoOut"] = t.struct(
        {
            "qusCandidateId": t.proxy(
                renames["QualityQrewriteCandidateIdOut"]
            ).optional(),
            "qrewriteCandidateId": t.proxy(
                renames["QualityQrewriteCandidateIdOut"]
            ).optional(),
            "qusPhase": t.string().optional(),
            "qusClientCallPathInfo": t.proxy(
                renames["NlpLoggingQusClientCallPathInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpLoggingQRewriteClientCallPathInfoOut"])
    types["YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn"] = t.struct(
        {
            "subject": t.proxy(
                renames["YoutubeDiscoveryLegosLegosEntityIn"]
            ).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn"])
    types["YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut"] = t.struct(
        {
            "subject": t.proxy(
                renames["YoutubeDiscoveryLegosLegosEntityOut"]
            ).optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut"])
    types["QualitySnippetsTruncationSnippetBoldedRangePositionIn"] = t.struct(
        {"index": t.integer(), "byteOffset": t.integer()}
    ).named(renames["QualitySnippetsTruncationSnippetBoldedRangePositionIn"])
    types["QualitySnippetsTruncationSnippetBoldedRangePositionOut"] = t.struct(
        {
            "index": t.integer(),
            "byteOffset": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySnippetsTruncationSnippetBoldedRangePositionOut"])
    types["AssistantDevicesPlatformProtoMediaShowControlsCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaShowControlsCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaShowControlsCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaShowControlsCapabilityOut"])
    types["PseudoVideoDataTranscriptTimestampIn"] = t.struct(
        {
            "CharOffset": t.integer(),
            "TimeOffset": t.integer(),
            "Confidence": t.integer().optional(),
        }
    ).named(renames["PseudoVideoDataTranscriptTimestampIn"])
    types["PseudoVideoDataTranscriptTimestampOut"] = t.struct(
        {
            "CharOffset": t.integer(),
            "TimeOffset": t.integer(),
            "Confidence": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PseudoVideoDataTranscriptTimestampOut"])
    types["ClassifierPornQueryStatsIn"] = t.struct(
        {"queryTextPornScore": t.number().optional(), "totalClicks": t.number()}
    ).named(renames["ClassifierPornQueryStatsIn"])
    types["ClassifierPornQueryStatsOut"] = t.struct(
        {
            "queryTextPornScore": t.number().optional(),
            "totalClicks": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornQueryStatsOut"])
    types["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueIn"] = t.struct(
        {"value": t.number(), "facetId": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueIn"])
    types["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueOut"] = t.struct(
        {
            "value": t.number(),
            "facetId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryShoppingIdsMeasureValueOut"])
    types["VideoVideoStreamInfoAudioStreamIn"] = t.struct(
        {
            "sampleSize": t.integer().optional(),
            "channels": t.integer().optional(),
            "clockDiscontinuityUs": t.string().optional(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoIn"])).optional(),
            "streamIndex": t.string().optional(),
            "startTimestamp": t.string().optional(),
            "bitrate": t.string().optional(),
            "streamCodecTag": t.string(),
            "codecString": t.string().optional(),
            "endTimestamp": t.string(),
            "length": t.number().optional(),
            "numberOfFrames": t.string().optional(),
            "ambisonics": t.proxy(
                renames["VideoAmbisonicsAmbisonicsMetadataIn"]
            ).optional(),
            "language": t.string().optional(),
            "decodeOffset": t.string().optional(),
            "channelPosition": t.array(t.string()),
            "profile": t.string(),
            "codecId": t.string().optional(),
            "sampleRate": t.string().optional(),
            "frameSize": t.string().optional(),
            "contentType": t.string().optional(),
            "codecFourcc": t.string(),
        }
    ).named(renames["VideoVideoStreamInfoAudioStreamIn"])
    types["VideoVideoStreamInfoAudioStreamOut"] = t.struct(
        {
            "sampleSize": t.integer().optional(),
            "channels": t.integer().optional(),
            "clockDiscontinuityUs": t.string().optional(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoOut"])).optional(),
            "streamIndex": t.string().optional(),
            "startTimestamp": t.string().optional(),
            "bitrate": t.string().optional(),
            "streamCodecTag": t.string(),
            "codecString": t.string().optional(),
            "endTimestamp": t.string(),
            "length": t.number().optional(),
            "numberOfFrames": t.string().optional(),
            "ambisonics": t.proxy(
                renames["VideoAmbisonicsAmbisonicsMetadataOut"]
            ).optional(),
            "language": t.string().optional(),
            "decodeOffset": t.string().optional(),
            "channelPosition": t.array(t.string()),
            "profile": t.string(),
            "codecId": t.string().optional(),
            "sampleRate": t.string().optional(),
            "frameSize": t.string().optional(),
            "contentType": t.string().optional(),
            "codecFourcc": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoAudioStreamOut"])
    types["AssistantApiSettingsGcmSettingsIn"] = t.struct(
        {"gcmId": t.string(), "gcmPackage": t.string()}
    ).named(renames["AssistantApiSettingsGcmSettingsIn"])
    types["AssistantApiSettingsGcmSettingsOut"] = t.struct(
        {
            "gcmId": t.string(),
            "gcmPackage": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsGcmSettingsOut"])
    types["AttentionalEntitiesMentionPropertiesSourceIn"] = t.struct(
        {
            "user": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceUserIn"]
            ),
            "client": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceClientIn"]
            ),
            "system": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceSystemIn"]
            ),
        }
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceIn"])
    types["AttentionalEntitiesMentionPropertiesSourceOut"] = t.struct(
        {
            "user": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceUserOut"]
            ),
            "client": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceClientOut"]
            ),
            "system": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceSystemOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceOut"])
    types["HtmlrenderWebkitHeadlessProtoRedirectHopIn"] = t.struct(
        {"type": t.string(), "url": t.string().optional()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoRedirectHopIn"])
    types["HtmlrenderWebkitHeadlessProtoRedirectHopOut"] = t.struct(
        {
            "type": t.string(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRedirectHopOut"])
    types[
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoIn"
    ] = t.struct(
        {
            "anchorText": t.string().optional(),
            "annotationSource": t.string().optional(),
            "languageCode": t.string().optional(),
            "sourceFeedUrl": t.string().optional(),
        }
    ).named(
        renames[
            "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoIn"
        ]
    )
    types[
        "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoOut"
    ] = t.struct(
        {
            "anchorText": t.string().optional(),
            "annotationSource": t.string().optional(),
            "languageCode": t.string().optional(),
            "sourceFeedUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfoOut"
        ]
    )
    types["DrishtiQuantizedByteIndexedFeatureDataIn"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "index": t.array(t.string()),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
            "value": t.string().optional(),
        }
    ).named(renames["DrishtiQuantizedByteIndexedFeatureDataIn"])
    types["DrishtiQuantizedByteIndexedFeatureDataOut"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "index": t.array(t.string()),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiQuantizedByteIndexedFeatureDataOut"])
    types["TeragoogleRepositoryAttachmentOptionsIn"] = t.struct(
        {"compression": t.string()}
    ).named(renames["TeragoogleRepositoryAttachmentOptionsIn"])
    types["TeragoogleRepositoryAttachmentOptionsOut"] = t.struct(
        {
            "compression": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TeragoogleRepositoryAttachmentOptionsOut"])
    types["KnowledgeAnswersDurationTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "rangeConstraint": t.proxy(
                renames["KnowledgeAnswersRangeConstraintIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersDurationTypeIn"])
    types["KnowledgeAnswersDurationTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "rangeConstraint": t.proxy(
                renames["KnowledgeAnswersRangeConstraintOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersDurationTypeOut"])
    types["IndexingConverterLocalizedAlternateNameIn"] = t.struct(
        {
            "deviceMatchInfo": t.string().optional(),
            "feedUrl": t.string().optional(),
            "ecnFp": t.string().optional(),
            "urlEncoding": t.integer().optional(),
            "annotationSource": t.string(),
            "language": t.string(),
            "parsedRegion": t.integer(),
            "parsedLanguage": t.string().optional(),
            "url": t.string(),
        }
    ).named(renames["IndexingConverterLocalizedAlternateNameIn"])
    types["IndexingConverterLocalizedAlternateNameOut"] = t.struct(
        {
            "deviceMatchInfo": t.string().optional(),
            "feedUrl": t.string().optional(),
            "ecnFp": t.string().optional(),
            "urlEncoding": t.integer().optional(),
            "annotationSource": t.string(),
            "language": t.string(),
            "parsedRegion": t.integer(),
            "parsedLanguage": t.string().optional(),
            "url": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterLocalizedAlternateNameOut"])
    types["LegalCitationLawCollectionNameIn"] = t.struct(
        {"Normalized": t.string(), "Source": t.string()}
    ).named(renames["LegalCitationLawCollectionNameIn"])
    types["LegalCitationLawCollectionNameOut"] = t.struct(
        {
            "Normalized": t.string(),
            "Source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationLawCollectionNameOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonIn"] = t.struct(
        {
            "event": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEventIn"])
            ).optional(),
            "im": t.array(t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiImIn"])),
            "tagline": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiTaglineIn"])
            ).optional(),
            "organization": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationIn"])
            ),
            "website": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteIn"])
            ),
            "photo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPhotoIn"])
            ).optional(),
            "personId": t.string().optional(),
            "limitedProfileSettings": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldIn"
                    ]
                )
            ).optional(),
            "phone": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPhoneIn"])
            ),
            "calendar": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiCalendarIn"])
            ).optional(),
            "userDefined": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiUserDefinedIn"])
            ).optional(),
            "membership": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMembershipIn"])
            ).optional(),
            "ageRange": t.string().optional(),
            "name": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNameIn"])
            ).optional(),
            "relationshipInterest": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiRelationshipInterestIn"]
                )
            ).optional(),
            "searchProfile": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSearchProfileIn"])
            ).optional(),
            "circleMembership": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCircleMembershipIn"]
                )
            ).optional(),
            "rightOfPublicityState": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateIn"
                    ]
                )
            ),
            "language": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLanguageIn"])
            ),
            "gender": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiGenderIn"])
            ),
            "braggingRights": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiBraggingRightsIn"])
            ).optional(),
            "personAttribute": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonAttributeIn"])
            ).optional(),
            "mission": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMissionIn"])
            ),
            "contactGroupMembership": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipIn"
                    ]
                )
            ).optional(),
            "peopleInCommon": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ).optional(),
            "inAppNotificationTarget": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetIn"
                    ]
                )
            ).optional(),
            "profileUrl": t.string().optional(),
            "otherKeyword": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOtherKeywordIn"])
            ).optional(),
            "inAppReachability": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityIn"]
                )
            ).optional(),
            "pronoun": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPronounIn"])
            ).optional(),
            "posixAccount": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPosixAccountIn"])
            ),
            "interest": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiInterestIn"])
            ),
            "socialConnection": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiSocialConnectionIn"]
                )
            ).optional(),
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataIn"]
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataIn"]
            ),
            "sipAddress": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSipAddressIn"])
            ).optional(),
            "mapsProfile": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileIn"])
            ).optional(),
            "contactCreateContextInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoIn"
                    ]
                )
            ),
            "emergencyInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoIn"])
            ).optional(),
            "skills": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSkillsIn"])
            ),
            "placeDetails": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsIn"])
            ).optional(),
            "sshPublicKey": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyIn"])
            ),
            "customSchemaField": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldIn"]
                )
            ),
            "address": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAddressIn"])
            ),
            "linkedPerson": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ).optional(),
            "connectionReminder": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiConnectionReminderIn"]
                )
            ).optional(),
            "externalId": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiExternalIdIn"])
            ),
            "ageRangeRepeated": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeIn"])
            ).optional(),
            "fingerprint": t.string().optional(),
            "about": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAboutIn"])
            ),
            "relation": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRelationIn"])
            ).optional(),
            "interactionSettings": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsIn"]
                )
            ).optional(),
            "relationshipStatus": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusIn"]
                )
            ).optional(),
            "birthday": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiBirthdayIn"])
            ),
            "location": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLocationIn"])
            ),
            "legacyFields": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsIn"]
            ).optional(),
            "contactStateInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiContactStateInfoIn"]
                )
            ).optional(),
            "email": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmailIn"])
            ),
            "namePronunciationAudioMetadataInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoIn"
                    ]
                )
            ).optional(),
            "profileUrlRepeated": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiProfileUrlIn"])
            ).optional(),
            "fileAs": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiFileAsIn"])
            ),
            "certifiedBornBefore": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeIn"]
                )
            ),
            "rosterDetails": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRosterDetailsIn"])
            ).optional(),
            "communicationEmail": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailIn"]
                )
            ),
            "clientData": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiClientDataIn"])
            ),
            "coverPhoto": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiCoverPhotoIn"])
            ).optional(),
            "plusPageInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoIn"])
            ).optional(),
            "sortKeys": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiSortKeysIn"]
            ),
            "readOnlyProfileInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoIn"]
                )
            ).optional(),
            "contactEditContextInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoIn"
                    ]
                )
            ),
            "occupation": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOccupationIn"])
            ),
            "nickname": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNicknameIn"])
            ),
            "managementUpchain": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiManagementUpchainIn"]
                )
            ),
            "visibleToGuests": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsIn"])
            ).optional(),
            "teamsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataIn"]
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonOut"] = t.struct(
        {
            "event": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEventOut"])
            ).optional(),
            "im": t.array(t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiImOut"])),
            "tagline": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiTaglineOut"])
            ).optional(),
            "organization": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationOut"])
            ),
            "website": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteOut"])
            ),
            "photo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPhotoOut"])
            ).optional(),
            "personId": t.string().optional(),
            "limitedProfileSettings": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldOut"
                    ]
                )
            ).optional(),
            "phone": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPhoneOut"])
            ),
            "calendar": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiCalendarOut"])
            ).optional(),
            "userDefined": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiUserDefinedOut"])
            ).optional(),
            "membership": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMembershipOut"])
            ).optional(),
            "ageRange": t.string().optional(),
            "name": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNameOut"])
            ).optional(),
            "relationshipInterest": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiRelationshipInterestOut"
                    ]
                )
            ).optional(),
            "searchProfile": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSearchProfileOut"])
            ).optional(),
            "circleMembership": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCircleMembershipOut"]
                )
            ).optional(),
            "rightOfPublicityState": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiRightOfPublicityStateOut"
                    ]
                )
            ),
            "language": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLanguageOut"])
            ),
            "gender": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiGenderOut"])
            ),
            "braggingRights": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiBraggingRightsOut"])
            ).optional(),
            "personAttribute": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiPersonAttributeOut"]
                )
            ).optional(),
            "mission": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMissionOut"])
            ),
            "contactGroupMembership": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactGroupMembershipOut"
                    ]
                )
            ).optional(),
            "peopleInCommon": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ).optional(),
            "inAppNotificationTarget": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOut"
                    ]
                )
            ).optional(),
            "profileUrl": t.string().optional(),
            "otherKeyword": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOtherKeywordOut"])
            ).optional(),
            "inAppReachability": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityOut"]
                )
            ).optional(),
            "pronoun": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPronounOut"])
            ).optional(),
            "posixAccount": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPosixAccountOut"])
            ),
            "interest": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiInterestOut"])
            ),
            "socialConnection": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiSocialConnectionOut"]
                )
            ).optional(),
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataOut"]
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataOut"]
            ),
            "sipAddress": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSipAddressOut"])
            ).optional(),
            "mapsProfile": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileOut"])
            ).optional(),
            "contactCreateContextInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfoOut"
                    ]
                )
            ),
            "emergencyInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoOut"])
            ).optional(),
            "skills": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSkillsOut"])
            ),
            "placeDetails": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsOut"])
            ).optional(),
            "sshPublicKey": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiSshPublicKeyOut"])
            ),
            "customSchemaField": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldOut"]
                )
            ),
            "address": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAddressOut"])
            ),
            "linkedPerson": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ).optional(),
            "connectionReminder": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiConnectionReminderOut"]
                )
            ).optional(),
            "externalId": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiExternalIdOut"])
            ),
            "ageRangeRepeated": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeOut"])
            ).optional(),
            "fingerprint": t.string().optional(),
            "about": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAboutOut"])
            ),
            "relation": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRelationOut"])
            ).optional(),
            "interactionSettings": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsOut"]
                )
            ).optional(),
            "relationshipStatus": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusOut"]
                )
            ).optional(),
            "birthday": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiBirthdayOut"])
            ),
            "location": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLocationOut"])
            ),
            "legacyFields": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiLegacyFieldsOut"]
            ).optional(),
            "contactStateInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiContactStateInfoOut"]
                )
            ).optional(),
            "email": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmailOut"])
            ),
            "namePronunciationAudioMetadataInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfoOut"
                    ]
                )
            ).optional(),
            "profileUrlRepeated": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiProfileUrlOut"])
            ).optional(),
            "fileAs": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiFileAsOut"])
            ),
            "certifiedBornBefore": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeOut"]
                )
            ),
            "rosterDetails": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiRosterDetailsOut"])
            ).optional(),
            "communicationEmail": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailOut"]
                )
            ),
            "clientData": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiClientDataOut"])
            ),
            "coverPhoto": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiCoverPhotoOut"])
            ).optional(),
            "plusPageInfo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPlusPageInfoOut"])
            ).optional(),
            "sortKeys": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiSortKeysOut"]
            ),
            "readOnlyProfileInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoOut"]
                )
            ).optional(),
            "contactEditContextInfo": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoOut"
                    ]
                )
            ),
            "occupation": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiOccupationOut"])
            ),
            "nickname": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiNicknameOut"])
            ),
            "managementUpchain": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiManagementUpchainOut"]
                )
            ),
            "visibleToGuests": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiVisibleToGuestsOut"]
                )
            ).optional(),
            "teamsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
    types["IndexingConverterRedirectChainHopIn"] = t.struct(
        {
            "params": t.proxy(renames["IndexingConverterRedirectParamsIn"]),
            "target": t.string().optional(),
            "rawTarget": t.string().optional(),
        }
    ).named(renames["IndexingConverterRedirectChainHopIn"])
    types["IndexingConverterRedirectChainHopOut"] = t.struct(
        {
            "params": t.proxy(renames["IndexingConverterRedirectParamsOut"]),
            "target": t.string().optional(),
            "rawTarget": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRedirectChainHopOut"])
    types["AssistantDevicesPlatformProtoTimerCapabilityIn"] = t.struct(
        {
            "supportsMutateAction": t.boolean().optional(),
            "maxSupportedExtendedTimerDuration": t.proxy(
                renames["AssistantApiDurationIn"]
            ).optional(),
            "maxSupportedTimerDuration": t.proxy(
                renames["AssistantApiDurationIn"]
            ).optional(),
            "maxSupportedTimers": t.integer().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoTimerCapabilityIn"])
    types["AssistantDevicesPlatformProtoTimerCapabilityOut"] = t.struct(
        {
            "supportsMutateAction": t.boolean().optional(),
            "maxSupportedExtendedTimerDuration": t.proxy(
                renames["AssistantApiDurationOut"]
            ).optional(),
            "maxSupportedTimerDuration": t.proxy(
                renames["AssistantApiDurationOut"]
            ).optional(),
            "maxSupportedTimers": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoTimerCapabilityOut"])
    types["GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterIn"] = t.struct(
        {
            "propertyNames": t.array(t.string()).optional(),
            "yAxis": t.string().optional(),
            "documentSchemas": t.array(t.string()).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterIn"])
    types[
        "GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterOut"
    ] = t.struct(
        {
            "propertyNames": t.array(t.string()).optional(),
            "yAxis": t.string().optional(),
            "documentSchemas": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilterOut"]
    )
    types["AppsPeopleOzExternalMergedpeopleapiCustomerInfoIn"] = t.struct(
        {
            "obfuscatedCustomerId": t.string().optional(),
            "customerName": t.string().optional(),
            "customerId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCustomerInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCustomerInfoOut"] = t.struct(
        {
            "obfuscatedCustomerId": t.string().optional(),
            "customerName": t.string().optional(),
            "customerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCustomerInfoOut"])
    types["AssistantDevicesPlatformProtoTriggerConditionIn"] = t.struct(
        {
            "status": t.string().optional(),
            "requiredStateValues": t.struct({"_": t.string().optional()}).optional(),
            "simpleTts": t.string().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoTriggerConditionIn"])
    types["AssistantDevicesPlatformProtoTriggerConditionOut"] = t.struct(
        {
            "status": t.string().optional(),
            "requiredStateValues": t.struct({"_": t.string().optional()}).optional(),
            "simpleTts": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoTriggerConditionOut"])
    types["QualityQrewriteCalendarReferenceIn"] = t.struct(
        {
            "primaryCalendarAlias": t.proxy(
                renames["QualityQrewritePrimaryCalendarAliasIn"]
            ),
            "calendarAlias": t.proxy(
                renames["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperIn"]
            ),
            "familyCalendarAlias": t.proxy(
                renames["QualityQrewriteFamilyCalendarAliasIn"]
            ),
            "contactCalendarName": t.proxy(
                renames["QualityQrewriteContactCalendarNameIn"]
            ),
        }
    ).named(renames["QualityQrewriteCalendarReferenceIn"])
    types["QualityQrewriteCalendarReferenceOut"] = t.struct(
        {
            "primaryCalendarAlias": t.proxy(
                renames["QualityQrewritePrimaryCalendarAliasOut"]
            ),
            "calendarAlias": t.proxy(
                renames["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperOut"]
            ),
            "familyCalendarAlias": t.proxy(
                renames["QualityQrewriteFamilyCalendarAliasOut"]
            ),
            "contactCalendarName": t.proxy(
                renames["QualityQrewriteContactCalendarNameOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteCalendarReferenceOut"])
    types["SocialGraphApiProtoDelegatedGroupIdIn"] = t.struct({"id": t.string()}).named(
        renames["SocialGraphApiProtoDelegatedGroupIdIn"]
    )
    types["SocialGraphApiProtoDelegatedGroupIdOut"] = t.struct(
        {"id": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SocialGraphApiProtoDelegatedGroupIdOut"])
    types["KnowledgeAnswersMarkerIn"] = t.struct(
        {
            "command": t.proxy(renames["KnowledgeAnswersMarkerCommandIn"]),
            "polarQuestion": t.proxy(renames["KnowledgeAnswersMarkerPolarQuestionIn"]),
            "stateOfAffairs": t.proxy(
                renames["KnowledgeAnswersMarkerStateOfAffairsIn"]
            ),
            "openQuestion": t.proxy(renames["KnowledgeAnswersMarkerOpenQuestionIn"]),
        }
    ).named(renames["KnowledgeAnswersMarkerIn"])
    types["KnowledgeAnswersMarkerOut"] = t.struct(
        {
            "command": t.proxy(renames["KnowledgeAnswersMarkerCommandOut"]),
            "polarQuestion": t.proxy(renames["KnowledgeAnswersMarkerPolarQuestionOut"]),
            "stateOfAffairs": t.proxy(
                renames["KnowledgeAnswersMarkerStateOfAffairsOut"]
            ),
            "openQuestion": t.proxy(renames["KnowledgeAnswersMarkerOpenQuestionOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersMarkerOut"])
    types["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "documentLinks": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentLinkIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseIn"])
    types["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "documentLinks": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentLinkOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"])
    types["ImageSafesearchContentOffensiveSymbolMatchIn"] = t.struct(
        {"type": t.string(), "score": t.number().optional()}
    ).named(renames["ImageSafesearchContentOffensiveSymbolMatchIn"])
    types["ImageSafesearchContentOffensiveSymbolMatchOut"] = t.struct(
        {
            "type": t.string(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSafesearchContentOffensiveSymbolMatchOut"])
    types["CompositeDocForwardingDupIn"] = t.struct(
        {
            "ecn": t.string().optional(),
            "ecnFp": t.string(),
            "urlencoding": t.integer().optional(),
            "repid": t.string().optional(),
            "purposes": t.integer().optional(),
            "rawPagerank": t.integer().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["CompositeDocForwardingDupIn"])
    types["CompositeDocForwardingDupOut"] = t.struct(
        {
            "ecn": t.string().optional(),
            "ecnFp": t.string(),
            "urlencoding": t.integer().optional(),
            "repid": t.string().optional(),
            "purposes": t.integer().optional(),
            "rawPagerank": t.integer().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocForwardingDupOut"])
    types["SnapshotTextNodeIn"] = t.struct(
        {
            "boundingBox": t.proxy(renames["SnapshotBoxIn"]),
            "fontSize": t.number(),
            "text": t.string(),
            "maxSplit": t.integer().optional(),
            "inLink": t.integer().optional(),
        }
    ).named(renames["SnapshotTextNodeIn"])
    types["SnapshotTextNodeOut"] = t.struct(
        {
            "boundingBox": t.proxy(renames["SnapshotBoxOut"]),
            "fontSize": t.number(),
            "text": t.string(),
            "maxSplit": t.integer().optional(),
            "inLink": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotTextNodeOut"])
    types["GeostoreFeatureReplacementInfoProtoIn"] = t.struct(
        {
            "replacedBy": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "derivedFrom": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreFeatureReplacementInfoProtoIn"])
    types["GeostoreFeatureReplacementInfoProtoOut"] = t.struct(
        {
            "replacedBy": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "derivedFrom": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureReplacementInfoProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiContactStateInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "contactState": t.proxy(renames["SocialGraphApiProtoContactStateIn"]),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactStateInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiContactStateInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "contactState": t.proxy(renames["SocialGraphApiProtoContactStateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactStateInfoOut"])
    types["QualitySitemapCoClickTargetIn"] = t.struct(
        {
            "language": t.string(),
            "docs": t.array(t.proxy(renames["QualitySitemapCoClickTargetDocIn"])),
        }
    ).named(renames["QualitySitemapCoClickTargetIn"])
    types["QualitySitemapCoClickTargetOut"] = t.struct(
        {
            "language": t.string(),
            "docs": t.array(t.proxy(renames["QualitySitemapCoClickTargetDocOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapCoClickTargetOut"])
    types["GoogleCloudDocumentaiV1DocumentTextChangeIn"] = t.struct(
        {
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorIn"]
            ).optional(),
            "changedText": t.string().optional(),
            "provenance": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextChangeIn"])
    types["GoogleCloudDocumentaiV1DocumentTextChangeOut"] = t.struct(
        {
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorOut"]
            ).optional(),
            "changedText": t.string().optional(),
            "provenance": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextChangeOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeIn"] = t.struct(
        {
            "ageRange": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "ageOfConsentStatus": t.string().optional(),
            "ageInYears": t.integer().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeOut"] = t.struct(
        {
            "ageRange": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "ageOfConsentStatus": t.string().optional(),
            "ageInYears": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAgeRangeTypeOut"])
    types["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataIn"] = t.struct(
        {"subtitle": t.string().optional(), "actorId": t.string().optional()}
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataIn"])
    types["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataOut"] = t.struct(
        {
            "subtitle": t.string().optional(),
            "actorId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataOut"])
    types["GoogleCloudContentwarehouseV1RemoveFromFolderActionIn"] = t.struct(
        {"folder": t.string().optional(), "condition": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1RemoveFromFolderActionIn"])
    types["GoogleCloudContentwarehouseV1RemoveFromFolderActionOut"] = t.struct(
        {
            "folder": t.string().optional(),
            "condition": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RemoveFromFolderActionOut"])
    types["NlpSaftEntityProfileAttributeIn"] = t.struct(
        {
            "type": t.string().optional(),
            "value": t.string().optional(),
            "language": t.integer().optional(),
            "boolValue": t.boolean().optional(),
            "intValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "typeId": t.integer().optional(),
            "valueType": t.string().optional(),
        }
    ).named(renames["NlpSaftEntityProfileAttributeIn"])
    types["NlpSaftEntityProfileAttributeOut"] = t.struct(
        {
            "type": t.string().optional(),
            "value": t.string().optional(),
            "language": t.integer().optional(),
            "boolValue": t.boolean().optional(),
            "intValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "typeId": t.integer().optional(),
            "valueType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileAttributeOut"])
    types["VideoContentSearchVideoAnchorsIn"] = t.struct(
        {
            "thumbnailSetInfo": t.proxy(
                renames["VideoContentSearchAnchorsThumbnailInfoIn"]
            ).optional(),
            "videoAnchor": t.array(t.proxy(renames["VideoContentSearchVideoAnchorIn"])),
            "mergedAnchorsSources": t.array(t.string()).optional(),
            "predictedQuerylessTocUsefulness": t.number().optional(),
            "isFiltered": t.boolean().optional(),
            "score": t.number().optional(),
            "shouldServeThumbnails": t.boolean().optional(),
            "videoIntroduction": t.proxy(
                renames["VideoContentSearchVideoIntroductionIn"]
            ).optional(),
            "entityGroupInfo": t.proxy(
                renames["VideoContentSearchEntityGroupInfoIn"]
            ).optional(),
            "experimentalPredictedQuerylessTocUsefulness": t.number().optional(),
            "anchorType": t.string(),
            "scoreInfo": t.proxy(
                renames["VideoContentSearchVideoAnchorsScoreInfoIn"]
            ).optional(),
            "thumbnailForced": t.boolean().optional(),
            "filterReason": t.array(t.string()).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorsIn"])
    types["VideoContentSearchVideoAnchorsOut"] = t.struct(
        {
            "thumbnailSetInfo": t.proxy(
                renames["VideoContentSearchAnchorsThumbnailInfoOut"]
            ).optional(),
            "videoAnchor": t.array(
                t.proxy(renames["VideoContentSearchVideoAnchorOut"])
            ),
            "mergedAnchorsSources": t.array(t.string()).optional(),
            "predictedQuerylessTocUsefulness": t.number().optional(),
            "isFiltered": t.boolean().optional(),
            "score": t.number().optional(),
            "shouldServeThumbnails": t.boolean().optional(),
            "videoIntroduction": t.proxy(
                renames["VideoContentSearchVideoIntroductionOut"]
            ).optional(),
            "entityGroupInfo": t.proxy(
                renames["VideoContentSearchEntityGroupInfoOut"]
            ).optional(),
            "experimentalPredictedQuerylessTocUsefulness": t.number().optional(),
            "anchorType": t.string(),
            "scoreInfo": t.proxy(
                renames["VideoContentSearchVideoAnchorsScoreInfoOut"]
            ).optional(),
            "thumbnailForced": t.boolean().optional(),
            "filterReason": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorsOut"])
    types["KnowledgeAnswersSensitivityInstructionArgumentIn"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyIn"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyIn"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyIn"]),
            "eval": t.proxy(renames["KnowledgeAnswersSensitivityArgumentEvalPolicyIn"]),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionArgumentIn"])
    types["KnowledgeAnswersSensitivityInstructionArgumentOut"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyOut"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyOut"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyOut"]),
            "eval": t.proxy(
                renames["KnowledgeAnswersSensitivityArgumentEvalPolicyOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionArgumentOut"])
    types["GeostoreLaneProtoLaneConnectionIn"] = t.struct(
        {
            "yieldToOtherConnections": t.boolean().optional(),
            "boundingMarker": t.array(
                t.proxy(renames["GeostoreBoundingMarkerProtoIn"])
            ).optional(),
            "connectionToken": t.string().optional(),
            "segment": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "curve": t.proxy(renames["GeostoreCurveConnectionProtoIn"]).optional(),
            "primaryConnection": t.boolean().optional(),
            "laneNumber": t.integer().optional(),
            "flow": t.proxy(renames["GeostoreFlowLineProtoIn"]).optional(),
        }
    ).named(renames["GeostoreLaneProtoLaneConnectionIn"])
    types["GeostoreLaneProtoLaneConnectionOut"] = t.struct(
        {
            "yieldToOtherConnections": t.boolean().optional(),
            "boundingMarker": t.array(
                t.proxy(renames["GeostoreBoundingMarkerProtoOut"])
            ).optional(),
            "connectionToken": t.string().optional(),
            "segment": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "curve": t.proxy(renames["GeostoreCurveConnectionProtoOut"]).optional(),
            "primaryConnection": t.boolean().optional(),
            "laneNumber": t.integer().optional(),
            "flow": t.proxy(renames["GeostoreFlowLineProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLaneProtoLaneConnectionOut"])
    types["AssistantApiCoreTypesSurfaceIdentityIn"] = t.struct(
        {
            "surfaceType": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "surfaceVersion": t.proxy(
                renames["AssistantApiCoreTypesSurfaceVersionIn"]
            ).optional(),
            "surfaceTypeString": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesSurfaceIdentityIn"])
    types["AssistantApiCoreTypesSurfaceIdentityOut"] = t.struct(
        {
            "surfaceType": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "surfaceVersion": t.proxy(
                renames["AssistantApiCoreTypesSurfaceVersionOut"]
            ).optional(),
            "surfaceTypeString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesSurfaceIdentityOut"])
    types["GeostoreElevationModelProtoIn"] = t.struct(
        {
            "dataMaxlevel": t.integer().optional(),
            "partialChildDataAvailable": t.boolean().optional(),
            "blendOrder": t.integer().optional(),
            "fullChildDataAvailable": t.boolean().optional(),
            "elevationData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "dataLevel": t.integer().optional(),
        }
    ).named(renames["GeostoreElevationModelProtoIn"])
    types["GeostoreElevationModelProtoOut"] = t.struct(
        {
            "dataMaxlevel": t.integer().optional(),
            "partialChildDataAvailable": t.boolean().optional(),
            "blendOrder": t.integer().optional(),
            "fullChildDataAvailable": t.boolean().optional(),
            "elevationData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "dataLevel": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreElevationModelProtoOut"])
    types["GoogleCloudContentwarehouseV1ListSynonymSetsResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "synonymSets": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListSynonymSetsResponseIn"])
    types["GoogleCloudContentwarehouseV1ListSynonymSetsResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "synonymSets": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListSynonymSetsResponseOut"])
    types["LocalWWWInfoAddressIn"] = t.struct(
        {
            "addrFprint": t.string(),
            "lngE7": t.integer(),
            "address": t.proxy(renames["GeostoreAddressProtoIn"]),
            "latE7": t.integer(),
        }
    ).named(renames["LocalWWWInfoAddressIn"])
    types["LocalWWWInfoAddressOut"] = t.struct(
        {
            "addrFprint": t.string(),
            "lngE7": t.integer(),
            "address": t.proxy(renames["GeostoreAddressProtoOut"]),
            "latE7": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalWWWInfoAddressOut"])
    types["NlpSaftLabeledSpanIn"] = t.struct(
        {
            "byteEnd": t.integer().optional(),
            "tokenEnd": t.integer().optional(),
            "label": t.string().optional(),
            "score": t.number().optional(),
            "byteStart": t.integer().optional(),
            "tokenStart": t.integer().optional(),
            "labelScores": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["NlpSaftLabeledSpanIn"])
    types["NlpSaftLabeledSpanOut"] = t.struct(
        {
            "byteEnd": t.integer().optional(),
            "tokenEnd": t.integer().optional(),
            "label": t.string().optional(),
            "score": t.number().optional(),
            "byteStart": t.integer().optional(),
            "tokenStart": t.integer().optional(),
            "labelScores": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftLabeledSpanOut"])
    types["GoodocDocumentPageIn"] = t.struct(
        {
            "Width": t.integer().optional(),
            "TextConfidence": t.integer().optional(),
            "Height": t.integer().optional(),
            "HorizontalDpi": t.integer().optional(),
            "PornScore": t.number().optional(),
            "Label": t.proxy(renames["GoodocLabelIn"]),
            "GarbageDetectorWasProduction": t.boolean(),
            "mergedpageinfo": t.array(
                t.proxy(renames["GoodocDocumentPageMergedPageInfoIn"])
            ),
            "stats": t.proxy(renames["GoodocSummaryStatsIn"]).optional(),
            "VerticalDpi": t.integer().optional(),
            "GarbageDetectorChangeList": t.integer().optional(),
            "postOcrConfidence": t.boolean().optional(),
            "block": t.array(t.proxy(renames["GoodocDocumentPageBlockIn"])),
        }
    ).named(renames["GoodocDocumentPageIn"])
    types["GoodocDocumentPageOut"] = t.struct(
        {
            "Width": t.integer().optional(),
            "TextConfidence": t.integer().optional(),
            "Height": t.integer().optional(),
            "HorizontalDpi": t.integer().optional(),
            "PornScore": t.number().optional(),
            "Label": t.proxy(renames["GoodocLabelOut"]),
            "GarbageDetectorWasProduction": t.boolean(),
            "mergedpageinfo": t.array(
                t.proxy(renames["GoodocDocumentPageMergedPageInfoOut"])
            ),
            "stats": t.proxy(renames["GoodocSummaryStatsOut"]).optional(),
            "VerticalDpi": t.integer().optional(),
            "GarbageDetectorChangeList": t.integer().optional(),
            "postOcrConfidence": t.boolean().optional(),
            "block": t.array(t.proxy(renames["GoodocDocumentPageBlockOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentPageOut"])
    types["IndexingUrlPatternUrlTreeBigTreeBranchIn"] = t.struct(
        {
            "features": t.proxy(renames["IndexingUrlPatternUrlTreeUrlFeaturesIn"]),
            "patternId": t.string().optional(),
            "payload": t.proxy(renames["Proto2BridgeMessageSetIn"]),
        }
    ).named(renames["IndexingUrlPatternUrlTreeBigTreeBranchIn"])
    types["IndexingUrlPatternUrlTreeBigTreeBranchOut"] = t.struct(
        {
            "features": t.proxy(renames["IndexingUrlPatternUrlTreeUrlFeaturesOut"]),
            "patternId": t.string().optional(),
            "payload": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeBigTreeBranchOut"])
    types["QualityNsrNsrChunksProtoIn"] = t.struct(
        {
            "primaryChunk": t.string().optional(),
            "secondaryChunks": t.array(t.string()).optional(),
        }
    ).named(renames["QualityNsrNsrChunksProtoIn"])
    types["QualityNsrNsrChunksProtoOut"] = t.struct(
        {
            "primaryChunk": t.string().optional(),
            "secondaryChunks": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNsrChunksProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCommunicationEmailOut"])
    types["NlpSemanticParsingModelsOnDeviceIn"] = t.struct(
        {
            "device": t.array(
                t.proxy(renames["NlpSemanticParsingModelsDeviceIn"])
            ).optional()
        }
    ).named(renames["NlpSemanticParsingModelsOnDeviceIn"])
    types["NlpSemanticParsingModelsOnDeviceOut"] = t.struct(
        {
            "device": t.array(
                t.proxy(renames["NlpSemanticParsingModelsDeviceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsOnDeviceOut"])
    types["GeostoreTimeIntervalProtoIn"] = t.struct(
        {
            "end": t.proxy(renames["GeostoreTimeEndpointProtoIn"]),
            "type": t.string(),
            "inverted": t.boolean().optional(),
            "begin": t.proxy(renames["GeostoreTimeEndpointProtoIn"]).optional(),
            "occasion": t.string().optional(),
        }
    ).named(renames["GeostoreTimeIntervalProtoIn"])
    types["GeostoreTimeIntervalProtoOut"] = t.struct(
        {
            "end": t.proxy(renames["GeostoreTimeEndpointProtoOut"]),
            "type": t.string(),
            "inverted": t.boolean().optional(),
            "begin": t.proxy(renames["GeostoreTimeEndpointProtoOut"]).optional(),
            "occasion": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimeIntervalProtoOut"])
    types["CompositeDocQualitySignalsIn"] = t.struct(
        {
            "pagetype": t.proxy(renames["QualityTimebasedPageTypeIn"]),
            "lastSignificantUpdate": t.proxy(
                renames["QualityTimebasedLastSignificantUpdateIn"]
            ).optional(),
        }
    ).named(renames["CompositeDocQualitySignalsIn"])
    types["CompositeDocQualitySignalsOut"] = t.struct(
        {
            "pagetype": t.proxy(renames["QualityTimebasedPageTypeOut"]),
            "lastSignificantUpdate": t.proxy(
                renames["QualityTimebasedLastSignificantUpdateOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocQualitySignalsOut"])
    types["GeostoreLocaleLanguageProtoIn"] = t.struct(
        {
            "preference": t.number().optional(),
            "writingPercent": t.number().optional(),
            "official": t.boolean().optional(),
            "speakingPercent": t.number().optional(),
            "language": t.string().optional(),
        }
    ).named(renames["GeostoreLocaleLanguageProtoIn"])
    types["GeostoreLocaleLanguageProtoOut"] = t.struct(
        {
            "preference": t.number().optional(),
            "writingPercent": t.number().optional(),
            "official": t.boolean().optional(),
            "speakingPercent": t.number().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLocaleLanguageProtoOut"])
    types["VideoContentSearchTokenTimingInfoIn"] = t.struct(
        {
            "durationMs": t.string(),
            "text": t.string().optional(),
            "confidence": t.number().optional(),
            "startMs": t.string(),
        }
    ).named(renames["VideoContentSearchTokenTimingInfoIn"])
    types["VideoContentSearchTokenTimingInfoOut"] = t.struct(
        {
            "durationMs": t.string(),
            "text": t.string().optional(),
            "confidence": t.number().optional(),
            "startMs": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchTokenTimingInfoOut"])
    types["AssistantApiCoreTypesMessageNotificationPersonIn"] = t.struct(
        {"key": t.string(), "name": t.string(), "isImportant": t.boolean()}
    ).named(renames["AssistantApiCoreTypesMessageNotificationPersonIn"])
    types["AssistantApiCoreTypesMessageNotificationPersonOut"] = t.struct(
        {
            "key": t.string(),
            "name": t.string(),
            "isImportant": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesMessageNotificationPersonOut"])
    types["RepositoryWebrefClusterProtoRuleInstanceIn"] = t.struct(
        {
            "midList": t.proxy(
                renames["RepositoryWebrefClusterProtoMidListRuleInstanceIn"]
            ).optional(),
            "relation": t.array(
                t.proxy(renames["RepositoryWebrefClusterProtoRelationRuleInstanceIn"])
            ),
        }
    ).named(renames["RepositoryWebrefClusterProtoRuleInstanceIn"])
    types["RepositoryWebrefClusterProtoRuleInstanceOut"] = t.struct(
        {
            "midList": t.proxy(
                renames["RepositoryWebrefClusterProtoMidListRuleInstanceOut"]
            ).optional(),
            "relation": t.array(
                t.proxy(renames["RepositoryWebrefClusterProtoRelationRuleInstanceOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoRuleInstanceOut"])
    types["AssistantApiCoreTypesProviderDeltaIn"] = t.struct(
        {
            "iconImageUrl": t.string().optional(),
            "fallbackUrl": t.string().optional(),
            "androidAppInfoDelta": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoDeltaIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiCoreTypesProviderDeltaIn"])
    types["AssistantApiCoreTypesProviderDeltaOut"] = t.struct(
        {
            "iconImageUrl": t.string().optional(),
            "fallbackUrl": t.string().optional(),
            "androidAppInfoDelta": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoDeltaOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesProviderDeltaOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAboutIn"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "safeHtmlValue": t.proxy(
                renames["WebutilHtmlTypesSafeHtmlProtoIn"]
            ).optional(),
            "contentType": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAboutIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAboutOut"] = t.struct(
        {
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "safeHtmlValue": t.proxy(
                renames["WebutilHtmlTypesSafeHtmlProtoOut"]
            ).optional(),
            "contentType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAboutOut"])
    types["GeostoreSourceInfoProtoIn"] = t.struct(
        {
            "dataset": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "ogrFid": t.string().optional(),
            "rawData": t.array(t.proxy(renames["GeostoreRawDataProtoIn"])).optional(),
            "attributionUrl": t.array(
                t.proxy(renames["GeostoreUrlProtoIn"])
            ).optional(),
            "release": t.string().optional(),
            "collectionDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "user": t.proxy(renames["GeostoreUserProtoIn"]).optional(),
            "provider": t.integer().optional(),
            "cookie": t.string().optional(),
            "layer": t.string().optional(),
            "sourceId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "gaiaId": t.string().optional(),
            "impersonationUser": t.proxy(renames["GeostoreUserProtoIn"]).optional(),
        }
    ).named(renames["GeostoreSourceInfoProtoIn"])
    types["GeostoreSourceInfoProtoOut"] = t.struct(
        {
            "dataset": t.string().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "ogrFid": t.string().optional(),
            "rawData": t.array(t.proxy(renames["GeostoreRawDataProtoOut"])).optional(),
            "attributionUrl": t.array(
                t.proxy(renames["GeostoreUrlProtoOut"])
            ).optional(),
            "release": t.string().optional(),
            "collectionDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "user": t.proxy(renames["GeostoreUserProtoOut"]).optional(),
            "provider": t.integer().optional(),
            "cookie": t.string().optional(),
            "layer": t.string().optional(),
            "sourceId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "gaiaId": t.string().optional(),
            "impersonationUser": t.proxy(renames["GeostoreUserProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSourceInfoProtoOut"])
    types["AssistantLogsDeviceAnnotationLogIn"] = t.struct(
        {
            "userDefinedName": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["AssistantLogsDeviceAnnotationLogIn"])
    types["AssistantLogsDeviceAnnotationLogOut"] = t.struct(
        {
            "userDefinedName": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDeviceAnnotationLogOut"])
    types["GeostoreJobRelatedCategoryIn"] = t.struct(
        {"name": t.string().optional(), "gcid": t.string(), "language": t.string()}
    ).named(renames["GeostoreJobRelatedCategoryIn"])
    types["GeostoreJobRelatedCategoryOut"] = t.struct(
        {
            "name": t.string().optional(),
            "gcid": t.string(),
            "language": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreJobRelatedCategoryOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAccountEmailIn"] = t.struct(
        {"email": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAccountEmailIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAccountEmailOut"] = t.struct(
        {"email": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAccountEmailOut"])
    types["VideoContentSearchVideoActionsIn"] = t.struct(
        {
            "skipToTimePattern": t.string().optional(),
            "skipPatternStartOffsetInput": t.string().optional(),
        }
    ).named(renames["VideoContentSearchVideoActionsIn"])
    types["VideoContentSearchVideoActionsOut"] = t.struct(
        {
            "skipToTimePattern": t.string().optional(),
            "skipPatternStartOffsetInput": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoActionsOut"])
    types["NlpSemanticParsingSaftSpanIn"] = t.struct(
        {"category": t.string().optional(), "rawText": t.string().optional()}
    ).named(renames["NlpSemanticParsingSaftSpanIn"])
    types["NlpSemanticParsingSaftSpanOut"] = t.struct(
        {
            "category": t.string().optional(),
            "rawText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingSaftSpanOut"])
    types["AssistantApiCommunicationUiCapabilitiesIn"] = t.struct(
        {"fluidActionsUiType": t.string()}
    ).named(renames["AssistantApiCommunicationUiCapabilitiesIn"])
    types["AssistantApiCommunicationUiCapabilitiesOut"] = t.struct(
        {
            "fluidActionsUiType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCommunicationUiCapabilitiesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAffinityIn"] = t.struct(
        {
            "affinityMetadata": t.proxy(
                renames["SocialGraphWireProtoPeopleapiAffinityMetadataIn"]
            ).optional(),
            "containerId": t.string().optional(),
            "containerType": t.string().optional(),
            "affinityType": t.string(),
            "loggingId": t.string().optional(),
            "value": t.number().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAffinityIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAffinityOut"] = t.struct(
        {
            "affinityMetadata": t.proxy(
                renames["SocialGraphWireProtoPeopleapiAffinityMetadataOut"]
            ).optional(),
            "containerId": t.string().optional(),
            "containerType": t.string().optional(),
            "affinityType": t.string(),
            "loggingId": t.string().optional(),
            "value": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAffinityOut"])
    types["SocialPersonalizationKnexAnnotationItemIn"] = t.struct(
        {
            "generality": t.number().optional(),
            "confidence": t.number(),
            "mid": t.string().optional(),
            "topicality": t.number(),
            "description": t.string().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["SocialPersonalizationKnexAnnotationItemTopicIn"])
            ),
            "equivalentMid": t.string().optional(),
        }
    ).named(renames["SocialPersonalizationKnexAnnotationItemIn"])
    types["SocialPersonalizationKnexAnnotationItemOut"] = t.struct(
        {
            "generality": t.number().optional(),
            "confidence": t.number(),
            "mid": t.string().optional(),
            "topicality": t.number(),
            "description": t.string().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["SocialPersonalizationKnexAnnotationItemTopicOut"])
            ),
            "equivalentMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialPersonalizationKnexAnnotationItemOut"])
    types["SocialGraphApiProtoSearchProfileStateIn"] = t.struct(
        {
            "displayTimestamp": t.string().optional(),
            "changeTimestamp": t.string().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileStateIn"])
    types["SocialGraphApiProtoSearchProfileStateOut"] = t.struct(
        {
            "displayTimestamp": t.string().optional(),
            "changeTimestamp": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileStateOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataIn"
    ] = t.struct({"app": t.string().optional(), "byteValue": t.string()}).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataOut"
    ] = t.struct(
        {
            "app": t.string().optional(),
            "byteValue": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientDataOut"
        ]
    )
    types["AssistantApiGcmCapabilitiesIn"] = t.struct(
        {
            "supportsAssistantGcm": t.boolean().optional(),
            "gcmRegistrationId": t.string().optional(),
            "supportsClientInputOverGcm": t.boolean().optional(),
        }
    ).named(renames["AssistantApiGcmCapabilitiesIn"])
    types["AssistantApiGcmCapabilitiesOut"] = t.struct(
        {
            "supportsAssistantGcm": t.boolean().optional(),
            "gcmRegistrationId": t.string().optional(),
            "supportsClientInputOverGcm": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiGcmCapabilitiesOut"])
    types["WWWDocInfoIn"] = t.struct(
        {
            "metaDescriptionLanguages": t.array(t.string()).optional(),
            "isAnimated": t.boolean().optional(),
            "seenNotranslate": t.boolean().optional(),
            "dataVersion": t.string(),
            "visibleImage": t.boolean().optional(),
            "seenNopreview": t.boolean().optional(),
            "seenNoodp": t.boolean().optional(),
            "nsrSitechunk": t.string().optional(),
            "seenNoindex": t.boolean().optional(),
            "boilerplateMetadescription": t.boolean(),
            "language": t.string().optional(),
            "shoppingAttachment": t.proxy(
                renames["QualityShoppingShoppingAttachmentIn"]
            ),
            "lastModTime": t.string().optional(),
            "fileTypeId": t.string().optional(),
            "thumbnail": t.array(t.proxy(renames["WWWDocInfoThumbnailIn"])),
            "isSitePorn": t.boolean().optional(),
            "noimageframeoverlayreason": t.integer().optional(),
            "nearbyText": t.string().optional(),
            "encoding": t.string(),
            "seenNosnippet": t.boolean().optional(),
            "languageTag": t.string().optional(),
            "relatedimages": t.array(t.proxy(renames["WWWDocInfoRelatedImagesIn"])),
            "thumbWidth": t.integer().optional(),
            "hasBadSslCertificate": t.boolean().optional(),
            "referrerUrl": t.string().optional(),
            "urlAfterRedirects": t.string().optional(),
            "ipaddr": t.string(),
            "coupledUrl": t.string().optional(),
            "thumbHeight": t.integer().optional(),
            "isSoftporn": t.boolean().optional(),
            "failsSafeSearch": t.string().optional(),
            "visualType": t.string().optional(),
            "url": t.string().optional(),
            "pornStats": t.integer().optional(),
            "imageSize": t.integer().optional(),
            "isRoboted": t.boolean().optional(),
            "shoppingOffers": t.array(
                t.proxy(renames["ImageMustangShoppingOfferIn"])
            ).optional(),
            "bodySize": t.integer().optional(),
            "urlEncoding": t.integer().optional(),
            "subindex": t.integer().optional(),
            "seenNoarchive": t.boolean().optional(),
            "lowQualityMetadescription": t.boolean(),
            "crawlTime": t.string().optional(),
            "imageLicenseInfo": t.proxy(
                renames["ImageSearchImageLicenseInfoIn"]
            ).optional(),
            "imageWidth": t.integer().optional(),
            "unionBuildTime": t.string(),
            "authMethod": t.integer().optional(),
            "foreignMetadescription": t.boolean().optional(),
            "indexingTs": t.string().optional(),
            "qualityWithoutAdjustment": t.number().optional(),
            "licensedWebImagesOptInState": t.string().optional(),
            "googleLabelData": t.string().optional(),
            "bodyTitleLanguages": t.array(t.string()),
            "isHostedImage": t.boolean().optional(),
            "docVersionId": t.string().optional(),
            "partialBoilerplateMetadescription": t.boolean(),
            "badMetadescription": t.boolean().optional(),
            "ip": t.integer().optional(),
            "imageHeight": t.integer().optional(),
            "fuzzyMetadescription": t.boolean(),
            "contentType": t.string().optional(),
            "cropData": t.integer().optional(),
            "colorDetectionResult": t.integer().optional(),
            "coupledUrlEncoding": t.integer(),
            "title": t.string().optional(),
            "imagePublisher": t.string(),
            "additionalSafesearchStats": t.array(t.integer()).optional(),
            "isPorn": t.boolean().optional(),
            "rootpageDuplicateMetadescription": t.boolean().optional(),
        }
    ).named(renames["WWWDocInfoIn"])
    types["WWWDocInfoOut"] = t.struct(
        {
            "metaDescriptionLanguages": t.array(t.string()).optional(),
            "isAnimated": t.boolean().optional(),
            "seenNotranslate": t.boolean().optional(),
            "dataVersion": t.string(),
            "visibleImage": t.boolean().optional(),
            "seenNopreview": t.boolean().optional(),
            "seenNoodp": t.boolean().optional(),
            "nsrSitechunk": t.string().optional(),
            "seenNoindex": t.boolean().optional(),
            "boilerplateMetadescription": t.boolean(),
            "language": t.string().optional(),
            "shoppingAttachment": t.proxy(
                renames["QualityShoppingShoppingAttachmentOut"]
            ),
            "lastModTime": t.string().optional(),
            "fileTypeId": t.string().optional(),
            "thumbnail": t.array(t.proxy(renames["WWWDocInfoThumbnailOut"])),
            "isSitePorn": t.boolean().optional(),
            "noimageframeoverlayreason": t.integer().optional(),
            "nearbyText": t.string().optional(),
            "encoding": t.string(),
            "seenNosnippet": t.boolean().optional(),
            "languageTag": t.string().optional(),
            "relatedimages": t.array(t.proxy(renames["WWWDocInfoRelatedImagesOut"])),
            "thumbWidth": t.integer().optional(),
            "hasBadSslCertificate": t.boolean().optional(),
            "referrerUrl": t.string().optional(),
            "urlAfterRedirects": t.string().optional(),
            "ipaddr": t.string(),
            "coupledUrl": t.string().optional(),
            "thumbHeight": t.integer().optional(),
            "isSoftporn": t.boolean().optional(),
            "failsSafeSearch": t.string().optional(),
            "visualType": t.string().optional(),
            "url": t.string().optional(),
            "pornStats": t.integer().optional(),
            "imageSize": t.integer().optional(),
            "isRoboted": t.boolean().optional(),
            "shoppingOffers": t.array(
                t.proxy(renames["ImageMustangShoppingOfferOut"])
            ).optional(),
            "bodySize": t.integer().optional(),
            "urlEncoding": t.integer().optional(),
            "subindex": t.integer().optional(),
            "seenNoarchive": t.boolean().optional(),
            "lowQualityMetadescription": t.boolean(),
            "crawlTime": t.string().optional(),
            "imageLicenseInfo": t.proxy(
                renames["ImageSearchImageLicenseInfoOut"]
            ).optional(),
            "imageWidth": t.integer().optional(),
            "unionBuildTime": t.string(),
            "authMethod": t.integer().optional(),
            "foreignMetadescription": t.boolean().optional(),
            "indexingTs": t.string().optional(),
            "qualityWithoutAdjustment": t.number().optional(),
            "licensedWebImagesOptInState": t.string().optional(),
            "googleLabelData": t.string().optional(),
            "bodyTitleLanguages": t.array(t.string()),
            "isHostedImage": t.boolean().optional(),
            "docVersionId": t.string().optional(),
            "partialBoilerplateMetadescription": t.boolean(),
            "badMetadescription": t.boolean().optional(),
            "ip": t.integer().optional(),
            "imageHeight": t.integer().optional(),
            "fuzzyMetadescription": t.boolean(),
            "contentType": t.string().optional(),
            "cropData": t.integer().optional(),
            "colorDetectionResult": t.integer().optional(),
            "coupledUrlEncoding": t.integer(),
            "title": t.string().optional(),
            "imagePublisher": t.string(),
            "additionalSafesearchStats": t.array(t.integer()).optional(),
            "isPorn": t.boolean().optional(),
            "rootpageDuplicateMetadescription": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWDocInfoOut"])
    types["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodIn"] = t.struct(
        {
            "periodEndMinutes": t.integer().optional(),
            "periodStartMinutes": t.integer().optional(),
            "dayOfWeek": t.integer().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodIn"])
    types["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodOut"] = t.struct(
        {
            "periodEndMinutes": t.integer().optional(),
            "periodStartMinutes": t.integer().optional(),
            "dayOfWeek": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodOut"])
    types["QualityActionsAppUnderstandingCategoryIn"] = t.struct(
        {"category": t.string(), "confidence": t.number()}
    ).named(renames["QualityActionsAppUnderstandingCategoryIn"])
    types["QualityActionsAppUnderstandingCategoryOut"] = t.struct(
        {
            "category": t.string(),
            "confidence": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsAppUnderstandingCategoryOut"])
    types["IndexingDocjoinerServingTimeClusterIdsIn"] = t.struct(
        {
            "clusterId": t.array(
                t.proxy(renames["IndexingDocjoinerServingTimeClusterIdIn"])
            ).optional()
        }
    ).named(renames["IndexingDocjoinerServingTimeClusterIdsIn"])
    types["IndexingDocjoinerServingTimeClusterIdsOut"] = t.struct(
        {
            "clusterId": t.array(
                t.proxy(renames["IndexingDocjoinerServingTimeClusterIdOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerServingTimeClusterIdsOut"])
    types["SocialGraphApiProtoSearchProfileWorkplaceIn"] = t.struct(
        {
            "startTime": t.proxy(renames["GoogleTypeDateIn"]),
            "endTime": t.proxy(renames["GoogleTypeDateIn"]),
            "company": t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"]),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileWorkplaceIn"])
    types["SocialGraphApiProtoSearchProfileWorkplaceOut"] = t.struct(
        {
            "startTime": t.proxy(renames["GoogleTypeDateOut"]),
            "endTime": t.proxy(renames["GoogleTypeDateOut"]),
            "company": t.proxy(renames["SocialGraphApiProtoSearchProfileEntityOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileWorkplaceOut"])
    types["AppsPeopleOzExternalMergedpeopleapiLanguageIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLanguageIn"])
    types["AppsPeopleOzExternalMergedpeopleapiLanguageOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLanguageOut"])
    types["IndexingSignalAggregatorUrlPatternSignalsIn"] = t.struct(
        {
            "pagerankScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreIn"]
            ),
            "sccData": t.proxy(renames["IndexingSignalAggregatorSccDataIn"]),
            "regexpPatternScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreIn"]
            ),
            "coverage": t.proxy(
                renames["IndexingSignalAggregatorAgeWeightedCoverageDataIn"]
            ),
            "priorSignal": t.array(
                t.proxy(
                    renames["IndexingSignalAggregatorUrlPatternSignalsPriorSignalIn"]
                )
            ),
            "patternScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreIn"]
            ),
        }
    ).named(renames["IndexingSignalAggregatorUrlPatternSignalsIn"])
    types["IndexingSignalAggregatorUrlPatternSignalsOut"] = t.struct(
        {
            "pagerankScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreOut"]
            ),
            "sccData": t.proxy(renames["IndexingSignalAggregatorSccDataOut"]),
            "regexpPatternScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreOut"]
            ),
            "coverage": t.proxy(
                renames["IndexingSignalAggregatorAgeWeightedCoverageDataOut"]
            ),
            "priorSignal": t.array(
                t.proxy(
                    renames["IndexingSignalAggregatorUrlPatternSignalsPriorSignalOut"]
                )
            ),
            "patternScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorUrlPatternSignalsOut"])
    types["RepositoryWebrefProcessorCounterIn"] = t.struct(
        {"value": t.integer(), "name": t.string()}
    ).named(renames["RepositoryWebrefProcessorCounterIn"])
    types["RepositoryWebrefProcessorCounterOut"] = t.struct(
        {
            "value": t.integer(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefProcessorCounterOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAddressIn"] = t.struct(
        {
            "streetAddress": t.string(),
            "formattedType": t.string().optional(),
            "poBox": t.string(),
            "region": t.string(),
            "postalCode": t.string(),
            "locality": t.string(),
            "formatted": t.string(),
            "pointSpec": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPointSpecIn"]
            ),
            "country": t.string(),
            "extendedAddress": t.string(),
            "encodedPlaceId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "countryCode": t.string(),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAddressIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAddressOut"] = t.struct(
        {
            "streetAddress": t.string(),
            "formattedType": t.string().optional(),
            "poBox": t.string(),
            "region": t.string(),
            "postalCode": t.string(),
            "locality": t.string(),
            "formatted": t.string(),
            "pointSpec": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPointSpecOut"]
            ),
            "country": t.string(),
            "extendedAddress": t.string(),
            "encodedPlaceId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "countryCode": t.string(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAddressOut"])
    types["ImageRegionsImageRegionIn"] = t.struct(
        {
            "isProduct": t.boolean().optional(),
            "renderType": t.string(),
            "labelGroup": t.proxy(
                renames["ImageUnderstandingIndexingLabelGroupIn"]
            ).optional(),
            "boundingBox": t.proxy(
                renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxIn"]
            ).optional(),
            "labelVersion": t.string().optional(),
            "primaryLabel": t.proxy(
                renames["ImageUnderstandingIndexingLabelIn"]
            ).optional(),
            "starburstV4": t.proxy(
                renames["ImageUnderstandingIndexingFeatureIn"]
            ).optional(),
            "knnScore": t.number().optional(),
            "boundingBoxScore": t.number().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["ImageRegionsImageRegionIn"])
    types["ImageRegionsImageRegionOut"] = t.struct(
        {
            "isProduct": t.boolean().optional(),
            "renderType": t.string(),
            "labelGroup": t.proxy(
                renames["ImageUnderstandingIndexingLabelGroupOut"]
            ).optional(),
            "boundingBox": t.proxy(
                renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxOut"]
            ).optional(),
            "labelVersion": t.string().optional(),
            "primaryLabel": t.proxy(
                renames["ImageUnderstandingIndexingLabelOut"]
            ).optional(),
            "starburstV4": t.proxy(
                renames["ImageUnderstandingIndexingFeatureOut"]
            ).optional(),
            "knnScore": t.number().optional(),
            "boundingBoxScore": t.number().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRegionsImageRegionOut"])
    types["ImageRepositoryShoppingProductInformationProductInformationIn"] = t.struct(
        {
            "productLocation": t.proxy(
                renames["ImageRepositoryShoppingProductInformationBoundingBoxIn"]
            ).optional(),
            "tokenGroups": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupIn"
                    ]
                )
            ),
            "clusterIds": t.array(t.integer()).optional(),
            "featureType": t.string().optional(),
            "embedding": t.string().optional(),
            "entities": t.array(
                t.proxy(renames["ImageRepositoryShoppingProductInformationEntityIn"])
            ).optional(),
            "categoryId": t.array(t.integer()).optional(),
            "detectionScore": t.number().optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationProductInformationIn"])
    types["ImageRepositoryShoppingProductInformationProductInformationOut"] = t.struct(
        {
            "productLocation": t.proxy(
                renames["ImageRepositoryShoppingProductInformationBoundingBoxOut"]
            ).optional(),
            "tokenGroups": t.array(
                t.proxy(
                    renames[
                        "ImageRepositoryShoppingProductInformationProductInformationTokenGroupOut"
                    ]
                )
            ),
            "clusterIds": t.array(t.integer()).optional(),
            "featureType": t.string().optional(),
            "embedding": t.string().optional(),
            "entities": t.array(
                t.proxy(renames["ImageRepositoryShoppingProductInformationEntityOut"])
            ).optional(),
            "categoryId": t.array(t.integer()).optional(),
            "detectionScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationProductInformationOut"])
    types["KnowledgeGraphTripleIn"] = t.struct(
        {
            "isNegation": t.boolean().optional(),
            "sub": t.string().optional(),
            "obj": t.proxy(renames["KnowledgeGraphTripleObjIn"]).optional(),
            "provenance": t.array(t.proxy(renames["KnowledgeGraphTripleProvenanceIn"])),
            "pred": t.string().optional(),
            "qualifierSets": t.array(
                t.proxy(renames["KnowledgeGraphQualifierSetIn"])
            ).optional(),
        }
    ).named(renames["KnowledgeGraphTripleIn"])
    types["KnowledgeGraphTripleOut"] = t.struct(
        {
            "isNegation": t.boolean().optional(),
            "sub": t.string().optional(),
            "obj": t.proxy(renames["KnowledgeGraphTripleObjOut"]).optional(),
            "provenance": t.array(
                t.proxy(renames["KnowledgeGraphTripleProvenanceOut"])
            ),
            "pred": t.string().optional(),
            "qualifierSets": t.array(
                t.proxy(renames["KnowledgeGraphQualifierSetOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphTripleOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataIn"
    ] = t.struct({"routineId": t.string().optional()}).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataIn"
        ]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataOut"
    ] = t.struct(
        {
            "routineId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadataOut"
        ]
    )
    types["KnowledgeAnswersSemanticTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "includesContainingIntent": t.boolean().optional(),
            "nameRemodelings": t.array(
                t.proxy(renames["NlpMeaningSemanticTypeNameMeaningRemodelingsIn"])
            ).optional(),
            "allowAll": t.boolean().optional(),
            "name": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersSemanticTypeIn"])
    types["KnowledgeAnswersSemanticTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "includesContainingIntent": t.boolean().optional(),
            "nameRemodelings": t.array(
                t.proxy(renames["NlpMeaningSemanticTypeNameMeaningRemodelingsOut"])
            ).optional(),
            "allowAll": t.boolean().optional(),
            "name": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSemanticTypeOut"])
    types["ImageRegionsImageRegionsIn"] = t.struct(
        {
            "hasNavboost": t.boolean().optional(),
            "has300kThumb": t.boolean().optional(),
            "pedoScore": t.number().optional(),
            "isIuInappropriate": t.boolean().optional(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdIn"]).optional(),
            "precomputedRestricts": t.proxy(
                renames["PrecomputedRestrictsIn"]
            ).optional(),
            "region": t.array(t.proxy(renames["ImageRegionsImageRegionIn"])).optional(),
            "finalPornScore": t.number().optional(),
            "finalViolenceScore": t.number().optional(),
            "racyScore": t.number().optional(),
        }
    ).named(renames["ImageRegionsImageRegionsIn"])
    types["ImageRegionsImageRegionsOut"] = t.struct(
        {
            "hasNavboost": t.boolean().optional(),
            "has300kThumb": t.boolean().optional(),
            "pedoScore": t.number().optional(),
            "isIuInappropriate": t.boolean().optional(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdOut"]).optional(),
            "precomputedRestricts": t.proxy(
                renames["PrecomputedRestrictsOut"]
            ).optional(),
            "region": t.array(
                t.proxy(renames["ImageRegionsImageRegionOut"])
            ).optional(),
            "finalPornScore": t.number().optional(),
            "finalViolenceScore": t.number().optional(),
            "racyScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRegionsImageRegionsOut"])
    types["NlpSaftMorphologyIn"] = t.struct(
        {"attrValue": t.array(t.string()).optional()}
    ).named(renames["NlpSaftMorphologyIn"])
    types["NlpSaftMorphologyOut"] = t.struct(
        {
            "attrValue": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftMorphologyOut"])
    types["QualityNsrExperimentalNsrTeamScoringSignalIn"] = t.struct(
        {
            "versionId": t.integer(),
            "valueInt32": t.integer(),
            "valueBool": t.boolean(),
            "valueFloat": t.number(),
            "valueDouble": t.number(),
            "valueUint32": t.integer(),
        }
    ).named(renames["QualityNsrExperimentalNsrTeamScoringSignalIn"])
    types["QualityNsrExperimentalNsrTeamScoringSignalOut"] = t.struct(
        {
            "versionId": t.integer(),
            "valueInt32": t.integer(),
            "valueBool": t.boolean(),
            "valueFloat": t.number(),
            "valueDouble": t.number(),
            "valueUint32": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrExperimentalNsrTeamScoringSignalOut"])
    types["AssistantApiSettingsTetheredInfoIn"] = t.struct(
        {"primaryHostDeviceId": t.string().optional()}
    ).named(renames["AssistantApiSettingsTetheredInfoIn"])
    types["AssistantApiSettingsTetheredInfoOut"] = t.struct(
        {
            "primaryHostDeviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsTetheredInfoOut"])
    types["SocialGraphApiProtoRelativeScaleIn"] = t.struct(
        {"x": t.number(), "y": t.number()}
    ).named(renames["SocialGraphApiProtoRelativeScaleIn"])
    types["SocialGraphApiProtoRelativeScaleOut"] = t.struct(
        {
            "x": t.number(),
            "y": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoRelativeScaleOut"])
    types["SocialGraphApiProtoContactMutationContextIn"] = t.struct(
        {
            "timestamp": t.string().optional(),
            "source": t.string().optional(),
            "androidDeviceInfo": t.proxy(
                renames["SocialGraphApiProtoAndroidDeviceInfoIn"]
            ).optional(),
            "thirdPartyInfo": t.proxy(
                renames["SocialGraphApiProtoThirdPartyInfoIn"]
            ).optional(),
            "hostAppInfo": t.proxy(
                renames["SocialGraphApiProtoHostAppInfoIn"]
            ).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactMutationContextIn"])
    types["SocialGraphApiProtoContactMutationContextOut"] = t.struct(
        {
            "timestamp": t.string().optional(),
            "source": t.string().optional(),
            "androidDeviceInfo": t.proxy(
                renames["SocialGraphApiProtoAndroidDeviceInfoOut"]
            ).optional(),
            "thirdPartyInfo": t.proxy(
                renames["SocialGraphApiProtoThirdPartyInfoOut"]
            ).optional(),
            "hostAppInfo": t.proxy(
                renames["SocialGraphApiProtoHostAppInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactMutationContextOut"])
    types["NlpSemanticParsingModelsCommunicationPhoneTypeIn"] = t.struct(
        {
            "originalText": t.string().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "rawText": t.string().optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "normalizedText": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationPhoneTypeIn"])
    types["NlpSemanticParsingModelsCommunicationPhoneTypeOut"] = t.struct(
        {
            "originalText": t.string().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "rawText": t.string().optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "normalizedText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsCommunicationPhoneTypeOut"])
    types["SecurityCredentialsPrincipalProtoIn"] = t.struct(
        {
            "gaiaGroup": t.proxy(
                renames["SecurityCredentialsGaiaGroupProtoIn"]
            ).optional(),
            "simpleSecretHolder": t.proxy(
                renames["SecurityCredentialsSimpleSecretHolderProtoIn"]
            ).optional(),
            "mdbUser": t.proxy(renames["SecurityCredentialsMdbUserProtoIn"]).optional(),
            "oauthConsumer": t.proxy(
                renames["SecurityCredentialsOAuthConsumerProtoIn"]
            ).optional(),
            "ldapGroup": t.proxy(
                renames["SecurityCredentialsLdapGroupProtoIn"]
            ).optional(),
            "capTokenHolder": t.proxy(
                renames["SecurityCredentialsCapTokenHolderProtoIn"]
            ).optional(),
            "circle": t.proxy(renames["SecurityCredentialsCircleProtoIn"]).optional(),
            "signingKeyPossessor": t.proxy(
                renames["SecurityCredentialsSigningKeyPossessorProtoIn"]
            ).optional(),
            "rbacSubject": t.proxy(
                renames["SecurityCredentialsRbacSubjectProtoIn"]
            ).optional(),
            "emailOwner": t.proxy(
                renames["SecurityCredentialsEmailOwnerProtoIn"]
            ).optional(),
            "cloudPrincipal": t.proxy(
                renames["SecurityCredentialsCloudPrincipalProtoIn"]
            ).optional(),
            "ldapUser": t.proxy(
                renames["SecurityCredentialsLdapUserProtoIn"]
            ).optional(),
            "gaiaUser": t.proxy(
                renames["SecurityCredentialsGaiaUserProtoIn"]
            ).optional(),
            "host": t.proxy(renames["SecurityCredentialsHostProtoIn"]).optional(),
            "resourceRole": t.proxy(
                renames["SecurityCredentialsResourceRoleProtoIn"]
            ).optional(),
            "mdbGroup": t.proxy(
                renames["SecurityCredentialsMdbGroupProtoIn"]
            ).optional(),
            "chat": t.proxy(renames["SecurityCredentialsChatProtoIn"]).optional(),
            "postiniUser": t.proxy(
                renames["SecurityCredentialsPostiniUserProtoIn"]
            ).optional(),
            "youtubeUser": t.proxy(
                renames["SecurityCredentialsYoutubeUserProtoIn"]
            ).optional(),
            "zwiebackSession": t.proxy(
                renames["SecurityCredentialsZwiebackSessionProtoIn"]
            ).optional(),
            "square": t.proxy(renames["SecurityCredentialsSquareProtoIn"]).optional(),
            "rbacRole": t.proxy(
                renames["SecurityCredentialsRbacRoleProtoIn"]
            ).optional(),
            "event": t.proxy(renames["SecurityCredentialsEventProtoIn"]).optional(),
            "socialGraphNode": t.proxy(
                renames["SecurityCredentialsSocialGraphNodeProtoIn"]
            ).optional(),
            "scope": t.string().optional(),
            "allAuthenticatedUsers": t.proxy(
                renames["SecurityCredentialsAllAuthenticatedUsersProtoIn"]
            ).optional(),
            "contactGroup": t.proxy(
                renames["SecurityCredentialsContactGroupProtoIn"]
            ).optional(),
        }
    ).named(renames["SecurityCredentialsPrincipalProtoIn"])
    types["SecurityCredentialsPrincipalProtoOut"] = t.struct(
        {
            "gaiaGroup": t.proxy(
                renames["SecurityCredentialsGaiaGroupProtoOut"]
            ).optional(),
            "simpleSecretHolder": t.proxy(
                renames["SecurityCredentialsSimpleSecretHolderProtoOut"]
            ).optional(),
            "mdbUser": t.proxy(
                renames["SecurityCredentialsMdbUserProtoOut"]
            ).optional(),
            "oauthConsumer": t.proxy(
                renames["SecurityCredentialsOAuthConsumerProtoOut"]
            ).optional(),
            "ldapGroup": t.proxy(
                renames["SecurityCredentialsLdapGroupProtoOut"]
            ).optional(),
            "capTokenHolder": t.proxy(
                renames["SecurityCredentialsCapTokenHolderProtoOut"]
            ).optional(),
            "circle": t.proxy(renames["SecurityCredentialsCircleProtoOut"]).optional(),
            "signingKeyPossessor": t.proxy(
                renames["SecurityCredentialsSigningKeyPossessorProtoOut"]
            ).optional(),
            "rbacSubject": t.proxy(
                renames["SecurityCredentialsRbacSubjectProtoOut"]
            ).optional(),
            "emailOwner": t.proxy(
                renames["SecurityCredentialsEmailOwnerProtoOut"]
            ).optional(),
            "cloudPrincipal": t.proxy(
                renames["SecurityCredentialsCloudPrincipalProtoOut"]
            ).optional(),
            "ldapUser": t.proxy(
                renames["SecurityCredentialsLdapUserProtoOut"]
            ).optional(),
            "gaiaUser": t.proxy(
                renames["SecurityCredentialsGaiaUserProtoOut"]
            ).optional(),
            "host": t.proxy(renames["SecurityCredentialsHostProtoOut"]).optional(),
            "resourceRole": t.proxy(
                renames["SecurityCredentialsResourceRoleProtoOut"]
            ).optional(),
            "mdbGroup": t.proxy(
                renames["SecurityCredentialsMdbGroupProtoOut"]
            ).optional(),
            "chat": t.proxy(renames["SecurityCredentialsChatProtoOut"]).optional(),
            "postiniUser": t.proxy(
                renames["SecurityCredentialsPostiniUserProtoOut"]
            ).optional(),
            "youtubeUser": t.proxy(
                renames["SecurityCredentialsYoutubeUserProtoOut"]
            ).optional(),
            "zwiebackSession": t.proxy(
                renames["SecurityCredentialsZwiebackSessionProtoOut"]
            ).optional(),
            "square": t.proxy(renames["SecurityCredentialsSquareProtoOut"]).optional(),
            "rbacRole": t.proxy(
                renames["SecurityCredentialsRbacRoleProtoOut"]
            ).optional(),
            "event": t.proxy(renames["SecurityCredentialsEventProtoOut"]).optional(),
            "socialGraphNode": t.proxy(
                renames["SecurityCredentialsSocialGraphNodeProtoOut"]
            ).optional(),
            "scope": t.string().optional(),
            "allAuthenticatedUsers": t.proxy(
                renames["SecurityCredentialsAllAuthenticatedUsersProtoOut"]
            ).optional(),
            "contactGroup": t.proxy(
                renames["SecurityCredentialsContactGroupProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsPrincipalProtoOut"])
    types["ResearchScamCoscamRestrictDefinitionIn"] = t.struct(
        {
            "disjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamDisjunctionIn"])
            ).optional(),
            "subsKey": t.string().optional(),
            "conjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamConjunctionIn"])
            ).optional(),
        }
    ).named(renames["ResearchScamCoscamRestrictDefinitionIn"])
    types["ResearchScamCoscamRestrictDefinitionOut"] = t.struct(
        {
            "disjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamDisjunctionOut"])
            ).optional(),
            "subsKey": t.string().optional(),
            "conjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamConjunctionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamRestrictDefinitionOut"])
    types["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureIn"] = t.struct(
        {"value": t.number(), "name": t.string()}
    ).named(renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureIn"])
    types["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureOut"] = t.struct(
        {
            "value": t.number(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureOut"])
    types["GoogleTypeDateTimeIn"] = t.struct(
        {
            "month": t.integer().optional(),
            "timeZone": t.proxy(renames["GoogleTypeTimeZoneIn"]).optional(),
            "utcOffset": t.string().optional(),
            "nanos": t.integer().optional(),
            "seconds": t.integer().optional(),
            "minutes": t.integer().optional(),
            "hours": t.integer().optional(),
            "day": t.integer().optional(),
            "year": t.integer().optional(),
        }
    ).named(renames["GoogleTypeDateTimeIn"])
    types["GoogleTypeDateTimeOut"] = t.struct(
        {
            "month": t.integer().optional(),
            "timeZone": t.proxy(renames["GoogleTypeTimeZoneOut"]).optional(),
            "utcOffset": t.string().optional(),
            "nanos": t.integer().optional(),
            "seconds": t.integer().optional(),
            "minutes": t.integer().optional(),
            "hours": t.integer().optional(),
            "day": t.integer().optional(),
            "year": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeDateTimeOut"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkIn"] = t.struct(
        {
            "targetDocData": t.proxy(
                renames[
                    "IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataIn"
                ]
            ),
            "linkData": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkIn"]
            ),
            "validationStatus": t.string(),
            "metaData": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataIn"]
            ),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkIn"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkOut"] = t.struct(
        {
            "targetDocData": t.proxy(
                renames[
                    "IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocDataOut"
                ]
            ),
            "linkData": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkLinkOut"]
            ),
            "validationStatus": t.string(),
            "metaData": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterTargetLinkMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkOut"])
    types["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsIn"] = t.struct(
        {
            "features": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureIn"
                    ]
                )
            ),
            "category": t.string().optional(),
            "score": t.number().optional(),
            "domain": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsOut"] = t.struct(
        {
            "features": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeatureOut"
                    ]
                )
            ),
            "category": t.string().optional(),
            "score": t.number().optional(),
            "domain": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiNicknameIn"] = t.struct(
        {
            "type": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiNicknameIn"])
    types["AppsPeopleOzExternalMergedpeopleapiNicknameOut"] = t.struct(
        {
            "type": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiNicknameOut"])
    types["QualityActionsNewsProviderAnnotationDataProviderIn"] = t.struct(
        {
            "providerId": t.integer().optional(),
            "locales": t.array(t.string()).optional(),
            "officialNamePronunciation": t.string().optional(),
            "score": t.number().optional(),
            "officialName": t.string().optional(),
        }
    ).named(renames["QualityActionsNewsProviderAnnotationDataProviderIn"])
    types["QualityActionsNewsProviderAnnotationDataProviderOut"] = t.struct(
        {
            "providerId": t.integer().optional(),
            "locales": t.array(t.string()).optional(),
            "officialNamePronunciation": t.string().optional(),
            "score": t.number().optional(),
            "officialName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsNewsProviderAnnotationDataProviderOut"])
    types["WeboftrustLiveResultDocBoostDataIn"] = t.struct(
        {
            "hotTimes": t.proxy(renames["WeboftrustTimeRangeIn"]).optional(),
            "boostLevel": t.number().optional(),
        }
    ).named(renames["WeboftrustLiveResultDocBoostDataIn"])
    types["WeboftrustLiveResultDocBoostDataOut"] = t.struct(
        {
            "hotTimes": t.proxy(renames["WeboftrustTimeRangeOut"]).optional(),
            "boostLevel": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WeboftrustLiveResultDocBoostDataOut"])
    types["NlpSemanticParsingModelsMediaGenericMusicIn"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "newMusic": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "type": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaGenericMusicIn"])
    types["NlpSemanticParsingModelsMediaGenericMusicOut"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "newMusic": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaGenericMusicOut"])
    types["VideoContentSearchAnchorThumbnailIn"] = t.struct(
        {
            "servingMetadata": t.proxy(
                renames["ImageBaseThumbnailMetadataIn"]
            ).optional(),
            "thumbnailInfo": t.proxy(
                renames["VideoContentSearchAnchorThumbnailInfoIn"]
            ).optional(),
            "imagesearchDocid": t.string().optional(),
            "timestampMs": t.integer().optional(),
            "isThumbnailMissing": t.boolean().optional(),
        }
    ).named(renames["VideoContentSearchAnchorThumbnailIn"])
    types["VideoContentSearchAnchorThumbnailOut"] = t.struct(
        {
            "servingMetadata": t.proxy(
                renames["ImageBaseThumbnailMetadataOut"]
            ).optional(),
            "thumbnailInfo": t.proxy(
                renames["VideoContentSearchAnchorThumbnailInfoOut"]
            ).optional(),
            "imagesearchDocid": t.string().optional(),
            "timestampMs": t.integer().optional(),
            "isThumbnailMissing": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorThumbnailOut"])
    types["KnowledgeAnswersPolarQuestionTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersPolarQuestionTypeIn"])
    types["KnowledgeAnswersPolarQuestionTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersPolarQuestionTypeOut"])
    types["GoogleCloudContentwarehouseV1ListRuleSetsResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "ruleSets": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListRuleSetsResponseIn"])
    types["GoogleCloudContentwarehouseV1ListRuleSetsResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "ruleSets": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListRuleSetsResponseOut"])
    types["GoogleCloudDocumentaiV1DocumentProvenanceParentIn"] = t.struct(
        {
            "revision": t.integer().optional(),
            "index": t.integer().optional(),
            "id": t.integer().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentProvenanceParentIn"])
    types["GoogleCloudDocumentaiV1DocumentProvenanceParentOut"] = t.struct(
        {
            "revision": t.integer().optional(),
            "index": t.integer().optional(),
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentProvenanceParentOut"])
    types["NlpSaftLabeledSpansIn"] = t.struct(
        {"labeledSpan": t.array(t.proxy(renames["NlpSaftLabeledSpanIn"]))}
    ).named(renames["NlpSaftLabeledSpansIn"])
    types["NlpSaftLabeledSpansOut"] = t.struct(
        {
            "labeledSpan": t.array(t.proxy(renames["NlpSaftLabeledSpanOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftLabeledSpansOut"])
    types["ToolBarPerDocDataIn"] = t.struct(
        {"VisitorsPastDay": t.integer().optional()}
    ).named(renames["ToolBarPerDocDataIn"])
    types["ToolBarPerDocDataOut"] = t.struct(
        {
            "VisitorsPastDay": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ToolBarPerDocDataOut"])
    types["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsIn"] = t.struct(
        {"provenance": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsOut"] = t.struct(
        {
            "provenance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryOnDeviceAnnotationSignalsOut"])
    types["HtmlrenderWebkitHeadlessProtoFrameResizeEventIn"] = t.struct(
        {
            "visibleRectBeforeResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ),
            "resizeType": t.string(),
            "visibleRectAfterResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoFrameResizeEventIn"])
    types["HtmlrenderWebkitHeadlessProtoFrameResizeEventOut"] = t.struct(
        {
            "visibleRectBeforeResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ),
            "resizeType": t.string(),
            "visibleRectAfterResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoFrameResizeEventOut"])
    types["NlpSciencelitDatasetIn"] = t.struct(
        {
            "datasetMetadata": t.proxy(
                renames["ResearchScienceSearchReconciledMetadataIn"]
            ),
            "association": t.string(),
        }
    ).named(renames["NlpSciencelitDatasetIn"])
    types["NlpSciencelitDatasetOut"] = t.struct(
        {
            "datasetMetadata": t.proxy(
                renames["ResearchScienceSearchReconciledMetadataOut"]
            ),
            "association": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitDatasetOut"])
    types["AssistantApiJwnCapabilitiesIn"] = t.struct(
        {
            "supportedCompressionMode": t.array(t.string()).optional(),
            "librariesVersionMap": t.struct({"_": t.string().optional()}).optional(),
            "supportsJwn": t.boolean().optional(),
        }
    ).named(renames["AssistantApiJwnCapabilitiesIn"])
    types["AssistantApiJwnCapabilitiesOut"] = t.struct(
        {
            "supportedCompressionMode": t.array(t.string()).optional(),
            "librariesVersionMap": t.struct({"_": t.string().optional()}).optional(),
            "supportsJwn": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiJwnCapabilitiesOut"])
    types["ImageDataThumbnailIn"] = t.struct(
        {
            "height": t.integer(),
            "expirationTimestampMicros": t.string().optional(),
            "type": t.string(),
            "mimeType": t.string(),
            "size": t.integer(),
            "width": t.integer(),
        }
    ).named(renames["ImageDataThumbnailIn"])
    types["ImageDataThumbnailOut"] = t.struct(
        {
            "height": t.integer(),
            "expirationTimestampMicros": t.string().optional(),
            "type": t.string(),
            "mimeType": t.string(),
            "size": t.integer(),
            "width": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageDataThumbnailOut"])
    types["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowIn"] = t.struct(
        {"endTimestamp": t.string().optional(), "startTimestamp": t.string().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowIn"])
    types["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowOut"] = t.struct(
        {
            "endTimestamp": t.string().optional(),
            "startTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindowOut"])
    types["TitleSizeParamsIn"] = t.struct(
        {
            "muppetTitleLengthInDeciems": t.integer().optional(),
            "muppetTitleNumLines": t.integer().optional(),
        }
    ).named(renames["TitleSizeParamsIn"])
    types["TitleSizeParamsOut"] = t.struct(
        {
            "muppetTitleLengthInDeciems": t.integer().optional(),
            "muppetTitleNumLines": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TitleSizeParamsOut"])
    types["QualityCalypsoAppsUniversalAuLiveOpEventIn"] = t.struct(
        {
            "previewTimestampMillis": t.string().optional(),
            "endTimestampMillis": t.string().optional(),
            "startTimestampMillis": t.string().optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpEventIn"])
    types["QualityCalypsoAppsUniversalAuLiveOpEventOut"] = t.struct(
        {
            "previewTimestampMillis": t.string().optional(),
            "endTimestampMillis": t.string().optional(),
            "startTimestampMillis": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalAuLiveOpEventOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCircleMembershipIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "circleId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCircleMembershipIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCircleMembershipOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "circleId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCircleMembershipOut"])
    types["GeostorePriceInfoProtoIn"] = t.struct(
        {
            "status": t.proxy(renames["GeostorePriceInfoStatusIn"]).optional(),
            "priceList": t.array(
                t.proxy(renames["GeostorePriceListProtoIn"])
            ).optional(),
            "priceListUrl": t.array(
                t.proxy(renames["GeostoreUrlListProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostorePriceInfoProtoIn"])
    types["GeostorePriceInfoProtoOut"] = t.struct(
        {
            "status": t.proxy(renames["GeostorePriceInfoStatusOut"]).optional(),
            "priceList": t.array(
                t.proxy(renames["GeostorePriceListProtoOut"])
            ).optional(),
            "priceListUrl": t.array(
                t.proxy(renames["GeostoreUrlListProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceInfoProtoOut"])
    types["QualityQrewriteAccountProvenanceIn"] = t.struct(
        {
            "dataSources": t.array(t.string()),
            "googleAccount": t.proxy(
                renames["QualityQrewriteAccountProvenanceGoogleAccountIn"]
            ),
            "thirdPartyAccount": t.proxy(
                renames["QualityQrewriteAccountProvenanceThirdPartyAccountIn"]
            ).optional(),
        }
    ).named(renames["QualityQrewriteAccountProvenanceIn"])
    types["QualityQrewriteAccountProvenanceOut"] = t.struct(
        {
            "dataSources": t.array(t.string()),
            "googleAccount": t.proxy(
                renames["QualityQrewriteAccountProvenanceGoogleAccountOut"]
            ),
            "thirdPartyAccount": t.proxy(
                renames["QualityQrewriteAccountProvenanceThirdPartyAccountOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteAccountProvenanceOut"])
    types["AssistantDevicesPlatformProtoSendChatMessageCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoSendChatMessageCapabilityIn"])
    types["AssistantDevicesPlatformProtoSendChatMessageCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoSendChatMessageCapabilityOut"])
    types["GoogleCloudContentwarehouseV1MapPropertyIn"] = t.struct(
        {"fields": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1MapPropertyIn"])
    types["GoogleCloudContentwarehouseV1MapPropertyOut"] = t.struct(
        {
            "fields": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1MapPropertyOut"])
    types["GeostoreIntersectionProtoIn"] = t.struct(
        {
            "intersectionGroup": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "tollClusterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "outSegment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "segment": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
        }
    ).named(renames["GeostoreIntersectionProtoIn"])
    types["GeostoreIntersectionProtoOut"] = t.struct(
        {
            "intersectionGroup": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "tollClusterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "outSegment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "segment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreIntersectionProtoOut"])
    types["ScienceIndexSignalIn"] = t.struct(
        {
            "RemoveLink": t.boolean().optional(),
            "IndexSelectionScore": t.number().optional(),
            "HtmlTitleFp": t.string().optional(),
            "PublicationYear": t.integer().optional(),
            "PublicationDay": t.integer(),
            "Title": t.string().optional(),
            "ScholarId": t.string().optional(),
            "author": t.array(t.proxy(renames["ScienceIndexSignalAuthorIn"])),
            "NumBackwardLinks": t.integer().optional(),
            "NumVersions": t.integer(),
            "NumRelated": t.integer(),
            "VisiblePrefixTerms": t.integer().optional(),
            "PublicationMonth": t.integer(),
        }
    ).named(renames["ScienceIndexSignalIn"])
    types["ScienceIndexSignalOut"] = t.struct(
        {
            "RemoveLink": t.boolean().optional(),
            "IndexSelectionScore": t.number().optional(),
            "HtmlTitleFp": t.string().optional(),
            "PublicationYear": t.integer().optional(),
            "PublicationDay": t.integer(),
            "Title": t.string().optional(),
            "ScholarId": t.string().optional(),
            "author": t.array(t.proxy(renames["ScienceIndexSignalAuthorOut"])),
            "NumBackwardLinks": t.integer().optional(),
            "NumVersions": t.integer(),
            "NumRelated": t.integer(),
            "VisiblePrefixTerms": t.integer().optional(),
            "PublicationMonth": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceIndexSignalOut"])
    types["AssistantVerticalsHomeautomationProtoAttributesIn"] = t.struct(
        {
            "attributeProtos": t.array(
                t.proxy(renames["AssistantVerticalsHomeautomationProtoAttributeIn"])
            )
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAttributesIn"])
    types["AssistantVerticalsHomeautomationProtoAttributesOut"] = t.struct(
        {
            "attributeProtos": t.array(
                t.proxy(renames["AssistantVerticalsHomeautomationProtoAttributeOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAttributesOut"])
    types["DeepCropIndexingIn"] = t.struct({"cropBytes": t.string().optional()}).named(
        renames["DeepCropIndexingIn"]
    )
    types["DeepCropIndexingOut"] = t.struct(
        {
            "cropBytes": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DeepCropIndexingOut"])
    types["VideoStorageLoudnessDataIn"] = t.struct(
        {
            "perceptualLoudnessDb": t.number().optional(),
            "itu1770LoudnessDb": t.number().optional(),
        }
    ).named(renames["VideoStorageLoudnessDataIn"])
    types["VideoStorageLoudnessDataOut"] = t.struct(
        {
            "perceptualLoudnessDb": t.number().optional(),
            "itu1770LoudnessDb": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoStorageLoudnessDataOut"])
    types["RepositoryWebrefFprintModifierProtoIn"] = t.struct(
        {
            "namespaceType": t.string(),
            "capitalization": t.string(),
            "stemming": t.string(),
            "punctuation": t.string(),
            "style": t.string(),
            "sentence": t.string(),
            "enclosing": t.string(),
            "language": t.integer().optional(),
            "sourceType": t.string(),
            "tokenType": t.string(),
        }
    ).named(renames["RepositoryWebrefFprintModifierProtoIn"])
    types["RepositoryWebrefFprintModifierProtoOut"] = t.struct(
        {
            "namespaceType": t.string(),
            "capitalization": t.string(),
            "stemming": t.string(),
            "punctuation": t.string(),
            "style": t.string(),
            "sentence": t.string(),
            "enclosing": t.string(),
            "language": t.integer().optional(),
            "sourceType": t.string(),
            "tokenType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefFprintModifierProtoOut"])
    types["GoogleCloudContentwarehouseV1FetchAclResponseIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"]
            ).optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyIn"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FetchAclResponseIn"])
    types["GoogleCloudContentwarehouseV1FetchAclResponseOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"]
            ).optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FetchAclResponseOut"])
    types["ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoIn"] = t.struct(
        {"inferredImageSource": t.string(), "inferredImageType": t.string()}
    ).named(renames["ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoIn"])
    types["ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoOut"] = t.struct(
        {
            "inferredImageSource": t.string(),
            "inferredImageType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationInferredImageNeardupInfoOut"])
    types["ScienceCitationAlternateAbstractIn"] = t.struct(
        {
            "AbstractHtml": t.string().optional(),
            "AbstractHtmlLeftOver": t.string().optional(),
            "AbstractLanguage": t.string(),
            "AbstractDisplay": t.string(),
            "AbstractText": t.string(),
        }
    ).named(renames["ScienceCitationAlternateAbstractIn"])
    types["ScienceCitationAlternateAbstractOut"] = t.struct(
        {
            "AbstractHtml": t.string().optional(),
            "AbstractHtmlLeftOver": t.string().optional(),
            "AbstractLanguage": t.string(),
            "AbstractDisplay": t.string(),
            "AbstractText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationAlternateAbstractOut"])
    types["KnowledgeAnswersDependencyTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "unionType": t.proxy(renames["KnowledgeAnswersUnionTypeIn"]),
            "sameType": t.proxy(renames["KnowledgeAnswersSameTypeIn"]),
            "containerType": t.proxy(renames["KnowledgeAnswersContainerTypeIn"]),
            "intersectType": t.proxy(renames["KnowledgeAnswersIntersectTypeIn"]),
        }
    ).named(renames["KnowledgeAnswersDependencyTypeIn"])
    types["KnowledgeAnswersDependencyTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "unionType": t.proxy(renames["KnowledgeAnswersUnionTypeOut"]),
            "sameType": t.proxy(renames["KnowledgeAnswersSameTypeOut"]),
            "containerType": t.proxy(renames["KnowledgeAnswersContainerTypeOut"]),
            "intersectType": t.proxy(renames["KnowledgeAnswersIntersectTypeOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersDependencyTypeOut"])
    types["QualitySitemapTargetGroupIn"] = t.struct(
        {
            "twoLevelTarget": t.array(
                t.proxy(renames["QualitySitemapTwoLevelTargetIn"])
            ),
            "DEPRECATEDCountry": t.integer(),
            "topUrl": t.array(t.proxy(renames["QualitySitemapTopURLIn"])).optional(),
            "allTargetsNamedTopictagsScrollto": t.boolean().optional(),
            "language": t.integer(),
            "countryCode": t.string(),
            "breadcrumbTarget": t.proxy(renames["QualitySitemapBreadcrumbTargetIn"]),
            "coClickTarget": t.array(t.proxy(renames["QualitySitemapCoClickTargetIn"])),
            "label": t.string(),
            "scoringSignals": t.proxy(renames["QualitySitemapScoringSignalsIn"]),
            "Target": t.array(t.proxy(renames["QualitySitemapTargetIn"])),
            "allTargetsNamedAnchors": t.boolean().optional(),
            "modifiedByHostcardHandler": t.boolean(),
        }
    ).named(renames["QualitySitemapTargetGroupIn"])
    types["QualitySitemapTargetGroupOut"] = t.struct(
        {
            "twoLevelTarget": t.array(
                t.proxy(renames["QualitySitemapTwoLevelTargetOut"])
            ),
            "DEPRECATEDCountry": t.integer(),
            "topUrl": t.array(t.proxy(renames["QualitySitemapTopURLOut"])).optional(),
            "allTargetsNamedTopictagsScrollto": t.boolean().optional(),
            "language": t.integer(),
            "countryCode": t.string(),
            "breadcrumbTarget": t.proxy(renames["QualitySitemapBreadcrumbTargetOut"]),
            "coClickTarget": t.array(
                t.proxy(renames["QualitySitemapCoClickTargetOut"])
            ),
            "label": t.string(),
            "scoringSignals": t.proxy(renames["QualitySitemapScoringSignalsOut"]),
            "Target": t.array(t.proxy(renames["QualitySitemapTargetOut"])),
            "allTargetsNamedAnchors": t.boolean().optional(),
            "modifiedByHostcardHandler": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapTargetGroupOut"])
    types["RepositoryWebrefProcessorTimingIn"] = t.struct(
        {
            "cpuInstructions": t.string().optional(),
            "processorTimings": t.array(
                t.proxy(renames["RepositoryWebrefProcessorTimingIn"])
            ).optional(),
            "wallTimeNs": t.string().optional(),
            "processorCounters": t.array(
                t.proxy(renames["RepositoryWebrefProcessorCounterIn"])
            ).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefProcessorTimingIn"])
    types["RepositoryWebrefProcessorTimingOut"] = t.struct(
        {
            "cpuInstructions": t.string().optional(),
            "processorTimings": t.array(
                t.proxy(renames["RepositoryWebrefProcessorTimingOut"])
            ).optional(),
            "wallTimeNs": t.string().optional(),
            "processorCounters": t.array(
                t.proxy(renames["RepositoryWebrefProcessorCounterOut"])
            ).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefProcessorTimingOut"])
    types["GoogleInternalCommunicationsInstantmessagingV1IdIn"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "type": t.string().optional(),
            "locationHint": t.proxy(
                renames["GoogleInternalCommunicationsInstantmessagingV1LocationHintIn"]
            ).optional(),
            "id": t.string().optional(),
            "app": t.string().optional(),
            "routingInfoToken": t.string().optional(),
        }
    ).named(renames["GoogleInternalCommunicationsInstantmessagingV1IdIn"])
    types["GoogleInternalCommunicationsInstantmessagingV1IdOut"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "type": t.string().optional(),
            "locationHint": t.proxy(
                renames["GoogleInternalCommunicationsInstantmessagingV1LocationHintOut"]
            ).optional(),
            "id": t.string().optional(),
            "app": t.string().optional(),
            "routingInfoToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalCommunicationsInstantmessagingV1IdOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoIn"
    ] = t.struct(
        {
            "domainBadge": t.array(t.string()).optional(),
            "domainName": t.array(t.string()).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoOut"
    ] = t.struct(
        {
            "domainBadge": t.array(t.string()).optional(),
            "domainName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoOut"]
    )
    types["SocialGraphApiProtoPartialNameOptionsNamePartSpecIn"] = t.struct(
        {
            "truncationIndicator": t.string().optional(),
            "hideAll": t.boolean().optional(),
            "showInitial": t.boolean().optional(),
            "showFirstNChars": t.integer().optional(),
            "showAll": t.boolean().optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecIn"])
    types["SocialGraphApiProtoPartialNameOptionsNamePartSpecOut"] = t.struct(
        {
            "truncationIndicator": t.string().optional(),
            "hideAll": t.boolean().optional(),
            "showInitial": t.boolean().optional(),
            "showFirstNChars": t.integer().optional(),
            "showAll": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsNamePartSpecOut"])
    types["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoIn"] = t.struct(
        {"anchorsDropped": t.string(), "text": t.string(), "domain": t.string()}
    ).named(renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoIn"])
    types["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoOut"] = t.struct(
        {
            "anchorsDropped": t.string(),
            "text": t.string(),
            "domain": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoOut"])
    types["NlpSemanticParsingDatetimeDurationIn"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "modifier": t.string().optional(),
            "span": t.proxy(renames["NlpSemanticParsingDatetimeSpanIn"]).optional(),
            "quantity": t.proxy(renames["NlpSemanticParsingDatetimeQuantityIn"]),
        }
    ).named(renames["NlpSemanticParsingDatetimeDurationIn"])
    types["NlpSemanticParsingDatetimeDurationOut"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "modifier": t.string().optional(),
            "span": t.proxy(renames["NlpSemanticParsingDatetimeSpanOut"]).optional(),
            "quantity": t.proxy(renames["NlpSemanticParsingDatetimeQuantityOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeDurationOut"])
    types["WWWDocInfoRelatedImagesIn"] = t.struct(
        {
            "imageDocid": t.string(),
            "thumbType": t.string(),
            "thumbWidth": t.integer(),
            "thumbHeight": t.integer(),
        }
    ).named(renames["WWWDocInfoRelatedImagesIn"])
    types["WWWDocInfoRelatedImagesOut"] = t.struct(
        {
            "imageDocid": t.string(),
            "thumbType": t.string(),
            "thumbWidth": t.integer(),
            "thumbHeight": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWDocInfoRelatedImagesOut"])
    types["ScienceCitationIn"] = t.struct(
        {
            "Editor": t.array(t.string()),
            "PubvenueID": t.string().optional(),
            "ConferenceId": t.string().optional(),
            "Number": t.string().optional(),
            "OnlineDay": t.integer(),
            "PatentOffice": t.integer().optional(),
            "UnmatchedEmailAddr": t.array(t.string()).optional(),
            "Series": t.string(),
            "LCCN": t.string().optional(),
            "AbstractHtml": t.string().optional(),
            "NumForwardLinks": t.integer().optional(),
            "ISSNVariant": t.array(t.string()),
            "CrawledDocid": t.string().optional(),
            "ISSN": t.string(),
            "NumVersions": t.integer().optional(),
            "accessurl": t.array(t.proxy(renames["ScienceCitationAccessURLIn"])),
            "DblpId": t.string(),
            "PatentClassification": t.array(t.string()).optional(),
            "DOI": t.string().optional(),
            "ConferenceNumber": t.integer().optional(),
            "AbstractCitationSource": t.integer().optional(),
            "Anchors": t.array(t.proxy(renames["ScienceCitationAnchorIn"])).optional(),
            "ClusterDiscoveryDate": t.string().optional(),
            "Volume": t.integer(),
            "Keywords": t.array(t.string()),
            "NumRelated2": t.integer().optional(),
            "FileCreationYear": t.integer().optional(),
            "FileCreationMonth": t.integer().optional(),
            "AuthorMetatagLeftOver": t.string(),
            "AbstractDisplay": t.string(),
            "AuthorListHasEtAl": t.boolean().optional(),
            "PMCID": t.string(),
            "PublisherAddress": t.string().optional(),
            "NumBackwardLinksFromLegal": t.integer().optional(),
            "BaseGlobalID": t.string().optional(),
            "DEPRECATEDMetadataSourceFile": t.string(),
            "WOSID": t.string().optional(),
            "TranslatedAuthorListHasEtAl": t.boolean().optional(),
            "TitleHtmlLeftOver": t.string().optional(),
            "PublisherId": t.string(),
            "Note": t.string().optional(),
            "subject": t.array(t.proxy(renames["ScienceCitationSubjectIn"])),
            "translatedauthor": t.array(
                t.proxy(renames["ScienceCitationTranslatedAuthorIn"])
            ),
            "FileCreationDay": t.integer(),
            "ClearedReason": t.string(),
            "TitleHtml": t.string().optional(),
            "AbstractSource": t.string(),
            "NumBackwardLinksInWoS": t.integer().optional(),
            "DspaceID": t.string().optional(),
            "AbstractText": t.string(),
            "WorldViewable": t.boolean().optional(),
            "PublicationVenue": t.string().optional(),
            "Edition": t.string(),
            "Language": t.string(),
            "SICI": t.string(),
            "NumSectionRefs": t.integer().optional(),
            "ISBNVariant": t.array(t.string()),
            "IncrementalExpected": t.boolean().optional(),
            "NumRelated3": t.integer().optional(),
            "LegalCitation": t.proxy(renames["LegalCitationIn"]).optional(),
            "DEPRECATEDPublisherDisplayName": t.string().optional(),
            "AlternateVersionID": t.string().optional(),
            "AbstractLanguage": t.string(),
            "PublisherOrg": t.string().optional(),
            "CitationSourceUrl": t.string().optional(),
            "BaseLocalID": t.string().optional(),
            "JOI": t.string(),
            "ReviewTypeReason": t.integer().optional(),
            "ISBN": t.string(),
            "PublicationMonth": t.integer().optional(),
            "PatentPublicationNumber": t.string(),
            "Chapter": t.string(),
            "alternatetitle": t.array(
                t.proxy(renames["ScienceCitationAlternateTitleIn"])
            ),
            "Pages": t.string().optional(),
            "alternateabstract": t.array(
                t.proxy(renames["ScienceCitationAlternateAbstractIn"])
            ),
            "PublicationDay": t.integer().optional(),
            "Title": t.string(),
            "OnlineMonth": t.integer().optional(),
            "PMID": t.string().optional(),
            "NumRelated": t.integer().optional(),
            "BorrowedFields": t.integer().optional(),
            "BorrowedAuthors": t.integer().optional(),
            "ArxivSection": t.string().optional(),
            "unioncatalog": t.array(t.proxy(renames["ScienceCitationUnionCatalogIn"])),
            "AbstractHtmlLeftOver": t.string().optional(),
            "NumBackwardLinks": t.integer().optional(),
            "PatentCountry": t.array(t.string()).optional(),
            "NumGoodEmbeddedRefs": t.integer().optional(),
            "CitationSrc": t.string().optional(),
            "CitationSource": t.integer().optional(),
            "PublicationVenueVariant": t.array(t.string()),
            "Type": t.integer().optional(),
            "LevelOfDiscussion": t.integer().optional(),
            "author": t.array(t.proxy(renames["ScienceCitationAuthorIn"])),
            "category": t.array(t.proxy(renames["ScienceCitationCategoryIn"])),
            "DocumentID": t.string().optional(),
            "ParseSource": t.integer(),
            "downloadurl": t.array(t.proxy(renames["ScienceCitationDownloadURLIn"])),
            "OtherID": t.string().optional(),
            "UnmatchedInstitution": t.array(t.string()).optional(),
            "PatentNumber": t.string().optional(),
            "funding": t.array(t.proxy(renames["ScienceCitationFundingIn"])),
            "PatentApplicationNumber": t.string().optional(),
            "OnlineYear": t.integer(),
            "NumHostedPages": t.integer().optional(),
            "referencediscussion": t.array(
                t.proxy(renames["ScienceCitationReferenceDiscussionIn"])
            ),
            "PublicationYear": t.integer().optional(),
            "NumKeyQuotes": t.integer().optional(),
            "VersionID": t.string().optional(),
        }
    ).named(renames["ScienceCitationIn"])
    types["ScienceCitationOut"] = t.struct(
        {
            "Editor": t.array(t.string()),
            "PubvenueID": t.string().optional(),
            "ConferenceId": t.string().optional(),
            "Number": t.string().optional(),
            "OnlineDay": t.integer(),
            "PatentOffice": t.integer().optional(),
            "UnmatchedEmailAddr": t.array(t.string()).optional(),
            "Series": t.string(),
            "LCCN": t.string().optional(),
            "AbstractHtml": t.string().optional(),
            "NumForwardLinks": t.integer().optional(),
            "ISSNVariant": t.array(t.string()),
            "CrawledDocid": t.string().optional(),
            "ISSN": t.string(),
            "NumVersions": t.integer().optional(),
            "accessurl": t.array(t.proxy(renames["ScienceCitationAccessURLOut"])),
            "DblpId": t.string(),
            "PatentClassification": t.array(t.string()).optional(),
            "DOI": t.string().optional(),
            "ConferenceNumber": t.integer().optional(),
            "AbstractCitationSource": t.integer().optional(),
            "Anchors": t.array(t.proxy(renames["ScienceCitationAnchorOut"])).optional(),
            "ClusterDiscoveryDate": t.string().optional(),
            "Volume": t.integer(),
            "Keywords": t.array(t.string()),
            "NumRelated2": t.integer().optional(),
            "FileCreationYear": t.integer().optional(),
            "FileCreationMonth": t.integer().optional(),
            "AuthorMetatagLeftOver": t.string(),
            "AbstractDisplay": t.string(),
            "AuthorListHasEtAl": t.boolean().optional(),
            "PMCID": t.string(),
            "PublisherAddress": t.string().optional(),
            "NumBackwardLinksFromLegal": t.integer().optional(),
            "BaseGlobalID": t.string().optional(),
            "DEPRECATEDMetadataSourceFile": t.string(),
            "WOSID": t.string().optional(),
            "TranslatedAuthorListHasEtAl": t.boolean().optional(),
            "TitleHtmlLeftOver": t.string().optional(),
            "PublisherId": t.string(),
            "Note": t.string().optional(),
            "subject": t.array(t.proxy(renames["ScienceCitationSubjectOut"])),
            "translatedauthor": t.array(
                t.proxy(renames["ScienceCitationTranslatedAuthorOut"])
            ),
            "FileCreationDay": t.integer(),
            "ClearedReason": t.string(),
            "TitleHtml": t.string().optional(),
            "AbstractSource": t.string(),
            "NumBackwardLinksInWoS": t.integer().optional(),
            "DspaceID": t.string().optional(),
            "AbstractText": t.string(),
            "WorldViewable": t.boolean().optional(),
            "PublicationVenue": t.string().optional(),
            "Edition": t.string(),
            "Language": t.string(),
            "SICI": t.string(),
            "NumSectionRefs": t.integer().optional(),
            "ISBNVariant": t.array(t.string()),
            "IncrementalExpected": t.boolean().optional(),
            "NumRelated3": t.integer().optional(),
            "LegalCitation": t.proxy(renames["LegalCitationOut"]).optional(),
            "DEPRECATEDPublisherDisplayName": t.string().optional(),
            "AlternateVersionID": t.string().optional(),
            "AbstractLanguage": t.string(),
            "PublisherOrg": t.string().optional(),
            "CitationSourceUrl": t.string().optional(),
            "BaseLocalID": t.string().optional(),
            "JOI": t.string(),
            "ReviewTypeReason": t.integer().optional(),
            "ISBN": t.string(),
            "PublicationMonth": t.integer().optional(),
            "PatentPublicationNumber": t.string(),
            "Chapter": t.string(),
            "alternatetitle": t.array(
                t.proxy(renames["ScienceCitationAlternateTitleOut"])
            ),
            "Pages": t.string().optional(),
            "alternateabstract": t.array(
                t.proxy(renames["ScienceCitationAlternateAbstractOut"])
            ),
            "PublicationDay": t.integer().optional(),
            "Title": t.string(),
            "OnlineMonth": t.integer().optional(),
            "PMID": t.string().optional(),
            "NumRelated": t.integer().optional(),
            "BorrowedFields": t.integer().optional(),
            "BorrowedAuthors": t.integer().optional(),
            "ArxivSection": t.string().optional(),
            "unioncatalog": t.array(t.proxy(renames["ScienceCitationUnionCatalogOut"])),
            "AbstractHtmlLeftOver": t.string().optional(),
            "NumBackwardLinks": t.integer().optional(),
            "PatentCountry": t.array(t.string()).optional(),
            "NumGoodEmbeddedRefs": t.integer().optional(),
            "CitationSrc": t.string().optional(),
            "CitationSource": t.integer().optional(),
            "PublicationVenueVariant": t.array(t.string()),
            "Type": t.integer().optional(),
            "LevelOfDiscussion": t.integer().optional(),
            "author": t.array(t.proxy(renames["ScienceCitationAuthorOut"])),
            "category": t.array(t.proxy(renames["ScienceCitationCategoryOut"])),
            "DocumentID": t.string().optional(),
            "ParseSource": t.integer(),
            "downloadurl": t.array(t.proxy(renames["ScienceCitationDownloadURLOut"])),
            "OtherID": t.string().optional(),
            "UnmatchedInstitution": t.array(t.string()).optional(),
            "PatentNumber": t.string().optional(),
            "funding": t.array(t.proxy(renames["ScienceCitationFundingOut"])),
            "PatentApplicationNumber": t.string().optional(),
            "OnlineYear": t.integer(),
            "NumHostedPages": t.integer().optional(),
            "referencediscussion": t.array(
                t.proxy(renames["ScienceCitationReferenceDiscussionOut"])
            ),
            "PublicationYear": t.integer().optional(),
            "NumKeyQuotes": t.integer().optional(),
            "VersionID": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationOut"])
    types["GoogleCloudContentwarehouseV1SetAclRequestIn"] = t.struct(
        {
            "projectOwner": t.boolean().optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyIn"]),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SetAclRequestIn"])
    types["GoogleCloudContentwarehouseV1SetAclRequestOut"] = t.struct(
        {
            "projectOwner": t.boolean().optional(),
            "policy": t.proxy(renames["GoogleIamV1PolicyOut"]),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SetAclRequestOut"])
    types["SocialGraphApiProtoContactEditContextIn"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextIn"]
            )
        }
    ).named(renames["SocialGraphApiProtoContactEditContextIn"])
    types["SocialGraphApiProtoContactEditContextOut"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactEditContextOut"])
    types["QualitySalientTermsSignalTermDataIn"] = t.struct(
        {
            "originalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSignalTermDataIn"])
            ).optional(),
            "isBigram": t.boolean().optional(),
            "rawTf": t.number().optional(),
            "globalNpmi": t.number().optional(),
            "salience": t.number().optional(),
            "source": t.string().optional(),
            "label": t.string().optional(),
            "expectedTf": t.number().optional(),
            "centrality": t.number().optional(),
            "observedTf": t.number().optional(),
            "correctedTf": t.number().optional(),
            "bigramness": t.number().optional(),
            "bigramDiscountTf": t.number().optional(),
            "localNpmi": t.number().optional(),
            "idf": t.number().optional(),
        }
    ).named(renames["QualitySalientTermsSignalTermDataIn"])
    types["QualitySalientTermsSignalTermDataOut"] = t.struct(
        {
            "originalTerm": t.array(
                t.proxy(renames["QualitySalientTermsSignalTermDataOut"])
            ).optional(),
            "isBigram": t.boolean().optional(),
            "rawTf": t.number().optional(),
            "globalNpmi": t.number().optional(),
            "salience": t.number().optional(),
            "source": t.string().optional(),
            "label": t.string().optional(),
            "expectedTf": t.number().optional(),
            "centrality": t.number().optional(),
            "observedTf": t.number().optional(),
            "correctedTf": t.number().optional(),
            "bigramness": t.number().optional(),
            "bigramDiscountTf": t.number().optional(),
            "localNpmi": t.number().optional(),
            "idf": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientTermsSignalTermDataOut"])
    types["PhotosVisionObjectrecImageTemplateSubSetIn"] = t.struct(
        {
            "isBinaryDescriptor": t.boolean().optional(),
            "descriptor": t.array(
                t.proxy(renames["PhotosVisionObjectrecLocalDescriptorIn"])
            ),
            "descriptorType": t.integer(),
            "numDescriptors": t.integer().optional(),
        }
    ).named(renames["PhotosVisionObjectrecImageTemplateSubSetIn"])
    types["PhotosVisionObjectrecImageTemplateSubSetOut"] = t.struct(
        {
            "isBinaryDescriptor": t.boolean().optional(),
            "descriptor": t.array(
                t.proxy(renames["PhotosVisionObjectrecLocalDescriptorOut"])
            ),
            "descriptorType": t.integer(),
            "numDescriptors": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecImageTemplateSubSetOut"])
    types["IndexingEmbeddedContentRenderingFetchStatsIn"] = t.struct(
        {
            "fetchHostCount": t.array(
                t.proxy(renames["IndexingEmbeddedContentFetchHostCountIn"])
            ).optional()
        }
    ).named(renames["IndexingEmbeddedContentRenderingFetchStatsIn"])
    types["IndexingEmbeddedContentRenderingFetchStatsOut"] = t.struct(
        {
            "fetchHostCount": t.array(
                t.proxy(renames["IndexingEmbeddedContentFetchHostCountOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentRenderingFetchStatsOut"])
    types["AbuseiamConstantRestrictionIn"] = t.struct(
        {"type": t.string().optional()}
    ).named(renames["AbuseiamConstantRestrictionIn"])
    types["AbuseiamConstantRestrictionOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamConstantRestrictionOut"])
    types["NlpSemanticParsingModelsMediaBookIn"] = t.struct(
        {
            "rawText": t.string(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "latest": t.boolean().optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaBookIn"])
    types["NlpSemanticParsingModelsMediaBookOut"] = t.struct(
        {
            "rawText": t.string(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "latest": t.boolean().optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaBookOut"])
    types["NlpSciencelitSubjectHeadingIn"] = t.struct(
        {"term": t.string(), "id": t.string(), "majorTopic": t.boolean()}
    ).named(renames["NlpSciencelitSubjectHeadingIn"])
    types["NlpSciencelitSubjectHeadingOut"] = t.struct(
        {
            "term": t.string(),
            "id": t.string(),
            "majorTopic": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitSubjectHeadingOut"])
    types["LegalCitationLawIn"] = t.struct(
        {
            "Status": t.integer().optional(),
            "level": t.array(t.proxy(renames["LegalCitationLawLevelIn"])),
            "collectionname": t.proxy(renames["LegalCitationLawCollectionNameIn"]),
            "Type": t.integer().optional(),
            "RevisionDate": t.proxy(renames["LegalDateIn"]),
        }
    ).named(renames["LegalCitationLawIn"])
    types["LegalCitationLawOut"] = t.struct(
        {
            "Status": t.integer().optional(),
            "level": t.array(t.proxy(renames["LegalCitationLawLevelOut"])),
            "collectionname": t.proxy(renames["LegalCitationLawCollectionNameOut"]),
            "Type": t.integer().optional(),
            "RevisionDate": t.proxy(renames["LegalDateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationLawOut"])
    types["AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityIn"])
    types["AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoCoreDismissAssistantCapabilityOut"])
    types["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryIn"] = t.struct(
        {
            "clusterId": t.string().optional(),
            "urlEncoding": t.integer().optional(),
            "language": t.string().optional(),
            "url": t.string().optional(),
            "deviceMatchInfo": t.string().optional(),
            "urlRegionCode": t.integer().optional(),
        }
    ).named(renames["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryIn"])
    types["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryOut"] = t.struct(
        {
            "clusterId": t.string().optional(),
            "urlEncoding": t.integer().optional(),
            "language": t.string().optional(),
            "url": t.string().optional(),
            "deviceMatchInfo": t.string().optional(),
            "urlRegionCode": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryOut"])
    types["RepositoryWebrefLatentEntityIn"] = t.struct(
        {
            "broaderImportance": t.array(t.number()).optional(),
            "sources": t.array(t.string()).optional(),
            "mid": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefLatentEntityIn"])
    types["RepositoryWebrefLatentEntityOut"] = t.struct(
        {
            "broaderImportance": t.array(t.number()).optional(),
            "sources": t.array(t.string()).optional(),
            "mid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLatentEntityOut"])
    types["AssistantApiSuggestionsSupportDisplayTargetSupportIn"] = t.struct(
        {
            "repressImpressionSupported": t.boolean().optional(),
            "executedTextSupported": t.boolean().optional(),
            "headerTextSupported": t.boolean().optional(),
            "target": t.string().optional(),
        }
    ).named(renames["AssistantApiSuggestionsSupportDisplayTargetSupportIn"])
    types["AssistantApiSuggestionsSupportDisplayTargetSupportOut"] = t.struct(
        {
            "repressImpressionSupported": t.boolean().optional(),
            "executedTextSupported": t.boolean().optional(),
            "headerTextSupported": t.boolean().optional(),
            "target": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSuggestionsSupportDisplayTargetSupportOut"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryIn"] = t.struct(
        {
            "role": t.string(),
            "scope": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryIn"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryOut"] = t.struct(
        {
            "role": t.string(),
            "scope": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryOut"])
    types["AssistantApiMovementCapabilitiesIn"] = t.struct(
        {"mobility": t.string().optional()}
    ).named(renames["AssistantApiMovementCapabilitiesIn"])
    types["AssistantApiMovementCapabilitiesOut"] = t.struct(
        {
            "mobility": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiMovementCapabilitiesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataIn"] = t.struct(
        {"gdataCompatibilityExtensionId": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataOut"] = t.struct(
        {
            "gdataCompatibilityExtensionId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionDataOut"])
    types["GoogleCloudContentwarehouseV1ListDocumentSchemasResponseIn"] = t.struct(
        {
            "documentSchemas": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaIn"])
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListDocumentSchemasResponseIn"])
    types["GoogleCloudContentwarehouseV1ListDocumentSchemasResponseOut"] = t.struct(
        {
            "documentSchemas": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"])
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListDocumentSchemasResponseOut"])
    types["GeostoreTrustSignalsProtoIn"] = t.struct(
        {"sourceTrust": t.proxy(renames["GeostoreSourceTrustProtoIn"]).optional()}
    ).named(renames["GeostoreTrustSignalsProtoIn"])
    types["GeostoreTrustSignalsProtoOut"] = t.struct(
        {
            "sourceTrust": t.proxy(renames["GeostoreSourceTrustProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTrustSignalsProtoOut"])
    types["GeostoreAddressRangeProtoIn"] = t.struct(
        {
            "prefix": t.string().optional(),
            "suffix": t.string(),
            "sameParity": t.boolean().optional(),
            "number": t.array(t.integer()).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "parameter": t.array(t.number()).optional(),
        }
    ).named(renames["GeostoreAddressRangeProtoIn"])
    types["GeostoreAddressRangeProtoOut"] = t.struct(
        {
            "prefix": t.string().optional(),
            "suffix": t.string(),
            "sameParity": t.boolean().optional(),
            "number": t.array(t.integer()).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "parameter": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAddressRangeProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEventIn"] = t.struct(
        {
            "calendarDay": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "timestampMillis": t.string().optional(),
            "formattedType": t.string().optional(),
            "prompt": t.proxy(renames["SocialGraphApiProtoPromptIn"]).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEventIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEventOut"] = t.struct(
        {
            "calendarDay": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "timestampMillis": t.string().optional(),
            "formattedType": t.string().optional(),
            "prompt": t.proxy(renames["SocialGraphApiProtoPromptOut"]).optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEventOut"])
    types["QualityDniDocPreviewRestrictionsIn"] = t.struct(
        {
            "maxThumbnailSize": t.string().optional(),
            "crawlTsUsec": t.string().optional(),
            "faviconDisplay": t.string().optional(),
            "maxVideoPreviewSecs": t.integer().optional(),
            "isEucdDomain": t.boolean(),
            "maxThumbnailSizePublisherDefault": t.integer(),
            "maxVideoPreviewSecsFromPublisher": t.integer(),
            "maxSnippetLength": t.integer().optional(),
            "maxVideoPreviewSecsPublisherDefault": t.integer(),
            "extendedNewsPreviewsDomain": t.proxy(
                renames["QualityDniExtendedNewsPreviewsIn"]
            ).optional(),
            "firstseenDateSecs": t.integer().optional(),
            "maxSnippetLengthFromPublisher": t.integer().optional(),
            "maxSnippetLengthPublisherDefault": t.integer(),
            "bylineDateSecs": t.string().optional(),
            "isAmp": t.boolean().optional(),
            "maxThumbnailSizeFromPublisher": t.string(),
        }
    ).named(renames["QualityDniDocPreviewRestrictionsIn"])
    types["QualityDniDocPreviewRestrictionsOut"] = t.struct(
        {
            "maxThumbnailSize": t.string().optional(),
            "crawlTsUsec": t.string().optional(),
            "faviconDisplay": t.string().optional(),
            "maxVideoPreviewSecs": t.integer().optional(),
            "isEucdDomain": t.boolean(),
            "maxThumbnailSizePublisherDefault": t.integer(),
            "maxVideoPreviewSecsFromPublisher": t.integer(),
            "maxSnippetLength": t.integer().optional(),
            "maxVideoPreviewSecsPublisherDefault": t.integer(),
            "extendedNewsPreviewsDomain": t.proxy(
                renames["QualityDniExtendedNewsPreviewsOut"]
            ).optional(),
            "firstseenDateSecs": t.integer().optional(),
            "maxSnippetLengthFromPublisher": t.integer().optional(),
            "maxSnippetLengthPublisherDefault": t.integer(),
            "bylineDateSecs": t.string().optional(),
            "isAmp": t.boolean().optional(),
            "maxThumbnailSizeFromPublisher": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityDniDocPreviewRestrictionsOut"])
    types["VideoContentSearchRankEmbedNearestNeighborsFeaturesIn"] = t.struct(
        {
            "reSimilarity": t.number().optional(),
            "anchorReSimilarity": t.number().optional(),
            "navQueryReSimilarity": t.number().optional(),
        }
    ).named(renames["VideoContentSearchRankEmbedNearestNeighborsFeaturesIn"])
    types["VideoContentSearchRankEmbedNearestNeighborsFeaturesOut"] = t.struct(
        {
            "reSimilarity": t.number().optional(),
            "anchorReSimilarity": t.number().optional(),
            "navQueryReSimilarity": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchRankEmbedNearestNeighborsFeaturesOut"])
    types["OceanDocTagIn"] = t.struct(
        {
            "coverPage": t.string().optional(),
            "urlKey": t.string().optional(),
            "title": t.string().optional(),
            "metadataCoverSize": t.proxy(renames["OceanImageSizeIn"]).optional(),
            "geoRestrict": t.array(t.string()).optional(),
            "availableDownloads": t.integer().optional(),
            "encryptedVolumeId": t.string(),
            "objectionableContentBitmap": t.integer().optional(),
            "isLandingPage": t.boolean().optional(),
            "coverPageSize": t.proxy(renames["OceanImageSizeIn"]).optional(),
            "subjectBitmap": t.string().optional(),
            "DEPRECATEDPublisherPercentVisible": t.integer().optional(),
            "metadataCoverExists": t.boolean().optional(),
            "refPageUrl": t.string().optional(),
            "viewability": t.proxy(renames["OceanVolumeViewabilityIn"]).optional(),
            "authors": t.string().optional(),
            "DEPRECATEDPatentNumber": t.string().optional(),
            "DEPRECATEDIssueDate": t.string().optional(),
            "searchInBookUrl": t.string().optional(),
            "contributor": t.array(t.proxy(renames["OceanDocTagContributorIn"])),
            "grantableLocale": t.array(t.string()).optional(),
            "numPages": t.integer().optional(),
            "newspaperspecific": t.proxy(renames["OceanDocTagNewspaperSpecificIn"]),
            "encryptedExpressionId": t.string(),
            "printedPageNumber": t.string().optional(),
            "price": t.proxy(renames["OceanGEPriceIn"]).optional(),
            "goodTextDetail": t.integer().optional(),
            "thumbnailUrl": t.string().optional(),
            "magazinespecific": t.proxy(renames["OceanDocTagMagazineSpecificIn"]),
            "volumeVersion": t.string().optional(),
            "usingActualCover": t.boolean().optional(),
            "volumeType": t.integer(),
            "editors": t.string().optional(),
            "isGeQuality": t.boolean().optional(),
            "DEPRECATEDPatentAssignee": t.string(),
            "patentspecific": t.proxy(renames["OceanDocTagPatentSpecificIn"]),
            "catalogspecific": t.proxy(renames["OceanDocTagCatalogSpecificIn"]),
            "pageNumber": t.integer().optional(),
            "pageid": t.integer().optional(),
            "subTitle": t.string().optional(),
            "bookspecific": t.proxy(renames["OceanDocTagBookSpecificIn"]),
            "structuredPageNumber": t.string().optional(),
            "segmentTime": t.integer(),
            "contentType": t.integer().optional(),
            "DEPRECATEDApplicationDate": t.string().optional(),
            "sourceType": t.integer().optional(),
            "pagerank": t.number().optional(),
            "workcluster": t.proxy(renames["OceanDocTagWorkClusterIn"]),
            "blockSnippet": t.boolean(),
        }
    ).named(renames["OceanDocTagIn"])
    types["OceanDocTagOut"] = t.struct(
        {
            "coverPage": t.string().optional(),
            "urlKey": t.string().optional(),
            "title": t.string().optional(),
            "metadataCoverSize": t.proxy(renames["OceanImageSizeOut"]).optional(),
            "geoRestrict": t.array(t.string()).optional(),
            "availableDownloads": t.integer().optional(),
            "encryptedVolumeId": t.string(),
            "objectionableContentBitmap": t.integer().optional(),
            "isLandingPage": t.boolean().optional(),
            "coverPageSize": t.proxy(renames["OceanImageSizeOut"]).optional(),
            "subjectBitmap": t.string().optional(),
            "DEPRECATEDPublisherPercentVisible": t.integer().optional(),
            "metadataCoverExists": t.boolean().optional(),
            "refPageUrl": t.string().optional(),
            "viewability": t.proxy(renames["OceanVolumeViewabilityOut"]).optional(),
            "authors": t.string().optional(),
            "DEPRECATEDPatentNumber": t.string().optional(),
            "DEPRECATEDIssueDate": t.string().optional(),
            "searchInBookUrl": t.string().optional(),
            "contributor": t.array(t.proxy(renames["OceanDocTagContributorOut"])),
            "grantableLocale": t.array(t.string()).optional(),
            "numPages": t.integer().optional(),
            "newspaperspecific": t.proxy(renames["OceanDocTagNewspaperSpecificOut"]),
            "encryptedExpressionId": t.string(),
            "printedPageNumber": t.string().optional(),
            "price": t.proxy(renames["OceanGEPriceOut"]).optional(),
            "goodTextDetail": t.integer().optional(),
            "thumbnailUrl": t.string().optional(),
            "magazinespecific": t.proxy(renames["OceanDocTagMagazineSpecificOut"]),
            "volumeVersion": t.string().optional(),
            "usingActualCover": t.boolean().optional(),
            "volumeType": t.integer(),
            "editors": t.string().optional(),
            "isGeQuality": t.boolean().optional(),
            "DEPRECATEDPatentAssignee": t.string(),
            "patentspecific": t.proxy(renames["OceanDocTagPatentSpecificOut"]),
            "catalogspecific": t.proxy(renames["OceanDocTagCatalogSpecificOut"]),
            "pageNumber": t.integer().optional(),
            "pageid": t.integer().optional(),
            "subTitle": t.string().optional(),
            "bookspecific": t.proxy(renames["OceanDocTagBookSpecificOut"]),
            "structuredPageNumber": t.string().optional(),
            "segmentTime": t.integer(),
            "contentType": t.integer().optional(),
            "DEPRECATEDApplicationDate": t.string().optional(),
            "sourceType": t.integer().optional(),
            "pagerank": t.number().optional(),
            "workcluster": t.proxy(renames["OceanDocTagWorkClusterOut"]),
            "blockSnippet": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagOut"])
    types["RepositoryWebrefOysterTypeIn"] = t.struct(
        {
            "featureType": t.integer().optional(),
            "gconcepts": t.proxy(
                renames["GeostoreOntologyRawGConceptInstanceContainerProtoIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefOysterTypeIn"])
    types["RepositoryWebrefOysterTypeOut"] = t.struct(
        {
            "featureType": t.integer().optional(),
            "gconcepts": t.proxy(
                renames["GeostoreOntologyRawGConceptInstanceContainerProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefOysterTypeOut"])
    types["NlpSemanticParsingModelsShoppingAssistantOfferIn"] = t.struct(
        {
            "price": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyIn"]
            ).optional(),
            "docid": t.string().optional(),
            "product": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductIn"]
            ).optional(),
            "merchant": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantMerchantIn"]
            ).optional(),
            "store": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantStoreIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantOfferIn"])
    types["NlpSemanticParsingModelsShoppingAssistantOfferOut"] = t.struct(
        {
            "price": t.proxy(
                renames["NlpSemanticParsingModelsMoneyMoneyOut"]
            ).optional(),
            "docid": t.string().optional(),
            "product": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductOut"]
            ).optional(),
            "merchant": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantMerchantOut"]
            ).optional(),
            "store": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantStoreOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantOfferOut"])
    types["OceanDocInfoIn"] = t.struct(
        {"docTag": t.proxy(renames["OceanDocTagIn"]).optional()}
    ).named(renames["OceanDocInfoIn"])
    types["OceanDocInfoOut"] = t.struct(
        {
            "docTag": t.proxy(renames["OceanDocTagOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocInfoOut"])
    types["GoogleCloudContentwarehouseV1MergeFieldsOptionsIn"] = t.struct(
        {
            "replaceRepeatedFields": t.boolean().optional(),
            "replaceMessageFields": t.boolean().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1MergeFieldsOptionsIn"])
    types["GoogleCloudContentwarehouseV1MergeFieldsOptionsOut"] = t.struct(
        {
            "replaceRepeatedFields": t.boolean().optional(),
            "replaceMessageFields": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1MergeFieldsOptionsOut"])
    types["PhotosGDepthMetadataIn"] = t.struct(
        {
            "imageWidth": t.integer().optional(),
            "format": t.string().optional(),
            "units": t.string().optional(),
            "near": t.number().optional(),
            "far": t.number().optional(),
            "mime": t.string().optional(),
            "imageHeight": t.integer().optional(),
        }
    ).named(renames["PhotosGDepthMetadataIn"])
    types["PhotosGDepthMetadataOut"] = t.struct(
        {
            "imageWidth": t.integer().optional(),
            "format": t.string().optional(),
            "units": t.string().optional(),
            "near": t.number().optional(),
            "far": t.number().optional(),
            "mime": t.string().optional(),
            "imageHeight": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosGDepthMetadataOut"])
    types["RepositoryWebrefCategoryAnnotationHitCatSourceIn"] = t.struct(
        {
            "confidence": t.number().optional(),
            "cumulativeConfidence": t.number().optional(),
            "experimentalConfidence": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationHitCatSourceIn"])
    types["RepositoryWebrefCategoryAnnotationHitCatSourceOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "cumulativeConfidence": t.number().optional(),
            "experimentalConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationHitCatSourceOut"])
    types[
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataIn"
    ] = t.struct(
        {
            "url": t.string(),
            "crawlTimestamp": t.integer().optional(),
            "annotationSource": t.string(),
        }
    ).named(
        renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataIn"]
    )
    types[
        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataOut"
    ] = t.struct(
        {
            "url": t.string(),
            "crawlTimestamp": t.integer().optional(),
            "annotationSource": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataOut"]
    )
    types["CrowdingPerDocDataIn"] = t.struct(
        {"newscluster": t.array(t.proxy(renames["CrowdingPerDocDataNewsClusterIn"]))}
    ).named(renames["CrowdingPerDocDataIn"])
    types["CrowdingPerDocDataOut"] = t.struct(
        {
            "newscluster": t.array(
                t.proxy(renames["CrowdingPerDocDataNewsClusterOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrowdingPerDocDataOut"])
    types["NlpSemanticParsingLocalHealthInsuranceConstraintIn"] = t.struct(
        {"network": t.string()}
    ).named(renames["NlpSemanticParsingLocalHealthInsuranceConstraintIn"])
    types["NlpSemanticParsingLocalHealthInsuranceConstraintOut"] = t.struct(
        {"network": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["NlpSemanticParsingLocalHealthInsuranceConstraintOut"])
    types["StorageGraphBfgAuthorityFeedbackMetadataIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["StorageGraphBfgAuthorityFeedbackMetadataIn"])
    types["StorageGraphBfgAuthorityFeedbackMetadataOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["StorageGraphBfgAuthorityFeedbackMetadataOut"])
    types["SecurityCredentialsMdbUserProtoIn"] = t.struct(
        {"gaiaId": t.string().optional(), "userName": t.string()}
    ).named(renames["SecurityCredentialsMdbUserProtoIn"])
    types["SecurityCredentialsMdbUserProtoOut"] = t.struct(
        {
            "gaiaId": t.string().optional(),
            "userName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsMdbUserProtoOut"])
    types["RepositoryWebrefCategoryAnnotationShoppingSignalsIn"] = t.struct(
        {"isShoppingAnnotation": t.boolean().optional()}
    ).named(renames["RepositoryWebrefCategoryAnnotationShoppingSignalsIn"])
    types["RepositoryWebrefCategoryAnnotationShoppingSignalsOut"] = t.struct(
        {
            "isShoppingAnnotation": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationShoppingSignalsOut"])
    types["VideoVideoStreamInfoVideoStreamIn"] = t.struct(
        {
            "ituTT35": t.array(
                t.proxy(renames["VideoUserDataRegisteredItuTT35In"])
            ).optional(),
            "closedCaptions": t.proxy(renames["VideoClosedCaptionsIn"]),
            "interlace": t.string().optional(),
            "rotation": t.string().optional(),
            "endTimestamp": t.string(),
            "fps": t.number().optional(),
            "minFps": t.number().optional(),
            "hdr10PlusStats": t.proxy(renames["VideoFileHDR10PlusStatsIn"]).optional(),
            "width": t.integer().optional(),
            "codecId": t.string().optional(),
            "doviConfiguration": t.proxy(
                renames["VideoDoViDecoderConfigurationIn"]
            ).optional(),
            "decodeOffset": t.string().optional(),
            "spherical": t.proxy(renames["VideoFileSphericalMetadataIn"]).optional(),
            "bitrate": t.string().optional(),
            "numberOfFrames": t.string().optional(),
            "bitstreamColorInfo": t.proxy(renames["VideoFileColorInfoIn"]).optional(),
            "level": t.integer(),
            "pixFmt": t.string().optional(),
            "profile": t.string(),
            "averageFps": t.number().optional(),
            "clockDiscontinuityUs": t.string().optional(),
            "closedGopSize": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamStatisticsIn"]
            ).optional(),
            "cleanAperture": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamCleanApertureIn"]
            ),
            "pixelAspectRatio": t.number().optional(),
            "flip": t.string().optional(),
            "gopSize": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamStatisticsIn"]
            ).optional(),
            "height": t.integer(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoIn"])).optional(),
            "numberOfInvisibleFrames": t.integer().optional(),
            "colorInfo": t.proxy(renames["VideoFileColorInfoIn"]),
            "masteringDisplayMetadata": t.proxy(
                renames["VideoFileMasteringDisplayMetadataIn"]
            ),
            "displayHeight": t.integer(),
            "isInsaneSize": t.boolean().optional(),
            "rationalFps": t.proxy(renames["VideoRational32In"]).optional(),
            "codecFourcc": t.string(),
            "frameSize": t.string().optional(),
            "streamCodecTag": t.string(),
            "streamIndex": t.string().optional(),
            "displayWidth": t.integer().optional(),
            "contentLightLevel": t.proxy(renames["VideoFileContentLightLevelIn"]),
            "userDataUnregistered": t.array(
                t.proxy(renames["VideoUserDataUnregisteredIn"])
            ).optional(),
            "hasBFrames": t.boolean().optional(),
            "length": t.number().optional(),
            "seiMessage": t.array(t.proxy(renames["VideoSEIMessageIn"])).optional(),
            "startTimestamp": t.string().optional(),
            "codecString": t.string().optional(),
            "maxFps": t.number().optional(),
        }
    ).named(renames["VideoVideoStreamInfoVideoStreamIn"])
    types["VideoVideoStreamInfoVideoStreamOut"] = t.struct(
        {
            "ituTT35": t.array(
                t.proxy(renames["VideoUserDataRegisteredItuTT35Out"])
            ).optional(),
            "closedCaptions": t.proxy(renames["VideoClosedCaptionsOut"]),
            "interlace": t.string().optional(),
            "rotation": t.string().optional(),
            "endTimestamp": t.string(),
            "fps": t.number().optional(),
            "minFps": t.number().optional(),
            "hdr10PlusStats": t.proxy(renames["VideoFileHDR10PlusStatsOut"]).optional(),
            "width": t.integer().optional(),
            "codecId": t.string().optional(),
            "doviConfiguration": t.proxy(
                renames["VideoDoViDecoderConfigurationOut"]
            ).optional(),
            "decodeOffset": t.string().optional(),
            "spherical": t.proxy(renames["VideoFileSphericalMetadataOut"]).optional(),
            "bitrate": t.string().optional(),
            "numberOfFrames": t.string().optional(),
            "bitstreamColorInfo": t.proxy(renames["VideoFileColorInfoOut"]).optional(),
            "level": t.integer(),
            "pixFmt": t.string().optional(),
            "profile": t.string(),
            "averageFps": t.number().optional(),
            "clockDiscontinuityUs": t.string().optional(),
            "closedGopSize": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamStatisticsOut"]
            ).optional(),
            "cleanAperture": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamCleanApertureOut"]
            ),
            "pixelAspectRatio": t.number().optional(),
            "flip": t.string().optional(),
            "gopSize": t.proxy(
                renames["VideoVideoStreamInfoVideoStreamStatisticsOut"]
            ).optional(),
            "height": t.integer(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoOut"])).optional(),
            "numberOfInvisibleFrames": t.integer().optional(),
            "colorInfo": t.proxy(renames["VideoFileColorInfoOut"]),
            "masteringDisplayMetadata": t.proxy(
                renames["VideoFileMasteringDisplayMetadataOut"]
            ),
            "displayHeight": t.integer(),
            "isInsaneSize": t.boolean().optional(),
            "rationalFps": t.proxy(renames["VideoRational32Out"]).optional(),
            "codecFourcc": t.string(),
            "frameSize": t.string().optional(),
            "streamCodecTag": t.string(),
            "streamIndex": t.string().optional(),
            "displayWidth": t.integer().optional(),
            "contentLightLevel": t.proxy(renames["VideoFileContentLightLevelOut"]),
            "userDataUnregistered": t.array(
                t.proxy(renames["VideoUserDataUnregisteredOut"])
            ).optional(),
            "hasBFrames": t.boolean().optional(),
            "length": t.number().optional(),
            "seiMessage": t.array(t.proxy(renames["VideoSEIMessageOut"])).optional(),
            "startTimestamp": t.string().optional(),
            "codecString": t.string().optional(),
            "maxFps": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoVideoStreamOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldIn"] = t.struct(
        {
            "fieldDisplayName": t.string(),
            "value": t.string().optional(),
            "schemaDisplayName": t.string(),
            "fieldId": t.string(),
            "schemaId": t.string(),
            "multiValued": t.boolean(),
            "type": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "fieldType": t.string(),
            "formattedType": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldOut"] = t.struct(
        {
            "fieldDisplayName": t.string(),
            "value": t.string().optional(),
            "schemaDisplayName": t.string(),
            "fieldId": t.string(),
            "schemaId": t.string(),
            "multiValued": t.boolean(),
            "type": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "fieldType": t.string(),
            "formattedType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCustomSchemaFieldOut"])
    types["AssistantLogsLowConfidenceTargetDeviceLogIn"] = t.struct(
        {
            "lowConfTargetDeviceLog": t.proxy(
                renames["AssistantLogsDeviceInfoLogIn"]
            ).optional(),
            "fallbackDeviceLog": t.proxy(
                renames["AssistantLogsDeviceInfoLogIn"]
            ).optional(),
        }
    ).named(renames["AssistantLogsLowConfidenceTargetDeviceLogIn"])
    types["AssistantLogsLowConfidenceTargetDeviceLogOut"] = t.struct(
        {
            "lowConfTargetDeviceLog": t.proxy(
                renames["AssistantLogsDeviceInfoLogOut"]
            ).optional(),
            "fallbackDeviceLog": t.proxy(
                renames["AssistantLogsDeviceInfoLogOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsLowConfidenceTargetDeviceLogOut"])
    types["TeragoogleDocumentInfoAttachmentIn"] = t.struct(
        {
            "options": t.proxy(renames["TeragoogleRepositoryAttachmentOptionsIn"]),
            "name": t.string(),
            "value": t.string(),
        }
    ).named(renames["TeragoogleDocumentInfoAttachmentIn"])
    types["TeragoogleDocumentInfoAttachmentOut"] = t.struct(
        {
            "options": t.proxy(renames["TeragoogleRepositoryAttachmentOptionsOut"]),
            "name": t.string(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TeragoogleDocumentInfoAttachmentOut"])
    types["SecurityCredentialsAllAuthenticatedUsersProtoIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SecurityCredentialsAllAuthenticatedUsersProtoIn"])
    types["SecurityCredentialsAllAuthenticatedUsersProtoOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsAllAuthenticatedUsersProtoOut"])
    types["KnowledgeAnswersOpaqueNewsProviderTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueNewsProviderTypeIn"])
    types["KnowledgeAnswersOpaqueNewsProviderTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueNewsProviderTypeOut"])
    types[
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleIn"
    ] = t.struct(
        {
            "services": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "useCase": t.string(),
        }
    ).named(
        renames[
            "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleIn"
        ]
    )
    types[
        "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleOut"
    ] = t.struct(
        {
            "services": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "useCase": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModuleOut"
        ]
    )
    types["VideoContentSearchMultimodalTopicTrainingFeaturesIn"] = t.struct(
        {
            "maxFrameSimilarityInterval": t.proxy(
                renames["VideoContentSearchFrameSimilarityIntervalIn"]
            ).optional(),
            "rankembedNearestNeighborsFeatures": t.proxy(
                renames["VideoContentSearchRankEmbedNearestNeighborsFeaturesIn"]
            ).optional(),
            "saftEntityInfo": t.proxy(
                renames["VideoContentSearchSaftEntityInfoIn"]
            ).optional(),
            "topicDenseVector": t.array(t.number()).optional(),
            "normalizedTopic": t.string().optional(),
            "qbstTermsOverlapFeatures": t.proxy(
                renames["VideoContentSearchQbstTermsOverlapFeaturesIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchMultimodalTopicTrainingFeaturesIn"])
    types["VideoContentSearchMultimodalTopicTrainingFeaturesOut"] = t.struct(
        {
            "maxFrameSimilarityInterval": t.proxy(
                renames["VideoContentSearchFrameSimilarityIntervalOut"]
            ).optional(),
            "rankembedNearestNeighborsFeatures": t.proxy(
                renames["VideoContentSearchRankEmbedNearestNeighborsFeaturesOut"]
            ).optional(),
            "saftEntityInfo": t.proxy(
                renames["VideoContentSearchSaftEntityInfoOut"]
            ).optional(),
            "topicDenseVector": t.array(t.number()).optional(),
            "normalizedTopic": t.string().optional(),
            "qbstTermsOverlapFeatures": t.proxy(
                renames["VideoContentSearchQbstTermsOverlapFeaturesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchMultimodalTopicTrainingFeaturesOut"])
    types["SecurityCredentialsZwiebackSessionProtoIn"] = t.struct(
        {"zwiebackSessionId": t.string()}
    ).named(renames["SecurityCredentialsZwiebackSessionProtoIn"])
    types["SecurityCredentialsZwiebackSessionProtoOut"] = t.struct(
        {
            "zwiebackSessionId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsZwiebackSessionProtoOut"])
    types["AssistantGroundingRankerDeviceGroundingProviderFeaturesIn"] = t.struct(
        {
            "deviceId": t.proxy(
                renames["AssistantApiCoreTypesGovernedDeviceIdIn"]
            ).optional()
        }
    ).named(renames["AssistantGroundingRankerDeviceGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerDeviceGroundingProviderFeaturesOut"] = t.struct(
        {
            "deviceId": t.proxy(
                renames["AssistantApiCoreTypesGovernedDeviceIdOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerDeviceGroundingProviderFeaturesOut"])
    types["GeostoreTimeComponentProtoIn"] = t.struct(
        {
            "interval": t.array(
                t.proxy(renames["GeostoreTimeIntervalProtoIn"])
            ).optional(),
            "componentType": t.string(),
        }
    ).named(renames["GeostoreTimeComponentProtoIn"])
    types["GeostoreTimeComponentProtoOut"] = t.struct(
        {
            "interval": t.array(
                t.proxy(renames["GeostoreTimeIntervalProtoOut"])
            ).optional(),
            "componentType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimeComponentProtoOut"])
    types["NlpSemanticParsingModelsMediaCostIn"] = t.struct(
        {"price": t.number().optional(), "currencyCode": t.string().optional()}
    ).named(renames["NlpSemanticParsingModelsMediaCostIn"])
    types["NlpSemanticParsingModelsMediaCostOut"] = t.struct(
        {
            "price": t.number().optional(),
            "currencyCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaCostOut"])
    types["ExtraSnippetInfoResponseTidbitIn"] = t.struct(
        {
            "anchorinfo": t.proxy(
                renames["ExtraSnippetInfoResponseTidbitAnchorInfoIn"]
            ),
            "end": t.integer(),
            "items": t.string().optional(),
            "begin": t.integer().optional(),
            "type": t.string(),
            "text": t.string().optional(),
            "score": t.number().optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseTidbitIn"])
    types["ExtraSnippetInfoResponseTidbitOut"] = t.struct(
        {
            "anchorinfo": t.proxy(
                renames["ExtraSnippetInfoResponseTidbitAnchorInfoOut"]
            ),
            "end": t.integer(),
            "items": t.string().optional(),
            "begin": t.integer().optional(),
            "type": t.string(),
            "text": t.string().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseTidbitOut"])
    types["NlpSaftIdentifierIn"] = t.struct(
        {"domain": t.string().optional(), "id": t.string().optional()}
    ).named(renames["NlpSaftIdentifierIn"])
    types["NlpSaftIdentifierOut"] = t.struct(
        {
            "domain": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftIdentifierOut"])
    types["PhotosVisionObjectrecGlobalFeatureIn"] = t.struct(
        {
            "quantizedFeatureVector": t.proxy(
                renames["PhotosVisionObjectrecQuantizedFeatureVectorIn"]
            ),
            "additionalInfo": t.string().optional(),
            "version": t.string(),
            "featureVector": t.proxy(renames["PhotosVisionObjectrecFeatureVectorIn"]),
            "tag": t.string().optional(),
        }
    ).named(renames["PhotosVisionObjectrecGlobalFeatureIn"])
    types["PhotosVisionObjectrecGlobalFeatureOut"] = t.struct(
        {
            "quantizedFeatureVector": t.proxy(
                renames["PhotosVisionObjectrecQuantizedFeatureVectorOut"]
            ),
            "additionalInfo": t.string().optional(),
            "version": t.string(),
            "featureVector": t.proxy(renames["PhotosVisionObjectrecFeatureVectorOut"]),
            "tag": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecGlobalFeatureOut"])
    types["QualityActionsReminderPersonIn"] = t.struct(
        {
            "givenName": t.string().optional(),
            "gaiaId": t.string().optional(),
            "photoUrl": t.string().optional(),
            "displayName": t.string().optional(),
            "emailAddress": t.string().optional(),
        }
    ).named(renames["QualityActionsReminderPersonIn"])
    types["QualityActionsReminderPersonOut"] = t.struct(
        {
            "givenName": t.string().optional(),
            "gaiaId": t.string().optional(),
            "photoUrl": t.string().optional(),
            "displayName": t.string().optional(),
            "emailAddress": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderPersonOut"])
    types["QualityPreviewSnippetRadishFeaturesIn"] = t.struct(
        {
            "similarityMethod": t.integer().optional(),
            "similarityScore": t.number().optional(),
            "answerScore": t.number().optional(),
            "passageCoverage": t.number().optional(),
            "passageType": t.integer().optional(),
            "queryPassageIdx": t.integer().optional(),
            "snippetCoverage": t.number(),
            "navboostQuery": t.string().optional(),
        }
    ).named(renames["QualityPreviewSnippetRadishFeaturesIn"])
    types["QualityPreviewSnippetRadishFeaturesOut"] = t.struct(
        {
            "similarityMethod": t.integer().optional(),
            "similarityScore": t.number().optional(),
            "answerScore": t.number().optional(),
            "passageCoverage": t.number().optional(),
            "passageType": t.integer().optional(),
            "queryPassageIdx": t.integer().optional(),
            "snippetCoverage": t.number(),
            "navboostQuery": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetRadishFeaturesOut"])
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingIn"]
    )
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingOut"]
    )
    types["AppsPeopleOzExternalMergedpeopleapiLocationIn"] = t.struct(
        {
            "floorSection": t.string(),
            "type": t.string().optional(),
            "deskCode": t.string().optional(),
            "floorName": t.string(),
            "current": t.boolean(),
            "buildingName": t.string().optional(),
            "lastUpdateTime": t.string().optional(),
            "source": t.string().optional(),
            "buildingId": t.string(),
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLocationIn"])
    types["AppsPeopleOzExternalMergedpeopleapiLocationOut"] = t.struct(
        {
            "floorSection": t.string(),
            "type": t.string().optional(),
            "deskCode": t.string().optional(),
            "floorName": t.string(),
            "current": t.boolean(),
            "buildingName": t.string().optional(),
            "lastUpdateTime": t.string().optional(),
            "source": t.string().optional(),
            "buildingId": t.string(),
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiLocationOut"])
    types["VideoLegosLegosAnnotationsSetIn"] = t.struct(
        {
            "legosAnnotations": t.proxy(
                renames["YoutubeDiscoveryLegosLegosAnnotationsIn"]
            ),
            "featureSetName": t.string(),
        }
    ).named(renames["VideoLegosLegosAnnotationsSetIn"])
    types["VideoLegosLegosAnnotationsSetOut"] = t.struct(
        {
            "legosAnnotations": t.proxy(
                renames["YoutubeDiscoveryLegosLegosAnnotationsOut"]
            ),
            "featureSetName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoLegosLegosAnnotationsSetOut"])
    types["GoogleAssistantEmbeddedV1AlarmsIn"] = t.struct(
        {
            "snoozeDuration": t.string().optional(),
            "alarms": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1AlarmIn"])
            ).optional(),
            "stateFetchError": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1AlarmsIn"])
    types["GoogleAssistantEmbeddedV1AlarmsOut"] = t.struct(
        {
            "snoozeDuration": t.string().optional(),
            "alarms": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1AlarmOut"])
            ).optional(),
            "stateFetchError": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1AlarmsOut"])
    types["KnowledgeGraphTripleObjIn"] = t.struct(
        {
            "protoValue": t.proxy(renames["KnowledgeGraphTripleObjProtoIn"]),
            "uriValue": t.string().optional(),
            "int64Value": t.string(),
            "uint64Value": t.string(),
            "nestedStructValue": t.proxy(renames["KnowledgeGraphNestedStructIn"]),
            "locale": t.string().optional(),
            "durationValue": t.string().optional(),
            "datetimeValue": t.proxy(renames["KnowledgeGraphDateTimeProtoIn"]),
            "doubleValue": t.number(),
            "idValue": t.string().optional(),
            "stringValue": t.string().optional(),
            "boolValue": t.boolean(),
            "s2cellId": t.string(),
        }
    ).named(renames["KnowledgeGraphTripleObjIn"])
    types["KnowledgeGraphTripleObjOut"] = t.struct(
        {
            "protoValue": t.proxy(renames["KnowledgeGraphTripleObjProtoOut"]),
            "uriValue": t.string().optional(),
            "int64Value": t.string(),
            "uint64Value": t.string(),
            "nestedStructValue": t.proxy(renames["KnowledgeGraphNestedStructOut"]),
            "locale": t.string().optional(),
            "durationValue": t.string().optional(),
            "datetimeValue": t.proxy(renames["KnowledgeGraphDateTimeProtoOut"]),
            "doubleValue": t.number(),
            "idValue": t.string().optional(),
            "stringValue": t.string().optional(),
            "boolValue": t.boolean(),
            "s2cellId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphTripleObjOut"])
    types["GoogleCloudDocumentaiV1DocumentPageAnchorIn"] = t.struct(
        {
            "pageRefs": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefIn"])
            ).optional()
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageAnchorIn"])
    types["GoogleCloudDocumentaiV1DocumentPageAnchorOut"] = t.struct(
        {
            "pageRefs": t.array(
                t.proxy(renames["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageAnchorOut"])
    types["AssistantApiSettingsKidsModeIn"] = t.struct(
        {"kidsModeEnabled": t.boolean(), "obfuscatedGaiaId": t.string().optional()}
    ).named(renames["AssistantApiSettingsKidsModeIn"])
    types["AssistantApiSettingsKidsModeOut"] = t.struct(
        {
            "kidsModeEnabled": t.boolean(),
            "obfuscatedGaiaId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsKidsModeOut"])
    types["AssistantApiScreenCapabilitiesResolutionIn"] = t.struct(
        {
            "nengSize": t.integer().optional(),
            "widthPx": t.integer().optional(),
            "heightPx": t.integer(),
            "dpi": t.integer().optional(),
            "mSize": t.integer().optional(),
        }
    ).named(renames["AssistantApiScreenCapabilitiesResolutionIn"])
    types["AssistantApiScreenCapabilitiesResolutionOut"] = t.struct(
        {
            "nengSize": t.integer().optional(),
            "widthPx": t.integer().optional(),
            "heightPx": t.integer(),
            "dpi": t.integer().optional(),
            "mSize": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiScreenCapabilitiesResolutionOut"])
    types["GoogleCloudContentwarehouseV1EnumTypeOptionsIn"] = t.struct(
        {
            "validationCheckDisabled": t.boolean().optional(),
            "possibleValues": t.array(t.string()),
        }
    ).named(renames["GoogleCloudContentwarehouseV1EnumTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1EnumTypeOptionsOut"] = t.struct(
        {
            "validationCheckDisabled": t.boolean().optional(),
            "possibleValues": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1EnumTypeOptionsOut"])
    types["AssistantDevicesPlatformProtoIntValueSpecIn"] = t.struct(
        {"maxValue": t.string(), "minValue": t.string()}
    ).named(renames["AssistantDevicesPlatformProtoIntValueSpecIn"])
    types["AssistantDevicesPlatformProtoIntValueSpecOut"] = t.struct(
        {
            "maxValue": t.string(),
            "minValue": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoIntValueSpecOut"])
    types["NlpSemanticParsingModelsMediaMovieIn"] = t.struct(
        {
            "rawText": t.string(),
            "isAnnotatedFromText": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "providerMetadata": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaProviderMetadataIn"])
            ),
            "isFromFastPath": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMovieIn"])
    types["NlpSemanticParsingModelsMediaMovieOut"] = t.struct(
        {
            "rawText": t.string(),
            "isAnnotatedFromText": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "providerMetadata": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaProviderMetadataOut"])
            ),
            "isFromFastPath": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMovieOut"])
    types["AppsPeopleOzExternalMergedpeopleapiExternalIdIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "type": t.string().optional(),
            "formattedType": t.string().optional(),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiExternalIdIn"])
    types["AppsPeopleOzExternalMergedpeopleapiExternalIdOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "type": t.string().optional(),
            "formattedType": t.string().optional(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiExternalIdOut"])
    types["VideoContentSearchDolphinEnsembleScoreIn"] = t.struct(
        {"dolphinScore": t.number().optional(), "modelName": t.string()}
    ).named(renames["VideoContentSearchDolphinEnsembleScoreIn"])
    types["VideoContentSearchDolphinEnsembleScoreOut"] = t.struct(
        {
            "dolphinScore": t.number().optional(),
            "modelName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDolphinEnsembleScoreOut"])
    types["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueIn"] = t.struct(
        {
            "integerValue": t.integer().optional(),
            "datetimeValue": t.proxy(renames["GoogleTypeDateTimeIn"]).optional(),
            "booleanValue": t.boolean().optional(),
            "text": t.string().optional(),
            "moneyValue": t.proxy(renames["GoogleTypeMoneyIn"]).optional(),
            "addressValue": t.proxy(renames["GoogleTypePostalAddressIn"]).optional(),
            "dateValue": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "floatValue": t.number().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueIn"])
    types["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueOut"] = t.struct(
        {
            "integerValue": t.integer().optional(),
            "datetimeValue": t.proxy(renames["GoogleTypeDateTimeOut"]).optional(),
            "booleanValue": t.boolean().optional(),
            "text": t.string().optional(),
            "moneyValue": t.proxy(renames["GoogleTypeMoneyOut"]).optional(),
            "addressValue": t.proxy(renames["GoogleTypePostalAddressOut"]).optional(),
            "dateValue": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "floatValue": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityNormalizedValueOut"])
    types["RepositoryWebrefLatentEntitiesIn"] = t.struct(
        {
            "latentEntity": t.array(
                t.proxy(renames["RepositoryWebrefLatentEntityIn"])
            ).optional(),
            "latentMid": t.array(t.string()).optional(),
        }
    ).named(renames["RepositoryWebrefLatentEntitiesIn"])
    types["RepositoryWebrefLatentEntitiesOut"] = t.struct(
        {
            "latentEntity": t.array(
                t.proxy(renames["RepositoryWebrefLatentEntityOut"])
            ).optional(),
            "latentMid": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLatentEntitiesOut"])
    types["QualityTimebasedSyntacticDatePositionIn"] = t.struct(
        {"begin": t.integer(), "end": t.integer()}
    ).named(renames["QualityTimebasedSyntacticDatePositionIn"])
    types["QualityTimebasedSyntacticDatePositionOut"] = t.struct(
        {
            "begin": t.integer(),
            "end": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedSyntacticDatePositionOut"])
    types["VideoContentSearchCommentAnchorSetFeaturesIn"] = t.struct(
        {
            "rootComment": t.proxy(
                renames["VideoContentSearchCommentAnchorSetFeaturesCommentIn"]
            ),
            "replies": t.array(
                t.proxy(renames["VideoContentSearchCommentAnchorSetFeaturesCommentIn"])
            ),
        }
    ).named(renames["VideoContentSearchCommentAnchorSetFeaturesIn"])
    types["VideoContentSearchCommentAnchorSetFeaturesOut"] = t.struct(
        {
            "rootComment": t.proxy(
                renames["VideoContentSearchCommentAnchorSetFeaturesCommentOut"]
            ),
            "replies": t.array(
                t.proxy(renames["VideoContentSearchCommentAnchorSetFeaturesCommentOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCommentAnchorSetFeaturesOut"])
    types[
        "NlpSemanticParsingModelsShoppingAssistantProductClassificationIn"
    ] = t.struct(
        {
            "videoGameConfidence": t.number().optional(),
            "isVideoGame": t.boolean().optional(),
            "bookConfidence": t.number().optional(),
            "movieConfidence": t.number().optional(),
        }
    ).named(
        renames["NlpSemanticParsingModelsShoppingAssistantProductClassificationIn"]
    )
    types[
        "NlpSemanticParsingModelsShoppingAssistantProductClassificationOut"
    ] = t.struct(
        {
            "videoGameConfidence": t.number().optional(),
            "isVideoGame": t.boolean().optional(),
            "bookConfidence": t.number().optional(),
            "movieConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["NlpSemanticParsingModelsShoppingAssistantProductClassificationOut"]
    )
    types["NlpSemanticParsingNumberSimpleNumberIn"] = t.struct(
        {
            "prefix": t.string().optional(),
            "normalizedValue": t.string().optional(),
            "groupingSystem": t.string().optional(),
            "suffix": t.string().optional(),
            "type": t.string(),
            "groupingDelimiter": t.string().optional(),
            "decimalMark": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingNumberSimpleNumberIn"])
    types["NlpSemanticParsingNumberSimpleNumberOut"] = t.struct(
        {
            "prefix": t.string().optional(),
            "normalizedValue": t.string().optional(),
            "groupingSystem": t.string().optional(),
            "suffix": t.string().optional(),
            "type": t.string(),
            "groupingDelimiter": t.string().optional(),
            "decimalMark": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingNumberSimpleNumberOut"])
    types["GeostoreExistenceProtoIn"] = t.struct(
        {
            "removedReason": t.string().optional(),
            "endDate": t.proxy(renames["GeostoreDateTimeProtoIn"]),
            "closeReason": t.string().optional(),
            "endAsOfDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "closed": t.boolean().optional(),
            "removed": t.boolean().optional(),
            "featureBirthTimestampSeconds": t.string().optional(),
            "startDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
        }
    ).named(renames["GeostoreExistenceProtoIn"])
    types["GeostoreExistenceProtoOut"] = t.struct(
        {
            "removedReason": t.string().optional(),
            "endDate": t.proxy(renames["GeostoreDateTimeProtoOut"]),
            "closeReason": t.string().optional(),
            "endAsOfDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "closed": t.boolean().optional(),
            "removed": t.boolean().optional(),
            "featureBirthTimestampSeconds": t.string().optional(),
            "startDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreExistenceProtoOut"])
    types["AssistantApiDurationIn"] = t.struct(
        {"nanos": t.integer().optional(), "seconds": t.string().optional()}
    ).named(renames["AssistantApiDurationIn"])
    types["AssistantApiDurationOut"] = t.struct(
        {
            "nanos": t.integer().optional(),
            "seconds": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiDurationOut"])
    types["OceanDocTagCatalogSpecificIn"] = t.struct(
        {
            "publicationTimeToDisplay": t.string().optional(),
            "publicationDate": t.integer().optional(),
            "latest": t.boolean().optional(),
        }
    ).named(renames["OceanDocTagCatalogSpecificIn"])
    types["OceanDocTagCatalogSpecificOut"] = t.struct(
        {
            "publicationTimeToDisplay": t.string().optional(),
            "publicationDate": t.integer().optional(),
            "latest": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagCatalogSpecificOut"])
    types[
        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateIn"
    ] = t.struct(
        {"channelType": t.string().optional(), "enabled": t.boolean().optional()}
    ).named(
        renames["AssistantApiSystemNotificationRestrictionsNotificationChannelStateIn"]
    )
    types[
        "AssistantApiSystemNotificationRestrictionsNotificationChannelStateOut"
    ] = t.struct(
        {
            "channelType": t.string().optional(),
            "enabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiSystemNotificationRestrictionsNotificationChannelStateOut"]
    )
    types["SearchPolicyRankableSensitivityFulfillmentIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SearchPolicyRankableSensitivityFulfillmentIn"])
    types["SearchPolicyRankableSensitivityFulfillmentOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SearchPolicyRankableSensitivityFulfillmentOut"])
    types["KnowledgeAnswersSensitivityInstructionIn"] = t.struct(
        {
            "legacyAssistantSensitivity": t.proxy(
                renames["SearchPolicyRankableSensitivityIn"]
            ).optional(),
            "multiAccountAllowed": t.boolean().optional(),
            "argument": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionArgumentIn"]
            ),
            "previousQuery": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionPreviousQueryIn"]
            ),
            "intent": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionIntentIn"]
            ),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionIn"])
    types["KnowledgeAnswersSensitivityInstructionOut"] = t.struct(
        {
            "legacyAssistantSensitivity": t.proxy(
                renames["SearchPolicyRankableSensitivityOut"]
            ).optional(),
            "multiAccountAllowed": t.boolean().optional(),
            "argument": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionArgumentOut"]
            ),
            "previousQuery": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionPreviousQueryOut"]
            ),
            "intent": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionIntentOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionOut"])
    types["GeostoreWeightComparisonProtoIn"] = t.struct(
        {
            "comparison": t.string(),
            "comparisonOperator": t.string(),
            "weightWithUnit": t.proxy(renames["GeostoreWeightProtoIn"]),
        }
    ).named(renames["GeostoreWeightComparisonProtoIn"])
    types["GeostoreWeightComparisonProtoOut"] = t.struct(
        {
            "comparison": t.string(),
            "comparisonOperator": t.string(),
            "weightWithUnit": t.proxy(renames["GeostoreWeightProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreWeightComparisonProtoOut"])
    types["GoogleCloudDocumentaiV1DocumentPageImageIn"] = t.struct(
        {
            "mimeType": t.string().optional(),
            "height": t.integer().optional(),
            "content": t.string().optional(),
            "width": t.integer().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageImageIn"])
    types["GoogleCloudDocumentaiV1DocumentPageImageOut"] = t.struct(
        {
            "mimeType": t.string().optional(),
            "height": t.integer().optional(),
            "content": t.string().optional(),
            "width": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageImageOut"])
    types["YoutubeBackstageSuperVodCommentInfoIn"] = t.struct(
        {
            "version": t.string().optional(),
            "entitlementId": t.string().optional(),
            "superVodItemId": t.string().optional(),
            "priceInMicros": t.string().optional(),
            "currencyCode": t.string().optional(),
        }
    ).named(renames["YoutubeBackstageSuperVodCommentInfoIn"])
    types["YoutubeBackstageSuperVodCommentInfoOut"] = t.struct(
        {
            "version": t.string().optional(),
            "entitlementId": t.string().optional(),
            "superVodItemId": t.string().optional(),
            "priceInMicros": t.string().optional(),
            "currencyCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeBackstageSuperVodCommentInfoOut"])
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusIn"
    ] = t.struct(
        {
            "status": t.proxy(renames["GoogleRpcStatusIn"]).optional(),
            "documentId": t.string().optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusIn"
        ]
    )
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusOut"
    ] = t.struct(
        {
            "status": t.proxy(renames["GoogleRpcStatusOut"]).optional(),
            "documentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatusOut"
        ]
    )
    types["GoogleCloudContentwarehouseV1RuleActionsPairIn"] = t.struct(
        {
            "rule": t.proxy(renames["GoogleCloudContentwarehouseV1RuleIn"]).optional(),
            "actionOutputs": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1ActionOutputIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleActionsPairIn"])
    types["GoogleCloudContentwarehouseV1RuleActionsPairOut"] = t.struct(
        {
            "rule": t.proxy(renames["GoogleCloudContentwarehouseV1RuleOut"]).optional(),
            "actionOutputs": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1ActionOutputOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleActionsPairOut"])
    types["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsIn"] = t.struct(
        {
            "type": t.string().optional(),
            "version": t.array(t.string()).optional(),
            "annotationSource": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsOut"] = t.struct(
        {
            "type": t.string().optional(),
            "version": t.array(t.string()).optional(),
            "annotationSource": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsOut"])
    types["GoodocOverridesIn"] = t.struct(
        {
            "fullPageAsImage": t.string().optional(),
            "pageBreakBefore": t.string().optional(),
            "style": t.array(t.proxy(renames["GoodocOverridesStyleIn"])),
            "doNotExpandGraphicBox": t.boolean().optional(),
            "fullPageSkipped": t.string().optional(),
            "needNotSuppressPhoto": t.boolean().optional(),
            "blockImagination": t.string().optional(),
            "wordHtml": t.string().optional(),
            "fullPageLineated": t.string().optional(),
        }
    ).named(renames["GoodocOverridesIn"])
    types["GoodocOverridesOut"] = t.struct(
        {
            "fullPageAsImage": t.string().optional(),
            "pageBreakBefore": t.string().optional(),
            "style": t.array(t.proxy(renames["GoodocOverridesStyleOut"])),
            "doNotExpandGraphicBox": t.boolean().optional(),
            "fullPageSkipped": t.string().optional(),
            "needNotSuppressPhoto": t.boolean().optional(),
            "blockImagination": t.string().optional(),
            "wordHtml": t.string().optional(),
            "fullPageLineated": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocOverridesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataIn"] = t.struct(
        {
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureIn"]
            ).optional(),
            "userCaption": t.string().optional(),
            "profilePhotoUrl": t.string().optional(),
            "followeeCount": t.string().optional(),
            "numContributions": t.string().optional(),
            "followerCount": t.integer().optional(),
            "tagline": t.string().optional(),
            "topicExpertise": t.array(t.string()).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataOut"] = t.struct(
        {
            "failure": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProductProfileFailureOut"]
            ).optional(),
            "userCaption": t.string().optional(),
            "profilePhotoUrl": t.string().optional(),
            "followeeCount": t.string().optional(),
            "numContributions": t.string().optional(),
            "followerCount": t.integer().optional(),
            "tagline": t.string().optional(),
            "topicExpertise": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataOut"])
    types["AssistantApiNotificationOutputRestrictionsOptOutStateIn"] = t.struct(
        {
            "categoryGroupState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateIn"
                    ]
                )
            ),
            "categoryState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateIn"
                    ]
                )
            ),
        }
    ).named(renames["AssistantApiNotificationOutputRestrictionsOptOutStateIn"])
    types["AssistantApiNotificationOutputRestrictionsOptOutStateOut"] = t.struct(
        {
            "categoryGroupState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupStateOut"
                    ]
                )
            ),
            "categoryState": t.array(
                t.proxy(
                    renames[
                        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiNotificationOutputRestrictionsOptOutStateOut"])
    types["NlpSemanticParsingModelsMediaDescriptionIn"] = t.struct(
        {
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaDescriptionIn"])
    types["NlpSemanticParsingModelsMediaDescriptionOut"] = t.struct(
        {
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaDescriptionOut"])
    types["StorageGraphBfgUmpPolicyMetadataIn"] = t.struct(
        {
            "availabilityStarts": t.string().optional(),
            "regionsAllowed": t.proxy(renames["KeGovernanceTypedRegionsIn"]),
            "availabilityEnds": t.string().optional(),
        }
    ).named(renames["StorageGraphBfgUmpPolicyMetadataIn"])
    types["StorageGraphBfgUmpPolicyMetadataOut"] = t.struct(
        {
            "availabilityStarts": t.string().optional(),
            "regionsAllowed": t.proxy(renames["KeGovernanceTypedRegionsOut"]),
            "availabilityEnds": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgUmpPolicyMetadataOut"])
    types["PhotosAnimationMetadataIn"] = t.struct(
        {
            "numFrames": t.string(),
            "durationMs": t.string().optional(),
            "loopCount": t.integer().optional(),
        }
    ).named(renames["PhotosAnimationMetadataIn"])
    types["PhotosAnimationMetadataOut"] = t.struct(
        {
            "numFrames": t.string(),
            "durationMs": t.string().optional(),
            "loopCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosAnimationMetadataOut"])
    types[
        "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesIn"
    ] = t.struct(
        {
            "conciergeFeatures": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoConciergeFeaturesIn"]
            )
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesIn"]
    )
    types[
        "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesOut"
    ] = t.struct(
        {
            "conciergeFeatures": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoConciergeFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesOut"]
    )
    types["DeepCropPixelsIn"] = t.struct(
        {
            "x1": t.integer(),
            "x0": t.integer().optional(),
            "y1": t.integer(),
            "y0": t.integer(),
        }
    ).named(renames["DeepCropPixelsIn"])
    types["DeepCropPixelsOut"] = t.struct(
        {
            "x1": t.integer(),
            "x0": t.integer().optional(),
            "y1": t.integer(),
            "y0": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DeepCropPixelsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoIn"] = t.struct(
        {
            "mimetype": t.string().optional(),
            "displayAppUniqueId": t.string().optional(),
            "appUniqueId": t.string().optional(),
            "label": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoOut"] = t.struct(
        {
            "mimetype": t.string().optional(),
            "displayAppUniqueId": t.string().optional(),
            "appUniqueId": t.string().optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAppUniqueInfoOut"])
    types["KnowledgeAnswersRangeConstraintIn"] = t.struct(
        {
            "min": t.proxy(renames["KnowledgeAnswersRangeConstraintRangeEndpointIn"]),
            "max": t.proxy(renames["KnowledgeAnswersRangeConstraintRangeEndpointIn"]),
        }
    ).named(renames["KnowledgeAnswersRangeConstraintIn"])
    types["KnowledgeAnswersRangeConstraintOut"] = t.struct(
        {
            "min": t.proxy(renames["KnowledgeAnswersRangeConstraintRangeEndpointOut"]),
            "max": t.proxy(renames["KnowledgeAnswersRangeConstraintRangeEndpointOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersRangeConstraintOut"])
    types["AssistantLogsDeviceSelectionLogIn"] = t.struct(
        {
            "allMediaStreamLog": t.proxy(
                renames["AssistantLogsAllMediaStreamLogIn"]
            ).optional(),
            "logDataSource": t.string().optional(),
            "mediaFocus": t.proxy(
                renames["AssistantLogsMediaFocusInfoLogIn"]
            ).optional(),
            "allDefaultDevices": t.array(
                t.proxy(renames["AssistantLogsDefaultDeviceLogIn"])
            ).optional(),
            "selectionResult": t.proxy(
                renames["AssistantLogsDeviceSelectionResultLogIn"]
            ).optional(),
            "devicesStr": t.array(t.string()).optional(),
            "testCodes": t.array(
                t.proxy(renames["AssistantLogsDeviceTargetingTestCodeIn"])
            ),
            "localDevice": t.proxy(renames["AssistantLogsDeviceInfoLogIn"]).optional(),
            "counterfactualDeviceSelectionLog": t.proxy(
                renames["AssistantLogsDeviceSelectionLogIn"]
            ).optional(),
            "queryAnnotation": t.proxy(
                renames["AssistantLogsQueryAnnotationLogIn"]
            ).optional(),
            "inputErrorLog": t.array(t.proxy(renames["AssistantLogsInputErrorLogIn"])),
            "defaultDevicesLog": t.proxy(renames["AssistantLogsDefaultDevicesLogIn"]),
            "mediaFocusesLog": t.proxy(
                renames["AssistantLogsMediaFocusesLogIn"]
            ).optional(),
            "nearbyDevicesLog": t.proxy(
                renames["AssistantLogsNearbyDevicesLogIn"]
            ).optional(),
            "defaultDevices": t.proxy(
                renames["AssistantLogsDefaultDeviceLogIn"]
            ).optional(),
        }
    ).named(renames["AssistantLogsDeviceSelectionLogIn"])
    types["AssistantLogsDeviceSelectionLogOut"] = t.struct(
        {
            "allMediaStreamLog": t.proxy(
                renames["AssistantLogsAllMediaStreamLogOut"]
            ).optional(),
            "logDataSource": t.string().optional(),
            "mediaFocus": t.proxy(
                renames["AssistantLogsMediaFocusInfoLogOut"]
            ).optional(),
            "allDefaultDevices": t.array(
                t.proxy(renames["AssistantLogsDefaultDeviceLogOut"])
            ).optional(),
            "selectionResult": t.proxy(
                renames["AssistantLogsDeviceSelectionResultLogOut"]
            ).optional(),
            "devicesStr": t.array(t.string()).optional(),
            "testCodes": t.array(
                t.proxy(renames["AssistantLogsDeviceTargetingTestCodeOut"])
            ),
            "localDevice": t.proxy(renames["AssistantLogsDeviceInfoLogOut"]).optional(),
            "counterfactualDeviceSelectionLog": t.proxy(
                renames["AssistantLogsDeviceSelectionLogOut"]
            ).optional(),
            "queryAnnotation": t.proxy(
                renames["AssistantLogsQueryAnnotationLogOut"]
            ).optional(),
            "inputErrorLog": t.array(t.proxy(renames["AssistantLogsInputErrorLogOut"])),
            "defaultDevicesLog": t.proxy(renames["AssistantLogsDefaultDevicesLogOut"]),
            "mediaFocusesLog": t.proxy(
                renames["AssistantLogsMediaFocusesLogOut"]
            ).optional(),
            "nearbyDevicesLog": t.proxy(
                renames["AssistantLogsNearbyDevicesLogOut"]
            ).optional(),
            "defaultDevices": t.proxy(
                renames["AssistantLogsDefaultDeviceLogOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDeviceSelectionLogOut"])
    types["AssistantApiCastAssistantSettingLinkingResultIn"] = t.struct(
        {
            "truncatedErrorMsg": t.string().optional(),
            "castLinkingStatus": t.string().optional(),
        }
    ).named(renames["AssistantApiCastAssistantSettingLinkingResultIn"])
    types["AssistantApiCastAssistantSettingLinkingResultOut"] = t.struct(
        {
            "truncatedErrorMsg": t.string().optional(),
            "castLinkingStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCastAssistantSettingLinkingResultOut"])
    types["AbuseiamOrRestrictionIn"] = t.struct(
        {"child": t.array(t.proxy(renames["AbuseiamUserRestrictionIn"])).optional()}
    ).named(renames["AbuseiamOrRestrictionIn"])
    types["AbuseiamOrRestrictionOut"] = t.struct(
        {
            "child": t.array(t.proxy(renames["AbuseiamUserRestrictionOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamOrRestrictionOut"])
    types["SocialStanzaModerationInfoIn"] = t.struct(
        {
            "moderationReason": t.string().optional(),
            "moderatorType": t.string().optional(),
            "moderator": t.proxy(renames["SecurityCredentialsPrincipalProtoIn"]),
        }
    ).named(renames["SocialStanzaModerationInfoIn"])
    types["SocialStanzaModerationInfoOut"] = t.struct(
        {
            "moderationReason": t.string().optional(),
            "moderatorType": t.string().optional(),
            "moderator": t.proxy(renames["SecurityCredentialsPrincipalProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialStanzaModerationInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiManagementUpchainIn"] = t.struct(
        {
            "status": t.string(),
            "indirectManager": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerIn"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiManagementUpchainIn"])
    types["AppsPeopleOzExternalMergedpeopleapiManagementUpchainOut"] = t.struct(
        {
            "status": t.string(),
            "indirectManager": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManagerOut"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiManagementUpchainOut"])
    types["NlpSemanticParsingModelsShoppingAssistantProductMediaProductIn"] = t.struct(
        {
            "topic": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
                ]
            ).optional(),
            "orderInSeries": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
                ]
            ).optional(),
            "genre": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
                ]
            ).optional(),
            "mediaTitle": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
                ]
            ).optional(),
            "author": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueIn"
                ]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductMediaProductIn"])
    types["NlpSemanticParsingModelsShoppingAssistantProductMediaProductOut"] = t.struct(
        {
            "topic": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
                ]
            ).optional(),
            "orderInSeries": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
                ]
            ).optional(),
            "genre": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
                ]
            ).optional(),
            "mediaTitle": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
                ]
            ).optional(),
            "author": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValueOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductMediaProductOut"])
    types["OcrPhotoBoundingBoxIn"] = t.struct(
        {
            "top": t.integer().optional(),
            "width": t.integer().optional(),
            "left": t.integer().optional(),
            "curvedBox": t.proxy(renames["OcrPhotoCurvedBoundingBoxIn"]).optional(),
            "height": t.integer().optional(),
            "angle": t.number().optional(),
        }
    ).named(renames["OcrPhotoBoundingBoxIn"])
    types["OcrPhotoBoundingBoxOut"] = t.struct(
        {
            "top": t.integer().optional(),
            "width": t.integer().optional(),
            "left": t.integer().optional(),
            "curvedBox": t.proxy(renames["OcrPhotoCurvedBoundingBoxOut"]).optional(),
            "height": t.integer().optional(),
            "angle": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OcrPhotoBoundingBoxOut"])
    types["AssistantApiCoreTypesGovernedDeviceIdIn"] = t.struct(
        {
            "clientInstanceId": t.string().optional(),
            "deviceType": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "castDeviceId": t.string().optional(),
            "multiHotwordArbitrationDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "connectedDockId": t.string().optional(),
            "alloDeviceId": t.string().optional(),
            "opaIosDeviceId": t.string().optional(),
            "deviceConfig": t.proxy(
                renames["AssistantApiCoreTypesGovernedDeviceConfigIn"]
            ).optional(),
            "quartzDeviceId": t.string().optional(),
            "canonicalDeviceId": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedDeviceIdIn"])
    types["AssistantApiCoreTypesGovernedDeviceIdOut"] = t.struct(
        {
            "clientInstanceId": t.string().optional(),
            "deviceType": t.string().optional(),
            "homeGraphDeviceId": t.string().optional(),
            "castDeviceId": t.string().optional(),
            "multiHotwordArbitrationDeviceId": t.string().optional(),
            "agsaClientInstanceId": t.string().optional(),
            "libassistantDeviceId": t.string().optional(),
            "connectedDockId": t.string().optional(),
            "alloDeviceId": t.string().optional(),
            "opaIosDeviceId": t.string().optional(),
            "deviceConfig": t.proxy(
                renames["AssistantApiCoreTypesGovernedDeviceConfigOut"]
            ).optional(),
            "quartzDeviceId": t.string().optional(),
            "canonicalDeviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedDeviceIdOut"])
    types["AssistantApiSettingsHospitalityCardSettingsIn"] = t.struct(
        {
            "showPhotoSwipeGestureTutorial": t.boolean().optional(),
            "youtubeCardConfig": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigIn"
                    ]
                )
            ).optional(),
            "showMediaTapGestureTutorial": t.boolean().optional(),
            "cardConfig": t.array(
                t.proxy(
                    renames["AssistantApiSettingsHospitalityCardSettingsCardConfigIn"]
                )
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsIn"])
    types["AssistantApiSettingsHospitalityCardSettingsOut"] = t.struct(
        {
            "showPhotoSwipeGestureTutorial": t.boolean().optional(),
            "youtubeCardConfig": t.array(
                t.proxy(
                    renames[
                        "AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfigOut"
                    ]
                )
            ).optional(),
            "showMediaTapGestureTutorial": t.boolean().optional(),
            "cardConfig": t.array(
                t.proxy(
                    renames["AssistantApiSettingsHospitalityCardSettingsCardConfigOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsOut"])
    types["TrawlerFetchReplyDataRedirectsIn"] = t.struct(
        {
            "DownloadTime": t.integer().optional(),
            "HttpResponseHeaders": t.string().optional(),
            "TargetUrl": t.string().optional(),
            "RawTargetUrl": t.string().optional(),
            "BadSSLCertificate": t.string().optional(),
            "HttpRequestHeaders": t.string().optional(),
            "HopReuseInfo": t.string().optional(),
            "HopPageNoIndexInfo": t.integer().optional(),
            "HopRobotsInfo": t.integer().optional(),
            "HostId": t.string().optional(),
            "RobotsTxt": t.string().optional(),
            "RefreshTime": t.integer().optional(),
            "Endpoints": t.proxy(renames["TrawlerTCPIPInfoIn"]).optional(),
            "CrawlTimes": t.proxy(renames["TrawlerCrawlTimesIn"]).optional(),
            "Type": t.string().optional(),
            "HTTPResponseCode": t.integer().optional(),
            "HSTSInfo": t.string().optional(),
            "SourceBody": t.proxy(renames["TrawlerFetchBodyDataIn"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataRedirectsIn"])
    types["TrawlerFetchReplyDataRedirectsOut"] = t.struct(
        {
            "DownloadTime": t.integer().optional(),
            "HttpResponseHeaders": t.string().optional(),
            "TargetUrl": t.string().optional(),
            "RawTargetUrl": t.string().optional(),
            "BadSSLCertificate": t.string().optional(),
            "HttpRequestHeaders": t.string().optional(),
            "HopReuseInfo": t.string().optional(),
            "HopPageNoIndexInfo": t.integer().optional(),
            "HopRobotsInfo": t.integer().optional(),
            "HostId": t.string().optional(),
            "RobotsTxt": t.string().optional(),
            "RefreshTime": t.integer().optional(),
            "Endpoints": t.proxy(renames["TrawlerTCPIPInfoOut"]).optional(),
            "CrawlTimes": t.proxy(renames["TrawlerCrawlTimesOut"]).optional(),
            "Type": t.string().optional(),
            "HTTPResponseCode": t.integer().optional(),
            "HSTSInfo": t.string().optional(),
            "SourceBody": t.proxy(renames["TrawlerFetchBodyDataOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataRedirectsOut"])
    types["RepositoryWebrefReferencePageScoresIn"] = t.struct(
        {
            "firstScore": t.number().optional(),
            "selected": t.boolean().optional(),
            "bookScore": t.number().optional(),
            "referencePageScore": t.number().optional(),
            "navboostCoverage": t.number().optional(),
            "medianMentionScore": t.number().optional(),
            "titleCoverage": t.number().optional(),
            "totalSum": t.number().optional(),
            "singleTopicnessV2": t.number().optional(),
            "singleTopicness": t.number().optional(),
            "hasSpecialLinks": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefReferencePageScoresIn"])
    types["RepositoryWebrefReferencePageScoresOut"] = t.struct(
        {
            "firstScore": t.number().optional(),
            "selected": t.boolean().optional(),
            "bookScore": t.number().optional(),
            "referencePageScore": t.number().optional(),
            "navboostCoverage": t.number().optional(),
            "medianMentionScore": t.number().optional(),
            "titleCoverage": t.number().optional(),
            "totalSum": t.number().optional(),
            "singleTopicnessV2": t.number().optional(),
            "singleTopicness": t.number().optional(),
            "hasSpecialLinks": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefReferencePageScoresOut"])
    types["GoogleInternalAppsWaldoV1alphaLocalTimeContextIn"] = t.struct(
        {"timeZone": t.string().optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaLocalTimeContextIn"])
    types["GoogleInternalAppsWaldoV1alphaLocalTimeContextOut"] = t.struct(
        {
            "timeZone": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaLocalTimeContextOut"])
    types["AssistantLogsProviderAnnotationLogIn"] = t.struct(
        {
            "lang": t.string(),
            "localizedNames": t.array(t.string()),
            "packageNames": t.array(t.string()),
        }
    ).named(renames["AssistantLogsProviderAnnotationLogIn"])
    types["AssistantLogsProviderAnnotationLogOut"] = t.struct(
        {
            "lang": t.string(),
            "localizedNames": t.array(t.string()),
            "packageNames": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsProviderAnnotationLogOut"])
    types["GoogleCloudContentwarehouseV1WeightedSchemaPropertyIn"] = t.struct(
        {
            "propertyNames": t.array(t.string()).optional(),
            "documentSchemaName": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1WeightedSchemaPropertyIn"])
    types["GoogleCloudContentwarehouseV1WeightedSchemaPropertyOut"] = t.struct(
        {
            "propertyNames": t.array(t.string()).optional(),
            "documentSchemaName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1WeightedSchemaPropertyOut"])
    types["AssistantApiCoreTypesGovernedColorIn"] = t.struct(
        {
            "blue": t.number().optional(),
            "alpha": t.number().optional(),
            "red": t.number().optional(),
            "green": t.number().optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedColorIn"])
    types["AssistantApiCoreTypesGovernedColorOut"] = t.struct(
        {
            "blue": t.number().optional(),
            "alpha": t.number().optional(),
            "red": t.number().optional(),
            "green": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesGovernedColorOut"])
    types["GeostoreAttributeValueDisplayProtoIn"] = t.struct(
        {"language": t.string(), "synonym": t.string()}
    ).named(renames["GeostoreAttributeValueDisplayProtoIn"])
    types["GeostoreAttributeValueDisplayProtoOut"] = t.struct(
        {
            "language": t.string(),
            "synonym": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAttributeValueDisplayProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "contactEditContext": t.proxy(
                renames["SocialGraphApiProtoContactEditContextIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "contactEditContext": t.proxy(
                renames["SocialGraphApiProtoContactEditContextOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiContactEditContextInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdIn"] = t.struct(
        {"mediaKey": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdOut"] = t.struct(
        {
            "mediaKey": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageIdOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonAttributeIn"] = t.struct(
        {
            "value": t.string(),
            "attributeKey": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonAttributeIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonAttributeOut"] = t.struct(
        {
            "value": t.string(),
            "attributeKey": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonAttributeOut"])
    types["GoogleCloudContentwarehouseV1PropertyArrayIn"] = t.struct(
        {
            "properties": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyIn"])
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyArrayIn"])
    types["GoogleCloudContentwarehouseV1PropertyArrayOut"] = t.struct(
        {
            "properties": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyArrayOut"])
    types["NlpSemanticParsingExpressionStatusIn"] = t.struct(
        {"status": t.string(), "textCompletenessProbability": t.number().optional()}
    ).named(renames["NlpSemanticParsingExpressionStatusIn"])
    types["NlpSemanticParsingExpressionStatusOut"] = t.struct(
        {
            "status": t.string(),
            "textCompletenessProbability": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingExpressionStatusOut"])
    types["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextIn"] = t.struct(
        {
            "nextCommitmentStatus": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserStatusIn"]
            ).optional(),
            "nextCommitmentTime": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextIn"])
    types["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextOut"] = t.struct(
        {
            "nextCommitmentStatus": t.proxy(
                renames["GoogleInternalAppsWaldoV1alphaUserStatusOut"]
            ).optional(),
            "nextCommitmentTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContextOut"])
    types["NlpSemanticParsingModelsMediaSeasonConstraintIn"] = t.struct(
        {
            "rawText": t.string(),
            "relativeIndex": t.integer().optional(),
            "absoluteIndex": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaSeasonConstraintIn"])
    types["NlpSemanticParsingModelsMediaSeasonConstraintOut"] = t.struct(
        {
            "rawText": t.string(),
            "relativeIndex": t.integer().optional(),
            "absoluteIndex": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaSeasonConstraintOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailIn"] = t.struct(
        {
            "signupEmailMetadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataIn"]
            ),
            "value": t.string(),
            "classification": t.string(),
            "displayName": t.string(),
            "formattedType": t.string().optional(),
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataIn"]
            ),
            "contactGroupPreference": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceIn"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "type": t.string().optional(),
            "certificate": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiEmailCertificateIn"]
                )
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailOut"] = t.struct(
        {
            "signupEmailMetadata": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataOut"
                ]
            ),
            "value": t.string(),
            "classification": t.string(),
            "displayName": t.string(),
            "formattedType": t.string().optional(),
            "extendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiEmailExtendedDataOut"]
            ),
            "contactGroupPreference": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreferenceOut"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "type": t.string().optional(),
            "certificate": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiEmailCertificateOut"]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailOut"])
    types["KnowledgeAnswersStringTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "singleToken": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersStringTypeIn"])
    types["KnowledgeAnswersStringTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "singleToken": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersStringTypeOut"])
    types["VendingConsumerProtoTrustedGenomeAnnotationIn"] = t.struct(
        {
            "trustedGenomeHierarchy": t.array(
                t.proxy(renames["VendingConsumerProtoTrustedGenomeHierarchyIn"])
            ).optional(),
            "policy": t.proxy(
                renames["VendingConsumerProtoTrustedGenomePolicyIn"]
            ).optional(),
            "testCode": t.array(t.string()).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeAnnotationIn"])
    types["VendingConsumerProtoTrustedGenomeAnnotationOut"] = t.struct(
        {
            "trustedGenomeHierarchy": t.array(
                t.proxy(renames["VendingConsumerProtoTrustedGenomeHierarchyOut"])
            ).optional(),
            "policy": t.proxy(
                renames["VendingConsumerProtoTrustedGenomePolicyOut"]
            ).optional(),
            "testCode": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomeAnnotationOut"])
    types["NlpSemanticParsingLocalContactLocationIn"] = t.struct(
        {
            "contactType": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationPhoneTypeIn"]
            ).optional(),
            "contact": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationRecipientIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalContactLocationIn"])
    types["NlpSemanticParsingLocalContactLocationOut"] = t.struct(
        {
            "contactType": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationPhoneTypeOut"]
            ).optional(),
            "contact": t.proxy(
                renames["NlpSemanticParsingModelsCommunicationRecipientOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalContactLocationOut"])
    types["GeostorePointWithHeightProtoIn"] = t.struct(
        {
            "point": t.proxy(renames["GeostorePointProtoIn"]),
            "altitudeMeters": t.number().optional(),
        }
    ).named(renames["GeostorePointWithHeightProtoIn"])
    types["GeostorePointWithHeightProtoOut"] = t.struct(
        {
            "point": t.proxy(renames["GeostorePointProtoOut"]),
            "altitudeMeters": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePointWithHeightProtoOut"])
    types["BusinessHoursIn"] = t.struct(
        {
            "dayopen": t.integer(),
            "interval": t.array(t.proxy(renames["BusinessHoursIntervalIn"])),
        }
    ).named(renames["BusinessHoursIn"])
    types["BusinessHoursOut"] = t.struct(
        {
            "dayopen": t.integer(),
            "interval": t.array(t.proxy(renames["BusinessHoursIntervalOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BusinessHoursOut"])
    types["ResearchScamCoscamTokenGroupIn"] = t.struct(
        {
            "tokens": t.array(t.string()).optional(),
            "debugTokenStrings": t.array(t.string()).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["ResearchScamCoscamTokenGroupIn"])
    types["ResearchScamCoscamTokenGroupOut"] = t.struct(
        {
            "tokens": t.array(t.string()).optional(),
            "debugTokenStrings": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamTokenGroupOut"])
    types["NlpSemanticParsingLocalStarRatingsIn"] = t.struct(
        {
            "orMore": t.boolean().optional(),
            "fourAndAHalf": t.boolean(),
            "unspecified": t.boolean(),
            "one": t.boolean(),
            "orFewer": t.boolean(),
            "threeAndAHalf": t.boolean(),
            "two": t.boolean(),
            "twoAndAHalf": t.boolean(),
            "four": t.boolean(),
            "five": t.boolean(),
            "oneAndAHalf": t.boolean(),
            "three": t.boolean(),
        }
    ).named(renames["NlpSemanticParsingLocalStarRatingsIn"])
    types["NlpSemanticParsingLocalStarRatingsOut"] = t.struct(
        {
            "orMore": t.boolean().optional(),
            "fourAndAHalf": t.boolean(),
            "unspecified": t.boolean(),
            "one": t.boolean(),
            "orFewer": t.boolean(),
            "threeAndAHalf": t.boolean(),
            "two": t.boolean(),
            "twoAndAHalf": t.boolean(),
            "four": t.boolean(),
            "five": t.boolean(),
            "oneAndAHalf": t.boolean(),
            "three": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalStarRatingsOut"])
    types["LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoIn"] = t.struct(
        {
            "minWaitTimeSec": t.string().optional(),
            "serviceType": t.string().optional(),
            "maxWaitTimeSec": t.string().optional(),
            "minDeliveryFee": t.proxy(renames["GoogleTypeMoneyIn"]).optional(),
            "availablePartnerInfo": t.array(
                t.proxy(
                    renames[
                        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoIn"])
    types[
        "LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoOut"
    ] = t.struct(
        {
            "minWaitTimeSec": t.string().optional(),
            "serviceType": t.string().optional(),
            "maxWaitTimeSec": t.string().optional(),
            "minDeliveryFee": t.proxy(renames["GoogleTypeMoneyOut"]).optional(),
            "availablePartnerInfo": t.array(
                t.proxy(
                    renames[
                        "LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfoOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfoOut"]
    )
    types["RepositoryWebrefWebrefStatusIn"] = t.struct(
        {
            "version": t.integer().optional(),
            "utilStatus": t.proxy(renames["UtilStatusProtoIn"]).optional(),
            "dataEpoch": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefWebrefStatusIn"])
    types["RepositoryWebrefWebrefStatusOut"] = t.struct(
        {
            "version": t.integer().optional(),
            "utilStatus": t.proxy(renames["UtilStatusProtoOut"]).optional(),
            "dataEpoch": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefStatusOut"])
    types["ImageBaseThumbnailMetadataIn"] = t.struct(
        {
            "originalHeight": t.integer(),
            "width": t.integer().optional(),
            "byteSize": t.integer().optional(),
            "docid": t.string().optional(),
            "type": t.string(),
            "crops": t.proxy(renames["ContentAwareCropsIndexingIn"]).optional(),
            "deepCrop": t.proxy(renames["DeepCropIndexingIn"]).optional(),
            "height": t.integer().optional(),
            "fprint": t.string().optional(),
            "encryptedDocid": t.string().optional(),
            "mimeType": t.string().optional(),
            "originalWidth": t.integer().optional(),
            "deepCropPixels": t.proxy(renames["DeepCropPixelsIn"]).optional(),
        }
    ).named(renames["ImageBaseThumbnailMetadataIn"])
    types["ImageBaseThumbnailMetadataOut"] = t.struct(
        {
            "originalHeight": t.integer(),
            "width": t.integer().optional(),
            "byteSize": t.integer().optional(),
            "docid": t.string().optional(),
            "type": t.string(),
            "crops": t.proxy(renames["ContentAwareCropsIndexingOut"]).optional(),
            "deepCrop": t.proxy(renames["DeepCropIndexingOut"]).optional(),
            "height": t.integer().optional(),
            "fprint": t.string().optional(),
            "encryptedDocid": t.string().optional(),
            "mimeType": t.string().optional(),
            "originalWidth": t.integer().optional(),
            "deepCropPixels": t.proxy(renames["DeepCropPixelsOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageBaseThumbnailMetadataOut"])
    types["ResearchScamTokenNamespaceIn"] = t.struct(
        {
            "uint64BlacklistTokens": t.array(t.string()),
            "uint64Tokens": t.array(t.string()),
            "stringTokens": t.array(t.string()).optional(),
            "namespace": t.string().optional(),
            "stringBlacklistTokens": t.array(t.string()).optional(),
        }
    ).named(renames["ResearchScamTokenNamespaceIn"])
    types["ResearchScamTokenNamespaceOut"] = t.struct(
        {
            "uint64BlacklistTokens": t.array(t.string()),
            "uint64Tokens": t.array(t.string()),
            "stringTokens": t.array(t.string()).optional(),
            "namespace": t.string().optional(),
            "stringBlacklistTokens": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamTokenNamespaceOut"])
    types["StorageGraphBfgLmsPolicyMetadataIn"] = t.struct(
        {
            "regionsDisallowed": t.proxy(renames["KeGovernanceTypedRegionsIn"]),
            "clientIdsAllowed": t.array(t.string()),
            "requiresLinkback": t.boolean(),
            "requiresAttribution": t.boolean(),
            "requiresFirstPartyOnly": t.boolean(),
            "regionsAllowed": t.proxy(renames["KeGovernanceTypedRegionsIn"]),
            "modificationsAllowed": t.array(t.string()).optional(),
            "requiresShareAlike": t.boolean(),
            "isEditorial": t.boolean(),
        }
    ).named(renames["StorageGraphBfgLmsPolicyMetadataIn"])
    types["StorageGraphBfgLmsPolicyMetadataOut"] = t.struct(
        {
            "regionsDisallowed": t.proxy(renames["KeGovernanceTypedRegionsOut"]),
            "clientIdsAllowed": t.array(t.string()),
            "requiresLinkback": t.boolean(),
            "requiresAttribution": t.boolean(),
            "requiresFirstPartyOnly": t.boolean(),
            "regionsAllowed": t.proxy(renames["KeGovernanceTypedRegionsOut"]),
            "modificationsAllowed": t.array(t.string()).optional(),
            "requiresShareAlike": t.boolean(),
            "isEditorial": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgLmsPolicyMetadataOut"])
    types[
        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionIn"
    ] = t.struct(
        {
            "discretizedStyleImageTypeConfidence": t.integer().optional(),
            "styleImageType": t.string().optional(),
        }
    ).named(
        renames["LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionIn"]
    )
    types[
        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionOut"
    ] = t.struct(
        {
            "discretizedStyleImageTypeConfidence": t.integer().optional(),
            "styleImageType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionOut"]
    )
    types["AnchorsAnchorSourceIn"] = t.struct(
        {
            "compressedUrl": t.string().optional(),
            "packedIpaddress": t.string().optional(),
            "spamrank": t.integer().optional(),
            "ipaddr": t.integer().optional(),
            "docid": t.string().optional(),
            "homePageInfo": t.integer().optional(),
            "indyrank": t.integer().optional(),
            "additionalInfo": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "outsites": t.integer().optional(),
            "seglanguage": t.integer().optional(),
            "pageTags": t.array(t.integer()).optional(),
            "webtableKey": t.string().optional(),
            "spamscore2": t.integer().optional(),
            "spamscore1": t.integer().optional(),
            "nsr": t.integer().optional(),
            "outdegree": t.integer(),
            "linkhash": t.string().optional(),
            "localCountryCodes": t.array(t.integer()).optional(),
            "cluster": t.integer().optional(),
            "site": t.string(),
            "doclength": t.integer().optional(),
            "language": t.integer().optional(),
            "crawlTimestamp": t.string().optional(),
            "pagerank": t.integer().optional(),
            "pagerankNs": t.integer().optional(),
        }
    ).named(renames["AnchorsAnchorSourceIn"])
    types["AnchorsAnchorSourceOut"] = t.struct(
        {
            "compressedUrl": t.string().optional(),
            "packedIpaddress": t.string().optional(),
            "spamrank": t.integer().optional(),
            "ipaddr": t.integer().optional(),
            "docid": t.string().optional(),
            "homePageInfo": t.integer().optional(),
            "indyrank": t.integer().optional(),
            "additionalInfo": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "outsites": t.integer().optional(),
            "seglanguage": t.integer().optional(),
            "pageTags": t.array(t.integer()).optional(),
            "webtableKey": t.string().optional(),
            "spamscore2": t.integer().optional(),
            "spamscore1": t.integer().optional(),
            "nsr": t.integer().optional(),
            "outdegree": t.integer(),
            "linkhash": t.string().optional(),
            "localCountryCodes": t.array(t.integer()).optional(),
            "cluster": t.integer().optional(),
            "site": t.string(),
            "doclength": t.integer().optional(),
            "language": t.integer().optional(),
            "crawlTimestamp": t.string().optional(),
            "pagerank": t.integer().optional(),
            "pagerankNs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AnchorsAnchorSourceOut"])
    types["GeostoreKnowledgeGraphReferenceProtoIn"] = t.struct(
        {"id": t.string().optional()}
    ).named(renames["GeostoreKnowledgeGraphReferenceProtoIn"])
    types["GeostoreKnowledgeGraphReferenceProtoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreKnowledgeGraphReferenceProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeIn"] = t.struct(
        {
            "person": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclIn"
                ]
            ).optional(),
            "allUsers": t.boolean().optional(),
            "membership": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclIn"
                ]
            ),
            "domainUsers": t.boolean().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeIn"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeOut"] = t.struct(
        {
            "person": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclOut"
                ]
            ).optional(),
            "allUsers": t.boolean().optional(),
            "membership": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclOut"
                ]
            ),
            "domainUsers": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeOut"])
    types["VideoFileSphericalMetadataCubemapProjectionIn"] = t.struct(
        {"padding": t.integer().optional(), "layout": t.integer().optional()}
    ).named(renames["VideoFileSphericalMetadataCubemapProjectionIn"])
    types["VideoFileSphericalMetadataCubemapProjectionOut"] = t.struct(
        {
            "padding": t.integer().optional(),
            "layout": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataCubemapProjectionOut"])
    types["CompositeDocLiveExperimentInfoPerLiveExperimentInfoIn"] = t.struct(
        {
            "experimentId": t.string().optional(),
            "partialCdoc": t.proxy(renames["CompositeDocIn"]).optional(),
        }
    ).named(renames["CompositeDocLiveExperimentInfoPerLiveExperimentInfoIn"])
    types["CompositeDocLiveExperimentInfoPerLiveExperimentInfoOut"] = t.struct(
        {
            "experimentId": t.string().optional(),
            "partialCdoc": t.proxy(renames["CompositeDocOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocLiveExperimentInfoPerLiveExperimentInfoOut"])
    types["GoodocSemanticLabelColumnDetailsIn"] = t.struct(
        {"Columns": t.integer(), "Column": t.integer()}
    ).named(renames["GoodocSemanticLabelColumnDetailsIn"])
    types["GoodocSemanticLabelColumnDetailsOut"] = t.struct(
        {
            "Columns": t.integer(),
            "Column": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelColumnDetailsOut"])
    types["AssistantApiLensPerceptionCapabilitiesIn"] = t.struct(
        {
            "hasLensPerception": t.boolean().optional(),
            "isLensDirectIntentAvailable": t.boolean().optional(),
            "lensCapabilities": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesIn"]
            ).optional(),
            "isLensLiveViewfinderAvailable": t.boolean().optional(),
            "isLensPostCaptureAvailable": t.boolean().optional(),
        }
    ).named(renames["AssistantApiLensPerceptionCapabilitiesIn"])
    types["AssistantApiLensPerceptionCapabilitiesOut"] = t.struct(
        {
            "hasLensPerception": t.boolean().optional(),
            "isLensDirectIntentAvailable": t.boolean().optional(),
            "lensCapabilities": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOut"]
            ).optional(),
            "isLensLiveViewfinderAvailable": t.boolean().optional(),
            "isLensPostCaptureAvailable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLensPerceptionCapabilitiesOut"])
    types["RepositoryWebrefProductMetadataIn"] = t.struct(
        {
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsIn"]
            ).optional(),
            "productLineId": t.array(t.string()).optional(),
            "variantClusterId": t.array(t.string()).optional(),
            "type": t.string(),
        }
    ).named(renames["RepositoryWebrefProductMetadataIn"])
    types["RepositoryWebrefProductMetadataOut"] = t.struct(
        {
            "shoppingIds": t.proxy(
                renames["KnowledgeAnswersIntentQueryShoppingIdsOut"]
            ).optional(),
            "productLineId": t.array(t.string()).optional(),
            "variantClusterId": t.array(t.string()).optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefProductMetadataOut"])
    types["RepositoryWebrefAggregatedEntityNameScoresIn"] = t.struct(
        {"entityScore": t.array(t.proxy(renames["RepositoryWebrefEntityNameScoreIn"]))}
    ).named(renames["RepositoryWebrefAggregatedEntityNameScoresIn"])
    types["RepositoryWebrefAggregatedEntityNameScoresOut"] = t.struct(
        {
            "entityScore": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameScoreOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAggregatedEntityNameScoresOut"])
    types["AssistantLogsMediaDeviceSelectionDecisionSummaryIn"] = t.struct(
        {
            "deviceSelectionReason": t.string(),
            "miscSelectionSignal": t.array(t.string()),
            "deviceSelectionPreferenceUsed": t.string(),
        }
    ).named(renames["AssistantLogsMediaDeviceSelectionDecisionSummaryIn"])
    types["AssistantLogsMediaDeviceSelectionDecisionSummaryOut"] = t.struct(
        {
            "deviceSelectionReason": t.string(),
            "miscSelectionSignal": t.array(t.string()),
            "deviceSelectionPreferenceUsed": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsMediaDeviceSelectionDecisionSummaryOut"])
    types["VideoVideoStreamInfoVideoStreamCleanApertureIn"] = t.struct(
        {
            "verticalOffset": t.integer(),
            "horizontalOffset": t.integer(),
            "height": t.integer(),
            "width": t.integer(),
        }
    ).named(renames["VideoVideoStreamInfoVideoStreamCleanApertureIn"])
    types["VideoVideoStreamInfoVideoStreamCleanApertureOut"] = t.struct(
        {
            "verticalOffset": t.integer(),
            "horizontalOffset": t.integer(),
            "height": t.integer(),
            "width": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoVideoStreamCleanApertureOut"])
    types["SocialGraphApiProtoPromptIn"] = t.struct(
        {
            "notificationTriggers": t.array(
                t.proxy(renames["SocialGraphApiProtoNotificationTriggerIn"])
            ).optional(),
            "content": t.proxy(renames["SocialGraphApiProtoPromptContentIn"]),
            "lastDismissDate": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "activeState": t.string().optional(),
            "purpose": t.string().optional(),
            "uniquePromptId": t.string().optional(),
            "recurrence": t.proxy(
                renames["SocialGraphApiProtoRecurrenceIn"]
            ).optional(),
        }
    ).named(renames["SocialGraphApiProtoPromptIn"])
    types["SocialGraphApiProtoPromptOut"] = t.struct(
        {
            "notificationTriggers": t.array(
                t.proxy(renames["SocialGraphApiProtoNotificationTriggerOut"])
            ).optional(),
            "content": t.proxy(renames["SocialGraphApiProtoPromptContentOut"]),
            "lastDismissDate": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "activeState": t.string().optional(),
            "purpose": t.string().optional(),
            "uniquePromptId": t.string().optional(),
            "recurrence": t.proxy(
                renames["SocialGraphApiProtoRecurrenceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPromptOut"])
    types["LegalCitationCourtDocumentPerDocketInfoIn"] = t.struct(
        {
            "Topic": t.string().optional(),
            "Petitioner": t.array(t.proxy(renames["LegalPersonIn"])).optional(),
            "DocketID": t.string().optional(),
            "Respondent": t.array(t.proxy(renames["LegalPersonIn"])).optional(),
            "RespondentCounsel": t.array(t.proxy(renames["LegalPersonIn"])).optional(),
            "PetitionerCounsel": t.array(t.proxy(renames["LegalPersonIn"])).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentPerDocketInfoIn"])
    types["LegalCitationCourtDocumentPerDocketInfoOut"] = t.struct(
        {
            "Topic": t.string().optional(),
            "Petitioner": t.array(t.proxy(renames["LegalPersonOut"])).optional(),
            "DocketID": t.string().optional(),
            "Respondent": t.array(t.proxy(renames["LegalPersonOut"])).optional(),
            "RespondentCounsel": t.array(t.proxy(renames["LegalPersonOut"])).optional(),
            "PetitionerCounsel": t.array(t.proxy(renames["LegalPersonOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentPerDocketInfoOut"])
    types["KnowledgeAnswersIntentModifiersIn"] = t.struct(
        {
            "definiteness": t.string(),
            "alternateLanguage": t.string().optional(),
            "polarQuestion": t.boolean().optional(),
            "plurality": t.string(),
            "mood": t.string().optional(),
            "tense": t.string(),
            "language": t.string().optional(),
            "sentiment": t.proxy(renames["SentimentSentimentIn"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentModifiersIn"])
    types["KnowledgeAnswersIntentModifiersOut"] = t.struct(
        {
            "definiteness": t.string(),
            "alternateLanguage": t.string().optional(),
            "polarQuestion": t.boolean().optional(),
            "plurality": t.string(),
            "mood": t.string().optional(),
            "tense": t.string(),
            "language": t.string().optional(),
            "sentiment": t.proxy(renames["SentimentSentimentOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentModifiersOut"])
    types["VideoFileSphericalMetadataEquirectProjectionIn"] = t.struct(
        {
            "projectionBoundsLeft": t.integer(),
            "projectionBoundsRight": t.integer(),
            "projectionBoundsBottom": t.integer(),
            "projectionBoundsTop": t.integer(),
        }
    ).named(renames["VideoFileSphericalMetadataEquirectProjectionIn"])
    types["VideoFileSphericalMetadataEquirectProjectionOut"] = t.struct(
        {
            "projectionBoundsLeft": t.integer(),
            "projectionBoundsRight": t.integer(),
            "projectionBoundsBottom": t.integer(),
            "projectionBoundsTop": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataEquirectProjectionOut"])
    types["GeostoreDoodleProtoIn"] = t.struct({"type": t.string().optional()}).named(
        renames["GeostoreDoodleProtoIn"]
    )
    types["GeostoreDoodleProtoOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDoodleProtoOut"])
    types["NlpSaftHyperlinkIn"] = t.struct(
        {
            "anchorText": t.string().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "byteEnd": t.integer().optional(),
            "byteStart": t.integer().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["NlpSaftHyperlinkIn"])
    types["NlpSaftHyperlinkOut"] = t.struct(
        {
            "anchorText": t.string().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "byteEnd": t.integer().optional(),
            "byteStart": t.integer().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftHyperlinkOut"])
    types["AssistantPrefulfillmentRankerPrefulfillmentSignalsIn"] = t.struct(
        {
            "maskCandidateLevelFeatures": t.boolean().optional(),
            "predictedIntentConfidence": t.number().optional(),
            "rankerName": t.string().optional(),
            "topHypothesisConfidence": t.number().optional(),
            "isFeasible": t.boolean().optional(),
            "numGroundableArgs": t.number().optional(),
            "intentName": t.string().optional(),
            "numConstraints": t.number().optional(),
            "maxHgrScoreAcrossBindingSets": t.number().optional(),
            "fulfillableDominantMedia": t.boolean().optional(),
            "isMediaControlIntent": t.boolean().optional(),
            "kscorerRank": t.integer().optional(),
            "deepMediaDominant": t.boolean().optional(),
            "pq2tVsIbstCosine": t.number().optional(),
            "numVariablesGrounded": t.number().optional(),
            "isVideoIntent": t.boolean().optional(),
            "isFullyGrounded": t.boolean().optional(),
            "pq2tVsAssistantIbstCosine": t.number().optional(),
            "subIntentType": t.string().optional(),
            "inQueryMaxEffectiveArgSpanLength": t.number().optional(),
            "parsingScoreMse8BucketId": t.integer().optional(),
            "laaFeatures": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesIn"]
            ).optional(),
            "bindingSetPauis": t.number().optional(),
            "phase": t.string().optional(),
            "isPlayGenericMusic": t.boolean().optional(),
            "intentNameAuisScore": t.number().optional(),
            "intentNamePauis": t.number().optional(),
            "groundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerGroundingProviderFeaturesIn"]
            ).optional(),
            "bindingSetAuis": t.number().optional(),
            "nspRank": t.integer().optional(),
            "numGroundedArgs": t.number().optional(),
            "numAlternativeHypothesis": t.number().optional(),
            "numConstraintsSatisfied": t.number().optional(),
            "groundabilityScore": t.number().optional(),
            "generatedByLegacyAquaDomain": t.boolean().optional(),
            "intentNameAuisScoreExp": t.number().optional(),
            "calibratedParsingScore": t.number().optional(),
            "hasAnswerGroup": t.boolean().optional(),
            "dominant": t.boolean().optional(),
            "numVariables": t.number().optional(),
            "verticalConfidenceScore": t.number().optional(),
            "effectiveArgSpanLength": t.number().optional(),
            "searchDispatch": t.string().optional(),
            "isPodcastIntent": t.boolean().optional(),
        }
    ).named(renames["AssistantPrefulfillmentRankerPrefulfillmentSignalsIn"])
    types["AssistantPrefulfillmentRankerPrefulfillmentSignalsOut"] = t.struct(
        {
            "maskCandidateLevelFeatures": t.boolean().optional(),
            "predictedIntentConfidence": t.number().optional(),
            "rankerName": t.string().optional(),
            "topHypothesisConfidence": t.number().optional(),
            "isFeasible": t.boolean().optional(),
            "numGroundableArgs": t.number().optional(),
            "intentName": t.string().optional(),
            "numConstraints": t.number().optional(),
            "maxHgrScoreAcrossBindingSets": t.number().optional(),
            "fulfillableDominantMedia": t.boolean().optional(),
            "isMediaControlIntent": t.boolean().optional(),
            "kscorerRank": t.integer().optional(),
            "deepMediaDominant": t.boolean().optional(),
            "pq2tVsIbstCosine": t.number().optional(),
            "numVariablesGrounded": t.number().optional(),
            "isVideoIntent": t.boolean().optional(),
            "isFullyGrounded": t.boolean().optional(),
            "pq2tVsAssistantIbstCosine": t.number().optional(),
            "subIntentType": t.string().optional(),
            "inQueryMaxEffectiveArgSpanLength": t.number().optional(),
            "parsingScoreMse8BucketId": t.integer().optional(),
            "laaFeatures": t.proxy(
                renames["AssistantGroundingRankerLaaFeaturesOut"]
            ).optional(),
            "bindingSetPauis": t.number().optional(),
            "phase": t.string().optional(),
            "isPlayGenericMusic": t.boolean().optional(),
            "intentNameAuisScore": t.number().optional(),
            "intentNamePauis": t.number().optional(),
            "groundingProviderFeatures": t.proxy(
                renames["AssistantGroundingRankerGroundingProviderFeaturesOut"]
            ).optional(),
            "bindingSetAuis": t.number().optional(),
            "nspRank": t.integer().optional(),
            "numGroundedArgs": t.number().optional(),
            "numAlternativeHypothesis": t.number().optional(),
            "numConstraintsSatisfied": t.number().optional(),
            "groundabilityScore": t.number().optional(),
            "generatedByLegacyAquaDomain": t.boolean().optional(),
            "intentNameAuisScoreExp": t.number().optional(),
            "calibratedParsingScore": t.number().optional(),
            "hasAnswerGroup": t.boolean().optional(),
            "dominant": t.boolean().optional(),
            "numVariables": t.number().optional(),
            "verticalConfidenceScore": t.number().optional(),
            "effectiveArgSpanLength": t.number().optional(),
            "searchDispatch": t.string().optional(),
            "isPodcastIntent": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantPrefulfillmentRankerPrefulfillmentSignalsOut"])
    types["KnowledgeAnswersOpaqueDeviceUserIdentityTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceUserIdentityTypeIn"])
    types["KnowledgeAnswersOpaqueDeviceUserIdentityTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueDeviceUserIdentityTypeOut"])
    types["NlxDataSchemaSentenceIn"] = t.struct(
        {
            "text": t.string().optional(),
            "paragraph": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
        }
    ).named(renames["NlxDataSchemaSentenceIn"])
    types["NlxDataSchemaSentenceOut"] = t.struct(
        {
            "text": t.string().optional(),
            "paragraph": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaSentenceOut"])
    types["HomeGraphCommonTraitRoutingHintsIn"] = t.struct(
        {"cloudFulfillmentOnly": t.boolean().optional(), "trait": t.string().optional()}
    ).named(renames["HomeGraphCommonTraitRoutingHintsIn"])
    types["HomeGraphCommonTraitRoutingHintsOut"] = t.struct(
        {
            "cloudFulfillmentOnly": t.boolean().optional(),
            "trait": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HomeGraphCommonTraitRoutingHintsOut"])
    types["GeostoreFoodMenuItemOptionProtoPortionSizeIn"] = t.struct(
        {
            "quantity": t.integer(),
            "unit": t.array(t.proxy(renames["GeostorePriceListNameInfoProtoIn"])),
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoPortionSizeIn"])
    types["GeostoreFoodMenuItemOptionProtoPortionSizeOut"] = t.struct(
        {
            "quantity": t.integer(),
            "unit": t.array(t.proxy(renames["GeostorePriceListNameInfoProtoOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoPortionSizeOut"])
    types["NlpSemanticParsingEntitySourceDataIn"] = t.struct(
        {"entitySources": t.array(t.string()).optional()}
    ).named(renames["NlpSemanticParsingEntitySourceDataIn"])
    types["NlpSemanticParsingEntitySourceDataOut"] = t.struct(
        {
            "entitySources": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingEntitySourceDataOut"])
    types["SmartphonePerDocDataIn"] = t.struct(
        {
            "maximumFlashRatio": t.number().optional(),
            "isErrorPage": t.boolean().optional(),
            "DEPRECATEDMobileHomepageDocid": t.string().optional(),
            "isWebErrorMobileContent": t.boolean().optional(),
            "isN1Redirect": t.boolean().optional(),
            "adsDensityInterstitialViolationStrength": t.integer().optional(),
            "isSmartphoneOptimized": t.boolean().optional(),
            "violatesMobileInterstitialPolicy": t.boolean().optional(),
            "DEPRECATEDDesktopCanonicalDocid": t.string().optional(),
        }
    ).named(renames["SmartphonePerDocDataIn"])
    types["SmartphonePerDocDataOut"] = t.struct(
        {
            "maximumFlashRatio": t.number().optional(),
            "isErrorPage": t.boolean().optional(),
            "DEPRECATEDMobileHomepageDocid": t.string().optional(),
            "isWebErrorMobileContent": t.boolean().optional(),
            "isN1Redirect": t.boolean().optional(),
            "adsDensityInterstitialViolationStrength": t.integer().optional(),
            "isSmartphoneOptimized": t.boolean().optional(),
            "violatesMobileInterstitialPolicy": t.boolean().optional(),
            "DEPRECATEDDesktopCanonicalDocid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SmartphonePerDocDataOut"])
    types["QualitySalientTermsDocDataIn"] = t.struct(
        {
            "headVolumeRatio": t.number().optional(),
            "virtualVolume": t.number().optional(),
            "signalData": t.array(
                t.proxy(renames["QualitySalientTermsSignalDataIn"])
            ).optional(),
            "language": t.string().optional(),
            "confidence": t.number().optional(),
        }
    ).named(renames["QualitySalientTermsDocDataIn"])
    types["QualitySalientTermsDocDataOut"] = t.struct(
        {
            "headVolumeRatio": t.number().optional(),
            "virtualVolume": t.number().optional(),
            "signalData": t.array(
                t.proxy(renames["QualitySalientTermsSignalDataOut"])
            ).optional(),
            "language": t.string().optional(),
            "confidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientTermsDocDataOut"])
    types["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataIn"] = t.struct(
        {
            "packageIdFingerprint": t.string().optional(),
            "perAppInfoEncoded": t.string().optional(),
            "indexStatus": t.string(),
        }
    ).named(renames["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataIn"])
    types["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataOut"] = t.struct(
        {
            "packageIdFingerprint": t.string().optional(),
            "perAppInfoEncoded": t.string().optional(),
            "indexStatus": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataOut"])
    types["OceanDocTagContributorIn"] = t.struct(
        {"type": t.integer().optional(), "name": t.string()}
    ).named(renames["OceanDocTagContributorIn"])
    types["OceanDocTagContributorOut"] = t.struct(
        {
            "type": t.integer().optional(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagContributorOut"])
    types["HtmlrenderWebkitHeadlessProtoImageIn"] = t.struct(
        {
            "width": t.integer().optional(),
            "data": t.string().optional(),
            "pageNumber": t.integer().optional(),
            "viewport": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ).optional(),
            "height": t.integer(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoImageIn"])
    types["HtmlrenderWebkitHeadlessProtoImageOut"] = t.struct(
        {
            "width": t.integer().optional(),
            "data": t.string().optional(),
            "pageNumber": t.integer().optional(),
            "viewport": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ).optional(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoImageOut"])
    types["PhotosVisionObjectrecFeatureVectorIn"] = t.struct(
        {"floatData": t.array(t.number()).optional()}
    ).named(renames["PhotosVisionObjectrecFeatureVectorIn"])
    types["PhotosVisionObjectrecFeatureVectorOut"] = t.struct(
        {
            "floatData": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecFeatureVectorOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoIn"] = t.struct(
        {
            "rawMatchQualityScore": t.number().optional(),
            "stExpressionResults": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoOut"] = t.struct(
        {
            "rawMatchQualityScore": t.number().optional(),
            "stExpressionResults": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoOut"])
    types["RepositoryWebrefDisplayNameIn"] = t.struct(
        {
            "language": t.string().optional(),
            "subjectName": t.string().optional(),
            "canonicalName": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefDisplayNameIn"])
    types["RepositoryWebrefDisplayNameOut"] = t.struct(
        {
            "language": t.string().optional(),
            "subjectName": t.string().optional(),
            "canonicalName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDisplayNameOut"])
    types["TrawlerHostBucketDataUrlListIn"] = t.struct(
        {
            "ClientCanCrawl": t.boolean().optional(),
            "PartnerTotalUsedQps": t.number().optional(),
            "NumCurrentFetches": t.integer().optional(),
            "IsDefaultNode": t.boolean().optional(),
            "RequestorFp": t.string().optional(),
            "RequestType": t.string().optional(),
            "PartnerTotalCapacityQps": t.number().optional(),
            "IsListForUrl": t.boolean().optional(),
            "NumUrls": t.integer().optional(),
        }
    ).named(renames["TrawlerHostBucketDataUrlListIn"])
    types["TrawlerHostBucketDataUrlListOut"] = t.struct(
        {
            "ClientCanCrawl": t.boolean().optional(),
            "PartnerTotalUsedQps": t.number().optional(),
            "NumCurrentFetches": t.integer().optional(),
            "IsDefaultNode": t.boolean().optional(),
            "RequestorFp": t.string().optional(),
            "RequestType": t.string().optional(),
            "PartnerTotalCapacityQps": t.number().optional(),
            "IsListForUrl": t.boolean().optional(),
            "NumUrls": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerHostBucketDataUrlListOut"])
    types["IndexingSignalAggregatorAgeWeightedCoverageDataIn"] = t.struct(
        {
            "impressions": t.number(),
            "firstCoverageTimestamp": t.string().optional(),
            "lastPseudoImpressionsDateInDays": t.integer().optional(),
            "urlfp": t.string().optional(),
            "intervalData": t.proxy(
                renames["IndexingSignalAggregatorAdaptiveIntervalDataIn"]
            ).optional(),
            "clicksUnclassified": t.number(),
            "luDwells": t.number().optional(),
            "totalChances": t.string().optional(),
            "lastGoodClickDateInDays": t.integer().optional(),
            "clicksTotal": t.number(),
            "url": t.string(),
            "clicksGood": t.number(),
            "ctrWeightedImpressions": t.number(),
            "clicksImage": t.number(),
            "firstCoveragePagerankNs": t.integer().optional(),
            "lastImpressionDateInDays": t.integer().optional(),
            "firstBaseCoverageTimestamp": t.string().optional(),
            "coverageTimestamp": t.string().optional(),
            "averageChanceTime": t.number().optional(),
            "clicksBad": t.number(),
            "language": t.integer(),
            "lastDwellDateInDays": t.integer().optional(),
            "chances": t.number().optional(),
            "dwells": t.number().optional(),
            "firstseen": t.string(),
            "lastLuDwellDateInDays": t.integer().optional(),
            "repid": t.string().optional(),
        }
    ).named(renames["IndexingSignalAggregatorAgeWeightedCoverageDataIn"])
    types["IndexingSignalAggregatorAgeWeightedCoverageDataOut"] = t.struct(
        {
            "impressions": t.number(),
            "firstCoverageTimestamp": t.string().optional(),
            "lastPseudoImpressionsDateInDays": t.integer().optional(),
            "urlfp": t.string().optional(),
            "intervalData": t.proxy(
                renames["IndexingSignalAggregatorAdaptiveIntervalDataOut"]
            ).optional(),
            "clicksUnclassified": t.number(),
            "luDwells": t.number().optional(),
            "totalChances": t.string().optional(),
            "lastGoodClickDateInDays": t.integer().optional(),
            "clicksTotal": t.number(),
            "url": t.string(),
            "clicksGood": t.number(),
            "ctrWeightedImpressions": t.number(),
            "clicksImage": t.number(),
            "firstCoveragePagerankNs": t.integer().optional(),
            "lastImpressionDateInDays": t.integer().optional(),
            "firstBaseCoverageTimestamp": t.string().optional(),
            "coverageTimestamp": t.string().optional(),
            "averageChanceTime": t.number().optional(),
            "clicksBad": t.number(),
            "language": t.integer(),
            "lastDwellDateInDays": t.integer().optional(),
            "chances": t.number().optional(),
            "dwells": t.number().optional(),
            "firstseen": t.string(),
            "lastLuDwellDateInDays": t.integer().optional(),
            "repid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorAgeWeightedCoverageDataOut"])
    types["ResearchScienceSearchSourceUrlDocjoinInfoIn"] = t.struct(
        {
            "latestPageUpdateDate": t.string().optional(),
            "title": t.string().optional(),
            "docid": t.string().optional(),
            "salientTerms": t.proxy(
                renames["QualitySalientTermsSalientTermSetIn"]
            ).optional(),
            "petacatInfo": t.proxy(
                renames["FatcatCompactDocClassificationIn"]
            ).optional(),
            "displayUrl": t.string().optional(),
            "scholarInfo": t.proxy(renames["ScienceIndexSignalIn"]).optional(),
            "topEntity": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityIn"])
            ).optional(),
            "webrefEntity": t.array(
                t.proxy(
                    renames[
                        "ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoIn"
                    ]
                )
            ).optional(),
            "sporeGraphMid": t.array(t.string()).optional(),
            "dataSource": t.string(),
            "languageCode": t.string().optional(),
            "indexTier": t.array(t.string()).optional(),
            "navboostQuery": t.array(
                t.proxy(renames["ResearchScienceSearchNavboostQueryInfoIn"])
            ).optional(),
            "pagerank": t.integer().optional(),
            "url": t.string().optional(),
        }
    ).named(renames["ResearchScienceSearchSourceUrlDocjoinInfoIn"])
    types["ResearchScienceSearchSourceUrlDocjoinInfoOut"] = t.struct(
        {
            "latestPageUpdateDate": t.string().optional(),
            "title": t.string().optional(),
            "docid": t.string().optional(),
            "salientTerms": t.proxy(
                renames["QualitySalientTermsSalientTermSetOut"]
            ).optional(),
            "petacatInfo": t.proxy(
                renames["FatcatCompactDocClassificationOut"]
            ).optional(),
            "displayUrl": t.string().optional(),
            "scholarInfo": t.proxy(renames["ScienceIndexSignalOut"]).optional(),
            "topEntity": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityOut"])
            ).optional(),
            "webrefEntity": t.array(
                t.proxy(
                    renames[
                        "ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoOut"
                    ]
                )
            ).optional(),
            "sporeGraphMid": t.array(t.string()).optional(),
            "dataSource": t.string(),
            "languageCode": t.string().optional(),
            "indexTier": t.array(t.string()).optional(),
            "navboostQuery": t.array(
                t.proxy(renames["ResearchScienceSearchNavboostQueryInfoOut"])
            ).optional(),
            "pagerank": t.integer().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchSourceUrlDocjoinInfoOut"])
    types["KnowledgeAnswersMarkerPolarQuestionIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersMarkerPolarQuestionIn"])
    types["KnowledgeAnswersMarkerPolarQuestionOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersMarkerPolarQuestionOut"])
    types["GeostoreLanguageTaggedTextProtoIn"] = t.struct(
        {"text": t.string().optional(), "language": t.string().optional()}
    ).named(renames["GeostoreLanguageTaggedTextProtoIn"])
    types["GeostoreLanguageTaggedTextProtoOut"] = t.struct(
        {
            "text": t.string().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreLanguageTaggedTextProtoOut"])
    types["GoogleTypeDateIn"] = t.struct(
        {
            "month": t.integer().optional(),
            "year": t.integer().optional(),
            "day": t.integer().optional(),
        }
    ).named(renames["GoogleTypeDateIn"])
    types["GoogleTypeDateOut"] = t.struct(
        {
            "month": t.integer().optional(),
            "year": t.integer().optional(),
            "day": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeDateOut"])
    types["VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampIn"] = t.struct(
        {
            "labelEndCharIndex": t.string(),
            "labelBeginCharIndex": t.string().optional(),
            "timeMs": t.string().optional(),
            "isSentenceStart": t.boolean().optional(),
            "asrConfidence": t.number().optional(),
        }
    ).named(renames["VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampIn"])
    types["VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampOut"] = t.struct(
        {
            "labelEndCharIndex": t.string(),
            "labelBeginCharIndex": t.string().optional(),
            "timeMs": t.string().optional(),
            "isSentenceStart": t.boolean().optional(),
            "asrConfidence": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestampOut"])
    types["AssistantGroundingRankerLaaFeaturesProviderIn"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesIn"]
            )
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesProviderIn"])
    types["AssistantGroundingRankerLaaFeaturesProviderOut"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesProviderOut"])
    types["GeostorePhysicalLineProtoIn"] = t.struct(
        {
            "gapColor": t.proxy(
                renames["GeostorePaintedElementLogicalColorProtoIn"]
            ).optional(),
            "physicalLineToken": t.string().optional(),
            "material": t.array(t.string()),
            "dashLengthMeters": t.number().optional(),
            "gapLengthMeters": t.number().optional(),
            "pattern": t.string(),
            "paintColor": t.proxy(
                renames["GeostorePaintedElementLogicalColorProtoIn"]
            ).optional(),
        }
    ).named(renames["GeostorePhysicalLineProtoIn"])
    types["GeostorePhysicalLineProtoOut"] = t.struct(
        {
            "gapColor": t.proxy(
                renames["GeostorePaintedElementLogicalColorProtoOut"]
            ).optional(),
            "physicalLineToken": t.string().optional(),
            "material": t.array(t.string()),
            "dashLengthMeters": t.number().optional(),
            "gapLengthMeters": t.number().optional(),
            "pattern": t.string(),
            "paintColor": t.proxy(
                renames["GeostorePaintedElementLogicalColorProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePhysicalLineProtoOut"])
    types["SecurityCredentialsLdapGroupProtoIn"] = t.struct(
        {"groupName": t.string()}
    ).named(renames["SecurityCredentialsLdapGroupProtoIn"])
    types["SecurityCredentialsLdapGroupProtoOut"] = t.struct(
        {"groupName": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsLdapGroupProtoOut"])
    types["GeostoreGConceptInstanceProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "prominence": t.string().optional(),
            "gconceptId": t.string().optional(),
        }
    ).named(renames["GeostoreGConceptInstanceProtoIn"])
    types["GeostoreGConceptInstanceProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "prominence": t.string().optional(),
            "gconceptId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreGConceptInstanceProtoOut"])
    types["IndexingEmbeddedContentPageSizeInfoIn"] = t.struct(
        {
            "numResourcesWithContent": t.integer().optional(),
            "numResources": t.integer().optional(),
            "numImages": t.integer().optional(),
            "sumHttpResponseLength": t.integer().optional(),
            "numImagesWithContent": t.integer().optional(),
        }
    ).named(renames["IndexingEmbeddedContentPageSizeInfoIn"])
    types["IndexingEmbeddedContentPageSizeInfoOut"] = t.struct(
        {
            "numResourcesWithContent": t.integer().optional(),
            "numResources": t.integer().optional(),
            "numImages": t.integer().optional(),
            "sumHttpResponseLength": t.integer().optional(),
            "numImagesWithContent": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentPageSizeInfoOut"])
    types["FatcatCompactRephilClustersClusterIn"] = t.struct(
        {"id": t.integer(), "discreteWeight": t.integer().optional()}
    ).named(renames["FatcatCompactRephilClustersClusterIn"])
    types["FatcatCompactRephilClustersClusterOut"] = t.struct(
        {
            "id": t.integer(),
            "discreteWeight": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactRephilClustersClusterOut"])
    types["IndexingUrlPatternUrlTreeUrlFeaturesIn"] = t.struct(
        {"feature": t.array(t.proxy(renames["IndexingUrlPatternUrlTreeUrlFeatureIn"]))}
    ).named(renames["IndexingUrlPatternUrlTreeUrlFeaturesIn"])
    types["IndexingUrlPatternUrlTreeUrlFeaturesOut"] = t.struct(
        {
            "feature": t.array(
                t.proxy(renames["IndexingUrlPatternUrlTreeUrlFeatureOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlFeaturesOut"])
    types["QualityRankembedMustangMustangRankEmbedInfoIn"] = t.struct(
        {
            "scaledShiftedFixedPoint4Encoding": t.string().optional(),
            "compressedDocumentEmbedding": t.proxy(
                renames[
                    "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingIn"
                ]
            ).optional(),
            "versionAndImprovInfo": t.integer().optional(),
            "scaledFixedPoint4Encoding": t.string().optional(),
            "fixedPointEncoding": t.string().optional(),
            "scaledFixedPoint8Encoding": t.string().optional(),
        }
    ).named(renames["QualityRankembedMustangMustangRankEmbedInfoIn"])
    types["QualityRankembedMustangMustangRankEmbedInfoOut"] = t.struct(
        {
            "scaledShiftedFixedPoint4Encoding": t.string().optional(),
            "compressedDocumentEmbedding": t.proxy(
                renames[
                    "QualityRankembedMustangMustangRankEmbedInfoCompressedEmbeddingOut"
                ]
            ).optional(),
            "versionAndImprovInfo": t.integer().optional(),
            "scaledFixedPoint4Encoding": t.string().optional(),
            "fixedPointEncoding": t.string().optional(),
            "scaledFixedPoint8Encoding": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityRankembedMustangMustangRankEmbedInfoOut"])
    types["OceanVolumeViewabilityLocaleIn"] = t.struct(
        {
            "viewability": t.proxy(renames["OceanLocaleViewabilityIn"]).optional(),
            "DEPRECATEDViewType": t.integer(),
            "locale": t.string().optional(),
        }
    ).named(renames["OceanVolumeViewabilityLocaleIn"])
    types["OceanVolumeViewabilityLocaleOut"] = t.struct(
        {
            "viewability": t.proxy(renames["OceanLocaleViewabilityOut"]).optional(),
            "DEPRECATEDViewType": t.integer(),
            "locale": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeViewabilityLocaleOut"])
    types["RepositoryWebrefDisplayInfoIn"] = t.struct(
        {
            "displayName": t.array(
                t.proxy(renames["RepositoryWebrefDisplayNameIn"])
            ).optional()
        }
    ).named(renames["RepositoryWebrefDisplayInfoIn"])
    types["RepositoryWebrefDisplayInfoOut"] = t.struct(
        {
            "displayName": t.array(
                t.proxy(renames["RepositoryWebrefDisplayNameOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDisplayInfoOut"])
    types["GeostorePaintedElementLogicalColorProtoIn"] = t.struct(
        {"color": t.string()}
    ).named(renames["GeostorePaintedElementLogicalColorProtoIn"])
    types["GeostorePaintedElementLogicalColorProtoOut"] = t.struct(
        {"color": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GeostorePaintedElementLogicalColorProtoOut"])
    types["KnowledgeAnswersOpaquePersonTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaquePersonTypeIn"])
    types["KnowledgeAnswersOpaquePersonTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaquePersonTypeOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclIn"
    ] = t.struct(
        {
            "contactGroup": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclIn"
                ]
            ),
            "circle": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclIn"
                ]
            ),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclOut"
    ] = t.struct(
        {
            "contactGroup": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAclOut"
                ]
            ),
            "circle": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclOut"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusIn"
    ] = t.struct(
        {"statusCode": t.string().optional(), "notAfterSec": t.string().optional()}
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusOut"
    ] = t.struct(
        {
            "statusCode": t.string().optional(),
            "notAfterSec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusOut"
        ]
    )
    types["QualityActionsCustomizedNotificationButtonIn"] = t.struct(
        {
            "label": t.string().optional(),
            "tapAction": t.proxy(
                renames["QualityActionsCustomizedNotificationPayloadIn"]
            ).optional(),
        }
    ).named(renames["QualityActionsCustomizedNotificationButtonIn"])
    types["QualityActionsCustomizedNotificationButtonOut"] = t.struct(
        {
            "label": t.string().optional(),
            "tapAction": t.proxy(
                renames["QualityActionsCustomizedNotificationPayloadOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsCustomizedNotificationButtonOut"])
    types["QualityNavboostCrapsFeatureCrapsDataIn"] = t.struct(
        {
            "country": t.string().optional(),
            "language": t.string().optional(),
            "locationId": t.integer().optional(),
            "device": t.string().optional(),
            "signals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsIn"]
            ).optional(),
        }
    ).named(renames["QualityNavboostCrapsFeatureCrapsDataIn"])
    types["QualityNavboostCrapsFeatureCrapsDataOut"] = t.struct(
        {
            "country": t.string().optional(),
            "language": t.string().optional(),
            "locationId": t.integer().optional(),
            "device": t.string().optional(),
            "signals": t.proxy(
                renames["QualityNavboostCrapsCrapsClickSignalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsFeatureCrapsDataOut"])
    types["AttentionalEntitiesMentionPropertiesSourceSystemIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceSystemIn"])
    types["AttentionalEntitiesMentionPropertiesSourceSystemOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AttentionalEntitiesMentionPropertiesSourceSystemOut"])
    types["QualityNavboostCrapsAgingDataAgingAgeBucketIn"] = t.struct(
        {"goodClicks": t.number(), "impressions": t.number()}
    ).named(renames["QualityNavboostCrapsAgingDataAgingAgeBucketIn"])
    types["QualityNavboostCrapsAgingDataAgingAgeBucketOut"] = t.struct(
        {
            "goodClicks": t.number(),
            "impressions": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsAgingDataAgingAgeBucketOut"])
    types["AssistantApiBluetoothCapabilitiesIn"] = t.struct(
        {"isBluetoothConnectedProfileRequired": t.boolean().optional()}
    ).named(renames["AssistantApiBluetoothCapabilitiesIn"])
    types["AssistantApiBluetoothCapabilitiesOut"] = t.struct(
        {
            "isBluetoothConnectedProfileRequired": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiBluetoothCapabilitiesOut"])
    types["GoogleCloudContentwarehouseV1beta1InitializeProjectResponseIn"] = t.struct(
        {"message": t.string().optional(), "state": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1beta1InitializeProjectResponseIn"])
    types["GoogleCloudContentwarehouseV1beta1InitializeProjectResponseOut"] = t.struct(
        {
            "message": t.string().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1beta1InitializeProjectResponseOut"])
    types[
        "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigIn"
    ] = t.struct({"stadiaPlatform": t.string()}).named(
        renames[
            "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigIn"
        ]
    )
    types[
        "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigOut"
    ] = t.struct(
        {
            "stadiaPlatform": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigOut"
        ]
    )
    types["AssistantApiCrossDeviceExecutionCapabilityIn"] = t.struct(
        {
            "localConnectivityEnabled": t.boolean().optional(),
            "remoteCastMediaEnabled": t.boolean().optional(),
        }
    ).named(renames["AssistantApiCrossDeviceExecutionCapabilityIn"])
    types["AssistantApiCrossDeviceExecutionCapabilityOut"] = t.struct(
        {
            "localConnectivityEnabled": t.boolean().optional(),
            "remoteCastMediaEnabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCrossDeviceExecutionCapabilityOut"])
    types["AssistantApiSettingsDuoCallDeviceSettingsIn"] = t.struct(
        {
            "talkbackEnabled": t.boolean().optional(),
            "state": t.string().optional(),
            "shouldBeLinked": t.boolean().optional(),
            "allowKnockKnock": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsDuoCallDeviceSettingsIn"])
    types["AssistantApiSettingsDuoCallDeviceSettingsOut"] = t.struct(
        {
            "talkbackEnabled": t.boolean().optional(),
            "state": t.string().optional(),
            "shouldBeLinked": t.boolean().optional(),
            "allowKnockKnock": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDuoCallDeviceSettingsOut"])
    types["AssistantLogsDeviceSelectionResultLogIn"] = t.struct(
        {
            "qualifiedDevices": t.proxy(
                renames["AssistantLogsAmbiguousTargetDeviceLogIn"]
            ).optional(),
            "targetDevice": t.proxy(renames["AssistantLogsTargetDeviceLogIn"]),
            "ambiguousTargetDevices": t.proxy(
                renames["AssistantLogsAmbiguousTargetDeviceLogIn"]
            ).optional(),
            "singleTargetDevice": t.proxy(
                renames["AssistantLogsDeviceInfoLogIn"]
            ).optional(),
            "mediaFocusSelectionErrorType": t.string().optional(),
            "deviceTargetingErrorType": t.string(),
            "processorInfo": t.array(
                t.proxy(renames["AssistantLogsLumosProcessorInfoIn"])
            ).optional(),
            "deviceSelectionDecisionSummary": t.proxy(
                renames["AssistantLogsMediaDeviceSelectionDecisionSummaryIn"]
            ),
            "lowConfidenceTargetDevice": t.proxy(
                renames["AssistantLogsLowConfidenceTargetDeviceLogIn"]
            ).optional(),
            "finalLumosStage": t.string().optional(),
        }
    ).named(renames["AssistantLogsDeviceSelectionResultLogIn"])
    types["AssistantLogsDeviceSelectionResultLogOut"] = t.struct(
        {
            "qualifiedDevices": t.proxy(
                renames["AssistantLogsAmbiguousTargetDeviceLogOut"]
            ).optional(),
            "targetDevice": t.proxy(renames["AssistantLogsTargetDeviceLogOut"]),
            "ambiguousTargetDevices": t.proxy(
                renames["AssistantLogsAmbiguousTargetDeviceLogOut"]
            ).optional(),
            "singleTargetDevice": t.proxy(
                renames["AssistantLogsDeviceInfoLogOut"]
            ).optional(),
            "mediaFocusSelectionErrorType": t.string().optional(),
            "deviceTargetingErrorType": t.string(),
            "processorInfo": t.array(
                t.proxy(renames["AssistantLogsLumosProcessorInfoOut"])
            ).optional(),
            "deviceSelectionDecisionSummary": t.proxy(
                renames["AssistantLogsMediaDeviceSelectionDecisionSummaryOut"]
            ),
            "lowConfidenceTargetDevice": t.proxy(
                renames["AssistantLogsLowConfidenceTargetDeviceLogOut"]
            ).optional(),
            "finalLumosStage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDeviceSelectionResultLogOut"])
    types["RepositoryWebrefExplainedRangeInfoExplainedRangeIn"] = t.struct(
        {"mention": t.proxy(renames["RepositoryWebrefSegmentMentionIn"]).optional()}
    ).named(renames["RepositoryWebrefExplainedRangeInfoExplainedRangeIn"])
    types["RepositoryWebrefExplainedRangeInfoExplainedRangeOut"] = t.struct(
        {
            "mention": t.proxy(renames["RepositoryWebrefSegmentMentionOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefExplainedRangeInfoExplainedRangeOut"])
    types["PairwiseQVersionedItemIn"] = t.struct(
        {
            "value": t.number().optional(),
            "versionId": t.integer().optional(),
            "confidenceValue": t.number().optional(),
        }
    ).named(renames["PairwiseQVersionedItemIn"])
    types["PairwiseQVersionedItemOut"] = t.struct(
        {
            "value": t.number().optional(),
            "versionId": t.integer().optional(),
            "confidenceValue": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PairwiseQVersionedItemOut"])
    types["AbuseiamTargetIn"] = t.struct({"id": t.string(), "type": t.string()}).named(
        renames["AbuseiamTargetIn"]
    )
    types["AbuseiamTargetOut"] = t.struct(
        {
            "id": t.string(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamTargetOut"])
    types["ScienceCitationAnchorIn"] = t.struct(
        {
            "weight": t.integer().optional(),
            "size": t.integer().optional(),
            "type": t.integer().optional(),
            "DEPRECATEDSrcFP": t.string().optional(),
            "face": t.integer().optional(),
            "text": t.string().optional(),
            "count": t.integer().optional(),
        }
    ).named(renames["ScienceCitationAnchorIn"])
    types["ScienceCitationAnchorOut"] = t.struct(
        {
            "weight": t.integer().optional(),
            "size": t.integer().optional(),
            "type": t.integer().optional(),
            "DEPRECATEDSrcFP": t.string().optional(),
            "face": t.integer().optional(),
            "text": t.string().optional(),
            "count": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationAnchorOut"])
    types["GeostoreParkingAllowanceProtoIn"] = t.struct(
        {
            "permitType": t.array(
                t.proxy(renames["GeostoreLanguageTaggedTextProtoIn"])
            ).optional(),
            "vehicleType": t.string().optional(),
            "minPurchaseForValidation": t.array(
                t.proxy(renames["FreebaseTopicIn"])
            ).optional(),
            "timeBasedRate": t.array(
                t.proxy(renames["GeostoreTimeBasedRateProtoIn"])
            ).optional(),
            "serviceType": t.array(t.string()).optional(),
            "isDiscount": t.boolean().optional(),
            "allowanceType": t.string().optional(),
        }
    ).named(renames["GeostoreParkingAllowanceProtoIn"])
    types["GeostoreParkingAllowanceProtoOut"] = t.struct(
        {
            "permitType": t.array(
                t.proxy(renames["GeostoreLanguageTaggedTextProtoOut"])
            ).optional(),
            "vehicleType": t.string().optional(),
            "minPurchaseForValidation": t.array(
                t.proxy(renames["FreebaseTopicOut"])
            ).optional(),
            "timeBasedRate": t.array(
                t.proxy(renames["GeostoreTimeBasedRateProtoOut"])
            ).optional(),
            "serviceType": t.array(t.string()).optional(),
            "isDiscount": t.boolean().optional(),
            "allowanceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreParkingAllowanceProtoOut"])
    types["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"] = t.struct(
        {"y": t.number(), "x": t.number()}
    ).named(renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateIn"])
    types["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"] = t.struct(
        {
            "y": t.number(),
            "x": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileMasteringDisplayMetadataCIE1931CoordinateOut"])
    types["SecurityCredentialsSocialGraphNodeProtoIn"] = t.struct(
        {"sgnPk": t.string(), "sgnDomain": t.string().optional()}
    ).named(renames["SecurityCredentialsSocialGraphNodeProtoIn"])
    types["SecurityCredentialsSocialGraphNodeProtoOut"] = t.struct(
        {
            "sgnPk": t.string(),
            "sgnDomain": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsSocialGraphNodeProtoOut"])
    types["NlpSemanticParsingDatetimeHolidayIn"] = t.struct(
        {"nonFixed": t.string().optional()}
    ).named(renames["NlpSemanticParsingDatetimeHolidayIn"])
    types["NlpSemanticParsingDatetimeHolidayOut"] = t.struct(
        {
            "nonFixed": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeHolidayOut"])
    types["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeIn"] = t.struct(
        {
            "name": t.string(),
            "htmlAttributeType": t.integer().optional(),
            "value": t.string(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeIn"])
    types["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeOut"] = t.struct(
        {
            "name": t.string(),
            "htmlAttributeType": t.integer().optional(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeOut"])
    types["GeostoreDateTimeProtoIn"] = t.struct(
        {"seconds": t.number().optional(), "precision": t.string().optional()}
    ).named(renames["GeostoreDateTimeProtoIn"])
    types["GeostoreDateTimeProtoOut"] = t.struct(
        {
            "seconds": t.number().optional(),
            "precision": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDateTimeProtoOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyIn"
    ] = t.struct({"keyType": t.string(), "keyValue": t.string().optional()}).named(
        renames["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyOut"
    ] = t.struct(
        {
            "keyType": t.string(),
            "keyValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyOut"
        ]
    )
    types["QualitySitemapScoringSignalsIn"] = t.struct(
        {
            "langConfidence": t.array(t.number()),
            "navboostScore": t.number(),
            "recentLongCtr": t.number(),
            "country": t.array(t.string()),
            "impressions": t.string(),
            "pagerank": t.integer(),
            "longCtr": t.number(),
            "longClicks": t.string(),
            "chromeTransCount": t.string(),
            "localCountryIdentifier": t.array(t.string()),
            "navmenuScore": t.number(),
            "titleScore": t.number(),
            "language": t.array(t.string()),
            "annotations": t.array(t.string()),
            "chromeTransProb": t.number(),
            "chromeWeight": t.number(),
            "countryConfidence": t.array(t.number()),
            "targetCdocLanguages": t.array(t.integer()),
        }
    ).named(renames["QualitySitemapScoringSignalsIn"])
    types["QualitySitemapScoringSignalsOut"] = t.struct(
        {
            "langConfidence": t.array(t.number()),
            "navboostScore": t.number(),
            "recentLongCtr": t.number(),
            "country": t.array(t.string()),
            "impressions": t.string(),
            "pagerank": t.integer(),
            "longCtr": t.number(),
            "longClicks": t.string(),
            "chromeTransCount": t.string(),
            "localCountryIdentifier": t.array(t.string()),
            "navmenuScore": t.number(),
            "titleScore": t.number(),
            "language": t.array(t.string()),
            "annotations": t.array(t.string()),
            "chromeTransProb": t.number(),
            "chromeWeight": t.number(),
            "countryConfidence": t.array(t.number()),
            "targetCdocLanguages": t.array(t.integer()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapScoringSignalsOut"])
    types["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityIn"] = t.struct(
        {
            "clientOpProperty": t.proxy(
                renames[
                    "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyIn"
                ]
            )
        }
    ).named(renames["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityIn"])
    types["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityOut"] = t.struct(
        {
            "clientOpProperty": t.proxy(
                renames[
                    "AssistantApiClientOpPropertiesDeviceModifySettingClientOpPropertyOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoDeviceModifySettingCapabilityOut"])
    types["AssistantApiCoreTypesCloudProviderInfoIn"] = t.struct(
        {
            "agentStyle": t.proxy(
                renames["AssistantApiCoreTypesCloudProviderInfoAgentStyleIn"]
            ),
            "name": t.string().optional(),
            "directoryUrl": t.string().optional(),
            "logoUrl": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesCloudProviderInfoIn"])
    types["AssistantApiCoreTypesCloudProviderInfoOut"] = t.struct(
        {
            "agentStyle": t.proxy(
                renames["AssistantApiCoreTypesCloudProviderInfoAgentStyleOut"]
            ),
            "name": t.string().optional(),
            "directoryUrl": t.string().optional(),
            "logoUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCloudProviderInfoOut"])
    types["NlpSemanticParsingModelsRecurrenceDailyPatternIn"] = t.struct(
        {
            "dayPeriod": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationIn"]),
            "timeOfDay": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceDailyPatternIn"])
    types["NlpSemanticParsingModelsRecurrenceDailyPatternOut"] = t.struct(
        {
            "dayPeriod": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationOut"]),
            "timeOfDay": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceDailyPatternOut"])
    types["CrawlerChangerateMultipleComponentDistributionIn"] = t.struct(
        {
            "components": t.array(
                t.proxy(renames["CrawlerChangerateSingleComponentDistributionIn"])
            )
        }
    ).named(renames["CrawlerChangerateMultipleComponentDistributionIn"])
    types["CrawlerChangerateMultipleComponentDistributionOut"] = t.struct(
        {
            "components": t.array(
                t.proxy(renames["CrawlerChangerateSingleComponentDistributionOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateMultipleComponentDistributionOut"])
    types["GeostoreCurveConnectionProtoBezierParamsControlPointIn"] = t.struct(
        {
            "angleDegrees": t.number().optional(),
            "distanceMultiplier": t.number().optional(),
        }
    ).named(renames["GeostoreCurveConnectionProtoBezierParamsControlPointIn"])
    types["GeostoreCurveConnectionProtoBezierParamsControlPointOut"] = t.struct(
        {
            "angleDegrees": t.number().optional(),
            "distanceMultiplier": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCurveConnectionProtoBezierParamsControlPointOut"])
    types["NlpSemanticParsingSaftCoreferenceIn"] = t.struct(
        {
            "category": t.string().optional(),
            "referentText": t.string().optional(),
            "rawText": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingSaftCoreferenceIn"])
    types["NlpSemanticParsingSaftCoreferenceOut"] = t.struct(
        {
            "category": t.string().optional(),
            "referentText": t.string().optional(),
            "rawText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingSaftCoreferenceOut"])
    types["RepositoryWebrefLightweightTokensPerNameLightweightTokenIn"] = t.struct(
        {
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenIn"
                    ]
                )
            )
        }
    ).named(renames["RepositoryWebrefLightweightTokensPerNameLightweightTokenIn"])
    types["RepositoryWebrefLightweightTokensPerNameLightweightTokenOut"] = t.struct(
        {
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLightweightTokensPerNameLightweightTokenOut"])
    types["RepositoryWebrefClusterProtoRelationRuleInstanceIn"] = t.struct(
        {
            "role": t.string(),
            "rule": t.proxy(
                renames["RepositoryWebrefClusterProtoRelationRuleIn"]
            ).optional(),
            "target": t.proxy(renames["RepositoryWebrefWebrefEntityIdIn"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoRelationRuleInstanceIn"])
    types["RepositoryWebrefClusterProtoRelationRuleInstanceOut"] = t.struct(
        {
            "role": t.string(),
            "rule": t.proxy(
                renames["RepositoryWebrefClusterProtoRelationRuleOut"]
            ).optional(),
            "target": t.proxy(renames["RepositoryWebrefWebrefEntityIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefClusterProtoRelationRuleInstanceOut"])
    types["ClassifierPornQueryClassifierOutputIn"] = t.struct(
        {
            "score": t.number().optional(),
            "csaiRegexpHighConfidenceClassification": t.string().optional(),
            "isPositive": t.boolean().optional(),
            "debug": t.string().optional(),
            "csaiClassification": t.string().optional(),
        }
    ).named(renames["ClassifierPornQueryClassifierOutputIn"])
    types["ClassifierPornQueryClassifierOutputOut"] = t.struct(
        {
            "score": t.number().optional(),
            "csaiRegexpHighConfidenceClassification": t.string().optional(),
            "isPositive": t.boolean().optional(),
            "debug": t.string().optional(),
            "csaiClassification": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornQueryClassifierOutputOut"])
    types["NlpSemanticParsingLocalBusinessTypeIn"] = t.struct(
        {
            "transitLine": t.boolean().optional(),
            "cuisineGcid": t.array(t.string()).optional(),
            "drugDropOff": t.boolean(),
            "electricVehicleChargingStation": t.boolean(),
            "restaurant": t.boolean().optional(),
            "retail": t.boolean(),
            "electronicStore": t.boolean(),
            "shoppingCenter": t.boolean(),
            "bank": t.boolean(),
            "airline": t.boolean(),
            "toyStore": t.boolean(),
            "pharmacy": t.boolean(),
            "vehicleType": t.array(t.string()).optional(),
            "groceryStore": t.boolean(),
            "trainStation": t.boolean(),
            "foodPantry": t.boolean(),
            "university": t.boolean().optional(),
            "clothingStore": t.boolean(),
            "transitStation": t.boolean().optional(),
            "school": t.boolean().optional(),
            "parking": t.boolean(),
            "soupKitchen": t.boolean(),
            "hospital": t.boolean(),
            "departmentStore": t.boolean(),
            "hotel": t.boolean().optional(),
            "emergency": t.string().optional(),
            "petStore": t.boolean(),
            "subwayStation": t.boolean(),
            "sportStore": t.boolean(),
            "bikeSharingStation": t.boolean(),
            "qrefTransitStation": t.boolean().optional(),
            "venue": t.boolean().optional(),
            "transitOperator": t.boolean().optional(),
            "hairdresser": t.boolean(),
            "telecom": t.boolean(),
            "busStop": t.boolean(),
            "airport": t.boolean(),
            "hardwareStore": t.boolean(),
            "gasStation": t.boolean(),
        }
    ).named(renames["NlpSemanticParsingLocalBusinessTypeIn"])
    types["NlpSemanticParsingLocalBusinessTypeOut"] = t.struct(
        {
            "transitLine": t.boolean().optional(),
            "cuisineGcid": t.array(t.string()).optional(),
            "drugDropOff": t.boolean(),
            "electricVehicleChargingStation": t.boolean(),
            "restaurant": t.boolean().optional(),
            "retail": t.boolean(),
            "electronicStore": t.boolean(),
            "shoppingCenter": t.boolean(),
            "bank": t.boolean(),
            "airline": t.boolean(),
            "toyStore": t.boolean(),
            "pharmacy": t.boolean(),
            "vehicleType": t.array(t.string()).optional(),
            "groceryStore": t.boolean(),
            "trainStation": t.boolean(),
            "foodPantry": t.boolean(),
            "university": t.boolean().optional(),
            "clothingStore": t.boolean(),
            "transitStation": t.boolean().optional(),
            "school": t.boolean().optional(),
            "parking": t.boolean(),
            "soupKitchen": t.boolean(),
            "hospital": t.boolean(),
            "departmentStore": t.boolean(),
            "hotel": t.boolean().optional(),
            "emergency": t.string().optional(),
            "petStore": t.boolean(),
            "subwayStation": t.boolean(),
            "sportStore": t.boolean(),
            "bikeSharingStation": t.boolean(),
            "qrefTransitStation": t.boolean().optional(),
            "venue": t.boolean().optional(),
            "transitOperator": t.boolean().optional(),
            "hairdresser": t.boolean(),
            "telecom": t.boolean(),
            "busStop": t.boolean(),
            "airport": t.boolean(),
            "hardwareStore": t.boolean(),
            "gasStation": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalBusinessTypeOut"])
    types["DrishtiFeatureExtraIn"] = t.struct({"_": t.string().optional()}).named(
        renames["DrishtiFeatureExtraIn"]
    )
    types["DrishtiFeatureExtraOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["DrishtiFeatureExtraOut"])
    types["TrawlerContentRangeInfoIn"] = t.struct(
        {
            "EndPos": t.string(),
            "StartPos": t.string().optional(),
            "TotalLength": t.string(),
        }
    ).named(renames["TrawlerContentRangeInfoIn"])
    types["TrawlerContentRangeInfoOut"] = t.struct(
        {
            "EndPos": t.string(),
            "StartPos": t.string().optional(),
            "TotalLength": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerContentRangeInfoOut"])
    types["RepositoryWebrefMentionComponentIn"] = t.struct(
        {
            "isHeadComponent": t.boolean().optional(),
            "entityIndex": t.integer().optional(),
            "segmentMentionsIndex": t.integer(),
            "mentionIndex": t.integer(),
        }
    ).named(renames["RepositoryWebrefMentionComponentIn"])
    types["RepositoryWebrefMentionComponentOut"] = t.struct(
        {
            "isHeadComponent": t.boolean().optional(),
            "entityIndex": t.integer().optional(),
            "segmentMentionsIndex": t.integer(),
            "mentionIndex": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionComponentOut"])
    types["MustangReposWwwSnippetsSnippetsRanklabFeaturesIn"] = t.struct(
        {
            "snippetDataSourceType": t.integer().optional(),
            "documentLanguage": t.string().optional(),
            "candidates": t.array(
                t.proxy(renames["MustangReposWwwSnippetsSnippetCandidateIn"])
            ).optional(),
            "originalQueryTermCoverages": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesIn"]
            ).optional(),
            "browserWidth": t.integer().optional(),
            "snippets": t.array(
                t.proxy(renames["QualityPreviewRanklabSnippetIn"])
            ).optional(),
            "snippetQueryTermCoverage": t.number().optional(),
            "titleSnippetQueryTermCoverage": t.number().optional(),
            "queryLanguage": t.string().optional(),
            "displaySnippet": t.proxy(
                renames["QualityPreviewRanklabSnippetIn"]
            ).optional(),
            "titleQueryTermCoverage": t.number().optional(),
            "titles": t.array(
                t.proxy(renames["QualityPreviewRanklabTitleIn"])
            ).optional(),
            "titleDataSourceType": t.integer().optional(),
        }
    ).named(renames["MustangReposWwwSnippetsSnippetsRanklabFeaturesIn"])
    types["MustangReposWwwSnippetsSnippetsRanklabFeaturesOut"] = t.struct(
        {
            "snippetDataSourceType": t.integer().optional(),
            "documentLanguage": t.string().optional(),
            "candidates": t.array(
                t.proxy(renames["MustangReposWwwSnippetsSnippetCandidateOut"])
            ).optional(),
            "originalQueryTermCoverages": t.proxy(
                renames["QualityPreviewSnippetQueryTermCoverageFeaturesOut"]
            ).optional(),
            "browserWidth": t.integer().optional(),
            "snippets": t.array(
                t.proxy(renames["QualityPreviewRanklabSnippetOut"])
            ).optional(),
            "snippetQueryTermCoverage": t.number().optional(),
            "titleSnippetQueryTermCoverage": t.number().optional(),
            "queryLanguage": t.string().optional(),
            "displaySnippet": t.proxy(
                renames["QualityPreviewRanklabSnippetOut"]
            ).optional(),
            "titleQueryTermCoverage": t.number().optional(),
            "titles": t.array(
                t.proxy(renames["QualityPreviewRanklabTitleOut"])
            ).optional(),
            "titleDataSourceType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MustangReposWwwSnippetsSnippetsRanklabFeaturesOut"])
    types["NlpSemanticParsingLocalExtentIn"] = t.struct(
        {
            "unitsString": t.string().optional(),
            "nonSpecificValue": t.boolean().optional(),
            "units": t.string(),
            "value": t.number().optional(),
            "valueString": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingLocalExtentIn"])
    types["NlpSemanticParsingLocalExtentOut"] = t.struct(
        {
            "unitsString": t.string().optional(),
            "nonSpecificValue": t.boolean().optional(),
            "units": t.string(),
            "value": t.number().optional(),
            "valueString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalExtentOut"])
    types["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantIn"] = t.struct(
        {
            "xtagList": t.proxy(renames["ImageRepositoryApiXtagListIn"]).optional(),
            "previewLength": t.string(),
        }
    ).named(renames["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantIn"])
    types["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantOut"] = t.struct(
        {
            "xtagList": t.proxy(renames["ImageRepositoryApiXtagListOut"]).optional(),
            "previewLength": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantOut"])
    types["GeostorePeakProtoIn"] = t.struct(
        {"prominenceMeters": t.number().optional()}
    ).named(renames["GeostorePeakProtoIn"])
    types["GeostorePeakProtoOut"] = t.struct(
        {
            "prominenceMeters": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePeakProtoOut"])
    types["RepositoryWebrefEntityNameRatingsIn"] = t.struct(
        {
            "tags": t.array(t.string()).optional(),
            "name": t.string(),
            "language": t.string(),
            "ratings": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameRatingsEntityNameRatingIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameRatingsIn"])
    types["RepositoryWebrefEntityNameRatingsOut"] = t.struct(
        {
            "tags": t.array(t.string()).optional(),
            "name": t.string(),
            "language": t.string(),
            "ratings": t.array(
                t.proxy(renames["RepositoryWebrefEntityNameRatingsEntityNameRatingOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityNameRatingsOut"])
    types["UrlPoisoningDataIn"] = t.struct(
        {
            "NotChangedTimeMs": t.string().optional(),
            "ReuseTimeMs": t.string().optional(),
            "OriginalCrawlTimeMs": t.string().optional(),
            "numSpamSiblings": t.integer(),
            "url": t.string().optional(),
        }
    ).named(renames["UrlPoisoningDataIn"])
    types["UrlPoisoningDataOut"] = t.struct(
        {
            "NotChangedTimeMs": t.string().optional(),
            "ReuseTimeMs": t.string().optional(),
            "OriginalCrawlTimeMs": t.string().optional(),
            "numSpamSiblings": t.integer(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlPoisoningDataOut"])
    types["OceanVolumeImprintIn"] = t.struct(
        {
            "publishedImprintName": t.string().optional(),
            "imprintId": t.string().optional(),
            "imprintUrl": t.string().optional(),
            "allowContinuousBrowse": t.boolean().optional(),
            "percentBookShown": t.integer().optional(),
            "allowAddingFrontmatterToPreview": t.boolean().optional(),
            "promotionalText": t.string(),
            "buyTheBookUrl": t.string().optional(),
            "adsId": t.string().optional(),
            "logoLocation": t.string().optional(),
            "verticalType": t.string(),
            "title": t.string(),
            "canShowLibraryLinks": t.boolean().optional(),
            "allowRetailSyndication": t.boolean().optional(),
            "author": t.string().optional(),
            "useBibdata": t.boolean().optional(),
            "accessRights": t.proxy(renames["OceanVolumeAccessRightsIn"]).optional(),
            "geBibkey": t.string().optional(),
            "logoWidth": t.integer().optional(),
            "canUseMetadataCover": t.boolean().optional(),
            "promotionalUrl": t.string().optional(),
            "bibkey": t.string().optional(),
            "imprintName": t.string(),
            "disableOtherBuyTheBookLinks": t.boolean().optional(),
            "canDownloadEpub": t.boolean().optional(),
            "logoHeight": t.integer(),
            "displayDetails": t.proxy(
                renames["OceanVolumeDisplayDetailsIn"]
            ).optional(),
            "pviRowid": t.string().optional(),
            "buyTheBookText": t.string().optional(),
            "canDownloadPdf": t.boolean().optional(),
        }
    ).named(renames["OceanVolumeImprintIn"])
    types["OceanVolumeImprintOut"] = t.struct(
        {
            "publishedImprintName": t.string().optional(),
            "imprintId": t.string().optional(),
            "imprintUrl": t.string().optional(),
            "allowContinuousBrowse": t.boolean().optional(),
            "percentBookShown": t.integer().optional(),
            "allowAddingFrontmatterToPreview": t.boolean().optional(),
            "promotionalText": t.string(),
            "buyTheBookUrl": t.string().optional(),
            "adsId": t.string().optional(),
            "logoLocation": t.string().optional(),
            "verticalType": t.string(),
            "title": t.string(),
            "canShowLibraryLinks": t.boolean().optional(),
            "allowRetailSyndication": t.boolean().optional(),
            "author": t.string().optional(),
            "useBibdata": t.boolean().optional(),
            "accessRights": t.proxy(renames["OceanVolumeAccessRightsOut"]).optional(),
            "geBibkey": t.string().optional(),
            "logoWidth": t.integer().optional(),
            "canUseMetadataCover": t.boolean().optional(),
            "promotionalUrl": t.string().optional(),
            "bibkey": t.string().optional(),
            "imprintName": t.string(),
            "disableOtherBuyTheBookLinks": t.boolean().optional(),
            "canDownloadEpub": t.boolean().optional(),
            "logoHeight": t.integer(),
            "displayDetails": t.proxy(
                renames["OceanVolumeDisplayDetailsOut"]
            ).optional(),
            "pviRowid": t.string().optional(),
            "buyTheBookText": t.string().optional(),
            "canDownloadPdf": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeImprintOut"])
    types["RepositoryWebrefRefconDocumentMentionSpansIn"] = t.struct(
        {
            "mentionSpan": t.array(
                t.proxy(renames["RepositoryWebrefRefconMentionSpansIn"])
            ).optional()
        }
    ).named(renames["RepositoryWebrefRefconDocumentMentionSpansIn"])
    types["RepositoryWebrefRefconDocumentMentionSpansOut"] = t.struct(
        {
            "mentionSpan": t.array(
                t.proxy(renames["RepositoryWebrefRefconMentionSpansOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRefconDocumentMentionSpansOut"])
    types["GoogleCloudDocumentaiV1BarcodeIn"] = t.struct(
        {
            "rawValue": t.string().optional(),
            "format": t.string().optional(),
            "valueFormat": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1BarcodeIn"])
    types["GoogleCloudDocumentaiV1BarcodeOut"] = t.struct(
        {
            "rawValue": t.string().optional(),
            "format": t.string().optional(),
            "valueFormat": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1BarcodeOut"])
    types["AssistantApiActionV2SupportedFeaturesIn"] = t.struct(
        {
            "expressUrlInSettingsResponseSupported": t.boolean().optional(),
            "takeScreenshotSupported": t.boolean().optional(),
            "reconnectClientInputSupported": t.boolean().optional(),
            "voiceDelightStickersSupported": t.boolean().optional(),
            "voiceDelightImmersiveUiSupported": t.boolean().optional(),
            "supportedActionType": t.array(t.string()).optional(),
            "voiceDelightSuggestionsSupported": t.boolean().optional(),
            "simpleActionV2PuntSupported": t.boolean().optional(),
        }
    ).named(renames["AssistantApiActionV2SupportedFeaturesIn"])
    types["AssistantApiActionV2SupportedFeaturesOut"] = t.struct(
        {
            "expressUrlInSettingsResponseSupported": t.boolean().optional(),
            "takeScreenshotSupported": t.boolean().optional(),
            "reconnectClientInputSupported": t.boolean().optional(),
            "voiceDelightStickersSupported": t.boolean().optional(),
            "voiceDelightImmersiveUiSupported": t.boolean().optional(),
            "supportedActionType": t.array(t.string()).optional(),
            "voiceDelightSuggestionsSupported": t.boolean().optional(),
            "simpleActionV2PuntSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiActionV2SupportedFeaturesOut"])
    types["KnowledgeAnswersIntentQueryIndexingIQLAttachmentIn"] = t.struct(
        {
            "iqlFuncalls": t.string().optional(),
            "piannoIqlBitmap": t.array(t.integer()).optional(),
            "piannoConfidenceScoreE2": t.array(t.integer()).optional(),
            "iqlEncodingVersion": t.integer().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryIndexingIQLAttachmentIn"])
    types["KnowledgeAnswersIntentQueryIndexingIQLAttachmentOut"] = t.struct(
        {
            "iqlFuncalls": t.string().optional(),
            "piannoIqlBitmap": t.array(t.integer()).optional(),
            "piannoConfidenceScoreE2": t.array(t.integer()).optional(),
            "iqlEncodingVersion": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryIndexingIQLAttachmentOut"])
    types["GeostoreUrlListProtoIn"] = t.struct(
        {"url": t.array(t.proxy(renames["GeostoreUrlProtoIn"]))}
    ).named(renames["GeostoreUrlListProtoIn"])
    types["GeostoreUrlListProtoOut"] = t.struct(
        {
            "url": t.array(t.proxy(renames["GeostoreUrlProtoOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreUrlListProtoOut"])
    types["GeostorePolyLineProtoIn"] = t.struct(
        {
            "vertex": t.array(t.proxy(renames["GeostorePointProtoIn"])).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
        }
    ).named(renames["GeostorePolyLineProtoIn"])
    types["GeostorePolyLineProtoOut"] = t.struct(
        {
            "vertex": t.array(t.proxy(renames["GeostorePointProtoOut"])).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePolyLineProtoOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclIn"
    ] = t.struct(
        {
            "personId": t.string(),
            "displayName": t.string().optional(),
            "photoUrl": t.string().optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclOut"
    ] = t.struct(
        {
            "personId": t.string(),
            "displayName": t.string().optional(),
            "photoUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAclOut"]
    )
    types["NlpSciencelitRetrievalSearchResultDebugInfoIn"] = t.struct(
        {
            "reverseRerankingOrder": t.integer().optional(),
            "articleData": t.proxy(renames["NlpSciencelitArticleDataIn"]).optional(),
            "rerankingScore": t.number().optional(),
            "sectionIrScore": t.struct({"_": t.string().optional()}).optional(),
            "goldSnippets": t.array(t.string()),
            "isGold": t.boolean().optional(),
            "goldDocid": t.array(t.string()),
        }
    ).named(renames["NlpSciencelitRetrievalSearchResultDebugInfoIn"])
    types["NlpSciencelitRetrievalSearchResultDebugInfoOut"] = t.struct(
        {
            "reverseRerankingOrder": t.integer().optional(),
            "articleData": t.proxy(renames["NlpSciencelitArticleDataOut"]).optional(),
            "rerankingScore": t.number().optional(),
            "sectionIrScore": t.struct({"_": t.string().optional()}).optional(),
            "goldSnippets": t.array(t.string()),
            "isGold": t.boolean().optional(),
            "goldDocid": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitRetrievalSearchResultDebugInfoOut"])
    types["AbuseiamNotRestrictionIn"] = t.struct(
        {"child": t.array(t.proxy(renames["AbuseiamUserRestrictionIn"])).optional()}
    ).named(renames["AbuseiamNotRestrictionIn"])
    types["AbuseiamNotRestrictionOut"] = t.struct(
        {
            "child": t.array(t.proxy(renames["AbuseiamUserRestrictionOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamNotRestrictionOut"])
    types["LegalCitationLawLevelIn"] = t.struct(
        {
            "LevelTypeNormalized": t.string().optional(),
            "Value": t.string().optional(),
            "Name": t.string().optional(),
            "LevelTypeSourceText": t.string().optional(),
            "Depth": t.integer().optional(),
            "Type": t.integer().optional(),
            "LevelTypeString": t.string().optional(),
        }
    ).named(renames["LegalCitationLawLevelIn"])
    types["LegalCitationLawLevelOut"] = t.struct(
        {
            "LevelTypeNormalized": t.string().optional(),
            "Value": t.string().optional(),
            "Name": t.string().optional(),
            "LevelTypeSourceText": t.string().optional(),
            "Depth": t.integer().optional(),
            "Type": t.integer().optional(),
            "LevelTypeString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationLawLevelOut"])
    types["GoogleAssistantAccessoryV1ScreenOutConfigIn"] = t.struct(
        {
            "dimensions": t.proxy(
                renames["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsIn"]
            ).optional(),
            "fontScaleFactor": t.number().optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ScreenOutConfigIn"])
    types["GoogleAssistantAccessoryV1ScreenOutConfigOut"] = t.struct(
        {
            "dimensions": t.proxy(
                renames["GoogleAssistantAccessoryV1ScreenOutConfigDimensionsOut"]
            ).optional(),
            "fontScaleFactor": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ScreenOutConfigOut"])
    types["HtmlrenderWebkitHeadlessProtoStyleIn"] = t.struct(
        {
            "clip": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRectangleIn"]
            ).optional(),
            "backgroundColorArgb": t.integer().optional(),
            "position": t.string(),
            "borderPixelWidthRight": t.integer(),
            "fontWeight": t.integer(),
            "referencedResourceIndex": t.array(t.integer()).optional(),
            "marginRight": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "fontFamily": t.string().optional(),
            "backgroundSizeHeight": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ),
            "visibility": t.string(),
            "textAlign": t.string(),
            "borderColorArgbBottom": t.integer(),
            "textShadowColorArgb": t.integer(),
            "paddingRight": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "backgroundSize": t.string(),
            "borderStyleTop": t.string(),
            "borderStyleLeft": t.string(),
            "textDecoration": t.string(),
            "borderStyleRight": t.string(),
            "borderStyleBottom": t.string(),
            "backgroundImageYPos": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ),
            "marginBottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "paddingTop": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ).optional(),
            "display": t.string(),
            "borderColorArgbTop": t.integer(),
            "backgroundGradientRepeat": t.boolean(),
            "borderColorArgbRight": t.integer(),
            "paddingBottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "hasBackground": t.boolean().optional(),
            "direction": t.string(),
            "opacity": t.number(),
            "overflowY": t.string(),
            "marginLeft": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "borderPixelWidthTop": t.integer(),
            "backgroundImageXPos": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ).optional(),
            "borderPixelWidthBottom": t.integer(),
            "marginTop": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ).optional(),
            "borderPixelWidthLeft": t.integer(),
            "paddingLeft": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "overflowX": t.string(),
            "foregroundColorArgb": t.integer().optional(),
            "listStyleImageUrl": t.string(),
            "zIndex": t.integer().optional(),
            "fontStyle": t.string(),
            "backgroundGradientColorStopArgb": t.array(t.integer()),
            "fontSize": t.integer(),
            "backgroundGradientType": t.string(),
            "backgroundSizeWidth": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]
            ).optional(),
            "backgroundImageRepeat": t.string(),
            "backgroundImageUrl": t.string().optional(),
            "backgroundAttachment": t.string(),
            "listStyleType": t.string(),
            "borderColorArgbLeft": t.integer(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoStyleIn"])
    types["HtmlrenderWebkitHeadlessProtoStyleOut"] = t.struct(
        {
            "clip": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRectangleOut"]
            ).optional(),
            "backgroundColorArgb": t.integer().optional(),
            "position": t.string(),
            "borderPixelWidthRight": t.integer(),
            "fontWeight": t.integer(),
            "referencedResourceIndex": t.array(t.integer()).optional(),
            "marginRight": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "fontFamily": t.string().optional(),
            "backgroundSizeHeight": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ),
            "visibility": t.string(),
            "textAlign": t.string(),
            "borderColorArgbBottom": t.integer(),
            "textShadowColorArgb": t.integer(),
            "paddingRight": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "backgroundSize": t.string(),
            "borderStyleTop": t.string(),
            "borderStyleLeft": t.string(),
            "textDecoration": t.string(),
            "borderStyleRight": t.string(),
            "borderStyleBottom": t.string(),
            "backgroundImageYPos": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ),
            "marginBottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "paddingTop": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ).optional(),
            "display": t.string(),
            "borderColorArgbTop": t.integer(),
            "backgroundGradientRepeat": t.boolean(),
            "borderColorArgbRight": t.integer(),
            "paddingBottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "hasBackground": t.boolean().optional(),
            "direction": t.string(),
            "opacity": t.number(),
            "overflowY": t.string(),
            "marginLeft": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "borderPixelWidthTop": t.integer(),
            "backgroundImageXPos": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ).optional(),
            "borderPixelWidthBottom": t.integer(),
            "marginTop": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ).optional(),
            "borderPixelWidthLeft": t.integer(),
            "paddingLeft": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "overflowX": t.string(),
            "foregroundColorArgb": t.integer().optional(),
            "listStyleImageUrl": t.string(),
            "zIndex": t.integer().optional(),
            "fontStyle": t.string(),
            "backgroundGradientColorStopArgb": t.array(t.integer()),
            "fontSize": t.integer(),
            "backgroundGradientType": t.string(),
            "backgroundSizeWidth": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ).optional(),
            "backgroundImageRepeat": t.string(),
            "backgroundImageUrl": t.string().optional(),
            "backgroundAttachment": t.string(),
            "listStyleType": t.string(),
            "borderColorArgbLeft": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoStyleOut"])
    types["NlpSciencelitPublicationTypeIn"] = t.struct(
        {"ui": t.string().optional(), "name": t.string().optional()}
    ).named(renames["NlpSciencelitPublicationTypeIn"])
    types["NlpSciencelitPublicationTypeOut"] = t.struct(
        {
            "ui": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitPublicationTypeOut"])
    types["PerDocDebugEventIn"] = t.struct(
        {
            "Message": t.string().optional(),
            "Value": t.string().optional(),
            "Timestamp": t.integer().optional(),
            "Source": t.string().optional(),
        }
    ).named(renames["PerDocDebugEventIn"])
    types["PerDocDebugEventOut"] = t.struct(
        {
            "Message": t.string().optional(),
            "Value": t.string().optional(),
            "Timestamp": t.integer().optional(),
            "Source": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PerDocDebugEventOut"])
    types["AssistantApiLiveTvChannelCapabilitiesChannelsByProviderIn"] = t.struct(
        {
            "providerType": t.string().optional(),
            "channels": t.array(
                t.proxy(renames["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelIn"])
            ).optional(),
            "inputId": t.string().optional(),
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesChannelsByProviderIn"])
    types["AssistantApiLiveTvChannelCapabilitiesChannelsByProviderOut"] = t.struct(
        {
            "providerType": t.string().optional(),
            "channels": t.array(
                t.proxy(
                    renames["AssistantApiLiveTvChannelCapabilitiesLiveTvChannelOut"]
                )
            ).optional(),
            "inputId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLiveTvChannelCapabilitiesChannelsByProviderOut"])
    types["SocialGraphApiProtoSearchProfileSocialLinkIn"] = t.struct(
        {"link": t.string(), "type": t.string()}
    ).named(renames["SocialGraphApiProtoSearchProfileSocialLinkIn"])
    types["SocialGraphApiProtoSearchProfileSocialLinkOut"] = t.struct(
        {
            "link": t.string(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileSocialLinkOut"])
    types["RepositoryWebrefCompactKgValueIn"] = t.struct(
        {
            "textValue": t.string().optional(),
            "serializedProtoValue": t.string().optional(),
            "intValue": t.string().optional(),
            "idValue": t.string().optional(),
            "boolValue": t.boolean().optional(),
            "compoundValue": t.proxy(
                renames["RepositoryWebrefCompactKgTopicIn"]
            ).optional(),
            "datetimeValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "enumValue": t.string().optional(),
            "uriValue": t.string().optional(),
            "uriValueFprint32": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefCompactKgValueIn"])
    types["RepositoryWebrefCompactKgValueOut"] = t.struct(
        {
            "textValue": t.string().optional(),
            "serializedProtoValue": t.string().optional(),
            "intValue": t.string().optional(),
            "idValue": t.string().optional(),
            "boolValue": t.boolean().optional(),
            "compoundValue": t.proxy(
                renames["RepositoryWebrefCompactKgTopicOut"]
            ).optional(),
            "datetimeValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "enumValue": t.string().optional(),
            "uriValue": t.string().optional(),
            "uriValueFprint32": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCompactKgValueOut"])
    types["VideoContentSearchListAnchorFeaturesIn"] = t.struct(
        {
            "listItemIndex": t.integer().optional(),
            "descriptionSpanInfo": t.proxy(
                renames["VideoContentSearchDescriptionSpanInfoIn"]
            ).optional(),
            "titleAnchorBabelMatchScore": t.number().optional(),
            "matchScores": t.array(
                t.proxy(renames["VideoContentSearchMatchScoresIn"])
            ).optional(),
            "pretriggerScore": t.number().optional(),
            "babelMatch": t.proxy(
                renames["VideoContentSearchTextMatchInfoIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchListAnchorFeaturesIn"])
    types["VideoContentSearchListAnchorFeaturesOut"] = t.struct(
        {
            "listItemIndex": t.integer().optional(),
            "descriptionSpanInfo": t.proxy(
                renames["VideoContentSearchDescriptionSpanInfoOut"]
            ).optional(),
            "titleAnchorBabelMatchScore": t.number().optional(),
            "matchScores": t.array(
                t.proxy(renames["VideoContentSearchMatchScoresOut"])
            ).optional(),
            "pretriggerScore": t.number().optional(),
            "babelMatch": t.proxy(
                renames["VideoContentSearchTextMatchInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchListAnchorFeaturesOut"])
    types["VideoVideoStreamInfoTimedTextStreamIn"] = t.struct(
        {
            "streamCodecTag": t.string(),
            "codecId": t.string().optional(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoIn"])).optional(),
            "streamIndex": t.string().optional(),
        }
    ).named(renames["VideoVideoStreamInfoTimedTextStreamIn"])
    types["VideoVideoStreamInfoTimedTextStreamOut"] = t.struct(
        {
            "streamCodecTag": t.string(),
            "codecId": t.string().optional(),
            "metadata": t.array(t.proxy(renames["VideoClipInfoOut"])).optional(),
            "streamIndex": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoTimedTextStreamOut"])
    types["QualityTimebasedSyntacticDateDateRangeIn"] = t.struct(
        {"start": t.string(), "end": t.string()}
    ).named(renames["QualityTimebasedSyntacticDateDateRangeIn"])
    types["QualityTimebasedSyntacticDateDateRangeOut"] = t.struct(
        {
            "start": t.string(),
            "end": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedSyntacticDateDateRangeOut"])
    types["KnowledgeAnswersIntentQueryTokensIn"] = t.struct(
        {
            "token": t.array(t.proxy(renames["KnowledgeAnswersIntentQueryTokenIn"])),
            "score": t.number().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryTokensIn"])
    types["KnowledgeAnswersIntentQueryTokensOut"] = t.struct(
        {
            "token": t.array(t.proxy(renames["KnowledgeAnswersIntentQueryTokenOut"])),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryTokensOut"])
    types["ExtraSnippetInfoResponseQuerySubitemIn"] = t.struct(
        {
            "weight": t.integer().optional(),
            "isOriginal": t.boolean().optional(),
            "isHighlighted": t.boolean().optional(),
            "text": t.string().optional(),
            "items": t.integer().optional(),
            "isOptional": t.boolean(),
        }
    ).named(renames["ExtraSnippetInfoResponseQuerySubitemIn"])
    types["ExtraSnippetInfoResponseQuerySubitemOut"] = t.struct(
        {
            "weight": t.integer().optional(),
            "isOriginal": t.boolean().optional(),
            "isHighlighted": t.boolean().optional(),
            "text": t.string().optional(),
            "items": t.integer().optional(),
            "isOptional": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseQuerySubitemOut"])
    types["NlpSemanticParsingModelsMediaSongIn"] = t.struct(
        {
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]).optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "favorite": t.boolean().optional(),
            "isFromFastPath": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "latest": t.boolean().optional(),
            "first": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "rawText": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaSongIn"])
    types["NlpSemanticParsingModelsMediaSongOut"] = t.struct(
        {
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]).optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "favorite": t.boolean().optional(),
            "isFromFastPath": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "latest": t.boolean().optional(),
            "first": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "rawText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaSongOut"])
    types["KnowledgeAnswersIntentQueryAttributeSignalIn"] = t.struct(
        {"attributeId": t.string(), "score": t.number()}
    ).named(renames["KnowledgeAnswersIntentQueryAttributeSignalIn"])
    types["KnowledgeAnswersIntentQueryAttributeSignalOut"] = t.struct(
        {
            "attributeId": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryAttributeSignalOut"])
    types["CrawlerChangerateSingleComponentDistributionIn"] = t.struct(
        {
            "type": t.string().optional(),
            "logScaling": t.number().optional(),
            "weight": t.number().optional(),
        }
    ).named(renames["CrawlerChangerateSingleComponentDistributionIn"])
    types["CrawlerChangerateSingleComponentDistributionOut"] = t.struct(
        {
            "type": t.string().optional(),
            "logScaling": t.number().optional(),
            "weight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateSingleComponentDistributionOut"])
    types["IndexingEmbeddedContentRenderingOutputMetadataIn"] = t.struct(
        {
            "refresh": t.boolean(),
            "exceptions": t.string().optional(),
            "experimentalRenderTimeMsec": t.integer().optional(),
            "importance": t.integer().optional(),
            "renderedSnapshotSignature": t.string().optional(),
            "numNewTokensFoundInRendering": t.integer(),
            "configParams": t.proxy(
                renames["IndexingEmbeddedContentRenderRequestConfigConfigParamsIn"]
            ),
            "generationTimestamps": t.proxy(
                renames["IndexingEmbeddedContentOutputGenerationTimestampsIn"]
            ),
            "renderTreeQualityScore": t.number(),
            "newTokensPercentageAfterRendering": t.number().optional(),
            "snapshotQualityScore": t.number().optional(),
            "renderCacheStats": t.proxy(
                renames["IndexingEmbeddedContentRenderCacheStatsIn"]
            ).optional(),
            "withMissingResources": t.boolean().optional(),
            "selectionResult": t.proxy(
                renames["IndexingEmbeddedContentSelectionResultIn"]
            ).optional(),
            "renderingFetchStats": t.proxy(
                renames["IndexingEmbeddedContentRenderingFetchStatsIn"]
            ),
            "renderEngine": t.string(),
            "renderEvent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderEventIn"])
            ).optional(),
            "renderedTimeUsec": t.string().optional(),
            "lastNewContentProbingTimestamp": t.integer().optional(),
            "renderServerCl": t.string().optional(),
        }
    ).named(renames["IndexingEmbeddedContentRenderingOutputMetadataIn"])
    types["IndexingEmbeddedContentRenderingOutputMetadataOut"] = t.struct(
        {
            "refresh": t.boolean(),
            "exceptions": t.string().optional(),
            "experimentalRenderTimeMsec": t.integer().optional(),
            "importance": t.integer().optional(),
            "renderedSnapshotSignature": t.string().optional(),
            "numNewTokensFoundInRendering": t.integer(),
            "configParams": t.proxy(
                renames["IndexingEmbeddedContentRenderRequestConfigConfigParamsOut"]
            ),
            "generationTimestamps": t.proxy(
                renames["IndexingEmbeddedContentOutputGenerationTimestampsOut"]
            ),
            "renderTreeQualityScore": t.number(),
            "newTokensPercentageAfterRendering": t.number().optional(),
            "snapshotQualityScore": t.number().optional(),
            "renderCacheStats": t.proxy(
                renames["IndexingEmbeddedContentRenderCacheStatsOut"]
            ).optional(),
            "withMissingResources": t.boolean().optional(),
            "selectionResult": t.proxy(
                renames["IndexingEmbeddedContentSelectionResultOut"]
            ).optional(),
            "renderingFetchStats": t.proxy(
                renames["IndexingEmbeddedContentRenderingFetchStatsOut"]
            ),
            "renderEngine": t.string(),
            "renderEvent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderEventOut"])
            ).optional(),
            "renderedTimeUsec": t.string().optional(),
            "lastNewContentProbingTimestamp": t.integer().optional(),
            "renderServerCl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentRenderingOutputMetadataOut"])
    types["QualityDniExtendedNewsPreviewsIn"] = t.struct(
        {
            "status": t.string().optional(),
            "version": t.string().optional(),
            "desnippetedCountryCode": t.array(t.string()).optional(),
            "countryCode": t.string().optional(),
            "policyCriteriaBase64": t.string().optional(),
        }
    ).named(renames["QualityDniExtendedNewsPreviewsIn"])
    types["QualityDniExtendedNewsPreviewsOut"] = t.struct(
        {
            "status": t.string().optional(),
            "version": t.string().optional(),
            "desnippetedCountryCode": t.array(t.string()).optional(),
            "countryCode": t.string().optional(),
            "policyCriteriaBase64": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityDniExtendedNewsPreviewsOut"])
    types["ImageRepositoryWordInfoIn"] = t.struct(
        {
            "confidence": t.number().optional(),
            "speakerTag": t.integer().optional(),
            "endTime": t.string().optional(),
            "word": t.string().optional(),
            "startTime": t.string().optional(),
        }
    ).named(renames["ImageRepositoryWordInfoIn"])
    types["ImageRepositoryWordInfoOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "speakerTag": t.integer().optional(),
            "endTime": t.string().optional(),
            "word": t.string().optional(),
            "startTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryWordInfoOut"])
    types["BookCitationPerDocDataIn"] = t.struct(
        {
            "secondDiscretizedCitationScore": t.integer().optional(),
            "discretizedCitationScore": t.integer().optional(),
            "secondBookId": t.string().optional(),
            "bookId": t.string().optional(),
            "previewable": t.boolean().optional(),
        }
    ).named(renames["BookCitationPerDocDataIn"])
    types["BookCitationPerDocDataOut"] = t.struct(
        {
            "secondDiscretizedCitationScore": t.integer().optional(),
            "discretizedCitationScore": t.integer().optional(),
            "secondBookId": t.string().optional(),
            "bookId": t.string().optional(),
            "previewable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BookCitationPerDocDataOut"])
    types["OcrPhotoCurvedBoundingBoxIn"] = t.struct(
        {
            "thickness": t.number().optional(),
            "midLineCurve": t.proxy(renames["OcrPhotoCurveIn"]).optional(),
            "topToBottom": t.boolean().optional(),
        }
    ).named(renames["OcrPhotoCurvedBoundingBoxIn"])
    types["OcrPhotoCurvedBoundingBoxOut"] = t.struct(
        {
            "thickness": t.number().optional(),
            "midLineCurve": t.proxy(renames["OcrPhotoCurveOut"]).optional(),
            "topToBottom": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OcrPhotoCurvedBoundingBoxOut"])
    types["PhotosVisionObjectrecMatrix2DIn"] = t.struct(
        {"yy": t.number(), "xy": t.number(), "xx": t.number(), "yx": t.number()}
    ).named(renames["PhotosVisionObjectrecMatrix2DIn"])
    types["PhotosVisionObjectrecMatrix2DOut"] = t.struct(
        {
            "yy": t.number(),
            "xy": t.number(),
            "xx": t.number(),
            "yx": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecMatrix2DOut"])
    types["SnapshotImageNodeIn"] = t.struct(
        {
            "url": t.string().optional(),
            "boundingBox": t.proxy(renames["SnapshotBoxIn"]),
            "isExternal": t.boolean().optional(),
        }
    ).named(renames["SnapshotImageNodeIn"])
    types["SnapshotImageNodeOut"] = t.struct(
        {
            "url": t.string().optional(),
            "boundingBox": t.proxy(renames["SnapshotBoxOut"]),
            "isExternal": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotImageNodeOut"])
    types["ClassifierPornClassifierDataClassificationIn"] = t.struct(
        {"label": t.string(), "score": t.number()}
    ).named(renames["ClassifierPornClassifierDataClassificationIn"])
    types["ClassifierPornClassifierDataClassificationOut"] = t.struct(
        {
            "label": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornClassifierDataClassificationOut"])
    types["PersonalizationMapsAliasAliasIdIn"] = t.struct(
        {"subId": t.string().optional(), "type": t.string()}
    ).named(renames["PersonalizationMapsAliasAliasIdIn"])
    types["PersonalizationMapsAliasAliasIdOut"] = t.struct(
        {
            "subId": t.string().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PersonalizationMapsAliasAliasIdOut"])
    types["QualityCalypsoAppsUniversalImageDataIn"] = t.struct(
        {
            "featureGraphic": t.proxy(
                renames["QualityCalypsoAppsUniversalImageIn"]
            ).optional(),
            "enhancedImage": t.proxy(
                renames["QualityCalypsoAppsUniversalImageIn"]
            ).optional(),
            "screenshot": t.array(
                t.proxy(renames["QualityCalypsoAppsUniversalImageIn"])
            ),
        }
    ).named(renames["QualityCalypsoAppsUniversalImageDataIn"])
    types["QualityCalypsoAppsUniversalImageDataOut"] = t.struct(
        {
            "featureGraphic": t.proxy(
                renames["QualityCalypsoAppsUniversalImageOut"]
            ).optional(),
            "enhancedImage": t.proxy(
                renames["QualityCalypsoAppsUniversalImageOut"]
            ).optional(),
            "screenshot": t.array(
                t.proxy(renames["QualityCalypsoAppsUniversalImageOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityCalypsoAppsUniversalImageDataOut"])
    types["AbuseiamVerdictRestrictionContextIn"] = t.struct(
        {"id": t.string().optional(), "type": t.string()}
    ).named(renames["AbuseiamVerdictRestrictionContextIn"])
    types["AbuseiamVerdictRestrictionContextOut"] = t.struct(
        {
            "id": t.string().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamVerdictRestrictionContextOut"])
    types["RepositoryWebrefTaskDataIn"] = t.struct(
        {
            "isReadable": t.boolean().optional(),
            "taskDetails": t.proxy(renames["RepositoryWebrefTaskDetailsIn"]),
            "taskId": t.string(),
            "itemId": t.string(),
            "projectId": t.string(),
        }
    ).named(renames["RepositoryWebrefTaskDataIn"])
    types["RepositoryWebrefTaskDataOut"] = t.struct(
        {
            "isReadable": t.boolean().optional(),
            "taskDetails": t.proxy(renames["RepositoryWebrefTaskDetailsOut"]),
            "taskId": t.string(),
            "itemId": t.string(),
            "projectId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefTaskDataOut"])
    types["ImageContentStarburstVersionGroupIn"] = t.struct(
        {
            "descriptorShort": t.string().optional(),
            "descriptorFloat": t.array(t.number()).optional(),
            "version": t.integer().optional(),
            "starburstTokens": t.array(t.integer()).optional(),
            "minorVersion": t.string(),
            "enumVersion": t.string(),
        }
    ).named(renames["ImageContentStarburstVersionGroupIn"])
    types["ImageContentStarburstVersionGroupOut"] = t.struct(
        {
            "descriptorShort": t.string().optional(),
            "descriptorFloat": t.array(t.number()).optional(),
            "version": t.integer().optional(),
            "starburstTokens": t.array(t.integer()).optional(),
            "minorVersion": t.string(),
            "enumVersion": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageContentStarburstVersionGroupOut"])
    types["RepositoryWebrefCompactKgPropertyValueIn"] = t.struct(
        {
            "value": t.array(t.proxy(renames["RepositoryWebrefCompactKgValueIn"])),
            "valueStatus": t.string(),
            "hrid": t.string(),
            "encodedMid": t.string(),
        }
    ).named(renames["RepositoryWebrefCompactKgPropertyValueIn"])
    types["RepositoryWebrefCompactKgPropertyValueOut"] = t.struct(
        {
            "value": t.array(t.proxy(renames["RepositoryWebrefCompactKgValueOut"])),
            "valueStatus": t.string(),
            "hrid": t.string(),
            "encodedMid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCompactKgPropertyValueOut"])
    types["WWWMetaTagIn"] = t.struct({"content": t.string(), "name": t.string()}).named(
        renames["WWWMetaTagIn"]
    )
    types["WWWMetaTagOut"] = t.struct(
        {
            "content": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWMetaTagOut"])
    types["SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataIn"] = t.struct(
        {
            "familyStatus": t.string().optional(),
            "hiddenKeys": t.array(
                t.proxy(renames["SocialDiscoveryExternalEntityKeyIn"])
            ).optional(),
            "hideType": t.string().optional(),
        }
    ).named(renames["SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataIn"])
    types[
        "SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataOut"
    ] = t.struct(
        {
            "familyStatus": t.string().optional(),
            "hiddenKeys": t.array(
                t.proxy(renames["SocialDiscoveryExternalEntityKeyOut"])
            ).optional(),
            "hideType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataOut"]
    )
    types["VideoMediaInfoIn"] = t.struct(
        {
            "fileSize": t.string().optional(),
            "videoStream": t.array(t.proxy(renames["VideoVideoStreamIn"])).optional(),
            "containerId": t.integer().optional(),
            "audioStream": t.array(t.proxy(renames["VideoAudioStreamIn"])).optional(),
            "overview": t.proxy(renames["VideoMediaOverviewIn"]).optional(),
        }
    ).named(renames["VideoMediaInfoIn"])
    types["VideoMediaInfoOut"] = t.struct(
        {
            "fileSize": t.string().optional(),
            "videoStream": t.array(t.proxy(renames["VideoVideoStreamOut"])).optional(),
            "containerId": t.integer().optional(),
            "audioStream": t.array(t.proxy(renames["VideoAudioStreamOut"])).optional(),
            "overview": t.proxy(renames["VideoMediaOverviewOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaInfoOut"])
    types["GeostoreRouteProtoIn"] = t.struct(
        {"childType": t.integer().optional()}
    ).named(renames["GeostoreRouteProtoIn"])
    types["GeostoreRouteProtoOut"] = t.struct(
        {
            "childType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRouteProtoOut"])
    types["VideoTimedtextS4ALIResultsIn"] = t.struct(
        {
            "speechClass": t.string().optional(),
            "langResults": t.array(
                t.proxy(renames["VideoTimedtextS4LangScoreIn"])
            ).optional(),
        }
    ).named(renames["VideoTimedtextS4ALIResultsIn"])
    types["VideoTimedtextS4ALIResultsOut"] = t.struct(
        {
            "speechClass": t.string().optional(),
            "langResults": t.array(
                t.proxy(renames["VideoTimedtextS4LangScoreOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoTimedtextS4ALIResultsOut"])
    types["QualityQrewriteAccountProvenanceGoogleAccountIn"] = t.struct(
        {
            "isSecondaryAccount": t.boolean(),
            "gaiaId": t.string(),
            "email": t.string(),
            "isDasherAccount": t.boolean(),
        }
    ).named(renames["QualityQrewriteAccountProvenanceGoogleAccountIn"])
    types["QualityQrewriteAccountProvenanceGoogleAccountOut"] = t.struct(
        {
            "isSecondaryAccount": t.boolean(),
            "gaiaId": t.string(),
            "email": t.string(),
            "isDasherAccount": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteAccountProvenanceGoogleAccountOut"])
    types["AssistantApiSettingsDeviceSettingsIn"] = t.struct(
        {
            "surfaceType": t.proxy(
                renames["AssistantApiCoreTypesSurfaceTypeIn"]
            ).optional(),
            "isDeviceActivationCacheEnabled": t.boolean().optional(),
            "vmLastUsedCoarseTimestamp": t.string().optional(),
            "homeGraphId": t.string().optional(),
            "marketplaceDisclosure": t.proxy(
                renames["AssistantApiSettingsMarketplaceDisclosureIn"]
            ).optional(),
            "linkedUsers": t.array(
                t.proxy(renames["AssistantApiSettingsLinkedUserIn"])
            ).optional(),
            "paymentsEnabled": t.boolean().optional(),
            "speechSettings": t.proxy(
                renames["AssistantApiSettingsSpeechSettingsIn"]
            ).optional(),
            "colocationStatus": t.string().optional(),
            "hotwordSensitivity": t.string().optional(),
            "lastUsedCoarseTimestamp": t.string().optional(),
            "deviceModelRevision": t.integer().optional(),
            "notificationProfile": t.proxy(
                renames["AssistantApiSettingsNotificationProfileIn"]
            ).optional(),
            "internalVersion": t.proxy(
                renames["AssistantApiSettingsInternalVersionIn"]
            ).optional(),
            "hotwordThresholdAdjustmentFactor": t.proxy(
                renames["AssistantApiSettingsHotwordThresholdAdjustmentFactorIn"]
            ).optional(),
            "capabilities": t.proxy(
                renames["AssistantApiDeviceCapabilitiesIn"]
            ).optional(),
            "aliasName": t.array(t.string()).optional(),
            "reauthTrustedDeviceSettings": t.proxy(
                renames["AssistantApiSettingsReauthTrustedDeviceSettingsIn"]
            ).optional(),
            "shortenedAddress": t.string().optional(),
            "isCloudSyncDevice": t.boolean().optional(),
            "locale": t.string().optional(),
            "speechOutputSettings": t.proxy(
                renames["AssistantApiSettingsSpeechOutputSettingsIn"]
            ).optional(),
            "trustedVoiceEnabled": t.boolean().optional(),
            "lastCastRegistrationTimestamp": t.string().optional(),
            "optInStatus": t.proxy(
                renames["AssistantApiSettingsDeviceLogsOptInIn"]
            ).optional(),
            "masqueradeMode": t.proxy(renames["AssistantApiSettingsMasqueradeModeIn"]),
            "faceEnrollmentStatus": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "oauthClientId": t.string().optional(),
            "allowIncomingCalls": t.boolean().optional(),
            "autoFramingSettings": t.proxy(
                renames["AssistantApiSettingsAutoFramingSettingsIn"]
            ).optional(),
            "deviceBrand": t.string().optional(),
            "onDeviceAppSettings": t.proxy(
                renames["AssistantApiSettingsOnDeviceAppSettingsIn"]
            ).optional(),
            "crossSurfaceAvailability": t.proxy(
                renames["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityIn"]
            ).optional(),
            "defaultAudioDeviceId": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdIn"]
            ).optional(),
            "faceMatchEnabled": t.boolean().optional(),
            "gcmSettings": t.proxy(
                renames["AssistantApiSettingsGcmSettingsIn"]
            ).optional(),
            "truncatedLocalNetworkId": t.string().optional(),
            "personalizationMetadata": t.proxy(
                renames["AssistantApiSettingsPersonalizationMetadataIn"]
            ).optional(),
            "creationTimestampMs": t.string().optional(),
            "blueSteelEnabled": t.boolean().optional(),
            "tetheredInfo": t.proxy(
                renames["AssistantApiSettingsTetheredInfoIn"]
            ).optional(),
            "locationFeature": t.proxy(renames["GeostoreFeatureProtoIn"]).optional(),
            "type": t.string().optional(),
            "dusi": t.string().optional(),
            "ancillaryDeviceId": t.proxy(
                renames["AssistantApiSettingsInternalAncillaryDeviceIdIn"]
            ).optional(),
            "timeZone": t.proxy(renames["AssistantApiTimeZoneIn"]).optional(),
            "politeMode": t.proxy(
                renames["AssistantApiSettingsPoliteModeIn"]
            ).optional(),
            "hospitalityModeStatus": t.proxy(
                renames["AssistantApiSettingsHospitalityModeIn"]
            ).optional(),
            "ambientSettings": t.proxy(
                renames["AssistantApiSettingsAmbientSettingsIn"]
            ).optional(),
            "voiceInputEnabled": t.boolean().optional(),
            "city": t.string().optional(),
            "ackStatus": t.string().optional(),
            "address": t.string().optional(),
            "speakerIdEnabled": t.boolean().optional(),
            "faceEnrollmentErrors": t.array(t.string()).optional(),
            "defaultVideoDeviceId": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdIn"]
            ).optional(),
            "humanFriendlyName": t.string().optional(),
            "voiceEnrollmentStatus": t.string().optional(),
            "homeGraphData": t.proxy(
                renames["AssistantApiSettingsHomeGraphDataIn"]
            ).optional(),
            "verboseTtsForChromecastEnabled": t.boolean().optional(),
            "postalCode": t.string(),
            "kidsMode": t.proxy(renames["AssistantApiSettingsKidsModeIn"]).optional(),
            "deviceModelId": t.string().optional(),
            "linkedDeviceId": t.array(
                t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"])
            ).optional(),
            "supervisionSettings": t.proxy(
                renames["AssistantApiSettingsDeviceSupervisionSettingsIn"]
            ).optional(),
            "locationCoordinates": t.proxy(
                renames["AssistantApiCoreTypesLocationCoordinatesIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSettingsIn"])
    types["AssistantApiSettingsDeviceSettingsOut"] = t.struct(
        {
            "surfaceType": t.proxy(
                renames["AssistantApiCoreTypesSurfaceTypeOut"]
            ).optional(),
            "isDeviceActivationCacheEnabled": t.boolean().optional(),
            "vmLastUsedCoarseTimestamp": t.string().optional(),
            "homeGraphId": t.string().optional(),
            "marketplaceDisclosure": t.proxy(
                renames["AssistantApiSettingsMarketplaceDisclosureOut"]
            ).optional(),
            "linkedUsers": t.array(
                t.proxy(renames["AssistantApiSettingsLinkedUserOut"])
            ).optional(),
            "paymentsEnabled": t.boolean().optional(),
            "speechSettings": t.proxy(
                renames["AssistantApiSettingsSpeechSettingsOut"]
            ).optional(),
            "colocationStatus": t.string().optional(),
            "hotwordSensitivity": t.string().optional(),
            "lastUsedCoarseTimestamp": t.string().optional(),
            "deviceModelRevision": t.integer().optional(),
            "notificationProfile": t.proxy(
                renames["AssistantApiSettingsNotificationProfileOut"]
            ).optional(),
            "internalVersion": t.proxy(
                renames["AssistantApiSettingsInternalVersionOut"]
            ).optional(),
            "hotwordThresholdAdjustmentFactor": t.proxy(
                renames["AssistantApiSettingsHotwordThresholdAdjustmentFactorOut"]
            ).optional(),
            "capabilities": t.proxy(
                renames["AssistantApiDeviceCapabilitiesOut"]
            ).optional(),
            "aliasName": t.array(t.string()).optional(),
            "reauthTrustedDeviceSettings": t.proxy(
                renames["AssistantApiSettingsReauthTrustedDeviceSettingsOut"]
            ).optional(),
            "shortenedAddress": t.string().optional(),
            "isCloudSyncDevice": t.boolean().optional(),
            "locale": t.string().optional(),
            "speechOutputSettings": t.proxy(
                renames["AssistantApiSettingsSpeechOutputSettingsOut"]
            ).optional(),
            "trustedVoiceEnabled": t.boolean().optional(),
            "lastCastRegistrationTimestamp": t.string().optional(),
            "optInStatus": t.proxy(
                renames["AssistantApiSettingsDeviceLogsOptInOut"]
            ).optional(),
            "masqueradeMode": t.proxy(renames["AssistantApiSettingsMasqueradeModeOut"]),
            "faceEnrollmentStatus": t.string().optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "oauthClientId": t.string().optional(),
            "allowIncomingCalls": t.boolean().optional(),
            "autoFramingSettings": t.proxy(
                renames["AssistantApiSettingsAutoFramingSettingsOut"]
            ).optional(),
            "deviceBrand": t.string().optional(),
            "onDeviceAppSettings": t.proxy(
                renames["AssistantApiSettingsOnDeviceAppSettingsOut"]
            ).optional(),
            "crossSurfaceAvailability": t.proxy(
                renames["AssistantApiSettingsDeviceSettingsCrossSurfaceAvailabilityOut"]
            ).optional(),
            "defaultAudioDeviceId": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdOut"]
            ).optional(),
            "faceMatchEnabled": t.boolean().optional(),
            "gcmSettings": t.proxy(
                renames["AssistantApiSettingsGcmSettingsOut"]
            ).optional(),
            "truncatedLocalNetworkId": t.string().optional(),
            "personalizationMetadata": t.proxy(
                renames["AssistantApiSettingsPersonalizationMetadataOut"]
            ).optional(),
            "creationTimestampMs": t.string().optional(),
            "blueSteelEnabled": t.boolean().optional(),
            "tetheredInfo": t.proxy(
                renames["AssistantApiSettingsTetheredInfoOut"]
            ).optional(),
            "locationFeature": t.proxy(renames["GeostoreFeatureProtoOut"]).optional(),
            "type": t.string().optional(),
            "dusi": t.string().optional(),
            "ancillaryDeviceId": t.proxy(
                renames["AssistantApiSettingsInternalAncillaryDeviceIdOut"]
            ).optional(),
            "timeZone": t.proxy(renames["AssistantApiTimeZoneOut"]).optional(),
            "politeMode": t.proxy(
                renames["AssistantApiSettingsPoliteModeOut"]
            ).optional(),
            "hospitalityModeStatus": t.proxy(
                renames["AssistantApiSettingsHospitalityModeOut"]
            ).optional(),
            "ambientSettings": t.proxy(
                renames["AssistantApiSettingsAmbientSettingsOut"]
            ).optional(),
            "voiceInputEnabled": t.boolean().optional(),
            "city": t.string().optional(),
            "ackStatus": t.string().optional(),
            "address": t.string().optional(),
            "speakerIdEnabled": t.boolean().optional(),
            "faceEnrollmentErrors": t.array(t.string()).optional(),
            "defaultVideoDeviceId": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdOut"]
            ).optional(),
            "humanFriendlyName": t.string().optional(),
            "voiceEnrollmentStatus": t.string().optional(),
            "homeGraphData": t.proxy(
                renames["AssistantApiSettingsHomeGraphDataOut"]
            ).optional(),
            "verboseTtsForChromecastEnabled": t.boolean().optional(),
            "postalCode": t.string(),
            "kidsMode": t.proxy(renames["AssistantApiSettingsKidsModeOut"]).optional(),
            "deviceModelId": t.string().optional(),
            "linkedDeviceId": t.array(
                t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"])
            ).optional(),
            "supervisionSettings": t.proxy(
                renames["AssistantApiSettingsDeviceSupervisionSettingsOut"]
            ).optional(),
            "locationCoordinates": t.proxy(
                renames["AssistantApiCoreTypesLocationCoordinatesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDeviceSettingsOut"])
    types["OceanVolumeComputedAccessRightsIn"] = t.struct(
        {
            "canFamilyShare": t.boolean().optional(),
            "panelizationFeatureInternalOnly": t.boolean().optional(),
            "viewableInternalOnly": t.boolean().optional(),
        }
    ).named(renames["OceanVolumeComputedAccessRightsIn"])
    types["OceanVolumeComputedAccessRightsOut"] = t.struct(
        {
            "canFamilyShare": t.boolean().optional(),
            "panelizationFeatureInternalOnly": t.boolean().optional(),
            "viewableInternalOnly": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeComputedAccessRightsOut"])
    types["ResearchScamGenericFeatureVectorFixedPointMetadataIn"] = t.struct(
        {"squaredL2Norm": t.number().optional()}
    ).named(renames["ResearchScamGenericFeatureVectorFixedPointMetadataIn"])
    types["ResearchScamGenericFeatureVectorFixedPointMetadataOut"] = t.struct(
        {
            "squaredL2Norm": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorFixedPointMetadataOut"])
    types["KnowledgeAnswersIntentQueryArgPathComponentIn"] = t.struct(
        {"index": t.integer(), "argName": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryArgPathComponentIn"])
    types["KnowledgeAnswersIntentQueryArgPathComponentOut"] = t.struct(
        {
            "index": t.integer(),
            "argName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgPathComponentOut"])
    types["ScienceIndexSignalAuthorIn"] = t.struct(
        {"OtherNames": t.string(), "LastName": t.string()}
    ).named(renames["ScienceIndexSignalAuthorIn"])
    types["ScienceIndexSignalAuthorOut"] = t.struct(
        {
            "OtherNames": t.string(),
            "LastName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceIndexSignalAuthorOut"])
    types["NlpSemanticParsingModelsMediaRadioNetworkIn"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioNetworkIn"])
    types["NlpSemanticParsingModelsMediaRadioNetworkOut"] = t.struct(
        {
            "rawText": t.string(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioNetworkOut"])
    types["AssistantApiSettingsInternalVersionIn"] = t.struct(
        {"id": t.string().optional(), "generationTime": t.string().optional()}
    ).named(renames["AssistantApiSettingsInternalVersionIn"])
    types["AssistantApiSettingsInternalVersionOut"] = t.struct(
        {
            "id": t.string().optional(),
            "generationTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsInternalVersionOut"])
    types["GoogleCloudDocumentaiV1DocumentStyleIn"] = t.struct(
        {
            "fontSize": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentStyleFontSizeIn"]
            ).optional(),
            "color": t.proxy(renames["GoogleTypeColorIn"]).optional(),
            "fontFamily": t.string().optional(),
            "fontWeight": t.string().optional(),
            "backgroundColor": t.proxy(renames["GoogleTypeColorIn"]).optional(),
            "textDecoration": t.string().optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorIn"]
            ).optional(),
            "textStyle": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentStyleIn"])
    types["GoogleCloudDocumentaiV1DocumentStyleOut"] = t.struct(
        {
            "fontSize": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentStyleFontSizeOut"]
            ).optional(),
            "color": t.proxy(renames["GoogleTypeColorOut"]).optional(),
            "fontFamily": t.string().optional(),
            "fontWeight": t.string().optional(),
            "backgroundColor": t.proxy(renames["GoogleTypeColorOut"]).optional(),
            "textDecoration": t.string().optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorOut"]
            ).optional(),
            "textStyle": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentStyleOut"])
    types["GeostoreDisplayDataProtoIn"] = t.struct(
        {"displayLocation": t.proxy(renames["GeostorePointProtoIn"]).optional()}
    ).named(renames["GeostoreDisplayDataProtoIn"])
    types["GeostoreDisplayDataProtoOut"] = t.struct(
        {
            "displayLocation": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDisplayDataProtoOut"])
    types["AssistantDeviceTargetingDeviceTargetingErrorIn"] = t.struct(
        {"type": t.string()}
    ).named(renames["AssistantDeviceTargetingDeviceTargetingErrorIn"])
    types["AssistantDeviceTargetingDeviceTargetingErrorOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDeviceTargetingDeviceTargetingErrorOut"])
    types["VideoContentSearchCaptionSpanAnchorFeaturesIn"] = t.struct(
        {
            "dolphinScores": t.proxy(
                renames["VideoContentSearchSpanDolphinScoresIn"]
            ).optional(),
            "preGapInMs": t.integer().optional(),
            "saftTranscriptStartCharOffset": t.integer().optional(),
            "spanDolphinScore": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "saftEndTokenIndex": t.integer(),
            "embeddingDistance": t.array(t.number()).optional(),
            "postGapInMs": t.integer().optional(),
            "saftBeginTokenIndex": t.integer().optional(),
            "saftTranscriptEndCharOffset": t.integer(),
            "spanAsrConfidenceStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "wordCount": t.integer().optional(),
            "dolphinFeatures": t.proxy(
                renames["VideoContentSearchSpanDolphinFeaturesIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchCaptionSpanAnchorFeaturesIn"])
    types["VideoContentSearchCaptionSpanAnchorFeaturesOut"] = t.struct(
        {
            "dolphinScores": t.proxy(
                renames["VideoContentSearchSpanDolphinScoresOut"]
            ).optional(),
            "preGapInMs": t.integer().optional(),
            "saftTranscriptStartCharOffset": t.integer().optional(),
            "spanDolphinScore": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "saftEndTokenIndex": t.integer(),
            "embeddingDistance": t.array(t.number()).optional(),
            "postGapInMs": t.integer().optional(),
            "saftBeginTokenIndex": t.integer().optional(),
            "saftTranscriptEndCharOffset": t.integer(),
            "spanAsrConfidenceStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "wordCount": t.integer().optional(),
            "dolphinFeatures": t.proxy(
                renames["VideoContentSearchSpanDolphinFeaturesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionSpanAnchorFeaturesOut"])
    types["IndexingVideosAsrTranscriptRepairAnnotationIn"] = t.struct(
        {"gibberishResult": t.string()}
    ).named(renames["IndexingVideosAsrTranscriptRepairAnnotationIn"])
    types["IndexingVideosAsrTranscriptRepairAnnotationOut"] = t.struct(
        {
            "gibberishResult": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingVideosAsrTranscriptRepairAnnotationOut"])
    types["KnowledgeGraphDateTimeProtoIn"] = t.struct(
        {
            "days": t.integer().optional(),
            "minutes": t.integer().optional(),
            "months": t.integer().optional(),
            "years": t.integer().optional(),
            "hours": t.integer().optional(),
            "tzOffset": t.string().optional(),
            "microseconds": t.integer().optional(),
            "seconds": t.integer().optional(),
        }
    ).named(renames["KnowledgeGraphDateTimeProtoIn"])
    types["KnowledgeGraphDateTimeProtoOut"] = t.struct(
        {
            "days": t.integer().optional(),
            "minutes": t.integer().optional(),
            "months": t.integer().optional(),
            "years": t.integer().optional(),
            "hours": t.integer().optional(),
            "tzOffset": t.string().optional(),
            "microseconds": t.integer().optional(),
            "seconds": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphDateTimeProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiUserDefinedIn"] = t.struct(
        {
            "key": t.string(),
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiUserDefinedIn"])
    types["AppsPeopleOzExternalMergedpeopleapiUserDefinedOut"] = t.struct(
        {
            "key": t.string(),
            "value": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiUserDefinedOut"])
    types["AssistantApiCoreTypesAndroidAppInfoDeltaIn"] = t.struct(
        {
            "androidAppInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoIn"]
            ).optional(),
            "lastUpdateTimestamp": t.string().optional(),
            "updateType": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoDeltaIn"])
    types["AssistantApiCoreTypesAndroidAppInfoDeltaOut"] = t.struct(
        {
            "androidAppInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoOut"]
            ).optional(),
            "lastUpdateTimestamp": t.string().optional(),
            "updateType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesAndroidAppInfoDeltaOut"])
    types["GeostoreSlopeProtoIn"] = t.struct(
        {
            "startPointFraction": t.number().optional(),
            "slopeValue": t.number().optional(),
        }
    ).named(renames["GeostoreSlopeProtoIn"])
    types["GeostoreSlopeProtoOut"] = t.struct(
        {
            "startPointFraction": t.number().optional(),
            "slopeValue": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSlopeProtoOut"])
    types["KeGovernanceTypedRegionsIn"] = t.struct(
        {"regionType": t.string().optional(), "regions": t.array(t.string()).optional()}
    ).named(renames["KeGovernanceTypedRegionsIn"])
    types["KeGovernanceTypedRegionsOut"] = t.struct(
        {
            "regionType": t.string().optional(),
            "regions": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KeGovernanceTypedRegionsOut"])
    types["CopleySubreferenceResolutionIn"] = t.struct(
        {
            "mid": t.string().optional(),
            "name": t.string().optional(),
            "resolutionScore": t.number().optional(),
        }
    ).named(renames["CopleySubreferenceResolutionIn"])
    types["CopleySubreferenceResolutionOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "name": t.string().optional(),
            "resolutionScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleySubreferenceResolutionOut"])
    types["ImageExifIPTCMetadataArtworkIn"] = t.struct(
        {"title": t.string().optional()}
    ).named(renames["ImageExifIPTCMetadataArtworkIn"])
    types["ImageExifIPTCMetadataArtworkOut"] = t.struct(
        {
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifIPTCMetadataArtworkOut"])
    types["AssistantGroundingRankerContactGroundingProviderFeaturesIn"] = t.struct(
        {
            "numAlternateNameFromFuzzyContactMatch": t.number().optional(),
            "isStarred": t.boolean().optional(),
            "matchedNameType": t.string(),
            "isSingleCandidate": t.boolean().optional(),
            "numCandidates": t.number().optional(),
            "recognitionAlternateSource": t.string(),
            "conceptId": t.string().optional(),
            "numAlternativeNamesFromInterpretation": t.number().optional(),
            "contactSource": t.string(),
            "isRelationshipFromAnnotation": t.boolean().optional(),
            "numAlternateNamesFromS3": t.number().optional(),
            "isRelationshipFromSource": t.boolean().optional(),
        }
    ).named(renames["AssistantGroundingRankerContactGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerContactGroundingProviderFeaturesOut"] = t.struct(
        {
            "numAlternateNameFromFuzzyContactMatch": t.number().optional(),
            "isStarred": t.boolean().optional(),
            "matchedNameType": t.string(),
            "isSingleCandidate": t.boolean().optional(),
            "numCandidates": t.number().optional(),
            "recognitionAlternateSource": t.string(),
            "conceptId": t.string().optional(),
            "numAlternativeNamesFromInterpretation": t.number().optional(),
            "contactSource": t.string(),
            "isRelationshipFromAnnotation": t.boolean().optional(),
            "numAlternateNamesFromS3": t.number().optional(),
            "isRelationshipFromSource": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerContactGroundingProviderFeaturesOut"])
    types["KnowledgeAnswersSensitivitySensitivityIn"] = t.struct(
        {
            "accountProvenance": t.array(
                t.proxy(renames["QualityQrewriteAccountProvenanceIn"])
            ).optional(),
            "instruction": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionIn"]
            ).optional(),
            "type": t.string().optional(),
            "source": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivitySensitivityIn"])
    types["KnowledgeAnswersSensitivitySensitivityOut"] = t.struct(
        {
            "accountProvenance": t.array(
                t.proxy(renames["QualityQrewriteAccountProvenanceOut"])
            ).optional(),
            "instruction": t.proxy(
                renames["KnowledgeAnswersSensitivityInstructionOut"]
            ).optional(),
            "type": t.string().optional(),
            "source": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivitySensitivityOut"])
    types["KnowledgeAnswersEntityTypeIn"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "inAllCollections": t.boolean(),
            "excludedCollection": t.array(t.string()).optional(),
            "collection": t.array(t.string()).optional(),
            "id": t.array(t.string()).optional(),
            "identifier": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryIdentifierIn"])
            ).optional(),
            "includeGeolocationData": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersEntityTypeIn"])
    types["KnowledgeAnswersEntityTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "inAllCollections": t.boolean(),
            "excludedCollection": t.array(t.string()).optional(),
            "collection": t.array(t.string()).optional(),
            "id": t.array(t.string()).optional(),
            "identifier": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryIdentifierOut"])
            ).optional(),
            "includeGeolocationData": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersEntityTypeOut"])
    types["GeostoreDimensionProtoIn"] = t.struct(
        {"dimension": t.number(), "unit": t.string()}
    ).named(renames["GeostoreDimensionProtoIn"])
    types["GeostoreDimensionProtoOut"] = t.struct(
        {
            "dimension": t.number(),
            "unit": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDimensionProtoOut"])
    types["AttentionalEntitiesSpatialPropertiesIn"] = t.struct(
        {"visibility": t.string()}
    ).named(renames["AttentionalEntitiesSpatialPropertiesIn"])
    types["AttentionalEntitiesSpatialPropertiesOut"] = t.struct(
        {
            "visibility": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttentionalEntitiesSpatialPropertiesOut"])
    types["CopleySourceTypeMetadataIn"] = t.struct(
        {
            "localDiscoverySettingsMetadata": t.proxy(
                renames[
                    "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataIn"
                ]
            ),
            "sensitivity": t.proxy(
                renames["KnowledgeAnswersSensitivitySensitivityIn"]
            ).optional(),
            "displayableName": t.string(),
            "personalDataType": t.string(),
            "personalDataProvenance": t.string(),
            "contactAnnotationId": t.string().optional(),
            "provenanceCategory": t.array(t.string()),
            "eventId": t.proxy(renames["EventIdMessageIn"]).optional(),
            "emailIdentifier": t.string().optional(),
        }
    ).named(renames["CopleySourceTypeMetadataIn"])
    types["CopleySourceTypeMetadataOut"] = t.struct(
        {
            "localDiscoverySettingsMetadata": t.proxy(
                renames[
                    "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataOut"
                ]
            ),
            "sensitivity": t.proxy(
                renames["KnowledgeAnswersSensitivitySensitivityOut"]
            ).optional(),
            "displayableName": t.string(),
            "personalDataType": t.string(),
            "personalDataProvenance": t.string(),
            "contactAnnotationId": t.string().optional(),
            "provenanceCategory": t.array(t.string()),
            "eventId": t.proxy(renames["EventIdMessageOut"]).optional(),
            "emailIdentifier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleySourceTypeMetadataOut"])
    types["TrawlerFetchReplyDataHTTPHeaderIn"] = t.struct(
        {"value": t.string(), "key": t.string()}
    ).named(renames["TrawlerFetchReplyDataHTTPHeaderIn"])
    types["TrawlerFetchReplyDataHTTPHeaderOut"] = t.struct(
        {
            "value": t.string(),
            "key": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataHTTPHeaderOut"])
    types["RepositoryWebrefExplainedRangeInfoIn"] = t.struct(
        {
            "explainedRange": t.array(
                t.proxy(renames["RepositoryWebrefExplainedRangeInfoExplainedRangeIn"])
            ).optional(),
            "geoQueryCoverage": t.string(),
        }
    ).named(renames["RepositoryWebrefExplainedRangeInfoIn"])
    types["RepositoryWebrefExplainedRangeInfoOut"] = t.struct(
        {
            "explainedRange": t.array(
                t.proxy(renames["RepositoryWebrefExplainedRangeInfoExplainedRangeOut"])
            ).optional(),
            "geoQueryCoverage": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefExplainedRangeInfoOut"])
    types["NlpSaftReferentIn"] = t.struct(
        {
            "distance": t.number().optional(),
            "explicitness": t.string(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "token": t.array(t.proxy(renames["NlpSaftTokenIn"])).optional(),
            "prominence": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "role": t.string(),
        }
    ).named(renames["NlpSaftReferentIn"])
    types["NlpSaftReferentOut"] = t.struct(
        {
            "distance": t.number().optional(),
            "explicitness": t.string(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "token": t.array(t.proxy(renames["NlpSaftTokenOut"])).optional(),
            "prominence": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "role": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftReferentOut"])
    types["AppsDynamiteCustomerIdIn"] = t.struct({"customerId": t.string()}).named(
        renames["AppsDynamiteCustomerIdIn"]
    )
    types["AppsDynamiteCustomerIdOut"] = t.struct(
        {
            "customerId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsDynamiteCustomerIdOut"])
    types["KnowledgeAnswersOpaqueShoppingProductExpressionTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingProductExpressionTypeIn"])
    types["KnowledgeAnswersOpaqueShoppingProductExpressionTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingProductExpressionTypeOut"])
    types["FreebaseLatLongIn"] = t.struct(
        {"latDeg": t.number(), "longDeg": t.number()}
    ).named(renames["FreebaseLatLongIn"])
    types["FreebaseLatLongOut"] = t.struct(
        {
            "latDeg": t.number(),
            "longDeg": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseLatLongOut"])
    types["VideoContentSearchEntityAnnotationsIn"] = t.struct(
        {
            "confidence": t.number().optional(),
            "isRestricted": t.boolean().optional(),
            "category": t.string().optional(),
            "mid": t.string().optional(),
        }
    ).named(renames["VideoContentSearchEntityAnnotationsIn"])
    types["VideoContentSearchEntityAnnotationsOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "isRestricted": t.boolean().optional(),
            "category": t.string().optional(),
            "mid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchEntityAnnotationsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiWebsiteIn"] = t.struct(
        {
            "rel": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoIn"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "formattedType": t.string().optional(),
            "value": t.string(),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteIn"])
    types["AppsPeopleOzExternalMergedpeopleapiWebsiteOut"] = t.struct(
        {
            "rel": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfoOut"
                    ]
                )
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "formattedType": t.string().optional(),
            "value": t.string(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiWebsiteOut"])
    types["RepositoryWebrefEntityScoresIn"] = t.struct(
        {
            "alphaEntityIdf": t.number().optional(),
            "allCapsProb": t.number().optional(),
            "nameCapitalizationProb": t.number().optional(),
            "entityIdf": t.number().optional(),
            "personProb": t.number().optional(),
            "commonNgramProb": t.number().optional(),
        }
    ).named(renames["RepositoryWebrefEntityScoresIn"])
    types["RepositoryWebrefEntityScoresOut"] = t.struct(
        {
            "alphaEntityIdf": t.number().optional(),
            "allCapsProb": t.number().optional(),
            "nameCapitalizationProb": t.number().optional(),
            "entityIdf": t.number().optional(),
            "personProb": t.number().optional(),
            "commonNgramProb": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityScoresOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "relationDetails": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsIn"]
            ).optional(),
            "formattedType": t.string().optional(),
            "value": t.string().optional(),
            "canonicalValue": t.string().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "relationDetails": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiRelationRelationDetailsOut"]
            ).optional(),
            "formattedType": t.string().optional(),
            "value": t.string().optional(),
            "canonicalValue": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationOut"])
    types["AssistantLogsCommunicationPhoneLogIn"] = t.struct(
        {
            "type": t.string().optional(),
            "rawDeviceContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationRawDeviceContactInfoLogIn"])
            ).optional(),
        }
    ).named(renames["AssistantLogsCommunicationPhoneLogIn"])
    types["AssistantLogsCommunicationPhoneLogOut"] = t.struct(
        {
            "type": t.string().optional(),
            "rawDeviceContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationRawDeviceContactInfoLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationPhoneLogOut"])
    types["TrawlerFetchReplyDataProtocolResponseIn"] = t.struct(
        {
            "Code": t.integer().optional(),
            "CutoffSize": t.string().optional(),
            "HttpVersion": t.string().optional(),
            "ProtocolVersionFallback": t.boolean().optional(),
            "ContentType": t.string().optional(),
            "UnTruncatedSize": t.string().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataProtocolResponseIn"])
    types["TrawlerFetchReplyDataProtocolResponseOut"] = t.struct(
        {
            "Code": t.integer().optional(),
            "CutoffSize": t.string().optional(),
            "HttpVersion": t.string().optional(),
            "ProtocolVersionFallback": t.boolean().optional(),
            "ContentType": t.string().optional(),
            "UnTruncatedSize": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataProtocolResponseOut"])
    types["NlpSaftTokenIn"] = t.struct(
        {
            "category": t.string().optional(),
            "tag": t.string().optional(),
            "scriptCode": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "word": t.string().optional(),
            "head": t.integer().optional(),
            "textProperties": t.integer(),
            "breakSkippedText": t.boolean().optional(),
            "start": t.integer().optional(),
            "morph": t.proxy(renames["NlpSaftMorphologyIn"]).optional(),
            "tagConfidence": t.number().optional(),
            "label": t.string().optional(),
            "lemma": t.string().optional(),
            "breakLevel": t.string(),
            "end": t.integer(),
        }
    ).named(renames["NlpSaftTokenIn"])
    types["NlpSaftTokenOut"] = t.struct(
        {
            "category": t.string().optional(),
            "tag": t.string().optional(),
            "scriptCode": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "word": t.string().optional(),
            "head": t.integer().optional(),
            "textProperties": t.integer(),
            "breakSkippedText": t.boolean().optional(),
            "start": t.integer().optional(),
            "morph": t.proxy(renames["NlpSaftMorphologyOut"]).optional(),
            "tagConfidence": t.number().optional(),
            "label": t.string().optional(),
            "lemma": t.string().optional(),
            "breakLevel": t.string(),
            "end": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftTokenOut"])
    types["GoodocSymbolIn"] = t.struct(
        {
            "Box": t.proxy(renames["GoodocBoundingBoxIn"]),
            "Label": t.proxy(renames["GoodocLabelIn"]),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxIn"]).optional(),
            "Code": t.integer().optional(),
            "symbolvariant": t.array(t.proxy(renames["GoodocSymbolSymbolVariantIn"])),
        }
    ).named(renames["GoodocSymbolIn"])
    types["GoodocSymbolOut"] = t.struct(
        {
            "Box": t.proxy(renames["GoodocBoundingBoxOut"]),
            "Label": t.proxy(renames["GoodocLabelOut"]),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxOut"]).optional(),
            "Code": t.integer().optional(),
            "symbolvariant": t.array(t.proxy(renames["GoodocSymbolSymbolVariantOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSymbolOut"])
    types["QualityDialogManagerExternalIdsIn"] = t.struct(
        {
            "knowledgeGraphMid": t.string(),
            "openTableRestaurantId": t.string(),
            "maddenSupportedActions": t.proxy(
                renames["GeoOndemandAssistantSupportedActionsIn"]
            ).optional(),
            "blueGingerSupportedServices": t.proxy(
                renames["BlueGingerClientVisibleProtoBlueGingerSupportedServicesIn"]
            ).optional(),
        }
    ).named(renames["QualityDialogManagerExternalIdsIn"])
    types["QualityDialogManagerExternalIdsOut"] = t.struct(
        {
            "knowledgeGraphMid": t.string(),
            "openTableRestaurantId": t.string(),
            "maddenSupportedActions": t.proxy(
                renames["GeoOndemandAssistantSupportedActionsOut"]
            ).optional(),
            "blueGingerSupportedServices": t.proxy(
                renames["BlueGingerClientVisibleProtoBlueGingerSupportedServicesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityDialogManagerExternalIdsOut"])
    types["AssistantDevicesPlatformProtoArgSpecIn"] = t.struct(
        {
            "optionValueSpec": t.proxy(
                renames["AssistantDevicesPlatformProtoOptionValueSpecIn"]
            ),
            "intValueSpec": t.proxy(
                renames["AssistantDevicesPlatformProtoIntValueSpecIn"]
            ),
            "type": t.string(),
        }
    ).named(renames["AssistantDevicesPlatformProtoArgSpecIn"])
    types["AssistantDevicesPlatformProtoArgSpecOut"] = t.struct(
        {
            "optionValueSpec": t.proxy(
                renames["AssistantDevicesPlatformProtoOptionValueSpecOut"]
            ),
            "intValueSpec": t.proxy(
                renames["AssistantDevicesPlatformProtoIntValueSpecOut"]
            ),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoArgSpecOut"])
    types["NlxDataSchemaDocumentIn"] = t.struct(
        {
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "languageSpans": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "mentions": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "author": t.array(t.proxy(renames["MultiscalePointerIndexIn"])).optional(),
            "text": t.string().optional(),
            "sentences": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "paragraphs": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "id": t.string().optional(),
            "url": t.string().optional(),
            "languageCode": t.array(t.string()).optional(),
        }
    ).named(renames["NlxDataSchemaDocumentIn"])
    types["NlxDataSchemaDocumentOut"] = t.struct(
        {
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "tokens": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "languageSpans": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "mentions": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "author": t.array(t.proxy(renames["MultiscalePointerIndexOut"])).optional(),
            "text": t.string().optional(),
            "sentences": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "paragraphs": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "id": t.string().optional(),
            "url": t.string().optional(),
            "languageCode": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaDocumentOut"])
    types["GoogleLongrunningOperationIn"] = t.struct(
        {
            "error": t.proxy(renames["GoogleRpcStatusIn"]).optional(),
            "metadata": t.struct({"_": t.string().optional()}).optional(),
            "response": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "done": t.boolean().optional(),
        }
    ).named(renames["GoogleLongrunningOperationIn"])
    types["GoogleLongrunningOperationOut"] = t.struct(
        {
            "error": t.proxy(renames["ErrorResponse"]).optional(),
            "metadata": t.struct({"_": t.string().optional()}).optional(),
            "response": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "done": t.boolean().optional(),
        }
    ).named(renames["GoogleLongrunningOperationOut"])
    types["CommerceDatastoreImageDeepTagsModelOutputIn"] = t.struct(
        {
            "modelType": t.proxy(renames["CommerceDatastoreDeepTagIn"]),
            "nfs": t.proxy(renames["CommerceDatastoreDeepTagIn"]).optional(),
            "collage": t.proxy(renames["CommerceDatastoreDeepTagIn"]),
            "cropping": t.proxy(renames["CommerceDatastoreDeepTagIn"]).optional(),
            "selfie": t.proxy(renames["CommerceDatastoreDeepTagIn"]),
            "overlay": t.proxy(renames["CommerceDatastoreDeepTagIn"]).optional(),
            "version": t.integer(),
            "objectCount": t.proxy(renames["CommerceDatastoreDeepTagIn"]),
            "textOverlay": t.array(
                t.proxy(renames["CommerceDatastoreDeepTagIn"])
            ).optional(),
            "backgroundType": t.proxy(renames["CommerceDatastoreDeepTagIn"]),
        }
    ).named(renames["CommerceDatastoreImageDeepTagsModelOutputIn"])
    types["CommerceDatastoreImageDeepTagsModelOutputOut"] = t.struct(
        {
            "modelType": t.proxy(renames["CommerceDatastoreDeepTagOut"]),
            "nfs": t.proxy(renames["CommerceDatastoreDeepTagOut"]).optional(),
            "collage": t.proxy(renames["CommerceDatastoreDeepTagOut"]),
            "cropping": t.proxy(renames["CommerceDatastoreDeepTagOut"]).optional(),
            "selfie": t.proxy(renames["CommerceDatastoreDeepTagOut"]),
            "overlay": t.proxy(renames["CommerceDatastoreDeepTagOut"]).optional(),
            "version": t.integer(),
            "objectCount": t.proxy(renames["CommerceDatastoreDeepTagOut"]),
            "textOverlay": t.array(
                t.proxy(renames["CommerceDatastoreDeepTagOut"])
            ).optional(),
            "backgroundType": t.proxy(renames["CommerceDatastoreDeepTagOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommerceDatastoreImageDeepTagsModelOutputOut"])
    types["GeostoreRestrictionGroupProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "segment": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
        }
    ).named(renames["GeostoreRestrictionGroupProtoIn"])
    types["GeostoreRestrictionGroupProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "segment": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRestrictionGroupProtoOut"])
    types["AssistantApiDateTimeIn"] = t.struct(
        {
            "timeOfDay": t.proxy(renames["AssistantApiTimeOfDayIn"]).optional(),
            "timeZone": t.proxy(renames["AssistantApiTimeZoneIn"]).optional(),
            "date": t.proxy(renames["AssistantApiDateIn"]).optional(),
        }
    ).named(renames["AssistantApiDateTimeIn"])
    types["AssistantApiDateTimeOut"] = t.struct(
        {
            "timeOfDay": t.proxy(renames["AssistantApiTimeOfDayOut"]).optional(),
            "timeZone": t.proxy(renames["AssistantApiTimeZoneOut"]).optional(),
            "date": t.proxy(renames["AssistantApiDateOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiDateTimeOut"])
    types["KnowledgeAnswersIntersectTypeIn"] = t.struct(
        {"slotNames": t.array(t.string())}
    ).named(renames["KnowledgeAnswersIntersectTypeIn"])
    types["KnowledgeAnswersIntersectTypeOut"] = t.struct(
        {
            "slotNames": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntersectTypeOut"])
    types["AbuseiamContentRestrictionIn"] = t.struct(
        {
            "userVerdict": t.array(t.proxy(renames["AbuseiamVerdictIn"])).optional(),
            "adminVerdict": t.array(t.proxy(renames["AbuseiamVerdictIn"])).optional(),
        }
    ).named(renames["AbuseiamContentRestrictionIn"])
    types["AbuseiamContentRestrictionOut"] = t.struct(
        {
            "userVerdict": t.array(t.proxy(renames["AbuseiamVerdictOut"])).optional(),
            "adminVerdict": t.array(t.proxy(renames["AbuseiamVerdictOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamContentRestrictionOut"])
    types["TrawlerTCPIPInfoIn"] = t.struct(
        {
            "SourceIPAddressPacked": t.string().optional(),
            "DestinationPort": t.integer(),
            "SourcePort": t.integer(),
            "DestinationIPAddressPacked": t.string().optional(),
        }
    ).named(renames["TrawlerTCPIPInfoIn"])
    types["TrawlerTCPIPInfoOut"] = t.struct(
        {
            "SourceIPAddressPacked": t.string().optional(),
            "DestinationPort": t.integer(),
            "SourcePort": t.integer(),
            "DestinationIPAddressPacked": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerTCPIPInfoOut"])
    types["AssistantApiGuestAccessOutputIn"] = t.struct(
        {"guestAccessOnYoutube": t.string()}
    ).named(renames["AssistantApiGuestAccessOutputIn"])
    types["AssistantApiGuestAccessOutputOut"] = t.struct(
        {
            "guestAccessOnYoutube": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiGuestAccessOutputOut"])
    types["AssistantLogsMediaFocusesLogIn"] = t.struct(
        {
            "nearbyMediaFocuses": t.array(
                t.proxy(renames["AssistantLogsMediaFocusInfoLogIn"])
            ).optional(),
            "localMediaFocus": t.proxy(renames["AssistantLogsMediaFocusInfoLogIn"]),
            "mediaFocuses": t.array(
                t.proxy(renames["AssistantLogsMediaFocusInfoLogIn"])
            ).optional(),
            "dialogTriggered": t.boolean(),
        }
    ).named(renames["AssistantLogsMediaFocusesLogIn"])
    types["AssistantLogsMediaFocusesLogOut"] = t.struct(
        {
            "nearbyMediaFocuses": t.array(
                t.proxy(renames["AssistantLogsMediaFocusInfoLogOut"])
            ).optional(),
            "localMediaFocus": t.proxy(renames["AssistantLogsMediaFocusInfoLogOut"]),
            "mediaFocuses": t.array(
                t.proxy(renames["AssistantLogsMediaFocusInfoLogOut"])
            ).optional(),
            "dialogTriggered": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsMediaFocusesLogOut"])
    types["VideoContentSearchVideoGeneratedQueryFeaturesIn"] = t.struct(
        {
            "prefilteredPassageCount": t.integer().optional(),
            "filterReason": t.array(t.string()).optional(),
            "titleEntityAnnotations": t.proxy(
                renames["VideoContentSearchEntityAnnotationsIn"]
            ).optional(),
            "totalRestrictedQueries": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchVideoGeneratedQueryFeaturesIn"])
    types["VideoContentSearchVideoGeneratedQueryFeaturesOut"] = t.struct(
        {
            "prefilteredPassageCount": t.integer().optional(),
            "filterReason": t.array(t.string()).optional(),
            "titleEntityAnnotations": t.proxy(
                renames["VideoContentSearchEntityAnnotationsOut"]
            ).optional(),
            "totalRestrictedQueries": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoGeneratedQueryFeaturesOut"])
    types["GoogleInternalAppsWaldoV1alphaWorkingHoursIn"] = t.struct(
        {
            "availableTime": t.array(
                t.proxy(renames["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodIn"])
            ).optional()
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaWorkingHoursIn"])
    types["GoogleInternalAppsWaldoV1alphaWorkingHoursOut"] = t.struct(
        {
            "availableTime": t.array(
                t.proxy(renames["GoogleInternalAppsWaldoV1alphaAvailabilityPeriodOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaWorkingHoursOut"])
    types["NlpSemanticParsingLocalLocationElementIn"] = t.struct(
        {
            "hotelType": t.proxy(
                renames["NlpSemanticParsingLocalHotelTypeIn"]
            ).optional(),
            "source": t.string(),
            "transitLineNumber": t.string().optional(),
            "number": t.integer().optional(),
            "dialogReferents": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsIn"]
                )
            ).optional(),
            "personalReferenceLocation": t.proxy(
                renames["NlpSemanticParsingPersonalReferenceAnnotationIn"]
            ).optional(),
            "directionalModifier": t.string().optional(),
            "hyperReliableData": t.proxy(
                renames["NlpSemanticParsingLocalHyperReliableDataIn"]
            ),
            "localResultId": t.proxy(
                renames["NlpSemanticParsingLocalLocalResultIdIn"]
            ).optional(),
            "contactLocation": t.proxy(
                renames["NlpSemanticParsingLocalContactLocationIn"]
            ),
            "implicitLocalCategory": t.proxy(
                renames["NlpSemanticParsingLocalImplicitLocalCategoryIn"]
            ),
            "type": t.string(),
            "startByte": t.integer().optional(),
            "qrefLocation": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "text": t.string().optional(),
            "genericLocation": t.boolean().optional(),
            "saftLocation": t.proxy(
                renames["NlpSemanticParsingSaftMentionAnnotationIn"]
            ),
            "businessType": t.proxy(
                renames["NlpSemanticParsingLocalBusinessTypeIn"]
            ).optional(),
            "numBytes": t.integer(),
            "aliasLocation": t.string().optional(),
            "aliasIcon": t.array(
                t.proxy(renames["PersonalizationMapsAliasIconIn"])
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationElementIn"])
    types["NlpSemanticParsingLocalLocationElementOut"] = t.struct(
        {
            "hotelType": t.proxy(
                renames["NlpSemanticParsingLocalHotelTypeOut"]
            ).optional(),
            "source": t.string(),
            "transitLineNumber": t.string().optional(),
            "number": t.integer().optional(),
            "dialogReferents": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsOut"]
                )
            ).optional(),
            "personalReferenceLocation": t.proxy(
                renames["NlpSemanticParsingPersonalReferenceAnnotationOut"]
            ).optional(),
            "directionalModifier": t.string().optional(),
            "hyperReliableData": t.proxy(
                renames["NlpSemanticParsingLocalHyperReliableDataOut"]
            ),
            "localResultId": t.proxy(
                renames["NlpSemanticParsingLocalLocalResultIdOut"]
            ).optional(),
            "contactLocation": t.proxy(
                renames["NlpSemanticParsingLocalContactLocationOut"]
            ),
            "implicitLocalCategory": t.proxy(
                renames["NlpSemanticParsingLocalImplicitLocalCategoryOut"]
            ),
            "type": t.string(),
            "startByte": t.integer().optional(),
            "qrefLocation": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "text": t.string().optional(),
            "genericLocation": t.boolean().optional(),
            "saftLocation": t.proxy(
                renames["NlpSemanticParsingSaftMentionAnnotationOut"]
            ),
            "businessType": t.proxy(
                renames["NlpSemanticParsingLocalBusinessTypeOut"]
            ).optional(),
            "numBytes": t.integer(),
            "aliasLocation": t.string().optional(),
            "aliasIcon": t.array(
                t.proxy(renames["PersonalizationMapsAliasIconOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocationElementOut"])
    types["NlpSemanticParsingLocalLocalResultIdIn"] = t.struct(
        {
            "position": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "geocodingAddress": t.string().optional(),
            "rect": t.proxy(renames["GeostoreRectProtoIn"]).optional(),
            "kgMid": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]),
        }
    ).named(renames["NlpSemanticParsingLocalLocalResultIdIn"])
    types["NlpSemanticParsingLocalLocalResultIdOut"] = t.struct(
        {
            "position": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "geocodingAddress": t.string().optional(),
            "rect": t.proxy(renames["GeostoreRectProtoOut"]).optional(),
            "kgMid": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalLocalResultIdOut"])
    types["GeostoreBuildingProtoIn"] = t.struct(
        {
            "defaultDisplayLevel": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "structure": t.string().optional(),
            "floorsMetadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]),
            "baseHeightMetersAgl": t.number().optional(),
            "floors": t.integer().optional(),
            "heightMeters": t.number().optional(),
            "heightMetersMetadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]),
            "level": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
        }
    ).named(renames["GeostoreBuildingProtoIn"])
    types["GeostoreBuildingProtoOut"] = t.struct(
        {
            "defaultDisplayLevel": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "structure": t.string().optional(),
            "floorsMetadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]),
            "baseHeightMetersAgl": t.number().optional(),
            "floors": t.integer().optional(),
            "heightMeters": t.number().optional(),
            "heightMetersMetadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]),
            "level": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBuildingProtoOut"])
    types["AssistantLogsDefaultDeviceLogIn"] = t.struct(
        {
            "defaultSpeaker": t.proxy(renames["AssistantLogsDeviceInfoLogIn"]),
            "sourceDeviceId": t.string(),
            "defaultTv": t.proxy(renames["AssistantLogsDeviceInfoLogIn"]),
        }
    ).named(renames["AssistantLogsDefaultDeviceLogIn"])
    types["AssistantLogsDefaultDeviceLogOut"] = t.struct(
        {
            "defaultSpeaker": t.proxy(renames["AssistantLogsDeviceInfoLogOut"]),
            "sourceDeviceId": t.string(),
            "defaultTv": t.proxy(renames["AssistantLogsDeviceInfoLogOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDefaultDeviceLogOut"])
    types["AssistantApiSunriseFeaturesSupportIn"] = t.struct(
        {"sunriseSimulationSupported": t.boolean().optional()}
    ).named(renames["AssistantApiSunriseFeaturesSupportIn"])
    types["AssistantApiSunriseFeaturesSupportOut"] = t.struct(
        {
            "sunriseSimulationSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSunriseFeaturesSupportOut"])
    types["NlxDataSchemaEntityIn"] = t.struct(
        {
            "gender": t.string().optional(),
            "name": t.string().optional(),
            "mid": t.string().optional(),
            "type": t.array(t.string()).optional(),
        }
    ).named(renames["NlxDataSchemaEntityIn"])
    types["NlxDataSchemaEntityOut"] = t.struct(
        {
            "gender": t.string().optional(),
            "name": t.string().optional(),
            "mid": t.string().optional(),
            "type": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaEntityOut"])
    types["ClassifierPornClassifierDataIn"] = t.struct(
        {
            "imageBasedDetectionDone": t.boolean().optional(),
            "classification": t.array(
                t.proxy(renames["ClassifierPornClassifierDataClassificationIn"])
            ),
            "timestamp": t.string(),
        }
    ).named(renames["ClassifierPornClassifierDataIn"])
    types["ClassifierPornClassifierDataOut"] = t.struct(
        {
            "imageBasedDetectionDone": t.boolean().optional(),
            "classification": t.array(
                t.proxy(renames["ClassifierPornClassifierDataClassificationOut"])
            ),
            "timestamp": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornClassifierDataOut"])
    types["SpamMuppetjoinsMuppetSignalsIn"] = t.struct(
        {
            "hackedDateNautilus": t.integer(),
            "hackedDateRaiden": t.integer(),
            "raidenScore": t.number(),
            "site": t.string(),
        }
    ).named(renames["SpamMuppetjoinsMuppetSignalsIn"])
    types["SpamMuppetjoinsMuppetSignalsOut"] = t.struct(
        {
            "hackedDateNautilus": t.integer(),
            "hackedDateRaiden": t.integer(),
            "raidenScore": t.number(),
            "site": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpamMuppetjoinsMuppetSignalsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "latLng": t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLatLngIn"]),
            "primaryTypeName": t.string().optional(),
            "openingHours": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursIn"]
            ),
            "googleUrl": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "latLng": t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiLatLngOut"]),
            "primaryTypeName": t.string().optional(),
            "openingHours": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursOut"]
            ),
            "googleUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPlaceDetailsOut"])
    types["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesIn"] = t.struct(
        {
            "prefilterClassificationLabel": t.string().optional(),
            "tensorflowModelVersion": t.string().optional(),
        }
    ).named(renames["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesIn"])
    types["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesOut"] = t.struct(
        {
            "prefilterClassificationLabel": t.string().optional(),
            "tensorflowModelVersion": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSportsKeyMomentsAnchorSetFeaturesOut"])
    types["ImageRepositoryFramePerdocsIn"] = t.struct(
        {"framePerdoc": t.array(t.proxy(renames["ImageRepositoryFramePerdocIn"]))}
    ).named(renames["ImageRepositoryFramePerdocsIn"])
    types["ImageRepositoryFramePerdocsOut"] = t.struct(
        {
            "framePerdoc": t.array(t.proxy(renames["ImageRepositoryFramePerdocOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryFramePerdocsOut"])
    types["IndexingSignalAggregatorUrlPatternSignalsPriorSignalIn"] = t.struct(
        {
            "priorSignalId": t.string(),
            "aggregatedScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreIn"]
            ),
        }
    ).named(renames["IndexingSignalAggregatorUrlPatternSignalsPriorSignalIn"])
    types["IndexingSignalAggregatorUrlPatternSignalsPriorSignalOut"] = t.struct(
        {
            "priorSignalId": t.string(),
            "aggregatedScore": t.proxy(
                renames["IndexingSignalAggregatorAggregatedScoreOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorUrlPatternSignalsPriorSignalOut"])
    types["QualityActionsReminderLocationChainInfoIn"] = t.struct(
        {
            "chainMid": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "chainName": t.string().optional(),
        }
    ).named(renames["QualityActionsReminderLocationChainInfoIn"])
    types["QualityActionsReminderLocationChainInfoOut"] = t.struct(
        {
            "chainMid": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "chainName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderLocationChainInfoOut"])
    types["AnchorsRedundantAnchorInfoIn"] = t.struct(
        {"anchorsDropped": t.string(), "domain": t.string(), "text": t.string()}
    ).named(renames["AnchorsRedundantAnchorInfoIn"])
    types["AnchorsRedundantAnchorInfoOut"] = t.struct(
        {
            "anchorsDropped": t.string(),
            "domain": t.string(),
            "text": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AnchorsRedundantAnchorInfoOut"])
    types["ImagePornDebugInfoIn"] = t.struct({"info": t.string()}).named(
        renames["ImagePornDebugInfoIn"]
    )
    types["ImagePornDebugInfoOut"] = t.struct(
        {"info": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["ImagePornDebugInfoOut"])
    types["KnowledgeAnswersOpaqueMediaTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueMediaTypeIn"])
    types["KnowledgeAnswersOpaqueMediaTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueMediaTypeOut"])
    types["NlpSciencelitRetrievalSnippetDebugInfoIn"] = t.struct(
        {
            "goldHighlightSentenceIndices": t.array(t.integer()).optional(),
            "isGold": t.boolean().optional(),
            "snippetBleuScore": t.number().optional(),
            "sectionIrScore": t.number().optional(),
            "sectionIndex": t.integer().optional(),
            "offsetWithinSection": t.integer().optional(),
            "highlightIdxToSentenceOverlap": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "highlightIdxToOverlap": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["NlpSciencelitRetrievalSnippetDebugInfoIn"])
    types["NlpSciencelitRetrievalSnippetDebugInfoOut"] = t.struct(
        {
            "goldHighlightSentenceIndices": t.array(t.integer()).optional(),
            "isGold": t.boolean().optional(),
            "snippetBleuScore": t.number().optional(),
            "sectionIrScore": t.number().optional(),
            "sectionIndex": t.integer().optional(),
            "offsetWithinSection": t.integer().optional(),
            "highlightIdxToSentenceOverlap": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "highlightIdxToOverlap": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitRetrievalSnippetDebugInfoOut"])
    types["SentimentSentimentBehaviorsIn"] = t.struct(
        {"politeness": t.number().optional()}
    ).named(renames["SentimentSentimentBehaviorsIn"])
    types["SentimentSentimentBehaviorsOut"] = t.struct(
        {
            "politeness": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SentimentSentimentBehaviorsOut"])
    types["VideoContentSearchAnchorsCommonFeatureSetIn"] = t.struct(
        {
            "mumDescriptivenessStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "mumUsefulnessStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "dolphinUsefulnessStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "dolphinDescriptivenessStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchAnchorsCommonFeatureSetIn"])
    types["VideoContentSearchAnchorsCommonFeatureSetOut"] = t.struct(
        {
            "mumDescriptivenessStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "mumUsefulnessStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "dolphinUsefulnessStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "dolphinDescriptivenessStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorsCommonFeatureSetOut"])
    types["QualityNavboostCrapsCrapsDeviceIn"] = t.struct(
        {
            "uxInterface": t.integer().optional(),
            "uxTier": t.integer().optional(),
            "os": t.string(),
        }
    ).named(renames["QualityNavboostCrapsCrapsDeviceIn"])
    types["QualityNavboostCrapsCrapsDeviceOut"] = t.struct(
        {
            "uxInterface": t.integer().optional(),
            "uxTier": t.integer().optional(),
            "os": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsCrapsDeviceOut"])
    types["AssistantApiSettingsHospitalityCardSettingsCardConfigIn"] = t.struct(
        {
            "title": t.string().optional(),
            "moduleId": t.string().optional(),
            "activeActionRequired": t.boolean().optional(),
            "imageUrl": t.string().optional(),
            "payloadQuery": t.string().optional(),
            "effectiveTime": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "expiryTime": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "dismissable": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsCardConfigIn"])
    types["AssistantApiSettingsHospitalityCardSettingsCardConfigOut"] = t.struct(
        {
            "title": t.string().optional(),
            "moduleId": t.string().optional(),
            "activeActionRequired": t.boolean().optional(),
            "imageUrl": t.string().optional(),
            "payloadQuery": t.string().optional(),
            "effectiveTime": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "expiryTime": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "dismissable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityCardSettingsCardConfigOut"])
    types["AssistantApiSettingsMusicFilterIn"] = t.struct(
        {
            "state": t.string(),
            "whitelistedProviders": t.array(t.string()).optional(),
            "providerFilterState": t.string().optional(),
            "availableProviders": t.array(t.string()).optional(),
        }
    ).named(renames["AssistantApiSettingsMusicFilterIn"])
    types["AssistantApiSettingsMusicFilterOut"] = t.struct(
        {
            "state": t.string(),
            "whitelistedProviders": t.array(t.string()).optional(),
            "providerFilterState": t.string().optional(),
            "availableProviders": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsMusicFilterOut"])
    types["TrawlerFetchReplyDataPartialResponseIn"] = t.struct(
        {
            "ContentRange": t.proxy(renames["TrawlerContentRangeInfoIn"]).optional(),
            "ChunkNumber": t.integer().optional(),
            "IsFinalResponse": t.boolean().optional(),
            "BodyLocation": t.string().optional(),
            "ETag": t.string().optional(),
            "FetchID": t.string().optional(),
        }
    ).named(renames["TrawlerFetchReplyDataPartialResponseIn"])
    types["TrawlerFetchReplyDataPartialResponseOut"] = t.struct(
        {
            "ContentRange": t.proxy(renames["TrawlerContentRangeInfoOut"]).optional(),
            "ChunkNumber": t.integer().optional(),
            "IsFinalResponse": t.boolean().optional(),
            "BodyLocation": t.string().optional(),
            "ETag": t.string().optional(),
            "FetchID": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataPartialResponseOut"])
    types["IndexingConverterShingleFingerprintIn"] = t.struct(
        {"value": t.array(t.string()).optional(), "metadata": t.string()}
    ).named(renames["IndexingConverterShingleFingerprintIn"])
    types["IndexingConverterShingleFingerprintOut"] = t.struct(
        {
            "value": t.array(t.string()).optional(),
            "metadata": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterShingleFingerprintOut"])
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceIn"
    ] = t.struct(
        {
            "price": t.string().optional(),
            "countryCode": t.string(),
            "currencyCode": t.string().optional(),
        }
    ).named(
        renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceIn"]
    )
    types[
        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceOut"
    ] = t.struct(
        {
            "price": t.string().optional(),
            "countryCode": t.string(),
            "currencyCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceOut"]
    )
    types["LogsSemanticInterpretationIntentQueryLinkKindInfoIn"] = t.struct(
        {
            "kcLinkName": t.string(),
            "flags": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsIn"]
            ),
            "topicPropertyName": t.string(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryLinkKindInfoIn"])
    types["LogsSemanticInterpretationIntentQueryLinkKindInfoOut"] = t.struct(
        {
            "kcLinkName": t.string(),
            "flags": t.proxy(
                renames["LogsSemanticInterpretationIntentQueryLinkKindFlagsOut"]
            ),
            "topicPropertyName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogsSemanticInterpretationIntentQueryLinkKindInfoOut"])
    types["AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn"] = t.struct(
        {
            "otherDeviceSources": t.array(t.string()).optional(),
            "parentNode": t.array(t.string()).optional(),
            "userDefinedDeviceType": t.string().optional(),
            "deviceModelId": t.string().optional(),
            "targetDeviceSignalStrengths": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "smartDeviceManagementData": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataIn"
                ]
            ).optional(),
            "tdssUpdateTimestamp": t.string().optional(),
            "notificationEnabledByUser": t.boolean().optional(),
            "roleInformation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoRoleInformationIn"]
            ).optional(),
            "traitRoutingTable": t.struct({"_": t.string().optional()}).optional(),
            "lanscanOptedIn": t.boolean().optional(),
            "traitRoutingHints": t.array(
                t.proxy(renames["HomeGraphCommonTraitRoutingHintsIn"])
            ).optional(),
            "actionProjectConfigs": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoActionProjectConfigIn"
                    ]
                )
            ).optional(),
            "notificationSupportedByAgent": t.boolean().optional(),
            "physicalLocation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoPhysicalLocationIn"]
            ).optional(),
            "derivedType": t.array(t.string()).optional(),
            "otherDeviceIds": t.array(
                t.proxy(renames["AssistantVerticalsHomeautomationProtoAgentDeviceIdIn"])
            ).optional(),
            "primaryName": t.string().optional(),
            "supportedTraitsByAgent": t.struct({"_": t.string().optional()}).optional(),
            "plural": t.array(t.string()).optional(),
            "type": t.string().optional(),
            "voiceMatchRequired": t.string().optional(),
            "supportsDirectResponse": t.boolean().optional(),
            "groupIds": t.array(t.string()).optional(),
            "assistantDeviceId": t.string().optional(),
            "zoneNameSaftDocument": t.proxy(renames["NlpSaftDocumentIn"]).optional(),
            "modelName": t.string().optional(),
            "smartHomeFeatures": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesIn"]
            ).optional(),
            "opaqueCustomData": t.string().optional(),
            "supportedStructureFeatures": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesIn"
                ]
            ).optional(),
            "hashValue": t.string().optional(),
            "gcmExecutionAddress": t.string().optional(),
            "operationalNodeId": t.string().optional(),
            "personalizedNicknames": t.array(t.string()).optional(),
            "parentType": t.array(t.string()).optional(),
            "willReportState": t.boolean().optional(),
            "attributes": t.struct({"_": t.string().optional()}).optional(),
            "agentInformation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoAgentInformationIn"]
            ).optional(),
            "traitToAttributeProtos": t.struct({"_": t.string().optional()}).optional(),
            "routableViaGcm": t.boolean().optional(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentIn"]).optional(),
            "creatorGaiaId": t.string().optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataIn"])
    types["AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut"] = t.struct(
        {
            "otherDeviceSources": t.array(t.string()).optional(),
            "parentNode": t.array(t.string()).optional(),
            "userDefinedDeviceType": t.string().optional(),
            "deviceModelId": t.string().optional(),
            "targetDeviceSignalStrengths": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "smartDeviceManagementData": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataOut"
                ]
            ).optional(),
            "tdssUpdateTimestamp": t.string().optional(),
            "notificationEnabledByUser": t.boolean().optional(),
            "roleInformation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoRoleInformationOut"]
            ).optional(),
            "traitRoutingTable": t.struct({"_": t.string().optional()}).optional(),
            "lanscanOptedIn": t.boolean().optional(),
            "traitRoutingHints": t.array(
                t.proxy(renames["HomeGraphCommonTraitRoutingHintsOut"])
            ).optional(),
            "actionProjectConfigs": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoActionProjectConfigOut"
                    ]
                )
            ).optional(),
            "notificationSupportedByAgent": t.boolean().optional(),
            "physicalLocation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoPhysicalLocationOut"]
            ).optional(),
            "derivedType": t.array(t.string()).optional(),
            "otherDeviceIds": t.array(
                t.proxy(
                    renames["AssistantVerticalsHomeautomationProtoAgentDeviceIdOut"]
                )
            ).optional(),
            "primaryName": t.string().optional(),
            "supportedTraitsByAgent": t.struct({"_": t.string().optional()}).optional(),
            "plural": t.array(t.string()).optional(),
            "type": t.string().optional(),
            "voiceMatchRequired": t.string().optional(),
            "supportsDirectResponse": t.boolean().optional(),
            "groupIds": t.array(t.string()).optional(),
            "assistantDeviceId": t.string().optional(),
            "zoneNameSaftDocument": t.proxy(renames["NlpSaftDocumentOut"]).optional(),
            "modelName": t.string().optional(),
            "smartHomeFeatures": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesOut"]
            ).optional(),
            "opaqueCustomData": t.string().optional(),
            "supportedStructureFeatures": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoSupportedStructureFeaturesOut"
                ]
            ).optional(),
            "hashValue": t.string().optional(),
            "gcmExecutionAddress": t.string().optional(),
            "operationalNodeId": t.string().optional(),
            "personalizedNicknames": t.array(t.string()).optional(),
            "parentType": t.array(t.string()).optional(),
            "willReportState": t.boolean().optional(),
            "attributes": t.struct({"_": t.string().optional()}).optional(),
            "agentInformation": t.proxy(
                renames["AssistantVerticalsHomeautomationProtoAgentInformationOut"]
            ).optional(),
            "traitToAttributeProtos": t.struct({"_": t.string().optional()}).optional(),
            "routableViaGcm": t.boolean().optional(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentOut"]).optional(),
            "creatorGaiaId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataOut"])
    types["SocialGraphApiProtoSearchProfileEntityIn"] = t.struct(
        {
            "name": t.array(t.string()).optional(),
            "countryCode": t.string().optional(),
            "entity": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileEntityIn"])
    types["SocialGraphApiProtoSearchProfileEntityOut"] = t.struct(
        {
            "name": t.array(t.string()).optional(),
            "countryCode": t.string().optional(),
            "entity": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileEntityOut"])
    types["QualityActionsReminderDocumentIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["QualityActionsReminderDocumentIn"])
    types["QualityActionsReminderDocumentOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["QualityActionsReminderDocumentOut"])
    types["SocialGraphApiProtoSearchProfileLocationIn"] = t.struct(
        {
            "endTime": t.proxy(renames["GoogleTypeDateIn"]),
            "point": t.proxy(renames["SocialGraphApiProtoSearchProfileLocationInfoIn"]),
            "lengthOfStay": t.string(),
            "type": t.string(),
            "startTime": t.proxy(renames["GoogleTypeDateIn"]),
            "place": t.proxy(renames["SocialGraphApiProtoSearchProfileEntityIn"]),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileLocationIn"])
    types["SocialGraphApiProtoSearchProfileLocationOut"] = t.struct(
        {
            "endTime": t.proxy(renames["GoogleTypeDateOut"]),
            "point": t.proxy(
                renames["SocialGraphApiProtoSearchProfileLocationInfoOut"]
            ),
            "lengthOfStay": t.string(),
            "type": t.string(),
            "startTime": t.proxy(renames["GoogleTypeDateOut"]),
            "place": t.proxy(renames["SocialGraphApiProtoSearchProfileEntityOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSearchProfileLocationOut"])
    types["VideoMediaOverviewTimedTextOverviewIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["VideoMediaOverviewTimedTextOverviewIn"])
    types["VideoMediaOverviewTimedTextOverviewOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["VideoMediaOverviewTimedTextOverviewOut"])
    types["GeostoreFeatureIdForwardingsProtoIn"] = t.struct(
        {
            "replacedBy": t.proxy(renames["GeostoreFeatureIdListProtoIn"]).optional(),
            "inactiveDuplicate": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "duplicateOf": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "transitivelyDuplicateOf": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "forwardedId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreFeatureIdForwardingsProtoIn"])
    types["GeostoreFeatureIdForwardingsProtoOut"] = t.struct(
        {
            "replacedBy": t.proxy(renames["GeostoreFeatureIdListProtoOut"]).optional(),
            "inactiveDuplicate": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "duplicateOf": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "transitivelyDuplicateOf": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "forwardedId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFeatureIdForwardingsProtoOut"])
    types["GoogleAssistantEmbeddedV1FitnessActivitiesIn"] = t.struct(
        {
            "fitnessActivities": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1FitnessActivityIn"])
            ).optional()
        }
    ).named(renames["GoogleAssistantEmbeddedV1FitnessActivitiesIn"])
    types["GoogleAssistantEmbeddedV1FitnessActivitiesOut"] = t.struct(
        {
            "fitnessActivities": t.array(
                t.proxy(renames["GoogleAssistantEmbeddedV1FitnessActivityOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1FitnessActivitiesOut"])
    types["IndexingConverterRichContentDataRangeIn"] = t.struct(
        {
            "sourceUrl": t.string().optional(),
            "size": t.integer().optional(),
            "sourceType": t.string().optional(),
            "textCompressionMethod": t.string().optional(),
            "text": t.string().optional(),
            "rangeType": t.string(),
        }
    ).named(renames["IndexingConverterRichContentDataRangeIn"])
    types["IndexingConverterRichContentDataRangeOut"] = t.struct(
        {
            "sourceUrl": t.string().optional(),
            "size": t.integer().optional(),
            "sourceType": t.string().optional(),
            "textCompressionMethod": t.string().optional(),
            "text": t.string().optional(),
            "rangeType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRichContentDataRangeOut"])
    types["GoogleTypePostalAddressIn"] = t.struct(
        {
            "addressLines": t.array(t.string()).optional(),
            "sublocality": t.string().optional(),
            "recipients": t.array(t.string()).optional(),
            "languageCode": t.string().optional(),
            "sortingCode": t.string().optional(),
            "regionCode": t.string(),
            "locality": t.string().optional(),
            "organization": t.string().optional(),
            "postalCode": t.string().optional(),
            "administrativeArea": t.string().optional(),
            "revision": t.integer().optional(),
        }
    ).named(renames["GoogleTypePostalAddressIn"])
    types["GoogleTypePostalAddressOut"] = t.struct(
        {
            "addressLines": t.array(t.string()).optional(),
            "sublocality": t.string().optional(),
            "recipients": t.array(t.string()).optional(),
            "languageCode": t.string().optional(),
            "sortingCode": t.string().optional(),
            "regionCode": t.string(),
            "locality": t.string().optional(),
            "organization": t.string().optional(),
            "postalCode": t.string().optional(),
            "administrativeArea": t.string().optional(),
            "revision": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypePostalAddressOut"])
    types["AssistantContextProviderVariantIn"] = t.struct(
        {
            "emptyMidVariant": t.string(),
            "youtubeVariant": t.string(),
            "spotifyVariant": t.string(),
        }
    ).named(renames["AssistantContextProviderVariantIn"])
    types["AssistantContextProviderVariantOut"] = t.struct(
        {
            "emptyMidVariant": t.string(),
            "youtubeVariant": t.string(),
            "spotifyVariant": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantContextProviderVariantOut"])
    types["KnowledgeAnswersOpaqueTypeIn"] = t.struct(
        {
            "locationType": t.proxy(renames["KnowledgeAnswersOpaqueLocationTypeIn"]),
            "homeAutomationDeviceType": t.proxy(
                renames["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeIn"]
            ),
            "timerType": t.proxy(renames["KnowledgeAnswersOpaqueTimerTypeIn"]),
            "reminderType": t.proxy(renames["KnowledgeAnswersOpaqueReminderTypeIn"]),
            "productivityListItemType": t.proxy(
                renames["KnowledgeAnswersOpaqueProductivityListItemTypeIn"]
            ),
            "aogType": t.proxy(renames["KnowledgeAnswersOpaqueAogTypeIn"]),
            "audioType": t.proxy(renames["KnowledgeAnswersOpaqueAudioTypeIn"]),
            "calendarReferenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarReferenceTypeIn"]
            ),
            "mediaType": t.proxy(renames["KnowledgeAnswersOpaqueMediaTypeIn"]),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
            "narrativeNewsProviderType": t.proxy(
                renames["KnowledgeAnswersOpaqueNewsProviderTypeIn"]
            ),
            "calendarEventWrapperType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarEventWrapperTypeIn"]
            ),
            "shoppingProductExpressionType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingProductExpressionTypeIn"]
            ),
            "personalIntelligenceEntityType": t.proxy(
                renames["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeIn"]
            ),
            "personType": t.proxy(renames["KnowledgeAnswersOpaquePersonTypeIn"]),
            "shoppingProductType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingProductTypeIn"]
            ),
            "messageNotificationType": t.proxy(
                renames["KnowledgeAnswersOpaqueMessageNotificationTypeIn"]
            ),
            "deviceType": t.proxy(renames["KnowledgeAnswersOpaqueDeviceTypeIn"]),
            "deviceIdType": t.proxy(renames["KnowledgeAnswersOpaqueDeviceIdTypeIn"]),
            "deviceUserIdentityType": t.proxy(
                renames["KnowledgeAnswersOpaqueDeviceUserIdentityTypeIn"]
            ),
            "appAnnotationType": t.proxy(
                renames["KnowledgeAnswersOpaqueAppAnnotationTypeIn"]
            ),
            "onDeviceType": t.proxy(renames["KnowledgeAnswersOpaqueOnDeviceTypeIn"]),
            "shoppingStoreType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingStoreTypeIn"]
            ),
            "shoppingMerchantType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingMerchantTypeIn"]
            ),
            "complexQueriesRewriteType": t.proxy(
                renames["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeIn"]
            ),
            "calendarEventType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarEventTypeIn"]
            ),
            "moneyType": t.proxy(renames["KnowledgeAnswersOpaqueMoneyTypeIn"]),
            "componentReferenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueComponentReferenceIndexTypeIn"]
            ),
            "shoppingOfferType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingOfferTypeIn"]
            ),
            "recurrenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueRecurrenceTypeIn"]
            ),
        }
    ).named(renames["KnowledgeAnswersOpaqueTypeIn"])
    types["KnowledgeAnswersOpaqueTypeOut"] = t.struct(
        {
            "locationType": t.proxy(renames["KnowledgeAnswersOpaqueLocationTypeOut"]),
            "homeAutomationDeviceType": t.proxy(
                renames["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeOut"]
            ),
            "timerType": t.proxy(renames["KnowledgeAnswersOpaqueTimerTypeOut"]),
            "reminderType": t.proxy(renames["KnowledgeAnswersOpaqueReminderTypeOut"]),
            "productivityListItemType": t.proxy(
                renames["KnowledgeAnswersOpaqueProductivityListItemTypeOut"]
            ),
            "aogType": t.proxy(renames["KnowledgeAnswersOpaqueAogTypeOut"]),
            "audioType": t.proxy(renames["KnowledgeAnswersOpaqueAudioTypeOut"]),
            "calendarReferenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarReferenceTypeOut"]
            ),
            "mediaType": t.proxy(renames["KnowledgeAnswersOpaqueMediaTypeOut"]),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "narrativeNewsProviderType": t.proxy(
                renames["KnowledgeAnswersOpaqueNewsProviderTypeOut"]
            ),
            "calendarEventWrapperType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarEventWrapperTypeOut"]
            ),
            "shoppingProductExpressionType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingProductExpressionTypeOut"]
            ),
            "personalIntelligenceEntityType": t.proxy(
                renames["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeOut"]
            ),
            "personType": t.proxy(renames["KnowledgeAnswersOpaquePersonTypeOut"]),
            "shoppingProductType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingProductTypeOut"]
            ),
            "messageNotificationType": t.proxy(
                renames["KnowledgeAnswersOpaqueMessageNotificationTypeOut"]
            ),
            "deviceType": t.proxy(renames["KnowledgeAnswersOpaqueDeviceTypeOut"]),
            "deviceIdType": t.proxy(renames["KnowledgeAnswersOpaqueDeviceIdTypeOut"]),
            "deviceUserIdentityType": t.proxy(
                renames["KnowledgeAnswersOpaqueDeviceUserIdentityTypeOut"]
            ),
            "appAnnotationType": t.proxy(
                renames["KnowledgeAnswersOpaqueAppAnnotationTypeOut"]
            ),
            "onDeviceType": t.proxy(renames["KnowledgeAnswersOpaqueOnDeviceTypeOut"]),
            "shoppingStoreType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingStoreTypeOut"]
            ),
            "shoppingMerchantType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingMerchantTypeOut"]
            ),
            "complexQueriesRewriteType": t.proxy(
                renames["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeOut"]
            ),
            "calendarEventType": t.proxy(
                renames["KnowledgeAnswersOpaqueCalendarEventTypeOut"]
            ),
            "moneyType": t.proxy(renames["KnowledgeAnswersOpaqueMoneyTypeOut"]),
            "componentReferenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueComponentReferenceIndexTypeOut"]
            ),
            "shoppingOfferType": t.proxy(
                renames["KnowledgeAnswersOpaqueShoppingOfferTypeOut"]
            ),
            "recurrenceType": t.proxy(
                renames["KnowledgeAnswersOpaqueRecurrenceTypeOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersOpaqueTypeOut"])
    types["IndexingUrlPatternUrlTreeUrlTreeIn"] = t.struct(
        {
            "site": t.string().optional(),
            "treeInfo": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "node": t.array(
                t.proxy(renames["IndexingUrlPatternUrlTreeUrlTreeNodeIn"])
            ).optional(),
            "timestamp": t.integer().optional(),
            "key": t.proxy(renames["IndexingUrlPatternUrlTreeUrlTreeKeyIn"]),
            "debugInfo": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlTreeDebugInfoIn"]
            ),
            "retrievalTimestamp": t.integer().optional(),
            "bigBranch": t.array(
                t.proxy(renames["IndexingUrlPatternUrlTreeBigTreeBranchIn"])
            ).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeIn"])
    types["IndexingUrlPatternUrlTreeUrlTreeOut"] = t.struct(
        {
            "site": t.string().optional(),
            "treeInfo": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "node": t.array(
                t.proxy(renames["IndexingUrlPatternUrlTreeUrlTreeNodeOut"])
            ).optional(),
            "timestamp": t.integer().optional(),
            "key": t.proxy(renames["IndexingUrlPatternUrlTreeUrlTreeKeyOut"]),
            "debugInfo": t.proxy(
                renames["IndexingUrlPatternUrlTreeUrlTreeDebugInfoOut"]
            ),
            "retrievalTimestamp": t.integer().optional(),
            "bigBranch": t.array(
                t.proxy(renames["IndexingUrlPatternUrlTreeBigTreeBranchOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingUrlPatternUrlTreeUrlTreeOut"])
    types["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeIn"])
    types["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueHomeAutomationDeviceTypeOut"])
    types["OceanVolumeAccessRightsIn"] = t.struct(
        {
            "numAdobeIdAllowed": t.integer().optional(),
            "percentPrintable": t.integer().optional(),
            "textToSpeech": t.boolean().optional(),
            "numAdeDeviceAllowed": t.integer().optional(),
            "restrictOnlyToText": t.boolean().optional(),
            "sellFixedLayoutAsImageOnly": t.boolean().optional(),
            "allowAutoGeneratedText": t.boolean().optional(),
            "treatAsPublicDomain": t.boolean().optional(),
            "percentCopyable": t.integer().optional(),
            "offlineDownload": t.string().optional(),
            "canShowPhotos": t.boolean().optional(),
            "numDownloadsAllowed": t.integer().optional(),
            "canShowInfoCards": t.boolean().optional(),
            "numSimultaneousAccess": t.integer().optional(),
        }
    ).named(renames["OceanVolumeAccessRightsIn"])
    types["OceanVolumeAccessRightsOut"] = t.struct(
        {
            "numAdobeIdAllowed": t.integer().optional(),
            "percentPrintable": t.integer().optional(),
            "textToSpeech": t.boolean().optional(),
            "numAdeDeviceAllowed": t.integer().optional(),
            "restrictOnlyToText": t.boolean().optional(),
            "sellFixedLayoutAsImageOnly": t.boolean().optional(),
            "allowAutoGeneratedText": t.boolean().optional(),
            "treatAsPublicDomain": t.boolean().optional(),
            "percentCopyable": t.integer().optional(),
            "offlineDownload": t.string().optional(),
            "canShowPhotos": t.boolean().optional(),
            "numDownloadsAllowed": t.integer().optional(),
            "canShowInfoCards": t.boolean().optional(),
            "numSimultaneousAccess": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeAccessRightsOut"])
    types["KnowledgeAnswersSensitivityInstructionIntentIn"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyIn"]),
            "footprints": t.proxy(
                renames["KnowledgeAnswersSensitivityMyActivityPolicyIn"]
            ),
            "eval": t.proxy(renames["KnowledgeAnswersSensitivityIntentEvalPolicyIn"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyIn"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyIn"]),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionIntentIn"])
    types["KnowledgeAnswersSensitivityInstructionIntentOut"] = t.struct(
        {
            "serving": t.proxy(renames["KnowledgeAnswersSensitivityServingPolicyOut"]),
            "footprints": t.proxy(
                renames["KnowledgeAnswersSensitivityMyActivityPolicyOut"]
            ),
            "eval": t.proxy(renames["KnowledgeAnswersSensitivityIntentEvalPolicyOut"]),
            "storage": t.proxy(renames["KnowledgeAnswersSensitivityStoragePolicyOut"]),
            "logging": t.proxy(renames["KnowledgeAnswersSensitivityLoggingPolicyOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityInstructionIntentOut"])
    types["OrionDocEntitiesProtoIn"] = t.struct(
        {"encodedEntity": t.array(t.integer()).optional(), "docid": t.string()}
    ).named(renames["OrionDocEntitiesProtoIn"])
    types["OrionDocEntitiesProtoOut"] = t.struct(
        {
            "encodedEntity": t.array(t.integer()).optional(),
            "docid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OrionDocEntitiesProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityIn"] = t.struct(
        {
            "appType": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "reachabilityKey": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyIn"
                ]
            ),
            "status": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityIn"])
    types["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityOut"] = t.struct(
        {
            "appType": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "reachabilityKey": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKeyOut"
                ]
            ),
            "status": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInAppReachabilityOut"])
    types["SdrPageAnchorsDocInfoIn"] = t.struct(
        {
            "qscore": t.number(),
            "pageAnchors": t.array(t.proxy(renames["SdrPageAnchorsSitelinkIn"])),
            "sitelinkWrapper": t.array(
                t.proxy(renames["SdrPageAnchorsSitelinkWrapperIn"])
            ),
            "articleness": t.number(),
            "textRichness": t.number(),
        }
    ).named(renames["SdrPageAnchorsDocInfoIn"])
    types["SdrPageAnchorsDocInfoOut"] = t.struct(
        {
            "qscore": t.number(),
            "pageAnchors": t.array(t.proxy(renames["SdrPageAnchorsSitelinkOut"])),
            "sitelinkWrapper": t.array(
                t.proxy(renames["SdrPageAnchorsSitelinkWrapperOut"])
            ),
            "articleness": t.number(),
            "textRichness": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrPageAnchorsDocInfoOut"])
    types["VideoContentSearchSpanDolphinScoresSpanCandidateIn"] = t.struct(
        {
            "text": t.string().optional(),
            "sourcePassage": t.string().optional(),
            "asrConfidenceStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "scoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional(),
            "timeMs": t.string().optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresSpanCandidateIn"])
    types["VideoContentSearchSpanDolphinScoresSpanCandidateOut"] = t.struct(
        {
            "text": t.string().optional(),
            "sourcePassage": t.string().optional(),
            "asrConfidenceStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "scoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "timeMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresSpanCandidateOut"])
    types["QualityQrewriteAccountProvenanceThirdPartyAccountIn"] = t.struct(
        {"email": t.string().optional(), "thirdPartyProviderId": t.string().optional()}
    ).named(renames["QualityQrewriteAccountProvenanceThirdPartyAccountIn"])
    types["QualityQrewriteAccountProvenanceThirdPartyAccountOut"] = t.struct(
        {
            "email": t.string().optional(),
            "thirdPartyProviderId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityQrewriteAccountProvenanceThirdPartyAccountOut"])
    types["VideoContentSearchFrameSimilarityIntervalIn"] = t.struct(
        {
            "framesEndTimestampMs": t.string().optional(),
            "framesStarburstStartIndex": t.integer().optional(),
            "framesStartTimestampMs": t.string().optional(),
            "frameSimilarity": t.array(t.number()).optional(),
        }
    ).named(renames["VideoContentSearchFrameSimilarityIntervalIn"])
    types["VideoContentSearchFrameSimilarityIntervalOut"] = t.struct(
        {
            "framesEndTimestampMs": t.string().optional(),
            "framesStarburstStartIndex": t.integer().optional(),
            "framesStartTimestampMs": t.string().optional(),
            "frameSimilarity": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchFrameSimilarityIntervalOut"])
    types["GeostoreProvenanceProtoIn"] = t.struct(
        {"dataset": t.string().optional(), "provider": t.string().optional()}
    ).named(renames["GeostoreProvenanceProtoIn"])
    types["GeostoreProvenanceProtoOut"] = t.struct(
        {
            "dataset": t.string().optional(),
            "provider": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreProvenanceProtoOut"])
    types["GoodocDocumentPageMergedPageInfoIn"] = t.struct(
        {"OcrEngineId": t.string(), "OcrEngineVersion": t.string()}
    ).named(renames["GoodocDocumentPageMergedPageInfoIn"])
    types["GoodocDocumentPageMergedPageInfoOut"] = t.struct(
        {
            "OcrEngineId": t.string(),
            "OcrEngineVersion": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentPageMergedPageInfoOut"])
    types["ImageRepositoryNimaOutputIn"] = t.struct(
        {"score": t.number().optional()}
    ).named(renames["ImageRepositoryNimaOutputIn"])
    types["ImageRepositoryNimaOutputOut"] = t.struct(
        {
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryNimaOutputOut"])
    types["AssistantApiClockCapabilitiesIn"] = t.struct(
        {
            "restrictAlarmsToNext24h": t.boolean().optional(),
            "maxSupportedTimers": t.integer().optional(),
            "maxSupportedTimerDuration": t.proxy(
                renames["AssistantApiDurationIn"]
            ).optional(),
            "maxSupportedAlarms": t.integer().optional(),
            "preferredStopwatchProvider": t.proxy(
                renames["AssistantApiCoreTypesProviderIn"]
            ).optional(),
            "maxSupportedExtendedTimerDuration": t.proxy(
                renames["AssistantApiDurationIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiClockCapabilitiesIn"])
    types["AssistantApiClockCapabilitiesOut"] = t.struct(
        {
            "restrictAlarmsToNext24h": t.boolean().optional(),
            "maxSupportedTimers": t.integer().optional(),
            "maxSupportedTimerDuration": t.proxy(
                renames["AssistantApiDurationOut"]
            ).optional(),
            "maxSupportedAlarms": t.integer().optional(),
            "preferredStopwatchProvider": t.proxy(
                renames["AssistantApiCoreTypesProviderOut"]
            ).optional(),
            "maxSupportedExtendedTimerDuration": t.proxy(
                renames["AssistantApiDurationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiClockCapabilitiesOut"])
    types["GeostoreEntranceReferenceProtoIn"] = t.struct(
        {"featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional()}
    ).named(renames["GeostoreEntranceReferenceProtoIn"])
    types["GeostoreEntranceReferenceProtoOut"] = t.struct(
        {
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreEntranceReferenceProtoOut"])
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingIn"] = t.struct(
        {
            "startMsec": t.string().optional(),
            "finishMsec": t.string(),
            "name": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingIn"])
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingOut"] = t.struct(
        {
            "startMsec": t.string().optional(),
            "finishMsec": t.string(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingOut"])
    types["IndexingDocjoinerAnchorSpamInfoIn"] = t.struct(
        {
            "phraseCount": t.number().optional(),
            "anchorEnd": t.integer().optional(),
            "trustedDemoted": t.integer().optional(),
            "trustedTarget": t.boolean().optional(),
            "anchorStart": t.integer().optional(),
            "processed": t.integer().optional(),
            "demoted": t.integer().optional(),
            "spamProbability": t.number().optional(),
            "spamPenalty": t.number().optional(),
            "spamDebugInfo": t.string().optional(),
            "trustedExamples": t.string().optional(),
            "phraseFraq": t.number().optional(),
            "phraseDays": t.number().optional(),
            "sampled": t.boolean().optional(),
            "trustedMatching": t.integer().optional(),
            "anchorFraq": t.number().optional(),
            "demotedStart": t.integer().optional(),
            "sources": t.array(
                t.proxy(renames["IndexingDocjoinerAnchorTrustedInfoIn"])
            ).optional(),
            "demotedAll": t.boolean().optional(),
            "demotedEnd": t.integer().optional(),
            "trustedTotal": t.integer().optional(),
            "phraseRate": t.number().optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorSpamInfoIn"])
    types["IndexingDocjoinerAnchorSpamInfoOut"] = t.struct(
        {
            "phraseCount": t.number().optional(),
            "anchorEnd": t.integer().optional(),
            "trustedDemoted": t.integer().optional(),
            "trustedTarget": t.boolean().optional(),
            "anchorStart": t.integer().optional(),
            "processed": t.integer().optional(),
            "demoted": t.integer().optional(),
            "spamProbability": t.number().optional(),
            "spamPenalty": t.number().optional(),
            "spamDebugInfo": t.string().optional(),
            "trustedExamples": t.string().optional(),
            "phraseFraq": t.number().optional(),
            "phraseDays": t.number().optional(),
            "sampled": t.boolean().optional(),
            "trustedMatching": t.integer().optional(),
            "anchorFraq": t.number().optional(),
            "demotedStart": t.integer().optional(),
            "sources": t.array(
                t.proxy(renames["IndexingDocjoinerAnchorTrustedInfoOut"])
            ).optional(),
            "demotedAll": t.boolean().optional(),
            "demotedEnd": t.integer().optional(),
            "trustedTotal": t.integer().optional(),
            "phraseRate": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerAnchorSpamInfoOut"])
    types["RepositoryWebrefDomainSpecificRepresentationIn"] = t.struct(
        {"entityData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional()}
    ).named(renames["RepositoryWebrefDomainSpecificRepresentationIn"])
    types["RepositoryWebrefDomainSpecificRepresentationOut"] = t.struct(
        {
            "entityData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDomainSpecificRepresentationOut"])
    types["QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityIn"] = t.struct(
        {"mid": t.string(), "name": t.string()}
    ).named(renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityIn"])
    types["QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityOut"] = t.struct(
        {
            "mid": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityOut"])
    types["QualitySalientTermsSalientTermSetIn"] = t.struct(
        {
            "version": t.string().optional(),
            "docData": t.proxy(renames["QualitySalientTermsDocDataIn"]).optional(),
            "salientTerm": t.array(
                t.proxy(renames["QualitySalientTermsSalientTermIn"])
            ).optional(),
        }
    ).named(renames["QualitySalientTermsSalientTermSetIn"])
    types["QualitySalientTermsSalientTermSetOut"] = t.struct(
        {
            "version": t.string().optional(),
            "docData": t.proxy(renames["QualitySalientTermsDocDataOut"]).optional(),
            "salientTerm": t.array(
                t.proxy(renames["QualitySalientTermsSalientTermOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientTermsSalientTermSetOut"])
    types["RepositoryWebrefQueryIndicesIn"] = t.struct(
        {
            "queriesIndex": t.integer().optional(),
            "featuresIndex": t.array(t.integer()).optional(),
        }
    ).named(renames["RepositoryWebrefQueryIndicesIn"])
    types["RepositoryWebrefQueryIndicesOut"] = t.struct(
        {
            "queriesIndex": t.integer().optional(),
            "featuresIndex": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefQueryIndicesOut"])
    types["NlpSemanticParsingModelsDialogReferentsDialogReferentsIn"] = t.struct(
        {
            "taskMention": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsListSelectionIn"]
                )
            ).optional(),
            "index": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "next": t.proxy(
                renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsIn"]
            ).optional(),
            "selection": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsListSelectionIn"]
                )
            ).optional(),
            "field": t.proxy(
                renames["NlpSemanticParsingModelsDialogReferentsListSelectionIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsIn"])
    types["NlpSemanticParsingModelsDialogReferentsDialogReferentsOut"] = t.struct(
        {
            "taskMention": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsListSelectionOut"]
                )
            ).optional(),
            "index": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "next": t.proxy(
                renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsOut"]
            ).optional(),
            "selection": t.array(
                t.proxy(
                    renames["NlpSemanticParsingModelsDialogReferentsListSelectionOut"]
                )
            ).optional(),
            "field": t.proxy(
                renames["NlpSemanticParsingModelsDialogReferentsListSelectionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDialogReferentsDialogReferentsOut"])
    types["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeIn"])
    types["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaquePersonalIntelligenceEntityTypeOut"])
    types["VideoContentSearchMatchScoresIn"] = t.struct(
        {
            "method": t.string().optional(),
            "matchInfo": t.array(t.proxy(renames["VideoContentSearchTextMatchInfoIn"])),
        }
    ).named(renames["VideoContentSearchMatchScoresIn"])
    types["VideoContentSearchMatchScoresOut"] = t.struct(
        {
            "method": t.string().optional(),
            "matchInfo": t.array(
                t.proxy(renames["VideoContentSearchTextMatchInfoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchMatchScoresOut"])
    types["KnowledgeAnswersIntentQueryLocationMarkersSignalsIn"] = t.struct(
        {"type": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryLocationMarkersSignalsIn"])
    types["KnowledgeAnswersIntentQueryLocationMarkersSignalsOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryLocationMarkersSignalsOut"])
    types["VideoContentSearchVideoIntroductionIn"] = t.struct(
        {
            "hasIntro": t.boolean().optional(),
            "introEndMs": t.string().optional(),
            "introStartMs": t.string().optional(),
        }
    ).named(renames["VideoContentSearchVideoIntroductionIn"])
    types["VideoContentSearchVideoIntroductionOut"] = t.struct(
        {
            "hasIntro": t.boolean().optional(),
            "introEndMs": t.string().optional(),
            "introStartMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoIntroductionOut"])
    types["VideoClipInfoIn"] = t.struct({"value": t.string(), "key": t.string()}).named(
        renames["VideoClipInfoIn"]
    )
    types["VideoClipInfoOut"] = t.struct(
        {
            "value": t.string(),
            "key": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoClipInfoOut"])
    types["GeostoreEntranceProtoIn"] = t.struct(
        {
            "canExit": t.boolean().optional(),
            "canEnter": t.boolean().optional(),
            "allowance": t.string(),
        }
    ).named(renames["GeostoreEntranceProtoIn"])
    types["GeostoreEntranceProtoOut"] = t.struct(
        {
            "canExit": t.boolean().optional(),
            "canEnter": t.boolean().optional(),
            "allowance": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreEntranceProtoOut"])
    types["IndexingEmbeddedContentEmbeddedContentInfoIn"] = t.struct(
        {
            "referencedResource": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceIn"])
            ).optional(),
            "headlessResponse": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderResponseIn"]
            ).optional(),
            "rawRedirectInfo": t.proxy(
                renames["IndexingConverterRawRedirectInfoIn"]
            ).optional(),
            "renderingOutputMetadata": t.proxy(
                renames["IndexingEmbeddedContentRenderingOutputMetadataIn"]
            ),
            "originalEncoding": t.integer().optional(),
            "renderedSnapshot": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoImageIn"]
            ).optional(),
            "richcontentData": t.proxy(
                renames["IndexingConverterRichContentDataIn"]
            ).optional(),
            "isAlternateSnapshot": t.boolean().optional(),
            "convertedContents": t.string().optional(),
            "renderedSnapshotQualityScore": t.number().optional(),
            "renderedSnapshotImage": t.string().optional(),
            "compressedDocumentTrees": t.string().optional(),
            "renderedSnapshotMetadata": t.proxy(
                renames["SnapshotSnapshotMetadataIn"]
            ).optional(),
            "embeddedLinksInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbeddedLinksInfoIn"]
            ).optional(),
        }
    ).named(renames["IndexingEmbeddedContentEmbeddedContentInfoIn"])
    types["IndexingEmbeddedContentEmbeddedContentInfoOut"] = t.struct(
        {
            "referencedResource": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceOut"])
            ).optional(),
            "headlessResponse": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRenderResponseOut"]
            ).optional(),
            "rawRedirectInfo": t.proxy(
                renames["IndexingConverterRawRedirectInfoOut"]
            ).optional(),
            "renderingOutputMetadata": t.proxy(
                renames["IndexingEmbeddedContentRenderingOutputMetadataOut"]
            ),
            "originalEncoding": t.integer().optional(),
            "renderedSnapshot": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoImageOut"]
            ).optional(),
            "richcontentData": t.proxy(
                renames["IndexingConverterRichContentDataOut"]
            ).optional(),
            "isAlternateSnapshot": t.boolean().optional(),
            "convertedContents": t.string().optional(),
            "renderedSnapshotQualityScore": t.number().optional(),
            "renderedSnapshotImage": t.string().optional(),
            "compressedDocumentTrees": t.string().optional(),
            "renderedSnapshotMetadata": t.proxy(
                renames["SnapshotSnapshotMetadataOut"]
            ).optional(),
            "embeddedLinksInfo": t.proxy(
                renames["IndexingEmbeddedContentEmbeddedLinksInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentEmbeddedContentInfoOut"])
    types["QualityActionsAppInfoSourceDataIn"] = t.struct(
        {
            "allowListSourceData": t.proxy(
                renames["QualityActionsAppInfoSourceDataAllowListSourceDataIn"]
            ),
            "install": t.string().optional(),
            "mediaProviderSourceData": t.proxy(
                renames["QualityActionsAppInfoSourceDataMediaProviderSourceDataIn"]
            ),
            "confidence": t.number().optional(),
            "isCategorical": t.boolean(),
            "source": t.string(),
            "teleportSourceData": t.proxy(
                renames["AssistantTeleportTeleportNicknameSignalsIn"]
            ).optional(),
        }
    ).named(renames["QualityActionsAppInfoSourceDataIn"])
    types["QualityActionsAppInfoSourceDataOut"] = t.struct(
        {
            "allowListSourceData": t.proxy(
                renames["QualityActionsAppInfoSourceDataAllowListSourceDataOut"]
            ),
            "install": t.string().optional(),
            "mediaProviderSourceData": t.proxy(
                renames["QualityActionsAppInfoSourceDataMediaProviderSourceDataOut"]
            ),
            "confidence": t.number().optional(),
            "isCategorical": t.boolean(),
            "source": t.string(),
            "teleportSourceData": t.proxy(
                renames["AssistantTeleportTeleportNicknameSignalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsAppInfoSourceDataOut"])
    types["AssistantApiFitnessFeatureSupportIn"] = t.struct(
        {"supportedActivities": t.array(t.string()).optional()}
    ).named(renames["AssistantApiFitnessFeatureSupportIn"])
    types["AssistantApiFitnessFeatureSupportOut"] = t.struct(
        {
            "supportedActivities": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiFitnessFeatureSupportOut"])
    types["GoogleCloudContentwarehouseV1EnumArrayIn"] = t.struct(
        {"values": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1EnumArrayIn"])
    types["GoogleCloudContentwarehouseV1EnumArrayOut"] = t.struct(
        {
            "values": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1EnumArrayOut"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryIn"] = t.struct(
        {
            "neuralLocationAnnotator": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorIn"
                ]
            ),
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"])
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryIn"])
    types["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryOut"] = t.struct(
        {
            "neuralLocationAnnotator": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotatorOut"
                ]
            ),
            "evalData": t.array(
                t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQueryOut"])
    types["ClassifierPornAggregatedUrlPornScoresIn"] = t.struct(
        {"averageUrlPornScore": t.number(), "urlCount": t.integer()}
    ).named(renames["ClassifierPornAggregatedUrlPornScoresIn"])
    types["ClassifierPornAggregatedUrlPornScoresOut"] = t.struct(
        {
            "averageUrlPornScore": t.number(),
            "urlCount": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornAggregatedUrlPornScoresOut"])
    types["OcrPhotoCurvePointIn"] = t.struct(
        {"y": t.number().optional(), "x": t.number()}
    ).named(renames["OcrPhotoCurvePointIn"])
    types["OcrPhotoCurvePointOut"] = t.struct(
        {
            "y": t.number().optional(),
            "x": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OcrPhotoCurvePointOut"])
    types["NlpSaftRelationMentionIn"] = t.struct(
        {
            "source": t.integer().optional(),
            "sourceInfo": t.array(t.string()).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "target": t.integer(),
        }
    ).named(renames["NlpSaftRelationMentionIn"])
    types["NlpSaftRelationMentionOut"] = t.struct(
        {
            "source": t.integer().optional(),
            "sourceInfo": t.array(t.string()).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "target": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftRelationMentionOut"])
    types["OceanLocaleViewabilitySourceDetailsIn"] = t.struct(
        {"imprint": t.proxy(renames["OceanVolumeImprintIn"])}
    ).named(renames["OceanLocaleViewabilitySourceDetailsIn"])
    types["OceanLocaleViewabilitySourceDetailsOut"] = t.struct(
        {
            "imprint": t.proxy(renames["OceanVolumeImprintOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanLocaleViewabilitySourceDetailsOut"])
    types["GeostoreHtmlTextProtoIn"] = t.struct(
        {
            "text": t.array(
                t.proxy(renames["GeostoreLanguageTaggedTextProtoIn"])
            ).optional(),
            "type": t.string(),
        }
    ).named(renames["GeostoreHtmlTextProtoIn"])
    types["GeostoreHtmlTextProtoOut"] = t.struct(
        {
            "text": t.array(
                t.proxy(renames["GeostoreLanguageTaggedTextProtoOut"])
            ).optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreHtmlTextProtoOut"])
    types["UniversalsearchNewPackerKnowledgeResultSupportIn"] = t.struct(
        {
            "score": t.number().optional(),
            "url": t.string().optional(),
            "rank": t.integer().optional(),
            "provenance": t.array(
                t.proxy(
                    renames[
                        "UniversalsearchNewPackerKnowledgeResultSupportProvenanceIn"
                    ]
                )
            ).optional(),
            "source": t.string().optional(),
            "estimatedNaviness": t.number().optional(),
            "debug": t.string().optional(),
            "docid": t.string().optional(),
        }
    ).named(renames["UniversalsearchNewPackerKnowledgeResultSupportIn"])
    types["UniversalsearchNewPackerKnowledgeResultSupportOut"] = t.struct(
        {
            "score": t.number().optional(),
            "url": t.string().optional(),
            "rank": t.integer().optional(),
            "provenance": t.array(
                t.proxy(
                    renames[
                        "UniversalsearchNewPackerKnowledgeResultSupportProvenanceOut"
                    ]
                )
            ).optional(),
            "source": t.string().optional(),
            "estimatedNaviness": t.number().optional(),
            "debug": t.string().optional(),
            "docid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UniversalsearchNewPackerKnowledgeResultSupportOut"])
    types["WWWSnippetResponseIn"] = t.struct(
        {
            "obsoleteManybox": t.string().optional(),
            "orionEntities": t.proxy(renames["OrionDocEntitiesProtoIn"]).optional(),
            "snippetsRanklabFeatures": t.proxy(
                renames["MustangReposWwwSnippetsSnippetsRanklabFeaturesIn"]
            ).optional(),
            "titleSizeParams": t.proxy(renames["TitleSizeParamsIn"]).optional(),
            "isValidResult": t.boolean().optional(),
            "sentimentSnippets": t.array(
                t.proxy(
                    renames["RepositoryAnnotationsMustangSentimentSnippetAnnotationsIn"]
                )
            ).optional(),
            "seenNotTerm": t.boolean().optional(),
            "events": t.string().optional(),
            "findyTidbits": t.integer().optional(),
            "docInfo": t.proxy(renames["WWWDocInfoIn"]),
            "siteDisplayName": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "snippetPrefixCharCount": t.integer().optional(),
            "snippetBylineDate": t.string().optional(),
            "matchesBitmapEncoded": t.string().optional(),
            "numTokensSkippedByInDocRestrictionsInScoring": t.integer().optional(),
            "listSummary": t.string().optional(),
            "hasMessageType": t.array(t.integer()).optional(),
            "truncatedTitle": t.string().optional(),
            "docPreviewRestrictionsForAmp": t.proxy(
                renames["QualityDniDocPreviewRestrictionsIn"]
            ).optional(),
            "snippethash": t.string().optional(),
            "matchesBitmapSize": t.integer(),
            "answerDocMatches": t.array(t.integer()).optional(),
            "odp": t.boolean().optional(),
            "titleRenderedToken": t.array(
                t.proxy(renames["MustangSnippetsRenderedTokenIn"])
            ).optional(),
            "chosenBodyTidbits": t.array(t.integer()).optional(),
            "snippetExtraInfo": t.proxy(renames["SnippetExtraInfoIn"]),
            "squeryFingerprint": t.string().optional(),
            "scienceInfo": t.proxy(renames["ScienceIndexSignalIn"]).optional(),
            "longStructuredSnippet": t.proxy(
                renames["LongStructuredSnippetIn"]
            ).optional(),
            "numberOfPages": t.integer(),
            "snippetPageNumber": t.integer().optional(),
            "isLoginPage": t.boolean().optional(),
            "titleLengthAdjustedForBrowserWidth": t.boolean().optional(),
            "obsoleteSitemap": t.string().optional(),
            "listSnippet": t.proxy(renames["ListSnippetResponseIn"]).optional(),
            "sectionHeadingAnchorName": t.string(),
            "sectionHeadingText": t.string().optional(),
            "snippetHighlightMatchesBitmap": t.array(
                t.proxy(renames["WWWSnippetResponseBitmapPBIn"])
            ).optional(),
            "extraInfo": t.proxy(renames["ExtraSnippetInfoResponseIn"]).optional(),
            "metaTags": t.array(t.proxy(renames["WWWMetaTagIn"])).optional(),
            "docPreviewRestrictions": t.proxy(
                renames["QualityDniDocPreviewRestrictionsIn"]
            ).optional(),
            "snippetRenderedToken": t.array(
                t.proxy(renames["MustangSnippetsRenderedTokenIn"])
            ).optional(),
            "numTokensSkippedByInDocRestrictionsInPrinting": t.integer().optional(),
            "obsoleteLocalinfo": t.string().optional(),
            "keyword": t.array(t.string()).optional(),
        }
    ).named(renames["WWWSnippetResponseIn"])
    types["WWWSnippetResponseOut"] = t.struct(
        {
            "obsoleteManybox": t.string().optional(),
            "orionEntities": t.proxy(renames["OrionDocEntitiesProtoOut"]).optional(),
            "snippetsRanklabFeatures": t.proxy(
                renames["MustangReposWwwSnippetsSnippetsRanklabFeaturesOut"]
            ).optional(),
            "titleSizeParams": t.proxy(renames["TitleSizeParamsOut"]).optional(),
            "isValidResult": t.boolean().optional(),
            "sentimentSnippets": t.array(
                t.proxy(
                    renames[
                        "RepositoryAnnotationsMustangSentimentSnippetAnnotationsOut"
                    ]
                )
            ).optional(),
            "seenNotTerm": t.boolean().optional(),
            "events": t.string().optional(),
            "findyTidbits": t.integer().optional(),
            "docInfo": t.proxy(renames["WWWDocInfoOut"]),
            "siteDisplayName": t.string().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "snippetPrefixCharCount": t.integer().optional(),
            "snippetBylineDate": t.string().optional(),
            "matchesBitmapEncoded": t.string().optional(),
            "numTokensSkippedByInDocRestrictionsInScoring": t.integer().optional(),
            "listSummary": t.string().optional(),
            "hasMessageType": t.array(t.integer()).optional(),
            "truncatedTitle": t.string().optional(),
            "docPreviewRestrictionsForAmp": t.proxy(
                renames["QualityDniDocPreviewRestrictionsOut"]
            ).optional(),
            "snippethash": t.string().optional(),
            "matchesBitmapSize": t.integer(),
            "answerDocMatches": t.array(t.integer()).optional(),
            "odp": t.boolean().optional(),
            "titleRenderedToken": t.array(
                t.proxy(renames["MustangSnippetsRenderedTokenOut"])
            ).optional(),
            "chosenBodyTidbits": t.array(t.integer()).optional(),
            "snippetExtraInfo": t.proxy(renames["SnippetExtraInfoOut"]),
            "squeryFingerprint": t.string().optional(),
            "scienceInfo": t.proxy(renames["ScienceIndexSignalOut"]).optional(),
            "longStructuredSnippet": t.proxy(
                renames["LongStructuredSnippetOut"]
            ).optional(),
            "numberOfPages": t.integer(),
            "snippetPageNumber": t.integer().optional(),
            "isLoginPage": t.boolean().optional(),
            "titleLengthAdjustedForBrowserWidth": t.boolean().optional(),
            "obsoleteSitemap": t.string().optional(),
            "listSnippet": t.proxy(renames["ListSnippetResponseOut"]).optional(),
            "sectionHeadingAnchorName": t.string(),
            "sectionHeadingText": t.string().optional(),
            "snippetHighlightMatchesBitmap": t.array(
                t.proxy(renames["WWWSnippetResponseBitmapPBOut"])
            ).optional(),
            "extraInfo": t.proxy(renames["ExtraSnippetInfoResponseOut"]).optional(),
            "metaTags": t.array(t.proxy(renames["WWWMetaTagOut"])).optional(),
            "docPreviewRestrictions": t.proxy(
                renames["QualityDniDocPreviewRestrictionsOut"]
            ).optional(),
            "snippetRenderedToken": t.array(
                t.proxy(renames["MustangSnippetsRenderedTokenOut"])
            ).optional(),
            "numTokensSkippedByInDocRestrictionsInPrinting": t.integer().optional(),
            "obsoleteLocalinfo": t.string().optional(),
            "keyword": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWSnippetResponseOut"])
    types["AssistantApiCallCapabilitiesIn"] = t.struct(
        {
            "callOptions": t.array(t.string()).optional(),
            "supportedRecipientTypes": t.array(t.string()).optional(),
            "callFormats": t.array(t.string()).optional(),
            "callMediums": t.array(t.string()).optional(),
            "supportsDuoEmailEndpoint": t.boolean().optional(),
            "fallbackToTetheredDeviceAppCapabilities": t.boolean().optional(),
        }
    ).named(renames["AssistantApiCallCapabilitiesIn"])
    types["AssistantApiCallCapabilitiesOut"] = t.struct(
        {
            "callOptions": t.array(t.string()).optional(),
            "supportedRecipientTypes": t.array(t.string()).optional(),
            "callFormats": t.array(t.string()).optional(),
            "callMediums": t.array(t.string()).optional(),
            "supportsDuoEmailEndpoint": t.boolean().optional(),
            "fallbackToTetheredDeviceAppCapabilities": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCallCapabilitiesOut"])
    types["FocusBackendDeviceRawContactIdIn"] = t.struct(
        {
            "DeviceId": t.proxy(renames["FocusBackendDeviceIdIn"]),
            "RawContactId": t.string().optional(),
        }
    ).named(renames["FocusBackendDeviceRawContactIdIn"])
    types["FocusBackendDeviceRawContactIdOut"] = t.struct(
        {
            "DeviceId": t.proxy(renames["FocusBackendDeviceIdOut"]),
            "RawContactId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendDeviceRawContactIdOut"])
    types["RepositoryWebrefDocumentMetadataIn"] = t.struct(
        {
            "salientTerms": t.proxy(
                renames["QualitySalientTermsSalientTermSetIn"]
            ).optional(),
            "numIncomingAnchors": t.number().optional(),
            "url": t.string().optional(),
            "isDisambiguationPage": t.boolean().optional(),
            "language": t.string().optional(),
            "docId": t.string().optional(),
            "totalClicks": t.number().optional(),
            "crawlTime": t.string().optional(),
            "title": t.string().optional(),
            "docFp": t.string().optional(),
            "forwardingUrls": t.proxy(
                renames["RepositoryWebrefForwardingUrlsIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefDocumentMetadataIn"])
    types["RepositoryWebrefDocumentMetadataOut"] = t.struct(
        {
            "salientTerms": t.proxy(
                renames["QualitySalientTermsSalientTermSetOut"]
            ).optional(),
            "numIncomingAnchors": t.number().optional(),
            "url": t.string().optional(),
            "isDisambiguationPage": t.boolean().optional(),
            "language": t.string().optional(),
            "docId": t.string().optional(),
            "totalClicks": t.number().optional(),
            "crawlTime": t.string().optional(),
            "title": t.string().optional(),
            "docFp": t.string().optional(),
            "forwardingUrls": t.proxy(
                renames["RepositoryWebrefForwardingUrlsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDocumentMetadataOut"])
    types["TrawlerEventIn"] = t.struct(
        {
            "NumOccurrences": t.integer(),
            "TimeStampInUS": t.string(),
            "Msg": t.string(),
            "OldestTimeStampInUS": t.array(t.string()).optional(),
            "ID": t.string(),
        }
    ).named(renames["TrawlerEventIn"])
    types["TrawlerEventOut"] = t.struct(
        {
            "NumOccurrences": t.integer(),
            "TimeStampInUS": t.string(),
            "Msg": t.string(),
            "OldestTimeStampInUS": t.array(t.string()).optional(),
            "ID": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerEventOut"])
    types["GoogleCloudContentwarehouseV1ActionOutputIn"] = t.struct(
        {
            "actionId": t.string().optional(),
            "actionState": t.string().optional(),
            "outputMessage": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionOutputIn"])
    types["GoogleCloudContentwarehouseV1ActionOutputOut"] = t.struct(
        {
            "actionId": t.string().optional(),
            "actionState": t.string().optional(),
            "outputMessage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionOutputOut"])
    types["AssistantApiSettingsReauthTrustedDeviceSettingsIn"] = t.struct(
        {"trustSettingsForClient": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["AssistantApiSettingsReauthTrustedDeviceSettingsIn"])
    types["AssistantApiSettingsReauthTrustedDeviceSettingsOut"] = t.struct(
        {
            "trustSettingsForClient": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsReauthTrustedDeviceSettingsOut"])
    types["QualitySitemapSubresultIn"] = t.struct(
        {
            "docid": t.string(),
            "itemMetadata": t.proxy(
                renames["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataIn"]
            ),
        }
    ).named(renames["QualitySitemapSubresultIn"])
    types["QualitySitemapSubresultOut"] = t.struct(
        {
            "docid": t.string(),
            "itemMetadata": t.proxy(
                renames["QualitySitemapThirdPartyCarouselsListItemMuppetMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapSubresultOut"])
    types["CompositeDocAdditionalChecksumsIn"] = t.struct(
        {
            "simhashV2Significance": t.number().optional(),
            "SimHash": t.string().optional(),
            "NoTransientChecksum96": t.string().optional(),
            "SimHashIsTrusted": t.boolean(),
            "simhashV2": t.string().optional(),
        }
    ).named(renames["CompositeDocAdditionalChecksumsIn"])
    types["CompositeDocAdditionalChecksumsOut"] = t.struct(
        {
            "simhashV2Significance": t.number().optional(),
            "SimHash": t.string().optional(),
            "NoTransientChecksum96": t.string().optional(),
            "SimHashIsTrusted": t.boolean(),
            "simhashV2": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocAdditionalChecksumsOut"])
    types["LegalCitationCourtDocumentCourtIn"] = t.struct(
        {
            "Level": t.integer().optional(),
            "namecomponent": t.array(
                t.proxy(renames["LegalCitationCourtDocumentCourtNameComponentIn"])
            ),
            "OriginalName": t.string().optional(),
            "DisplayName": t.string().optional(),
            "Name": t.string().optional(),
        }
    ).named(renames["LegalCitationCourtDocumentCourtIn"])
    types["LegalCitationCourtDocumentCourtOut"] = t.struct(
        {
            "Level": t.integer().optional(),
            "namecomponent": t.array(
                t.proxy(renames["LegalCitationCourtDocumentCourtNameComponentOut"])
            ),
            "OriginalName": t.string().optional(),
            "DisplayName": t.string().optional(),
            "Name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentCourtOut"])
    types["AssistantApiCoreTypesLocationCoordinatesIn"] = t.struct(
        {
            "latDegrees": t.number().optional(),
            "lngDegrees": t.number().optional(),
            "accuracyMeters": t.number().optional(),
        }
    ).named(renames["AssistantApiCoreTypesLocationCoordinatesIn"])
    types["AssistantApiCoreTypesLocationCoordinatesOut"] = t.struct(
        {
            "latDegrees": t.number().optional(),
            "lngDegrees": t.number().optional(),
            "accuracyMeters": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesLocationCoordinatesOut"])
    types["AssistantApiCoreTypesCastAppInfoIn"] = t.struct(
        {"castAppId": t.string().optional(), "contentAppId": t.string().optional()}
    ).named(renames["AssistantApiCoreTypesCastAppInfoIn"])
    types["AssistantApiCoreTypesCastAppInfoOut"] = t.struct(
        {
            "castAppId": t.string().optional(),
            "contentAppId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCastAppInfoOut"])
    types["TrawlerLoggedVPCDestinationIn"] = t.struct(
        {
            "vnid": t.proxy(renames["NetFabricRpcVirtualNetworkIdIn"]),
            "cloudRegion": t.string(),
        }
    ).named(renames["TrawlerLoggedVPCDestinationIn"])
    types["TrawlerLoggedVPCDestinationOut"] = t.struct(
        {
            "vnid": t.proxy(renames["NetFabricRpcVirtualNetworkIdOut"]),
            "cloudRegion": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerLoggedVPCDestinationOut"])
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceIn"] = t.struct(
        {
            "domTreeNodeIndex": t.array(t.integer()).optional(),
            "failedHttpAccessControlCheck": t.boolean().optional(),
            "requestHeader": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn"
                    ]
                )
            ).optional(),
            "referencedResourceContentIndex": t.integer().optional(),
            "url": t.string().optional(),
            "requestMethod": t.integer().optional(),
            "timing": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingIn"
                    ]
                )
            ),
            "metadata": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchMetadataIn"])
            ),
            "canceled": t.boolean().optional(),
            "synchronouslyFetched": t.boolean().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoIn"])
            ).optional(),
            "httpResponseCode": t.integer().optional(),
            "contentType": t.integer().optional(),
            "webkitMetadata": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn"]
            ).optional(),
            "styleIndex": t.array(t.integer()).optional(),
            "fetchStatus": t.string().optional(),
            "redirectTarget": t.string().optional(),
            "postData": t.string().optional(),
            "httpHeader": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceIn"])
    types["HtmlrenderWebkitHeadlessProtoReferencedResourceOut"] = t.struct(
        {
            "domTreeNodeIndex": t.array(t.integer()).optional(),
            "failedHttpAccessControlCheck": t.boolean().optional(),
            "requestHeader": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut"
                    ]
                )
            ).optional(),
            "referencedResourceContentIndex": t.integer().optional(),
            "url": t.string().optional(),
            "requestMethod": t.integer().optional(),
            "timing": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTimingOut"
                    ]
                )
            ),
            "metadata": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchMetadataOut"])
            ),
            "canceled": t.boolean().optional(),
            "synchronouslyFetched": t.boolean().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoOut"])
            ).optional(),
            "httpResponseCode": t.integer().optional(),
            "contentType": t.integer().optional(),
            "webkitMetadata": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut"]
            ).optional(),
            "styleIndex": t.array(t.integer()).optional(),
            "fetchStatus": t.string().optional(),
            "redirectTarget": t.string().optional(),
            "postData": t.string().optional(),
            "httpHeader": t.array(
                t.proxy(
                    renames[
                        "HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeaderOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceOut"])
    types["ImageExactBoostIn"] = t.struct(
        {"navquery": t.array(t.proxy(renames["ImageExactBoostNavQueryIn"]))}
    ).named(renames["ImageExactBoostIn"])
    types["ImageExactBoostOut"] = t.struct(
        {
            "navquery": t.array(t.proxy(renames["ImageExactBoostNavQueryOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExactBoostOut"])
    types["QualityGenieComplexQueriesComplexQueriesOutputRewriteIn"] = t.struct(
        {
            "textualRewrite": t.string(),
            "entities": t.array(
                t.proxy(
                    renames[
                        "QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityIn"
                    ]
                )
            ),
            "rewriteType": t.string(),
        }
    ).named(renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteIn"])
    types["QualityGenieComplexQueriesComplexQueriesOutputRewriteOut"] = t.struct(
        {
            "textualRewrite": t.string(),
            "entities": t.array(
                t.proxy(
                    renames[
                        "QualityGenieComplexQueriesComplexQueriesOutputRewriteEntityOut"
                    ]
                )
            ),
            "rewriteType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityGenieComplexQueriesComplexQueriesOutputRewriteOut"])
    types["WWWResultInfoSubImageDocInfoIn"] = t.struct(
        {
            "deepCropBytes": t.string().optional(),
            "pornSignals": t.integer().optional(),
            "bestThumbnailType": t.string().optional(),
            "safeForUniversal": t.boolean().optional(),
            "docid": t.string(),
            "tqStar": t.number().optional(),
            "humanModelScore": t.number().optional(),
            "crops": t.integer(),
            "width": t.integer(),
            "salientColorInfo": t.integer().optional(),
            "eqStar": t.number().optional(),
            "height": t.integer(),
            "estRelevance": t.number().optional(),
            "tradFrac": t.number(),
            "width50k": t.integer().optional(),
            "documentTrust": t.number(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdIn"]),
            "height50k": t.integer(),
            "pamirNormalizedScore": t.number(),
            "imageUrl": t.string(),
            "additionalSafesearchSignals": t.array(t.integer()),
            "salience": t.number().optional(),
            "score": t.number(),
            "dimeScore": t.number().optional(),
        }
    ).named(renames["WWWResultInfoSubImageDocInfoIn"])
    types["WWWResultInfoSubImageDocInfoOut"] = t.struct(
        {
            "deepCropBytes": t.string().optional(),
            "pornSignals": t.integer().optional(),
            "bestThumbnailType": t.string().optional(),
            "safeForUniversal": t.boolean().optional(),
            "docid": t.string(),
            "tqStar": t.number().optional(),
            "humanModelScore": t.number().optional(),
            "crops": t.integer(),
            "width": t.integer(),
            "salientColorInfo": t.integer().optional(),
            "eqStar": t.number().optional(),
            "height": t.integer(),
            "estRelevance": t.number().optional(),
            "tradFrac": t.number(),
            "width50k": t.integer().optional(),
            "documentTrust": t.number(),
            "flowOutput": t.proxy(renames["ImageContentFlowProtoProdOut"]),
            "height50k": t.integer(),
            "pamirNormalizedScore": t.number(),
            "imageUrl": t.string(),
            "additionalSafesearchSignals": t.array(t.integer()),
            "salience": t.number().optional(),
            "score": t.number(),
            "dimeScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWResultInfoSubImageDocInfoOut"])
    types["GoodocLogicalEntityIn"] = t.struct(
        {
            "link": t.array(t.proxy(renames["GoodocLogicalEntityLinkIn"])),
            "Metadata": t.string(),
        }
    ).named(renames["GoodocLogicalEntityIn"])
    types["GoodocLogicalEntityOut"] = t.struct(
        {
            "link": t.array(t.proxy(renames["GoodocLogicalEntityLinkOut"])),
            "Metadata": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocLogicalEntityOut"])
    types["GeostoreRegulatedAreaProtoIn"] = t.struct(
        {
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreRegulatedAreaProtoIn"])
    types["GeostoreRegulatedAreaProtoOut"] = t.struct(
        {
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRegulatedAreaProtoOut"])
    types["QualityActionsReminderDynamiteGroupIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["QualityActionsReminderDynamiteGroupIn"])
    types["QualityActionsReminderDynamiteGroupOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["QualityActionsReminderDynamiteGroupOut"])
    types["GeostorePriceInfoStatusIn"] = t.struct({"isVerified": t.boolean()}).named(
        renames["GeostorePriceInfoStatusIn"]
    )
    types["GeostorePriceInfoStatusOut"] = t.struct(
        {
            "isVerified": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceInfoStatusOut"])
    types["ClassifierPornDocumentDataIn"] = t.struct(
        {
            "sitedata": t.proxy(renames["ClassifierPornSiteDataIn"]),
            "classifierdata": t.proxy(renames["ClassifierPornClassifierDataIn"]),
        }
    ).named(renames["ClassifierPornDocumentDataIn"])
    types["ClassifierPornDocumentDataOut"] = t.struct(
        {
            "sitedata": t.proxy(renames["ClassifierPornSiteDataOut"]),
            "classifierdata": t.proxy(renames["ClassifierPornClassifierDataOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornDocumentDataOut"])
    types["GeostoreCanonicalGConceptProtoIn"] = t.struct(
        {
            "gconcept": t.proxy(renames["GeostoreGConceptInstanceProtoIn"]),
            "isRequired": t.boolean().optional(),
        }
    ).named(renames["GeostoreCanonicalGConceptProtoIn"])
    types["GeostoreCanonicalGConceptProtoOut"] = t.struct(
        {
            "gconcept": t.proxy(renames["GeostoreGConceptInstanceProtoOut"]),
            "isRequired": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCanonicalGConceptProtoOut"])
    types["GeostoreCallToActionProtoIn"] = t.struct(
        {"url": t.proxy(renames["GeostoreUrlProtoIn"]), "ctaType": t.string()}
    ).named(renames["GeostoreCallToActionProtoIn"])
    types["GeostoreCallToActionProtoOut"] = t.struct(
        {
            "url": t.proxy(renames["GeostoreUrlProtoOut"]),
            "ctaType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCallToActionProtoOut"])
    types["GeostoreGeometryCompositionIn"] = t.struct(
        {
            "includesGeometryOf": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "excludesGeometryOf": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreGeometryCompositionIn"])
    types["GeostoreGeometryCompositionOut"] = t.struct(
        {
            "includesGeometryOf": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "excludesGeometryOf": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreGeometryCompositionOut"])
    types["SocialGraphApiProtoContactCreateContextIn"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextIn"]
            )
        }
    ).named(renames["SocialGraphApiProtoContactCreateContextIn"])
    types["SocialGraphApiProtoContactCreateContextOut"] = t.struct(
        {
            "mutationContext": t.proxy(
                renames["SocialGraphApiProtoContactMutationContextOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoContactCreateContextOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataIn"
    ] = t.struct(
        {
            "lowResData": t.string().optional(),
            "monogramUrl": t.string(),
            "lowResUrl": t.string(),
            "inconsistentPhoto": t.boolean().optional(),
            "diffData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataIn"
                ]
            ),
            "highResUrl": t.string(),
            "privateLowResAcl": t.boolean().optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataOut"
    ] = t.struct(
        {
            "lowResData": t.string().optional(),
            "monogramUrl": t.string(),
            "lowResUrl": t.string(),
            "inconsistentPhoto": t.boolean().optional(),
            "diffData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffDataOut"
                ]
            ),
            "highResUrl": t.string(),
            "privateLowResAcl": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataOut"
        ]
    )
    types["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoIn"] = t.struct(
        {
            "profileOwnerStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn"]
            ).optional(),
            "unjoinedEmailCertificates": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmailIn"])
            ).optional(),
            "ownerUserType": t.array(t.string()),
            "objectType": t.string().optional(),
            "inViewerDomain": t.boolean().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "plusPageType": t.string().optional(),
            "blockType": t.array(t.string()).optional(),
            "customerInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiCustomerInfoIn"]
            ).optional(),
            "accountEmail": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAccountEmailIn"]
            ).optional(),
            "incomingBlockType": t.array(t.string()).optional(),
            "domainInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoIn"
                ]
            ).optional(),
            "ownerId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoOut"] = t.struct(
        {
            "profileOwnerStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut"]
            ).optional(),
            "unjoinedEmailCertificates": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiEmailOut"])
            ).optional(),
            "ownerUserType": t.array(t.string()),
            "objectType": t.string().optional(),
            "inViewerDomain": t.boolean().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "plusPageType": t.string().optional(),
            "blockType": t.array(t.string()).optional(),
            "customerInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiCustomerInfoOut"]
            ).optional(),
            "accountEmail": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAccountEmailOut"]
            ).optional(),
            "incomingBlockType": t.array(t.string()).optional(),
            "domainInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfoOut"
                ]
            ).optional(),
            "ownerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonMetadataIn"] = t.struct(
        {
            "deviceContactInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoIn"]
                )
            ).optional(),
            "userVisibleStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsIn"]
            ).optional(),
            "contactGroupId": t.array(t.string()).optional(),
            "scoringInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoIn"
                ]
            ).optional(),
            "deprecatedBlocked": t.boolean().optional(),
            "deprecatedMembershipContactGroupId": t.array(t.string()).optional(),
            "profileOwnerStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsIn"]
            ).optional(),
            "objectType": t.string().optional(),
            "previousPersonId": t.array(t.string()).optional(),
            "lastUpdateTimeMicros": t.string().optional(),
            "model": t.string().optional(),
            "ownerUserType": t.array(t.string()).optional(),
            "customResponseMaskingType": t.string().optional(),
            "incomingBlockType": t.array(t.string()).optional(),
            "bestDisplayName": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameIn"]
            ).optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityIn"])
            ).optional(),
            "blockType": t.array(t.string()).optional(),
            "contactId": t.array(t.string()).optional(),
            "attribution": t.array(t.string()).optional(),
            "inViewerDomain": t.boolean().optional(),
            "circleId": t.array(t.string()).optional(),
            "deleted": t.boolean().optional(),
            "plusPageType": t.string().optional(),
            "deprecatedMembershipCircleId": t.array(t.string()).optional(),
            "identityInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiIdentityInfoIn"]
            ).optional(),
            "ownerId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonMetadataOut"] = t.struct(
        {
            "deviceContactInfo": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiDeviceContactInfoOut"]
                )
            ).optional(),
            "userVisibleStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsOut"]
            ).optional(),
            "contactGroupId": t.array(t.string()).optional(),
            "scoringInfo": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoOut"
                ]
            ).optional(),
            "deprecatedBlocked": t.boolean().optional(),
            "deprecatedMembershipContactGroupId": t.array(t.string()).optional(),
            "profileOwnerStats": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiProfileOwnerStatsOut"]
            ).optional(),
            "objectType": t.string().optional(),
            "previousPersonId": t.array(t.string()).optional(),
            "lastUpdateTimeMicros": t.string().optional(),
            "model": t.string().optional(),
            "ownerUserType": t.array(t.string()).optional(),
            "customResponseMaskingType": t.string().optional(),
            "incomingBlockType": t.array(t.string()).optional(),
            "bestDisplayName": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiBestDisplayNameOut"]
            ).optional(),
            "affinity": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiAffinityOut"])
            ).optional(),
            "blockType": t.array(t.string()).optional(),
            "contactId": t.array(t.string()).optional(),
            "attribution": t.array(t.string()).optional(),
            "inViewerDomain": t.boolean().optional(),
            "circleId": t.array(t.string()).optional(),
            "deleted": t.boolean().optional(),
            "plusPageType": t.string().optional(),
            "deprecatedMembershipCircleId": t.array(t.string()).optional(),
            "identityInfo": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiIdentityInfoOut"]
            ).optional(),
            "ownerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonMetadataOut"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn"] = t.struct(
        {
            "directTargetLink": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkIn"])
            ).optional(),
            "indirectTargetLink": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkIn"])
            ).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsIn"])
    types["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut"] = t.struct(
        {
            "directTargetLink": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkOut"])
            ).optional(),
            "indirectTargetLink": t.array(
                t.proxy(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterTargetLinkSetsOut"])
    types["QualityActionsReminderLocationIn"] = t.struct(
        {
            "chainInfo": t.proxy(renames["QualityActionsReminderLocationChainInfoIn"]),
            "personalLocationMetadata": t.proxy(
                renames["CopleySourceTypeListIn"]
            ).optional(),
            "displayAddress": t.string().optional(),
            "lng": t.number(),
            "ttsAddress": t.string().optional(),
            "geoFeatureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "categoryInfo": t.proxy(
                renames["QualityActionsReminderLocationCategoryInfoIn"]
            ),
            "name": t.string().optional(),
            "customLocationType": t.string().optional(),
            "locationType": t.string(),
            "lat": t.number(),
        }
    ).named(renames["QualityActionsReminderLocationIn"])
    types["QualityActionsReminderLocationOut"] = t.struct(
        {
            "chainInfo": t.proxy(renames["QualityActionsReminderLocationChainInfoOut"]),
            "personalLocationMetadata": t.proxy(
                renames["CopleySourceTypeListOut"]
            ).optional(),
            "displayAddress": t.string().optional(),
            "lng": t.number(),
            "ttsAddress": t.string().optional(),
            "geoFeatureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "categoryInfo": t.proxy(
                renames["QualityActionsReminderLocationCategoryInfoOut"]
            ),
            "name": t.string().optional(),
            "customLocationType": t.string().optional(),
            "locationType": t.string(),
            "lat": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderLocationOut"])
    types["CountryGeoLocationIn"] = t.struct(
        {
            "confidencePercent": t.integer().optional(),
            "confidence": t.number().optional(),
            "locationInfo": t.proxy(renames["CountryLocationInfoIn"]),
            "clickRadius50Percent": t.integer().optional(),
            "internalId": t.integer().optional(),
            "propagatedFromASubpage": t.boolean().optional(),
        }
    ).named(renames["CountryGeoLocationIn"])
    types["CountryGeoLocationOut"] = t.struct(
        {
            "confidencePercent": t.integer().optional(),
            "confidence": t.number().optional(),
            "locationInfo": t.proxy(renames["CountryLocationInfoOut"]),
            "clickRadius50Percent": t.integer().optional(),
            "internalId": t.integer().optional(),
            "propagatedFromASubpage": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryGeoLocationOut"])
    types["AssistantApiSettingsPodcastFilterIn"] = t.struct(
        {"state": t.string()}
    ).named(renames["AssistantApiSettingsPodcastFilterIn"])
    types["AssistantApiSettingsPodcastFilterOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiSettingsPodcastFilterOut"])
    types["NlpSemanticParsingModelsMediaRentalInfoIn"] = t.struct(
        {
            "grantPeriodSec": t.string().optional(),
            "activatePeriodSec": t.string().optional(),
            "purchaseTimestampSec": t.string().optional(),
            "validUntilTimestampSec": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRentalInfoIn"])
    types["NlpSemanticParsingModelsMediaRentalInfoOut"] = t.struct(
        {
            "grantPeriodSec": t.string().optional(),
            "activatePeriodSec": t.string().optional(),
            "purchaseTimestampSec": t.string().optional(),
            "validUntilTimestampSec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRentalInfoOut"])
    types["GoogleCloudContentwarehouseV1DocumentSchemaIn"] = t.struct(
        {
            "displayName": t.string(),
            "name": t.string().optional(),
            "documentIsFolder": t.boolean().optional(),
            "description": t.string().optional(),
            "propertyDefinitions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentSchemaIn"])
    types["GoogleCloudContentwarehouseV1DocumentSchemaOut"] = t.struct(
        {
            "displayName": t.string(),
            "updateTime": t.string().optional(),
            "name": t.string().optional(),
            "documentIsFolder": t.boolean().optional(),
            "description": t.string().optional(),
            "propertyDefinitions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1PropertyDefinitionOut"])
            ).optional(),
            "createTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "trustLevel": t.string(),
            "pomeroyId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "trustLevel": t.string(),
            "pomeroyId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmergencyInfoOut"])
    types["LegalCitationCourtDocumentCourtNameComponentIn"] = t.struct(
        {"Type": t.integer(), "Text": t.string()}
    ).named(renames["LegalCitationCourtDocumentCourtNameComponentIn"])
    types["LegalCitationCourtDocumentCourtNameComponentOut"] = t.struct(
        {
            "Type": t.integer(),
            "Text": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalCitationCourtDocumentCourtNameComponentOut"])
    types["SpamCookbookActionIn"] = t.struct({"dropInServing": t.boolean()}).named(
        renames["SpamCookbookActionIn"]
    )
    types["SpamCookbookActionOut"] = t.struct(
        {
            "dropInServing": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpamCookbookActionOut"])
    types["NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseIn"] = t.struct(
        {"rawText": t.string()}
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseIn"])
    types["NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseOut"] = t.struct(
        {"rawText": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhraseOut"])
    types["NlpSemanticParsingModelsMediaMusicGenreIn"] = t.struct(
        {
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "rawText": t.string(),
            "playMore": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicGenreIn"])
    types["NlpSemanticParsingModelsMediaMusicGenreOut"] = t.struct(
        {
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "rawText": t.string(),
            "playMore": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicGenreOut"])
    types["QualityActionsNewsProviderAnnotationDataIn"] = t.struct(
        {
            "providers": t.array(
                t.proxy(renames["QualityActionsNewsProviderAnnotationDataProviderIn"])
            )
        }
    ).named(renames["QualityActionsNewsProviderAnnotationDataIn"])
    types["QualityActionsNewsProviderAnnotationDataOut"] = t.struct(
        {
            "providers": t.array(
                t.proxy(renames["QualityActionsNewsProviderAnnotationDataProviderOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsNewsProviderAnnotationDataOut"])
    types["TrawlerHostBucketDataIn"] = t.struct(
        {
            "IsFull": t.boolean().optional(),
            "TotalCapacityQps": t.number().optional(),
            "CurrentActiveConnections": t.integer().optional(),
            "MinInterRequestSecs": t.number().optional(),
            "TotalUsedQps": t.number().optional(),
            "urllist": t.array(t.proxy(renames["TrawlerHostBucketDataUrlListIn"])),
            "MediumTermLoad": t.number().optional(),
            "NonFullIntervalMs": t.string().optional(),
            "ClientTrafficFraction": t.number().optional(),
            "ClientWeightFraction": t.number().optional(),
            "LastScheduleIntervalMs": t.string().optional(),
            "MaxActiveConnections": t.number().optional(),
        }
    ).named(renames["TrawlerHostBucketDataIn"])
    types["TrawlerHostBucketDataOut"] = t.struct(
        {
            "IsFull": t.boolean().optional(),
            "TotalCapacityQps": t.number().optional(),
            "CurrentActiveConnections": t.integer().optional(),
            "MinInterRequestSecs": t.number().optional(),
            "TotalUsedQps": t.number().optional(),
            "urllist": t.array(t.proxy(renames["TrawlerHostBucketDataUrlListOut"])),
            "MediumTermLoad": t.number().optional(),
            "NonFullIntervalMs": t.string().optional(),
            "ClientTrafficFraction": t.number().optional(),
            "ClientWeightFraction": t.number().optional(),
            "LastScheduleIntervalMs": t.string().optional(),
            "MaxActiveConnections": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerHostBucketDataOut"])
    types["KnowledgeAnswersUnionTypeIn"] = t.struct(
        {"slotNames": t.array(t.string())}
    ).named(renames["KnowledgeAnswersUnionTypeIn"])
    types["KnowledgeAnswersUnionTypeOut"] = t.struct(
        {
            "slotNames": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersUnionTypeOut"])
    types["ResearchScienceSearchNavboostQueryInfoIn"] = t.struct(
        {
            "impCount": t.number().optional(),
            "queryDocCount": t.number().optional(),
            "query": t.string().optional(),
            "queryCount": t.number().optional(),
            "lccCount": t.number().optional(),
        }
    ).named(renames["ResearchScienceSearchNavboostQueryInfoIn"])
    types["ResearchScienceSearchNavboostQueryInfoOut"] = t.struct(
        {
            "impCount": t.number().optional(),
            "queryDocCount": t.number().optional(),
            "query": t.string().optional(),
            "queryCount": t.number().optional(),
            "lccCount": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchNavboostQueryInfoOut"])
    types["AssistantApiSettingsDowntimePeriodIn"] = t.struct(
        {
            "endTime": t.proxy(renames["GoogleTypeTimeOfDayIn"]).optional(),
            "startDay": t.string().optional(),
            "startTime": t.proxy(renames["GoogleTypeTimeOfDayIn"]).optional(),
            "enabled": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsDowntimePeriodIn"])
    types["AssistantApiSettingsDowntimePeriodOut"] = t.struct(
        {
            "endTime": t.proxy(renames["GoogleTypeTimeOfDayOut"]).optional(),
            "startDay": t.string().optional(),
            "startTime": t.proxy(renames["GoogleTypeTimeOfDayOut"]).optional(),
            "enabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDowntimePeriodOut"])
    types["GeostoreMediaItemProtoIn"] = t.struct(
        {
            "mediaFormat": t.string(),
            "mediaKey": t.string().optional(),
            "mediaSize": t.proxy(renames["GeostoreMediaItemProtoMediaSizeIn"]),
            "googleUrl": t.string().optional(),
        }
    ).named(renames["GeostoreMediaItemProtoIn"])
    types["GeostoreMediaItemProtoOut"] = t.struct(
        {
            "mediaFormat": t.string(),
            "mediaKey": t.string().optional(),
            "mediaSize": t.proxy(renames["GeostoreMediaItemProtoMediaSizeOut"]),
            "googleUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreMediaItemProtoOut"])
    types["QualityActionsAppInfoSourceDataMediaProviderSourceDataIn"] = t.struct(
        {"providerKey": t.string().optional(), "providerType": t.string().optional()}
    ).named(renames["QualityActionsAppInfoSourceDataMediaProviderSourceDataIn"])
    types["QualityActionsAppInfoSourceDataMediaProviderSourceDataOut"] = t.struct(
        {
            "providerKey": t.string().optional(),
            "providerType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsAppInfoSourceDataMediaProviderSourceDataOut"])
    types["GoogleCloudContentwarehouseV1RuleSetIn"] = t.struct(
        {
            "rules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleIn"])
            ).optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "source": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleSetIn"])
    types["GoogleCloudContentwarehouseV1RuleSetOut"] = t.struct(
        {
            "rules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleOut"])
            ).optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "source": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleSetOut"])
    types["ImageExifIPTCMetadataLocationInfoIn"] = t.struct(
        {
            "countryCode": t.string(),
            "country": t.string(),
            "subLocation": t.string(),
            "city": t.string(),
            "state": t.string(),
            "worldRegion": t.string(),
        }
    ).named(renames["ImageExifIPTCMetadataLocationInfoIn"])
    types["ImageExifIPTCMetadataLocationInfoOut"] = t.struct(
        {
            "countryCode": t.string(),
            "country": t.string(),
            "subLocation": t.string(),
            "city": t.string(),
            "state": t.string(),
            "worldRegion": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageExifIPTCMetadataLocationInfoOut"])
    types["AssistantApiNotificationOutputRestrictionsIn"] = t.struct(
        {
            "optOutState": t.proxy(
                renames["AssistantApiNotificationOutputRestrictionsOptOutStateIn"]
            )
        }
    ).named(renames["AssistantApiNotificationOutputRestrictionsIn"])
    types["AssistantApiNotificationOutputRestrictionsOut"] = t.struct(
        {
            "optOutState": t.proxy(
                renames["AssistantApiNotificationOutputRestrictionsOptOutStateOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiNotificationOutputRestrictionsOut"])
    types["AssistantApiSupportedFeaturesIn"] = t.struct(
        {
            "sleepSensingSupported": t.boolean().optional(),
            "whatsNextSupported": t.boolean().optional(),
            "persistentDisplaySupported": t.boolean().optional(),
            "immersiveCanvasConfirmationMessageSupported": t.boolean().optional(),
            "webBrowserSupported": t.boolean().optional(),
            "confirmationBeforeReadingMultipleMessagesSupported": t.boolean().optional(),
            "remoteCloudCastingEnabled": t.boolean().optional(),
            "parentalControlsSupported": t.boolean().optional(),
            "appControlSupport": t.proxy(
                renames["AssistantApiAppControlSupportIn"]
            ).optional(),
            "csatVisualOverlaySupported": t.boolean().optional(),
            "duoGroupCallingSupported": t.boolean().optional(),
            "fluidActionsSupport": t.proxy(
                renames["AssistantApiFluidActionsSupportIn"]
            ).optional(),
            "signInMethod": t.proxy(renames["AssistantApiSignInMethodIn"]).optional(),
            "hasPhysicalRadio": t.boolean().optional(),
            "launchKeyboardSupported": t.string().optional(),
            "gearheadNotificationSourceSupported": t.boolean().optional(),
            "actionV2SupportedFeatures": t.proxy(
                renames["AssistantApiActionV2SupportedFeaturesIn"]
            ),
            "tapToReadOptimizationSupported": t.boolean().optional(),
            "lensSupported": t.boolean().optional(),
            "shLockScreenSupported": t.boolean().optional(),
            "assistantExploreSupported": t.boolean().optional(),
            "inDialogAccountLinkingSupported": t.boolean().optional(),
            "immersiveCanvasSupport": t.proxy(
                renames["AssistantApiImmersiveCanvasSupportIn"]
            ),
            "acpSupport": t.proxy(
                renames["AssistantApiAssistantContinuedPresenceSupportIn"]
            ).optional(),
            "mediaControlSupport": t.proxy(
                renames["AssistantApiMediaControlSupportIn"]
            ).optional(),
            "sunriseFeaturesSupport": t.proxy(
                renames["AssistantApiSunriseFeaturesSupportIn"]
            ).optional(),
            "funtimeSupported": t.boolean().optional(),
            "transactionFeaturesSupport": t.proxy(
                renames["AssistantApiTransactionFeaturesSupportIn"]
            ).optional(),
            "liveCardsSupported": t.boolean().optional(),
            "justInTimeSupported": t.boolean().optional(),
            "isPairedPhoneContactUploadNeededForComms": t.boolean().optional(),
            "masqueradeModeSupported": t.boolean().optional(),
            "mapsDialogsSupported": t.boolean().optional(),
            "transactionsVersion": t.string().optional(),
            "bypassMsgNotificationDismissal": t.boolean().optional(),
            "smartspaceCrossDeviceTimerSupported": t.boolean().optional(),
            "gdiSupported": t.boolean().optional(),
            "assistantForKidsSupported": t.boolean().optional(),
            "opaOnSearchSupported": t.boolean().optional(),
            "noInputResponseSupported": t.boolean().optional(),
            "isPairedPhoneNeededForComms": t.boolean().optional(),
            "zoomSupported": t.boolean().optional(),
            "usesSeparateFullViewer": t.boolean().optional(),
            "clientOpResultBatchingSupported": t.boolean().optional(),
            "meetSupported": t.boolean().optional(),
            "warmWelcomeTutorialSupported": t.boolean().optional(),
            "duoClientApiFeatures": t.string().optional(),
            "crossDeviceBroadcastVersion": t.string().optional(),
            "privacyAwareLockscreenSupported": t.boolean().optional(),
            "suggestionsSupport": t.proxy(
                renames["AssistantApiSuggestionsSupportIn"]
            ).optional(),
            "crossDeviceBroadcastSupported": t.boolean().optional(),
            "thirdPartyGuiSupported": t.boolean().optional(),
            "serverGeneratedFeedbackChipsEnabled": t.boolean().optional(),
            "alarmTimerManagerApiSupported": t.boolean().optional(),
            "bypassDiDcCheckForComms": t.boolean().optional(),
            "soliGestureDetectionSupported": t.boolean().optional(),
            "fitnessFeatureSupport": t.proxy(
                renames["AssistantApiFitnessFeatureSupportIn"]
            ).optional(),
            "mediaSessionDetection": t.string().optional(),
            "client1mProvidersSupported": t.boolean().optional(),
            "aaeNotificationSourceSupported": t.boolean().optional(),
            "viewReminderHubPageNotSupported": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSupportedFeaturesIn"])
    types["AssistantApiSupportedFeaturesOut"] = t.struct(
        {
            "sleepSensingSupported": t.boolean().optional(),
            "whatsNextSupported": t.boolean().optional(),
            "persistentDisplaySupported": t.boolean().optional(),
            "immersiveCanvasConfirmationMessageSupported": t.boolean().optional(),
            "webBrowserSupported": t.boolean().optional(),
            "confirmationBeforeReadingMultipleMessagesSupported": t.boolean().optional(),
            "remoteCloudCastingEnabled": t.boolean().optional(),
            "parentalControlsSupported": t.boolean().optional(),
            "appControlSupport": t.proxy(
                renames["AssistantApiAppControlSupportOut"]
            ).optional(),
            "csatVisualOverlaySupported": t.boolean().optional(),
            "duoGroupCallingSupported": t.boolean().optional(),
            "fluidActionsSupport": t.proxy(
                renames["AssistantApiFluidActionsSupportOut"]
            ).optional(),
            "signInMethod": t.proxy(renames["AssistantApiSignInMethodOut"]).optional(),
            "hasPhysicalRadio": t.boolean().optional(),
            "launchKeyboardSupported": t.string().optional(),
            "gearheadNotificationSourceSupported": t.boolean().optional(),
            "actionV2SupportedFeatures": t.proxy(
                renames["AssistantApiActionV2SupportedFeaturesOut"]
            ),
            "tapToReadOptimizationSupported": t.boolean().optional(),
            "lensSupported": t.boolean().optional(),
            "shLockScreenSupported": t.boolean().optional(),
            "assistantExploreSupported": t.boolean().optional(),
            "inDialogAccountLinkingSupported": t.boolean().optional(),
            "immersiveCanvasSupport": t.proxy(
                renames["AssistantApiImmersiveCanvasSupportOut"]
            ),
            "acpSupport": t.proxy(
                renames["AssistantApiAssistantContinuedPresenceSupportOut"]
            ).optional(),
            "mediaControlSupport": t.proxy(
                renames["AssistantApiMediaControlSupportOut"]
            ).optional(),
            "sunriseFeaturesSupport": t.proxy(
                renames["AssistantApiSunriseFeaturesSupportOut"]
            ).optional(),
            "funtimeSupported": t.boolean().optional(),
            "transactionFeaturesSupport": t.proxy(
                renames["AssistantApiTransactionFeaturesSupportOut"]
            ).optional(),
            "liveCardsSupported": t.boolean().optional(),
            "justInTimeSupported": t.boolean().optional(),
            "isPairedPhoneContactUploadNeededForComms": t.boolean().optional(),
            "masqueradeModeSupported": t.boolean().optional(),
            "mapsDialogsSupported": t.boolean().optional(),
            "transactionsVersion": t.string().optional(),
            "bypassMsgNotificationDismissal": t.boolean().optional(),
            "smartspaceCrossDeviceTimerSupported": t.boolean().optional(),
            "gdiSupported": t.boolean().optional(),
            "assistantForKidsSupported": t.boolean().optional(),
            "opaOnSearchSupported": t.boolean().optional(),
            "noInputResponseSupported": t.boolean().optional(),
            "isPairedPhoneNeededForComms": t.boolean().optional(),
            "zoomSupported": t.boolean().optional(),
            "usesSeparateFullViewer": t.boolean().optional(),
            "clientOpResultBatchingSupported": t.boolean().optional(),
            "meetSupported": t.boolean().optional(),
            "warmWelcomeTutorialSupported": t.boolean().optional(),
            "duoClientApiFeatures": t.string().optional(),
            "crossDeviceBroadcastVersion": t.string().optional(),
            "privacyAwareLockscreenSupported": t.boolean().optional(),
            "suggestionsSupport": t.proxy(
                renames["AssistantApiSuggestionsSupportOut"]
            ).optional(),
            "crossDeviceBroadcastSupported": t.boolean().optional(),
            "thirdPartyGuiSupported": t.boolean().optional(),
            "serverGeneratedFeedbackChipsEnabled": t.boolean().optional(),
            "alarmTimerManagerApiSupported": t.boolean().optional(),
            "bypassDiDcCheckForComms": t.boolean().optional(),
            "soliGestureDetectionSupported": t.boolean().optional(),
            "fitnessFeatureSupport": t.proxy(
                renames["AssistantApiFitnessFeatureSupportOut"]
            ).optional(),
            "mediaSessionDetection": t.string().optional(),
            "client1mProvidersSupported": t.boolean().optional(),
            "aaeNotificationSourceSupported": t.boolean().optional(),
            "viewReminderHubPageNotSupported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedFeaturesOut"])
    types[
        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateIn"
    ] = t.struct(
        {
            "categoryId": t.integer().optional(),
            "disabledReason": t.string(),
            "disabled": t.boolean().optional(),
        }
    ).named(
        renames["AssistantApiSystemNotificationRestrictionsNotificationCategoryStateIn"]
    )
    types[
        "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateOut"
    ] = t.struct(
        {
            "categoryId": t.integer().optional(),
            "disabledReason": t.string(),
            "disabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiSystemNotificationRestrictionsNotificationCategoryStateOut"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultIn"
    ] = t.struct({"value": t.string(), "name": t.string()}).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultOut"
    ] = t.struct(
        {
            "value": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResultOut"
        ]
    )
    types["GoogleCloudContentwarehouseV1UpdateDocumentResponseIn"] = t.struct(
        {
            "ruleEngineOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEngineOutputIn"]
            ).optional(),
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentIn"]
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentResponseIn"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentResponseOut"] = t.struct(
        {
            "ruleEngineOutput": t.proxy(
                renames["GoogleCloudContentwarehouseV1RuleEngineOutputOut"]
            ).optional(),
            "document": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentOut"]
            ).optional(),
            "metadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentResponseOut"])
    types["AssistantDevicesPlatformProtoCloudCapabilityIn"] = t.struct(
        {
            "cloudEndpoints": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoCloudEndpointIn"])
            ).optional()
        }
    ).named(renames["AssistantDevicesPlatformProtoCloudCapabilityIn"])
    types["AssistantDevicesPlatformProtoCloudCapabilityOut"] = t.struct(
        {
            "cloudEndpoints": t.array(
                t.proxy(renames["AssistantDevicesPlatformProtoCloudEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoCloudCapabilityOut"])
    types["KnowledgeAnswersIntentQueryLocalResultSignalsIn"] = t.struct(
        {
            "gcidIntent": t.array(t.string()).optional(),
            "salientTermSet": t.proxy(
                renames["QualitySalientTermsSalientTermSetIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryLocalResultSignalsIn"])
    types["KnowledgeAnswersIntentQueryLocalResultSignalsOut"] = t.struct(
        {
            "gcidIntent": t.array(t.string()).optional(),
            "salientTermSet": t.proxy(
                renames["QualitySalientTermsSalientTermSetOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryLocalResultSignalsOut"])
    types["IndexingMobileInterstitialsProtoInterstitialBasicInfoIn"] = t.struct(
        {
            "contentType": t.string(),
            "detectionMode": t.string(),
            "absoluteBox": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ).optional(),
            "layoutType": t.string(),
        }
    ).named(renames["IndexingMobileInterstitialsProtoInterstitialBasicInfoIn"])
    types["IndexingMobileInterstitialsProtoInterstitialBasicInfoOut"] = t.struct(
        {
            "contentType": t.string(),
            "detectionMode": t.string(),
            "absoluteBox": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ).optional(),
            "layoutType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMobileInterstitialsProtoInterstitialBasicInfoOut"])
    types["QualitySalientCountriesSalientCountryIn"] = t.struct(
        {"salience": t.number().optional(), "country": t.string().optional()}
    ).named(renames["QualitySalientCountriesSalientCountryIn"])
    types["QualitySalientCountriesSalientCountryOut"] = t.struct(
        {
            "salience": t.number().optional(),
            "country": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySalientCountriesSalientCountryOut"])
    types["ImageUnderstandingIndexingLabelIn"] = t.struct(
        {
            "metaData": t.array(
                t.proxy(renames["ImageUnderstandingIndexingMetaDataIn"])
            ).optional(),
            "canonicalText": t.string().optional(),
            "entityId": t.string().optional(),
            "score": t.number().optional(),
        }
    ).named(renames["ImageUnderstandingIndexingLabelIn"])
    types["ImageUnderstandingIndexingLabelOut"] = t.struct(
        {
            "metaData": t.array(
                t.proxy(renames["ImageUnderstandingIndexingMetaDataOut"])
            ).optional(),
            "canonicalText": t.string().optional(),
            "entityId": t.string().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingLabelOut"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoIn"] = t.struct(
        {"emergencyLevel": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoOut"] = t.struct(
        {
            "emergencyLevel": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfoOut"])
    types["GeostoreSocialReferenceProtoIn"] = t.struct(
        {
            "gaiaIdForDisplay": t.string().optional(),
            "baseGaiaId": t.string().optional(),
            "claimedGaiaId": t.string().optional(),
        }
    ).named(renames["GeostoreSocialReferenceProtoIn"])
    types["GeostoreSocialReferenceProtoOut"] = t.struct(
        {
            "gaiaIdForDisplay": t.string().optional(),
            "baseGaiaId": t.string().optional(),
            "claimedGaiaId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSocialReferenceProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiImIn"] = t.struct(
        {
            "formattedProtocol": t.string().optional(),
            "protocol": t.string().optional(),
            "type": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "formattedType": t.string().optional(),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiImIn"])
    types["AppsPeopleOzExternalMergedpeopleapiImOut"] = t.struct(
        {
            "formattedProtocol": t.string().optional(),
            "protocol": t.string().optional(),
            "type": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "formattedType": t.string().optional(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiImOut"])
    types["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataIn"] = t.struct(
        {
            "reports": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn"
                ]
            ),
            "failures": t.array(t.string()),
            "dottedLineReports": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberIn"
                ]
            ),
            "adminTo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ),
            "managementChain": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ),
            "admins": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ),
            "dottedLineManagers": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonIn"])
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataOut"] = t.struct(
        {
            "reports": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut"
                ]
            ),
            "failures": t.array(t.string()),
            "dottedLineReports": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumberOut"
                ]
            ),
            "adminTo": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ),
            "managementChain": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ),
            "admins": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ),
            "dottedLineManagers": t.array(
                t.proxy(renames["AppsPeopleOzExternalMergedpeopleapiPersonOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiTeamsExtendedDataOut"])
    types["SitemapDEPRECATED_TargetIn"] = t.struct(
        {
            "DEPRECATEDTitle": t.string(),
            "DEPRECATEDAnchor": t.string(),
            "url": t.string(),
            "displaytitle": t.string(),
            "DEPRECATEDRunningAnchor": t.boolean(),
            "score": t.integer().optional(),
        }
    ).named(renames["SitemapDEPRECATED_TargetIn"])
    types["SitemapDEPRECATED_TargetOut"] = t.struct(
        {
            "DEPRECATEDTitle": t.string(),
            "DEPRECATEDAnchor": t.string(),
            "url": t.string(),
            "displaytitle": t.string(),
            "DEPRECATEDRunningAnchor": t.boolean(),
            "score": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SitemapDEPRECATED_TargetOut"])
    types["ImageUnderstandingIndexingFeatureIn"] = t.struct(
        {
            "int32Value": t.array(t.integer()),
            "imageTemplate": t.proxy(
                renames["PhotosVisionObjectrecImageTemplateIn"]
            ).optional(),
            "bytesValue": t.string().optional(),
            "version": t.string(),
            "floatValue": t.array(t.number()),
        }
    ).named(renames["ImageUnderstandingIndexingFeatureIn"])
    types["ImageUnderstandingIndexingFeatureOut"] = t.struct(
        {
            "int32Value": t.array(t.integer()),
            "imageTemplate": t.proxy(
                renames["PhotosVisionObjectrecImageTemplateOut"]
            ).optional(),
            "bytesValue": t.string().optional(),
            "version": t.string(),
            "floatValue": t.array(t.number()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingFeatureOut"])
    types["ImagePerDocDataIn"] = t.struct(
        {
            "width": t.integer(),
            "DEPRECATEDEntropyColor": t.integer().optional(),
            "filename": t.string().optional(),
            "height": t.integer(),
            "flags": t.integer().optional(),
        }
    ).named(renames["ImagePerDocDataIn"])
    types["ImagePerDocDataOut"] = t.struct(
        {
            "width": t.integer(),
            "DEPRECATEDEntropyColor": t.integer().optional(),
            "filename": t.string().optional(),
            "height": t.integer(),
            "flags": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImagePerDocDataOut"])
    types["PhotosVisionObjectrecLocalDescriptorIn"] = t.struct(
        {
            "dataFactor": t.number().optional(),
            "scale": t.number().optional(),
            "featureVector": t.proxy(
                renames["PhotosVisionObjectrecFeatureVectorIn"]
            ).optional(),
            "strength": t.number().optional(),
            "affineMatrix": t.proxy(
                renames["PhotosVisionObjectrecMatrix2DIn"]
            ).optional(),
            "x": t.number().optional(),
            "y": t.number(),
            "opaqueData": t.string().optional(),
            "data": t.string(),
            "orientation": t.number().optional(),
        }
    ).named(renames["PhotosVisionObjectrecLocalDescriptorIn"])
    types["PhotosVisionObjectrecLocalDescriptorOut"] = t.struct(
        {
            "dataFactor": t.number().optional(),
            "scale": t.number().optional(),
            "featureVector": t.proxy(
                renames["PhotosVisionObjectrecFeatureVectorOut"]
            ).optional(),
            "strength": t.number().optional(),
            "affineMatrix": t.proxy(
                renames["PhotosVisionObjectrecMatrix2DOut"]
            ).optional(),
            "x": t.number().optional(),
            "y": t.number(),
            "opaqueData": t.string().optional(),
            "data": t.string(),
            "orientation": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecLocalDescriptorOut"])
    types["RepositoryWebrefEntityAnnotationsIn"] = t.struct(
        {
            "debugInfo": t.proxy(renames["RepositoryWebrefAnnotationDebugInfoIn"]),
            "detailedEntityScores": t.proxy(
                renames["RepositoryWebrefDetailedEntityScoresIn"]
            ).optional(),
            "topicalityRank": t.integer().optional(),
            "confidenceScore": t.number().optional(),
            "topicalityScore": t.number().optional(),
            "segmentMentions": t.array(
                t.proxy(renames["RepositoryWebrefSegmentMentionsIn"])
            ).optional(),
            "explainedRangeInfo": t.proxy(
                renames["RepositoryWebrefExplainedRangeInfoIn"]
            ).optional(),
            "isImplicit": t.boolean().optional(),
            "isResolution": t.boolean().optional(),
        }
    ).named(renames["RepositoryWebrefEntityAnnotationsIn"])
    types["RepositoryWebrefEntityAnnotationsOut"] = t.struct(
        {
            "debugInfo": t.proxy(renames["RepositoryWebrefAnnotationDebugInfoOut"]),
            "detailedEntityScores": t.proxy(
                renames["RepositoryWebrefDetailedEntityScoresOut"]
            ).optional(),
            "topicalityRank": t.integer().optional(),
            "confidenceScore": t.number().optional(),
            "topicalityScore": t.number().optional(),
            "segmentMentions": t.array(
                t.proxy(renames["RepositoryWebrefSegmentMentionsOut"])
            ).optional(),
            "explainedRangeInfo": t.proxy(
                renames["RepositoryWebrefExplainedRangeInfoOut"]
            ).optional(),
            "isImplicit": t.boolean().optional(),
            "isResolution": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityAnnotationsOut"])
    types["VideoFileSphericalMetadataIn"] = t.struct(
        {
            "stitchingSoftware": t.string().optional(),
            "fullPanoWidthPixels": t.integer().optional(),
            "clampedOptimalFovBounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsIn"]
            ).optional(),
            "equirect": t.proxy(
                renames["VideoFileSphericalMetadataEquirectProjectionIn"]
            ),
            "projectionType": t.string().optional(),
            "mesh": t.proxy(renames["VideoFileSphericalMetadataMeshProjectionIn"]),
            "deprecatedInitialView": t.proxy(
                renames["VideoFileSphericalMetadataViewDirectionIn"]
            ).optional(),
            "fullPanoHeightPixels": t.integer(),
            "pose": t.proxy(renames["VideoFileSphericalMetadataPoseIn"]),
            "cubemap": t.proxy(
                renames["VideoFileSphericalMetadataCubemapProjectionIn"]
            ),
            "spherical": t.boolean().optional(),
            "deprecatedCroppedArea": t.proxy(
                renames["VideoFileSphericalMetadataCroppedAreaIn"]
            ),
            "metadataSource": t.string().optional(),
            "stereoMode": t.string().optional(),
            "timestamp": t.string().optional(),
            "stitched": t.boolean().optional(),
            "optimalFovBounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsIn"]
            ).optional(),
            "sourceCount": t.integer().optional(),
        }
    ).named(renames["VideoFileSphericalMetadataIn"])
    types["VideoFileSphericalMetadataOut"] = t.struct(
        {
            "stitchingSoftware": t.string().optional(),
            "fullPanoWidthPixels": t.integer().optional(),
            "clampedOptimalFovBounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsOut"]
            ).optional(),
            "equirect": t.proxy(
                renames["VideoFileSphericalMetadataEquirectProjectionOut"]
            ),
            "projectionType": t.string().optional(),
            "mesh": t.proxy(renames["VideoFileSphericalMetadataMeshProjectionOut"]),
            "deprecatedInitialView": t.proxy(
                renames["VideoFileSphericalMetadataViewDirectionOut"]
            ).optional(),
            "fullPanoHeightPixels": t.integer(),
            "pose": t.proxy(renames["VideoFileSphericalMetadataPoseOut"]),
            "cubemap": t.proxy(
                renames["VideoFileSphericalMetadataCubemapProjectionOut"]
            ),
            "spherical": t.boolean().optional(),
            "deprecatedCroppedArea": t.proxy(
                renames["VideoFileSphericalMetadataCroppedAreaOut"]
            ),
            "metadataSource": t.string().optional(),
            "stereoMode": t.string().optional(),
            "timestamp": t.string().optional(),
            "stitched": t.boolean().optional(),
            "optimalFovBounds": t.proxy(
                renames["VideoFileSphericalMetadataFOVBoundsOut"]
            ).optional(),
            "sourceCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileSphericalMetadataOut"])
    types["VideoAssetsVenomTransitionIn"] = t.struct(
        {
            "objective": t.string().optional(),
            "outcome": t.string().optional(),
            "reason": t.string().optional(),
        }
    ).named(renames["VideoAssetsVenomTransitionIn"])
    types["VideoAssetsVenomTransitionOut"] = t.struct(
        {
            "objective": t.string().optional(),
            "outcome": t.string().optional(),
            "reason": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoAssetsVenomTransitionOut"])
    types["GeostoreOntologyRawGConceptInstanceContainerProtoIn"] = t.struct(
        {
            "instance": t.array(
                t.proxy(renames["GeostoreOntologyRawGConceptInstanceProtoIn"])
            )
        }
    ).named(renames["GeostoreOntologyRawGConceptInstanceContainerProtoIn"])
    types["GeostoreOntologyRawGConceptInstanceContainerProtoOut"] = t.struct(
        {
            "instance": t.array(
                t.proxy(renames["GeostoreOntologyRawGConceptInstanceProtoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreOntologyRawGConceptInstanceContainerProtoOut"])
    types["GeostoreInternalFieldMetadataProtoIn"] = t.struct(
        {
            "sourceSummary": t.proxy(
                renames["GeostoreInternalSourceSummaryProtoIn"]
            ).optional(),
            "isAuto": t.boolean().optional(),
        }
    ).named(renames["GeostoreInternalFieldMetadataProtoIn"])
    types["GeostoreInternalFieldMetadataProtoOut"] = t.struct(
        {
            "sourceSummary": t.proxy(
                renames["GeostoreInternalSourceSummaryProtoOut"]
            ).optional(),
            "isAuto": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreInternalFieldMetadataProtoOut"])
    types["VideoContentSearchVideoAnchorSetsIn"] = t.struct(
        {
            "videoScoreInfo": t.proxy(renames["VideoContentSearchVideoScoreInfoIn"]),
            "videoAnchors": t.array(
                t.proxy(renames["VideoContentSearchVideoAnchorsIn"])
            ),
            "videoActions": t.proxy(renames["VideoContentSearchVideoActionsIn"]),
            "videoInfo": t.proxy(renames["VideoContentSearchVideoInfoIn"]),
        }
    ).named(renames["VideoContentSearchVideoAnchorSetsIn"])
    types["VideoContentSearchVideoAnchorSetsOut"] = t.struct(
        {
            "videoScoreInfo": t.proxy(renames["VideoContentSearchVideoScoreInfoOut"]),
            "videoAnchors": t.array(
                t.proxy(renames["VideoContentSearchVideoAnchorsOut"])
            ),
            "videoActions": t.proxy(renames["VideoContentSearchVideoActionsOut"]),
            "videoInfo": t.proxy(renames["VideoContentSearchVideoInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorSetsOut"])
    types["QualityTravelGoodSitesDataI18nIn"] = t.struct(
        {"type": t.string(), "locale": t.string()}
    ).named(renames["QualityTravelGoodSitesDataI18nIn"])
    types["QualityTravelGoodSitesDataI18nOut"] = t.struct(
        {
            "type": t.string(),
            "locale": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTravelGoodSitesDataI18nOut"])
    types["EmbedsEmbedClientItemIn"] = t.struct(
        {
            "deepLinkData": t.proxy(renames["EmbedsDeepLinkDataIn"]).optional(),
            "id": t.string().optional(),
            "transientData": t.proxy(renames["EmbedsTransientDataIn"]).optional(),
            "type": t.array(t.string()).optional(),
            "canonicalId": t.string().optional(),
            "signature": t.string().optional(),
            "renderId": t.string().optional(),
            "provenance": t.proxy(renames["EmbedsProvenanceIn"]).optional(),
        }
    ).named(renames["EmbedsEmbedClientItemIn"])
    types["EmbedsEmbedClientItemOut"] = t.struct(
        {
            "deepLinkData": t.proxy(renames["EmbedsDeepLinkDataOut"]).optional(),
            "id": t.string().optional(),
            "transientData": t.proxy(renames["EmbedsTransientDataOut"]).optional(),
            "type": t.array(t.string()).optional(),
            "canonicalId": t.string().optional(),
            "signature": t.string().optional(),
            "renderId": t.string().optional(),
            "provenance": t.proxy(renames["EmbedsProvenanceOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["EmbedsEmbedClientItemOut"])
    types[
        "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataIn"
    ] = t.struct({"enterpriseId": t.string().optional()}).named(
        renames["AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataIn"]
    )
    types[
        "AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataOut"
    ] = t.struct(
        {
            "enterpriseId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoSmartDeviceManagementDataOut"]
    )
    types["DrishtiFeatureSetDataSequenceIn"] = t.struct(
        {
            "label": t.array(t.proxy(renames["DrishtiLabelSetElementIn"])).optional(),
            "element": t.array(t.proxy(renames["DrishtiFeatureSetDataIn"])).optional(),
            "timestamp": t.array(t.string()).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
        }
    ).named(renames["DrishtiFeatureSetDataSequenceIn"])
    types["DrishtiFeatureSetDataSequenceOut"] = t.struct(
        {
            "label": t.array(t.proxy(renames["DrishtiLabelSetElementOut"])).optional(),
            "element": t.array(t.proxy(renames["DrishtiFeatureSetDataOut"])).optional(),
            "timestamp": t.array(t.string()).optional(),
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiFeatureSetDataSequenceOut"])
    types["RepositoryWebrefCategoryAnnotationBrowsyTopicIn"] = t.struct(
        {"confidence": t.number()}
    ).named(renames["RepositoryWebrefCategoryAnnotationBrowsyTopicIn"])
    types["RepositoryWebrefCategoryAnnotationBrowsyTopicOut"] = t.struct(
        {
            "confidence": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCategoryAnnotationBrowsyTopicOut"])
    types["IndexingSignalAggregatorAdaptiveIntervalDataIn"] = t.struct(
        {
            "clicksGoodInterval": t.number(),
            "ctrwiInterval": t.number(),
            "dwellsInterval": t.number(),
            "luDwellsInterval": t.number(),
            "luDwellsPriorWeight": t.number(),
            "clicksTotalInterval": t.number(),
            "ctrwiPriorWeight": t.number(),
            "dwellsPriorWeight": t.number(),
            "clicksTotalPriorWeight": t.number(),
            "clicksGoodPriorWeight": t.number(),
        }
    ).named(renames["IndexingSignalAggregatorAdaptiveIntervalDataIn"])
    types["IndexingSignalAggregatorAdaptiveIntervalDataOut"] = t.struct(
        {
            "clicksGoodInterval": t.number(),
            "ctrwiInterval": t.number(),
            "dwellsInterval": t.number(),
            "luDwellsInterval": t.number(),
            "luDwellsPriorWeight": t.number(),
            "clicksTotalInterval": t.number(),
            "ctrwiPriorWeight": t.number(),
            "dwellsPriorWeight": t.number(),
            "clicksTotalPriorWeight": t.number(),
            "clicksGoodPriorWeight": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorAdaptiveIntervalDataOut"])
    types["AssistantLogsMediaCapabilitiesIn"] = t.struct(
        {"hasScreen": t.boolean(), "canReceiveRemoteAction": t.boolean()}
    ).named(renames["AssistantLogsMediaCapabilitiesIn"])
    types["AssistantLogsMediaCapabilitiesOut"] = t.struct(
        {
            "hasScreen": t.boolean(),
            "canReceiveRemoteAction": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsMediaCapabilitiesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataIn"] = t.struct(
        {"primary": t.boolean().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataOut"] = t.struct(
        {
            "primary": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadataOut"])
    types["AssistantDevicesPlatformProtoInternalCapabilityIn"] = t.struct(
        {
            "forceTransactionsAuthentication": t.boolean().optional(),
            "hasCustomSearchResultsRendering": t.boolean().optional(),
            "cloudDeviceActionEndpoint": t.proxy(
                renames["AssistantDevicesPlatformProtoCloudEndpointIn"]
            ).optional(),
            "stadiaAssistantConfig": t.proxy(
                renames[
                    "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigIn"
                ]
            ),
            "overrideProjectIdForDeviceLookup": t.string().optional(),
            "allowedAssistantSdkAuthProjectIds": t.array(t.string()).optional(),
            "forceThirdPartyDeviceIdForDeviceLookup": t.boolean().optional(),
            "appCapabilitiesFromDeviceInstallApps": t.boolean().optional(),
            "forceSignIn": t.boolean().optional(),
            "telephoneAttribution": t.boolean().optional(),
            "deviceActionsEligibleForHighConfidence": t.boolean().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoInternalCapabilityIn"])
    types["AssistantDevicesPlatformProtoInternalCapabilityOut"] = t.struct(
        {
            "forceTransactionsAuthentication": t.boolean().optional(),
            "hasCustomSearchResultsRendering": t.boolean().optional(),
            "cloudDeviceActionEndpoint": t.proxy(
                renames["AssistantDevicesPlatformProtoCloudEndpointOut"]
            ).optional(),
            "stadiaAssistantConfig": t.proxy(
                renames[
                    "AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfigOut"
                ]
            ),
            "overrideProjectIdForDeviceLookup": t.string().optional(),
            "allowedAssistantSdkAuthProjectIds": t.array(t.string()).optional(),
            "forceThirdPartyDeviceIdForDeviceLookup": t.boolean().optional(),
            "appCapabilitiesFromDeviceInstallApps": t.boolean().optional(),
            "forceSignIn": t.boolean().optional(),
            "telephoneAttribution": t.boolean().optional(),
            "deviceActionsEligibleForHighConfidence": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoInternalCapabilityOut"])
    types["NlpSaftEntityIn"] = t.struct(
        {
            "salience": t.number().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "representativeMention": t.integer().optional(),
            "mention": t.array(t.proxy(renames["NlpSaftMentionIn"])).optional(),
            "gender": t.string().optional(),
            "name": t.string().optional(),
            "referent": t.proxy(renames["NlpSaftReferentIn"]).optional(),
            "antecedent": t.integer().optional(),
            "profile": t.proxy(renames["NlpSaftEntityProfileIn"]).optional(),
            "entityType": t.string().optional(),
            "entityTypeProbability": t.array(t.number()).optional(),
            "type": t.array(t.proxy(renames["NlpSaftEntityTypeIn"])).optional(),
        }
    ).named(renames["NlpSaftEntityIn"])
    types["NlpSaftEntityOut"] = t.struct(
        {
            "salience": t.number().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "representativeMention": t.integer().optional(),
            "mention": t.array(t.proxy(renames["NlpSaftMentionOut"])).optional(),
            "gender": t.string().optional(),
            "name": t.string().optional(),
            "referent": t.proxy(renames["NlpSaftReferentOut"]).optional(),
            "antecedent": t.integer().optional(),
            "profile": t.proxy(renames["NlpSaftEntityProfileOut"]).optional(),
            "entityType": t.string().optional(),
            "entityTypeProbability": t.array(t.number()).optional(),
            "type": t.array(t.proxy(renames["NlpSaftEntityTypeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityOut"])
    types["YoutubeDiscoveryLegosLegosAnnotationIn"] = t.struct(
        {
            "present": t.proxy(
                renames["YoutubeDiscoveryLegosLegosPresentRelationshipIn"]
            ).optional(),
            "semantic": t.proxy(
                renames["YoutubeDiscoveryLegosLegosSemanticRelationshipIn"]
            ).optional(),
            "taxonomic": t.proxy(
                renames["YoutubeDiscoveryLegosLegosTaxonomicRelationshipIn"]
            ).optional(),
            "format": t.proxy(
                renames["YoutubeDiscoveryLegosLegosFormatRelationshipIn"]
            ).optional(),
            "entity": t.proxy(renames["YoutubeDiscoveryLegosLegosEntityIn"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosAnnotationIn"])
    types["YoutubeDiscoveryLegosLegosAnnotationOut"] = t.struct(
        {
            "present": t.proxy(
                renames["YoutubeDiscoveryLegosLegosPresentRelationshipOut"]
            ).optional(),
            "semantic": t.proxy(
                renames["YoutubeDiscoveryLegosLegosSemanticRelationshipOut"]
            ).optional(),
            "taxonomic": t.proxy(
                renames["YoutubeDiscoveryLegosLegosTaxonomicRelationshipOut"]
            ).optional(),
            "format": t.proxy(
                renames["YoutubeDiscoveryLegosLegosFormatRelationshipOut"]
            ).optional(),
            "entity": t.proxy(
                renames["YoutubeDiscoveryLegosLegosEntityOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosAnnotationOut"])
    types["GoogleCloudContentwarehouseV1UpdateOptionsIn"] = t.struct(
        {
            "updateType": t.string().optional(),
            "updateMask": t.string().optional(),
            "mergeFieldsOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1MergeFieldsOptionsIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateOptionsIn"])
    types["GoogleCloudContentwarehouseV1UpdateOptionsOut"] = t.struct(
        {
            "updateType": t.string().optional(),
            "updateMask": t.string().optional(),
            "mergeFieldsOptions": t.proxy(
                renames["GoogleCloudContentwarehouseV1MergeFieldsOptionsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateOptionsOut"])
    types["VideoContentSearchAnchorThumbnailInfoIn"] = t.struct(
        {
            "imageData": t.proxy(renames["ImageDataIn"]).optional(),
            "isUnsafe": t.boolean().optional(),
            "colorEntropy": t.number().optional(),
            "thumbnailBytes": t.string().optional(),
            "starburstV4Embedding": t.proxy(
                renames["DrishtiDenseFeatureDataIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchAnchorThumbnailInfoIn"])
    types["VideoContentSearchAnchorThumbnailInfoOut"] = t.struct(
        {
            "imageData": t.proxy(renames["ImageDataOut"]).optional(),
            "isUnsafe": t.boolean().optional(),
            "colorEntropy": t.number().optional(),
            "thumbnailBytes": t.string().optional(),
            "starburstV4Embedding": t.proxy(
                renames["DrishtiDenseFeatureDataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchAnchorThumbnailInfoOut"])
    types["GoogleCloudContentwarehouseV1UserInfoIn"] = t.struct(
        {"id": t.string().optional(), "groupIds": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1UserInfoIn"])
    types["GoogleCloudContentwarehouseV1UserInfoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "groupIds": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UserInfoOut"])
    types["NlpMeaningMeaningRemodelingIn"] = t.struct(
        {"id": t.string().optional(), "deletion": t.boolean().optional()}
    ).named(renames["NlpMeaningMeaningRemodelingIn"])
    types["NlpMeaningMeaningRemodelingOut"] = t.struct(
        {
            "id": t.string().optional(),
            "deletion": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpMeaningMeaningRemodelingOut"])
    types["AssistantApiAppIntegrationsSettingsIn"] = t.struct(
        {"handleRequestsWithPredictedApps": t.string().optional()}
    ).named(renames["AssistantApiAppIntegrationsSettingsIn"])
    types["AssistantApiAppIntegrationsSettingsOut"] = t.struct(
        {
            "handleRequestsWithPredictedApps": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAppIntegrationsSettingsOut"])
    types["AbuseiamAbuseTypeIn"] = t.struct(
        {"id": t.string(), "subtype": t.string().optional()}
    ).named(renames["AbuseiamAbuseTypeIn"])
    types["AbuseiamAbuseTypeOut"] = t.struct(
        {
            "id": t.string(),
            "subtype": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamAbuseTypeOut"])
    types["AssistantApiLoggingOnlyDataIn"] = t.struct(
        {
            "appVersion": t.string().optional(),
            "boardName": t.string().optional(),
            "initialAppVersion": t.string().optional(),
            "embedderBuildInfo": t.string().optional(),
            "platformBuild": t.string().optional(),
            "androidId": t.string().optional(),
            "assistantSettingsSource": t.string().optional(),
            "boardRevision": t.string().optional(),
            "mdnsDisplayName": t.string().optional(),
            "deviceModel": t.string().optional(),
            "virtualReleaseChannel": t.string().optional(),
            "castAssistantSettingLinkingResult": t.proxy(
                renames["AssistantApiCastAssistantSettingLinkingResultIn"]
            ).optional(),
            "acpVersion": t.string().optional(),
            "accountIndex": t.integer().optional(),
        }
    ).named(renames["AssistantApiLoggingOnlyDataIn"])
    types["AssistantApiLoggingOnlyDataOut"] = t.struct(
        {
            "appVersion": t.string().optional(),
            "boardName": t.string().optional(),
            "initialAppVersion": t.string().optional(),
            "embedderBuildInfo": t.string().optional(),
            "platformBuild": t.string().optional(),
            "androidId": t.string().optional(),
            "assistantSettingsSource": t.string().optional(),
            "boardRevision": t.string().optional(),
            "mdnsDisplayName": t.string().optional(),
            "deviceModel": t.string().optional(),
            "virtualReleaseChannel": t.string().optional(),
            "castAssistantSettingLinkingResult": t.proxy(
                renames["AssistantApiCastAssistantSettingLinkingResultOut"]
            ).optional(),
            "acpVersion": t.string().optional(),
            "accountIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLoggingOnlyDataOut"])
    types["QualityProductProductSiteDataIn"] = t.struct(
        {
            "locale": t.array(
                t.proxy(renames["QualityProductProductSiteDataLocaleDataIn"])
            ).optional()
        }
    ).named(renames["QualityProductProductSiteDataIn"])
    types["QualityProductProductSiteDataOut"] = t.struct(
        {
            "locale": t.array(
                t.proxy(renames["QualityProductProductSiteDataLocaleDataOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityProductProductSiteDataOut"])
    types["GoodocRotatedBoundingBoxIn"] = t.struct(
        {
            "Width": t.integer(),
            "Top": t.integer(),
            "Left": t.integer().optional(),
            "Height": t.integer(),
            "Angle": t.number().optional(),
        }
    ).named(renames["GoodocRotatedBoundingBoxIn"])
    types["GoodocRotatedBoundingBoxOut"] = t.struct(
        {
            "Width": t.integer(),
            "Top": t.integer(),
            "Left": t.integer().optional(),
            "Height": t.integer(),
            "Angle": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocRotatedBoundingBoxOut"])
    types["NlpSemanticParsingModelsMediaRadioInfoIn"] = t.struct(
        {
            "location": t.proxy(
                renames["NlpSemanticParsingModelsMediaLatLngIn"]
            ).optional(),
            "frequency": t.proxy(
                renames["NlpSemanticParsingModelsMediaFrequencyIn"]
            ).optional(),
            "popularity": t.number().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioInfoIn"])
    types["NlpSemanticParsingModelsMediaRadioInfoOut"] = t.struct(
        {
            "location": t.proxy(
                renames["NlpSemanticParsingModelsMediaLatLngOut"]
            ).optional(),
            "frequency": t.proxy(
                renames["NlpSemanticParsingModelsMediaFrequencyOut"]
            ).optional(),
            "popularity": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioInfoOut"])
    types["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataIn"] = t.struct(
        {
            "app": t.array(
                t.proxy(
                    renames["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataIn"]
                )
            )
        }
    ).named(renames["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataIn"])
    types["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataOut"] = t.struct(
        {
            "app": t.array(
                t.proxy(
                    renames["QualityRichsnippetsAppsProtosLaunchableAppPerDocDataOut"]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataOut"])
    types["QualityProductProductSiteDataLocaleDataIn"] = t.struct(
        {
            "gobiSite": t.boolean().optional(),
            "locale": t.string().optional(),
            "boostFactor": t.number().optional(),
        }
    ).named(renames["QualityProductProductSiteDataLocaleDataIn"])
    types["QualityProductProductSiteDataLocaleDataOut"] = t.struct(
        {
            "gobiSite": t.boolean().optional(),
            "locale": t.string().optional(),
            "boostFactor": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityProductProductSiteDataLocaleDataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMembershipIn"] = t.struct(
        {
            "circleId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ).optional(),
            "contactGroupId": t.string().optional(),
            "systemContactGroupId": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMembershipIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMembershipOut"] = t.struct(
        {
            "circleId": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ).optional(),
            "contactGroupId": t.string().optional(),
            "systemContactGroupId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMembershipOut"])
    types["GeostoreSkiTrailProtoIn"] = t.struct(
        {"type": t.string(), "difficulty": t.string()}
    ).named(renames["GeostoreSkiTrailProtoIn"])
    types["GeostoreSkiTrailProtoOut"] = t.struct(
        {
            "type": t.string(),
            "difficulty": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSkiTrailProtoOut"])
    types[
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn"
    ] = t.struct({"lang": t.string(), "score": t.number()}).named(
        renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageIn"]
    )
    types[
        "SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut"
    ] = t.struct(
        {
            "lang": t.string(),
            "score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguageOut"]
    )
    types["QualityActionsTimerIn"] = t.struct(
        {
            "lastUpdated": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "remainingTimerDuration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationIn"]
            ).optional(),
            "creationTime": t.proxy(renames["AssistantApiTimestampIn"]).optional(),
            "device": t.proxy(
                renames["AssistantApiSettingsDeviceSettingsIn"]
            ).optional(),
            "expireTimerTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "vibrate": t.boolean().optional(),
            "originalTimerDuration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationIn"]
            ).optional(),
            "expireTime": t.string().optional(),
            "status": t.string().optional(),
            "ringtone": t.proxy(renames["QualityActionsRingtoneIn"]).optional(),
            "id": t.string().optional(),
            "remainingDuration": t.string().optional(),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderIn"]).optional(),
            "ringtoneTaskMetadata": t.proxy(
                renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataIn"]
            ).optional(),
            "room": t.proxy(renames["QualityActionsRoomIn"]).optional(),
            "originalDuration": t.string().optional(),
            "label": t.string().optional(),
        }
    ).named(renames["QualityActionsTimerIn"])
    types["QualityActionsTimerOut"] = t.struct(
        {
            "lastUpdated": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "remainingTimerDuration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationOut"]
            ).optional(),
            "creationTime": t.proxy(renames["AssistantApiTimestampOut"]).optional(),
            "device": t.proxy(
                renames["AssistantApiSettingsDeviceSettingsOut"]
            ).optional(),
            "expireTimerTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "vibrate": t.boolean().optional(),
            "originalTimerDuration": t.proxy(
                renames["NlpSemanticParsingDatetimeDurationOut"]
            ).optional(),
            "expireTime": t.string().optional(),
            "status": t.string().optional(),
            "ringtone": t.proxy(renames["QualityActionsRingtoneOut"]).optional(),
            "id": t.string().optional(),
            "remainingDuration": t.string().optional(),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderOut"]).optional(),
            "ringtoneTaskMetadata": t.proxy(
                renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataOut"]
            ).optional(),
            "room": t.proxy(renames["QualityActionsRoomOut"]).optional(),
            "originalDuration": t.string().optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsTimerOut"])
    types["AssistantApiTimestampIn"] = t.struct(
        {"nanos": t.integer().optional(), "seconds": t.string().optional()}
    ).named(renames["AssistantApiTimestampIn"])
    types["AssistantApiTimestampOut"] = t.struct(
        {
            "nanos": t.integer().optional(),
            "seconds": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiTimestampOut"])
    types["SnippetsLeadingtextLeadingTextAnnotationPieceIn"] = t.struct(
        {
            "endText": t.string(),
            "begin": t.integer().optional(),
            "matchedPattern": t.string().optional(),
            "end": t.integer(),
            "beginText": t.string().optional(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextAnnotationPieceIn"])
    types["SnippetsLeadingtextLeadingTextAnnotationPieceOut"] = t.struct(
        {
            "endText": t.string(),
            "begin": t.integer().optional(),
            "matchedPattern": t.string().optional(),
            "end": t.integer(),
            "beginText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextAnnotationPieceOut"])
    types["QualityActionsRoomIn"] = t.struct(
        {"homegraphId": t.string(), "name": t.string()}
    ).named(renames["QualityActionsRoomIn"])
    types["QualityActionsRoomOut"] = t.struct(
        {
            "homegraphId": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsRoomOut"])
    types["GoogleCloudContentwarehouseV1DateTimeTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DateTimeTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1DateTimeTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DateTimeTypeOptionsOut"])
    types["KnowledgeAnswersIntentQueryPersonalEntityIn"] = t.struct(
        {
            "personalEntityChild": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryPersonalEntityIn"])
            ).optional(),
            "attributeId": t.string().optional(),
            "freebaseMid": t.string().optional(),
            "entityRelationship": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipIn"
                    ]
                )
            ),
        }
    ).named(renames["KnowledgeAnswersIntentQueryPersonalEntityIn"])
    types["KnowledgeAnswersIntentQueryPersonalEntityOut"] = t.struct(
        {
            "personalEntityChild": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryPersonalEntityOut"])
            ).optional(),
            "attributeId": t.string().optional(),
            "freebaseMid": t.string().optional(),
            "entityRelationship": t.array(
                t.proxy(
                    renames[
                        "KnowledgeAnswersIntentQueryPersonalEntityEntityRelationshipOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryPersonalEntityOut"])
    types["RepositoryWebrefMdvcMetadataPerVerticalIn"] = t.struct(
        {
            "generalizationIds": t.array(t.string()).optional(),
            "verticalName": t.string().optional(),
            "expandedOutputIds": t.array(t.string()).optional(),
            "isDimension": t.boolean().optional(),
            "subVerticalFp": t.array(t.string()).optional(),
            "isGeneralization": t.boolean().optional(),
            "dimensionIds": t.array(t.string()).optional(),
            "compatibleIds": t.array(t.string()).optional(),
            "isCore": t.boolean().optional(),
            "resolutionPriority": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefMdvcMetadataPerVerticalIn"])
    types["RepositoryWebrefMdvcMetadataPerVerticalOut"] = t.struct(
        {
            "generalizationIds": t.array(t.string()).optional(),
            "verticalName": t.string().optional(),
            "expandedOutputIds": t.array(t.string()).optional(),
            "isDimension": t.boolean().optional(),
            "subVerticalFp": t.array(t.string()).optional(),
            "isGeneralization": t.boolean().optional(),
            "dimensionIds": t.array(t.string()).optional(),
            "compatibleIds": t.array(t.string()).optional(),
            "isCore": t.boolean().optional(),
            "resolutionPriority": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMdvcMetadataPerVerticalOut"])
    types["IndexingEmbeddedContentLinkInfoIn"] = t.struct(
        {
            "url": t.string(),
            "httpResponseLength": t.integer().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoIn"])
            ).optional(),
            "fetchStatus": t.proxy(renames["TrawlerFetchStatusIn"]).optional(),
            "contentLength": t.integer().optional(),
            "fetchUrlResponseMetadata": t.proxy(
                renames["IndexingEmbeddedContentFetchUrlResponseMetadataIn"]
            ).optional(),
            "crawlDuration": t.integer().optional(),
            "contentType": t.integer(),
            "frd": t.proxy(renames["TrawlerFetchReplyDataIn"]).optional(),
            "isRobotedContentFromFastnet": t.boolean(),
            "crawlTimestamp": t.integer(),
            "uncompressedContentLength": t.integer().optional(),
            "crawlStatus": t.integer().optional(),
            "webkitFetchMetadata": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataIn"]
            ),
            "deprecatedRedirect": t.array(t.string()),
            "isCacheable": t.boolean(),
        }
    ).named(renames["IndexingEmbeddedContentLinkInfoIn"])
    types["IndexingEmbeddedContentLinkInfoOut"] = t.struct(
        {
            "url": t.string(),
            "httpResponseLength": t.integer().optional(),
            "fetchSourceInfo": t.array(
                t.proxy(renames["WirelessTranscoderFetchFetchSourceInfoOut"])
            ).optional(),
            "fetchStatus": t.proxy(renames["TrawlerFetchStatusOut"]).optional(),
            "contentLength": t.integer().optional(),
            "fetchUrlResponseMetadata": t.proxy(
                renames["IndexingEmbeddedContentFetchUrlResponseMetadataOut"]
            ).optional(),
            "crawlDuration": t.integer().optional(),
            "contentType": t.integer(),
            "frd": t.proxy(renames["TrawlerFetchReplyDataOut"]).optional(),
            "isRobotedContentFromFastnet": t.boolean(),
            "crawlTimestamp": t.integer(),
            "uncompressedContentLength": t.integer().optional(),
            "crawlStatus": t.integer().optional(),
            "webkitFetchMetadata": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWebKitFetchMetadataOut"]
            ),
            "deprecatedRedirect": t.array(t.string()),
            "isCacheable": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentLinkInfoOut"])
    types["GoogleCloudContentwarehouseV1ListLinkedTargetsRequestIn"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsRequestIn"])
    types["GoogleCloudContentwarehouseV1ListLinkedTargetsRequestOut"] = t.struct(
        {
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsRequestOut"])
    types["VideoVideoStreamInfoMetadataLutAttachmentsLut3DIn"] = t.struct(
        {
            "data": t.string().optional(),
            "size": t.integer().optional(),
            "fileName": t.string().optional(),
        }
    ).named(renames["VideoVideoStreamInfoMetadataLutAttachmentsLut3DIn"])
    types["VideoVideoStreamInfoMetadataLutAttachmentsLut3DOut"] = t.struct(
        {
            "data": t.string().optional(),
            "size": t.integer().optional(),
            "fileName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoMetadataLutAttachmentsLut3DOut"])
    types["AssistantApiSettingsOnDeviceAppSettingsIn"] = t.struct(
        {
            "carrierCallDeviceSettings": t.proxy(
                renames["AssistantApiSettingsCarrierCallDeviceSettingsIn"]
            ).optional(),
            "duoCallDeviceSettings": t.proxy(
                renames["AssistantApiSettingsDuoCallDeviceSettingsIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsOnDeviceAppSettingsIn"])
    types["AssistantApiSettingsOnDeviceAppSettingsOut"] = t.struct(
        {
            "carrierCallDeviceSettings": t.proxy(
                renames["AssistantApiSettingsCarrierCallDeviceSettingsOut"]
            ).optional(),
            "duoCallDeviceSettings": t.proxy(
                renames["AssistantApiSettingsDuoCallDeviceSettingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsOnDeviceAppSettingsOut"])
    types["AssistantGroundingRankerLaaFeaturesBindingSetIn"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesIn"]
            )
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesBindingSetIn"])
    types["AssistantGroundingRankerLaaFeaturesBindingSetOut"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesBindingSetOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderExtensionResultIn"] = t.struct(
        {
            "result": t.string(),
            "consoleLogEntry": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn"])
            ).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderExtensionResultIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderExtensionResultOut"] = t.struct(
        {
            "result": t.string(),
            "consoleLogEntry": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderExtensionResultOut"])
    types["NlpSemanticParsingModelsMediaRadioIn"] = t.struct(
        {
            "isFromFastPath": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "frequency": t.proxy(
                renames["NlpSemanticParsingModelsMediaFrequencyIn"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "rawText": t.string(),
            "favorite": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioIn"])
    types["NlpSemanticParsingModelsMediaRadioOut"] = t.struct(
        {
            "isFromFastPath": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "isAnnotatedFromText": t.boolean().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "frequency": t.proxy(
                renames["NlpSemanticParsingModelsMediaFrequencyOut"]
            ).optional(),
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "rawText": t.string(),
            "favorite": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaRadioOut"])
    types["SitemapIn"] = t.struct(
        {
            "searchInSite": t.boolean().optional(),
            "pageAnchorsDocInfo": t.proxy(
                renames["SdrPageAnchorsDocInfoIn"]
            ).optional(),
            "sourceOrgfp": t.string().optional(),
            "sitemapType": t.string(),
            "sourceUrl": t.string(),
            "subresultList": t.proxy(
                renames["QualitySitemapSubresultListIn"]
            ).optional(),
            "deprecatedTarget": t.array(t.proxy(renames["SitemapDEPRECATED_TargetIn"])),
            "DEPRECATEDSourceTitle": t.string().optional(),
            "TargetGroups": t.array(
                t.proxy(renames["QualitySitemapTargetGroupIn"])
            ).optional(),
        }
    ).named(renames["SitemapIn"])
    types["SitemapOut"] = t.struct(
        {
            "searchInSite": t.boolean().optional(),
            "pageAnchorsDocInfo": t.proxy(
                renames["SdrPageAnchorsDocInfoOut"]
            ).optional(),
            "sourceOrgfp": t.string().optional(),
            "sitemapType": t.string(),
            "sourceUrl": t.string(),
            "subresultList": t.proxy(
                renames["QualitySitemapSubresultListOut"]
            ).optional(),
            "deprecatedTarget": t.array(
                t.proxy(renames["SitemapDEPRECATED_TargetOut"])
            ),
            "DEPRECATEDSourceTitle": t.string().optional(),
            "TargetGroups": t.array(
                t.proxy(renames["QualitySitemapTargetGroupOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SitemapOut"])
    types["RepositoryWebrefAnchorIndicesIn"] = t.struct(
        {"index": t.array(t.integer()).optional()}
    ).named(renames["RepositoryWebrefAnchorIndicesIn"])
    types["RepositoryWebrefAnchorIndicesOut"] = t.struct(
        {
            "index": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnchorIndicesOut"])
    types["AssistantApiLocationCapabilitiesIn"] = t.struct(
        {"gpsAvailable": t.boolean()}
    ).named(renames["AssistantApiLocationCapabilitiesIn"])
    types["AssistantApiLocationCapabilitiesOut"] = t.struct(
        {
            "gpsAvailable": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLocationCapabilitiesOut"])
    types["AssistantLogsDeviceMediaSessionLogIn"] = t.struct(
        {
            "playbackState": t.string().optional(),
            "providerMid": t.string().optional(),
            "mediaSessionType": t.string(),
            "supportedTransportControl": t.array(t.string()),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]),
            "mediaType": t.string().optional(),
        }
    ).named(renames["AssistantLogsDeviceMediaSessionLogIn"])
    types["AssistantLogsDeviceMediaSessionLogOut"] = t.struct(
        {
            "playbackState": t.string().optional(),
            "providerMid": t.string().optional(),
            "mediaSessionType": t.string(),
            "supportedTransportControl": t.array(t.string()),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]),
            "mediaType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDeviceMediaSessionLogOut"])
    types["SecurityCredentialsResourceRoleProtoIn"] = t.struct(
        {
            "roleId": t.integer(),
            "objectId": t.string(),
            "objectPart": t.string(),
            "applicationId": t.string(),
        }
    ).named(renames["SecurityCredentialsResourceRoleProtoIn"])
    types["SecurityCredentialsResourceRoleProtoOut"] = t.struct(
        {
            "roleId": t.integer(),
            "objectId": t.string(),
            "objectPart": t.string(),
            "applicationId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsResourceRoleProtoOut"])
    types["GoogleInternalAppsWaldoV1alphaInactiveIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaInactiveIn"])
    types["GoogleInternalAppsWaldoV1alphaInactiveOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaInactiveOut"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataIn"] = t.struct(
        {
            "playwrightCategoryId": t.array(t.string()).optional(),
            "rank": t.array(
                t.proxy(
                    renames[
                        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankIn"
                    ]
                )
            ),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataIn"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataOut"] = t.struct(
        {
            "playwrightCategoryId": t.array(t.string()).optional(),
            "rank": t.array(
                t.proxy(
                    renames[
                        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataIn"
    ] = t.struct(
        {
            "ttsServiceRequestBytes": t.string().optional(),
            "onDeviceAlarmSound": t.string().optional(),
            "onDeviceAlarmSoundLabel": t.string().optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataIn"
        ]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataOut"
    ] = t.struct(
        {
            "ttsServiceRequestBytes": t.string().optional(),
            "onDeviceAlarmSound": t.string().optional(),
            "onDeviceAlarmSoundLabel": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadataOut"
        ]
    )
    types["GoogleCloudContentwarehouseV1InitializeProjectResponseIn"] = t.struct(
        {"message": t.string().optional(), "state": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1InitializeProjectResponseIn"])
    types["GoogleCloudContentwarehouseV1InitializeProjectResponseOut"] = t.struct(
        {
            "message": t.string().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1InitializeProjectResponseOut"])
    types["RepositoryAnnotationsMustangSentimentSnippetAnnotationsIn"] = t.struct(
        {
            "isTruncated": t.boolean(),
            "deprecatedPolarity": t.number().optional(),
            "deprecatedMagnitude": t.number().optional(),
            "end": t.integer(),
            "phraseType": t.string(),
            "snippetScore": t.integer(),
            "start": t.integer().optional(),
            "snippetText": t.string().optional(),
        }
    ).named(renames["RepositoryAnnotationsMustangSentimentSnippetAnnotationsIn"])
    types["RepositoryAnnotationsMustangSentimentSnippetAnnotationsOut"] = t.struct(
        {
            "isTruncated": t.boolean(),
            "deprecatedPolarity": t.number().optional(),
            "deprecatedMagnitude": t.number().optional(),
            "end": t.integer(),
            "phraseType": t.string(),
            "snippetScore": t.integer(),
            "start": t.integer().optional(),
            "snippetText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsMustangSentimentSnippetAnnotationsOut"])
    types["IndexingEmbeddedContentEmbedderInfoIn"] = t.struct(
        {
            "importanceAsEmbedder": t.integer(),
            "linkInfo": t.proxy(renames["IndexingEmbeddedContentLinkInfoIn"]),
        }
    ).named(renames["IndexingEmbeddedContentEmbedderInfoIn"])
    types["IndexingEmbeddedContentEmbedderInfoOut"] = t.struct(
        {
            "importanceAsEmbedder": t.integer(),
            "linkInfo": t.proxy(renames["IndexingEmbeddedContentLinkInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentEmbedderInfoOut"])
    types["GeostoreStableFieldPathProtoIn"] = t.struct(
        {
            "fieldPath": t.array(
                t.proxy(renames["GeostoreStableFieldPathProtoStableFieldSelectorIn"])
            ).optional()
        }
    ).named(renames["GeostoreStableFieldPathProtoIn"])
    types["GeostoreStableFieldPathProtoOut"] = t.struct(
        {
            "fieldPath": t.array(
                t.proxy(renames["GeostoreStableFieldPathProtoStableFieldSelectorOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreStableFieldPathProtoOut"])
    types["CountryMetroNBFeatureIn"] = t.struct(
        {
            "enclosingProvinceGeotoken": t.integer().optional(),
            "id": t.integer().optional(),
            "navboost": t.number().optional(),
        }
    ).named(renames["CountryMetroNBFeatureIn"])
    types["CountryMetroNBFeatureOut"] = t.struct(
        {
            "enclosingProvinceGeotoken": t.integer().optional(),
            "id": t.integer().optional(),
            "navboost": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryMetroNBFeatureOut"])
    types["GoogleCloudDocumentaiV1NormalizedVertexIn"] = t.struct(
        {"y": t.number().optional(), "x": t.number().optional()}
    ).named(renames["GoogleCloudDocumentaiV1NormalizedVertexIn"])
    types["GoogleCloudDocumentaiV1NormalizedVertexOut"] = t.struct(
        {
            "y": t.number().optional(),
            "x": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1NormalizedVertexOut"])
    types["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataIn"] = t.struct(
        {
            "isFavorite": t.boolean(),
            "invitationStatus": t.string().optional(),
            "userType": t.string(),
            "isDismissed": t.boolean(),
            "hadPastHangoutState": t.string(),
            "isPinned": t.boolean(),
            "isBot": t.boolean().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataOut"] = t.struct(
        {
            "isFavorite": t.boolean(),
            "invitationStatus": t.string().optional(),
            "userType": t.string(),
            "isDismissed": t.boolean(),
            "hadPastHangoutState": t.string(),
            "isPinned": t.boolean(),
            "isBot": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataOut"])
    types["FreebasePropertyValueIn"] = t.struct(
        {
            "totalValueCount": t.string().optional(),
            "property": t.proxy(renames["FreebaseIdIn"]).optional(),
            "value": t.array(t.proxy(renames["FreebaseValueIn"])).optional(),
            "valueStatus": t.string().optional(),
        }
    ).named(renames["FreebasePropertyValueIn"])
    types["FreebasePropertyValueOut"] = t.struct(
        {
            "totalValueCount": t.string().optional(),
            "property": t.proxy(renames["FreebaseIdOut"]).optional(),
            "value": t.array(t.proxy(renames["FreebaseValueOut"])).optional(),
            "valueStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebasePropertyValueOut"])
    types["IndexingDocjoinerDataVersionIn"] = t.struct(
        {
            "localyp": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoIn"]),
            "volt": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoIn"]),
            "videoScoringSignal": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
            "instantNavboost": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
            "navboost": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ).optional(),
            "modernFormatContent": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
            "creator": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ).optional(),
            "chromeCounts": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
            "universalFacts": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
            "rankembed": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoIn"]),
            "acceleratedShoppingSignal": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoIn"]
            ),
        }
    ).named(renames["IndexingDocjoinerDataVersionIn"])
    types["IndexingDocjoinerDataVersionOut"] = t.struct(
        {
            "localyp": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoOut"]),
            "volt": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoOut"]),
            "videoScoringSignal": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "instantNavboost": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "navboost": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ).optional(),
            "modernFormatContent": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "creator": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ).optional(),
            "chromeCounts": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "universalFacts": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "rankembed": t.proxy(renames["IndexingDocjoinerDataVersionVersionInfoOut"]),
            "acceleratedShoppingSignal": t.proxy(
                renames["IndexingDocjoinerDataVersionVersionInfoOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerDataVersionOut"])
    types["AssistantLogsQueryAnnotationLogIn"] = t.struct(
        {
            "deviceAnnotation": t.proxy(
                renames["AssistantLogsDeviceAnnotationLogIn"]
            ).optional(),
            "deviceAnnotations": t.array(
                t.proxy(renames["AssistantLogsDeviceAnnotationLogIn"])
            ).optional(),
            "roomAnnotation": t.proxy(
                renames["AssistantLogsRoomAnnotationLogIn"]
            ).optional(),
            "providerAnnotation": t.proxy(
                renames["AssistantLogsProviderAnnotationLogIn"]
            ).optional(),
            "roomAnnotations": t.array(
                t.proxy(renames["AssistantLogsRoomAnnotationLogIn"])
            ).optional(),
            "structureAnnotations": t.array(
                t.proxy(renames["AssistantLogsStructureAnnotationLogIn"])
            ).optional(),
        }
    ).named(renames["AssistantLogsQueryAnnotationLogIn"])
    types["AssistantLogsQueryAnnotationLogOut"] = t.struct(
        {
            "deviceAnnotation": t.proxy(
                renames["AssistantLogsDeviceAnnotationLogOut"]
            ).optional(),
            "deviceAnnotations": t.array(
                t.proxy(renames["AssistantLogsDeviceAnnotationLogOut"])
            ).optional(),
            "roomAnnotation": t.proxy(
                renames["AssistantLogsRoomAnnotationLogOut"]
            ).optional(),
            "providerAnnotation": t.proxy(
                renames["AssistantLogsProviderAnnotationLogOut"]
            ).optional(),
            "roomAnnotations": t.array(
                t.proxy(renames["AssistantLogsRoomAnnotationLogOut"])
            ).optional(),
            "structureAnnotations": t.array(
                t.proxy(renames["AssistantLogsStructureAnnotationLogOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsQueryAnnotationLogOut"])
    types["FocusBackendContactDetailHashIn"] = t.struct(
        {"type": t.string(), "value": t.integer().optional()}
    ).named(renames["FocusBackendContactDetailHashIn"])
    types["FocusBackendContactDetailHashOut"] = t.struct(
        {
            "type": t.string(),
            "value": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendContactDetailHashOut"])
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataIn"
    ] = t.struct({"inputPath": t.string().optional()}).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataIn"
        ]
    )
    types[
        "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataOut"
    ] = t.struct(
        {
            "inputPath": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadataOut"
        ]
    )
    types["TravelFlightsAirlineConfigLocalizedContactInfoIn"] = t.struct(
        {
            "contactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigContactInfoIn"])
            ),
            "language": t.string().optional(),
        }
    ).named(renames["TravelFlightsAirlineConfigLocalizedContactInfoIn"])
    types["TravelFlightsAirlineConfigLocalizedContactInfoOut"] = t.struct(
        {
            "contactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigContactInfoOut"])
            ),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsAirlineConfigLocalizedContactInfoOut"])
    types["SearchPolicyRankableSensitivityQueryUnderstandingIn"] = t.struct(
        {
            "rewrittenQuery": t.string().optional(),
            "intentOnlyNoPii": t.boolean().optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityQueryUnderstandingIn"])
    types["SearchPolicyRankableSensitivityQueryUnderstandingOut"] = t.struct(
        {
            "rewrittenQuery": t.string().optional(),
            "intentOnlyNoPii": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SearchPolicyRankableSensitivityQueryUnderstandingOut"])
    types["NlpSemanticParsingPersonalReferenceAnnotationIn"] = t.struct(
        {
            "resolutions": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"])
            ).optional(),
            "reference": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingPersonalReferenceAnnotationIn"])
    types["NlpSemanticParsingPersonalReferenceAnnotationOut"] = t.struct(
        {
            "resolutions": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"])
            ).optional(),
            "reference": t.proxy(
                renames["NlpSemanticParsingQRefAnnotationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingPersonalReferenceAnnotationOut"])
    types["AssistantApiScreenCapabilitiesProtoLayoutVersionIn"] = t.struct(
        {"minor": t.integer(), "major": t.integer()}
    ).named(renames["AssistantApiScreenCapabilitiesProtoLayoutVersionIn"])
    types["AssistantApiScreenCapabilitiesProtoLayoutVersionOut"] = t.struct(
        {
            "minor": t.integer(),
            "major": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiScreenCapabilitiesProtoLayoutVersionOut"])
    types["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderStatsIn"] = t.struct(
        {
            "documentBuildTimeMsec": t.integer().optional(),
            "droppedLogEntryCount": t.integer().optional(),
            "counter": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderStatsCounterIn"])
            ),
            "paintTimeMsec": t.integer().optional(),
            "renderEngine": t.string().optional(),
            "imageScalingTimeMsec": t.integer().optional(),
            "imageEncodingTimeMsec": t.integer().optional(),
            "renderCostMgcu": t.integer().optional(),
            "layoutTimeMsec": t.integer().optional(),
            "anonRenderFineTimingStats": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairIn"])
            ).optional(),
            "renderTimeMsec": t.integer().optional(),
            "renderServerBaselineCl": t.string().optional(),
            "renderRunningTimeMsec": t.integer().optional(),
            "consoleLogEntry": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn"])
            ).optional(),
            "sandboxRenderTimeMsec": t.integer().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderStatsIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderStatsOut"] = t.struct(
        {
            "documentBuildTimeMsec": t.integer().optional(),
            "droppedLogEntryCount": t.integer().optional(),
            "counter": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderStatsCounterOut"])
            ),
            "paintTimeMsec": t.integer().optional(),
            "renderEngine": t.string().optional(),
            "imageScalingTimeMsec": t.integer().optional(),
            "imageEncodingTimeMsec": t.integer().optional(),
            "renderCostMgcu": t.integer().optional(),
            "layoutTimeMsec": t.integer().optional(),
            "anonRenderFineTimingStats": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairOut"])
            ).optional(),
            "renderTimeMsec": t.integer().optional(),
            "renderServerBaselineCl": t.string().optional(),
            "renderRunningTimeMsec": t.integer().optional(),
            "consoleLogEntry": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut"])
            ).optional(),
            "sandboxRenderTimeMsec": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderStatsOut"])
    types["ResearchScamCoscamEasyRestrictDefinitionIn"] = t.struct(
        {
            "conjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamEasyConjunctionIn"])
            ).optional()
        }
    ).named(renames["ResearchScamCoscamEasyRestrictDefinitionIn"])
    types["ResearchScamCoscamEasyRestrictDefinitionOut"] = t.struct(
        {
            "conjunctions": t.array(
                t.proxy(renames["ResearchScamCoscamEasyConjunctionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamEasyRestrictDefinitionOut"])
    types["VideoContentSearchGenerativeTopicPredictionFeaturesIn"] = t.struct(
        {
            "groundTruthTopic": t.string().optional(),
            "predictions": t.array(t.string()).optional(),
            "modelName": t.string().optional(),
        }
    ).named(renames["VideoContentSearchGenerativeTopicPredictionFeaturesIn"])
    types["VideoContentSearchGenerativeTopicPredictionFeaturesOut"] = t.struct(
        {
            "groundTruthTopic": t.string().optional(),
            "predictions": t.array(t.string()).optional(),
            "modelName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchGenerativeTopicPredictionFeaturesOut"])
    types["VideoContentSearchDescriptionAnchorSetFeaturesIn"] = t.struct(
        {
            "asrAnchorCount": t.integer().optional(),
            "asrAnchorFraction": t.number().optional(),
            "uniqueAsrMidCount": t.integer().optional(),
        }
    ).named(renames["VideoContentSearchDescriptionAnchorSetFeaturesIn"])
    types["VideoContentSearchDescriptionAnchorSetFeaturesOut"] = t.struct(
        {
            "asrAnchorCount": t.integer().optional(),
            "asrAnchorFraction": t.number().optional(),
            "uniqueAsrMidCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchDescriptionAnchorSetFeaturesOut"])
    types["NlpSemanticParsingSaftMentionAnnotationIn"] = t.struct(
        {
            "measure": t.proxy(renames["NlpSemanticParsingSaftMeasureIn"]).optional(),
            "entity": t.proxy(renames["NlpSemanticParsingSaftSpanIn"]).optional(),
            "title": t.proxy(renames["NlpSemanticParsingSaftSpanIn"]).optional(),
            "coreference": t.proxy(
                renames["NlpSemanticParsingSaftCoreferenceIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingSaftMentionAnnotationIn"])
    types["NlpSemanticParsingSaftMentionAnnotationOut"] = t.struct(
        {
            "measure": t.proxy(renames["NlpSemanticParsingSaftMeasureOut"]).optional(),
            "entity": t.proxy(renames["NlpSemanticParsingSaftSpanOut"]).optional(),
            "title": t.proxy(renames["NlpSemanticParsingSaftSpanOut"]).optional(),
            "coreference": t.proxy(
                renames["NlpSemanticParsingSaftCoreferenceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingSaftMentionAnnotationOut"])
    types["AbuseiamUserRestrictionIn"] = t.struct(
        {
            "notRestriction": t.proxy(renames["AbuseiamNotRestrictionIn"]),
            "orRestriction": t.proxy(renames["AbuseiamOrRestrictionIn"]),
            "andRestriction": t.proxy(renames["AbuseiamAndRestrictionIn"]).optional(),
            "ageRestriction": t.proxy(renames["AbuseiamAgeRestrictionIn"]),
            "constantRestriction": t.proxy(
                renames["AbuseiamConstantRestrictionIn"]
            ).optional(),
            "geoRestriction": t.proxy(renames["AbuseiamGeoRestrictionIn"]).optional(),
            "specialRestriction": t.proxy(renames["AbuseiamSpecialRestrictionIn"]),
        }
    ).named(renames["AbuseiamUserRestrictionIn"])
    types["AbuseiamUserRestrictionOut"] = t.struct(
        {
            "notRestriction": t.proxy(renames["AbuseiamNotRestrictionOut"]),
            "orRestriction": t.proxy(renames["AbuseiamOrRestrictionOut"]),
            "andRestriction": t.proxy(renames["AbuseiamAndRestrictionOut"]).optional(),
            "ageRestriction": t.proxy(renames["AbuseiamAgeRestrictionOut"]),
            "constantRestriction": t.proxy(
                renames["AbuseiamConstantRestrictionOut"]
            ).optional(),
            "geoRestriction": t.proxy(renames["AbuseiamGeoRestrictionOut"]).optional(),
            "specialRestriction": t.proxy(renames["AbuseiamSpecialRestrictionOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamUserRestrictionOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationIn"] = t.struct(
        {
            "certification": t.string(),
            "fteMilliPercent": t.integer(),
            "startMsAsNumber": t.string(),
            "formattedStringType": t.string().optional(),
            "department": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "stringType": t.string().optional(),
            "endCalendarDay": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "domain": t.string(),
            "assignment": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentIn"
                    ]
                )
            ),
            "description": t.string(),
            "endMsAsNumber": t.string(),
            "project": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectIn"]
                )
            ),
            "yomiName": t.string(),
            "costCenter": t.string(),
            "startCalendarDay": t.proxy(renames["GoogleTypeDateIn"]).optional(),
            "type": t.string(),
            "endMs": t.string().optional(),
            "title": t.string(),
            "current": t.boolean(),
            "location": t.string(),
            "importance": t.number(),
            "symbol": t.string(),
            "startMs": t.string().optional(),
            "name": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationOut"] = t.struct(
        {
            "certification": t.string(),
            "fteMilliPercent": t.integer(),
            "startMsAsNumber": t.string(),
            "formattedStringType": t.string().optional(),
            "department": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "stringType": t.string().optional(),
            "endCalendarDay": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "domain": t.string(),
            "assignment": t.array(
                t.proxy(
                    renames[
                        "AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentOut"
                    ]
                )
            ),
            "description": t.string(),
            "endMsAsNumber": t.string(),
            "project": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiOrganizationProjectOut"]
                )
            ),
            "yomiName": t.string(),
            "costCenter": t.string(),
            "startCalendarDay": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "type": t.string(),
            "endMs": t.string().optional(),
            "title": t.string(),
            "current": t.boolean(),
            "location": t.string(),
            "importance": t.number(),
            "symbol": t.string(),
            "startMs": t.string().optional(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationOut"])
    types["RepositoryWebrefAnnotationDebugInfoIn"] = t.struct(
        {"description": t.string().optional()}
    ).named(renames["RepositoryWebrefAnnotationDebugInfoIn"])
    types["RepositoryWebrefAnnotationDebugInfoOut"] = t.struct(
        {
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefAnnotationDebugInfoOut"])
    types["RepositoryWebrefWebrefEntitiesIn"] = t.struct(
        {
            "dateRange": t.array(
                t.proxy(renames["RepositoryWebrefSemanticDateRangeIn"])
            ).optional(),
            "rangeAnnotations": t.array(
                t.proxy(renames["RepositoryWebrefRangeAnnotationsIn"])
            ).optional(),
            "annotatorCheckpointFingerprints": t.array(
                t.proxy(renames["RepositoryWebrefAnnotatorCheckpointFprintIn"])
            ).optional(),
            "documentInfo": t.proxy(
                renames["RepositoryWebrefWebrefDocumentInfoIn"]
            ).optional(),
            "entity": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityIn"])
            ).optional(),
            "tripleAnnotations": t.proxy(
                renames["RepositoryWebrefTripleAnnotationsIn"]
            ).optional(),
            "status": t.proxy(renames["RepositoryWebrefWebrefStatusIn"]).optional(),
            "category": t.array(
                t.proxy(renames["RepositoryWebrefCategoryAnnotationIn"])
            ).optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "annotationStats": t.proxy(
                renames["RepositoryWebrefWebrefAnnotationStatsIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntitiesIn"])
    types["RepositoryWebrefWebrefEntitiesOut"] = t.struct(
        {
            "dateRange": t.array(
                t.proxy(renames["RepositoryWebrefSemanticDateRangeOut"])
            ).optional(),
            "rangeAnnotations": t.array(
                t.proxy(renames["RepositoryWebrefRangeAnnotationsOut"])
            ).optional(),
            "annotatorCheckpointFingerprints": t.array(
                t.proxy(renames["RepositoryWebrefAnnotatorCheckpointFprintOut"])
            ).optional(),
            "documentInfo": t.proxy(
                renames["RepositoryWebrefWebrefDocumentInfoOut"]
            ).optional(),
            "entity": t.array(
                t.proxy(renames["RepositoryWebrefWebrefEntityOut"])
            ).optional(),
            "tripleAnnotations": t.proxy(
                renames["RepositoryWebrefTripleAnnotationsOut"]
            ).optional(),
            "status": t.proxy(renames["RepositoryWebrefWebrefStatusOut"]).optional(),
            "category": t.array(
                t.proxy(renames["RepositoryWebrefCategoryAnnotationOut"])
            ).optional(),
            "stuff": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "annotationStats": t.proxy(
                renames["RepositoryWebrefWebrefAnnotationStatsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntitiesOut"])
    types["MajelContactInformationShortcutInformationIn"] = t.struct(
        {"shortcutContactType": t.string()}
    ).named(renames["MajelContactInformationShortcutInformationIn"])
    types["MajelContactInformationShortcutInformationOut"] = t.struct(
        {
            "shortcutContactType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MajelContactInformationShortcutInformationOut"])
    types["NlpSciencelitReferencedBlockIn"] = t.struct(
        {
            "caption": t.proxy(renames["NlpSciencelitTokenizedTextIn"]).optional(),
            "reference": t.string().optional(),
            "title": t.proxy(renames["NlpSciencelitTokenizedTextIn"]).optional(),
            "type": t.string().optional(),
        }
    ).named(renames["NlpSciencelitReferencedBlockIn"])
    types["NlpSciencelitReferencedBlockOut"] = t.struct(
        {
            "caption": t.proxy(renames["NlpSciencelitTokenizedTextOut"]).optional(),
            "reference": t.string().optional(),
            "title": t.proxy(renames["NlpSciencelitTokenizedTextOut"]).optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitReferencedBlockOut"])
    types["NlpSemanticParsingModelsMediaAudioIn"] = t.struct(
        {
            "genericMusic": t.proxy(
                renames["NlpSemanticParsingModelsMediaGenericMusicIn"]
            ),
            "genre": t.proxy(renames["NlpSemanticParsingModelsMediaMusicGenreIn"]),
            "episodeConstraint": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaEpisodeConstraintIn"])
            ).optional(),
            "noExplicitAudio": t.boolean().optional(),
            "album": t.proxy(renames["NlpSemanticParsingModelsMediaAlbumTitleIn"]),
            "newsTopic": t.proxy(
                renames["NlpSemanticParsingModelsMediaNewsTopicIn"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "radioNetwork": t.proxy(
                renames["NlpSemanticParsingModelsMediaRadioNetworkIn"]
            ).optional(),
            "tvShow": t.proxy(
                renames["NlpSemanticParsingModelsMediaTVShowIn"]
            ).optional(),
            "radio": t.proxy(renames["NlpSemanticParsingModelsMediaRadioIn"]),
            "game": t.proxy(renames["NlpSemanticParsingModelsMediaGameIn"]).optional(),
            "podcast": t.proxy(
                renames["NlpSemanticParsingModelsMediaPodcastIn"]
            ).optional(),
            "movie": t.proxy(
                renames["NlpSemanticParsingModelsMediaMovieIn"]
            ).optional(),
            "scoreType": t.string().optional(),
            "artist": t.proxy(renames["NlpSemanticParsingModelsMediaMusicArtistIn"]),
            "seasonConstraint": t.proxy(
                renames["NlpSemanticParsingModelsMediaSeasonConstraintIn"]
            ).optional(),
            "tag": t.array(t.string()).optional(),
            "rawText": t.string().optional(),
            "playlist": t.proxy(
                renames["NlpSemanticParsingModelsMediaMusicPlaylistIn"]
            ),
            "book": t.proxy(renames["NlpSemanticParsingModelsMediaBookIn"]).optional(),
            "song": t.proxy(renames["NlpSemanticParsingModelsMediaSongIn"]),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAudioIn"])
    types["NlpSemanticParsingModelsMediaAudioOut"] = t.struct(
        {
            "genericMusic": t.proxy(
                renames["NlpSemanticParsingModelsMediaGenericMusicOut"]
            ),
            "genre": t.proxy(renames["NlpSemanticParsingModelsMediaMusicGenreOut"]),
            "episodeConstraint": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaEpisodeConstraintOut"])
            ).optional(),
            "noExplicitAudio": t.boolean().optional(),
            "album": t.proxy(renames["NlpSemanticParsingModelsMediaAlbumTitleOut"]),
            "newsTopic": t.proxy(
                renames["NlpSemanticParsingModelsMediaNewsTopicOut"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "radioNetwork": t.proxy(
                renames["NlpSemanticParsingModelsMediaRadioNetworkOut"]
            ).optional(),
            "tvShow": t.proxy(
                renames["NlpSemanticParsingModelsMediaTVShowOut"]
            ).optional(),
            "radio": t.proxy(renames["NlpSemanticParsingModelsMediaRadioOut"]),
            "game": t.proxy(renames["NlpSemanticParsingModelsMediaGameOut"]).optional(),
            "podcast": t.proxy(
                renames["NlpSemanticParsingModelsMediaPodcastOut"]
            ).optional(),
            "movie": t.proxy(
                renames["NlpSemanticParsingModelsMediaMovieOut"]
            ).optional(),
            "scoreType": t.string().optional(),
            "artist": t.proxy(renames["NlpSemanticParsingModelsMediaMusicArtistOut"]),
            "seasonConstraint": t.proxy(
                renames["NlpSemanticParsingModelsMediaSeasonConstraintOut"]
            ).optional(),
            "tag": t.array(t.string()).optional(),
            "rawText": t.string().optional(),
            "playlist": t.proxy(
                renames["NlpSemanticParsingModelsMediaMusicPlaylistOut"]
            ),
            "book": t.proxy(renames["NlpSemanticParsingModelsMediaBookOut"]).optional(),
            "song": t.proxy(renames["NlpSemanticParsingModelsMediaSongOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaAudioOut"])
    types["GeostoreServiceAreaProtoIn"] = t.struct(
        {
            "servedFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreServiceAreaProtoIn"])
    types["GeostoreServiceAreaProtoOut"] = t.struct(
        {
            "servedFeature": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreServiceAreaProtoOut"])
    types["GeostoreSegmentProtoIn"] = t.struct(
        {
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoIn"])
            ).optional(),
            "routeAssociation": t.array(
                t.proxy(renames["GeostoreRouteAssociationProtoIn"])
            ).optional(),
            "barrierMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "pedestrianGrade": t.string(),
            "pedestrianFacility": t.string().optional(),
            "constructionBeginDate": t.proxy(
                renames["GeostoreDateTimeProtoIn"]
            ).optional(),
            "advisoryMaximumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoIn"])
            ),
            "elevation": t.string().optional(),
            "intersection": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "interpolationOffsetMeters": t.number().optional(),
            "endpoint": t.string().optional(),
            "sweep": t.array(t.proxy(renames["GeostoreSweepProtoIn"])).optional(),
            "onRight": t.boolean().optional(),
            "altitude": t.array(t.number()).optional(),
            "surface": t.string().optional(),
            "visibleLandmark": t.array(
                t.proxy(renames["GeostoreLandmarkReferenceProtoIn"])
            ).optional(),
            "roadSign": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "endpointMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "lane": t.array(t.proxy(renames["GeostoreLaneProtoIn"])).optional(),
            "slope": t.array(t.proxy(renames["GeostoreSlopeProtoIn"])).optional(),
            "bicycleFacility": t.string().optional(),
            "legalMinimumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoIn"])
            ),
            "priority": t.string().optional(),
            "maxPermittedSpeedKph": t.number().optional(),
            "route": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional(),
            "condition": t.string(),
            "priorityMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "avgSpeedKph": t.number().optional(),
            "usage": t.string().optional(),
            "constructionEndDate": t.proxy(
                renames["GeostoreDateTimeProtoIn"]
            ).optional(),
            "roadMonitor": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional(),
            "elevationMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "isMaxPermittedSpeedDerived": t.boolean().optional(),
            "distanceToEdgeMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "bicycleSafety": t.string(),
            "separatedRoadways": t.boolean().optional(),
            "gradeLevel": t.array(
                t.proxy(renames["GeostoreGradeLevelProtoIn"])
            ).optional(),
            "edgeFollowsSegmentBeginFraction": t.number().optional(),
            "distanceToEdge": t.number().optional(),
            "sibling": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "covered": t.boolean().optional(),
            "constructionStatusMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "legalMaximumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoIn"])
            ).optional(),
            "surfaceMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "avgSpeedKphMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "barrier": t.string().optional(),
            "edgeFollowsSegmentEndFraction": t.number(),
            "conditionMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
            "constructionStatus": t.string(),
            "internal": t.proxy(renames["GeostoreInternalSegmentProtoIn"]).optional(),
            "pedestrianCrossing": t.proxy(
                renames["GeostorePedestrianCrossingProtoIn"]
            ).optional(),
            "tollRoad": t.boolean().optional(),
            "maxPermittedSpeedKphMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoIn"]
            ).optional(),
        }
    ).named(renames["GeostoreSegmentProtoIn"])
    types["GeostoreSegmentProtoOut"] = t.struct(
        {
            "restriction": t.array(
                t.proxy(renames["GeostoreRestrictionProtoOut"])
            ).optional(),
            "routeAssociation": t.array(
                t.proxy(renames["GeostoreRouteAssociationProtoOut"])
            ).optional(),
            "barrierMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "pedestrianGrade": t.string(),
            "pedestrianFacility": t.string().optional(),
            "constructionBeginDate": t.proxy(
                renames["GeostoreDateTimeProtoOut"]
            ).optional(),
            "advisoryMaximumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoOut"])
            ),
            "elevation": t.string().optional(),
            "intersection": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "interpolationOffsetMeters": t.number().optional(),
            "endpoint": t.string().optional(),
            "sweep": t.array(t.proxy(renames["GeostoreSweepProtoOut"])).optional(),
            "onRight": t.boolean().optional(),
            "altitude": t.array(t.number()).optional(),
            "surface": t.string().optional(),
            "visibleLandmark": t.array(
                t.proxy(renames["GeostoreLandmarkReferenceProtoOut"])
            ).optional(),
            "roadSign": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "endpointMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "lane": t.array(t.proxy(renames["GeostoreLaneProtoOut"])).optional(),
            "slope": t.array(t.proxy(renames["GeostoreSlopeProtoOut"])).optional(),
            "bicycleFacility": t.string().optional(),
            "legalMinimumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoOut"])
            ),
            "priority": t.string().optional(),
            "maxPermittedSpeedKph": t.number().optional(),
            "route": t.array(t.proxy(renames["GeostoreFeatureIdProtoOut"])).optional(),
            "condition": t.string(),
            "priorityMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "avgSpeedKph": t.number().optional(),
            "usage": t.string().optional(),
            "constructionEndDate": t.proxy(
                renames["GeostoreDateTimeProtoOut"]
            ).optional(),
            "roadMonitor": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "elevationMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "isMaxPermittedSpeedDerived": t.boolean().optional(),
            "distanceToEdgeMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "bicycleSafety": t.string(),
            "separatedRoadways": t.boolean().optional(),
            "gradeLevel": t.array(
                t.proxy(renames["GeostoreGradeLevelProtoOut"])
            ).optional(),
            "edgeFollowsSegmentBeginFraction": t.number().optional(),
            "distanceToEdge": t.number().optional(),
            "sibling": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "covered": t.boolean().optional(),
            "constructionStatusMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "legalMaximumSpeed": t.array(
                t.proxy(renames["GeostoreAppliedSpeedLimitProtoOut"])
            ).optional(),
            "surfaceMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "avgSpeedKphMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "barrier": t.string().optional(),
            "edgeFollowsSegmentEndFraction": t.number(),
            "conditionMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "constructionStatus": t.string(),
            "internal": t.proxy(renames["GeostoreInternalSegmentProtoOut"]).optional(),
            "pedestrianCrossing": t.proxy(
                renames["GeostorePedestrianCrossingProtoOut"]
            ).optional(),
            "tollRoad": t.boolean().optional(),
            "maxPermittedSpeedKphMetadata": t.proxy(
                renames["GeostoreFieldMetadataProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSegmentProtoOut"])
    types["RepositoryWebrefWebrefMustangAttachmentIn"] = t.struct(
        {
            "isAuthorIndex": t.array(t.integer()).optional(),
            "unboundIntentMid": t.array(t.string()).optional(),
            "referencePageIndex": t.array(t.integer()).optional(),
            "entityMetadata": t.array(
                t.proxy(renames["RepositoryWebrefWebrefAttachmentMetadataIn"])
            ).optional(),
            "categoryConfidenceE2": t.array(t.integer()).optional(),
            "topicalityE2": t.array(t.integer()).optional(),
            "categoryEncodedMid": t.array(t.string()).optional(),
            "confidenceE2": t.array(t.integer()).optional(),
            "iqlAttachment": t.proxy(
                renames["KnowledgeAnswersIntentQueryIndexingIQLAttachmentIn"]
            ).optional(),
            "encodedMid": t.array(t.string()).optional(),
            "isPublisherIndex": t.array(t.integer()).optional(),
            "unboundIntentScoreE2": t.array(t.integer()).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefMustangAttachmentIn"])
    types["RepositoryWebrefWebrefMustangAttachmentOut"] = t.struct(
        {
            "isAuthorIndex": t.array(t.integer()).optional(),
            "unboundIntentMid": t.array(t.string()).optional(),
            "referencePageIndex": t.array(t.integer()).optional(),
            "entityMetadata": t.array(
                t.proxy(renames["RepositoryWebrefWebrefAttachmentMetadataOut"])
            ).optional(),
            "categoryConfidenceE2": t.array(t.integer()).optional(),
            "topicalityE2": t.array(t.integer()).optional(),
            "categoryEncodedMid": t.array(t.string()).optional(),
            "confidenceE2": t.array(t.integer()).optional(),
            "iqlAttachment": t.proxy(
                renames["KnowledgeAnswersIntentQueryIndexingIQLAttachmentOut"]
            ).optional(),
            "encodedMid": t.array(t.string()).optional(),
            "isPublisherIndex": t.array(t.integer()).optional(),
            "unboundIntentScoreE2": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefMustangAttachmentOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateIn"
    ] = t.struct({"candidateIndex": t.integer().optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateOut"
    ] = t.struct(
        {
            "candidateIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidateOut"
        ]
    )
    types["AssistantApiLiveTvProviderIn"] = t.struct(
        {
            "providerType": t.string(),
            "providerKey": t.string().optional(),
            "providerInfo": t.proxy(
                renames["AssistantApiCoreTypesProviderIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiLiveTvProviderIn"])
    types["AssistantApiLiveTvProviderOut"] = t.struct(
        {
            "providerType": t.string(),
            "providerKey": t.string().optional(),
            "providerInfo": t.proxy(
                renames["AssistantApiCoreTypesProviderOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLiveTvProviderOut"])
    types["MediaIndexVideoCentroidIn"] = t.struct(
        {
            "domainScores": t.array(
                t.proxy(renames["MediaIndexVideoCentroidDomainScoreIn"])
            )
        }
    ).named(renames["MediaIndexVideoCentroidIn"])
    types["MediaIndexVideoCentroidOut"] = t.struct(
        {
            "domainScores": t.array(
                t.proxy(renames["MediaIndexVideoCentroidDomainScoreOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexVideoCentroidOut"])
    types["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderIn"] = t.struct(
        {"name": t.string(), "value": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderIn"])
    types["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderOut"] = t.struct(
        {
            "name": t.string(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoResourceHttpHeaderOut"])
    types["VideoThumbnailsFrameFileListIn"] = t.struct(
        {"frameFiles": t.array(t.proxy(renames["VideoThumbnailsFrameFileIn"]))}
    ).named(renames["VideoThumbnailsFrameFileListIn"])
    types["VideoThumbnailsFrameFileListOut"] = t.struct(
        {
            "frameFiles": t.array(t.proxy(renames["VideoThumbnailsFrameFileOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoThumbnailsFrameFileListOut"])
    types["AppsDynamiteSharedOrganizationInfoIn"] = t.struct(
        {
            "consumerInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoConsumerInfoIn"]
            ),
            "customerInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoCustomerInfoIn"]
            ),
        }
    ).named(renames["AppsDynamiteSharedOrganizationInfoIn"])
    types["AppsDynamiteSharedOrganizationInfoOut"] = t.struct(
        {
            "consumerInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoConsumerInfoOut"]
            ),
            "customerInfo": t.proxy(
                renames["AppsDynamiteSharedOrganizationInfoCustomerInfoOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsDynamiteSharedOrganizationInfoOut"])
    types["NlpSemanticParsingModelsMediaMusicArtistIn"] = t.struct(
        {
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"]),
            "playMore": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"]
            ).optional(),
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "isFromFastPath": t.boolean().optional(),
            "favorite": t.boolean().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicArtistIn"])
    types["NlpSemanticParsingModelsMediaMusicArtistOut"] = t.struct(
        {
            "qref": t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"]),
            "playMore": t.boolean().optional(),
            "annotationList": t.proxy(
                renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"]
            ).optional(),
            "rawText": t.string(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "isFromFastPath": t.boolean().optional(),
            "favorite": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMusicArtistOut"])
    types["VideoContentSearchOcrAsrFeatureIn"] = t.struct(
        {
            "minCharEditDistancePercent": t.number().optional(),
            "pretriggerScore": t.number().optional(),
            "wordOverlapAsrText": t.string().optional(),
            "ocrTextNormalizedForCharMatchLength": t.integer().optional(),
            "ocrTextNormalizedForCharMatch": t.string().optional(),
            "minCharEditDistance": t.integer().optional(),
            "wordOverlapCount": t.integer().optional(),
            "wordOverlapPercent": t.number().optional(),
            "minCharEditDistanceAsrText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchOcrAsrFeatureIn"])
    types["VideoContentSearchOcrAsrFeatureOut"] = t.struct(
        {
            "minCharEditDistancePercent": t.number().optional(),
            "pretriggerScore": t.number().optional(),
            "wordOverlapAsrText": t.string().optional(),
            "ocrTextNormalizedForCharMatchLength": t.integer().optional(),
            "ocrTextNormalizedForCharMatch": t.string().optional(),
            "minCharEditDistance": t.integer().optional(),
            "wordOverlapCount": t.integer().optional(),
            "wordOverlapPercent": t.number().optional(),
            "minCharEditDistanceAsrText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOcrAsrFeatureOut"])
    types["VideoGoogleVideoClipInfoIn"] = t.struct(
        {
            "assetLoggingId": t.array(t.string()).optional(),
            "appVersion": t.string().optional(),
        }
    ).named(renames["VideoGoogleVideoClipInfoIn"])
    types["VideoGoogleVideoClipInfoOut"] = t.struct(
        {
            "assetLoggingId": t.array(t.string()).optional(),
            "appVersion": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoGoogleVideoClipInfoOut"])
    types["ResearchScienceSearchLocationIn"] = t.struct(
        {
            "boxCoordinates": t.string().optional(),
            "pointCoordinates": t.string().optional(),
            "locationName": t.string().optional(),
            "unformattedCoordinates": t.string().optional(),
            "locationSource": t.string(),
            "locationMid": t.array(t.string()).optional(),
            "containedInMid": t.array(t.string()).optional(),
            "circleCoordinates": t.string().optional(),
            "locationMidLabel": t.array(t.string()).optional(),
        }
    ).named(renames["ResearchScienceSearchLocationIn"])
    types["ResearchScienceSearchLocationOut"] = t.struct(
        {
            "boxCoordinates": t.string().optional(),
            "pointCoordinates": t.string().optional(),
            "locationName": t.string().optional(),
            "unformattedCoordinates": t.string().optional(),
            "locationSource": t.string(),
            "locationMid": t.array(t.string()).optional(),
            "containedInMid": t.array(t.string()).optional(),
            "circleCoordinates": t.string().optional(),
            "locationMidLabel": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchLocationOut"])
    types["VideoContentSearchMetricStatsIn"] = t.struct(
        {
            "median": t.number(),
            "max": t.number(),
            "sum": t.number(),
            "mean": t.number(),
            "min": t.number(),
            "stddev": t.number(),
        }
    ).named(renames["VideoContentSearchMetricStatsIn"])
    types["VideoContentSearchMetricStatsOut"] = t.struct(
        {
            "median": t.number(),
            "max": t.number(),
            "sum": t.number(),
            "mean": t.number(),
            "min": t.number(),
            "stddev": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchMetricStatsOut"])
    types["RepositoryWebrefMentionDebugInfoIn"] = t.struct(
        {
            "snippet": t.string().optional(),
            "infoString": t.array(t.string()).optional(),
            "cleanText": t.string().optional(),
            "text": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefMentionDebugInfoIn"])
    types["RepositoryWebrefMentionDebugInfoOut"] = t.struct(
        {
            "snippet": t.string().optional(),
            "infoString": t.array(t.string()).optional(),
            "cleanText": t.string().optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionDebugInfoOut"])
    types["GoogleCloudContentwarehouseV1ResponseMetadataIn"] = t.struct(
        {"requestId": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1ResponseMetadataIn"])
    types["GoogleCloudContentwarehouseV1ResponseMetadataOut"] = t.struct(
        {
            "requestId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ResponseMetadataOut"])
    types["GeostoreJobMetadataIn"] = t.struct(
        {
            "jobRelatedCategories": t.array(
                t.proxy(renames["GeostoreJobRelatedCategoryIn"])
            ).optional(),
            "duration": t.string().optional(),
            "jobTypeId": t.string().optional(),
            "jobTypeMid": t.string().optional(),
        }
    ).named(renames["GeostoreJobMetadataIn"])
    types["GeostoreJobMetadataOut"] = t.struct(
        {
            "jobRelatedCategories": t.array(
                t.proxy(renames["GeostoreJobRelatedCategoryOut"])
            ).optional(),
            "duration": t.string().optional(),
            "jobTypeId": t.string().optional(),
            "jobTypeMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreJobMetadataOut"])
    types["CloudAiPlatformTenantresourceServiceAccountIdentityIn"] = t.struct(
        {"tag": t.string().optional(), "serviceAccountEmail": t.string().optional()}
    ).named(renames["CloudAiPlatformTenantresourceServiceAccountIdentityIn"])
    types["CloudAiPlatformTenantresourceServiceAccountIdentityOut"] = t.struct(
        {
            "tag": t.string().optional(),
            "serviceAccountEmail": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceServiceAccountIdentityOut"])
    types["QualityWebanswersVideoTranscriptAnnotationsIn"] = t.struct(
        {
            "lang": t.string().optional(),
            "asrRepair": t.proxy(
                renames["IndexingVideosAsrTranscriptRepairAnnotationIn"]
            ).optional(),
            "punctuatedTranscript": t.string(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentIn"]),
            "saftSentenceBoundary": t.proxy(renames["SentenceBoundaryAnnotationsIn"]),
            "webrefEntities": t.proxy(renames["RepositoryWebrefWebrefEntitiesIn"]),
            "amarnaDocid": t.string().optional(),
            "timingInfo": t.proxy(
                renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsIn"]
            ).optional(),
        }
    ).named(renames["QualityWebanswersVideoTranscriptAnnotationsIn"])
    types["QualityWebanswersVideoTranscriptAnnotationsOut"] = t.struct(
        {
            "lang": t.string().optional(),
            "asrRepair": t.proxy(
                renames["IndexingVideosAsrTranscriptRepairAnnotationOut"]
            ).optional(),
            "punctuatedTranscript": t.string(),
            "saftDocument": t.proxy(renames["NlpSaftDocumentOut"]),
            "saftSentenceBoundary": t.proxy(renames["SentenceBoundaryAnnotationsOut"]),
            "webrefEntities": t.proxy(renames["RepositoryWebrefWebrefEntitiesOut"]),
            "amarnaDocid": t.string().optional(),
            "timingInfo": t.proxy(
                renames["QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityWebanswersVideoTranscriptAnnotationsOut"])
    types["SecurityCredentialsCapTokenHolderProtoIn"] = t.struct(
        {"tokenHmacSha1Prefix": t.string().optional()}
    ).named(renames["SecurityCredentialsCapTokenHolderProtoIn"])
    types["SecurityCredentialsCapTokenHolderProtoOut"] = t.struct(
        {
            "tokenHmacSha1Prefix": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsCapTokenHolderProtoOut"])
    types["GeostoreTimeScheduleProtoIn"] = t.struct(
        {
            "component": t.array(
                t.proxy(renames["GeostoreTimeComponentProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreTimeScheduleProtoIn"])
    types["GeostoreTimeScheduleProtoOut"] = t.struct(
        {
            "component": t.array(
                t.proxy(renames["GeostoreTimeComponentProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimeScheduleProtoOut"])
    types["RepositoryWebrefSupportTransferRuleIn"] = t.struct(
        {
            "isReverseLink": t.boolean().optional(),
            "allowWildcardIntents": t.boolean().optional(),
            "targetCollection": t.proxy(
                renames["RepositoryWebrefKGCollectionIn"]
            ).optional(),
            "supportShare": t.boolean(),
            "mentionsOnly": t.boolean().optional(),
            "target": t.string().optional(),
            "domain": t.string().optional(),
            "userCountry": t.string().optional(),
            "userLanguage": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefSupportTransferRuleIn"])
    types["RepositoryWebrefSupportTransferRuleOut"] = t.struct(
        {
            "isReverseLink": t.boolean().optional(),
            "allowWildcardIntents": t.boolean().optional(),
            "targetCollection": t.proxy(
                renames["RepositoryWebrefKGCollectionOut"]
            ).optional(),
            "supportShare": t.boolean(),
            "mentionsOnly": t.boolean().optional(),
            "target": t.string().optional(),
            "domain": t.string().optional(),
            "userCountry": t.string().optional(),
            "userLanguage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSupportTransferRuleOut"])
    types["LogsProtoIndexingCrawlerIdCrawlerIdProtoIn"] = t.struct(
        {
            "country": t.string().optional(),
            "deviceType": t.string().optional(),
            "indexGrowthExptType": t.string().optional(),
            "languageCode": t.string().optional(),
            "language": t.string().optional(),
        }
    ).named(renames["LogsProtoIndexingCrawlerIdCrawlerIdProtoIn"])
    types["LogsProtoIndexingCrawlerIdCrawlerIdProtoOut"] = t.struct(
        {
            "country": t.string().optional(),
            "deviceType": t.string().optional(),
            "indexGrowthExptType": t.string().optional(),
            "languageCode": t.string().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogsProtoIndexingCrawlerIdCrawlerIdProtoOut"])
    types["CommerceDatastoreImageDeepTagsIn"] = t.struct(
        {
            "modelOutputs": t.array(
                t.proxy(renames["CommerceDatastoreImageDeepTagsModelOutputIn"])
            ).optional()
        }
    ).named(renames["CommerceDatastoreImageDeepTagsIn"])
    types["CommerceDatastoreImageDeepTagsOut"] = t.struct(
        {
            "modelOutputs": t.array(
                t.proxy(renames["CommerceDatastoreImageDeepTagsModelOutputOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommerceDatastoreImageDeepTagsOut"])
    types["NlpSemanticParsingModelsMediaMediaAnnotationIn"] = t.struct(
        {
            "podcastInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaPodcastInfoIn"]
            ).optional(),
            "youtubePlaylistInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaYouTubePlaylistInfoIn"]
            ).optional(),
            "purchaseInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaPurchaseInfoIn"]
            ).optional(),
            "playlistVisibility": t.string().optional(),
            "primaryEntityMid": t.string(),
            "radioInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaRadioInfoIn"]
            ).optional(),
            "image": t.array(
                t.proxy(renames["AssistantApiCoreTypesImageIn"])
            ).optional(),
            "providerInfo": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaMediaProviderInfoIn"])
            ).optional(),
            "personalDataIngestionEngine": t.string().optional(),
            "contentType": t.string().optional(),
            "name": t.string().optional(),
            "audiobookInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaAudiobookInfoIn"]
            ).optional(),
            "newsInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaNewsInfoIn"]
            ).optional(),
            "rentalInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaRentalInfoIn"]
            ).optional(),
            "artistName": t.string().optional(),
            "source": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaAnnotationIn"])
    types["NlpSemanticParsingModelsMediaMediaAnnotationOut"] = t.struct(
        {
            "podcastInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaPodcastInfoOut"]
            ).optional(),
            "youtubePlaylistInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaYouTubePlaylistInfoOut"]
            ).optional(),
            "purchaseInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaPurchaseInfoOut"]
            ).optional(),
            "playlistVisibility": t.string().optional(),
            "primaryEntityMid": t.string(),
            "radioInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaRadioInfoOut"]
            ).optional(),
            "image": t.array(
                t.proxy(renames["AssistantApiCoreTypesImageOut"])
            ).optional(),
            "providerInfo": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaMediaProviderInfoOut"])
            ).optional(),
            "personalDataIngestionEngine": t.string().optional(),
            "contentType": t.string().optional(),
            "name": t.string().optional(),
            "audiobookInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaAudiobookInfoOut"]
            ).optional(),
            "newsInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaNewsInfoOut"]
            ).optional(),
            "rentalInfo": t.proxy(
                renames["NlpSemanticParsingModelsMediaRentalInfoOut"]
            ).optional(),
            "artistName": t.string().optional(),
            "source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaAnnotationOut"])
    types["RepositoryWebrefFatcatCategoryIn"] = t.struct(
        {"score": t.number().optional(), "id": t.integer().optional()}
    ).named(renames["RepositoryWebrefFatcatCategoryIn"])
    types["RepositoryWebrefFatcatCategoryOut"] = t.struct(
        {
            "score": t.number().optional(),
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefFatcatCategoryOut"])
    types["BlogsearchConversationNodeIn"] = t.struct(
        {
            "authorName": t.string().optional(),
            "date": t.string().optional(),
            "parent": t.string().optional(),
            "docid": t.string().optional(),
            "children": t.array(t.string()).optional(),
        }
    ).named(renames["BlogsearchConversationNodeIn"])
    types["BlogsearchConversationNodeOut"] = t.struct(
        {
            "authorName": t.string().optional(),
            "date": t.string().optional(),
            "parent": t.string().optional(),
            "docid": t.string().optional(),
            "children": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BlogsearchConversationNodeOut"])
    types["GeostoreAnchoredGeometryProtoIn"] = t.struct(
        {"geometryId": t.string().optional()}
    ).named(renames["GeostoreAnchoredGeometryProtoIn"])
    types["GeostoreAnchoredGeometryProtoOut"] = t.struct(
        {
            "geometryId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAnchoredGeometryProtoOut"])
    types["SocialGraphApiProtoMonthlyDayRecurrenceIn"] = t.struct(
        {
            "monthDay": t.array(t.integer()).optional(),
            "useLastDayIfMonthDayPastEnd": t.boolean().optional(),
        }
    ).named(renames["SocialGraphApiProtoMonthlyDayRecurrenceIn"])
    types["SocialGraphApiProtoMonthlyDayRecurrenceOut"] = t.struct(
        {
            "monthDay": t.array(t.integer()).optional(),
            "useLastDayIfMonthDayPastEnd": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoMonthlyDayRecurrenceOut"])
    types["KnowledgeAnswersIntentQueryCollectionMembershipIn"] = t.struct(
        {
            "collectionScore": t.number().optional(),
            "collectionId": t.string().optional(),
            "score": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryCollectionScoreIn"])
            ).optional(),
            "collectionMid": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryCollectionMembershipIn"])
    types["KnowledgeAnswersIntentQueryCollectionMembershipOut"] = t.struct(
        {
            "collectionScore": t.number().optional(),
            "collectionId": t.string().optional(),
            "score": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryCollectionScoreOut"])
            ).optional(),
            "collectionMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryCollectionMembershipOut"])
    types["TeragoogleDocumentInfoIn"] = t.struct(
        {
            "globalDocid": t.string().optional(),
            "doc": t.proxy(renames["GDocumentBaseIn"]).optional(),
            "extendedDocid": t.string().optional(),
            "averageTermWeight": t.integer().optional(),
            "section": t.array(t.proxy(renames["TeragoogleDocumentInfoSectionIn"])),
            "originalEncoding": t.integer().optional(),
            "attachment": t.array(
                t.proxy(renames["TeragoogleDocumentInfoAttachmentIn"])
            ),
            "sectionType": t.string().optional(),
        }
    ).named(renames["TeragoogleDocumentInfoIn"])
    types["TeragoogleDocumentInfoOut"] = t.struct(
        {
            "globalDocid": t.string().optional(),
            "doc": t.proxy(renames["GDocumentBaseOut"]).optional(),
            "extendedDocid": t.string().optional(),
            "averageTermWeight": t.integer().optional(),
            "section": t.array(t.proxy(renames["TeragoogleDocumentInfoSectionOut"])),
            "originalEncoding": t.integer().optional(),
            "attachment": t.array(
                t.proxy(renames["TeragoogleDocumentInfoAttachmentOut"])
            ),
            "sectionType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TeragoogleDocumentInfoOut"])
    types["GeostoreTemporaryClosureProtoIn"] = t.struct(
        {
            "endAsOfDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "endDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "startAsOfDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "startDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
        }
    ).named(renames["GeostoreTemporaryClosureProtoIn"])
    types["GeostoreTemporaryClosureProtoOut"] = t.struct(
        {
            "endAsOfDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "endDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "startAsOfDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "startDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTemporaryClosureProtoOut"])
    types["AdsShoppingReportingOffersSerializedSoriIdIn"] = t.struct(
        {"lowId1": t.string(), "highId": t.string(), "lowId2": t.string()}
    ).named(renames["AdsShoppingReportingOffersSerializedSoriIdIn"])
    types["AdsShoppingReportingOffersSerializedSoriIdOut"] = t.struct(
        {
            "lowId1": t.string(),
            "highId": t.string(),
            "lowId2": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AdsShoppingReportingOffersSerializedSoriIdOut"])
    types["FatcatCompactDocClassificationIn"] = t.struct(
        {
            "taxonomic": t.array(
                t.proxy(renames["FatcatCompactTaxonomicClassificationIn"])
            ),
            "weight": t.string().optional(),
            "binary": t.array(t.proxy(renames["FatcatCompactBinaryClassificationIn"])),
            "rephilModelId": t.integer().optional(),
            "url": t.string().optional(),
            "clusters": t.proxy(renames["FatcatCompactRephilClustersIn"]),
            "langCode": t.string(),
            "epoch": t.string(),
        }
    ).named(renames["FatcatCompactDocClassificationIn"])
    types["FatcatCompactDocClassificationOut"] = t.struct(
        {
            "taxonomic": t.array(
                t.proxy(renames["FatcatCompactTaxonomicClassificationOut"])
            ),
            "weight": t.string().optional(),
            "binary": t.array(t.proxy(renames["FatcatCompactBinaryClassificationOut"])),
            "rephilModelId": t.integer().optional(),
            "url": t.string().optional(),
            "clusters": t.proxy(renames["FatcatCompactRephilClustersOut"]),
            "langCode": t.string(),
            "epoch": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactDocClassificationOut"])
    types["AssistantApiCoreTypesCalendarEventRoomIn"] = t.struct(
        {
            "locationDetails": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsIn"]
            ).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventRoomIn"])
    types["AssistantApiCoreTypesCalendarEventRoomOut"] = t.struct(
        {
            "locationDetails": t.proxy(
                renames["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsOut"]
            ).optional(),
            "email": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventRoomOut"])
    types["SnippetsLeadingtextLeadingTextAnnotationIn"] = t.struct(
        {
            "piece": t.array(
                t.proxy(renames["SnippetsLeadingtextLeadingTextAnnotationPieceIn"])
            ),
            "type": t.integer().optional(),
            "pieceType": t.string(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextAnnotationIn"])
    types["SnippetsLeadingtextLeadingTextAnnotationOut"] = t.struct(
        {
            "piece": t.array(
                t.proxy(renames["SnippetsLeadingtextLeadingTextAnnotationPieceOut"])
            ),
            "type": t.integer().optional(),
            "pieceType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextAnnotationOut"])
    types["NlpSemanticParsingModelsRecurrenceYearlyPatternIn"] = t.struct(
        {
            "monthlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternIn"]
            ).optional(),
            "yearMonth": t.array(t.string()).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceYearlyPatternIn"])
    types["NlpSemanticParsingModelsRecurrenceYearlyPatternOut"] = t.struct(
        {
            "monthlyPattern": t.proxy(
                renames["NlpSemanticParsingModelsRecurrenceMonthlyPatternOut"]
            ).optional(),
            "yearMonth": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceYearlyPatternOut"])
    types["NlpSemanticParsingModelsDialogReferentsListSelectionIn"] = t.struct(
        {
            "offset": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "id": t.string().optional(),
            "looseOffsetRestriction": t.boolean().optional(),
            "rawText": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDialogReferentsListSelectionIn"])
    types["NlpSemanticParsingModelsDialogReferentsListSelectionOut"] = t.struct(
        {
            "offset": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "id": t.string().optional(),
            "looseOffsetRestriction": t.boolean().optional(),
            "rawText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsDialogReferentsListSelectionOut"])
    types["VideoUserDataRegisteredItuTT35In"] = t.struct(
        {
            "count": t.integer().optional(),
            "countryCode": t.integer(),
            "providerCode": t.integer(),
        }
    ).named(renames["VideoUserDataRegisteredItuTT35In"])
    types["VideoUserDataRegisteredItuTT35Out"] = t.struct(
        {
            "count": t.integer().optional(),
            "countryCode": t.integer(),
            "providerCode": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoUserDataRegisteredItuTT35Out"])
    types["ClassifierPornSiteDataVersionedScoreIn"] = t.struct(
        {
            "version": t.integer(),
            "score": t.number(),
            "verticals4Score": t.number().optional(),
            "siteRule": t.array(t.string()),
        }
    ).named(renames["ClassifierPornSiteDataVersionedScoreIn"])
    types["ClassifierPornSiteDataVersionedScoreOut"] = t.struct(
        {
            "version": t.integer(),
            "score": t.number(),
            "verticals4Score": t.number().optional(),
            "siteRule": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornSiteDataVersionedScoreOut"])
    types["IndexingConverterRobotsInfoIn"] = t.struct(
        {
            "noarchiveReason": t.integer(),
            "notranslateReason": t.integer(),
            "noindexReason": t.integer().optional(),
            "maxImagePreview": t.string().optional(),
            "noimageindexReason": t.integer(),
            "noimageframeoverlayReason": t.integer(),
            "convertToRobotedReason": t.string(),
            "indexifembeddedReason": t.integer().optional(),
            "contentExpiry": t.integer().optional(),
            "nopreviewReason": t.integer(),
            "nosnippetReason": t.integer(),
            "maxSnippetLength": t.string().optional(),
            "nofollowReason": t.integer(),
            "disallowedReason": t.integer(),
        }
    ).named(renames["IndexingConverterRobotsInfoIn"])
    types["IndexingConverterRobotsInfoOut"] = t.struct(
        {
            "noarchiveReason": t.integer(),
            "notranslateReason": t.integer(),
            "noindexReason": t.integer().optional(),
            "maxImagePreview": t.string().optional(),
            "noimageindexReason": t.integer(),
            "noimageframeoverlayReason": t.integer(),
            "convertToRobotedReason": t.string(),
            "indexifembeddedReason": t.integer().optional(),
            "contentExpiry": t.integer().optional(),
            "nopreviewReason": t.integer(),
            "nosnippetReason": t.integer(),
            "maxSnippetLength": t.string().optional(),
            "nofollowReason": t.integer(),
            "disallowedReason": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRobotsInfoOut"])
    types["PrecomputedRestrictsIn"] = t.struct(
        {"restricts": t.array(t.string())}
    ).named(renames["PrecomputedRestrictsIn"])
    types["PrecomputedRestrictsOut"] = t.struct(
        {
            "restricts": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PrecomputedRestrictsOut"])
    types["GeostoreRankDetailsProtoIn"] = t.struct(
        {
            "signal": t.array(t.proxy(renames["GeostoreRankSignalProtoIn"])).optional(),
            "signalMixerType": t.string().optional(),
        }
    ).named(renames["GeostoreRankDetailsProtoIn"])
    types["GeostoreRankDetailsProtoOut"] = t.struct(
        {
            "signal": t.array(
                t.proxy(renames["GeostoreRankSignalProtoOut"])
            ).optional(),
            "signalMixerType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRankDetailsProtoOut"])
    types["OceanGEMoneyIn"] = t.struct(
        {"amountInMicros": t.string().optional(), "currencyCode": t.string().optional()}
    ).named(renames["OceanGEMoneyIn"])
    types["OceanGEMoneyOut"] = t.struct(
        {
            "amountInMicros": t.string().optional(),
            "currencyCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanGEMoneyOut"])
    types["IndexingSignalAggregatorSccDataIn"] = t.struct(
        {
            "parentPattern": t.proxy(renames["IndexingSignalAggregatorSccSignalIn"]),
            "pattern": t.proxy(
                renames["IndexingSignalAggregatorSccSignalIn"]
            ).optional(),
        }
    ).named(renames["IndexingSignalAggregatorSccDataIn"])
    types["IndexingSignalAggregatorSccDataOut"] = t.struct(
        {
            "parentPattern": t.proxy(renames["IndexingSignalAggregatorSccSignalOut"]),
            "pattern": t.proxy(
                renames["IndexingSignalAggregatorSccSignalOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorSccDataOut"])
    types["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefIn"] = t.struct(
        {
            "confidence": t.number().optional(),
            "layoutId": t.string().optional(),
            "page": t.string(),
            "boundingPoly": t.proxy(
                renames["GoogleCloudDocumentaiV1BoundingPolyIn"]
            ).optional(),
            "layoutType": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefIn"])
    types["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "layoutId": t.string().optional(),
            "page": t.string(),
            "boundingPoly": t.proxy(
                renames["GoogleCloudDocumentaiV1BoundingPolyOut"]
            ).optional(),
            "layoutType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageAnchorPageRefOut"])
    types[
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsIn"
    ] = t.struct({"numAnswers": t.string(), "answersValueGender": t.string()}).named(
        renames[
            "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsOut"
    ] = t.struct(
        {
            "numAnswers": t.string(),
            "answersValueGender": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignalsOut"
        ]
    )
    types["FreebaseValueIn"] = t.struct(
        {
            "type": t.string(),
            "stringValue": t.string().optional(),
            "timestampUsec": t.string().optional(),
            "compoundValue": t.proxy(renames["FreebaseTopicIn"]).optional(),
            "timestamp": t.string().optional(),
            "citation": t.proxy(renames["FreebaseCitationIn"]).optional(),
            "displayLang": t.string().optional(),
            "measurementValue": t.proxy(renames["FreebaseMeasurementIn"]),
            "index": t.string().optional(),
            "deletionProvenance": t.array(
                t.proxy(renames["StorageGraphBfgTripleProvenanceIn"])
            ).optional(),
            "floatValue": t.number().optional(),
            "lang": t.string().optional(),
            "boolValue": t.boolean().optional(),
            "subgraphId": t.array(t.string()),
            "nestedStruct": t.proxy(renames["FreebaseNestedStructIn"]).optional(),
            "latLongValue": t.proxy(renames["FreebaseLatLongIn"]),
            "rawValue": t.string().optional(),
            "intValue": t.string().optional(),
            "provenance": t.array(
                t.proxy(renames["StorageGraphBfgTripleProvenanceIn"])
            ).optional(),
            "expectedProto": t.string().optional(),
            "displayValue": t.string().optional(),
            "idValue": t.proxy(renames["FreebaseIdIn"]).optional(),
        }
    ).named(renames["FreebaseValueIn"])
    types["FreebaseValueOut"] = t.struct(
        {
            "type": t.string(),
            "stringValue": t.string().optional(),
            "timestampUsec": t.string().optional(),
            "compoundValue": t.proxy(renames["FreebaseTopicOut"]).optional(),
            "timestamp": t.string().optional(),
            "citation": t.proxy(renames["FreebaseCitationOut"]).optional(),
            "displayLang": t.string().optional(),
            "measurementValue": t.proxy(renames["FreebaseMeasurementOut"]),
            "index": t.string().optional(),
            "deletionProvenance": t.array(
                t.proxy(renames["StorageGraphBfgTripleProvenanceOut"])
            ).optional(),
            "floatValue": t.number().optional(),
            "lang": t.string().optional(),
            "boolValue": t.boolean().optional(),
            "subgraphId": t.array(t.string()),
            "nestedStruct": t.proxy(renames["FreebaseNestedStructOut"]).optional(),
            "latLongValue": t.proxy(renames["FreebaseLatLongOut"]),
            "rawValue": t.string().optional(),
            "intValue": t.string().optional(),
            "provenance": t.array(
                t.proxy(renames["StorageGraphBfgTripleProvenanceOut"])
            ).optional(),
            "expectedProto": t.string().optional(),
            "displayValue": t.string().optional(),
            "idValue": t.proxy(renames["FreebaseIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseValueOut"])
    types["AssistantApiSettingsCarrierCallDeviceSettingsIn"] = t.struct(
        {"allowIncomingCalls": t.boolean().optional()}
    ).named(renames["AssistantApiSettingsCarrierCallDeviceSettingsIn"])
    types["AssistantApiSettingsCarrierCallDeviceSettingsOut"] = t.struct(
        {
            "allowIncomingCalls": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsCarrierCallDeviceSettingsOut"])
    types["PseudoVideoDataTranscriptIn"] = t.struct(
        {
            "timestamp": t.array(
                t.proxy(renames["PseudoVideoDataTranscriptTimestampIn"])
            ),
            "Text": t.string().optional(),
        }
    ).named(renames["PseudoVideoDataTranscriptIn"])
    types["PseudoVideoDataTranscriptOut"] = t.struct(
        {
            "timestamp": t.array(
                t.proxy(renames["PseudoVideoDataTranscriptTimestampOut"])
            ),
            "Text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PseudoVideoDataTranscriptOut"])
    types["ImageRepositoryVideoPreviewsVideoPreviewIn"] = t.struct(
        {
            "debuggingInfo": t.proxy(
                renames["ImageRepositoryVideoPreviewsDebuggingInfoIn"]
            ).optional(),
            "metadata": t.proxy(renames["ImageBaseVideoPreviewMetadataIn"]).optional(),
            "content": t.string().optional(),
            "previewFrameZero": t.proxy(
                renames["DrishtiVesperVideoThumbnailIn"]
            ).optional(),
        }
    ).named(renames["ImageRepositoryVideoPreviewsVideoPreviewIn"])
    types["ImageRepositoryVideoPreviewsVideoPreviewOut"] = t.struct(
        {
            "debuggingInfo": t.proxy(
                renames["ImageRepositoryVideoPreviewsDebuggingInfoOut"]
            ).optional(),
            "metadata": t.proxy(renames["ImageBaseVideoPreviewMetadataOut"]).optional(),
            "content": t.string().optional(),
            "previewFrameZero": t.proxy(
                renames["DrishtiVesperVideoThumbnailOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryVideoPreviewsVideoPreviewOut"])
    types["GeostorePriceListNameInfoProtoIn"] = t.struct(
        {
            "description": t.string(),
            "name": t.string(),
            "id": t.string().optional(),
            "language": t.string().optional(),
        }
    ).named(renames["GeostorePriceListNameInfoProtoIn"])
    types["GeostorePriceListNameInfoProtoOut"] = t.struct(
        {
            "description": t.string(),
            "name": t.string(),
            "id": t.string().optional(),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceListNameInfoProtoOut"])
    types["SnapshotSnapshotMetadataIn"] = t.struct(
        {
            "snapshotDocument": t.proxy(renames["SnapshotSnapshotDocumentIn"]),
            "countDistinctResources": t.integer().optional(),
            "snapshotQualityScore": t.number().optional(),
            "totalContentSize": t.string().optional(),
            "crawlTimestamp": t.string().optional(),
        }
    ).named(renames["SnapshotSnapshotMetadataIn"])
    types["SnapshotSnapshotMetadataOut"] = t.struct(
        {
            "snapshotDocument": t.proxy(renames["SnapshotSnapshotDocumentOut"]),
            "countDistinctResources": t.integer().optional(),
            "snapshotQualityScore": t.number().optional(),
            "totalContentSize": t.string().optional(),
            "crawlTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotSnapshotMetadataOut"])
    types["AssistantApiSurfacePropertiesIn"] = t.struct(
        {
            "executionCapabilities": t.proxy(
                renames["AssistantApiSurfacePropertiesExecutionCapabilitiesIn"]
            ),
            "responseDisplayFormat": t.string().optional(),
            "supportsMultiResponse": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSurfacePropertiesIn"])
    types["AssistantApiSurfacePropertiesOut"] = t.struct(
        {
            "executionCapabilities": t.proxy(
                renames["AssistantApiSurfacePropertiesExecutionCapabilitiesOut"]
            ),
            "responseDisplayFormat": t.string().optional(),
            "supportsMultiResponse": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSurfacePropertiesOut"])
    types["VideoPipelineViperThumbnailerColumnDataIn"] = t.struct(
        {
            "storyboardVideoWidth": t.integer().optional(),
            "privateThumbnailsGenerated": t.boolean().optional(),
            "hqdefaultGenerated": t.boolean().optional(),
            "hvcBackupGenerated": t.boolean().optional(),
            "sddefaultGenerated": t.boolean().optional(),
            "publicThumbnailsGenerated": t.boolean().optional(),
            "highResPreviewThumbnailGenerated": t.boolean(),
            "maxresdefaultGenerated": t.boolean().optional(),
            "improvedVerticalGenerated": t.boolean().optional(),
            "frameTypeGenerated": t.string().optional(),
            "rerunStatus": t.string().optional(),
            "generatedFromDrishtiThumbnailer": t.boolean().optional(),
            "storyboardNumLevels": t.integer().optional(),
            "movingThumbnailGenerated": t.boolean().optional(),
            "storyboardVideoHeight": t.integer().optional(),
            "frameFileList": t.proxy(
                renames["VideoThumbnailsFrameFileListIn"]
            ).optional(),
            "frameBlobRefs": t.array(t.proxy(renames["BlobstoreBlobRefIn"])).optional(),
            "storyboardPolicy": t.integer().optional(),
            "maxresdefaultHeight": t.integer().optional(),
            "maxresdefaultWidth": t.integer().optional(),
            "storyboardVideoDurationMs": t.integer().optional(),
            "webpGenerated": t.boolean().optional(),
            "hq720Generated": t.boolean().optional(),
            "storyboardVersion": t.integer().optional(),
            "storyboardGenerated": t.boolean().optional(),
        }
    ).named(renames["VideoPipelineViperThumbnailerColumnDataIn"])
    types["VideoPipelineViperThumbnailerColumnDataOut"] = t.struct(
        {
            "storyboardVideoWidth": t.integer().optional(),
            "privateThumbnailsGenerated": t.boolean().optional(),
            "hqdefaultGenerated": t.boolean().optional(),
            "hvcBackupGenerated": t.boolean().optional(),
            "sddefaultGenerated": t.boolean().optional(),
            "publicThumbnailsGenerated": t.boolean().optional(),
            "highResPreviewThumbnailGenerated": t.boolean(),
            "maxresdefaultGenerated": t.boolean().optional(),
            "improvedVerticalGenerated": t.boolean().optional(),
            "frameTypeGenerated": t.string().optional(),
            "rerunStatus": t.string().optional(),
            "generatedFromDrishtiThumbnailer": t.boolean().optional(),
            "storyboardNumLevels": t.integer().optional(),
            "movingThumbnailGenerated": t.boolean().optional(),
            "storyboardVideoHeight": t.integer().optional(),
            "frameFileList": t.proxy(
                renames["VideoThumbnailsFrameFileListOut"]
            ).optional(),
            "frameBlobRefs": t.array(
                t.proxy(renames["BlobstoreBlobRefOut"])
            ).optional(),
            "storyboardPolicy": t.integer().optional(),
            "maxresdefaultHeight": t.integer().optional(),
            "maxresdefaultWidth": t.integer().optional(),
            "storyboardVideoDurationMs": t.integer().optional(),
            "webpGenerated": t.boolean().optional(),
            "hq720Generated": t.boolean().optional(),
            "storyboardVersion": t.integer().optional(),
            "storyboardGenerated": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoPipelineViperThumbnailerColumnDataOut"])
    types["GeostoreSourceTrustProtoIn"] = t.struct(
        {"level": t.string().optional()}
    ).named(renames["GeostoreSourceTrustProtoIn"])
    types["GeostoreSourceTrustProtoOut"] = t.struct(
        {
            "level": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSourceTrustProtoOut"])
    types["QualityOrbitAsteroidBeltDocumentIntentScoresIn"] = t.struct(
        {
            "belowThresholdScores": t.array(t.integer()),
            "version": t.integer().optional(),
            "belowThresholdIntents": t.array(t.string()).optional(),
            "imageIntentScores": t.struct({"_": t.string().optional()}).optional(),
            "intents": t.array(t.string()).optional(),
            "scores": t.array(t.integer()).optional(),
        }
    ).named(renames["QualityOrbitAsteroidBeltDocumentIntentScoresIn"])
    types["QualityOrbitAsteroidBeltDocumentIntentScoresOut"] = t.struct(
        {
            "belowThresholdScores": t.array(t.integer()),
            "version": t.integer().optional(),
            "belowThresholdIntents": t.array(t.string()).optional(),
            "imageIntentScores": t.struct({"_": t.string().optional()}).optional(),
            "intents": t.array(t.string()).optional(),
            "scores": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityOrbitAsteroidBeltDocumentIntentScoresOut"])
    types["GeostoreRectProtoIn"] = t.struct(
        {
            "hi": t.proxy(renames["GeostorePointProtoIn"]),
            "lo": t.proxy(renames["GeostorePointProtoIn"]),
        }
    ).named(renames["GeostoreRectProtoIn"])
    types["GeostoreRectProtoOut"] = t.struct(
        {
            "hi": t.proxy(renames["GeostorePointProtoOut"]),
            "lo": t.proxy(renames["GeostorePointProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRectProtoOut"])
    types["RepositoryWebrefJuggernautIndicesIn"] = t.struct(
        {"index": t.array(t.integer()).optional(), "type": t.string()}
    ).named(renames["RepositoryWebrefJuggernautIndicesIn"])
    types["RepositoryWebrefJuggernautIndicesOut"] = t.struct(
        {
            "index": t.array(t.integer()).optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefJuggernautIndicesOut"])
    types["RepositoryWebrefWebrefEntityIdIn"] = t.struct(
        {"conceptId": t.string().optional(), "freebaseMid": t.string().optional()}
    ).named(renames["RepositoryWebrefWebrefEntityIdIn"])
    types["RepositoryWebrefWebrefEntityIdOut"] = t.struct(
        {
            "conceptId": t.string().optional(),
            "freebaseMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefEntityIdOut"])
    types["ImageDataMultibangEntitiesIn"] = t.struct(
        {
            "entity": t.array(
                t.proxy(renames["ImageDataMultibangEntitiesMultibangEntityIn"])
            )
        }
    ).named(renames["ImageDataMultibangEntitiesIn"])
    types["ImageDataMultibangEntitiesOut"] = t.struct(
        {
            "entity": t.array(
                t.proxy(renames["ImageDataMultibangEntitiesMultibangEntityOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageDataMultibangEntitiesOut"])
    types["RepositoryWebrefRefconRefconDocumentMetadataIn"] = t.struct(
        {"queryStats": t.proxy(renames["RepositoryWebrefRefconQueryStatsIn"])}
    ).named(renames["RepositoryWebrefRefconRefconDocumentMetadataIn"])
    types["RepositoryWebrefRefconRefconDocumentMetadataOut"] = t.struct(
        {
            "queryStats": t.proxy(renames["RepositoryWebrefRefconQueryStatsOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRefconRefconDocumentMetadataOut"])
    types["HtmlrenderWebkitHeadlessProtoChromiumTraceIn"] = t.struct(
        {"chromiumTrace": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoChromiumTraceIn"])
    types["HtmlrenderWebkitHeadlessProtoChromiumTraceOut"] = t.struct(
        {
            "chromiumTrace": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoChromiumTraceOut"])
    types["GeostoreCurveConnectionProtoIn"] = t.struct(
        {
            "bezierParams": t.proxy(
                renames["GeostoreCurveConnectionProtoBezierParamsIn"]
            ),
            "type": t.string(),
            "circleParams": t.proxy(
                renames["GeostoreCurveConnectionProtoCircleParamsIn"]
            ),
        }
    ).named(renames["GeostoreCurveConnectionProtoIn"])
    types["GeostoreCurveConnectionProtoOut"] = t.struct(
        {
            "bezierParams": t.proxy(
                renames["GeostoreCurveConnectionProtoBezierParamsOut"]
            ),
            "type": t.string(),
            "circleParams": t.proxy(
                renames["GeostoreCurveConnectionProtoCircleParamsOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreCurveConnectionProtoOut"])
    types["GDocumentBaseIn"] = t.struct(
        {
            "ScienceMetadata": t.proxy(renames["ScienceCitationIn"]).optional(),
            "ExternalHttpMetadata": t.string().optional(),
            "NoImageIndexReason": t.integer(),
            "URL": t.string().optional(),
            "localsearchDocInfo": t.proxy(renames["LocalsearchDocInfoIn"]).optional(),
            "DisplayUrl": t.string().optional(),
            "NoSnippetReason": t.integer(),
            "NoPreviewReason": t.integer(),
            "originalcontent": t.proxy(renames["GDocumentBaseOriginalContentIn"]),
            "IPAddr": t.string().optional(),
            "PagerankNS": t.integer().optional(),
            "Pagerank": t.integer().optional(),
            "directory": t.array(t.proxy(renames["GDocumentBaseDirectoryIn"])),
            "FilterForSafeSearch": t.integer().optional(),
            "NoIndexReason": t.integer().optional(),
            "URLEncoding": t.integer().optional(),
            "ExternalFeedMetadata": t.string(),
            "NoImageframeOverlayReason": t.integer(),
            "ContentExpiryTime": t.integer().optional(),
            "Repid": t.string().optional(),
            "id": t.proxy(
                renames["IndexingCrawlerIdServingDocumentIdentifierIn"]
            ).optional(),
            "userAgentName": t.string().optional(),
            "oceanDocInfo": t.proxy(renames["OceanDocInfoIn"]).optional(),
            "URLAfterRedirects": t.string(),
            "NoTranslateReason": t.integer(),
            "DocId": t.string().optional(),
            "ecnFp": t.string().optional(),
            "NoFollowReason": t.integer(),
            "NoArchiveReason": t.integer(),
            "content": t.proxy(renames["GDocumentBaseContentIn"]),
        }
    ).named(renames["GDocumentBaseIn"])
    types["GDocumentBaseOut"] = t.struct(
        {
            "ScienceMetadata": t.proxy(renames["ScienceCitationOut"]).optional(),
            "ExternalHttpMetadata": t.string().optional(),
            "NoImageIndexReason": t.integer(),
            "URL": t.string().optional(),
            "localsearchDocInfo": t.proxy(renames["LocalsearchDocInfoOut"]).optional(),
            "DisplayUrl": t.string().optional(),
            "NoSnippetReason": t.integer(),
            "NoPreviewReason": t.integer(),
            "originalcontent": t.proxy(renames["GDocumentBaseOriginalContentOut"]),
            "IPAddr": t.string().optional(),
            "PagerankNS": t.integer().optional(),
            "Pagerank": t.integer().optional(),
            "directory": t.array(t.proxy(renames["GDocumentBaseDirectoryOut"])),
            "FilterForSafeSearch": t.integer().optional(),
            "NoIndexReason": t.integer().optional(),
            "URLEncoding": t.integer().optional(),
            "ExternalFeedMetadata": t.string(),
            "NoImageframeOverlayReason": t.integer(),
            "ContentExpiryTime": t.integer().optional(),
            "Repid": t.string().optional(),
            "id": t.proxy(
                renames["IndexingCrawlerIdServingDocumentIdentifierOut"]
            ).optional(),
            "userAgentName": t.string().optional(),
            "oceanDocInfo": t.proxy(renames["OceanDocInfoOut"]).optional(),
            "URLAfterRedirects": t.string(),
            "NoTranslateReason": t.integer(),
            "DocId": t.string().optional(),
            "ecnFp": t.string().optional(),
            "NoFollowReason": t.integer(),
            "NoArchiveReason": t.integer(),
            "content": t.proxy(renames["GDocumentBaseContentOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GDocumentBaseOut"])
    types["NlpSemanticParsingDatetimeFetchedRelativeDateTimeIn"] = t.struct(
        {
            "metadata": t.string().optional(),
            "rangeModifier": t.string().optional(),
            "baseType": t.string(),
            "target": t.proxy(
                renames["NlpSemanticParsingDatetimeTargetToFetchIn"]
            ).optional(),
            "count": t.integer().optional(),
            "range": t.proxy(renames["NlpSemanticParsingDatetimeRangeIn"]).optional(),
            "ordinal": t.array(t.integer()).optional(),
            "relativeRange": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeFetchedRelativeDateTimeIn"])
    types["NlpSemanticParsingDatetimeFetchedRelativeDateTimeOut"] = t.struct(
        {
            "metadata": t.string().optional(),
            "rangeModifier": t.string().optional(),
            "baseType": t.string(),
            "target": t.proxy(
                renames["NlpSemanticParsingDatetimeTargetToFetchOut"]
            ).optional(),
            "count": t.integer().optional(),
            "range": t.proxy(renames["NlpSemanticParsingDatetimeRangeOut"]).optional(),
            "ordinal": t.array(t.integer()).optional(),
            "relativeRange": t.proxy(
                renames["NlpSemanticParsingDatetimeResolutionPropertiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeFetchedRelativeDateTimeOut"])
    types["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperIn"])
    types["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["QualityQrewriteQRewriteAccountAwareCalendarAliasWrapperOut"])
    types["GoogleInternalAppsWaldoV1alphaOutOfOfficeIn"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "comeBackTime": t.string().optional(),
            "eventSummary": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaOutOfOfficeIn"])
    types["GoogleInternalAppsWaldoV1alphaOutOfOfficeOut"] = t.struct(
        {
            "committedUntil": t.string().optional(),
            "comeBackTime": t.string().optional(),
            "eventSummary": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaOutOfOfficeOut"])
    types[
        "VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyIn"
    ] = t.struct(
        {
            "smartSuggestions": t.array(
                t.proxy(
                    renames["VideoYoutubeCommentsClassificationProtoSmartSuggestionIn"]
                )
            ).optional(),
            "suggestionListIdentifier": t.string().optional(),
        }
    ).named(
        renames["VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyIn"]
    )
    types[
        "VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyOut"
    ] = t.struct(
        {
            "smartSuggestions": t.array(
                t.proxy(
                    renames["VideoYoutubeCommentsClassificationProtoSmartSuggestionOut"]
                )
            ).optional(),
            "suggestionListIdentifier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReplyOut"]
    )
    types["ImageRepositoryApiXtagIn"] = t.struct(
        {"value": t.string().optional(), "name": t.string().optional()}
    ).named(renames["ImageRepositoryApiXtagIn"])
    types["ImageRepositoryApiXtagOut"] = t.struct(
        {
            "value": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryApiXtagOut"])
    types["KnowledgeAnswersMeaningSchemaSlotKeyIn"] = t.struct(
        {"mid": t.string().optional(), "uniqueId": t.string().optional()}
    ).named(renames["KnowledgeAnswersMeaningSchemaSlotKeyIn"])
    types["KnowledgeAnswersMeaningSchemaSlotKeyOut"] = t.struct(
        {
            "mid": t.string().optional(),
            "uniqueId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersMeaningSchemaSlotKeyOut"])
    types["SocialGraphApiProtoLimitedProfileNameSettingsIn"] = t.struct(
        {
            "verbatimFullName": t.string().optional(),
            "partialNameOptions": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsIn"]
            ),
        }
    ).named(renames["SocialGraphApiProtoLimitedProfileNameSettingsIn"])
    types["SocialGraphApiProtoLimitedProfileNameSettingsOut"] = t.struct(
        {
            "verbatimFullName": t.string().optional(),
            "partialNameOptions": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoLimitedProfileNameSettingsOut"])
    types["HtmlrenderWebkitHeadlessProtoPartialRenderIn"] = t.struct(
        {
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentIn"]
            ).optional(),
            "currentClientUrl": t.string().optional(),
            "cookie": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoCookieIn"])
            ).optional(),
            "image": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoImageIn"]
            ).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoPartialRenderIn"])
    types["HtmlrenderWebkitHeadlessProtoPartialRenderOut"] = t.struct(
        {
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentOut"]
            ).optional(),
            "currentClientUrl": t.string().optional(),
            "cookie": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoCookieOut"])
            ).optional(),
            "image": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoImageOut"]
            ).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoPartialRenderOut"])
    types["AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoIn"] = t.struct(
        {
            "nluAgentVersion": t.string().optional(),
            "locale": t.string().optional(),
            "nluAgentId": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoIn"])
    types["AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoOut"] = t.struct(
        {
            "nluAgentVersion": t.string().optional(),
            "locale": t.string().optional(),
            "nluAgentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfoOut"])
    types["CompositeDocLocalizedVariationsIn"] = t.struct(
        {
            "dupsComputedAlternateNames": t.array(
                t.proxy(
                    renames["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryIn"]
                )
            ).optional(),
            "webmasterAlternateNames": t.array(
                t.proxy(renames["IndexingConverterLocalizedAlternateNameIn"])
            ).optional(),
        }
    ).named(renames["CompositeDocLocalizedVariationsIn"])
    types["CompositeDocLocalizedVariationsOut"] = t.struct(
        {
            "dupsComputedAlternateNames": t.array(
                t.proxy(
                    renames["IndexingDupsComputedLocalizedAlternateNamesLocaleEntryOut"]
                )
            ).optional(),
            "webmasterAlternateNames": t.array(
                t.proxy(renames["IndexingConverterLocalizedAlternateNameOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocLocalizedVariationsOut"])
    types["NlpSemanticParsingModelsRecurrenceRecurrenceStartIn"] = t.struct(
        {
            "startMillis": t.string().optional(),
            "startDateTime": t.proxy(
                renames["NlpSemanticParsingDateTimeAnnotationIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceRecurrenceStartIn"])
    types["NlpSemanticParsingModelsRecurrenceRecurrenceStartOut"] = t.struct(
        {
            "startMillis": t.string().optional(),
            "startDateTime": t.proxy(
                renames["NlpSemanticParsingDateTimeAnnotationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceRecurrenceStartOut"])
    types["GoodocWordAlternatesAlternateIn"] = t.struct(
        {
            "OcrEngineVersion": t.string().optional(),
            "OcrEngineId": t.string().optional(),
            "Word": t.proxy(renames["GoodocWordIn"]).optional(),
        }
    ).named(renames["GoodocWordAlternatesAlternateIn"])
    types["GoodocWordAlternatesAlternateOut"] = t.struct(
        {
            "OcrEngineVersion": t.string().optional(),
            "OcrEngineId": t.string().optional(),
            "Word": t.proxy(renames["GoodocWordOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocWordAlternatesAlternateOut"])
    types["NlxDataSchemaByteIn"] = t.struct(
        {"document": t.proxy(renames["MultiscalePointerIndexIn"]).optional()}
    ).named(renames["NlxDataSchemaByteIn"])
    types["NlxDataSchemaByteOut"] = t.struct(
        {
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaByteOut"])
    types["KnowledgeAnswersIntentQueryMediaEntitySignalsIn"] = t.struct(
        {"artistTitle": t.string().optional(), "name": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryMediaEntitySignalsIn"])
    types["KnowledgeAnswersIntentQueryMediaEntitySignalsOut"] = t.struct(
        {
            "artistTitle": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryMediaEntitySignalsOut"])
    types["QualityTimebasedSyntacticDateIn"] = t.struct(
        {
            "precisionMark": t.integer().optional(),
            "bylineDate": t.string().optional(),
            "syntacticDateNotForRestrict": t.boolean().optional(),
            "debugInfo": t.string(),
            "fromExplicitTimeZone": t.boolean().optional(),
            "daterange": t.proxy(renames["QualityTimebasedSyntacticDateDateRangeIn"]),
            "useInTimeZoneGuessingMode": t.boolean().optional(),
            "useAsBylineDate": t.boolean().optional(),
            "info": t.integer().optional(),
            "position": t.proxy(renames["QualityTimebasedSyntacticDatePositionIn"]),
            "timeZoneOffsetSeconds": t.string().optional(),
            "trustSyntacticDateInRanking": t.boolean().optional(),
            "date": t.string().optional(),
            "useRangeInsteadOfDateForRestrict": t.boolean().optional(),
        }
    ).named(renames["QualityTimebasedSyntacticDateIn"])
    types["QualityTimebasedSyntacticDateOut"] = t.struct(
        {
            "precisionMark": t.integer().optional(),
            "bylineDate": t.string().optional(),
            "syntacticDateNotForRestrict": t.boolean().optional(),
            "debugInfo": t.string(),
            "fromExplicitTimeZone": t.boolean().optional(),
            "daterange": t.proxy(renames["QualityTimebasedSyntacticDateDateRangeOut"]),
            "useInTimeZoneGuessingMode": t.boolean().optional(),
            "useAsBylineDate": t.boolean().optional(),
            "info": t.integer().optional(),
            "position": t.proxy(renames["QualityTimebasedSyntacticDatePositionOut"]),
            "timeZoneOffsetSeconds": t.string().optional(),
            "trustSyntacticDateInRanking": t.boolean().optional(),
            "date": t.string().optional(),
            "useRangeInsteadOfDateForRestrict": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityTimebasedSyntacticDateOut"])
    types["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeIn"] = t.struct(
        {"code": t.string().optional(), "countryCode": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeIn"])
    types["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeOut"] = t.struct(
        {
            "code": t.string().optional(),
            "countryCode": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCodeOut"])
    types["NlpSaftEntityProfileRelatedIn"] = t.struct(
        {
            "score": t.number().optional(),
            "inverse": t.boolean().optional(),
            "type": t.string().optional(),
            "targetName": t.string().optional(),
            "count": t.integer().optional(),
            "targetId": t.string().optional(),
            "relationIdentifier": t.proxy(renames["NlpSaftIdentifierIn"]).optional(),
            "targetIdentifier": t.proxy(renames["NlpSaftIdentifierIn"]).optional(),
            "relationId": t.integer().optional(),
        }
    ).named(renames["NlpSaftEntityProfileRelatedIn"])
    types["NlpSaftEntityProfileRelatedOut"] = t.struct(
        {
            "score": t.number().optional(),
            "inverse": t.boolean().optional(),
            "type": t.string().optional(),
            "targetName": t.string().optional(),
            "count": t.integer().optional(),
            "targetId": t.string().optional(),
            "relationIdentifier": t.proxy(renames["NlpSaftIdentifierOut"]).optional(),
            "targetIdentifier": t.proxy(renames["NlpSaftIdentifierOut"]).optional(),
            "relationId": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileRelatedOut"])
    types["ImageRepositoryFrameIdentifierIn"] = t.struct(
        {
            "previewFrameZeroVariant": t.proxy(
                renames["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantIn"]
            ),
            "timestampMs": t.integer().optional(),
            "thumbnailVariant": t.proxy(
                renames["ImageRepositoryFrameIdentifierThumbnailVariantIn"]
            ),
        }
    ).named(renames["ImageRepositoryFrameIdentifierIn"])
    types["ImageRepositoryFrameIdentifierOut"] = t.struct(
        {
            "previewFrameZeroVariant": t.proxy(
                renames["ImageRepositoryFrameIdentifierPreviewFrameZeroVariantOut"]
            ),
            "timestampMs": t.integer().optional(),
            "thumbnailVariant": t.proxy(
                renames["ImageRepositoryFrameIdentifierThumbnailVariantOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryFrameIdentifierOut"])
    types["QualityActionsReminderIn"] = t.struct(
        {
            "updateTimestamp": t.string().optional(),
            "archived": t.boolean().optional(),
            "attachment": t.array(
                t.proxy(renames["AssistantRemindersAttachmentIn"])
            ).optional(),
            "dynamiteGroupAssignmentSource": t.proxy(
                renames["QualityActionsReminderDynamiteGroupIn"]
            ),
            "personalReferenceMetadata": t.proxy(
                renames["CopleySourceTypeListIn"]
            ).optional(),
            "archivedTime": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "customizedNotificationCard": t.array(
                t.proxy(renames["QualityActionsCustomizedNotificationIn"])
            ).optional(),
            "documentAssignmentSource": t.proxy(
                renames["QualityActionsReminderDocumentIn"]
            ),
            "createTime": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "serverId": t.string().optional(),
            "createTimestamp": t.string().optional(),
            "creator": t.proxy(renames["QualityActionsReminderPersonIn"]).optional(),
            "clientId": t.string().optional(),
            "symbolicTime": t.string(),
            "id": t.string().optional(),
            "log": t.proxy(renames["AssistantLogsReminderLogIn"]).optional(),
            "location": t.proxy(renames["QualityActionsReminderLocationIn"]),
            "notifying": t.boolean().optional(),
            "datetime": t.proxy(renames["AssistantApiDateTimeIn"]).optional(),
            "asyncInteractionType": t.string().optional(),
            "description": t.string().optional(),
            "memoryPayload": t.proxy(
                renames["AssistantRemindersMemoryPayloadIn"]
            ).optional(),
            "bareTitle": t.string().optional(),
            "archivedTimestamp": t.string().optional(),
            "extraNotificationDeviceId": t.string().optional(),
            "clientType": t.proxy(
                renames["QualityDialogManagerReminderClientTypeIn"]
            ).optional(),
            "recurrence": t.proxy(renames["QualityActionsReminderRecurrenceInfoIn"]),
            "title": t.string().optional(),
            "recipient": t.proxy(renames["QualityActionsReminderPersonIn"]).optional(),
        }
    ).named(renames["QualityActionsReminderIn"])
    types["QualityActionsReminderOut"] = t.struct(
        {
            "updateTimestamp": t.string().optional(),
            "archived": t.boolean().optional(),
            "attachment": t.array(
                t.proxy(renames["AssistantRemindersAttachmentOut"])
            ).optional(),
            "dynamiteGroupAssignmentSource": t.proxy(
                renames["QualityActionsReminderDynamiteGroupOut"]
            ),
            "personalReferenceMetadata": t.proxy(
                renames["CopleySourceTypeListOut"]
            ).optional(),
            "archivedTime": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "customizedNotificationCard": t.array(
                t.proxy(renames["QualityActionsCustomizedNotificationOut"])
            ).optional(),
            "documentAssignmentSource": t.proxy(
                renames["QualityActionsReminderDocumentOut"]
            ),
            "createTime": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "serverId": t.string().optional(),
            "createTimestamp": t.string().optional(),
            "creator": t.proxy(renames["QualityActionsReminderPersonOut"]).optional(),
            "clientId": t.string().optional(),
            "symbolicTime": t.string(),
            "id": t.string().optional(),
            "log": t.proxy(renames["AssistantLogsReminderLogOut"]).optional(),
            "location": t.proxy(renames["QualityActionsReminderLocationOut"]),
            "notifying": t.boolean().optional(),
            "datetime": t.proxy(renames["AssistantApiDateTimeOut"]).optional(),
            "asyncInteractionType": t.string().optional(),
            "description": t.string().optional(),
            "memoryPayload": t.proxy(
                renames["AssistantRemindersMemoryPayloadOut"]
            ).optional(),
            "bareTitle": t.string().optional(),
            "archivedTimestamp": t.string().optional(),
            "extraNotificationDeviceId": t.string().optional(),
            "clientType": t.proxy(
                renames["QualityDialogManagerReminderClientTypeOut"]
            ).optional(),
            "recurrence": t.proxy(renames["QualityActionsReminderRecurrenceInfoOut"]),
            "title": t.string().optional(),
            "recipient": t.proxy(renames["QualityActionsReminderPersonOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderOut"])
    types["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetIn"] = t.struct(
        {"numChars": t.integer(), "snippetText": t.string()}
    ).named(renames["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetIn"])
    types["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetOut"] = t.struct(
        {
            "numChars": t.integer(),
            "snippetText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetExtraInfoSnippetCandidateInfoExtendedSnippetOut"])
    types["ImageRepositorySpeechRecognitionAlternativeIn"] = t.struct(
        {
            "transcript": t.string().optional(),
            "confidence": t.number().optional(),
            "words": t.array(t.proxy(renames["ImageRepositoryWordInfoIn"])).optional(),
        }
    ).named(renames["ImageRepositorySpeechRecognitionAlternativeIn"])
    types["ImageRepositorySpeechRecognitionAlternativeOut"] = t.struct(
        {
            "transcript": t.string().optional(),
            "confidence": t.number().optional(),
            "words": t.array(t.proxy(renames["ImageRepositoryWordInfoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositorySpeechRecognitionAlternativeOut"])
    types["ImageSafesearchContentBrainPornAnnotationIn"] = t.struct(
        {
            "ytPornScore": t.number().optional(),
            "pedoScore": t.number(),
            "childScore": t.number().optional(),
            "medicalScore": t.number(),
            "version": t.string().optional(),
            "iuInappropriateScore": t.number().optional(),
            "violenceScore": t.number(),
            "spoofScore": t.number(),
            "csaiScore": t.number().optional(),
            "racyScore": t.number().optional(),
            "pornScore": t.number(),
        }
    ).named(renames["ImageSafesearchContentBrainPornAnnotationIn"])
    types["ImageSafesearchContentBrainPornAnnotationOut"] = t.struct(
        {
            "ytPornScore": t.number().optional(),
            "pedoScore": t.number(),
            "childScore": t.number().optional(),
            "medicalScore": t.number(),
            "version": t.string().optional(),
            "iuInappropriateScore": t.number().optional(),
            "violenceScore": t.number(),
            "spoofScore": t.number(),
            "csaiScore": t.number().optional(),
            "racyScore": t.number().optional(),
            "pornScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageSafesearchContentBrainPornAnnotationOut"])
    types["KnowledgeAnswersTimeZoneTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersTimeZoneTypeIn"])
    types["KnowledgeAnswersTimeZoneTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersTimeZoneTypeOut"])
    types["GeostorePointProtoIn"] = t.struct(
        {
            "latE7": t.integer(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "lngE7": t.integer(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["GeostorePointProtoIn"])
    types["GeostorePointProtoOut"] = t.struct(
        {
            "latE7": t.integer(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "lngE7": t.integer(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePointProtoOut"])
    types["GDocumentBaseDirectoryIn"] = t.struct(
        {
            "TitleScore": t.number().optional(),
            "Category": t.string().optional(),
            "Identifier": t.string().optional(),
            "Title": t.string().optional(),
            "DescriptionScore": t.number(),
            "URL": t.string(),
            "Description": t.string().optional(),
            "Language": t.integer().optional(),
        }
    ).named(renames["GDocumentBaseDirectoryIn"])
    types["GDocumentBaseDirectoryOut"] = t.struct(
        {
            "TitleScore": t.number().optional(),
            "Category": t.string().optional(),
            "Identifier": t.string().optional(),
            "Title": t.string().optional(),
            "DescriptionScore": t.number(),
            "URL": t.string(),
            "Description": t.string().optional(),
            "Language": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GDocumentBaseDirectoryOut"])
    types["LongStructuredSnippetEntryIn"] = t.struct(
        {"text": t.string().optional(), "header": t.boolean().optional()}
    ).named(renames["LongStructuredSnippetEntryIn"])
    types["LongStructuredSnippetEntryOut"] = t.struct(
        {
            "text": t.string().optional(),
            "header": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LongStructuredSnippetEntryOut"])
    types["GoogleCloudDocumentaiV1DocumentEntityRelationIn"] = t.struct(
        {
            "objectId": t.string().optional(),
            "relation": t.string().optional(),
            "subjectId": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityRelationIn"])
    types["GoogleCloudDocumentaiV1DocumentEntityRelationOut"] = t.struct(
        {
            "objectId": t.string().optional(),
            "relation": t.string().optional(),
            "subjectId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentEntityRelationOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleTypedValueIn"] = t.struct(
        {
            "boolValue": t.boolean().optional(),
            "numberValue": t.number().optional(),
            "stringValue": t.string().optional(),
            "dateTimeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeIn"]
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleTypedValueIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleTypedValueOut"] = t.struct(
        {
            "boolValue": t.boolean().optional(),
            "numberValue": t.number().optional(),
            "stringValue": t.string().optional(),
            "dateTimeValue": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleDateTimeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleTypedValueOut"])
    types["GroupsPerDocDataIn"] = t.struct(
        {
            "AuthorId": t.string(),
            "GroupGaiaId": t.string(),
            "GroupId": t.string().optional(),
            "ThreadId": t.string(),
        }
    ).named(renames["GroupsPerDocDataIn"])
    types["GroupsPerDocDataOut"] = t.struct(
        {
            "AuthorId": t.string(),
            "GroupGaiaId": t.string(),
            "GroupId": t.string().optional(),
            "ThreadId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GroupsPerDocDataOut"])
    types["GoogleCloudContentwarehouseV1ValueIn"] = t.struct(
        {
            "stringValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "intValue": t.integer().optional(),
            "timestampValue": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampValueIn"]
            ).optional(),
            "enumValue": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumValueIn"]
            ).optional(),
            "booleanValue": t.boolean().optional(),
            "datetimeValue": t.proxy(renames["GoogleTypeDateTimeIn"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ValueIn"])
    types["GoogleCloudContentwarehouseV1ValueOut"] = t.struct(
        {
            "stringValue": t.string().optional(),
            "floatValue": t.number().optional(),
            "intValue": t.integer().optional(),
            "timestampValue": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampValueOut"]
            ).optional(),
            "enumValue": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumValueOut"]
            ).optional(),
            "booleanValue": t.boolean().optional(),
            "datetimeValue": t.proxy(renames["GoogleTypeDateTimeOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ValueOut"])
    types["AbuseiamGeoRestrictionLocaleIn"] = t.struct(
        {
            "location": t.string().optional(),
            "restriction": t.proxy(renames["AbuseiamUserRestrictionIn"]).optional(),
        }
    ).named(renames["AbuseiamGeoRestrictionLocaleIn"])
    types["AbuseiamGeoRestrictionLocaleOut"] = t.struct(
        {
            "location": t.string().optional(),
            "restriction": t.proxy(renames["AbuseiamUserRestrictionOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamGeoRestrictionLocaleOut"])
    types["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecIn"] = t.struct(
        {
            "allInitialsFromParsedName": t.boolean().optional(),
            "firstInitialAndVeryLastName": t.boolean().optional(),
            "veryFirstNameAndAllInitials": t.boolean().optional(),
            "veryFirstNameOnly": t.boolean().optional(),
            "truncationIndicator": t.string().optional(),
            "knowledgeGraphNameShortening": t.boolean().optional(),
            "firstInitialAndFirstLastName": t.boolean().optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecIn"])
    types["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecOut"] = t.struct(
        {
            "allInitialsFromParsedName": t.boolean().optional(),
            "firstInitialAndVeryLastName": t.boolean().optional(),
            "veryFirstNameAndAllInitials": t.boolean().optional(),
            "veryFirstNameOnly": t.boolean().optional(),
            "truncationIndicator": t.string().optional(),
            "knowledgeGraphNameShortening": t.boolean().optional(),
            "firstInitialAndFirstLastName": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecOut"])
    types["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataIn"] = t.struct(
        {"isEnterpriseUser": t.boolean().optional(), "contentRestriction": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataOut"] = t.struct(
        {
            "isEnterpriseUser": t.boolean().optional(),
            "contentRestriction": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataOut"])
    types["RepositoryWebrefMdvcMetadataIn"] = t.struct(
        {
            "perVertical": t.array(
                t.proxy(renames["RepositoryWebrefMdvcMetadataPerVerticalIn"])
            ).optional(),
            "isSynthetic": t.boolean().optional(),
            "generalization": t.array(t.string()).optional(),
            "resolutionPriority": t.integer().optional(),
            "dimension": t.array(t.string()).optional(),
            "expandedOutputConceptId": t.array(t.string()).optional(),
        }
    ).named(renames["RepositoryWebrefMdvcMetadataIn"])
    types["RepositoryWebrefMdvcMetadataOut"] = t.struct(
        {
            "perVertical": t.array(
                t.proxy(renames["RepositoryWebrefMdvcMetadataPerVerticalOut"])
            ).optional(),
            "isSynthetic": t.boolean().optional(),
            "generalization": t.array(t.string()).optional(),
            "resolutionPriority": t.integer().optional(),
            "dimension": t.array(t.string()).optional(),
            "expandedOutputConceptId": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMdvcMetadataOut"])
    types["VideoContentSearchSpanDolphinScoresSpanTokenIn"] = t.struct(
        {
            "score": t.number().optional(),
            "text": t.string().optional(),
            "asrConfidence": t.number().optional(),
            "timeMs": t.string().optional(),
            "isSentenceStart": t.boolean().optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresSpanTokenIn"])
    types["VideoContentSearchSpanDolphinScoresSpanTokenOut"] = t.struct(
        {
            "score": t.number().optional(),
            "text": t.string().optional(),
            "asrConfidence": t.number().optional(),
            "timeMs": t.string().optional(),
            "isSentenceStart": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinScoresSpanTokenOut"])
    types["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesIn"] = t.struct(
        {
            "energySavingsEnabled": t.boolean().optional(),
            "circadianLightingEnabled": t.boolean().optional(),
            "gentleWakeupEnabled": t.boolean().optional(),
            "homeAwayOverMatterEnabled": t.boolean().optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesIn"])
    types["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesOut"] = t.struct(
        {
            "energySavingsEnabled": t.boolean().optional(),
            "circadianLightingEnabled": t.boolean().optional(),
            "gentleWakeupEnabled": t.boolean().optional(),
            "homeAwayOverMatterEnabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoSmartHomeFeaturesOut"])
    types["GoogleIamV1BindingIn"] = t.struct(
        {
            "role": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "condition": t.proxy(renames["GoogleTypeExprIn"]).optional(),
        }
    ).named(renames["GoogleIamV1BindingIn"])
    types["GoogleIamV1BindingOut"] = t.struct(
        {
            "role": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "condition": t.proxy(renames["GoogleTypeExprOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleIamV1BindingOut"])
    types["MediaIndexSparseFloatVectorIn"] = t.struct(
        {
            "columnsInt32": t.array(t.integer()),
            "columnsInt8": t.string(),
            "columnsInt16": t.string(),
            "values": t.array(t.number()),
            "columnsInt64": t.array(t.string()).optional(),
            "columns": t.array(t.string()).optional(),
        }
    ).named(renames["MediaIndexSparseFloatVectorIn"])
    types["MediaIndexSparseFloatVectorOut"] = t.struct(
        {
            "columnsInt32": t.array(t.integer()),
            "columnsInt8": t.string(),
            "columnsInt16": t.string(),
            "values": t.array(t.number()),
            "columnsInt64": t.array(t.string()).optional(),
            "columns": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexSparseFloatVectorOut"])
    types["OceanVolumeViewabilityIn"] = t.struct(
        {
            "updatedByIndexer": t.boolean().optional(),
            "DEPRECATEDDefaultViewType": t.integer(),
            "inViewabilityLimbo": t.boolean().optional(),
            "locale": t.array(t.proxy(renames["OceanVolumeViewabilityLocaleIn"])),
            "defaultViewability": t.proxy(
                renames["OceanLocaleViewabilityIn"]
            ).optional(),
        }
    ).named(renames["OceanVolumeViewabilityIn"])
    types["OceanVolumeViewabilityOut"] = t.struct(
        {
            "updatedByIndexer": t.boolean().optional(),
            "DEPRECATEDDefaultViewType": t.integer(),
            "inViewabilityLimbo": t.boolean().optional(),
            "locale": t.array(t.proxy(renames["OceanVolumeViewabilityLocaleOut"])),
            "defaultViewability": t.proxy(
                renames["OceanLocaleViewabilityOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanVolumeViewabilityOut"])
    types["SocialCommonLinkDataIn"] = t.struct(
        {
            "attachmentRenderHint": t.string().optional(),
            "linkTarget": t.string().optional(),
            "attachment": t.proxy(
                renames["SocialCommonAttachmentAttachmentIn"]
            ).optional(),
            "displayUrl": t.string().optional(),
            "title": t.string().optional(),
            "linkType": t.string().optional(),
        }
    ).named(renames["SocialCommonLinkDataIn"])
    types["SocialCommonLinkDataOut"] = t.struct(
        {
            "attachmentRenderHint": t.string().optional(),
            "linkTarget": t.string().optional(),
            "attachment": t.proxy(
                renames["SocialCommonAttachmentAttachmentOut"]
            ).optional(),
            "displayUrl": t.string().optional(),
            "title": t.string().optional(),
            "linkType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonLinkDataOut"])
    types["GoodocDocumentHeaderIn"] = t.struct(
        {
            "OcrEngineVersion": t.string(),
            "OcrEngineId": t.string(),
            "font": t.array(t.proxy(renames["GoodocDocumentHeaderFontIn"])),
        }
    ).named(renames["GoodocDocumentHeaderIn"])
    types["GoodocDocumentHeaderOut"] = t.struct(
        {
            "OcrEngineVersion": t.string(),
            "OcrEngineId": t.string(),
            "font": t.array(t.proxy(renames["GoodocDocumentHeaderFontOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentHeaderOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningIn"
        ]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames[
            "KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaningOut"
        ]
    )
    types["AssistantApiSettingsHospitalityModeBrandingIn"] = t.struct(
        {
            "smallLogoUrl": t.string(),
            "displayNameForLanguage": t.struct({"_": t.string().optional()}).optional(),
            "displayName": t.string().optional(),
            "largeLogoUrl": t.string(),
        }
    ).named(renames["AssistantApiSettingsHospitalityModeBrandingIn"])
    types["AssistantApiSettingsHospitalityModeBrandingOut"] = t.struct(
        {
            "smallLogoUrl": t.string(),
            "displayNameForLanguage": t.struct({"_": t.string().optional()}).optional(),
            "displayName": t.string().optional(),
            "largeLogoUrl": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsHospitalityModeBrandingOut"])
    types["GoodocBoundingBoxIn"] = t.struct(
        {
            "Left": t.integer().optional(),
            "Label": t.integer().optional(),
            "Width": t.integer(),
            "Top": t.integer(),
            "Height": t.integer(),
        }
    ).named(renames["GoodocBoundingBoxIn"])
    types["GoodocBoundingBoxOut"] = t.struct(
        {
            "Left": t.integer().optional(),
            "Label": t.integer().optional(),
            "Width": t.integer(),
            "Top": t.integer(),
            "Height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocBoundingBoxOut"])
    types["SecurityCredentialsMdbGroupProtoIn"] = t.struct(
        {"groupName": t.string()}
    ).named(renames["SecurityCredentialsMdbGroupProtoIn"])
    types["SecurityCredentialsMdbGroupProtoOut"] = t.struct(
        {"groupName": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SecurityCredentialsMdbGroupProtoOut"])
    types["WirelessTranscoderFetchFetchMetadataIn"] = t.struct(
        {"name": t.string(), "value": t.string()}
    ).named(renames["WirelessTranscoderFetchFetchMetadataIn"])
    types["WirelessTranscoderFetchFetchMetadataOut"] = t.struct(
        {
            "name": t.string(),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WirelessTranscoderFetchFetchMetadataOut"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestIn"] = t.struct(
        {
            "documentSchema": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentSchemaIn"]
            )
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestIn"])
    types["GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestOut"] = t.struct(
        {
            "documentSchema": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequestOut"])
    types["TrawlerOriginalClientParamsIn"] = t.struct(
        {
            "clientUsername": t.string(),
            "clientIp": t.string(),
            "clientCell": t.string(),
            "clientRpcType": t.string().optional(),
        }
    ).named(renames["TrawlerOriginalClientParamsIn"])
    types["TrawlerOriginalClientParamsOut"] = t.struct(
        {
            "clientUsername": t.string(),
            "clientIp": t.string(),
            "clientCell": t.string(),
            "clientRpcType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerOriginalClientParamsOut"])
    types["VideoContentSearchOCRTextIn"] = t.struct(
        {
            "ocrFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextFeatureIn"]
            ).optional(),
            "ocrText": t.string().optional(),
            "timeMs": t.string().optional(),
        }
    ).named(renames["VideoContentSearchOCRTextIn"])
    types["VideoContentSearchOCRTextOut"] = t.struct(
        {
            "ocrFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextFeatureOut"]
            ).optional(),
            "ocrText": t.string().optional(),
            "timeMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOCRTextOut"])
    types["AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityIn"] = t.struct(
        {
            "packageNames": t.array(t.string()).optional(),
            "intentActionName": t.string().optional(),
        }
    ).named(renames["AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityIn"])
    types["AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityOut"] = t.struct(
        {
            "packageNames": t.array(t.string()).optional(),
            "intentActionName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAndroidIntentCapabilitiesAndroidIntentCapabilityOut"])
    types["TravelFlightsAirlineConfigCountryContactInfoIn"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "contactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigContactInfoIn"])
            ),
        }
    ).named(renames["TravelFlightsAirlineConfigCountryContactInfoIn"])
    types["TravelFlightsAirlineConfigCountryContactInfoOut"] = t.struct(
        {
            "countryCode": t.string().optional(),
            "contactInfo": t.array(
                t.proxy(renames["TravelFlightsAirlineConfigContactInfoOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsAirlineConfigCountryContactInfoOut"])
    types["AssistantLogsRoomAnnotationLogIn"] = t.struct(
        {
            "type": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
            "roomCount": t.integer().optional(),
            "userDefinedName": t.string(),
        }
    ).named(renames["AssistantLogsRoomAnnotationLogIn"])
    types["AssistantLogsRoomAnnotationLogOut"] = t.struct(
        {
            "type": t.string().optional(),
            "rawTextFromQuery": t.string().optional(),
            "roomCount": t.integer().optional(),
            "userDefinedName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsRoomAnnotationLogOut"])
    types["SocialGraphApiProtoDailyRecurrenceIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SocialGraphApiProtoDailyRecurrenceIn"])
    types["SocialGraphApiProtoDailyRecurrenceOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SocialGraphApiProtoDailyRecurrenceOut"])
    types["AssistantApiSettingsLabeledDowntimeScheduleIn"] = t.struct(
        {
            "displayName": t.string().optional(),
            "schedule": t.proxy(renames["AssistantApiSettingsDowntimeScheduleIn"]),
        }
    ).named(renames["AssistantApiSettingsLabeledDowntimeScheduleIn"])
    types["AssistantApiSettingsLabeledDowntimeScheduleOut"] = t.struct(
        {
            "displayName": t.string().optional(),
            "schedule": t.proxy(renames["AssistantApiSettingsDowntimeScheduleOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsLabeledDowntimeScheduleOut"])
    types["GoogleCloudContentwarehouseV1FloatArrayIn"] = t.struct(
        {"values": t.array(t.number()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1FloatArrayIn"])
    types["GoogleCloudContentwarehouseV1FloatArrayOut"] = t.struct(
        {
            "values": t.array(t.number()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FloatArrayOut"])
    types["QualitySitemapTargetIn"] = t.struct(
        {
            "snippetResponse": t.proxy(renames["GenericSnippetResponseIn"]).optional(),
            "url": t.string(),
            "twoLevelScore": t.number(),
            "scoringSignals": t.proxy(renames["QualitySitemapScoringSignalsIn"]),
            "title": t.string(),
            "isGoodForMobile": t.boolean(),
            "isMobileN1dup": t.boolean(),
            "sourceAnchor": t.boolean(),
            "score": t.number(),
            "sectionTexts": t.array(t.string()).optional(),
            "languages": t.array(t.integer()).optional(),
            "DEPRECATEDSnippet": t.array(t.string()),
            "salientImage": t.proxy(
                renames["WWWResultInfoSubImageDocInfoIn"]
            ).optional(),
        }
    ).named(renames["QualitySitemapTargetIn"])
    types["QualitySitemapTargetOut"] = t.struct(
        {
            "snippetResponse": t.proxy(renames["GenericSnippetResponseOut"]).optional(),
            "url": t.string(),
            "twoLevelScore": t.number(),
            "scoringSignals": t.proxy(renames["QualitySitemapScoringSignalsOut"]),
            "title": t.string(),
            "isGoodForMobile": t.boolean(),
            "isMobileN1dup": t.boolean(),
            "sourceAnchor": t.boolean(),
            "score": t.number(),
            "sectionTexts": t.array(t.string()).optional(),
            "languages": t.array(t.integer()).optional(),
            "DEPRECATEDSnippet": t.array(t.string()),
            "salientImage": t.proxy(
                renames["WWWResultInfoSubImageDocInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapTargetOut"])
    types["KnowledgeGraphTripleProvenanceIn"] = t.struct(
        {
            "sourceDocId": t.string().optional(),
            "restrictions": t.array(t.string()),
            "accessRequired": t.integer().optional(),
            "sourceUrl": t.string().optional(),
            "policyMetadata": t.proxy(
                renames["StorageGraphBfgPolicyMetadataIn"]
            ).optional(),
            "spiiCertification": t.proxy(
                renames["StorageGraphBfgSpiiCertificationIn"]
            ).optional(),
            "sourceCategory": t.string().optional(),
            "lgMetadata": t.proxy(
                renames["StorageGraphBfgLivegraphProvenanceMetadataIn"]
            ).optional(),
            "isSupportingData": t.boolean().optional(),
            "creator": t.string().optional(),
            "process": t.string().optional(),
            "datasetMid": t.string().optional(),
        }
    ).named(renames["KnowledgeGraphTripleProvenanceIn"])
    types["KnowledgeGraphTripleProvenanceOut"] = t.struct(
        {
            "sourceDocId": t.string().optional(),
            "restrictions": t.array(t.string()),
            "accessRequired": t.integer().optional(),
            "sourceUrl": t.string().optional(),
            "policyMetadata": t.proxy(
                renames["StorageGraphBfgPolicyMetadataOut"]
            ).optional(),
            "spiiCertification": t.proxy(
                renames["StorageGraphBfgSpiiCertificationOut"]
            ).optional(),
            "sourceCategory": t.string().optional(),
            "lgMetadata": t.proxy(
                renames["StorageGraphBfgLivegraphProvenanceMetadataOut"]
            ).optional(),
            "isSupportingData": t.boolean().optional(),
            "creator": t.string().optional(),
            "process": t.string().optional(),
            "datasetMid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphTripleProvenanceOut"])
    types["VideoFileColorInfoIn"] = t.struct(
        {
            "matrixCoefficients": t.string(),
            "transferCharacteristics": t.string(),
            "range": t.string(),
            "primaries": t.string(),
        }
    ).named(renames["VideoFileColorInfoIn"])
    types["VideoFileColorInfoOut"] = t.struct(
        {
            "matrixCoefficients": t.string(),
            "transferCharacteristics": t.string(),
            "range": t.string(),
            "primaries": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoFileColorInfoOut"])
    types["RepositoryWebrefExtendedEntityNameScoreIn"] = t.struct(
        {
            "region": t.string().optional(),
            "scoreRatio": t.number().optional(),
            "domain": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefExtendedEntityNameScoreIn"])
    types["RepositoryWebrefExtendedEntityNameScoreOut"] = t.struct(
        {
            "region": t.string().optional(),
            "scoreRatio": t.number().optional(),
            "domain": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefExtendedEntityNameScoreOut"])
    types["YoutubeDiscoveryLegosLegosSemanticRelationshipIn"] = t.struct(
        {
            "confidence": t.number().optional(),
            "topicalityScore": t.number().optional(),
            "contexts": t.array(
                t.proxy(
                    renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextIn"]
                )
            ),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosSemanticRelationshipIn"])
    types["YoutubeDiscoveryLegosLegosSemanticRelationshipOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "topicalityScore": t.number().optional(),
            "contexts": t.array(
                t.proxy(
                    renames["YoutubeDiscoveryLegosLegosSemanticRelationshipContextOut"]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosSemanticRelationshipOut"])
    types["SecurityCredentialsPostiniUserProtoIn"] = t.struct(
        {"postiniUserId": t.string()}
    ).named(renames["SecurityCredentialsPostiniUserProtoIn"])
    types["SecurityCredentialsPostiniUserProtoOut"] = t.struct(
        {
            "postiniUserId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsPostiniUserProtoOut"])
    types["SocialGraphApiProtoPhotoOverlayIn"] = t.struct(
        {
            "relativeScale": t.proxy(
                renames["SocialGraphApiProtoRelativeScaleIn"]
            ).optional(),
            "relativePosition": t.proxy(
                renames["SocialGraphApiProtoRelativePositionIn"]
            ).optional(),
        }
    ).named(renames["SocialGraphApiProtoPhotoOverlayIn"])
    types["SocialGraphApiProtoPhotoOverlayOut"] = t.struct(
        {
            "relativeScale": t.proxy(
                renames["SocialGraphApiProtoRelativeScaleOut"]
            ).optional(),
            "relativePosition": t.proxy(
                renames["SocialGraphApiProtoRelativePositionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPhotoOverlayOut"])
    types["QualitySitemapSubresultListIn"] = t.struct(
        {"subresult": t.array(t.proxy(renames["QualitySitemapSubresultIn"]))}
    ).named(renames["QualitySitemapSubresultListIn"])
    types["QualitySitemapSubresultListOut"] = t.struct(
        {
            "subresult": t.array(t.proxy(renames["QualitySitemapSubresultOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapSubresultListOut"])
    types["RepositoryWebrefRangeMetadataIn"] = t.struct(
        {"beginOffset": t.integer().optional(), "tokenCount": t.integer().optional()}
    ).named(renames["RepositoryWebrefRangeMetadataIn"])
    types["RepositoryWebrefRangeMetadataOut"] = t.struct(
        {
            "beginOffset": t.integer().optional(),
            "tokenCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRangeMetadataOut"])
    types["GoogleCloudContentwarehouseV1MapTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1MapTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1MapTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1MapTypeOptionsOut"])
    types["AssistantApiSettingsAppCapabilitiesIn"] = t.struct(
        {
            "supportsPaymentsSettingsUpdate": t.boolean().optional(),
            "reissueQueryAfterMusicSetup": t.boolean().optional(),
            "carSettingsCapabilities": t.proxy(
                renames["AssistantApiCarSettingsCapabilitiesIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiSettingsAppCapabilitiesIn"])
    types["AssistantApiSettingsAppCapabilitiesOut"] = t.struct(
        {
            "supportsPaymentsSettingsUpdate": t.boolean().optional(),
            "reissueQueryAfterMusicSetup": t.boolean().optional(),
            "carSettingsCapabilities": t.proxy(
                renames["AssistantApiCarSettingsCapabilitiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsAppCapabilitiesOut"])
    types["GoodocSemanticLabelSnippetFilterIn"] = t.struct(
        {"badwordFraction": t.number(), "windowSize": t.integer()}
    ).named(renames["GoodocSemanticLabelSnippetFilterIn"])
    types["GoodocSemanticLabelSnippetFilterOut"] = t.struct(
        {
            "badwordFraction": t.number(),
            "windowSize": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelSnippetFilterOut"])
    types["OcrPhotoCurveIn"] = t.struct(
        {"points": t.array(t.proxy(renames["OcrPhotoCurvePointIn"])).optional()}
    ).named(renames["OcrPhotoCurveIn"])
    types["OcrPhotoCurveOut"] = t.struct(
        {
            "points": t.array(t.proxy(renames["OcrPhotoCurvePointOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OcrPhotoCurveOut"])
    types["PerDocDataIn"] = t.struct(
        {
            "ScaledExptIndyRank": t.integer().optional(),
            "shingleInfo": t.proxy(renames["ShingleInfoPerDocDataIn"]),
            "bodyWordsToTokensRatioBegin": t.number().optional(),
            "scienceHoldingsIds": t.array(t.string()).optional(),
            "travelGoodSitesInfo": t.proxy(
                renames["QualityTravelGoodSitesDataIn"]
            ).optional(),
            "hostAge": t.integer().optional(),
            "origin": t.integer(),
            "noimageframeoverlayreason": t.integer().optional(),
            "commercialScore": t.number().optional(),
            "s3AudioLanguage": t.proxy(
                renames["S3AudioLanguageS3AudioLanguageIn"]
            ).optional(),
            "PremiumData": t.proxy(renames["PremiumPerDocDataIn"]).optional(),
            "WhirlpoolDiscount": t.number(),
            "ymylNewsScore": t.integer().optional(),
            "numUrls": t.integer().optional(),
            "toolbarPagerank": t.integer().optional(),
            "pageregions": t.string().optional(),
            "extraData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "KeywordStuffingScore": t.integer().optional(),
            "ScaledIndyRank": t.integer().optional(),
            "nsrDataProto": t.proxy(renames["QualityNsrNsrDataIn"]).optional(),
            "onsiteProminence": t.integer().optional(),
            "videoLanguage": t.proxy(
                renames["QualityVidyaVideoLanguageVideoLanguageIn"]
            ).optional(),
            "semanticDateConfidence": t.integer().optional(),
            "nsrIsElectionAuthority": t.boolean().optional(),
            "freshnessEncodedSignals": t.string().optional(),
            "v2KnexAnnotation": t.proxy(
                renames["QualitySherlockKnexAnnotationIn"]
            ).optional(),
            "homePageInfo": t.integer(),
            "spambrainTotalDocSpamScore": t.number().optional(),
            "kaltixdata": t.proxy(renames["KaltixPerDocDataIn"]),
            "crawlPagerank": t.integer().optional(),
            "nsrSitechunk": t.string().optional(),
            "spambrainData": t.proxy(renames["SpamBrainDataIn"]).optional(),
            "spamtokensContentScore": t.number().optional(),
            "queriesForWhichOfficial": t.proxy(
                renames["OfficialPagesQuerySetIn"]
            ).optional(),
            "semanticDate": t.integer().optional(),
            "MobileData": t.proxy(renames["MobilePerDocDataIn"]).optional(),
            "datesInfo": t.string().optional(),
            "nsrIsCovidLocalAuthority": t.boolean().optional(),
            "pagerank2": t.number(),
            "spamCookbookAction": t.proxy(renames["SpamCookbookActionIn"]).optional(),
            "pagerank": t.number().optional(),
            "inNewsstand": t.boolean().optional(),
            "GibberishScore": t.integer().optional(),
            "saftLanguageInt": t.array(t.integer()).optional(),
            "SpamWordScore": t.integer().optional(),
            "videoCorpusDocid": t.string(),
            "webrefEntities": t.proxy(
                renames["RepositoryWebrefWebrefMustangAttachmentIn"]
            ).optional(),
            "eventsDate": t.array(t.string()).optional(),
            "homepagePagerankNs": t.integer().optional(),
            "semanticDateInfo": t.integer().optional(),
            "countryInfo": t.proxy(renames["CountryCountryAttachmentIn"]).optional(),
            "scaledSelectionTierRank": t.integer().optional(),
            "authorObfuscatedGaiaStr": t.array(t.string()),
            "TagPageScore": t.integer().optional(),
            "geodata": t.string().optional(),
            "launchAppInfo": t.proxy(
                renames["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataIn"]
            ).optional(),
            "compressedUrl": t.string().optional(),
            "freshboxArticleScores": t.integer().optional(),
            "scienceDoctype": t.integer().optional(),
            "BookCitationData": t.proxy(renames["BookCitationPerDocDataIn"]).optional(),
            "ScaledSpamScoreYoram": t.integer().optional(),
            "fringeQueryPrior": t.proxy(
                renames["QualityFringeFringeQueryPriorPerDocDataIn"]
            ).optional(),
            "liveResultsData": t.proxy(
                renames["WeboftrustLiveResultsDocAttachmentsIn"]
            ),
            "oceandata": t.proxy(renames["OceanPerDocDataIn"]).optional(),
            "videodata": t.proxy(renames["VideoPerDocDataIn"]),
            "lastSignificantUpdateInfo": t.string().optional(),
            "BlogData": t.proxy(renames["BlogPerDocDataIn"]),
            "ScaledExptIndyRank3": t.integer().optional(),
            "ScaledLinkAgeSpamScore": t.integer().optional(),
            "Event": t.array(t.proxy(renames["PerDocDebugEventIn"])).optional(),
            "fireflySiteSignal": t.proxy(
                renames["QualityCopiaFireflySiteSignalIn"]
            ).optional(),
            "trendspamScore": t.integer().optional(),
            "contentAttributions": t.proxy(renames["ContentAttributionsIn"]),
            "mediaOrPeopleEntities": t.proxy(
                renames["ImageQualitySensitiveMediaOrPeopleEntitiesIn"]
            ).optional(),
            "rosettaLanguages": t.array(t.string()).optional(),
            "tundraClusterId": t.integer().optional(),
            "servingTimeClusterIds": t.proxy(
                renames["IndexingDocjoinerServingTimeClusterIdsIn"]
            ).optional(),
            "appsLink": t.proxy(renames["QualityCalypsoAppsLinkIn"]).optional(),
            "urlAfterRedirectsFp": t.string().optional(),
            "bodyWordsToTokensRatioTotal": t.number(),
            "voltData": t.proxy(
                renames["IndexingMobileVoltVoltPerDocDataIn"]
            ).optional(),
            "brainloc": t.proxy(
                renames["QualityGeoBrainlocBrainlocAttachmentIn"]
            ).optional(),
            "ymylHealthScore": t.integer().optional(),
            "ToolBarData": t.proxy(renames["ToolBarPerDocDataIn"]),
            "webmirrorEcnFp": t.string(),
            "spamrank": t.integer().optional(),
            "DocLevelSpamScore": t.integer().optional(),
            "compressedQualitySignals": t.proxy(renames["CompressedQualitySignalsIn"]),
            "ScaledExptSpamScoreYoram": t.integer(),
            "pageTags": t.array(t.integer()),
            "QuarantineInfo": t.integer().optional(),
            "phildata": t.proxy(renames["PhilPerDocDataIn"]),
            "smearingMaxTotalOffdomainAnchors": t.integer(),
            "DEPRECATEDAuthorObfuscatedGaia": t.array(t.string()).optional(),
            "ScaledExptSpamScoreEric": t.integer(),
            "watchpageLanguageResult": t.proxy(
                renames["WatchpageLanguageWatchPageLanguageResultIn"]
            ).optional(),
            "urlPoisoningData": t.proxy(renames["UrlPoisoningDataIn"]).optional(),
            "desktopInterstitials": t.proxy(
                renames["IndexingMobileInterstitialsProtoDesktopInterstitialsIn"]
            ).optional(),
            "originalTitleHardTokenCount": t.integer().optional(),
            "biasingdata2": t.proxy(renames["BiasingPerDocData2In"]).optional(),
            "timeSensitivity": t.integer().optional(),
            "titleHardTokenCountWithoutStopwords": t.integer().optional(),
            "topPetacatWeight": t.number(),
            "hostNsr": t.integer().optional(),
            "imagedata": t.proxy(renames["ImagePerDocDataIn"]),
            "knexAnnotation": t.proxy(
                renames["SocialPersonalizationKnexAnnotationIn"]
            ).optional(),
            "smartphoneData": t.proxy(renames["SmartphonePerDocDataIn"]).optional(),
            "ScaledSpamScoreEric": t.integer(),
            "socialgraphNodeNameFp": t.string().optional(),
            "rsApplication": t.proxy(
                renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationIn"]
            ).optional(),
            "crawlerIdProto": t.proxy(
                renames["LogsProtoIndexingCrawlerIdCrawlerIdProtoIn"]
            ).optional(),
            "asteroidBeltIntents": t.proxy(
                renames["QualityOrbitAsteroidBeltDocumentIntentScoresIn"]
            ).optional(),
            "IsAnchorBayesSpam": t.boolean().optional(),
            "spamMuppetSignals": t.proxy(
                renames["SpamMuppetjoinsMuppetSignalsIn"]
            ).optional(),
            "pagerank1": t.number(),
            "GroupsData": t.proxy(renames["GroupsPerDocDataIn"]).optional(),
            "biasingdata": t.proxy(renames["BiasingPerDocDataIn"]),
            "nsrIsVideoFocusedSite": t.boolean().optional(),
            "ScaledExptIndyRank2": t.integer().optional(),
            "crowdingdata": t.proxy(renames["CrowdingPerDocDataIn"]),
            "DEPRECATEDQuarantineWhitelist": t.boolean(),
            "isHotdoc": t.boolean().optional(),
            "topPetacatTaxId": t.integer().optional(),
            "domainAge": t.integer().optional(),
            "uacSpamScore": t.integer().optional(),
            "productSitesInfo": t.proxy(
                renames["QualityProductProductSiteDataIn"]
            ).optional(),
            "OriginalContentScore": t.integer().optional(),
            "pagerank0": t.number(),
            "lastSignificantUpdate": t.string().optional(),
            "languages": t.array(t.integer()).optional(),
            "localizedCluster": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterIn"]
            ).optional(),
        }
    ).named(renames["PerDocDataIn"])
    types["PerDocDataOut"] = t.struct(
        {
            "ScaledExptIndyRank": t.integer().optional(),
            "shingleInfo": t.proxy(renames["ShingleInfoPerDocDataOut"]),
            "bodyWordsToTokensRatioBegin": t.number().optional(),
            "scienceHoldingsIds": t.array(t.string()).optional(),
            "travelGoodSitesInfo": t.proxy(
                renames["QualityTravelGoodSitesDataOut"]
            ).optional(),
            "hostAge": t.integer().optional(),
            "origin": t.integer(),
            "noimageframeoverlayreason": t.integer().optional(),
            "commercialScore": t.number().optional(),
            "s3AudioLanguage": t.proxy(
                renames["S3AudioLanguageS3AudioLanguageOut"]
            ).optional(),
            "PremiumData": t.proxy(renames["PremiumPerDocDataOut"]).optional(),
            "WhirlpoolDiscount": t.number(),
            "ymylNewsScore": t.integer().optional(),
            "numUrls": t.integer().optional(),
            "toolbarPagerank": t.integer().optional(),
            "pageregions": t.string().optional(),
            "extraData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "KeywordStuffingScore": t.integer().optional(),
            "ScaledIndyRank": t.integer().optional(),
            "nsrDataProto": t.proxy(renames["QualityNsrNsrDataOut"]).optional(),
            "onsiteProminence": t.integer().optional(),
            "videoLanguage": t.proxy(
                renames["QualityVidyaVideoLanguageVideoLanguageOut"]
            ).optional(),
            "semanticDateConfidence": t.integer().optional(),
            "nsrIsElectionAuthority": t.boolean().optional(),
            "freshnessEncodedSignals": t.string().optional(),
            "v2KnexAnnotation": t.proxy(
                renames["QualitySherlockKnexAnnotationOut"]
            ).optional(),
            "homePageInfo": t.integer(),
            "spambrainTotalDocSpamScore": t.number().optional(),
            "kaltixdata": t.proxy(renames["KaltixPerDocDataOut"]),
            "crawlPagerank": t.integer().optional(),
            "nsrSitechunk": t.string().optional(),
            "spambrainData": t.proxy(renames["SpamBrainDataOut"]).optional(),
            "spamtokensContentScore": t.number().optional(),
            "queriesForWhichOfficial": t.proxy(
                renames["OfficialPagesQuerySetOut"]
            ).optional(),
            "semanticDate": t.integer().optional(),
            "MobileData": t.proxy(renames["MobilePerDocDataOut"]).optional(),
            "datesInfo": t.string().optional(),
            "nsrIsCovidLocalAuthority": t.boolean().optional(),
            "pagerank2": t.number(),
            "spamCookbookAction": t.proxy(renames["SpamCookbookActionOut"]).optional(),
            "pagerank": t.number().optional(),
            "inNewsstand": t.boolean().optional(),
            "GibberishScore": t.integer().optional(),
            "saftLanguageInt": t.array(t.integer()).optional(),
            "SpamWordScore": t.integer().optional(),
            "videoCorpusDocid": t.string(),
            "webrefEntities": t.proxy(
                renames["RepositoryWebrefWebrefMustangAttachmentOut"]
            ).optional(),
            "eventsDate": t.array(t.string()).optional(),
            "homepagePagerankNs": t.integer().optional(),
            "semanticDateInfo": t.integer().optional(),
            "countryInfo": t.proxy(renames["CountryCountryAttachmentOut"]).optional(),
            "scaledSelectionTierRank": t.integer().optional(),
            "authorObfuscatedGaiaStr": t.array(t.string()),
            "TagPageScore": t.integer().optional(),
            "geodata": t.string().optional(),
            "launchAppInfo": t.proxy(
                renames["QualityRichsnippetsAppsProtosLaunchAppInfoPerDocDataOut"]
            ).optional(),
            "compressedUrl": t.string().optional(),
            "freshboxArticleScores": t.integer().optional(),
            "scienceDoctype": t.integer().optional(),
            "BookCitationData": t.proxy(
                renames["BookCitationPerDocDataOut"]
            ).optional(),
            "ScaledSpamScoreYoram": t.integer().optional(),
            "fringeQueryPrior": t.proxy(
                renames["QualityFringeFringeQueryPriorPerDocDataOut"]
            ).optional(),
            "liveResultsData": t.proxy(
                renames["WeboftrustLiveResultsDocAttachmentsOut"]
            ),
            "oceandata": t.proxy(renames["OceanPerDocDataOut"]).optional(),
            "videodata": t.proxy(renames["VideoPerDocDataOut"]),
            "lastSignificantUpdateInfo": t.string().optional(),
            "BlogData": t.proxy(renames["BlogPerDocDataOut"]),
            "ScaledExptIndyRank3": t.integer().optional(),
            "ScaledLinkAgeSpamScore": t.integer().optional(),
            "Event": t.array(t.proxy(renames["PerDocDebugEventOut"])).optional(),
            "fireflySiteSignal": t.proxy(
                renames["QualityCopiaFireflySiteSignalOut"]
            ).optional(),
            "trendspamScore": t.integer().optional(),
            "contentAttributions": t.proxy(renames["ContentAttributionsOut"]),
            "mediaOrPeopleEntities": t.proxy(
                renames["ImageQualitySensitiveMediaOrPeopleEntitiesOut"]
            ).optional(),
            "rosettaLanguages": t.array(t.string()).optional(),
            "tundraClusterId": t.integer().optional(),
            "servingTimeClusterIds": t.proxy(
                renames["IndexingDocjoinerServingTimeClusterIdsOut"]
            ).optional(),
            "appsLink": t.proxy(renames["QualityCalypsoAppsLinkOut"]).optional(),
            "urlAfterRedirectsFp": t.string().optional(),
            "bodyWordsToTokensRatioTotal": t.number(),
            "voltData": t.proxy(
                renames["IndexingMobileVoltVoltPerDocDataOut"]
            ).optional(),
            "brainloc": t.proxy(
                renames["QualityGeoBrainlocBrainlocAttachmentOut"]
            ).optional(),
            "ymylHealthScore": t.integer().optional(),
            "ToolBarData": t.proxy(renames["ToolBarPerDocDataOut"]),
            "webmirrorEcnFp": t.string(),
            "spamrank": t.integer().optional(),
            "DocLevelSpamScore": t.integer().optional(),
            "compressedQualitySignals": t.proxy(renames["CompressedQualitySignalsOut"]),
            "ScaledExptSpamScoreYoram": t.integer(),
            "pageTags": t.array(t.integer()),
            "QuarantineInfo": t.integer().optional(),
            "phildata": t.proxy(renames["PhilPerDocDataOut"]),
            "smearingMaxTotalOffdomainAnchors": t.integer(),
            "DEPRECATEDAuthorObfuscatedGaia": t.array(t.string()).optional(),
            "ScaledExptSpamScoreEric": t.integer(),
            "watchpageLanguageResult": t.proxy(
                renames["WatchpageLanguageWatchPageLanguageResultOut"]
            ).optional(),
            "urlPoisoningData": t.proxy(renames["UrlPoisoningDataOut"]).optional(),
            "desktopInterstitials": t.proxy(
                renames["IndexingMobileInterstitialsProtoDesktopInterstitialsOut"]
            ).optional(),
            "originalTitleHardTokenCount": t.integer().optional(),
            "biasingdata2": t.proxy(renames["BiasingPerDocData2Out"]).optional(),
            "timeSensitivity": t.integer().optional(),
            "titleHardTokenCountWithoutStopwords": t.integer().optional(),
            "topPetacatWeight": t.number(),
            "hostNsr": t.integer().optional(),
            "imagedata": t.proxy(renames["ImagePerDocDataOut"]),
            "knexAnnotation": t.proxy(
                renames["SocialPersonalizationKnexAnnotationOut"]
            ).optional(),
            "smartphoneData": t.proxy(renames["SmartphonePerDocDataOut"]).optional(),
            "ScaledSpamScoreEric": t.integer(),
            "socialgraphNodeNameFp": t.string().optional(),
            "rsApplication": t.proxy(
                renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationOut"]
            ).optional(),
            "crawlerIdProto": t.proxy(
                renames["LogsProtoIndexingCrawlerIdCrawlerIdProtoOut"]
            ).optional(),
            "asteroidBeltIntents": t.proxy(
                renames["QualityOrbitAsteroidBeltDocumentIntentScoresOut"]
            ).optional(),
            "IsAnchorBayesSpam": t.boolean().optional(),
            "spamMuppetSignals": t.proxy(
                renames["SpamMuppetjoinsMuppetSignalsOut"]
            ).optional(),
            "pagerank1": t.number(),
            "GroupsData": t.proxy(renames["GroupsPerDocDataOut"]).optional(),
            "biasingdata": t.proxy(renames["BiasingPerDocDataOut"]),
            "nsrIsVideoFocusedSite": t.boolean().optional(),
            "ScaledExptIndyRank2": t.integer().optional(),
            "crowdingdata": t.proxy(renames["CrowdingPerDocDataOut"]),
            "DEPRECATEDQuarantineWhitelist": t.boolean(),
            "isHotdoc": t.boolean().optional(),
            "topPetacatTaxId": t.integer().optional(),
            "domainAge": t.integer().optional(),
            "uacSpamScore": t.integer().optional(),
            "productSitesInfo": t.proxy(
                renames["QualityProductProductSiteDataOut"]
            ).optional(),
            "OriginalContentScore": t.integer().optional(),
            "pagerank0": t.number(),
            "lastSignificantUpdate": t.string().optional(),
            "languages": t.array(t.integer()).optional(),
            "localizedCluster": t.proxy(
                renames["IndexingDupsLocalizedLocalizedClusterOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PerDocDataOut"])
    types["AssistantDevicesPlatformProtoOptionValueSpecIn"] = t.struct(
        {"values": t.array(t.string())}
    ).named(renames["AssistantDevicesPlatformProtoOptionValueSpecIn"])
    types["AssistantDevicesPlatformProtoOptionValueSpecOut"] = t.struct(
        {
            "values": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoOptionValueSpecOut"])
    types["GeostoreUnlimitedSpeedProtoIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GeostoreUnlimitedSpeedProtoIn"])
    types["GeostoreUnlimitedSpeedProtoOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GeostoreUnlimitedSpeedProtoOut"])
    types["RepositoryAnnotationsGeoTopicIn"] = t.struct(
        {
            "sumContainedPoiNormalizedScores": t.number().optional(),
            "denseCity": t.boolean().optional(),
            "lngE7": t.integer(),
            "locationName": t.string().optional(),
            "componentScores": t.array(
                t.proxy(renames["RepositoryAnnotationsGeoTopicalityScoreIn"])
            ).optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "oysterType": t.integer().optional(),
            "normalizedScore": t.number().optional(),
            "confidence": t.number().optional(),
            "address": t.proxy(renames["GeostoreAddressProtoIn"]).optional(),
            "establishmentType": t.integer().optional(),
            "latE7": t.integer().optional(),
        }
    ).named(renames["RepositoryAnnotationsGeoTopicIn"])
    types["RepositoryAnnotationsGeoTopicOut"] = t.struct(
        {
            "sumContainedPoiNormalizedScores": t.number().optional(),
            "denseCity": t.boolean().optional(),
            "lngE7": t.integer(),
            "locationName": t.string().optional(),
            "componentScores": t.array(
                t.proxy(renames["RepositoryAnnotationsGeoTopicalityScoreOut"])
            ).optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "oysterType": t.integer().optional(),
            "normalizedScore": t.number().optional(),
            "confidence": t.number().optional(),
            "address": t.proxy(renames["GeostoreAddressProtoOut"]).optional(),
            "establishmentType": t.integer().optional(),
            "latE7": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsGeoTopicOut"])
    types["GeostoreRankSignalProtoIn"] = t.struct(
        {
            "rank": t.number().optional(),
            "rawScalar": t.number().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "type": t.string(),
            "rawString": t.string().optional(),
        }
    ).named(renames["GeostoreRankSignalProtoIn"])
    types["GeostoreRankSignalProtoOut"] = t.struct(
        {
            "rank": t.number().optional(),
            "rawScalar": t.number().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "type": t.string(),
            "rawString": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRankSignalProtoOut"])
    types["IndexingEmbeddedContentRenderRequestConfigConfigParamsIn"] = t.struct(
        {"virtualTime": t.number()}
    ).named(renames["IndexingEmbeddedContentRenderRequestConfigConfigParamsIn"])
    types["IndexingEmbeddedContentRenderRequestConfigConfigParamsOut"] = t.struct(
        {
            "virtualTime": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentRenderRequestConfigConfigParamsOut"])
    types["VideoContentSearchShoppingOpinionsAnchorFeaturesIn"] = t.struct(
        {
            "anchorOrAspectFirstMentionPos": t.integer().optional(),
            "luminAspectWordsMentions": t.integer().optional(),
            "snippetSubSegment": t.string().optional(),
            "mumScore": t.number().optional(),
            "anchorLabel": t.string().optional(),
            "isPro": t.boolean().optional(),
            "opinionsDolphinDescriptivenessScore": t.number().optional(),
            "luminAspect": t.string().optional(),
            "anchorLabelWordsMentions": t.integer().optional(),
            "luminAspectFirstMentionPos": t.integer().optional(),
            "productNameFromTitle": t.string().optional(),
            "mumProductAspect": t.string().optional(),
            "anchorLabelSentiment": t.number().optional(),
            "snippetQaScore": t.number().optional(),
            "conScore": t.number().optional(),
            "grampusScore": t.number().optional(),
            "snippet": t.string().optional(),
            "anchorLabelFirstMentionPos": t.integer().optional(),
            "anchorOrAspectWordsMentions": t.integer().optional(),
            "isProConWhenExtractedFromMum": t.boolean().optional(),
            "question": t.string().optional(),
            "snippetWordCount": t.integer().optional(),
            "snippetSubSegmentSentimentScore": t.number().optional(),
            "snippetSubSegmentQaScore": t.number().optional(),
            "luminScore": t.number().optional(),
            "isCon": t.boolean().optional(),
            "opinionsDolphinUsefulnessScore": t.number(),
            "aspect": t.proxy(renames["VideoContentSearchAspectIn"]).optional(),
            "proScore": t.number().optional(),
            "snippetSentimentScore": t.number().optional(),
            "snippetSubSegmentWordCount": t.integer().optional(),
            "asrForProConExtraction": t.string().optional(),
            "babelSimilarityScore": t.number().optional(),
        }
    ).named(renames["VideoContentSearchShoppingOpinionsAnchorFeaturesIn"])
    types["VideoContentSearchShoppingOpinionsAnchorFeaturesOut"] = t.struct(
        {
            "anchorOrAspectFirstMentionPos": t.integer().optional(),
            "luminAspectWordsMentions": t.integer().optional(),
            "snippetSubSegment": t.string().optional(),
            "mumScore": t.number().optional(),
            "anchorLabel": t.string().optional(),
            "isPro": t.boolean().optional(),
            "opinionsDolphinDescriptivenessScore": t.number().optional(),
            "luminAspect": t.string().optional(),
            "anchorLabelWordsMentions": t.integer().optional(),
            "luminAspectFirstMentionPos": t.integer().optional(),
            "productNameFromTitle": t.string().optional(),
            "mumProductAspect": t.string().optional(),
            "anchorLabelSentiment": t.number().optional(),
            "snippetQaScore": t.number().optional(),
            "conScore": t.number().optional(),
            "grampusScore": t.number().optional(),
            "snippet": t.string().optional(),
            "anchorLabelFirstMentionPos": t.integer().optional(),
            "anchorOrAspectWordsMentions": t.integer().optional(),
            "isProConWhenExtractedFromMum": t.boolean().optional(),
            "question": t.string().optional(),
            "snippetWordCount": t.integer().optional(),
            "snippetSubSegmentSentimentScore": t.number().optional(),
            "snippetSubSegmentQaScore": t.number().optional(),
            "luminScore": t.number().optional(),
            "isCon": t.boolean().optional(),
            "opinionsDolphinUsefulnessScore": t.number(),
            "aspect": t.proxy(renames["VideoContentSearchAspectOut"]).optional(),
            "proScore": t.number().optional(),
            "snippetSentimentScore": t.number().optional(),
            "snippetSubSegmentWordCount": t.integer().optional(),
            "asrForProConExtraction": t.string().optional(),
            "babelSimilarityScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchShoppingOpinionsAnchorFeaturesOut"])
    types["NlpSemanticParsingModelsMediaPaidOfferDetailIn"] = t.struct(
        {
            "paidOfferType": t.string().optional(),
            "cost": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaCostIn"])
            ).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPaidOfferDetailIn"])
    types["NlpSemanticParsingModelsMediaPaidOfferDetailOut"] = t.struct(
        {
            "paidOfferType": t.string().optional(),
            "cost": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaCostOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaPaidOfferDetailOut"])
    types["ResearchScamNearestNeighborsIn"] = t.struct(
        {
            "metadata": t.string().optional(),
            "docid": t.string().optional(),
            "neighborSelectionOverride": t.proxy(
                renames["ResearchScamNeighborSelectionOverrideIn"]
            ).optional(),
            "retrievedVersion": t.string().optional(),
            "query": t.proxy(renames["ResearchScamGenericFeatureVectorIn"]).optional(),
            "neighbor": t.array(
                t.proxy(renames["ResearchScamNearestNeighborsNeighborIn"])
            ).optional(),
        }
    ).named(renames["ResearchScamNearestNeighborsIn"])
    types["ResearchScamNearestNeighborsOut"] = t.struct(
        {
            "metadata": t.string().optional(),
            "docid": t.string().optional(),
            "neighborSelectionOverride": t.proxy(
                renames["ResearchScamNeighborSelectionOverrideOut"]
            ).optional(),
            "retrievedVersion": t.string().optional(),
            "query": t.proxy(renames["ResearchScamGenericFeatureVectorOut"]).optional(),
            "neighbor": t.array(
                t.proxy(renames["ResearchScamNearestNeighborsNeighborOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamNearestNeighborsOut"])
    types["AssistantDevicesPlatformProtoUnderstandingConfigIn"] = t.struct(
        {"nluLevel": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoUnderstandingConfigIn"])
    types["AssistantDevicesPlatformProtoUnderstandingConfigOut"] = t.struct(
        {
            "nluLevel": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoUnderstandingConfigOut"])
    types["YoutubeDiscoveryLegosLegosEntityIn"] = t.struct(
        {"kgId": t.string().optional(), "debugName": t.string().optional()}
    ).named(renames["YoutubeDiscoveryLegosLegosEntityIn"])
    types["YoutubeDiscoveryLegosLegosEntityOut"] = t.struct(
        {
            "kgId": t.string().optional(),
            "debugName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDiscoveryLegosLegosEntityOut"])
    types["YoutubeDistillerBlarneyStoneScoresIn"] = t.struct(
        {
            "mildHateHarassV2Score": t.number(),
            "modelScores": t.array(
                t.proxy(renames["YoutubeDistillerModelScoreIn"])
            ).optional(),
            "mildHateHarassV1Score": t.number(),
            "severeHateHarassV1Score": t.number(),
            "familySafeV1Score": t.number(),
        }
    ).named(renames["YoutubeDistillerBlarneyStoneScoresIn"])
    types["YoutubeDistillerBlarneyStoneScoresOut"] = t.struct(
        {
            "mildHateHarassV2Score": t.number(),
            "modelScores": t.array(
                t.proxy(renames["YoutubeDistillerModelScoreOut"])
            ).optional(),
            "mildHateHarassV1Score": t.number(),
            "severeHateHarassV1Score": t.number(),
            "familySafeV1Score": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDistillerBlarneyStoneScoresOut"])
    types["NlpSemanticParsingModelsShoppingAssistantBrandPhraseIn"] = t.struct(
        {"rawText": t.string(), "mid": t.string()}
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantBrandPhraseIn"])
    types["NlpSemanticParsingModelsShoppingAssistantBrandPhraseOut"] = t.struct(
        {
            "rawText": t.string(),
            "mid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantBrandPhraseOut"])
    types["RepositoryWebrefCompactFlatPropertyValueIn"] = t.struct(
        {
            "propertyName": t.string().optional(),
            "value": t.array(t.proxy(renames["RepositoryWebrefCompactKgValueIn"])),
            "predicateEncodedMid": t.array(t.string()),
        }
    ).named(renames["RepositoryWebrefCompactFlatPropertyValueIn"])
    types["RepositoryWebrefCompactFlatPropertyValueOut"] = t.struct(
        {
            "propertyName": t.string().optional(),
            "value": t.array(t.proxy(renames["RepositoryWebrefCompactKgValueOut"])),
            "predicateEncodedMid": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefCompactFlatPropertyValueOut"])
    types["VideoContentSearchCaptionEntityAnchorSetFeaturesIn"] = t.struct(
        {
            "hypernymSalience": t.number().optional(),
            "salience": t.number().optional(),
            "mentionSalience": t.number().optional(),
            "clusterSize": t.integer().optional(),
            "aggregateScore": t.number().optional(),
            "hypernym": t.string().optional(),
            "topHypernym": t.array(t.string()).optional(),
            "entityMentionInDescriptionCount": t.boolean().optional(),
            "entitiesInWebrefEntities": t.integer().optional(),
            "totalMentions": t.integer().optional(),
            "medianMentions": t.integer().optional(),
            "groupCohesion": t.number().optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityAnchorSetFeaturesIn"])
    types["VideoContentSearchCaptionEntityAnchorSetFeaturesOut"] = t.struct(
        {
            "hypernymSalience": t.number().optional(),
            "salience": t.number().optional(),
            "mentionSalience": t.number().optional(),
            "clusterSize": t.integer().optional(),
            "aggregateScore": t.number().optional(),
            "hypernym": t.string().optional(),
            "topHypernym": t.array(t.string()).optional(),
            "entityMentionInDescriptionCount": t.boolean().optional(),
            "entitiesInWebrefEntities": t.integer().optional(),
            "totalMentions": t.integer().optional(),
            "medianMentions": t.integer().optional(),
            "groupCohesion": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityAnchorSetFeaturesOut"])
    types["PhotosVisionObjectrecQuantizedFeatureVectorIn"] = t.struct(
        {"dataFactor": t.number(), "data": t.string()}
    ).named(renames["PhotosVisionObjectrecQuantizedFeatureVectorIn"])
    types["PhotosVisionObjectrecQuantizedFeatureVectorOut"] = t.struct(
        {
            "dataFactor": t.number(),
            "data": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionObjectrecQuantizedFeatureVectorOut"])
    types["AssistantGroundingRankerPodcastGroundingProviderFeaturesIn"] = t.struct(
        {
            "scubedTstarScore": t.number().optional(),
            "scubedNg3ModelScore": t.number().optional(),
            "isExclusive": t.boolean().optional(),
        }
    ).named(renames["AssistantGroundingRankerPodcastGroundingProviderFeaturesIn"])
    types["AssistantGroundingRankerPodcastGroundingProviderFeaturesOut"] = t.struct(
        {
            "scubedTstarScore": t.number().optional(),
            "scubedNg3ModelScore": t.number().optional(),
            "isExclusive": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerPodcastGroundingProviderFeaturesOut"])
    types["AssistantApiAppCapabilitiesIn"] = t.struct(
        {
            "supportsScreenlessInitiation": t.boolean().optional(),
            "searchableOnDevice": t.boolean().optional(),
            "whitelistedForAnnotation": t.boolean().optional(),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderIn"]).optional(),
            "appIntegrationsSettings": t.proxy(
                renames["AssistantApiAppIntegrationsSettingsIn"]
            ).optional(),
            "disabledSystemApp": t.boolean().optional(),
            "routableToProviderCloud": t.boolean().optional(),
            "allowlistedForMediaFulfillment": t.boolean().optional(),
            "searchableOnServer": t.boolean().optional(),
        }
    ).named(renames["AssistantApiAppCapabilitiesIn"])
    types["AssistantApiAppCapabilitiesOut"] = t.struct(
        {
            "supportsScreenlessInitiation": t.boolean().optional(),
            "searchableOnDevice": t.boolean().optional(),
            "whitelistedForAnnotation": t.boolean().optional(),
            "provider": t.proxy(renames["AssistantApiCoreTypesProviderOut"]).optional(),
            "appIntegrationsSettings": t.proxy(
                renames["AssistantApiAppIntegrationsSettingsOut"]
            ).optional(),
            "disabledSystemApp": t.boolean().optional(),
            "routableToProviderCloud": t.boolean().optional(),
            "allowlistedForMediaFulfillment": t.boolean().optional(),
            "searchableOnServer": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAppCapabilitiesOut"])
    types["RichsnippetsPageMapIn"] = t.struct(
        {
            "DataObject": t.array(t.proxy(renames["RichsnippetsDataObjectIn"])),
            "ignoreDataObject": t.boolean().optional(),
            "templatetype": t.array(
                t.proxy(renames["RichsnippetsPageMapTemplateTypeIn"])
            ),
            "src": t.string(),
        }
    ).named(renames["RichsnippetsPageMapIn"])
    types["RichsnippetsPageMapOut"] = t.struct(
        {
            "DataObject": t.array(t.proxy(renames["RichsnippetsDataObjectOut"])),
            "ignoreDataObject": t.boolean().optional(),
            "templatetype": t.array(
                t.proxy(renames["RichsnippetsPageMapTemplateTypeOut"])
            ),
            "src": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RichsnippetsPageMapOut"])
    types["SdrPageAnchorsSitelinkWrapperIn"] = t.struct(
        {
            "abbreviatedHeadingText": t.string(),
            "headingEmbedding": t.proxy(renames["SdrEmbeddingIn"]),
            "normalizedHeadingText": t.string(),
            "abbrvEmbedding": t.proxy(renames["SdrEmbeddingIn"]),
            "passageText": t.string(),
            "passageEmbedding": t.proxy(renames["SdrEmbeddingIn"]),
        }
    ).named(renames["SdrPageAnchorsSitelinkWrapperIn"])
    types["SdrPageAnchorsSitelinkWrapperOut"] = t.struct(
        {
            "abbreviatedHeadingText": t.string(),
            "headingEmbedding": t.proxy(renames["SdrEmbeddingOut"]),
            "normalizedHeadingText": t.string(),
            "abbrvEmbedding": t.proxy(renames["SdrEmbeddingOut"]),
            "passageText": t.string(),
            "passageEmbedding": t.proxy(renames["SdrEmbeddingOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SdrPageAnchorsSitelinkWrapperOut"])
    types["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsIn"] = t.struct(
        {"incomingAnyCircleCount": t.string().optional(), "viewCount": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsOut"] = t.struct(
        {
            "incomingAnyCircleCount": t.string().optional(),
            "viewCount": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiUserVisibleStatsOut"])
    types["CountryProvinceGeotokenIn"] = t.struct({"geotoken": t.integer()}).named(
        renames["CountryProvinceGeotokenIn"]
    )
    types["CountryProvinceGeotokenOut"] = t.struct(
        {"geotoken": t.integer(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["CountryProvinceGeotokenOut"])
    types["VideoContentSearchVideoAnchorScoreInfoLabelTransformationIn"] = t.struct(
        {"sourceLabel": t.string().optional(), "description": t.string().optional()}
    ).named(renames["VideoContentSearchVideoAnchorScoreInfoLabelTransformationIn"])
    types["VideoContentSearchVideoAnchorScoreInfoLabelTransformationOut"] = t.struct(
        {
            "sourceLabel": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorScoreInfoLabelTransformationOut"])
    types["AttentionalEntitiesMentionPropertiesIn"] = t.struct(
        {
            "source": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceIn"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdIn"]).optional(),
            "surfaceForm": t.proxy(
                renames["AttentionalEntitiesSurfaceFormIn"]
            ).optional(),
            "eventId": t.proxy(renames["EventIdMessageIn"]).optional(),
            "role": t.proxy(renames["AttentionalEntitiesSemanticRoleIdIn"]).optional(),
            "timestamp": t.string().optional(),
            "spatialProperties": t.proxy(
                renames["AttentionalEntitiesSpatialPropertiesIn"]
            ).optional(),
            "factoidScore": t.number().optional(),
            "recency": t.string().optional(),
            "salience": t.string().optional(),
            "listEntryInfo": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesListEntryInfoIn"]
            ).optional(),
        }
    ).named(renames["AttentionalEntitiesMentionPropertiesIn"])
    types["AttentionalEntitiesMentionPropertiesOut"] = t.struct(
        {
            "source": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesSourceOut"]
            ).optional(),
            "deviceId": t.proxy(renames["AssistantApiCoreTypesDeviceIdOut"]).optional(),
            "surfaceForm": t.proxy(
                renames["AttentionalEntitiesSurfaceFormOut"]
            ).optional(),
            "eventId": t.proxy(renames["EventIdMessageOut"]).optional(),
            "role": t.proxy(renames["AttentionalEntitiesSemanticRoleIdOut"]).optional(),
            "timestamp": t.string().optional(),
            "spatialProperties": t.proxy(
                renames["AttentionalEntitiesSpatialPropertiesOut"]
            ).optional(),
            "factoidScore": t.number().optional(),
            "recency": t.string().optional(),
            "salience": t.string().optional(),
            "listEntryInfo": t.proxy(
                renames["AttentionalEntitiesMentionPropertiesListEntryInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttentionalEntitiesMentionPropertiesOut"])
    types["VideoContentSearchVideoAnchorScoreInfoIn"] = t.struct(
        {
            "multimodalTopicTrainingFeatures": t.proxy(
                renames["VideoContentSearchMultimodalTopicTrainingFeaturesIn"]
            ).optional(),
            "anchorCommonFeatureSet": t.proxy(
                renames["VideoContentSearchAnchorCommonFeatureSetIn"]
            ).optional(),
            "attachments": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "filtered": t.boolean().optional(),
            "ocrAnchorFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextFeatureIn"]
            ).optional(),
            "multimodalTopicFeatures": t.proxy(
                renames["VideoContentSearchMultimodalTopicFeaturesIn"]
            ).optional(),
            "textSimilarityFeatures": t.array(
                t.proxy(renames["VideoContentSearchTextSimilarityFeaturesIn"])
            ).optional(),
            "listTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchListTrainingDataAnchorFeaturesIn"]
            ).optional(),
            "labelLanguage": t.string().optional(),
            "instructionTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchInstructionTrainingDataAnchorFeaturesIn"]
            ).optional(),
            "thumbnailInfo": t.proxy(
                renames["VideoContentSearchAnchorThumbnailInfoIn"]
            ).optional(),
            "babelCheckpointPath": t.string().optional(),
            "opinionsAnchorFeatures": t.proxy(
                renames["VideoContentSearchShoppingOpinionsAnchorFeaturesIn"]
            ).optional(),
            "captionEntityAnchorFeatures": t.proxy(
                renames["VideoContentSearchCaptionEntityAnchorFeaturesIn"]
            ).optional(),
            "listAnchorFeatures": t.proxy(
                renames["VideoContentSearchListAnchorFeaturesIn"]
            ).optional(),
            "generativeFeatures": t.array(
                t.proxy(renames["VideoContentSearchGenerativePredictionFeaturesIn"])
            ).optional(),
            "instructionAnchorFeatures": t.proxy(
                renames["VideoContentSearchInstructionAnchorFeaturesIn"]
            ).optional(),
            "captionSpanAnchorFeatures": t.proxy(
                renames["VideoContentSearchCaptionSpanAnchorFeaturesIn"]
            ).optional(),
            "safeSearchClassifierOutput": t.proxy(
                renames["ClassifierPornQueryMultiLabelClassifierOutputIn"]
            ).optional(),
            "qnaAnchorFeatures": t.proxy(
                renames["VideoContentSearchQnaAnchorFeaturesIn"]
            ).optional(),
            "normalizedBabelEmbedding": t.array(t.number()).optional(),
            "labelTransformation": t.array(
                t.proxy(
                    renames[
                        "VideoContentSearchVideoAnchorScoreInfoLabelTransformationIn"
                    ]
                )
            ),
            "descriptionAnchorFeatures": t.proxy(
                renames["VideoContentSearchDescriptionAnchorFeaturesIn"]
            ).optional(),
            "filterReason": t.array(t.string()).optional(),
            "ratingScore": t.proxy(
                renames["VideoContentSearchVideoAnchorRatingScoreIn"]
            ).optional(),
            "ocrDescriptionTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesIn"]
            ).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorScoreInfoIn"])
    types["VideoContentSearchVideoAnchorScoreInfoOut"] = t.struct(
        {
            "multimodalTopicTrainingFeatures": t.proxy(
                renames["VideoContentSearchMultimodalTopicTrainingFeaturesOut"]
            ).optional(),
            "anchorCommonFeatureSet": t.proxy(
                renames["VideoContentSearchAnchorCommonFeatureSetOut"]
            ).optional(),
            "attachments": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "filtered": t.boolean().optional(),
            "ocrAnchorFeature": t.proxy(
                renames["VideoContentSearchOnScreenTextFeatureOut"]
            ).optional(),
            "multimodalTopicFeatures": t.proxy(
                renames["VideoContentSearchMultimodalTopicFeaturesOut"]
            ).optional(),
            "textSimilarityFeatures": t.array(
                t.proxy(renames["VideoContentSearchTextSimilarityFeaturesOut"])
            ).optional(),
            "listTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchListTrainingDataAnchorFeaturesOut"]
            ).optional(),
            "labelLanguage": t.string().optional(),
            "instructionTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchInstructionTrainingDataAnchorFeaturesOut"]
            ).optional(),
            "thumbnailInfo": t.proxy(
                renames["VideoContentSearchAnchorThumbnailInfoOut"]
            ).optional(),
            "babelCheckpointPath": t.string().optional(),
            "opinionsAnchorFeatures": t.proxy(
                renames["VideoContentSearchShoppingOpinionsAnchorFeaturesOut"]
            ).optional(),
            "captionEntityAnchorFeatures": t.proxy(
                renames["VideoContentSearchCaptionEntityAnchorFeaturesOut"]
            ).optional(),
            "listAnchorFeatures": t.proxy(
                renames["VideoContentSearchListAnchorFeaturesOut"]
            ).optional(),
            "generativeFeatures": t.array(
                t.proxy(renames["VideoContentSearchGenerativePredictionFeaturesOut"])
            ).optional(),
            "instructionAnchorFeatures": t.proxy(
                renames["VideoContentSearchInstructionAnchorFeaturesOut"]
            ).optional(),
            "captionSpanAnchorFeatures": t.proxy(
                renames["VideoContentSearchCaptionSpanAnchorFeaturesOut"]
            ).optional(),
            "safeSearchClassifierOutput": t.proxy(
                renames["ClassifierPornQueryMultiLabelClassifierOutputOut"]
            ).optional(),
            "qnaAnchorFeatures": t.proxy(
                renames["VideoContentSearchQnaAnchorFeaturesOut"]
            ).optional(),
            "normalizedBabelEmbedding": t.array(t.number()).optional(),
            "labelTransformation": t.array(
                t.proxy(
                    renames[
                        "VideoContentSearchVideoAnchorScoreInfoLabelTransformationOut"
                    ]
                )
            ),
            "descriptionAnchorFeatures": t.proxy(
                renames["VideoContentSearchDescriptionAnchorFeaturesOut"]
            ).optional(),
            "filterReason": t.array(t.string()).optional(),
            "ratingScore": t.proxy(
                renames["VideoContentSearchVideoAnchorRatingScoreOut"]
            ).optional(),
            "ocrDescriptionTrainingDataAnchorFeatures": t.proxy(
                renames["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVideoAnchorScoreInfoOut"])
    types["ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoIn"] = t.struct(
        {
            "entityCollectionType": t.array(t.string()),
            "description": t.string().optional(),
            "mid": t.string().optional(),
            "deprecatedEntityType": t.string().optional(),
            "kgCollection": t.array(t.string()).optional(),
        }
    ).named(renames["ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoIn"])
    types["ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoOut"] = t.struct(
        {
            "entityCollectionType": t.array(t.string()),
            "description": t.string().optional(),
            "mid": t.string().optional(),
            "deprecatedEntityType": t.string().optional(),
            "kgCollection": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfoOut"])
    types["NlpSemanticParsingDatetimeRelativeDateTimeIn"] = t.struct(
        {
            "metadata": t.string(),
            "fetched": t.proxy(
                renames["NlpSemanticParsingDatetimeFetchedRelativeDateTimeIn"]
            ),
            "shifted": t.proxy(
                renames["NlpSemanticParsingDatetimeShiftedRelativeDateTimeIn"]
            ),
            "modifier": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"])
    types["NlpSemanticParsingDatetimeRelativeDateTimeOut"] = t.struct(
        {
            "metadata": t.string(),
            "fetched": t.proxy(
                renames["NlpSemanticParsingDatetimeFetchedRelativeDateTimeOut"]
            ),
            "shifted": t.proxy(
                renames["NlpSemanticParsingDatetimeShiftedRelativeDateTimeOut"]
            ),
            "modifier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"])
    types["PersonalizationMapsAliasIconIn"] = t.struct(
        {
            "featureName": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "syntheticFeature": t.boolean().optional(),
            "nickname": t.string().optional(),
            "aliasId": t.proxy(renames["PersonalizationMapsAliasAliasIdIn"]).optional(),
            "stickerId": t.integer().optional(),
            "point": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "timestamp": t.string().optional(),
            "droppedPinS2cellId": t.string().optional(),
            "formattedAddress": t.string().optional(),
            "featureType": t.string().optional(),
        }
    ).named(renames["PersonalizationMapsAliasIconIn"])
    types["PersonalizationMapsAliasIconOut"] = t.struct(
        {
            "featureName": t.string().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "syntheticFeature": t.boolean().optional(),
            "nickname": t.string().optional(),
            "aliasId": t.proxy(
                renames["PersonalizationMapsAliasAliasIdOut"]
            ).optional(),
            "stickerId": t.integer().optional(),
            "point": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "timestamp": t.string().optional(),
            "droppedPinS2cellId": t.string().optional(),
            "formattedAddress": t.string().optional(),
            "featureType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PersonalizationMapsAliasIconOut"])
    types["GeostoreTransitLineVariantProtoIn"] = t.struct(
        {
            "lineConcept": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "stops": t.array(
                t.proxy(renames["GeostoreServicedStopProtoIn"])
            ).optional(),
        }
    ).named(renames["GeostoreTransitLineVariantProtoIn"])
    types["GeostoreTransitLineVariantProtoOut"] = t.struct(
        {
            "lineConcept": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "stops": t.array(
                t.proxy(renames["GeostoreServicedStopProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTransitLineVariantProtoOut"])
    types["ImageUnderstandingIndexingImageRegionIn"] = t.struct(
        {
            "box": t.proxy(
                renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxIn"]
            ).optional(),
            "score": t.number().optional(),
            "version": t.string(),
        }
    ).named(renames["ImageUnderstandingIndexingImageRegionIn"])
    types["ImageUnderstandingIndexingImageRegionOut"] = t.struct(
        {
            "box": t.proxy(
                renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxOut"]
            ).optional(),
            "score": t.number().optional(),
            "version": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingImageRegionOut"])
    types["WeboftrustLiveResultProviderDocAttachmentIn"] = t.struct(
        {
            "tag": t.string().optional(),
            "tagFp": t.string().optional(),
            "providerId": t.string(),
        }
    ).named(renames["WeboftrustLiveResultProviderDocAttachmentIn"])
    types["WeboftrustLiveResultProviderDocAttachmentOut"] = t.struct(
        {
            "tag": t.string().optional(),
            "tagFp": t.string().optional(),
            "providerId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WeboftrustLiveResultProviderDocAttachmentOut"])
    types["NlpSciencelitRetrievalSearchResultSetDebugInfoIn"] = t.struct(
        {
            "queryEncoding": t.proxy(
                renames["NlpSciencelitRetrievalQueryEncodingDebugInfoIn"]
            ),
            "scamResponse": t.proxy(renames["ResearchScamQueryResponseIn"]),
        }
    ).named(renames["NlpSciencelitRetrievalSearchResultSetDebugInfoIn"])
    types["NlpSciencelitRetrievalSearchResultSetDebugInfoOut"] = t.struct(
        {
            "queryEncoding": t.proxy(
                renames["NlpSciencelitRetrievalQueryEncodingDebugInfoOut"]
            ),
            "scamResponse": t.proxy(renames["ResearchScamQueryResponseOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitRetrievalSearchResultSetDebugInfoOut"])
    types["IndexingMobileVoltVoltPerDocDataIn"] = t.struct(
        {
            "displayUrlIsHttps": t.boolean(),
            "mobileCwv": t.proxy(
                renames["IndexingMobileVoltCoreWebVitalsIn"]
            ).optional(),
            "desktopDisplayUrlIsHttps": t.boolean(),
            "desktopCwv": t.proxy(
                renames["IndexingMobileVoltCoreWebVitalsIn"]
            ).optional(),
        }
    ).named(renames["IndexingMobileVoltVoltPerDocDataIn"])
    types["IndexingMobileVoltVoltPerDocDataOut"] = t.struct(
        {
            "displayUrlIsHttps": t.boolean(),
            "mobileCwv": t.proxy(
                renames["IndexingMobileVoltCoreWebVitalsOut"]
            ).optional(),
            "desktopDisplayUrlIsHttps": t.boolean(),
            "desktopCwv": t.proxy(
                renames["IndexingMobileVoltCoreWebVitalsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingMobileVoltVoltPerDocDataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "interaction": t.string(),
            "allowed": t.boolean(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsIn"])
    types["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "interaction": t.string(),
            "allowed": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiInteractionSettingsOut"])
    types["GoogleCloudContentwarehouseV1ActionExecutorOutputIn"] = t.struct(
        {
            "ruleActionsPairs": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleActionsPairIn"])
            ).optional()
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionExecutorOutputIn"])
    types["GoogleCloudContentwarehouseV1ActionExecutorOutputOut"] = t.struct(
        {
            "ruleActionsPairs": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleActionsPairOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionExecutorOutputOut"])
    types["DrishtiQuantizedDenseFeatureDataIn"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
            "value": t.array(t.string()).optional(),
        }
    ).named(renames["DrishtiQuantizedDenseFeatureDataIn"])
    types["DrishtiQuantizedDenseFeatureDataOut"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "value": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiQuantizedDenseFeatureDataOut"])
    types["AssistantApiCoreTypesHomeAppInfoIn"] = t.struct(
        {
            "packageName": t.string().optional(),
            "localizedAppName": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesHomeAppInfoIn"])
    types["AssistantApiCoreTypesHomeAppInfoOut"] = t.struct(
        {
            "packageName": t.string().optional(),
            "localizedAppName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesHomeAppInfoOut"])
    types["GoodocDocumentPageBlockIn"] = t.struct(
        {
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxIn"]).optional(),
            "OrientationLabel": t.proxy(renames["GoodocOrientationLabelIn"]).optional(),
            "BlockType": t.integer(),
            "TextConfidence": t.integer().optional(),
            "Paragraph": t.array(t.proxy(renames["GoodocParagraphIn"])),
            "Label": t.proxy(renames["GoodocLabelIn"]),
            "Box": t.proxy(renames["GoodocBoundingBoxIn"]),
        }
    ).named(renames["GoodocDocumentPageBlockIn"])
    types["GoodocDocumentPageBlockOut"] = t.struct(
        {
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxOut"]).optional(),
            "OrientationLabel": t.proxy(
                renames["GoodocOrientationLabelOut"]
            ).optional(),
            "BlockType": t.integer(),
            "TextConfidence": t.integer().optional(),
            "Paragraph": t.array(t.proxy(renames["GoodocParagraphOut"])),
            "Label": t.proxy(renames["GoodocLabelOut"]),
            "Box": t.proxy(renames["GoodocBoundingBoxOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocDocumentPageBlockOut"])
    types["KnowledgeAnswersSensitivityStoragePolicyIn"] = t.struct(
        {
            "encryptArgumentValue": t.boolean().optional(),
            "scrubAuxiliaryFieldsInConversationSnapshot": t.boolean().optional(),
            "encryptQueryAnnotationData": t.boolean().optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityStoragePolicyIn"])
    types["KnowledgeAnswersSensitivityStoragePolicyOut"] = t.struct(
        {
            "encryptArgumentValue": t.boolean().optional(),
            "scrubAuxiliaryFieldsInConversationSnapshot": t.boolean().optional(),
            "encryptQueryAnnotationData": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersSensitivityStoragePolicyOut"])
    types["RepositoryWebrefLexicalRangeIn"] = t.struct(
        {
            "facetMid": t.string().optional(),
            "direction": t.string().optional(),
            "category": t.string(),
            "beginOffset": t.integer().optional(),
            "endOffset": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefLexicalRangeIn"])
    types["RepositoryWebrefLexicalRangeOut"] = t.struct(
        {
            "facetMid": t.string().optional(),
            "direction": t.string().optional(),
            "category": t.string(),
            "beginOffset": t.integer().optional(),
            "endOffset": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLexicalRangeOut"])
    types["SnapshotSnapshotDocumentIn"] = t.struct(
        {
            "title": t.string(),
            "imageNode": t.array(t.proxy(renames["SnapshotImageNodeIn"])),
            "teradoc": t.proxy(renames["TeragoogleDocumentInfoIn"]).optional(),
            "metaNoPreview": t.boolean(),
            "metaNoSnippet": t.boolean().optional(),
            "textNode": t.array(t.proxy(renames["SnapshotTextNodeIn"])),
        }
    ).named(renames["SnapshotSnapshotDocumentIn"])
    types["SnapshotSnapshotDocumentOut"] = t.struct(
        {
            "title": t.string(),
            "imageNode": t.array(t.proxy(renames["SnapshotImageNodeOut"])),
            "teradoc": t.proxy(renames["TeragoogleDocumentInfoOut"]).optional(),
            "metaNoPreview": t.boolean(),
            "metaNoSnippet": t.boolean().optional(),
            "textNode": t.array(t.proxy(renames["SnapshotTextNodeOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotSnapshotDocumentOut"])
    types["EventIdMessageIn"] = t.struct(
        {
            "processId": t.integer().optional(),
            "timeUsec": t.string().optional(),
            "serverIp": t.integer().optional(),
        }
    ).named(renames["EventIdMessageIn"])
    types["EventIdMessageOut"] = t.struct(
        {
            "processId": t.integer().optional(),
            "timeUsec": t.string().optional(),
            "serverIp": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["EventIdMessageOut"])
    types["AssistantApiSettingsCommunicationsFilterIn"] = t.struct(
        {"state": t.string()}
    ).named(renames["AssistantApiSettingsCommunicationsFilterIn"])
    types["AssistantApiSettingsCommunicationsFilterOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiSettingsCommunicationsFilterOut"])
    types["FatcatCompactBinaryClassificationIn"] = t.struct(
        {
            "binaryClassifier": t.string().optional(),
            "binaryClassifierName": t.string(),
            "discreteFraction": t.integer().optional(),
        }
    ).named(renames["FatcatCompactBinaryClassificationIn"])
    types["FatcatCompactBinaryClassificationOut"] = t.struct(
        {
            "binaryClassifier": t.string().optional(),
            "binaryClassifierName": t.string(),
            "discreteFraction": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FatcatCompactBinaryClassificationOut"])
    types["ShoppingWebentityShoppingAnnotationSoriVersionIdIn"] = t.struct(
        {
            "f1CommitTimestampMicros": t.string(),
            "opaqueSoriId": t.proxy(
                renames["AdsShoppingReportingOffersSerializedSoriIdIn"]
            ),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationSoriVersionIdIn"])
    types["ShoppingWebentityShoppingAnnotationSoriVersionIdOut"] = t.struct(
        {
            "f1CommitTimestampMicros": t.string(),
            "opaqueSoriId": t.proxy(
                renames["AdsShoppingReportingOffersSerializedSoriIdOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShoppingWebentityShoppingAnnotationSoriVersionIdOut"])
    types["IndexingDocjoinerServingTimeClusterIdIn"] = t.struct(
        {
            "indexForDebugging": t.integer().optional(),
            "clusterId": t.string().optional(),
            "reason": t.string().optional(),
        }
    ).named(renames["IndexingDocjoinerServingTimeClusterIdIn"])
    types["IndexingDocjoinerServingTimeClusterIdOut"] = t.struct(
        {
            "indexForDebugging": t.integer().optional(),
            "clusterId": t.string().optional(),
            "reason": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerServingTimeClusterIdOut"])
    types["AppsPeopleOzExternalMergedpeopleapiSocialConnectionIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "type": t.array(t.string()),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSocialConnectionIn"])
    types["AppsPeopleOzExternalMergedpeopleapiSocialConnectionOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "type": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiSocialConnectionOut"])
    types["NlpSemanticParsingModelsShoppingAssistantProductPhraseIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductIn"]
            ),
            "rawText": t.string(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductPhraseIn"])
    types["NlpSemanticParsingModelsShoppingAssistantProductPhraseOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["NlpSemanticParsingModelsShoppingAssistantProductOut"]
            ),
            "rawText": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductPhraseOut"])
    types["KnowledgeAnswersStateOfAffairsTypeIn"] = t.struct(
        {"remodelings": t.proxy(renames["NlpMeaningMeaningRemodelingsIn"]).optional()}
    ).named(renames["KnowledgeAnswersStateOfAffairsTypeIn"])
    types["KnowledgeAnswersStateOfAffairsTypeOut"] = t.struct(
        {
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersStateOfAffairsTypeOut"])
    types["GoogleCloudContentwarehouseV1ActionIn"] = t.struct(
        {
            "dataValidation": t.proxy(
                renames["GoogleCloudContentwarehouseV1DataValidationActionIn"]
            ).optional(),
            "deleteDocumentAction": t.proxy(
                renames["GoogleCloudContentwarehouseV1DeleteDocumentActionIn"]
            ).optional(),
            "actionId": t.string().optional(),
            "removeFromFolderAction": t.proxy(
                renames["GoogleCloudContentwarehouseV1RemoveFromFolderActionIn"]
            ).optional(),
            "accessControl": t.proxy(
                renames["GoogleCloudContentwarehouseV1AccessControlActionIn"]
            ).optional(),
            "publishToPubSub": t.proxy(
                renames["GoogleCloudContentwarehouseV1PublishActionIn"]
            ).optional(),
            "addToFolder": t.proxy(
                renames["GoogleCloudContentwarehouseV1AddToFolderActionIn"]
            ).optional(),
            "dataUpdate": t.proxy(
                renames["GoogleCloudContentwarehouseV1DataUpdateActionIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionIn"])
    types["GoogleCloudContentwarehouseV1ActionOut"] = t.struct(
        {
            "dataValidation": t.proxy(
                renames["GoogleCloudContentwarehouseV1DataValidationActionOut"]
            ).optional(),
            "deleteDocumentAction": t.proxy(
                renames["GoogleCloudContentwarehouseV1DeleteDocumentActionOut"]
            ).optional(),
            "actionId": t.string().optional(),
            "removeFromFolderAction": t.proxy(
                renames["GoogleCloudContentwarehouseV1RemoveFromFolderActionOut"]
            ).optional(),
            "accessControl": t.proxy(
                renames["GoogleCloudContentwarehouseV1AccessControlActionOut"]
            ).optional(),
            "publishToPubSub": t.proxy(
                renames["GoogleCloudContentwarehouseV1PublishActionOut"]
            ).optional(),
            "addToFolder": t.proxy(
                renames["GoogleCloudContentwarehouseV1AddToFolderActionOut"]
            ).optional(),
            "dataUpdate": t.proxy(
                renames["GoogleCloudContentwarehouseV1DataUpdateActionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1ActionOut"])
    types["MediaIndexEntityFieldIn"] = t.struct(
        {
            "customSource": t.string().optional(),
            "quantizedScore": t.string(),
            "entityId": t.string(),
            "source": t.string(),
        }
    ).named(renames["MediaIndexEntityFieldIn"])
    types["MediaIndexEntityFieldOut"] = t.struct(
        {
            "customSource": t.string().optional(),
            "quantizedScore": t.string(),
            "entityId": t.string(),
            "source": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexEntityFieldOut"])
    types["GDocumentBaseOriginalContentIn"] = t.struct(
        {"Representation": t.string(), "UncompressedLength": t.integer().optional()}
    ).named(renames["GDocumentBaseOriginalContentIn"])
    types["GDocumentBaseOriginalContentOut"] = t.struct(
        {
            "Representation": t.string(),
            "UncompressedLength": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GDocumentBaseOriginalContentOut"])
    types["GoogleCloudContentwarehouseV1TextArrayIn"] = t.struct(
        {"values": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TextArrayIn"])
    types["GoogleCloudContentwarehouseV1TextArrayOut"] = t.struct(
        {
            "values": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1TextArrayOut"])
    types["GeostoreRawMetadataProtoIn"] = t.struct(
        {
            "description": t.string().optional(),
            "conflationMethod": t.string().optional(),
            "key": t.string().optional(),
            "label": t.string().optional(),
        }
    ).named(renames["GeostoreRawMetadataProtoIn"])
    types["GeostoreRawMetadataProtoOut"] = t.struct(
        {
            "description": t.string().optional(),
            "conflationMethod": t.string().optional(),
            "key": t.string().optional(),
            "label": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRawMetadataProtoOut"])
    types["QualityPreviewSnippetQueryFeaturesIn"] = t.struct(
        {
            "radishScore": t.number(),
            "queryHasPassageembedEmbeddings": t.boolean(),
            "queryScore": t.number(),
            "experimentalQueryTitleScore": t.number(),
            "passageembedScore": t.number(),
        }
    ).named(renames["QualityPreviewSnippetQueryFeaturesIn"])
    types["QualityPreviewSnippetQueryFeaturesOut"] = t.struct(
        {
            "radishScore": t.number(),
            "queryHasPassageembedEmbeddings": t.boolean(),
            "queryScore": t.number(),
            "experimentalQueryTitleScore": t.number(),
            "passageembedScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewSnippetQueryFeaturesOut"])
    types["GeostoreDataSourceProtoIn"] = t.struct(
        {
            "sourceDataset": t.string().optional(),
            "importerBuildTarget": t.string().optional(),
            "copyrightOwner": t.string().optional(),
            "importerTimestamp": t.string().optional(),
            "releaseDate": t.proxy(renames["GeostoreDateTimeProtoIn"]).optional(),
            "release": t.string().optional(),
            "copyrightYear": t.integer().optional(),
            "description": t.string().optional(),
            "importerClientInfo": t.string().optional(),
            "importerBuildInfo": t.string().optional(),
            "attributionUrl": t.array(
                t.proxy(renames["GeostoreUrlProtoIn"])
            ).optional(),
            "rawMetadata": t.array(
                t.proxy(renames["GeostoreRawMetadataProtoIn"])
            ).optional(),
            "importerMpmVersion": t.string().optional(),
            "provider": t.string().optional(),
        }
    ).named(renames["GeostoreDataSourceProtoIn"])
    types["GeostoreDataSourceProtoOut"] = t.struct(
        {
            "sourceDataset": t.string().optional(),
            "importerBuildTarget": t.string().optional(),
            "copyrightOwner": t.string().optional(),
            "importerTimestamp": t.string().optional(),
            "releaseDate": t.proxy(renames["GeostoreDateTimeProtoOut"]).optional(),
            "release": t.string().optional(),
            "copyrightYear": t.integer().optional(),
            "description": t.string().optional(),
            "importerClientInfo": t.string().optional(),
            "importerBuildInfo": t.string().optional(),
            "attributionUrl": t.array(
                t.proxy(renames["GeostoreUrlProtoOut"])
            ).optional(),
            "rawMetadata": t.array(
                t.proxy(renames["GeostoreRawMetadataProtoOut"])
            ).optional(),
            "importerMpmVersion": t.string().optional(),
            "provider": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreDataSourceProtoOut"])
    types["GoodocSemanticLabelContentLinkIn"] = t.struct(
        {
            "involumetarget": t.proxy(
                renames["GoodocSemanticLabelContentLinkInVolumeTargetIn"]
            ),
            "citationtarget": t.proxy(
                renames["GoodocSemanticLabelContentLinkCitationTargetIn"]
            ),
            "UrlTarget": t.string().optional(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkIn"])
    types["GoodocSemanticLabelContentLinkOut"] = t.struct(
        {
            "involumetarget": t.proxy(
                renames["GoodocSemanticLabelContentLinkInVolumeTargetOut"]
            ),
            "citationtarget": t.proxy(
                renames["GoodocSemanticLabelContentLinkCitationTargetOut"]
            ),
            "UrlTarget": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelContentLinkOut"])
    types["AssistantLogsCommunicationFuzzyNgramMatchLogIn"] = t.struct(
        {"relativeCost": t.number(), "type": t.string()}
    ).named(renames["AssistantLogsCommunicationFuzzyNgramMatchLogIn"])
    types["AssistantLogsCommunicationFuzzyNgramMatchLogOut"] = t.struct(
        {
            "relativeCost": t.number(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationFuzzyNgramMatchLogOut"])
    types["RepositoryWebrefDetailedMentionScoresIn"] = t.struct(
        {"resultEntityScore": t.number().optional()}
    ).named(renames["RepositoryWebrefDetailedMentionScoresIn"])
    types["RepositoryWebrefDetailedMentionScoresOut"] = t.struct(
        {
            "resultEntityScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefDetailedMentionScoresOut"])
    types["NlpSemanticParsingModelsShoppingAssistantProductExpressionIn"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataIn"]
            ).optional(),
            "grammaticalGender": t.string(),
            "grammaticalNumber": t.string(),
            "phrases": t.array(
                t.proxy(renames["NlpSemanticParsingModelsShoppingAssistantPhraseIn"])
            ).optional(),
            "shoppingListItemInfo": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoIn"
                ]
            ).optional(),
            "productClassification": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductClassificationIn"
                ]
            ),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductExpressionIn"])
    types["NlpSemanticParsingModelsShoppingAssistantProductExpressionOut"] = t.struct(
        {
            "evalData": t.proxy(
                renames["NlpSemanticParsingAnnotationEvalDataOut"]
            ).optional(),
            "grammaticalGender": t.string(),
            "grammaticalNumber": t.string(),
            "phrases": t.array(
                t.proxy(renames["NlpSemanticParsingModelsShoppingAssistantPhraseOut"])
            ).optional(),
            "shoppingListItemInfo": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfoOut"
                ]
            ).optional(),
            "productClassification": t.proxy(
                renames[
                    "NlpSemanticParsingModelsShoppingAssistantProductClassificationOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantProductExpressionOut"])
    types["ImageRepositoryShoppingProductInformationEntityIn"] = t.struct(
        {"score": t.number().optional(), "id": t.string()}
    ).named(renames["ImageRepositoryShoppingProductInformationEntityIn"])
    types["ImageRepositoryShoppingProductInformationEntityOut"] = t.struct(
        {
            "score": t.number().optional(),
            "id": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryShoppingProductInformationEntityOut"])
    types["VideoThumbnailsFrameFileIn"] = t.struct(
        {
            "filename": t.string(),
            "width": t.integer(),
            "msOffset": t.integer(),
            "height": t.integer(),
        }
    ).named(renames["VideoThumbnailsFrameFileIn"])
    types["VideoThumbnailsFrameFileOut"] = t.struct(
        {
            "filename": t.string(),
            "width": t.integer(),
            "msOffset": t.integer(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoThumbnailsFrameFileOut"])
    types["QualityNsrPQDataSubchunkDataIn"] = t.struct(
        {
            "deltaNsr": t.number().optional(),
            "confidence": t.number().optional(),
            "pageWeight": t.number().optional(),
            "type": t.string().optional(),
        }
    ).named(renames["QualityNsrPQDataSubchunkDataIn"])
    types["QualityNsrPQDataSubchunkDataOut"] = t.struct(
        {
            "deltaNsr": t.number().optional(),
            "confidence": t.number().optional(),
            "pageWeight": t.number().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrPQDataSubchunkDataOut"])
    types["AbuseiamHashIn"] = t.struct(
        {"hash": t.string().optional(), "type": t.string()}
    ).named(renames["AbuseiamHashIn"])
    types["AbuseiamHashOut"] = t.struct(
        {
            "hash": t.string().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamHashOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclIn"
    ] = t.struct(
        {
            "circleSet": t.string(),
            "displayName": t.string().optional(),
            "circleId": t.string(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclOut"
    ] = t.struct(
        {
            "circleSet": t.string(),
            "displayName": t.string().optional(),
            "circleId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAclOut"
        ]
    )
    types["GoodocSemanticLabelEditCorrectionCandidateIn"] = t.struct(
        {"Probability": t.number(), "EditedWord": t.string()}
    ).named(renames["GoodocSemanticLabelEditCorrectionCandidateIn"])
    types["GoodocSemanticLabelEditCorrectionCandidateOut"] = t.struct(
        {
            "Probability": t.number(),
            "EditedWord": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelEditCorrectionCandidateOut"])
    types["FreebaseTopicIn"] = t.struct(
        {
            "propertyValue": t.array(
                t.proxy(renames["FreebasePropertyValueIn"])
            ).optional(),
            "id": t.proxy(renames["FreebaseIdIn"]).optional(),
        }
    ).named(renames["FreebaseTopicIn"])
    types["FreebaseTopicOut"] = t.struct(
        {
            "propertyValue": t.array(
                t.proxy(renames["FreebasePropertyValueOut"])
            ).optional(),
            "id": t.proxy(renames["FreebaseIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseTopicOut"])
    types["GeostoreFieldWithRightsProtoIn"] = t.struct(
        {
            "minRightsLevel": t.string().optional(),
            "attributeId": t.string().optional(),
            "featurePropertyId": t.proxy(renames["GeostoreFeaturePropertyIdProtoIn"]),
            "fieldType": t.integer().optional(),
        }
    ).named(renames["GeostoreFieldWithRightsProtoIn"])
    types["GeostoreFieldWithRightsProtoOut"] = t.struct(
        {
            "minRightsLevel": t.string().optional(),
            "attributeId": t.string().optional(),
            "featurePropertyId": t.proxy(renames["GeostoreFeaturePropertyIdProtoOut"]),
            "fieldType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFieldWithRightsProtoOut"])
    types["NlpSemanticParsingLocalScalableAttributeIn"] = t.struct(
        {"attributeId": t.string()}
    ).named(renames["NlpSemanticParsingLocalScalableAttributeIn"])
    types["NlpSemanticParsingLocalScalableAttributeOut"] = t.struct(
        {
            "attributeId": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalScalableAttributeOut"])
    types["VideoContentSearchOnScreenTextFeatureIn"] = t.struct(
        {
            "originalLabel": t.string().optional(),
            "topPositionRatio": t.number().optional(),
            "occurrenceRatio": t.number().optional(),
            "countingNumberSuffix": t.string().optional(),
            "centerHorizontalPositionRatio": t.number().optional(),
            "relativeShotTimeMsPriorToEndTime": t.integer(),
            "countingNumber": t.integer().optional(),
            "mergedLineCount": t.integer().optional(),
            "boxHeightRatio": t.number(),
            "averageFontsize": t.number().optional(),
            "backgroundGray": t.number(),
            "centerVerticalPositionRatio": t.number().optional(),
            "ocrAsrFeature": t.proxy(
                renames["VideoContentSearchOcrAsrFeatureIn"]
            ).optional(),
            "foregroundGray": t.number().optional(),
            "occurrenceCount": t.number().optional(),
            "backgroundRed": t.number(),
            "relativeShotTimeMsPriorToStartTime": t.integer().optional(),
            "medianClusteringDistance": t.number().optional(),
            "shotInfoCountDuringText": t.integer(),
            "foregroundGreen": t.number(),
            "leftPositionRatio": t.number().optional(),
            "averageAngle": t.number().optional(),
            "foregroundRed": t.number(),
            "backgroundBlue": t.number(),
            "averageFontweight": t.number(),
            "isCountingNumberOoo": t.boolean().optional(),
            "backgroundGreen": t.number(),
            "countingNumberPrefix": t.string().optional(),
            "averageConfidence": t.number().optional(),
            "languages": t.array(
                t.proxy(renames["GoodocLanguageCombinationLanguageIn"])
            ).optional(),
            "boxWidthRatio": t.number().optional(),
            "nTextsInSameFrame": t.integer().optional(),
            "foregroundBlue": t.number(),
            "averageHeightRatio": t.number(),
            "relativeShotTimeMsPosteriorToEndTime": t.integer(),
            "durationMs": t.integer().optional(),
            "handwrittenTextRatio": t.number().optional(),
            "countingNumberOooRatio": t.number().optional(),
            "relativeShotTimeMsPosteriorToStartTime": t.integer(),
            "hadUrlInLabel": t.boolean().optional(),
            "topOcrLanguage": t.string().optional(),
        }
    ).named(renames["VideoContentSearchOnScreenTextFeatureIn"])
    types["VideoContentSearchOnScreenTextFeatureOut"] = t.struct(
        {
            "originalLabel": t.string().optional(),
            "topPositionRatio": t.number().optional(),
            "occurrenceRatio": t.number().optional(),
            "countingNumberSuffix": t.string().optional(),
            "centerHorizontalPositionRatio": t.number().optional(),
            "relativeShotTimeMsPriorToEndTime": t.integer(),
            "countingNumber": t.integer().optional(),
            "mergedLineCount": t.integer().optional(),
            "boxHeightRatio": t.number(),
            "averageFontsize": t.number().optional(),
            "backgroundGray": t.number(),
            "centerVerticalPositionRatio": t.number().optional(),
            "ocrAsrFeature": t.proxy(
                renames["VideoContentSearchOcrAsrFeatureOut"]
            ).optional(),
            "foregroundGray": t.number().optional(),
            "occurrenceCount": t.number().optional(),
            "backgroundRed": t.number(),
            "relativeShotTimeMsPriorToStartTime": t.integer().optional(),
            "medianClusteringDistance": t.number().optional(),
            "shotInfoCountDuringText": t.integer(),
            "foregroundGreen": t.number(),
            "leftPositionRatio": t.number().optional(),
            "averageAngle": t.number().optional(),
            "foregroundRed": t.number(),
            "backgroundBlue": t.number(),
            "averageFontweight": t.number(),
            "isCountingNumberOoo": t.boolean().optional(),
            "backgroundGreen": t.number(),
            "countingNumberPrefix": t.string().optional(),
            "averageConfidence": t.number().optional(),
            "languages": t.array(
                t.proxy(renames["GoodocLanguageCombinationLanguageOut"])
            ).optional(),
            "boxWidthRatio": t.number().optional(),
            "nTextsInSameFrame": t.integer().optional(),
            "foregroundBlue": t.number(),
            "averageHeightRatio": t.number(),
            "relativeShotTimeMsPosteriorToEndTime": t.integer(),
            "durationMs": t.integer().optional(),
            "handwrittenTextRatio": t.number().optional(),
            "countingNumberOooRatio": t.number().optional(),
            "relativeShotTimeMsPosteriorToStartTime": t.integer(),
            "hadUrlInLabel": t.boolean().optional(),
            "topOcrLanguage": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOnScreenTextFeatureOut"])
    types["GoodocWordIn"] = t.struct(
        {
            "Capline": t.integer().optional(),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxIn"]).optional(),
            "alternates": t.proxy(renames["GoodocWordAlternatesIn"]),
            "Box": t.proxy(renames["GoodocBoundingBoxIn"]),
            "Symbol": t.array(t.proxy(renames["GoodocSymbolIn"])).optional(),
            "CompactSymbolBoxes": t.proxy(renames["GoodocBoxPartitionsIn"]).optional(),
            "IsLastInSentence": t.boolean().optional(),
            "Baseline": t.integer().optional(),
            "text": t.string().optional(),
            "IsIdentifier": t.boolean().optional(),
            "Penalty": t.integer().optional(),
            "Confidence": t.integer().optional(),
            "writingDirection": t.string().optional(),
            "IsFromDictionary": t.boolean().optional(),
            "Label": t.proxy(renames["GoodocLabelIn"]),
            "IsNumeric": t.boolean().optional(),
        }
    ).named(renames["GoodocWordIn"])
    types["GoodocWordOut"] = t.struct(
        {
            "Capline": t.integer().optional(),
            "RotatedBox": t.proxy(renames["GoodocRotatedBoundingBoxOut"]).optional(),
            "alternates": t.proxy(renames["GoodocWordAlternatesOut"]),
            "Box": t.proxy(renames["GoodocBoundingBoxOut"]),
            "Symbol": t.array(t.proxy(renames["GoodocSymbolOut"])).optional(),
            "CompactSymbolBoxes": t.proxy(renames["GoodocBoxPartitionsOut"]).optional(),
            "IsLastInSentence": t.boolean().optional(),
            "Baseline": t.integer().optional(),
            "text": t.string().optional(),
            "IsIdentifier": t.boolean().optional(),
            "Penalty": t.integer().optional(),
            "Confidence": t.integer().optional(),
            "writingDirection": t.string().optional(),
            "IsFromDictionary": t.boolean().optional(),
            "Label": t.proxy(renames["GoodocLabelOut"]),
            "IsNumeric": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocWordOut"])
    types["ImageRepositoryFrameIdentifierThumbnailVariantIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["ImageRepositoryFrameIdentifierThumbnailVariantIn"])
    types["ImageRepositoryFrameIdentifierThumbnailVariantOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["ImageRepositoryFrameIdentifierThumbnailVariantOut"])
    types["NlpSemanticParsingModelsRecurrenceRecurrenceEndIn"] = t.struct(
        {
            "autoRenewUntil": t.proxy(
                renames["NlpSemanticParsingDateTimeAnnotationIn"]
            ).optional(),
            "numOccurrences": t.integer().optional(),
            "endDateTime": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationIn"]),
            "autoRenew": t.boolean().optional(),
            "endMillis": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceRecurrenceEndIn"])
    types["NlpSemanticParsingModelsRecurrenceRecurrenceEndOut"] = t.struct(
        {
            "autoRenewUntil": t.proxy(
                renames["NlpSemanticParsingDateTimeAnnotationOut"]
            ).optional(),
            "numOccurrences": t.integer().optional(),
            "endDateTime": t.proxy(renames["NlpSemanticParsingDateTimeAnnotationOut"]),
            "autoRenew": t.boolean().optional(),
            "endMillis": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsRecurrenceRecurrenceEndOut"])
    types["CompositeDocAlternateNameIn"] = t.struct(
        {
            "UrlEncoding": t.integer().optional(),
            "Url": t.string(),
            "ecnFp": t.string().optional(),
        }
    ).named(renames["CompositeDocAlternateNameIn"])
    types["CompositeDocAlternateNameOut"] = t.struct(
        {
            "UrlEncoding": t.integer().optional(),
            "Url": t.string(),
            "ecnFp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocAlternateNameOut"])
    types["AssistantDevicesPlatformProtoMediaResumeCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaResumeCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaResumeCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaResumeCapabilityOut"])
    types["GoogleCloudContentwarehouseV1SynonymSetSynonymIn"] = t.struct(
        {"words": t.array(t.string()).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1SynonymSetSynonymIn"])
    types["GoogleCloudContentwarehouseV1SynonymSetSynonymOut"] = t.struct(
        {
            "words": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1SynonymSetSynonymOut"])
    types["GeostoreTimeBasedRateProtoIn"] = t.struct(
        {
            "durationBasedRate": t.array(
                t.proxy(renames["GeostoreDurationBasedRateProtoIn"])
            ).optional(),
            "validEndWithin": t.proxy(renames["GeostoreTimeScheduleProtoIn"]),
            "validStartWithin": t.proxy(
                renames["GeostoreTimeScheduleProtoIn"]
            ).optional(),
            "taxIncluded": t.boolean().optional(),
        }
    ).named(renames["GeostoreTimeBasedRateProtoIn"])
    types["GeostoreTimeBasedRateProtoOut"] = t.struct(
        {
            "durationBasedRate": t.array(
                t.proxy(renames["GeostoreDurationBasedRateProtoOut"])
            ).optional(),
            "validEndWithin": t.proxy(renames["GeostoreTimeScheduleProtoOut"]),
            "validStartWithin": t.proxy(
                renames["GeostoreTimeScheduleProtoOut"]
            ).optional(),
            "taxIncluded": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimeBasedRateProtoOut"])
    types["NlxDataSchemaScaleSetIn"] = t.struct(
        {
            "entityMidPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "characterParagraphPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "sentence": t.array(t.proxy(renames["NlxDataSchemaSentenceIn"])),
            "entityNamePresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "languageSpanCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "documentParagraphsPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "byte": t.array(t.proxy(renames["NlxDataSchemaByteIn"])),
            "paragraph": t.array(t.proxy(renames["NlxDataSchemaParagraphIn"])),
            "characterSentencePresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentAuthorPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionEntityPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentTokensPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentLanguageCodePresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "tokenPosPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "characterPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "paragraphTokensPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "paragraphTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionTypePresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "bytePresence": t.proxy(renames["MultiscaleLayerPresenceIn"]).optional(),
            "mentionPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "documentSentencesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "sentencePresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "document": t.array(t.proxy(renames["NlxDataSchemaDocumentIn"])),
            "paragraphPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "documentIdPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenDependencyPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "entityGenderPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionTokensPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "paragraphBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "sentenceParagraphPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "sentenceTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mention": t.array(t.proxy(renames["NlxDataSchemaMentionIn"])),
            "sentenceCharactersPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "paragraphDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "sentenceBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "sentenceTokensPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "characterTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentCharactersPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenDependencyLabelPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "tokenPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "entityTypePresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenParagraphPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "languageSpanDocumentPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "tokenCharactersPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "entityPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "characterTokenPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenSentencePresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "languageSpanLanguageCodePresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "characterDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "tokenTextPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "token": t.array(t.proxy(renames["NlxDataSchemaTokenIn"])),
            "languageSpan": t.array(t.proxy(renames["NlxDataSchemaLanguageSpanIn"])),
            "languageSpanBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentUrlPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "paragraphCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "documentMentionsPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "paragraphSentencesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "mentionKindPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "documentBytesPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "byteDocumentPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ).optional(),
            "tokenDependencyHeadPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
            "sentenceDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceIn"]),
            "languageSpanPresence": t.proxy(renames["MultiscaleLayerPresenceIn"]),
            "entity": t.array(t.proxy(renames["NlxDataSchemaEntityIn"])),
            "character": t.array(t.proxy(renames["NlxDataSchemaCharacterIn"])),
            "documentLanguageSpansPresence": t.proxy(
                renames["MultiscaleFieldPresenceIn"]
            ),
        }
    ).named(renames["NlxDataSchemaScaleSetIn"])
    types["NlxDataSchemaScaleSetOut"] = t.struct(
        {
            "entityMidPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "characterParagraphPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "sentence": t.array(t.proxy(renames["NlxDataSchemaSentenceOut"])),
            "entityNamePresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mentionTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "languageSpanCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "documentParagraphsPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "byte": t.array(t.proxy(renames["NlxDataSchemaByteOut"])),
            "paragraph": t.array(t.proxy(renames["NlxDataSchemaParagraphOut"])),
            "characterSentencePresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentAuthorPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mentionEntityPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentTokensPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentLanguageCodePresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "tokenPosPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "characterPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "paragraphTokensPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "paragraphTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mentionTypePresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "bytePresence": t.proxy(renames["MultiscaleLayerPresenceOut"]).optional(),
            "mentionPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "documentSentencesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "sentencePresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "document": t.array(t.proxy(renames["NlxDataSchemaDocumentOut"])),
            "paragraphPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "documentIdPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenDependencyPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "entityGenderPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mentionTokensPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "paragraphBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "sentenceParagraphPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "sentenceTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mention": t.array(t.proxy(renames["NlxDataSchemaMentionOut"])),
            "sentenceCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "mentionDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "paragraphDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "sentenceBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "sentenceTokensPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "characterTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "tokenDependencyLabelPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "tokenPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "entityTypePresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenParagraphPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "languageSpanDocumentPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "tokenCharactersPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "entityPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "characterTokenPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenSentencePresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "languageSpanLanguageCodePresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "characterDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "mentionBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "tokenTextPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "token": t.array(t.proxy(renames["NlxDataSchemaTokenOut"])),
            "languageSpan": t.array(t.proxy(renames["NlxDataSchemaLanguageSpanOut"])),
            "languageSpanBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentUrlPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "paragraphCharactersPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "documentMentionsPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "paragraphSentencesPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "mentionKindPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "documentBytesPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "byteDocumentPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ).optional(),
            "tokenDependencyHeadPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "sentenceDocumentPresence": t.proxy(renames["MultiscaleFieldPresenceOut"]),
            "languageSpanPresence": t.proxy(renames["MultiscaleLayerPresenceOut"]),
            "entity": t.array(t.proxy(renames["NlxDataSchemaEntityOut"])),
            "character": t.array(t.proxy(renames["NlxDataSchemaCharacterOut"])),
            "documentLanguageSpansPresence": t.proxy(
                renames["MultiscaleFieldPresenceOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaScaleSetOut"])
    types["OceanDocTagBookSpecificIn"] = t.struct(
        {
            "numRatingHalfStars": t.integer(),
            "subject": t.string().optional(),
            "publicationDate": t.string().optional(),
            "auxBibkeys": t.array(t.string()).optional(),
            "numberingrange": t.array(
                t.proxy(renames["OceanDocTagBookSpecificNumberingRangeIn"])
            ),
            "productEditionNumber": t.integer().optional(),
            "imprint": t.string(),
            "partnerId": t.string().optional(),
            "publisherName": t.string(),
        }
    ).named(renames["OceanDocTagBookSpecificIn"])
    types["OceanDocTagBookSpecificOut"] = t.struct(
        {
            "numRatingHalfStars": t.integer(),
            "subject": t.string().optional(),
            "publicationDate": t.string().optional(),
            "auxBibkeys": t.array(t.string()).optional(),
            "numberingrange": t.array(
                t.proxy(renames["OceanDocTagBookSpecificNumberingRangeOut"])
            ),
            "productEditionNumber": t.integer().optional(),
            "imprint": t.string(),
            "partnerId": t.string().optional(),
            "publisherName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagBookSpecificOut"])
    types["GoogleAssistantAccessoryV1DeviceConfigIn"] = t.struct(
        {
            "deviceModelCapabilitiesOverride": t.proxy(
                renames["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideIn"]
            ).optional(),
            "surfaceIdentity": t.proxy(
                renames["GoogleAssistantEmbeddedV1SurfaceIdentityIn"]
            ).optional(),
            "heterodyneToken": t.string().optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1DeviceConfigIn"])
    types["GoogleAssistantAccessoryV1DeviceConfigOut"] = t.struct(
        {
            "deviceModelCapabilitiesOverride": t.proxy(
                renames["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideOut"]
            ).optional(),
            "surfaceIdentity": t.proxy(
                renames["GoogleAssistantEmbeddedV1SurfaceIdentityOut"]
            ).optional(),
            "heterodyneToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1DeviceConfigOut"])
    types["GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceIn"] = t.struct(
        {"name": t.string().optional(), "processorType": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceIn"])
    types["GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceOut"] = t.struct(
        {
            "name": t.string().optional(),
            "processorType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSourceOut"])
    types["LensDiscoveryStyleStyleImageTypeSignalsIn"] = t.struct(
        {
            "version": t.string(),
            "styleImageTypePredictions": t.array(
                t.proxy(
                    renames[
                        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["LensDiscoveryStyleStyleImageTypeSignalsIn"])
    types["LensDiscoveryStyleStyleImageTypeSignalsOut"] = t.struct(
        {
            "version": t.string(),
            "styleImageTypePredictions": t.array(
                t.proxy(
                    renames[
                        "LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePredictionOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStyleStyleImageTypeSignalsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiBirthdayIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "birthdayResolution": t.string().optional(),
            "dateMsAsNumber": t.string().optional(),
            "value": t.string().optional(),
            "birthdayDecoration": t.proxy(
                renames["SocialGraphApiProtoBirthdayDecorationIn"]
            ).optional(),
            "prompt": t.proxy(renames["SocialGraphApiProtoPromptIn"]).optional(),
            "dateMs": t.string().optional(),
            "ageDisableGracePeriod": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodIn"
                ]
            ).optional(),
            "calendarDay": t.proxy(renames["GoogleTypeDateIn"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBirthdayIn"])
    types["AppsPeopleOzExternalMergedpeopleapiBirthdayOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "birthdayResolution": t.string().optional(),
            "dateMsAsNumber": t.string().optional(),
            "value": t.string().optional(),
            "birthdayDecoration": t.proxy(
                renames["SocialGraphApiProtoBirthdayDecorationOut"]
            ).optional(),
            "prompt": t.proxy(renames["SocialGraphApiProtoPromptOut"]).optional(),
            "dateMs": t.string().optional(),
            "ageDisableGracePeriod": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodOut"
                ]
            ).optional(),
            "calendarDay": t.proxy(renames["GoogleTypeDateOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiBirthdayOut"])
    types["CloudAiPlatformTenantresourceTenantProjectConfigIn"] = t.struct(
        {
            "billingConfig": t.proxy(
                renames["GoogleApiServiceconsumermanagementV1BillingConfigIn"]
            ).optional(),
            "services": t.array(t.string()).optional(),
            "policyBindings": t.array(
                t.proxy(renames["GoogleApiServiceconsumermanagementV1PolicyBindingIn"])
            ).optional(),
            "folder": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantProjectConfigIn"])
    types["CloudAiPlatformTenantresourceTenantProjectConfigOut"] = t.struct(
        {
            "billingConfig": t.proxy(
                renames["GoogleApiServiceconsumermanagementV1BillingConfigOut"]
            ).optional(),
            "services": t.array(t.string()).optional(),
            "policyBindings": t.array(
                t.proxy(renames["GoogleApiServiceconsumermanagementV1PolicyBindingOut"])
            ).optional(),
            "folder": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantProjectConfigOut"])
    types["AssistantLogsDeviceInfoLogIn"] = t.struct(
        {
            "connectivity": t.string(),
            "deviceModelId": t.string().optional(),
            "mediaDeviceType": t.string(),
            "deviceIdLog": t.proxy(
                renames["AssistantLogsSettingsDeviceIdLogIn"]
            ).optional(),
            "deviceIndex": t.integer().optional(),
            "mediaCapabilities": t.proxy(renames["AssistantLogsMediaCapabilitiesIn"]),
            "isTethered": t.boolean().optional(),
            "deviceId": t.string().optional(),
            "sessions": t.array(
                t.proxy(renames["AssistantLogsDeviceMediaSessionLogIn"])
            ).optional(),
            "eliminatingLumosProcessor": t.string().optional(),
            "surfaceType": t.string().optional(),
            "arbitrationDeviceId": t.string().optional(),
            "isRemote": t.boolean(),
            "name": t.string().optional(),
            "distance": t.string().optional(),
        }
    ).named(renames["AssistantLogsDeviceInfoLogIn"])
    types["AssistantLogsDeviceInfoLogOut"] = t.struct(
        {
            "connectivity": t.string(),
            "deviceModelId": t.string().optional(),
            "mediaDeviceType": t.string(),
            "deviceIdLog": t.proxy(
                renames["AssistantLogsSettingsDeviceIdLogOut"]
            ).optional(),
            "deviceIndex": t.integer().optional(),
            "mediaCapabilities": t.proxy(renames["AssistantLogsMediaCapabilitiesOut"]),
            "isTethered": t.boolean().optional(),
            "deviceId": t.string().optional(),
            "sessions": t.array(
                t.proxy(renames["AssistantLogsDeviceMediaSessionLogOut"])
            ).optional(),
            "eliminatingLumosProcessor": t.string().optional(),
            "surfaceType": t.string().optional(),
            "arbitrationDeviceId": t.string().optional(),
            "isRemote": t.boolean(),
            "name": t.string().optional(),
            "distance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsDeviceInfoLogOut"])
    types["AbuseiamVerdictIn"] = t.struct(
        {
            "version": t.string().optional(),
            "region": t.array(t.proxy(renames["AbuseiamRegionIn"])).optional(),
            "strikeCategory": t.string().optional(),
            "decision": t.string(),
            "comment": t.string().optional(),
            "timestampMicros": t.string().optional(),
            "restriction": t.array(
                t.proxy(renames["AbuseiamVerdictRestrictionIn"])
            ).optional(),
            "userNotification": t.array(
                t.proxy(renames["AbuseiamUserNotificationIn"])
            ).optional(),
            "evaluation": t.array(t.proxy(renames["AbuseiamEvaluationIn"])).optional(),
            "targetTimestampMicros": t.string().optional(),
            "isLegalIssued": t.boolean().optional(),
            "miscScores": t.array(
                t.proxy(renames["AbuseiamNameValuePairIn"])
            ).optional(),
            "durationMins": t.integer().optional(),
            "client": t.proxy(renames["AbuseiamClientIn"]).optional(),
            "hashes": t.array(t.proxy(renames["AbuseiamHashIn"])).optional(),
            "reasonCode": t.string().optional(),
            "target": t.proxy(renames["AbuseiamTargetIn"]),
        }
    ).named(renames["AbuseiamVerdictIn"])
    types["AbuseiamVerdictOut"] = t.struct(
        {
            "version": t.string().optional(),
            "region": t.array(t.proxy(renames["AbuseiamRegionOut"])).optional(),
            "strikeCategory": t.string().optional(),
            "decision": t.string(),
            "comment": t.string().optional(),
            "timestampMicros": t.string().optional(),
            "restriction": t.array(
                t.proxy(renames["AbuseiamVerdictRestrictionOut"])
            ).optional(),
            "userNotification": t.array(
                t.proxy(renames["AbuseiamUserNotificationOut"])
            ).optional(),
            "evaluation": t.array(t.proxy(renames["AbuseiamEvaluationOut"])).optional(),
            "targetTimestampMicros": t.string().optional(),
            "isLegalIssued": t.boolean().optional(),
            "miscScores": t.array(
                t.proxy(renames["AbuseiamNameValuePairOut"])
            ).optional(),
            "durationMins": t.integer().optional(),
            "client": t.proxy(renames["AbuseiamClientOut"]).optional(),
            "hashes": t.array(t.proxy(renames["AbuseiamHashOut"])).optional(),
            "reasonCode": t.string().optional(),
            "target": t.proxy(renames["AbuseiamTargetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamVerdictOut"])
    types["CloudAiPlatformTenantresourceCloudSqlInstanceConfigIn"] = t.struct(
        {
            "slmInstanceType": t.string().optional(),
            "slmInstanceName": t.string().optional(),
            "slmInstanceTemplate": t.string().optional(),
            "mdbRolesForCorpAccess": t.array(t.string()).optional(),
            "kmsKeyReference": t.string().optional(),
            "cloudSqlInstanceConnectionName": t.string().optional(),
            "cloudSqlInstanceName": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceCloudSqlInstanceConfigIn"])
    types["CloudAiPlatformTenantresourceCloudSqlInstanceConfigOut"] = t.struct(
        {
            "slmInstanceType": t.string().optional(),
            "slmInstanceName": t.string().optional(),
            "slmInstanceTemplate": t.string().optional(),
            "mdbRolesForCorpAccess": t.array(t.string()).optional(),
            "kmsKeyReference": t.string().optional(),
            "cloudSqlInstanceConnectionName": t.string().optional(),
            "cloudSqlInstanceName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceCloudSqlInstanceConfigOut"])
    types["KnowledgeAnswersDialogReferentialResolutionIn"] = t.struct(
        {"resolutionType": t.string(), "refersToFullMrf": t.boolean().optional()}
    ).named(renames["KnowledgeAnswersDialogReferentialResolutionIn"])
    types["KnowledgeAnswersDialogReferentialResolutionOut"] = t.struct(
        {
            "resolutionType": t.string(),
            "refersToFullMrf": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersDialogReferentialResolutionOut"])
    types["ResearchScamOnlineSearchLatencyStatsIn"] = t.struct(
        {
            "cpuTime": t.number().optional(),
            "taskId": t.integer().optional(),
            "wallTime": t.number().optional(),
        }
    ).named(renames["ResearchScamOnlineSearchLatencyStatsIn"])
    types["ResearchScamOnlineSearchLatencyStatsOut"] = t.struct(
        {
            "cpuTime": t.number().optional(),
            "taskId": t.integer().optional(),
            "wallTime": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamOnlineSearchLatencyStatsOut"])
    types["RepositoryWebrefWebrefOutlinkInfosIn"] = t.struct(
        {
            "outlinkInfo": t.array(
                t.proxy(renames["RepositoryWebrefWebrefOutlinkInfoIn"])
            ).optional()
        }
    ).named(renames["RepositoryWebrefWebrefOutlinkInfosIn"])
    types["RepositoryWebrefWebrefOutlinkInfosOut"] = t.struct(
        {
            "outlinkInfo": t.array(
                t.proxy(renames["RepositoryWebrefWebrefOutlinkInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWebrefOutlinkInfosOut"])
    types["VideoContentSearchSpanDolphinFeaturesIn"] = t.struct(
        {"passage": t.string().optional(), "title": t.string().optional()}
    ).named(renames["VideoContentSearchSpanDolphinFeaturesIn"])
    types["VideoContentSearchSpanDolphinFeaturesOut"] = t.struct(
        {
            "passage": t.string().optional(),
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchSpanDolphinFeaturesOut"])
    types["KnowledgeAnswersOpaqueAudioTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueAudioTypeIn"])
    types["KnowledgeAnswersOpaqueAudioTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueAudioTypeOut"])
    types["LegalDateIn"] = t.struct(
        {"Year": t.integer(), "Month": t.integer(), "Day": t.integer()}
    ).named(renames["LegalDateIn"])
    types["LegalDateOut"] = t.struct(
        {
            "Year": t.integer(),
            "Month": t.integer(),
            "Day": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LegalDateOut"])
    types["QualityActionsReminderRecurrenceInfoIn"] = t.struct(
        {
            "recurrence": t.proxy(renames["AssistantApiRecurrenceIn"]).optional(),
            "clientId": t.string().optional(),
            "recurrenceId": t.string().optional(),
            "serverId": t.string().optional(),
        }
    ).named(renames["QualityActionsReminderRecurrenceInfoIn"])
    types["QualityActionsReminderRecurrenceInfoOut"] = t.struct(
        {
            "recurrence": t.proxy(renames["AssistantApiRecurrenceOut"]).optional(),
            "clientId": t.string().optional(),
            "recurrenceId": t.string().optional(),
            "serverId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderRecurrenceInfoOut"])
    types[
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineIn"
    ] = t.struct(
        {
            "structureId": t.string(),
            "enabled": t.boolean().optional(),
            "type": t.string(),
            "triggers": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerIn"
                    ]
                )
            ).optional(),
            "payload": t.struct({"_": t.string().optional()}).optional(),
            "storagePayload": t.struct({"_": t.string().optional()}),
            "shared": t.boolean(),
            "googlePreconfigWorkflowId": t.string().optional(),
            "uiPayload": t.struct({"_": t.string().optional()}).optional(),
            "language": t.string(),
            "securityLevel": t.string().optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineIn"]
    )
    types[
        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineOut"
    ] = t.struct(
        {
            "structureId": t.string(),
            "enabled": t.boolean().optional(),
            "type": t.string(),
            "triggers": t.array(
                t.proxy(
                    renames[
                        "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTriggerOut"
                    ]
                )
            ).optional(),
            "payload": t.struct({"_": t.string().optional()}).optional(),
            "storagePayload": t.struct({"_": t.string().optional()}),
            "shared": t.boolean(),
            "googlePreconfigWorkflowId": t.string().optional(),
            "uiPayload": t.struct({"_": t.string().optional()}).optional(),
            "language": t.string(),
            "securityLevel": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineOut"]
    )
    types[
        "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataIn"
    ] = t.struct(
        {
            "opaRecipesContext": t.proxy(
                renames[
                    "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextIn"
                ]
            ).optional(),
            "uiEntryPoint": t.string().optional(),
        }
    ).named(
        renames[
            "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataIn"
        ]
    )
    types[
        "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataOut"
    ] = t.struct(
        {
            "opaRecipesContext": t.proxy(
                renames[
                    "PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContextOut"
                ]
            ).optional(),
            "uiEntryPoint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadataOut"
        ]
    )
    types["SocialGraphApiProtoPartialNameOptionsIn"] = t.struct(
        {
            "parsedDisplayNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecIn"]
            ),
            "twoPartNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecIn"]
            ),
            "language": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsIn"])
    types["SocialGraphApiProtoPartialNameOptionsOut"] = t.struct(
        {
            "parsedDisplayNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpecOut"]
            ),
            "twoPartNameSpec": t.proxy(
                renames["SocialGraphApiProtoPartialNameOptionsTwoPartNameSpecOut"]
            ),
            "language": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPartialNameOptionsOut"])
    types["AssistantDevicesPlatformProtoExecutionConfigIn"] = t.struct(
        {
            "remoteDisabled": t.boolean().optional(),
            "cloudEndpointName": t.string().optional(),
            "intentCommandFormat": t.string().optional(),
            "localExecutionType": t.string().optional(),
            "cloudIntentTranslationDisabled": t.boolean().optional(),
            "localDisabled": t.boolean().optional(),
            "remoteExecutionType": t.string().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoExecutionConfigIn"])
    types["AssistantDevicesPlatformProtoExecutionConfigOut"] = t.struct(
        {
            "remoteDisabled": t.boolean().optional(),
            "cloudEndpointName": t.string().optional(),
            "intentCommandFormat": t.string().optional(),
            "localExecutionType": t.string().optional(),
            "cloudIntentTranslationDisabled": t.boolean().optional(),
            "localDisabled": t.boolean().optional(),
            "remoteExecutionType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoExecutionConfigOut"])
    types["CommerceDatastoreDeepTagIn"] = t.struct(
        {"confidence": t.integer().optional(), "tag": t.integer().optional()}
    ).named(renames["CommerceDatastoreDeepTagIn"])
    types["CommerceDatastoreDeepTagOut"] = t.struct(
        {
            "confidence": t.integer().optional(),
            "tag": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommerceDatastoreDeepTagOut"])
    types["VideoMediaOverviewAudioOverviewIn"] = t.struct(
        {
            "loudness1770Lkfs": t.number(),
            "roundedUpOriginalDurationSec": t.integer().optional(),
            "spatialAudioMode": t.string(),
            "contentType": t.string().optional(),
            "language": t.string().optional(),
            "channels": t.integer().optional(),
        }
    ).named(renames["VideoMediaOverviewAudioOverviewIn"])
    types["VideoMediaOverviewAudioOverviewOut"] = t.struct(
        {
            "loudness1770Lkfs": t.number(),
            "roundedUpOriginalDurationSec": t.integer().optional(),
            "spatialAudioMode": t.string(),
            "contentType": t.string().optional(),
            "language": t.string().optional(),
            "channels": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaOverviewAudioOverviewOut"])
    types["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoIn"] = t.struct(
        {"delegatedGroupId": t.proxy(renames["SocialGraphApiProtoDelegatedGroupIdIn"])}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoOut"] = t.struct(
        {
            "delegatedGroupId": t.proxy(
                renames["SocialGraphApiProtoDelegatedGroupIdOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfoOut"])
    types["VideoContentSearchVisualFeaturesIn"] = t.struct(
        {
            "starbustVersion": t.string(),
            "features": t.array(t.number()).optional(),
            "tokens": t.array(t.integer()).optional(),
        }
    ).named(renames["VideoContentSearchVisualFeaturesIn"])
    types["VideoContentSearchVisualFeaturesOut"] = t.struct(
        {
            "starbustVersion": t.string(),
            "features": t.array(t.number()).optional(),
            "tokens": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchVisualFeaturesOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenIn"] = t.struct(
        {
            "detectedBreak": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakIn"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "styleInfo": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoIn"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTokenOut"] = t.struct(
        {
            "detectedBreak": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakOut"]
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "styleInfo": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageTokenStyleInfoOut"]
            ).optional(),
            "provenance": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentProvenanceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTokenOut"])
    types[
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateIn"
    ] = t.struct({"state": t.string(), "category": t.string()}).named(
        renames["AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateIn"]
    )
    types[
        "AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateOut"
    ] = t.struct(
        {
            "state": t.string(),
            "category": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiNotificationOutputRestrictionsOptOutStateCategoryStateOut"]
    )
    types["SecurityCredentialsSquareProtoIn"] = t.struct(
        {"squareId": t.string().optional(), "memberType": t.integer().optional()}
    ).named(renames["SecurityCredentialsSquareProtoIn"])
    types["SecurityCredentialsSquareProtoOut"] = t.struct(
        {
            "squareId": t.string().optional(),
            "memberType": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityCredentialsSquareProtoOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsIn"
    ] = t.struct({"nicknameOption": t.string()}).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsOut"
    ] = t.struct(
        {
            "nicknameOption": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsOut"
        ]
    )
    types["CompositeDocRobotsInfoListIn"] = t.struct(
        {"newsRobotsInfo": t.proxy(renames["IndexingConverterRobotsInfoIn"])}
    ).named(renames["CompositeDocRobotsInfoListIn"])
    types["CompositeDocRobotsInfoListOut"] = t.struct(
        {
            "newsRobotsInfo": t.proxy(renames["IndexingConverterRobotsInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocRobotsInfoListOut"])
    types["KnowledgeAnswersOpaqueShoppingOfferTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingOfferTypeIn"])
    types["KnowledgeAnswersOpaqueShoppingOfferTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueShoppingOfferTypeOut"])
    types["KnowledgeAnswersIntentQueryParsingSignalsIn"] = t.struct(
        {
            "calibratedParsingScore": t.number().optional(),
            "effectiveArgSpanLength": t.number().optional(),
            "inQueryMaxEffectiveArgSpanLength": t.number().optional(),
            "qrewriteCallPathInfo": t.proxy(
                renames["NlpLoggingQRewriteClientCallPathInfoIn"]
            ).optional(),
            "qrewriteCallPathInfoFingerprint": t.string().optional(),
            "source": t.string().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryParsingSignalsIn"])
    types["KnowledgeAnswersIntentQueryParsingSignalsOut"] = t.struct(
        {
            "calibratedParsingScore": t.number().optional(),
            "effectiveArgSpanLength": t.number().optional(),
            "inQueryMaxEffectiveArgSpanLength": t.number().optional(),
            "qrewriteCallPathInfo": t.proxy(
                renames["NlpLoggingQRewriteClientCallPathInfoOut"]
            ).optional(),
            "qrewriteCallPathInfoFingerprint": t.string().optional(),
            "source": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryParsingSignalsOut"])
    types["HtmlrenderWebkitHeadlessProtoRectangleIn"] = t.struct(
        {
            "top": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]).optional(),
            "right": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "bottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
            "left": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetIn"]),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRectangleIn"])
    types["HtmlrenderWebkitHeadlessProtoRectangleOut"] = t.struct(
        {
            "top": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]
            ).optional(),
            "right": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "bottom": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "left": t.proxy(renames["HtmlrenderWebkitHeadlessProtoOffsetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRectangleOut"])
    types["AbuseiamAgeRestrictionIn"] = t.struct(
        {"minAgeYears": t.integer(), "ageYears": t.integer().optional()}
    ).named(renames["AbuseiamAgeRestrictionIn"])
    types["AbuseiamAgeRestrictionOut"] = t.struct(
        {
            "minAgeYears": t.integer(),
            "ageYears": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamAgeRestrictionOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleAogSlotIn"] = t.struct(
        {
            "slotMap": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotMapIn"]
            ).optional(),
            "numBytes": t.integer().optional(),
            "parameterName": t.string().optional(),
            "original": t.string().optional(),
            "slotList": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotListIn"]
            ).optional(),
            "value": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueIn"]
            ).optional(),
            "startByte": t.integer().optional(),
            "entityId": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleAogSlotOut"] = t.struct(
        {
            "slotMap": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotMapOut"]
            ).optional(),
            "numBytes": t.integer().optional(),
            "parameterName": t.string().optional(),
            "original": t.string().optional(),
            "slotList": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotListOut"]
            ).optional(),
            "value": t.proxy(
                renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueOut"]
            ).optional(),
            "startByte": t.integer().optional(),
            "entityId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleAogSlotOut"])
    types["IndexingDupsLocalizedLocalizedClusterClusterIn"] = t.struct(
        {
            "clusterType": t.string(),
            "clusterId": t.string().optional(),
            "filteringEnabled": t.boolean().optional(),
            "language": t.string().optional(),
            "regionCode": t.integer().optional(),
            "deprecatedDebugInfo": t.array(t.string()).optional(),
            "urlRegionCode": t.integer().optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterClusterIn"])
    types["IndexingDupsLocalizedLocalizedClusterClusterOut"] = t.struct(
        {
            "clusterType": t.string(),
            "clusterId": t.string().optional(),
            "filteringEnabled": t.boolean().optional(),
            "language": t.string().optional(),
            "regionCode": t.integer().optional(),
            "deprecatedDebugInfo": t.array(t.string()).optional(),
            "urlRegionCode": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterClusterOut"])
    types["CompositeDocIncludedContentIn"] = t.struct(
        {
            "linkUrl": t.string(),
            "perDocData": t.proxy(renames["PerDocDataIn"]),
            "SourceTypeBitfield": t.string().optional(),
            "includedDoc": t.proxy(renames["GDocumentBaseIn"]),
            "properties": t.proxy(renames["DocPropertiesIn"]),
        }
    ).named(renames["CompositeDocIncludedContentIn"])
    types["CompositeDocIncludedContentOut"] = t.struct(
        {
            "linkUrl": t.string(),
            "perDocData": t.proxy(renames["PerDocDataOut"]),
            "SourceTypeBitfield": t.string().optional(),
            "includedDoc": t.proxy(renames["GDocumentBaseOut"]),
            "properties": t.proxy(renames["DocPropertiesOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocIncludedContentOut"])
    types["SocialGraphApiProtoHostAppInfoIn"] = t.struct(
        {"hostAppName": t.string().optional()}
    ).named(renames["SocialGraphApiProtoHostAppInfoIn"])
    types["SocialGraphApiProtoHostAppInfoOut"] = t.struct(
        {
            "hostAppName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoHostAppInfoOut"])
    types["NlpSemanticParsingQRefAnnotationIn"] = t.struct(
        {
            "otherMetadata": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "entitySourceData": t.proxy(
                renames["NlpSemanticParsingEntitySourceDataIn"]
            ).optional(),
            "sourceTypeList": t.proxy(renames["CopleySourceTypeListIn"]).optional(),
            "gaiaId": t.string().optional(),
            "collectionMembership": t.array(
                t.proxy(
                    renames["NlpSemanticParsingQRefAnnotationCollectionMembershipIn"]
                )
            ),
            "subCluster": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationSubClusterIn"])
            ),
            "entityRelationship": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationEntityRelationshipIn"])
            ).optional(),
            "interpretationNumber": t.integer().optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "location": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "annotatedSpan": t.string().optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "isMdvcDimension": t.boolean().optional(),
            "locationType": t.integer().optional(),
            "personalSummaryNodeChild": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"])
            ).optional(),
            "mdvcVerticals": t.array(t.string()).optional(),
            "confidenceScore": t.number().optional(),
            "mdvcChild": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"])
            ).optional(),
            "deprecatedMdvcSupportingMid": t.array(t.string()).optional(),
            "globalProductClusterId": t.array(t.string()).optional(),
            "clusterId": t.string().optional(),
            "entityNumber": t.integer().optional(),
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenIn"
                    ]
                )
            ),
            "clusterSiblingMid": t.array(t.string()).optional(),
            "clusterSetScore": t.number().optional(),
            "freebaseMid": t.string().optional(),
            "merlotCategory": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationMerlotCategoryDataIn"])
            ),
            "isNimbleAnnotation": t.boolean().optional(),
            "referenceScore": t.number().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingRelatedEntityIn"])
            ).optional(),
            "deprecatedEquivalentMids": t.array(t.string()).optional(),
            "resolutionScore": t.number().optional(),
            "lowConfidence": t.boolean().optional(),
            "displayName": t.string().optional(),
            "mergedImpliedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationIn"])
            ).optional(),
            "productLineId": t.array(t.string()).optional(),
            "attributeId": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationIn"])
    types["NlpSemanticParsingQRefAnnotationOut"] = t.struct(
        {
            "otherMetadata": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "entitySourceData": t.proxy(
                renames["NlpSemanticParsingEntitySourceDataOut"]
            ).optional(),
            "sourceTypeList": t.proxy(renames["CopleySourceTypeListOut"]).optional(),
            "gaiaId": t.string().optional(),
            "collectionMembership": t.array(
                t.proxy(
                    renames["NlpSemanticParsingQRefAnnotationCollectionMembershipOut"]
                )
            ),
            "subCluster": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationSubClusterOut"])
            ),
            "entityRelationship": t.array(
                t.proxy(
                    renames["NlpSemanticParsingQRefAnnotationEntityRelationshipOut"]
                )
            ).optional(),
            "interpretationNumber": t.integer().optional(),
            "addedByCloseAnswers": t.boolean().optional(),
            "location": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "annotatedSpan": t.string().optional(),
            "oysterId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "isMdvcDimension": t.boolean().optional(),
            "locationType": t.integer().optional(),
            "personalSummaryNodeChild": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"])
            ).optional(),
            "mdvcVerticals": t.array(t.string()).optional(),
            "confidenceScore": t.number().optional(),
            "mdvcChild": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"])
            ).optional(),
            "deprecatedMdvcSupportingMid": t.array(t.string()).optional(),
            "globalProductClusterId": t.array(t.string()).optional(),
            "clusterId": t.string().optional(),
            "entityNumber": t.integer().optional(),
            "matchedLightweightToken": t.array(
                t.proxy(
                    renames[
                        "RepositoryWebrefLightweightTokensMatchedLightweightTokenOut"
                    ]
                )
            ),
            "clusterSiblingMid": t.array(t.string()).optional(),
            "clusterSetScore": t.number().optional(),
            "freebaseMid": t.string().optional(),
            "merlotCategory": t.array(
                t.proxy(
                    renames["NlpSemanticParsingQRefAnnotationMerlotCategoryDataOut"]
                )
            ),
            "isNimbleAnnotation": t.boolean().optional(),
            "referenceScore": t.number().optional(),
            "relatedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingRelatedEntityOut"])
            ).optional(),
            "deprecatedEquivalentMids": t.array(t.string()).optional(),
            "resolutionScore": t.number().optional(),
            "lowConfidence": t.boolean().optional(),
            "displayName": t.string().optional(),
            "mergedImpliedEntity": t.array(
                t.proxy(renames["NlpSemanticParsingQRefAnnotationOut"])
            ).optional(),
            "productLineId": t.array(t.string()).optional(),
            "attributeId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingQRefAnnotationOut"])
    types["HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn"] = t.struct(
        {
            "timestamp": t.number().optional(),
            "stackTrace": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoScriptStackFrameIn"])
            ).optional(),
            "lineNumber": t.integer().optional(),
            "sourceUrl": t.string().optional(),
            "messageLevel": t.string().optional(),
            "message": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryIn"])
    types["HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut"] = t.struct(
        {
            "timestamp": t.number().optional(),
            "stackTrace": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoScriptStackFrameOut"])
            ).optional(),
            "lineNumber": t.integer().optional(),
            "sourceUrl": t.string().optional(),
            "messageLevel": t.string().optional(),
            "message": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoConsoleLogEntryOut"])
    types["ListSnippetResponseIn"] = t.struct(
        {
            "totalRows": t.integer().optional(),
            "header": t.proxy(renames["ListSnippetResponseRowIn"]),
            "isTable": t.boolean().optional(),
            "row": t.array(t.proxy(renames["ListSnippetResponseRowIn"])),
        }
    ).named(renames["ListSnippetResponseIn"])
    types["ListSnippetResponseOut"] = t.struct(
        {
            "totalRows": t.integer().optional(),
            "header": t.proxy(renames["ListSnippetResponseRowOut"]),
            "isTable": t.boolean().optional(),
            "row": t.array(t.proxy(renames["ListSnippetResponseRowOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ListSnippetResponseOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldIn"
    ] = t.struct(
        {
            "limitedProfileSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfileSettingsIn"]
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldOut"
    ] = t.struct(
        {
            "limitedProfileSettings": t.proxy(
                renames["SocialGraphApiProtoLimitedProfileSettingsOut"]
            ),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsFieldOut"]
    )
    types["HtmlrenderWebkitHeadlessProtoRenderStatsCounterIn"] = t.struct(
        {"name": t.string().optional(), "count": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderStatsCounterIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderStatsCounterOut"] = t.struct(
        {
            "name": t.string().optional(),
            "count": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderStatsCounterOut"])
    types["AssistantApiSettingsMasqueradeModeIn"] = t.struct(
        {
            "lastExitGuestModeTimestamp": t.proxy(renames["AssistantApiTimestampIn"]),
            "masqueradeModeEnabled": t.boolean(),
            "lastEnterGuestModeTimestamp": t.proxy(renames["AssistantApiTimestampIn"]),
        }
    ).named(renames["AssistantApiSettingsMasqueradeModeIn"])
    types["AssistantApiSettingsMasqueradeModeOut"] = t.struct(
        {
            "lastExitGuestModeTimestamp": t.proxy(renames["AssistantApiTimestampOut"]),
            "masqueradeModeEnabled": t.boolean(),
            "lastEnterGuestModeTimestamp": t.proxy(renames["AssistantApiTimestampOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsMasqueradeModeOut"])
    types["GoogleCloudContentwarehouseV1LockDocumentRequestIn"] = t.struct(
        {
            "collectionId": t.string().optional(),
            "lockingUser": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1LockDocumentRequestIn"])
    types["GoogleCloudContentwarehouseV1LockDocumentRequestOut"] = t.struct(
        {
            "collectionId": t.string().optional(),
            "lockingUser": t.proxy(
                renames["GoogleCloudContentwarehouseV1UserInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1LockDocumentRequestOut"])
    types["GeostoreRoadMonitorProtoIn"] = t.struct(
        {
            "monitoredRoad": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoIn"])
            ).optional()
        }
    ).named(renames["GeostoreRoadMonitorProtoIn"])
    types["GeostoreRoadMonitorProtoOut"] = t.struct(
        {
            "monitoredRoad": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRoadMonitorProtoOut"])
    types["GeostoreTextAffixProtoIn"] = t.struct(
        {
            "prefix": t.string().optional(),
            "language": t.string().optional(),
            "suffix": t.string().optional(),
        }
    ).named(renames["GeostoreTextAffixProtoIn"])
    types["GeostoreTextAffixProtoOut"] = t.struct(
        {
            "prefix": t.string().optional(),
            "language": t.string().optional(),
            "suffix": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTextAffixProtoOut"])
    types["QualityActionsCustomizedNotificationIn"] = t.struct(
        {
            "surfaceType": t.string().optional(),
            "text": t.string().optional(),
            "buttons": t.array(
                t.proxy(renames["QualityActionsCustomizedNotificationButtonIn"])
            ).optional(),
            "tapAction": t.proxy(
                renames["QualityActionsCustomizedNotificationPayloadIn"]
            ).optional(),
        }
    ).named(renames["QualityActionsCustomizedNotificationIn"])
    types["QualityActionsCustomizedNotificationOut"] = t.struct(
        {
            "surfaceType": t.string().optional(),
            "text": t.string().optional(),
            "buttons": t.array(
                t.proxy(renames["QualityActionsCustomizedNotificationButtonOut"])
            ).optional(),
            "tapAction": t.proxy(
                renames["QualityActionsCustomizedNotificationPayloadOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsCustomizedNotificationOut"])
    types["GoogleCloudDocumentaiV1DocumentRevisionIn"] = t.struct(
        {
            "processor": t.string().optional(),
            "parent": t.array(t.integer()).optional(),
            "createTime": t.string().optional(),
            "humanReview": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewIn"]
            ).optional(),
            "parentIds": t.array(t.string()).optional(),
            "agent": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentRevisionIn"])
    types["GoogleCloudDocumentaiV1DocumentRevisionOut"] = t.struct(
        {
            "processor": t.string().optional(),
            "parent": t.array(t.integer()).optional(),
            "createTime": t.string().optional(),
            "humanReview": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentRevisionHumanReviewOut"]
            ).optional(),
            "parentIds": t.array(t.string()).optional(),
            "agent": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentRevisionOut"])
    types["KnowledgeAnswersAttributeTypeIn"] = t.struct(
        {
            "attribute": t.array(t.string()).optional(),
            "pivotEntitySlot": t.string().optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsIn"]
            ).optional(),
        }
    ).named(renames["KnowledgeAnswersAttributeTypeIn"])
    types["KnowledgeAnswersAttributeTypeOut"] = t.struct(
        {
            "attribute": t.array(t.string()).optional(),
            "pivotEntitySlot": t.string().optional(),
            "remodelings": t.proxy(
                renames["NlpMeaningMeaningRemodelingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersAttributeTypeOut"])
    types["ImageRepositoryContentBasedVideoMetadataIn"] = t.struct(
        {
            "truncationInfo": t.proxy(
                renames["ImageRepositoryFileTruncationInfoIn"]
            ).optional(),
            "languageIdentification": t.proxy(renames["VideoTimedtextS4ALIResultsIn"]),
            "audioOnly": t.boolean().optional(),
            "videoStreamInfo": t.proxy(
                renames["VideoPipelineViperVSIColumnDataIn"]
            ).optional(),
            "safesearchVideoContentSignals": t.proxy(
                renames["SafesearchVideoContentSignalsIn"]
            ).optional(),
            "mediaInfo": t.proxy(renames["VideoMediaInfoIn"]).optional(),
            "videoPornScore": t.number().optional(),
            "videoTranscriptAnnotations": t.proxy(
                renames["QualityWebanswersVideoTranscriptAnnotationsIn"]
            ).optional(),
            "searchDocid": t.string().optional(),
            "videoPornScoreV4": t.number().optional(),
            "loudnessData": t.proxy(renames["VideoStorageLoudnessDataIn"]).optional(),
            "signalsBlob": t.proxy(
                renames["ImageRepositoryAmarnaSignalsBlobIn"]
            ).optional(),
            "legosAnnotationData": t.proxy(
                renames["VideoLegosLegosAnnotationsSetsIn"]
            ).optional(),
            "unwantedContent": t.proxy(
                renames["ImageRepositoryUnwantedContentIn"]
            ).optional(),
            "thumbnailerData": t.proxy(
                renames["VideoPipelineViperThumbnailerColumnDataIn"]
            ),
            "youtubeProcessingFilter": t.proxy(
                renames["ImageRepositoryYoutubeProcessingFilterIn"]
            ).optional(),
            "amarnaDocid": t.string().optional(),
            "thumbnailQualityScore": t.proxy(
                renames["VideoThumbnailsThumbnailScoreIn"]
            ).optional(),
            "transcriptAsr": t.proxy(renames["PseudoVideoDataIn"]).optional(),
            "videoAnchorSet": t.proxy(
                renames["VideoContentSearchVideoAnchorSetsIn"]
            ).optional(),
            "videoPreviewBytes": t.array(
                t.proxy(renames["ImageRepositoryVideoPreviewsVideoPreviewIn"])
            ).optional(),
            "venomId": t.string().optional(),
            "s3Asr": t.proxy(
                renames["ImageRepositoryAmarnaCloudSpeechSignalsIn"]
            ).optional(),
            "signalsBlobInfo": t.proxy(
                renames["ImageRepositoryAmarnaSignalsBlobInfoIn"]
            ).optional(),
            "s3LanguageIdentification": t.proxy(
                renames["ImageRepositoryS3LangIdSignalsIn"]
            ),
            "golden7SoapboxSummary": t.proxy(
                renames["DrishtiFeatureSetDataIn"]
            ).optional(),
            "inlinePlayback": t.proxy(
                renames["VideoCrawlVideoInlinePlaybackMetadataIn"]
            ).optional(),
            "cloudSpeechSignals": t.proxy(
                renames["ImageRepositoryAmarnaCloudSpeechSignalsIn"]
            ).optional(),
            "transcodeMetadata": t.array(
                t.proxy(renames["ImageRepositoryApiItagSpecificMetadataIn"])
            ).optional(),
            "videoDurationSec": t.number().optional(),
            "videoPreviews": t.array(
                t.proxy(renames["ImageBaseVideoPreviewMetadataIn"])
            ).optional(),
            "representativeFrameData": t.proxy(renames["ImageDataIn"]),
            "featureSetData": t.proxy(renames["DrishtiFeatureSetDataIn"]).optional(),
            "venomProcessingInfo": t.proxy(
                renames["ImageRepositoryVenomProcessingInfoIn"]
            ).optional(),
            "speechProperties": t.proxy(
                renames["IndexingSpeechSpeechPropertiesProtoIn"]
            ),
            "lmsPreviewFramePerdocs": t.proxy(
                renames["ImageRepositoryFramePerdocsIn"]
            ).optional(),
            "aresClassificationRequestTimestamp": t.string().optional(),
        }
    ).named(renames["ImageRepositoryContentBasedVideoMetadataIn"])
    types["ImageRepositoryContentBasedVideoMetadataOut"] = t.struct(
        {
            "truncationInfo": t.proxy(
                renames["ImageRepositoryFileTruncationInfoOut"]
            ).optional(),
            "languageIdentification": t.proxy(renames["VideoTimedtextS4ALIResultsOut"]),
            "audioOnly": t.boolean().optional(),
            "videoStreamInfo": t.proxy(
                renames["VideoPipelineViperVSIColumnDataOut"]
            ).optional(),
            "safesearchVideoContentSignals": t.proxy(
                renames["SafesearchVideoContentSignalsOut"]
            ).optional(),
            "mediaInfo": t.proxy(renames["VideoMediaInfoOut"]).optional(),
            "videoPornScore": t.number().optional(),
            "videoTranscriptAnnotations": t.proxy(
                renames["QualityWebanswersVideoTranscriptAnnotationsOut"]
            ).optional(),
            "searchDocid": t.string().optional(),
            "videoPornScoreV4": t.number().optional(),
            "loudnessData": t.proxy(renames["VideoStorageLoudnessDataOut"]).optional(),
            "signalsBlob": t.proxy(
                renames["ImageRepositoryAmarnaSignalsBlobOut"]
            ).optional(),
            "legosAnnotationData": t.proxy(
                renames["VideoLegosLegosAnnotationsSetsOut"]
            ).optional(),
            "unwantedContent": t.proxy(
                renames["ImageRepositoryUnwantedContentOut"]
            ).optional(),
            "thumbnailerData": t.proxy(
                renames["VideoPipelineViperThumbnailerColumnDataOut"]
            ),
            "youtubeProcessingFilter": t.proxy(
                renames["ImageRepositoryYoutubeProcessingFilterOut"]
            ).optional(),
            "amarnaDocid": t.string().optional(),
            "thumbnailQualityScore": t.proxy(
                renames["VideoThumbnailsThumbnailScoreOut"]
            ).optional(),
            "transcriptAsr": t.proxy(renames["PseudoVideoDataOut"]).optional(),
            "videoAnchorSet": t.proxy(
                renames["VideoContentSearchVideoAnchorSetsOut"]
            ).optional(),
            "videoPreviewBytes": t.array(
                t.proxy(renames["ImageRepositoryVideoPreviewsVideoPreviewOut"])
            ).optional(),
            "venomId": t.string().optional(),
            "s3Asr": t.proxy(
                renames["ImageRepositoryAmarnaCloudSpeechSignalsOut"]
            ).optional(),
            "signalsBlobInfo": t.proxy(
                renames["ImageRepositoryAmarnaSignalsBlobInfoOut"]
            ).optional(),
            "s3LanguageIdentification": t.proxy(
                renames["ImageRepositoryS3LangIdSignalsOut"]
            ),
            "golden7SoapboxSummary": t.proxy(
                renames["DrishtiFeatureSetDataOut"]
            ).optional(),
            "inlinePlayback": t.proxy(
                renames["VideoCrawlVideoInlinePlaybackMetadataOut"]
            ).optional(),
            "cloudSpeechSignals": t.proxy(
                renames["ImageRepositoryAmarnaCloudSpeechSignalsOut"]
            ).optional(),
            "transcodeMetadata": t.array(
                t.proxy(renames["ImageRepositoryApiItagSpecificMetadataOut"])
            ).optional(),
            "videoDurationSec": t.number().optional(),
            "videoPreviews": t.array(
                t.proxy(renames["ImageBaseVideoPreviewMetadataOut"])
            ).optional(),
            "representativeFrameData": t.proxy(renames["ImageDataOut"]),
            "featureSetData": t.proxy(renames["DrishtiFeatureSetDataOut"]).optional(),
            "venomProcessingInfo": t.proxy(
                renames["ImageRepositoryVenomProcessingInfoOut"]
            ).optional(),
            "speechProperties": t.proxy(
                renames["IndexingSpeechSpeechPropertiesProtoOut"]
            ),
            "lmsPreviewFramePerdocs": t.proxy(
                renames["ImageRepositoryFramePerdocsOut"]
            ).optional(),
            "aresClassificationRequestTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryContentBasedVideoMetadataOut"])
    types["SocialGraphApiProtoSyncInfoIn"] = t.struct(
        {
            "sync4": t.string().optional(),
            "sync3": t.string().optional(),
            "sync1": t.string().optional(),
            "sourceId": t.string().optional(),
            "sync2": t.string().optional(),
        }
    ).named(renames["SocialGraphApiProtoSyncInfoIn"])
    types["SocialGraphApiProtoSyncInfoOut"] = t.struct(
        {
            "sync4": t.string().optional(),
            "sync3": t.string().optional(),
            "sync1": t.string().optional(),
            "sourceId": t.string().optional(),
            "sync2": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoSyncInfoOut"])
    types["RepositoryWebrefEnricherDebugDataIn"] = t.struct(
        {
            "nonMidProperties": t.array(
                t.proxy(renames["RepositoryWebrefCompactFlatPropertyValueIn"])
            ).optional(),
            "relatedPage": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocIn"])
            ).optional(),
            "referencePage": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefEnricherDebugDataIn"])
    types["RepositoryWebrefEnricherDebugDataOut"] = t.struct(
        {
            "nonMidProperties": t.array(
                t.proxy(renames["RepositoryWebrefCompactFlatPropertyValueOut"])
            ).optional(),
            "relatedPage": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocOut"])
            ).optional(),
            "referencePage": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEnricherDebugDataOut"])
    types["ClassifierPornSiteViolenceStatsIn"] = t.struct(
        {
            "meanFinalViolenceScore": t.number(),
            "numberOfVideos": t.string(),
            "videoViolenceScore": t.number(),
            "numberOfImages": t.string(),
        }
    ).named(renames["ClassifierPornSiteViolenceStatsIn"])
    types["ClassifierPornSiteViolenceStatsOut"] = t.struct(
        {
            "meanFinalViolenceScore": t.number(),
            "numberOfVideos": t.string(),
            "videoViolenceScore": t.number(),
            "numberOfImages": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornSiteViolenceStatsOut"])
    types["VideoTimedtextS4LangScoreIn"] = t.struct(
        {"confidence": t.number().optional(), "langCode": t.string().optional()}
    ).named(renames["VideoTimedtextS4LangScoreIn"])
    types["VideoTimedtextS4LangScoreOut"] = t.struct(
        {
            "confidence": t.number().optional(),
            "langCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoTimedtextS4LangScoreOut"])
    types["AssistantApiCoreTypesSurfaceTypeIn"] = t.struct({"type": t.string()}).named(
        renames["AssistantApiCoreTypesSurfaceTypeIn"]
    )
    types["AssistantApiCoreTypesSurfaceTypeOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantApiCoreTypesSurfaceTypeOut"])
    types["NlpSemanticParsingLocalCuisineConstraintIn"] = t.struct(
        {"cuisineGcid": t.string()}
    ).named(renames["NlpSemanticParsingLocalCuisineConstraintIn"])
    types["NlpSemanticParsingLocalCuisineConstraintOut"] = t.struct(
        {
            "cuisineGcid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalCuisineConstraintOut"])
    types["IndexingDocjoinerCDocBuildInfoIn"] = t.struct(
        {"extraMessage": t.proxy(renames["Proto2BridgeMessageSetIn"])}
    ).named(renames["IndexingDocjoinerCDocBuildInfoIn"])
    types["IndexingDocjoinerCDocBuildInfoOut"] = t.struct(
        {
            "extraMessage": t.proxy(renames["Proto2BridgeMessageSetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDocjoinerCDocBuildInfoOut"])
    types["CopleySubreferenceMetadataIn"] = t.struct(
        {
            "mostCompoundResolvedEntities": t.array(
                t.proxy(renames["CopleySubreferenceResolutionIn"])
            ).optional(),
            "mostNestedUnresolvedReference": t.proxy(
                renames["CopleySubreferenceReferenceIn"]
            ).optional(),
        }
    ).named(renames["CopleySubreferenceMetadataIn"])
    types["CopleySubreferenceMetadataOut"] = t.struct(
        {
            "mostCompoundResolvedEntities": t.array(
                t.proxy(renames["CopleySubreferenceResolutionOut"])
            ).optional(),
            "mostNestedUnresolvedReference": t.proxy(
                renames["CopleySubreferenceReferenceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleySubreferenceMetadataOut"])
    types["GeostorePriceListSectionProtoIn"] = t.struct(
        {
            "item": t.array(
                t.proxy(renames["GeostoreComposableItemProtoIn"])
            ).optional(),
            "language": t.string().optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoIn"])).optional(),
            "callToAction": t.proxy(renames["GeostoreCallToActionProtoIn"]).optional(),
            "foodItem": t.array(
                t.proxy(renames["GeostoreFoodMenuItemProtoIn"])
            ).optional(),
            "itemType": t.array(t.string()).optional(),
        }
    ).named(renames["GeostorePriceListSectionProtoIn"])
    types["GeostorePriceListSectionProtoOut"] = t.struct(
        {
            "item": t.array(
                t.proxy(renames["GeostoreComposableItemProtoOut"])
            ).optional(),
            "language": t.string().optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoOut"])).optional(),
            "callToAction": t.proxy(renames["GeostoreCallToActionProtoOut"]).optional(),
            "foodItem": t.array(
                t.proxy(renames["GeostoreFoodMenuItemProtoOut"])
            ).optional(),
            "itemType": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceListSectionProtoOut"])
    types["RepositoryWebrefGlobalNameInfoIn"] = t.struct(
        {
            "variantInfo": t.array(
                t.proxy(renames["RepositoryWebrefNameInfoIn"])
            ).optional(),
            "normalizedName": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefGlobalNameInfoIn"])
    types["RepositoryWebrefGlobalNameInfoOut"] = t.struct(
        {
            "variantInfo": t.array(
                t.proxy(renames["RepositoryWebrefNameInfoOut"])
            ).optional(),
            "normalizedName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefGlobalNameInfoOut"])
    types["GoogleCloudContentwarehouseV1RuleIn"] = t.struct(
        {
            "condition": t.string().optional(),
            "description": t.string().optional(),
            "ruleId": t.string().optional(),
            "triggerType": t.string().optional(),
            "actions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1ActionIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleIn"])
    types["GoogleCloudContentwarehouseV1RuleOut"] = t.struct(
        {
            "condition": t.string().optional(),
            "description": t.string().optional(),
            "ruleId": t.string().optional(),
            "triggerType": t.string().optional(),
            "actions": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1ActionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleOut"])
    types["SocialGraphApiProtoNamePronunciationAudioMetadataIn"] = t.struct(
        {"audioSource": t.string().optional(), "audioState": t.string().optional()}
    ).named(renames["SocialGraphApiProtoNamePronunciationAudioMetadataIn"])
    types["SocialGraphApiProtoNamePronunciationAudioMetadataOut"] = t.struct(
        {
            "audioSource": t.string().optional(),
            "audioState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoNamePronunciationAudioMetadataOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusIn"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "type": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusOut"] = t.struct(
        {
            "formattedType": t.string().optional(),
            "type": t.string(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRelationshipStatusOut"])
    types["AssistantLogsMediaStreamLogIn"] = t.struct(
        {
            "deviceIndex": t.array(t.integer()).optional(),
            "session": t.proxy(renames["AssistantLogsDeviceMediaSessionLogIn"]),
        }
    ).named(renames["AssistantLogsMediaStreamLogIn"])
    types["AssistantLogsMediaStreamLogOut"] = t.struct(
        {
            "deviceIndex": t.array(t.integer()).optional(),
            "session": t.proxy(renames["AssistantLogsDeviceMediaSessionLogOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsMediaStreamLogOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn"] = t.struct(
        {"time": t.string().optional(), "day": t.integer().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut"] = t.struct(
        {
            "time": t.string().optional(),
            "day": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpointOut"])
    types["AbuseiamEvaluationIn"] = t.struct(
        {
            "status": t.string(),
            "region": t.array(t.proxy(renames["AbuseiamRegionIn"])).optional(),
            "miscData": t.array(t.proxy(renames["AbuseiamNameValuePairIn"])).optional(),
            "feature": t.array(t.proxy(renames["AbuseiamFeatureIn"])).optional(),
            "processTimeMillisecs": t.string().optional(),
            "version": t.string().optional(),
            "backend": t.string().optional(),
            "comment": t.string().optional(),
            "score": t.number(),
            "videoReviewData": t.proxy(renames["AbuseiamVideoReviewDataIn"]).optional(),
            "timestampMicros": t.string().optional(),
            "clusterEvaluationContext": t.proxy(
                renames["AbuseiamClusterEvaluationContextIn"]
            ).optional(),
            "userRestriction": t.proxy(renames["AbuseiamUserRestrictionIn"]).optional(),
            "manualReviewInfo": t.proxy(
                renames["AbuseiamManualReviewEvaluationInfoIn"]
            ).optional(),
            "abuseType": t.proxy(renames["AbuseiamAbuseTypeIn"]),
            "processedMicros": t.string().optional(),
            "target": t.proxy(renames["AbuseiamTargetIn"]),
        }
    ).named(renames["AbuseiamEvaluationIn"])
    types["AbuseiamEvaluationOut"] = t.struct(
        {
            "status": t.string(),
            "region": t.array(t.proxy(renames["AbuseiamRegionOut"])).optional(),
            "miscData": t.array(
                t.proxy(renames["AbuseiamNameValuePairOut"])
            ).optional(),
            "feature": t.array(t.proxy(renames["AbuseiamFeatureOut"])).optional(),
            "processTimeMillisecs": t.string().optional(),
            "version": t.string().optional(),
            "backend": t.string().optional(),
            "comment": t.string().optional(),
            "score": t.number(),
            "videoReviewData": t.proxy(
                renames["AbuseiamVideoReviewDataOut"]
            ).optional(),
            "timestampMicros": t.string().optional(),
            "clusterEvaluationContext": t.proxy(
                renames["AbuseiamClusterEvaluationContextOut"]
            ).optional(),
            "userRestriction": t.proxy(
                renames["AbuseiamUserRestrictionOut"]
            ).optional(),
            "manualReviewInfo": t.proxy(
                renames["AbuseiamManualReviewEvaluationInfoOut"]
            ).optional(),
            "abuseType": t.proxy(renames["AbuseiamAbuseTypeOut"]),
            "processedMicros": t.string().optional(),
            "target": t.proxy(renames["AbuseiamTargetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamEvaluationOut"])
    types["QualityNsrNsrDataMetadataIn"] = t.struct(
        {
            "nsrChunksWithSourceInfo": t.proxy(
                renames["QualityNsrNsrChunksWithSourceInfoIn"]
            ).optional(),
            "raffiaLookupKeys": t.array(t.string()).optional(),
            "encodedLookupInformation": t.string().optional(),
            "lastTimeProcessedGoldmineInSeconds": t.string(),
            "lastTimeProcessedMduInSeconds": t.string().optional(),
            "raffiaLookupKeyPerField": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "lastTimeProcessedRaffiaInSeconds": t.string().optional(),
            "raffiaLookupKey": t.string(),
            "goldmineLookupKeyPerField": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "raffiaSignalMergerUrl": t.string().optional(),
            "goldmineLookupKeys": t.array(t.string()).optional(),
        }
    ).named(renames["QualityNsrNsrDataMetadataIn"])
    types["QualityNsrNsrDataMetadataOut"] = t.struct(
        {
            "nsrChunksWithSourceInfo": t.proxy(
                renames["QualityNsrNsrChunksWithSourceInfoOut"]
            ).optional(),
            "raffiaLookupKeys": t.array(t.string()).optional(),
            "encodedLookupInformation": t.string().optional(),
            "lastTimeProcessedGoldmineInSeconds": t.string(),
            "lastTimeProcessedMduInSeconds": t.string().optional(),
            "raffiaLookupKeyPerField": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "lastTimeProcessedRaffiaInSeconds": t.string().optional(),
            "raffiaLookupKey": t.string(),
            "goldmineLookupKeyPerField": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "raffiaSignalMergerUrl": t.string().optional(),
            "goldmineLookupKeys": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNsrDataMetadataOut"])
    types["SocialGraphApiProtoYearlyRecurrenceIn"] = t.struct(
        {
            "monthlyPattern": t.proxy(
                renames["SocialGraphApiProtoMonthlyRecurrenceIn"]
            ).optional(),
            "months": t.array(t.string()).optional(),
        }
    ).named(renames["SocialGraphApiProtoYearlyRecurrenceIn"])
    types["SocialGraphApiProtoYearlyRecurrenceOut"] = t.struct(
        {
            "monthlyPattern": t.proxy(
                renames["SocialGraphApiProtoMonthlyRecurrenceOut"]
            ).optional(),
            "months": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoYearlyRecurrenceOut"])
    types["GeostoreAccessPointProtoIn"] = t.struct(
        {
            "canExit": t.boolean().optional(),
            "featureType": t.integer().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "point": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "pointOnSegment": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "canEnter": t.boolean().optional(),
            "unsuitableTravelMode": t.array(t.string()).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "segmentPosition": t.number().optional(),
            "priority": t.string().optional(),
            "pointOffSegment": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "levelFeatureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreAccessPointProtoIn"])
    types["GeostoreAccessPointProtoOut"] = t.struct(
        {
            "canExit": t.boolean().optional(),
            "featureType": t.integer().optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "point": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "pointOnSegment": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "canEnter": t.boolean().optional(),
            "unsuitableTravelMode": t.array(t.string()).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "segmentPosition": t.number().optional(),
            "priority": t.string().optional(),
            "pointOffSegment": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "levelFeatureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAccessPointProtoOut"])
    types["VideoVideoStreamInfoDataStreamIn"] = t.struct(
        {
            "codecFourcc": t.string(),
            "codecId": t.string().optional(),
            "streamIndex": t.string().optional(),
            "streamCodecTag": t.string(),
        }
    ).named(renames["VideoVideoStreamInfoDataStreamIn"])
    types["VideoVideoStreamInfoDataStreamOut"] = t.struct(
        {
            "codecFourcc": t.string(),
            "codecId": t.string().optional(),
            "streamIndex": t.string().optional(),
            "streamCodecTag": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoVideoStreamInfoDataStreamOut"])
    types["QualityNsrNsrDataClusterUpliftIn"] = t.struct(
        {"small": t.number().optional(), "local": t.number().optional()}
    ).named(renames["QualityNsrNsrDataClusterUpliftIn"])
    types["QualityNsrNsrDataClusterUpliftOut"] = t.struct(
        {
            "small": t.number().optional(),
            "local": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNsrDataClusterUpliftOut"])
    types["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideIn"] = t.struct(
        {
            "updateMask": t.string().optional(),
            "deviceModelCapabilities": t.string().optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideIn"])
    types["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideOut"] = t.struct(
        {
            "updateMask": t.string().optional(),
            "deviceModelCapabilities": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverrideOut"])
    types["QualityPreviewChosenSnippetInfoIn"] = t.struct(
        {
            "isVulgar": t.boolean().optional(),
            "source": t.string().optional(),
            "trailingEllipsis": t.boolean().optional(),
            "tidbits": t.array(
                t.proxy(renames["QualityPreviewChosenSnippetInfoTidbitInfoIn"])
            ),
            "leadingTextType": t.string(),
            "snippetType": t.string(),
            "snippetHtml": t.string().optional(),
        }
    ).named(renames["QualityPreviewChosenSnippetInfoIn"])
    types["QualityPreviewChosenSnippetInfoOut"] = t.struct(
        {
            "isVulgar": t.boolean().optional(),
            "source": t.string().optional(),
            "trailingEllipsis": t.boolean().optional(),
            "tidbits": t.array(
                t.proxy(renames["QualityPreviewChosenSnippetInfoTidbitInfoOut"])
            ),
            "leadingTextType": t.string(),
            "snippetType": t.string(),
            "snippetHtml": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityPreviewChosenSnippetInfoOut"])
    types["AssistantLogsCommunicationPersonMetadataLogIn"] = t.struct(
        {
            "deviceContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationDeviceContactInfoLogIn"])
            )
        }
    ).named(renames["AssistantLogsCommunicationPersonMetadataLogIn"])
    types["AssistantLogsCommunicationPersonMetadataLogOut"] = t.struct(
        {
            "deviceContactInfo": t.array(
                t.proxy(renames["AssistantLogsCommunicationDeviceContactInfoLogOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsCommunicationPersonMetadataLogOut"])
    types["ClassifierPornQueryMultiLabelClassifierOutputIn"] = t.struct(
        {
            "violence": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "spoof": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "vulgar": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "offensive": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "csai": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "porn": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "medical": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "fringe": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
            "minor": t.proxy(renames["ClassifierPornQueryClassifierOutputIn"]),
        }
    ).named(renames["ClassifierPornQueryMultiLabelClassifierOutputIn"])
    types["ClassifierPornQueryMultiLabelClassifierOutputOut"] = t.struct(
        {
            "violence": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "spoof": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "vulgar": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "offensive": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "csai": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "porn": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "medical": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "fringe": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "minor": t.proxy(renames["ClassifierPornQueryClassifierOutputOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornQueryMultiLabelClassifierOutputOut"])
    types["AssistantApiAppCapabilitiesDeltaIn"] = t.struct(
        {
            "providerDelta": t.proxy(
                renames["AssistantApiCoreTypesProviderDeltaIn"]
            ).optional(),
            "appIntegrationsSettings": t.proxy(
                renames["AssistantApiAppIntegrationsSettingsIn"]
            ).optional(),
        }
    ).named(renames["AssistantApiAppCapabilitiesDeltaIn"])
    types["AssistantApiAppCapabilitiesDeltaOut"] = t.struct(
        {
            "providerDelta": t.proxy(
                renames["AssistantApiCoreTypesProviderDeltaOut"]
            ).optional(),
            "appIntegrationsSettings": t.proxy(
                renames["AssistantApiAppIntegrationsSettingsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiAppCapabilitiesDeltaOut"])
    types["GoogleCloudContentwarehouseV1DocumentReferenceIn"] = t.struct(
        {
            "documentIsFolder": t.boolean().optional(),
            "displayName": t.string().optional(),
            "snippet": t.string().optional(),
            "documentName": t.string(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentReferenceIn"])
    types["GoogleCloudContentwarehouseV1DocumentReferenceOut"] = t.struct(
        {
            "deleteTime": t.string().optional(),
            "updateTime": t.string().optional(),
            "documentIsFolder": t.boolean().optional(),
            "createTime": t.string().optional(),
            "displayName": t.string().optional(),
            "snippet": t.string().optional(),
            "documentName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentReferenceOut"])
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationIn"
    ] = t.struct({"_": t.string().optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationIn"]
    )
    types[
        "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationOut"
    ] = t.struct({"error": t.proxy(renames["ErrorResponse"]).optional()}).named(
        renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationOut"]
    )
    types["GoodocSemanticLabelTableDetailsIn"] = t.struct(
        {"Rows": t.integer(), "Columns": t.integer()}
    ).named(renames["GoodocSemanticLabelTableDetailsIn"])
    types["GoodocSemanticLabelTableDetailsOut"] = t.struct(
        {
            "Rows": t.integer(),
            "Columns": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSemanticLabelTableDetailsOut"])
    types["VideoContentSearchInstructionTrainingDataAnchorFeaturesIn"] = t.struct(
        {
            "instructionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoIn"])
            ).optional(),
            "bestDescriptionAndInstructionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoIn"])
            ).optional(),
            "bestAsrAndDescriptionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoIn"])
            ).optional(),
        }
    ).named(renames["VideoContentSearchInstructionTrainingDataAnchorFeaturesIn"])
    types["VideoContentSearchInstructionTrainingDataAnchorFeaturesOut"] = t.struct(
        {
            "instructionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoOut"])
            ).optional(),
            "bestDescriptionAndInstructionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoOut"])
            ).optional(),
            "bestAsrAndDescriptionAnchorsMatchInfo": t.array(
                t.proxy(renames["VideoContentSearchSimilarityMatchInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchInstructionTrainingDataAnchorFeaturesOut"])
    types["YoutubeDistillerModelScoreIn"] = t.struct(
        {
            "classifier": t.string().optional(),
            "score": t.number(),
            "model": t.string().optional(),
        }
    ).named(renames["YoutubeDistillerModelScoreIn"])
    types["YoutubeDistillerModelScoreOut"] = t.struct(
        {
            "classifier": t.string().optional(),
            "score": t.number(),
            "model": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeDistillerModelScoreOut"])
    types["ScienceCitationFundingIn"] = t.struct(
        {
            "DebugExtractionInfo": t.array(
                t.proxy(renames["ScienceCitationFundingExtractionInfoIn"])
            ).optional(),
            "AgencyName": t.string().optional(),
            "GrantNumber": t.string(),
            "Agency": t.integer().optional(),
            "Recipient": t.string().optional(),
            "SourceText": t.string().optional(),
            "DebugFundingTextBlock": t.string().optional(),
            "UrlBasedFundingSource": t.boolean().optional(),
        }
    ).named(renames["ScienceCitationFundingIn"])
    types["ScienceCitationFundingOut"] = t.struct(
        {
            "DebugExtractionInfo": t.array(
                t.proxy(renames["ScienceCitationFundingExtractionInfoOut"])
            ).optional(),
            "AgencyName": t.string().optional(),
            "GrantNumber": t.string(),
            "Agency": t.integer().optional(),
            "Recipient": t.string().optional(),
            "SourceText": t.string().optional(),
            "DebugFundingTextBlock": t.string().optional(),
            "UrlBasedFundingSource": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationFundingOut"])
    types["HtmlrenderWebkitHeadlessProtoDOMTreeNodeIn"] = t.struct(
        {
            "referencedResourceIndex": t.array(t.integer()).optional(),
            "isClickable": t.boolean().optional(),
            "childDomTreeNodeIndex": t.array(t.integer()).optional(),
            "renderTreeNodeIndex": t.array(t.integer()).optional(),
            "currentSourceUrl": t.string().optional(),
            "name": t.string().optional(),
            "htmlTagType": t.integer().optional(),
            "type": t.string(),
            "value": t.string().optional(),
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentIn"]
            ).optional(),
            "attribute": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeIn"])
            ),
            "originUrl": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeIn"])
    types["HtmlrenderWebkitHeadlessProtoDOMTreeNodeOut"] = t.struct(
        {
            "referencedResourceIndex": t.array(t.integer()).optional(),
            "isClickable": t.boolean().optional(),
            "childDomTreeNodeIndex": t.array(t.integer()).optional(),
            "renderTreeNodeIndex": t.array(t.integer()).optional(),
            "currentSourceUrl": t.string().optional(),
            "name": t.string().optional(),
            "htmlTagType": t.integer().optional(),
            "type": t.string(),
            "value": t.string().optional(),
            "document": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoDocumentOut"]
            ).optional(),
            "attribute": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttributeOut"])
            ),
            "originUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeOut"])
    types["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsIn"] = t.struct(
        {
            "section": t.string().optional(),
            "longitude": t.number().optional(),
            "floor": t.string().optional(),
            "city": t.string().optional(),
            "simpleName": t.string().optional(),
            "building": t.string().optional(),
            "latitude": t.number().optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsIn"])
    types["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsOut"] = t.struct(
        {
            "section": t.string().optional(),
            "longitude": t.number().optional(),
            "floor": t.string().optional(),
            "city": t.string().optional(),
            "simpleName": t.string().optional(),
            "building": t.string().optional(),
            "latitude": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesCalendarEventRoomRoomLocationDetailsOut"])
    types["VideoContentSearchCaptionLabelFeaturesIn"] = t.struct(
        {
            "contextText": t.string().optional(),
            "textSpanAtAlignedTime": t.string().optional(),
            "textSimilarityFeatures": t.proxy(
                renames["VideoContentSearchTextSimilarityFeaturesIn"]
            ).optional(),
            "labelText": t.string().optional(),
            "alignedOcrTexts": t.array(
                t.proxy(renames["VideoContentSearchOCRTextIn"])
            ).optional(),
            "alignedTime": t.string().optional(),
        }
    ).named(renames["VideoContentSearchCaptionLabelFeaturesIn"])
    types["VideoContentSearchCaptionLabelFeaturesOut"] = t.struct(
        {
            "contextText": t.string().optional(),
            "textSpanAtAlignedTime": t.string().optional(),
            "textSimilarityFeatures": t.proxy(
                renames["VideoContentSearchTextSimilarityFeaturesOut"]
            ).optional(),
            "labelText": t.string().optional(),
            "alignedOcrTexts": t.array(
                t.proxy(renames["VideoContentSearchOCRTextOut"])
            ).optional(),
            "alignedTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionLabelFeaturesOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountIn"] = t.struct(
        {
            "directGroupCount": t.string().optional(),
            "directUserCount": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountOut"] = t.struct(
        {
            "directGroupCount": t.string().optional(),
            "directUserCount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberCountOut"])
    types["NlpSemanticParsingModelsMediaMediaProviderInfoIn"] = t.struct(
        {
            "providerMid": t.string().optional(),
            "kgProviderKey": t.string().optional(),
            "mediaId": t.string().optional(),
            "deeplinkInfo": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaDeeplinkInfoIn"])
            ).optional(),
            "providerName": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaProviderInfoIn"])
    types["NlpSemanticParsingModelsMediaMediaProviderInfoOut"] = t.struct(
        {
            "providerMid": t.string().optional(),
            "kgProviderKey": t.string().optional(),
            "mediaId": t.string().optional(),
            "deeplinkInfo": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaDeeplinkInfoOut"])
            ).optional(),
            "providerName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaProviderInfoOut"])
    types["AbuseiamAndRestrictionIn"] = t.struct(
        {"child": t.array(t.proxy(renames["AbuseiamUserRestrictionIn"])).optional()}
    ).named(renames["AbuseiamAndRestrictionIn"])
    types["AbuseiamAndRestrictionOut"] = t.struct(
        {
            "child": t.array(t.proxy(renames["AbuseiamUserRestrictionOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamAndRestrictionOut"])
    types["RepositoryWebrefRefconQueryStatsIn"] = t.struct(
        {"aggregatedQueryCount": t.number().optional()}
    ).named(renames["RepositoryWebrefRefconQueryStatsIn"])
    types["RepositoryWebrefRefconQueryStatsOut"] = t.struct(
        {
            "aggregatedQueryCount": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefRefconQueryStatsOut"])
    types["VideoContentSearchBleurtFeaturesIn"] = t.struct(
        {"candidate": t.string(), "reference": t.string()}
    ).named(renames["VideoContentSearchBleurtFeaturesIn"])
    types["VideoContentSearchBleurtFeaturesOut"] = t.struct(
        {
            "candidate": t.string(),
            "reference": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchBleurtFeaturesOut"])
    types["RepositoryWebrefComponentReferenceIn"] = t.struct(
        {
            "funcallName": t.string().optional(),
            "index": t.integer().optional(),
            "debugEntity": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefComponentReferenceIn"])
    types["RepositoryWebrefComponentReferenceOut"] = t.struct(
        {
            "funcallName": t.string().optional(),
            "index": t.integer().optional(),
            "debugEntity": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefComponentReferenceOut"])
    types["IndexingEmbeddedContentFetchUrlResponseMetadataIn"] = t.struct(
        {
            "criticalResourceType": t.string(),
            "adsResourceType": t.string(),
            "robotsInfo": t.proxy(renames["IndexingConverterRobotsInfoIn"]).optional(),
            "crawlStatus": t.integer().optional(),
            "fetchWithSmartphoneUa": t.boolean().optional(),
            "isTrivialResource": t.boolean(),
            "isAdsResource": t.boolean(),
            "isCriticalResource": t.boolean(),
            "numTrawlerFetches": t.integer().optional(),
            "rewriteMethod": t.string().optional(),
        }
    ).named(renames["IndexingEmbeddedContentFetchUrlResponseMetadataIn"])
    types["IndexingEmbeddedContentFetchUrlResponseMetadataOut"] = t.struct(
        {
            "criticalResourceType": t.string(),
            "adsResourceType": t.string(),
            "robotsInfo": t.proxy(renames["IndexingConverterRobotsInfoOut"]).optional(),
            "crawlStatus": t.integer().optional(),
            "fetchWithSmartphoneUa": t.boolean().optional(),
            "isTrivialResource": t.boolean(),
            "isAdsResource": t.boolean(),
            "isCriticalResource": t.boolean(),
            "numTrawlerFetches": t.integer().optional(),
            "rewriteMethod": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentFetchUrlResponseMetadataOut"])
    types["NlpSciencelitArticleMetadataIn"] = t.struct(
        {
            "author": t.array(t.proxy(renames["NlpSciencelitAuthorIn"])).optional(),
            "dateStr": t.string().optional(),
            "pmid": t.string().optional(),
            "journal": t.string().optional(),
            "publicationType": t.array(
                t.proxy(renames["NlpSciencelitPublicationTypeIn"])
            ),
            "scamRestrictTokens": t.proxy(
                renames["ResearchScamV3RestrictIn"]
            ).optional(),
            "metadataSource": t.array(t.string()),
            "deleted": t.boolean().optional(),
            "heading": t.array(
                t.proxy(renames["NlpSciencelitMeshHeadingIn"])
            ).optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdIn"])),
            "url": t.array(t.string()).optional(),
            "language": t.string(),
            "lastRevisedDateStr": t.string().optional(),
            "issue": t.string(),
            "title": t.string().optional(),
            "dataset": t.array(t.proxy(renames["NlpSciencelitDatasetIn"])).optional(),
            "volume": t.string(),
            "abstract": t.proxy(renames["NlpSciencelitTokenizedTextIn"]).optional(),
            "parsedFrom": t.string().optional(),
        }
    ).named(renames["NlpSciencelitArticleMetadataIn"])
    types["NlpSciencelitArticleMetadataOut"] = t.struct(
        {
            "author": t.array(t.proxy(renames["NlpSciencelitAuthorOut"])).optional(),
            "dateStr": t.string().optional(),
            "pmid": t.string().optional(),
            "journal": t.string().optional(),
            "publicationType": t.array(
                t.proxy(renames["NlpSciencelitPublicationTypeOut"])
            ),
            "scamRestrictTokens": t.proxy(
                renames["ResearchScamV3RestrictOut"]
            ).optional(),
            "metadataSource": t.array(t.string()),
            "deleted": t.boolean().optional(),
            "heading": t.array(
                t.proxy(renames["NlpSciencelitMeshHeadingOut"])
            ).optional(),
            "articleId": t.array(t.proxy(renames["NlpSciencelitArticleIdOut"])),
            "url": t.array(t.string()).optional(),
            "language": t.string(),
            "lastRevisedDateStr": t.string().optional(),
            "issue": t.string(),
            "title": t.string().optional(),
            "dataset": t.array(t.proxy(renames["NlpSciencelitDatasetOut"])).optional(),
            "volume": t.string(),
            "abstract": t.proxy(renames["NlpSciencelitTokenizedTextOut"]).optional(),
            "parsedFrom": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSciencelitArticleMetadataOut"])
    types["AppsPeopleActivityStreamqualityDistillerEngagementsIn"] = t.struct(
        {
            "reportHarassment": t.string().optional(),
            "reportSpam": t.string().optional(),
            "ytThumbsDown": t.string().optional(),
            "serveCount": t.string().optional(),
            "reportHate": t.string().optional(),
            "timeSec": t.string().optional(),
            "reportPorn": t.string().optional(),
            "reportCompromised": t.string().optional(),
        }
    ).named(renames["AppsPeopleActivityStreamqualityDistillerEngagementsIn"])
    types["AppsPeopleActivityStreamqualityDistillerEngagementsOut"] = t.struct(
        {
            "reportHarassment": t.string().optional(),
            "reportSpam": t.string().optional(),
            "ytThumbsDown": t.string().optional(),
            "serveCount": t.string().optional(),
            "reportHate": t.string().optional(),
            "timeSec": t.string().optional(),
            "reportPorn": t.string().optional(),
            "reportCompromised": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleActivityStreamqualityDistillerEngagementsOut"])
    types["GeostoreFoodMenuItemOptionProtoIn"] = t.struct(
        {
            "nutritionFacts": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsIn"]
            ).optional(),
            "servesNumPeople": t.integer().optional(),
            "preparationMethods": t.array(t.string()).optional(),
            "calories": t.integer(),
            "allergenAbsent": t.array(t.string()),
            "price": t.proxy(renames["GeostorePriceRangeProtoIn"]).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoIn"])
            ).optional(),
            "allergenPresent": t.array(t.string()),
            "restriction": t.array(t.string()),
            "ingredients": t.array(
                t.proxy(renames["GeostoreFoodMenuItemOptionProtoIngredientIn"])
            ).optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoIn"])).optional(),
            "portionSize": t.proxy(
                renames["GeostoreFoodMenuItemOptionProtoPortionSizeIn"]
            ).optional(),
            "spiciness": t.string(),
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoIn"])
    types["GeostoreFoodMenuItemOptionProtoOut"] = t.struct(
        {
            "nutritionFacts": t.proxy(
                renames["GeostorePriceInfoFoodNutritionFactsOut"]
            ).optional(),
            "servesNumPeople": t.integer().optional(),
            "preparationMethods": t.array(t.string()).optional(),
            "calories": t.integer(),
            "allergenAbsent": t.array(t.string()),
            "price": t.proxy(renames["GeostorePriceRangeProtoOut"]).optional(),
            "nameInfo": t.array(
                t.proxy(renames["GeostorePriceListNameInfoProtoOut"])
            ).optional(),
            "allergenPresent": t.array(t.string()),
            "restriction": t.array(t.string()),
            "ingredients": t.array(
                t.proxy(renames["GeostoreFoodMenuItemOptionProtoIngredientOut"])
            ).optional(),
            "media": t.array(t.proxy(renames["GeostoreMediaItemProtoOut"])).optional(),
            "portionSize": t.proxy(
                renames["GeostoreFoodMenuItemOptionProtoPortionSizeOut"]
            ).optional(),
            "spiciness": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFoodMenuItemOptionProtoOut"])
    types["SocialGraphApiProtoPronunciationIn"] = t.struct(
        {
            "locale": t.string().optional(),
            "token": t.string().optional(),
            "phonologyType": t.string(),
            "spellingHint": t.string().optional(),
            "phonemes": t.string().optional(),
            "learningSessionId": t.string().optional(),
            "learningSource": t.string(),
        }
    ).named(renames["SocialGraphApiProtoPronunciationIn"])
    types["SocialGraphApiProtoPronunciationOut"] = t.struct(
        {
            "locale": t.string().optional(),
            "token": t.string().optional(),
            "phonologyType": t.string(),
            "spellingHint": t.string().optional(),
            "phonemes": t.string().optional(),
            "learningSessionId": t.string().optional(),
            "learningSource": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiProtoPronunciationOut"])
    types["ResearchScienceSearchDataSizeIn"] = t.struct(
        {"unit": t.string().optional(), "size": t.number().optional()}
    ).named(renames["ResearchScienceSearchDataSizeIn"])
    types["ResearchScienceSearchDataSizeOut"] = t.struct(
        {
            "unit": t.string().optional(),
            "size": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchDataSizeOut"])
    types["GeostoreBarrierLogicalMaterialProtoIn"] = t.struct(
        {"material": t.array(t.string())}
    ).named(renames["GeostoreBarrierLogicalMaterialProtoIn"])
    types["GeostoreBarrierLogicalMaterialProtoOut"] = t.struct(
        {
            "material": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBarrierLogicalMaterialProtoOut"])
    types["MediaIndexVideoFrameIn"] = t.struct(
        {
            "frameIdentifier": t.proxy(renames["MediaIndexFrameIdentifierIn"]),
            "thumbnailType": t.array(t.string()).optional(),
            "starburstTokensV4": t.array(t.string()).optional(),
            "starburstFeaturesV4": t.string().optional(),
            "regions": t.array(t.proxy(renames["MediaIndexRegionIn"])).optional(),
            "docid": t.string().optional(),
        }
    ).named(renames["MediaIndexVideoFrameIn"])
    types["MediaIndexVideoFrameOut"] = t.struct(
        {
            "frameIdentifier": t.proxy(renames["MediaIndexFrameIdentifierOut"]),
            "thumbnailType": t.array(t.string()).optional(),
            "starburstTokensV4": t.array(t.string()).optional(),
            "starburstFeaturesV4": t.string().optional(),
            "regions": t.array(t.proxy(renames["MediaIndexRegionOut"])).optional(),
            "docid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexVideoFrameOut"])
    types["ExtraSnippetInfoResponseIn"] = t.struct(
        {
            "matchinfo": t.proxy(renames["ExtraSnippetInfoResponseMatchInfoIn"]),
            "tidbit": t.array(t.proxy(renames["ExtraSnippetInfoResponseTidbitIn"])),
            "querysubitem": t.array(
                t.proxy(renames["ExtraSnippetInfoResponseQuerySubitemIn"])
            ),
        }
    ).named(renames["ExtraSnippetInfoResponseIn"])
    types["ExtraSnippetInfoResponseOut"] = t.struct(
        {
            "matchinfo": t.proxy(renames["ExtraSnippetInfoResponseMatchInfoOut"]),
            "tidbit": t.array(t.proxy(renames["ExtraSnippetInfoResponseTidbitOut"])),
            "querysubitem": t.array(
                t.proxy(renames["ExtraSnippetInfoResponseQuerySubitemOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseOut"])
    types["KnowledgeAnswersIntentQuerySaftSignalsIn"] = t.struct(
        {
            "entityType": t.string(),
            "isVerb": t.boolean().optional(),
            "number": t.string(),
            "isHeadOfIntent": t.boolean(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySaftSignalsIn"])
    types["KnowledgeAnswersIntentQuerySaftSignalsOut"] = t.struct(
        {
            "entityType": t.string(),
            "isVerb": t.boolean().optional(),
            "number": t.string(),
            "isHeadOfIntent": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySaftSignalsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataIn"] = t.struct(
        {
            "nameDisplayOptions": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsIn"
                ]
            ),
            "profileEditability": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityIn"
                ]
            ),
            "photosCompareData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataIn"
                ]
            ),
            "profileNameModificationHistory": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryIn"
                ]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataOut"] = t.struct(
        {
            "nameDisplayOptions": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptionsOut"
                ]
            ),
            "profileEditability": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityOut"
                ]
            ),
            "photosCompareData": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataOut"
                ]
            ),
            "profileNameModificationHistory": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistoryOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataOut"])
    types["CompositeDocExtraDupIn"] = t.struct(
        {"ecnFp": t.string().optional(), "url": t.string().optional()}
    ).named(renames["CompositeDocExtraDupIn"])
    types["CompositeDocExtraDupOut"] = t.struct(
        {
            "ecnFp": t.string().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocExtraDupOut"])
    types["GoodocFontSizeStatsIn"] = t.struct(
        {
            "medianLineSpace": t.integer().optional(),
            "numSymbols": t.integer(),
            "medianHeight": t.integer().optional(),
            "medianWidth": t.integer(),
            "medianLineHeight": t.integer().optional(),
            "medianLineSpan": t.integer().optional(),
            "numLineSpaces": t.integer().optional(),
            "numLines": t.integer().optional(),
            "fontId": t.integer().optional(),
            "fontSize": t.integer(),
        }
    ).named(renames["GoodocFontSizeStatsIn"])
    types["GoodocFontSizeStatsOut"] = t.struct(
        {
            "medianLineSpace": t.integer().optional(),
            "numSymbols": t.integer(),
            "medianHeight": t.integer().optional(),
            "medianWidth": t.integer(),
            "medianLineHeight": t.integer().optional(),
            "medianLineSpan": t.integer().optional(),
            "numLineSpaces": t.integer().optional(),
            "numLines": t.integer().optional(),
            "fontId": t.integer().optional(),
            "fontSize": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocFontSizeStatsOut"])
    types["OceanDataDocinfoWoodwingItemMetadataIn"] = t.struct(
        {
            "category": t.string(),
            "description": t.string(),
            "author": t.string(),
            "title": t.string(),
        }
    ).named(renames["OceanDataDocinfoWoodwingItemMetadataIn"])
    types["OceanDataDocinfoWoodwingItemMetadataOut"] = t.struct(
        {
            "category": t.string(),
            "description": t.string(),
            "author": t.string(),
            "title": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDataDocinfoWoodwingItemMetadataOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementIn"
    ] = t.struct(
        {
            "achievementUnlockedIconUrl": t.string().optional(),
            "rarityPercentage": t.number().optional(),
            "achievementName": t.string().optional(),
        }
    ).named(
        renames["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementIn"]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementOut"
    ] = t.struct(
        {
            "achievementUnlockedIconUrl": t.string().optional(),
            "rarityPercentage": t.number().optional(),
            "achievementName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievementOut"
        ]
    )
    types["AssistantApiSodaCapabilitiesIn"] = t.struct(
        {
            "supportsSimpleStop": t.boolean().optional(),
            "supportsHotwordSensitivity": t.boolean().optional(),
            "supportsWarmWords": t.boolean().optional(),
            "supportsSpeakerId": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSodaCapabilitiesIn"])
    types["AssistantApiSodaCapabilitiesOut"] = t.struct(
        {
            "supportsSimpleStop": t.boolean().optional(),
            "supportsHotwordSensitivity": t.boolean().optional(),
            "supportsWarmWords": t.boolean().optional(),
            "supportsSpeakerId": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSodaCapabilitiesOut"])
    types["RepositoryWebrefSubSegmentIndexIn"] = t.struct(
        {
            "queryIndex": t.proxy(renames["RepositoryWebrefQueryIndicesIn"]).optional(),
            "jgnIndex": t.proxy(
                renames["RepositoryWebrefJuggernautIndicesIn"]
            ).optional(),
            "genericIndex": t.proxy(
                renames["RepositoryWebrefGenericIndicesIn"]
            ).optional(),
            "imageQueryIndex": t.proxy(
                renames["RepositoryWebrefImageQueryIndicesIn"]
            ).optional(),
            "anchorIndex": t.proxy(
                renames["RepositoryWebrefAnchorIndicesIn"]
            ).optional(),
        }
    ).named(renames["RepositoryWebrefSubSegmentIndexIn"])
    types["RepositoryWebrefSubSegmentIndexOut"] = t.struct(
        {
            "queryIndex": t.proxy(
                renames["RepositoryWebrefQueryIndicesOut"]
            ).optional(),
            "jgnIndex": t.proxy(
                renames["RepositoryWebrefJuggernautIndicesOut"]
            ).optional(),
            "genericIndex": t.proxy(
                renames["RepositoryWebrefGenericIndicesOut"]
            ).optional(),
            "imageQueryIndex": t.proxy(
                renames["RepositoryWebrefImageQueryIndicesOut"]
            ).optional(),
            "anchorIndex": t.proxy(
                renames["RepositoryWebrefAnchorIndicesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSubSegmentIndexOut"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataIn"] = t.struct(
        {
            "gpayExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataIn"]
            ).optional(),
            "paisaExtendedData": t.proxy(
                renames["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataIn"]
            ).optional(),
            "peopleStackExtendedData": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataIn"
                ]
            ).optional(),
            "peopleStackPersonExtendedData": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataIn"
                ]
            ).optional(),
            "playGamesExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataIn"]
            ).optional(),
            "hangoutsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataIn"]
            ).optional(),
            "gplusExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataIn"]
            ).optional(),
            "domainName": t.array(t.string()).optional(),
            "dynamiteExtendedData": t.proxy(
                renames["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataIn"]
            ).optional(),
            "callerIdExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataIn"]
            ).optional(),
            "isPlaceholder": t.boolean().optional(),
            "aboutMeExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataIn"]
            ).optional(),
            "contactsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataIn"]
            ).optional(),
            "appsWaldoExtendedData": t.proxy(
                renames["SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataIn"]
            ).optional(),
            "tlsIsPlaceholder": t.boolean().optional(),
            "mapsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataIn"]
            ).optional(),
            "youtubeExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataIn"]
            ).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataIn"])
    types["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataOut"] = t.struct(
        {
            "gpayExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiGPayExtendedDataOut"]
            ).optional(),
            "paisaExtendedData": t.proxy(
                renames["SocialGraphWireProtoPeopleapiExtensionPaisaExtendedDataOut"]
            ).optional(),
            "peopleStackExtendedData": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedDataOut"
                ]
            ).optional(),
            "peopleStackPersonExtendedData": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedDataOut"
                ]
            ).optional(),
            "playGamesExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataOut"]
            ).optional(),
            "hangoutsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedDataOut"]
            ).optional(),
            "gplusExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiGplusExtendedDataOut"]
            ).optional(),
            "domainName": t.array(t.string()).optional(),
            "dynamiteExtendedData": t.proxy(
                renames["SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedDataOut"]
            ).optional(),
            "callerIdExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataOut"]
            ).optional(),
            "isPlaceholder": t.boolean().optional(),
            "aboutMeExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataOut"]
            ).optional(),
            "contactsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedDataOut"]
            ).optional(),
            "appsWaldoExtendedData": t.proxy(
                renames[
                    "SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedDataOut"
                ]
            ).optional(),
            "tlsIsPlaceholder": t.boolean().optional(),
            "mapsExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiMapsExtendedDataOut"]
            ).optional(),
            "youtubeExtendedData": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedDataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiPersonExtendedDataOut"])
    types["GeostorePolygonProtoIn"] = t.struct(
        {
            "baseMeters": t.number().optional(),
            "cellId": t.string().optional(),
            "heightMeters": t.number().optional(),
            "loop": t.array(t.proxy(renames["GeostorePolyLineProtoIn"])).optional(),
            "encoded": t.string().optional(),
            "unsuitableForDisplay": t.boolean().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
        }
    ).named(renames["GeostorePolygonProtoIn"])
    types["GeostorePolygonProtoOut"] = t.struct(
        {
            "baseMeters": t.number().optional(),
            "cellId": t.string().optional(),
            "heightMeters": t.number().optional(),
            "loop": t.array(t.proxy(renames["GeostorePolyLineProtoOut"])).optional(),
            "encoded": t.string().optional(),
            "unsuitableForDisplay": t.boolean().optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePolygonProtoOut"])
    types["OcrPhotoTextBoxIn"] = t.struct(
        {
            "symbolWidths": t.array(t.integer()).optional(),
            "box": t.proxy(renames["OcrPhotoBoundingBoxIn"]).optional(),
            "contentType": t.string().optional(),
            "text": t.string().optional(),
            "blockId": t.integer().optional(),
        }
    ).named(renames["OcrPhotoTextBoxIn"])
    types["OcrPhotoTextBoxOut"] = t.struct(
        {
            "symbolWidths": t.array(t.integer()).optional(),
            "box": t.proxy(renames["OcrPhotoBoundingBoxOut"]).optional(),
            "contentType": t.string().optional(),
            "text": t.string().optional(),
            "blockId": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OcrPhotoTextBoxOut"])
    types["AssistantApiSettingsWebviewFilterIn"] = t.struct(
        {"jasperWebviewConsent": t.boolean().optional(), "state": t.string()}
    ).named(renames["AssistantApiSettingsWebviewFilterIn"])
    types["AssistantApiSettingsWebviewFilterOut"] = t.struct(
        {
            "jasperWebviewConsent": t.boolean().optional(),
            "state": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsWebviewFilterOut"])
    types["ResearchScamCoscamDisjunctionIn"] = t.struct(
        {
            "key": t.string().optional(),
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupIn"])
            ).optional(),
        }
    ).named(renames["ResearchScamCoscamDisjunctionIn"])
    types["ResearchScamCoscamDisjunctionOut"] = t.struct(
        {
            "key": t.string().optional(),
            "tokenGroups": t.array(
                t.proxy(renames["ResearchScamCoscamTokenGroupOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamCoscamDisjunctionOut"])
    types["NlpSaftRelationIn"] = t.struct(
        {
            "kind": t.string(),
            "typeId": t.integer().optional(),
            "source": t.integer().optional(),
            "type": t.string().optional(),
            "target": t.integer(),
            "identifier": t.proxy(renames["NlpSaftIdentifierIn"]).optional(),
            "mention": t.array(t.proxy(renames["NlpSaftRelationMentionIn"])).optional(),
            "score": t.number().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["NlpSaftRelationIn"])
    types["NlpSaftRelationOut"] = t.struct(
        {
            "kind": t.string(),
            "typeId": t.integer().optional(),
            "source": t.integer().optional(),
            "type": t.string().optional(),
            "target": t.integer(),
            "identifier": t.proxy(renames["NlpSaftIdentifierOut"]).optional(),
            "mention": t.array(
                t.proxy(renames["NlpSaftRelationMentionOut"])
            ).optional(),
            "score": t.number().optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftRelationOut"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesIn"] = t.struct(
        {
            "shopping": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingIn"
                ]
            ).optional(),
            "translate": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateIn"
                ]
            ).optional(),
            "dining": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningIn"
                ]
            ).optional(),
            "text": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextIn"]
            ).optional(),
            "outdoor": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorIn"
                ]
            ).optional(),
            "education": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationIn"
                ]
            ).optional(),
        }
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesIn"])
    types["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOut"] = t.struct(
        {
            "shopping": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShoppingOut"
                ]
            ).optional(),
            "translate": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslateOut"
                ]
            ).optional(),
            "dining": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDiningOut"
                ]
            ).optional(),
            "text": t.proxy(
                renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTextOut"]
            ).optional(),
            "outdoor": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoorOut"
                ]
            ).optional(),
            "education": t.proxy(
                renames[
                    "AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducationOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOut"])
    types["GoogleCloudContentwarehouseV1RuleEvaluatorOutputIn"] = t.struct(
        {
            "invalidRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1InvalidRuleIn"])
            ).optional(),
            "matchedRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleIn"])
            ).optional(),
            "triggeredRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleIn"])
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleEvaluatorOutputIn"])
    types["GoogleCloudContentwarehouseV1RuleEvaluatorOutputOut"] = t.struct(
        {
            "invalidRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1InvalidRuleOut"])
            ).optional(),
            "matchedRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleOut"])
            ).optional(),
            "triggeredRules": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1RuleOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1RuleEvaluatorOutputOut"])
    types["RepositoryWebrefSimplifiedAnchorsIn"] = t.struct(
        {"anchor": t.array(t.proxy(renames["RepositoryWebrefSimplifiedAnchorIn"]))}
    ).named(renames["RepositoryWebrefSimplifiedAnchorsIn"])
    types["RepositoryWebrefSimplifiedAnchorsOut"] = t.struct(
        {
            "anchor": t.array(t.proxy(renames["RepositoryWebrefSimplifiedAnchorOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSimplifiedAnchorsOut"])
    types["AssistantGroundingRankerLaaFeaturesCommunicationEndpointIn"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesIn"]
            )
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesCommunicationEndpointIn"])
    types["AssistantGroundingRankerLaaFeaturesCommunicationEndpointOut"] = t.struct(
        {
            "assistantInteractionFeatures": t.proxy(
                renames["AssistantGroundingRankerAssistantInteractionFeaturesOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerLaaFeaturesCommunicationEndpointOut"])
    types["QualityDialogManagerLocalIntentOptionsIn"] = t.struct(
        {"intent": t.array(t.string()).optional()}
    ).named(renames["QualityDialogManagerLocalIntentOptionsIn"])
    types["QualityDialogManagerLocalIntentOptionsOut"] = t.struct(
        {
            "intent": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityDialogManagerLocalIntentOptionsOut"])
    types["KnowledgeAnswersIntentQuerySupportTransferSignalsIn"] = t.struct(
        {
            "supportTransferSource": t.array(t.string()).optional(),
            "supportTransferTarget": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySupportTransferSignalsIn"])
    types["KnowledgeAnswersIntentQuerySupportTransferSignalsOut"] = t.struct(
        {
            "supportTransferSource": t.array(t.string()).optional(),
            "supportTransferTarget": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQuerySupportTransferSignalsOut"])
    types["DrishtiSparseFeatureDataIn"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "label": t.array(t.string()).optional(),
            "value": t.array(t.number()),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
        }
    ).named(renames["DrishtiSparseFeatureDataIn"])
    types["DrishtiSparseFeatureDataOut"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "label": t.array(t.string()).optional(),
            "value": t.array(t.number()),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiSparseFeatureDataOut"])
    types["KnowledgeAnswersMarkerOpenQuestionIn"] = t.struct(
        {
            "slotKey": t.proxy(
                renames["KnowledgeAnswersMeaningSchemaSlotKeyIn"]
            ).optional(),
            "slotName": t.array(t.string()).optional(),
        }
    ).named(renames["KnowledgeAnswersMarkerOpenQuestionIn"])
    types["KnowledgeAnswersMarkerOpenQuestionOut"] = t.struct(
        {
            "slotKey": t.proxy(
                renames["KnowledgeAnswersMeaningSchemaSlotKeyOut"]
            ).optional(),
            "slotName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersMarkerOpenQuestionOut"])
    types["GeostoreParkingRestrictionProtoIn"] = t.struct(
        {
            "restrictedHours": t.proxy(
                renames["GeostoreTimeScheduleProtoIn"]
            ).optional(),
            "restrictionType": t.string().optional(),
            "serviceType": t.array(t.string()).optional(),
            "vehicleType": t.array(t.string()).optional(),
        }
    ).named(renames["GeostoreParkingRestrictionProtoIn"])
    types["GeostoreParkingRestrictionProtoOut"] = t.struct(
        {
            "restrictedHours": t.proxy(
                renames["GeostoreTimeScheduleProtoOut"]
            ).optional(),
            "restrictionType": t.string().optional(),
            "serviceType": t.array(t.string()).optional(),
            "vehicleType": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreParkingRestrictionProtoOut"])
    types["VendingConsumerProtoTrustedGenomePolicyTargetRegionIn"] = t.struct(
        {"localizedRegion": t.string().optional(), "mid": t.string().optional()}
    ).named(renames["VendingConsumerProtoTrustedGenomePolicyTargetRegionIn"])
    types["VendingConsumerProtoTrustedGenomePolicyTargetRegionOut"] = t.struct(
        {
            "localizedRegion": t.string().optional(),
            "mid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VendingConsumerProtoTrustedGenomePolicyTargetRegionOut"])
    types["AssistantVerticalsHomeautomationProtoAgentDeviceIdIn"] = t.struct(
        {"deviceId": t.string().optional(), "agentId": t.string().optional()}
    ).named(renames["AssistantVerticalsHomeautomationProtoAgentDeviceIdIn"])
    types["AssistantVerticalsHomeautomationProtoAgentDeviceIdOut"] = t.struct(
        {
            "deviceId": t.string().optional(),
            "agentId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAgentDeviceIdOut"])
    types["SocialStanzaDeliveryRestrictionIn"] = t.struct(
        {"doNotPublish": t.boolean()}
    ).named(renames["SocialStanzaDeliveryRestrictionIn"])
    types["SocialStanzaDeliveryRestrictionOut"] = t.struct(
        {
            "doNotPublish": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialStanzaDeliveryRestrictionOut"])
    types["TrawlerFetchReplyDataFetchStatsClientStateStatsIn"] = t.struct(
        {"WaitContentCacheUsec": t.integer()}
    ).named(renames["TrawlerFetchReplyDataFetchStatsClientStateStatsIn"])
    types["TrawlerFetchReplyDataFetchStatsClientStateStatsOut"] = t.struct(
        {
            "WaitContentCacheUsec": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TrawlerFetchReplyDataFetchStatsClientStateStatsOut"])
    types["NlpSaftEntityProfileAlternateIn"] = t.struct(
        {
            "form": t.integer().optional(),
            "name": t.string(),
            "count": t.integer(),
            "language": t.integer(),
            "frame": t.string().optional(),
            "sources": t.integer().optional(),
        }
    ).named(renames["NlpSaftEntityProfileAlternateIn"])
    types["NlpSaftEntityProfileAlternateOut"] = t.struct(
        {
            "form": t.integer().optional(),
            "name": t.string(),
            "count": t.integer(),
            "language": t.integer(),
            "frame": t.string().optional(),
            "sources": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileAlternateOut"])
    types["NlxDataSchemaTokenIn"] = t.struct(
        {
            "document": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "pos": t.string().optional(),
            "dependencyHead": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "sentence": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "paragraph": t.proxy(renames["MultiscalePointerIndexIn"]).optional(),
            "text": t.string().optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanIn"]).optional(),
            "dependencyLabel": t.string().optional(),
            "dependency": t.proxy(
                renames["NlxDataSchemaTokenDependencyEdgeIn"]
            ).optional(),
        }
    ).named(renames["NlxDataSchemaTokenIn"])
    types["NlxDataSchemaTokenOut"] = t.struct(
        {
            "document": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "pos": t.string().optional(),
            "dependencyHead": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "sentence": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "paragraph": t.proxy(renames["MultiscalePointerIndexOut"]).optional(),
            "text": t.string().optional(),
            "characters": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "bytes": t.proxy(renames["MultiscalePointerSpanOut"]).optional(),
            "dependencyLabel": t.string().optional(),
            "dependency": t.proxy(
                renames["NlxDataSchemaTokenDependencyEdgeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlxDataSchemaTokenOut"])
    types["NlpSaftDocumentTopicIn"] = t.struct(
        {"score": t.number().optional(), "name": t.string().optional()}
    ).named(renames["NlpSaftDocumentTopicIn"])
    types["NlpSaftDocumentTopicOut"] = t.struct(
        {
            "score": t.number().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftDocumentTopicOut"])
    types["IndexingConverterRedirectChainIn"] = t.struct(
        {"hop": t.array(t.proxy(renames["IndexingConverterRedirectChainHopIn"]))}
    ).named(renames["IndexingConverterRedirectChainIn"])
    types["IndexingConverterRedirectChainOut"] = t.struct(
        {
            "hop": t.array(t.proxy(renames["IndexingConverterRedirectChainHopOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingConverterRedirectChainOut"])
    types["OceanDocTagMagazineSpecificIn"] = t.struct(
        {
            "issueDescription": t.string().optional(),
            "otherNumberingStart": t.integer().optional(),
            "serialVolumeid": t.string(),
            "item": t.array(
                t.proxy(renames["OceanDataDocinfoWoodwingItemMetadataIn"])
            ).optional(),
            "otherNumberingEnd": t.integer(),
            "publicationDateEnd": t.string(),
            "displayDate": t.string().optional(),
            "issueStart": t.integer(),
            "otherNumberingSchema": t.integer().optional(),
            "issueEnd": t.integer(),
            "volume": t.integer(),
            "publicationDateStart": t.string(),
            "serialTitle": t.string().optional(),
            "pageToItem": t.array(t.integer()).optional(),
        }
    ).named(renames["OceanDocTagMagazineSpecificIn"])
    types["OceanDocTagMagazineSpecificOut"] = t.struct(
        {
            "issueDescription": t.string().optional(),
            "otherNumberingStart": t.integer().optional(),
            "serialVolumeid": t.string(),
            "item": t.array(
                t.proxy(renames["OceanDataDocinfoWoodwingItemMetadataOut"])
            ).optional(),
            "otherNumberingEnd": t.integer(),
            "publicationDateEnd": t.string(),
            "displayDate": t.string().optional(),
            "issueStart": t.integer(),
            "otherNumberingSchema": t.integer().optional(),
            "issueEnd": t.integer(),
            "volume": t.integer(),
            "publicationDateStart": t.string(),
            "serialTitle": t.string().optional(),
            "pageToItem": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanDocTagMagazineSpecificOut"])
    types["NlpSemanticParsingDatetimeMoonEventInfoIn"] = t.struct(
        {"type": t.string(), "phase": t.string()}
    ).named(renames["NlpSemanticParsingDatetimeMoonEventInfoIn"])
    types["NlpSemanticParsingDatetimeMoonEventInfoOut"] = t.struct(
        {
            "type": t.string(),
            "phase": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeMoonEventInfoOut"])
    types["VideoContentSearchTokenAlignmentIn"] = t.struct(
        {
            "hypothesisIndex": t.integer().optional(),
            "referenceIndex": t.integer().optional(),
            "tokenIsMatched": t.boolean().optional(),
            "referenceToken": t.string().optional(),
            "hypothesisToken": t.string().optional(),
        }
    ).named(renames["VideoContentSearchTokenAlignmentIn"])
    types["VideoContentSearchTokenAlignmentOut"] = t.struct(
        {
            "hypothesisIndex": t.integer().optional(),
            "referenceIndex": t.integer().optional(),
            "tokenIsMatched": t.boolean().optional(),
            "referenceToken": t.string().optional(),
            "hypothesisToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchTokenAlignmentOut"])
    types["CloudAiPlatformTenantresourceInfraSpannerConfigIn"] = t.struct(
        {
            "spannerNamespace": t.string(),
            "createDatabaseOptions": t.proxy(
                renames[
                    "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsIn"
                ]
            ).optional(),
            "sdlBundlePath": t.string().optional(),
            "kmsKeyReference": t.string().optional(),
            "spannerLocalNamePrefix": t.string(),
            "spannerUniverse": t.string().optional(),
            "spannerBorgServiceAccount": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceInfraSpannerConfigIn"])
    types["CloudAiPlatformTenantresourceInfraSpannerConfigOut"] = t.struct(
        {
            "spannerNamespace": t.string(),
            "createDatabaseOptions": t.proxy(
                renames[
                    "CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptionsOut"
                ]
            ).optional(),
            "sdlBundlePath": t.string().optional(),
            "kmsKeyReference": t.string().optional(),
            "spannerLocalNamePrefix": t.string(),
            "spannerUniverse": t.string().optional(),
            "spannerBorgServiceAccount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceInfraSpannerConfigOut"])
    types["HtmlrenderWebkitHeadlessProtoDocumentIn"] = t.struct(
        {
            "contentWidth": t.integer().optional(),
            "baseUri": t.string().optional(),
            "snapshotQualityScore": t.number().optional(),
            "scrollX": t.integer().optional(),
            "charset": t.string().optional(),
            "domTreeNode": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeIn"])
            ).optional(),
            "renderTreeNode": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeIn"])
            ).optional(),
            "renderTreeQualityScore": t.number().optional(),
            "frameName": t.string().optional(),
            "referencedResource": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceIn"])
            ).optional(),
            "title": t.string().optional(),
            "viewport": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ).optional(),
            "uri": t.string().optional(),
            "contentLanguage": t.string().optional(),
            "redirectHop": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRedirectHopIn"])
            ).optional(),
            "renderEvent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderEventIn"])
            ).optional(),
            "renderStyle": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoStyleIn"])
            ).optional(),
            "renderedContentArea": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxIn"]
            ).optional(),
            "javascriptTimeOfDay": t.number().optional(),
            "frameId": t.string().optional(),
            "scrollY": t.integer(),
            "contentHeight": t.integer(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDocumentIn"])
    types["HtmlrenderWebkitHeadlessProtoDocumentOut"] = t.struct(
        {
            "contentWidth": t.integer().optional(),
            "baseUri": t.string().optional(),
            "snapshotQualityScore": t.number().optional(),
            "scrollX": t.integer().optional(),
            "charset": t.string().optional(),
            "domTreeNode": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoDOMTreeNodeOut"])
            ).optional(),
            "renderTreeNode": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderTreeNodeOut"])
            ).optional(),
            "renderTreeQualityScore": t.number().optional(),
            "frameName": t.string().optional(),
            "referencedResource": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoReferencedResourceOut"])
            ).optional(),
            "title": t.string().optional(),
            "viewport": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ).optional(),
            "uri": t.string().optional(),
            "contentLanguage": t.string().optional(),
            "redirectHop": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRedirectHopOut"])
            ).optional(),
            "renderEvent": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoRenderEventOut"])
            ).optional(),
            "renderStyle": t.array(
                t.proxy(renames["HtmlrenderWebkitHeadlessProtoStyleOut"])
            ).optional(),
            "renderedContentArea": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoBoxOut"]
            ).optional(),
            "javascriptTimeOfDay": t.number().optional(),
            "frameId": t.string().optional(),
            "scrollY": t.integer(),
            "contentHeight": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoDocumentOut"])
    types["GoogleCloudContentwarehouseV1HistogramQueryResultIn"] = t.struct(
        {
            "histogram": t.struct({"_": t.string().optional()}).optional(),
            "histogramQuery": t.string().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1HistogramQueryResultIn"])
    types["GoogleCloudContentwarehouseV1HistogramQueryResultOut"] = t.struct(
        {
            "histogram": t.struct({"_": t.string().optional()}).optional(),
            "histogramQuery": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1HistogramQueryResultOut"])
    types["NlpSaftEntityProfileIn"] = t.struct(
        {
            "frame": t.string().optional(),
            "nature": t.string().optional(),
            "canonicalName": t.string().optional(),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "name": t.string().optional(),
            "annotations": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "disambiguation": t.string().optional(),
            "attribute": t.array(
                t.proxy(renames["NlpSaftEntityProfileAttributeIn"])
            ).optional(),
            "gender": t.string().optional(),
            "nameLanguage": t.integer().optional(),
            "reference": t.array(t.proxy(renames["NlpSaftEntityProfileReferenceIn"])),
            "embedding": t.array(t.number()).optional(),
            "keyword": t.array(t.proxy(renames["NlpSaftEntityProfileKeywordIn"])),
            "related": t.array(t.proxy(renames["NlpSaftEntityProfileRelatedIn"])),
            "alternate": t.array(t.proxy(renames["NlpSaftEntityProfileAlternateIn"])),
            "identifier": t.array(t.proxy(renames["NlpSaftIdentifierIn"])).optional(),
            "collectionScoreType": t.string(),
            "mid": t.string().optional(),
        }
    ).named(renames["NlpSaftEntityProfileIn"])
    types["NlpSaftEntityProfileOut"] = t.struct(
        {
            "frame": t.string().optional(),
            "nature": t.string().optional(),
            "canonicalName": t.string().optional(),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "name": t.string().optional(),
            "annotations": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "disambiguation": t.string().optional(),
            "attribute": t.array(
                t.proxy(renames["NlpSaftEntityProfileAttributeOut"])
            ).optional(),
            "gender": t.string().optional(),
            "nameLanguage": t.integer().optional(),
            "reference": t.array(t.proxy(renames["NlpSaftEntityProfileReferenceOut"])),
            "embedding": t.array(t.number()).optional(),
            "keyword": t.array(t.proxy(renames["NlpSaftEntityProfileKeywordOut"])),
            "related": t.array(t.proxy(renames["NlpSaftEntityProfileRelatedOut"])),
            "alternate": t.array(t.proxy(renames["NlpSaftEntityProfileAlternateOut"])),
            "identifier": t.array(t.proxy(renames["NlpSaftIdentifierOut"])).optional(),
            "collectionScoreType": t.string(),
            "mid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftEntityProfileOut"])
    types["QualityNsrExperimentalNsrTeamDataIn"] = t.struct(
        {
            "versionedSignals": t.array(
                t.proxy(renames["QualityNsrExperimentalNsrTeamScoringSignalIn"])
            )
        }
    ).named(renames["QualityNsrExperimentalNsrTeamDataIn"])
    types["QualityNsrExperimentalNsrTeamDataOut"] = t.struct(
        {
            "versionedSignals": t.array(
                t.proxy(renames["QualityNsrExperimentalNsrTeamScoringSignalOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrExperimentalNsrTeamDataOut"])
    types["WWWSnippetResponseBitmapPBIn"] = t.struct(
        {"size": t.integer(), "encoded": t.string()}
    ).named(renames["WWWSnippetResponseBitmapPBIn"])
    types["WWWSnippetResponseBitmapPBOut"] = t.struct(
        {
            "size": t.integer(),
            "encoded": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WWWSnippetResponseBitmapPBOut"])
    types["AssistantDevicesPlatformProtoInlinedActionCapabilityIn"] = t.struct(
        {
            "supportedDeviceOps": t.proxy(
                renames["AssistantDevicesPlatformProtoSupportedDeviceOpsIn"]
            ).optional(),
            "responseLimits": t.proxy(
                renames["AssistantDevicesPlatformProtoResponseLimitsIn"]
            ).optional(),
            "supportsMultiResponse": t.boolean().optional(),
            "alarm": t.proxy(
                renames["AssistantDevicesPlatformProtoAlarmCapabilityIn"]
            ).optional(),
            "supportSdkExecute": t.boolean().optional(),
            "timer": t.proxy(
                renames["AssistantDevicesPlatformProtoTimerCapabilityIn"]
            ).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoInlinedActionCapabilityIn"])
    types["AssistantDevicesPlatformProtoInlinedActionCapabilityOut"] = t.struct(
        {
            "supportedDeviceOps": t.proxy(
                renames["AssistantDevicesPlatformProtoSupportedDeviceOpsOut"]
            ).optional(),
            "responseLimits": t.proxy(
                renames["AssistantDevicesPlatformProtoResponseLimitsOut"]
            ).optional(),
            "supportsMultiResponse": t.boolean().optional(),
            "alarm": t.proxy(
                renames["AssistantDevicesPlatformProtoAlarmCapabilityOut"]
            ).optional(),
            "supportSdkExecute": t.boolean().optional(),
            "timer": t.proxy(
                renames["AssistantDevicesPlatformProtoTimerCapabilityOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoInlinedActionCapabilityOut"])
    types["AssistantApiCoreTypesSipProviderInfoIn"] = t.struct(
        {
            "useBirdsongTacl": t.boolean().optional(),
            "realm": t.string().optional(),
            "providerId": t.string().optional(),
        }
    ).named(renames["AssistantApiCoreTypesSipProviderInfoIn"])
    types["AssistantApiCoreTypesSipProviderInfoOut"] = t.struct(
        {
            "useBirdsongTacl": t.boolean().optional(),
            "realm": t.string().optional(),
            "providerId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesSipProviderInfoOut"])
    types["TravelFlightsNameCatalogProtoIn"] = t.struct(
        {"name": t.array(t.proxy(renames["TravelFlightsNameCatalogEntryIn"]))}
    ).named(renames["TravelFlightsNameCatalogProtoIn"])
    types["TravelFlightsNameCatalogProtoOut"] = t.struct(
        {
            "name": t.array(t.proxy(renames["TravelFlightsNameCatalogEntryOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsNameCatalogProtoOut"])
    types["AssistantApiSettingsPersonalizationMetadataIn"] = t.struct(
        {
            "personalResults": t.string(),
            "voiceMatch": t.string(),
            "faceMatch": t.string(),
        }
    ).named(renames["AssistantApiSettingsPersonalizationMetadataIn"])
    types["AssistantApiSettingsPersonalizationMetadataOut"] = t.struct(
        {
            "personalResults": t.string(),
            "voiceMatch": t.string(),
            "faceMatch": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsPersonalizationMetadataOut"])
    types["StorageGraphBfgPolicyMetadataIn"] = t.struct(
        {
            "policySourceType": t.string().optional(),
            "legalAllowedRegions": t.array(
                t.proxy(renames["KeGovernanceTypedRegionsIn"])
            ).optional(),
            "availabilityEndTimestamp": t.string().optional(),
            "legalRemovalRegions": t.array(
                t.proxy(renames["KeGovernanceTypedRegionsIn"])
            ).optional(),
            "policyDataScopeKeys": t.array(t.integer()).optional(),
            "umpPolicyMetadata": t.proxy(
                renames["StorageGraphBfgUmpPolicyMetadataIn"]
            ).optional(),
            "lmsPolicyMetadata": t.proxy(
                renames["StorageGraphBfgLmsPolicyMetadataIn"]
            ).optional(),
            "availabilityStartTimestamp": t.string().optional(),
        }
    ).named(renames["StorageGraphBfgPolicyMetadataIn"])
    types["StorageGraphBfgPolicyMetadataOut"] = t.struct(
        {
            "policySourceType": t.string().optional(),
            "legalAllowedRegions": t.array(
                t.proxy(renames["KeGovernanceTypedRegionsOut"])
            ).optional(),
            "availabilityEndTimestamp": t.string().optional(),
            "legalRemovalRegions": t.array(
                t.proxy(renames["KeGovernanceTypedRegionsOut"])
            ).optional(),
            "policyDataScopeKeys": t.array(t.integer()).optional(),
            "umpPolicyMetadata": t.proxy(
                renames["StorageGraphBfgUmpPolicyMetadataOut"]
            ).optional(),
            "lmsPolicyMetadata": t.proxy(
                renames["StorageGraphBfgLmsPolicyMetadataOut"]
            ).optional(),
            "availabilityStartTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StorageGraphBfgPolicyMetadataOut"])
    types["KnowledgeAnswersIntentQueryAnnotationLayerSignalsIn"] = t.struct(
        {
            "nimbleAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsIn"]
            ),
            "qrefAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryQrefAnnotationSignalsIn"]
            ),
            "customVehicleActionArgumentAnnotatorSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsIn"
                ]
            ),
            "freetextAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsIn"]
            ),
            "semanticAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsIn"]
            ),
            "ntprAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsIn"]
            ),
            "teleportArgumentAnnotatorSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsIn"]
            ),
        }
    ).named(renames["KnowledgeAnswersIntentQueryAnnotationLayerSignalsIn"])
    types["KnowledgeAnswersIntentQueryAnnotationLayerSignalsOut"] = t.struct(
        {
            "nimbleAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryNimbleAnnotationSignalsOut"]
            ),
            "qrefAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryQrefAnnotationSignalsOut"]
            ),
            "customVehicleActionArgumentAnnotatorSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignalsOut"
                ]
            ),
            "freetextAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsOut"]
            ),
            "semanticAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQuerySemanticAnnotationSignalsOut"]
            ),
            "ntprAnnotationSignals": t.proxy(
                renames["KnowledgeAnswersIntentQueryNTPRAnnotationSignalsOut"]
            ),
            "teleportArgumentAnnotatorSignals": t.proxy(
                renames[
                    "KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignalsOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryAnnotationLayerSignalsOut"])
    types["NlpSaftDocumentIn"] = t.struct(
        {
            "constituencyRoot": t.array(t.integer()).optional(),
            "date": t.string().optional(),
            "lastSignificantUpdate": t.string().optional(),
            "author": t.array(t.string()).optional(),
            "language": t.integer().optional(),
            "focusEntity": t.integer().optional(),
            "text": t.string().optional(),
            "measure": t.array(t.proxy(renames["NlpSaftMeasureIn"])).optional(),
            "token": t.array(t.proxy(renames["NlpSaftTokenIn"])).optional(),
            "annotations": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "title": t.string().optional(),
            "httpHeaders": t.string().optional(),
            "semanticNode": t.array(
                t.proxy(renames["NlpSaftSemanticNodeIn"])
            ).optional(),
            "entity": t.array(t.proxy(renames["NlpSaftEntityIn"])).optional(),
            "entityLabel": t.array(t.string()).optional(),
            "rpcError": t.boolean().optional(),
            "labeledSpans": t.struct({"_": t.string().optional()}).optional(),
            "docid": t.string().optional(),
            "golden": t.boolean().optional(),
            "contentage": t.string().optional(),
            "privacySensitive": t.boolean().optional(),
            "subsection": t.array(t.proxy(renames["NlpSaftDocumentIn"])).optional(),
            "contentType": t.integer().optional(),
            "annotatedPhrase": t.array(
                t.proxy(renames["NlpSaftAnnotatedPhraseIn"])
            ).optional(),
            "hyperlink": t.array(t.proxy(renames["NlpSaftHyperlinkIn"])).optional(),
            "bylineDate": t.string().optional(),
            "contentFirstseen": t.string().optional(),
            "topic": t.array(t.proxy(renames["NlpSaftDocumentTopicIn"])),
            "url": t.string().optional(),
            "syntacticDate": t.string().optional(),
            "constituencyNode": t.array(
                t.proxy(renames["NlpSaftConstituencyNodeIn"])
            ).optional(),
            "relation": t.array(t.proxy(renames["NlpSaftRelationIn"])).optional(),
            "trace": t.boolean().optional(),
        }
    ).named(renames["NlpSaftDocumentIn"])
    types["NlpSaftDocumentOut"] = t.struct(
        {
            "constituencyRoot": t.array(t.integer()).optional(),
            "date": t.string().optional(),
            "lastSignificantUpdate": t.string().optional(),
            "author": t.array(t.string()).optional(),
            "language": t.integer().optional(),
            "focusEntity": t.integer().optional(),
            "text": t.string().optional(),
            "measure": t.array(t.proxy(renames["NlpSaftMeasureOut"])).optional(),
            "token": t.array(t.proxy(renames["NlpSaftTokenOut"])).optional(),
            "annotations": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "title": t.string().optional(),
            "httpHeaders": t.string().optional(),
            "semanticNode": t.array(
                t.proxy(renames["NlpSaftSemanticNodeOut"])
            ).optional(),
            "entity": t.array(t.proxy(renames["NlpSaftEntityOut"])).optional(),
            "entityLabel": t.array(t.string()).optional(),
            "rpcError": t.boolean().optional(),
            "labeledSpans": t.struct({"_": t.string().optional()}).optional(),
            "docid": t.string().optional(),
            "golden": t.boolean().optional(),
            "contentage": t.string().optional(),
            "privacySensitive": t.boolean().optional(),
            "subsection": t.array(t.proxy(renames["NlpSaftDocumentOut"])).optional(),
            "contentType": t.integer().optional(),
            "annotatedPhrase": t.array(
                t.proxy(renames["NlpSaftAnnotatedPhraseOut"])
            ).optional(),
            "hyperlink": t.array(t.proxy(renames["NlpSaftHyperlinkOut"])).optional(),
            "bylineDate": t.string().optional(),
            "contentFirstseen": t.string().optional(),
            "topic": t.array(t.proxy(renames["NlpSaftDocumentTopicOut"])),
            "url": t.string().optional(),
            "syntacticDate": t.string().optional(),
            "constituencyNode": t.array(
                t.proxy(renames["NlpSaftConstituencyNodeOut"])
            ).optional(),
            "relation": t.array(t.proxy(renames["NlpSaftRelationOut"])).optional(),
            "trace": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftDocumentOut"])
    types["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaIn"] = t.struct(
        {"sourceProperty": t.string()}
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaIn"])
    types["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaOut"] = t.struct(
        {
            "sourceProperty": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingUrlSourceInfoNewSchemaOut"])
    types["CountryClickDistributionIn"] = t.struct(
        {
            "total": t.number().optional(),
            "confidence": t.number().optional(),
            "item": t.array(t.proxy(renames["CountryClickDistributionItemIn"])),
        }
    ).named(renames["CountryClickDistributionIn"])
    types["CountryClickDistributionOut"] = t.struct(
        {
            "total": t.number().optional(),
            "confidence": t.number().optional(),
            "item": t.array(t.proxy(renames["CountryClickDistributionItemOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryClickDistributionOut"])
    types["NlpSemanticParsingModelsMediaMediaAnnotationListIn"] = t.struct(
        {
            "annotation": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaMediaAnnotationIn"])
            )
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaAnnotationListIn"])
    types["NlpSemanticParsingModelsMediaMediaAnnotationListOut"] = t.struct(
        {
            "annotation": t.array(
                t.proxy(renames["NlpSemanticParsingModelsMediaMediaAnnotationOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaMediaAnnotationListOut"])
    types["CountryLocationInfoIn"] = t.struct(
        {
            "country": t.string().optional(),
            "state": t.string(),
            "subLocality": t.string(),
            "county": t.string(),
            "type": t.string().optional(),
            "center": t.proxy(renames["GeostorePointProtoIn"]).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "stateIdFprint": t.integer().optional(),
            "city": t.string(),
            "enclosingStateFeatureId": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
        }
    ).named(renames["CountryLocationInfoIn"])
    types["CountryLocationInfoOut"] = t.struct(
        {
            "country": t.string().optional(),
            "state": t.string(),
            "subLocality": t.string(),
            "county": t.string(),
            "type": t.string().optional(),
            "center": t.proxy(renames["GeostorePointProtoOut"]).optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "stateIdFprint": t.integer().optional(),
            "city": t.string(),
            "enclosingStateFeatureId": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountryLocationInfoOut"])
    types["AssistantApiCoreTypesImageIn"] = t.struct(
        {
            "providerUrl": t.string().optional(),
            "jsonContent": t.string().optional(),
            "height": t.integer(),
            "content": t.string().optional(),
            "imageSource": t.string().optional(),
            "sourceUrl": t.string().optional(),
            "letterDrawableText": t.string().optional(),
            "accessibilityText": t.string().optional(),
            "width": t.integer().optional(),
            "sourceUrlType": t.string().optional(),
            "appIconIdentifier": t.string().optional(),
            "badgeImage": t.proxy(renames["AssistantApiCoreTypesImageIn"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesImageIn"])
    types["AssistantApiCoreTypesImageOut"] = t.struct(
        {
            "providerUrl": t.string().optional(),
            "jsonContent": t.string().optional(),
            "height": t.integer(),
            "content": t.string().optional(),
            "imageSource": t.string().optional(),
            "sourceUrl": t.string().optional(),
            "letterDrawableText": t.string().optional(),
            "accessibilityText": t.string().optional(),
            "width": t.integer().optional(),
            "sourceUrlType": t.string().optional(),
            "appIconIdentifier": t.string().optional(),
            "badgeImage": t.proxy(renames["AssistantApiCoreTypesImageOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesImageOut"])
    types["QualityNsrNsrDataIn"] = t.struct(
        {
            "pnavClicks": t.number().optional(),
            "vlqNsr": t.number().optional(),
            "nsrEpoch": t.string().optional(),
            "ymylNewsV2Score": t.number(),
            "i18nBucket": t.integer().optional(),
            "sitePr": t.number(),
            "clusterId": t.integer().optional(),
            "url": t.string(),
            "chardVariance": t.number(),
            "isCovidLocalAuthority": t.boolean().optional(),
            "largeOrgId": t.integer(),
            "spambrainLavcScore": t.number().optional(),
            "isVideoFocusedSite": t.boolean().optional(),
            "impressions": t.number().optional(),
            "spambrainLavcScores": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalIn"])
            ),
            "siteAutopilotScore": t.number().optional(),
            "articleScoreV2": t.number(),
            "chardEncoded": t.integer().optional(),
            "directFrac": t.number(),
            "siteChunkSource": t.string().optional(),
            "isElectionAuthority": t.boolean().optional(),
            "newNsr": t.number().optional(),
            "siteQualityStddev": t.number().optional(),
            "localityScore": t.number().optional(),
            "host": t.string(),
            "siteChunk": t.string().optional(),
            "tofu": t.number().optional(),
            "secondarySiteChunk": t.string().optional(),
            "articleScore": t.number().optional(),
            "clusterUplift": t.proxy(renames["QualityNsrNsrDataClusterUpliftIn"]),
            "shoppingScore": t.number(),
            "priorAdjustedNsr": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalIn"])
            ).optional(),
            "language": t.integer(),
            "videoScore": t.number(),
            "nsr": t.number(),
            "metadata": t.proxy(renames["QualityNsrNsrDataMetadataIn"]),
            "healthScore": t.number().optional(),
            "nsrdataFromFallbackPatternKey": t.boolean().optional(),
            "vlq": t.number().optional(),
            "clutterScore": t.number().optional(),
            "clutterScores": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalIn"])
            ),
            "ugcScore": t.number(),
            "versionedData": t.array(
                t.proxy(renames["QualityNsrNSRVersionedDataIn"])
            ).optional(),
            "siteLinkOut": t.number().optional(),
            "pnav": t.number().optional(),
            "siteLinkIn": t.number().optional(),
            "nsrOverrideBid": t.number().optional(),
            "nsrVariance": t.number().optional(),
        }
    ).named(renames["QualityNsrNsrDataIn"])
    types["QualityNsrNsrDataOut"] = t.struct(
        {
            "pnavClicks": t.number().optional(),
            "vlqNsr": t.number().optional(),
            "nsrEpoch": t.string().optional(),
            "ymylNewsV2Score": t.number(),
            "i18nBucket": t.integer().optional(),
            "sitePr": t.number(),
            "clusterId": t.integer().optional(),
            "url": t.string(),
            "chardVariance": t.number(),
            "isCovidLocalAuthority": t.boolean().optional(),
            "largeOrgId": t.integer(),
            "spambrainLavcScore": t.number().optional(),
            "isVideoFocusedSite": t.boolean().optional(),
            "impressions": t.number().optional(),
            "spambrainLavcScores": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalOut"])
            ),
            "siteAutopilotScore": t.number().optional(),
            "articleScoreV2": t.number(),
            "chardEncoded": t.integer().optional(),
            "directFrac": t.number(),
            "siteChunkSource": t.string().optional(),
            "isElectionAuthority": t.boolean().optional(),
            "newNsr": t.number().optional(),
            "siteQualityStddev": t.number().optional(),
            "localityScore": t.number().optional(),
            "host": t.string(),
            "siteChunk": t.string().optional(),
            "tofu": t.number().optional(),
            "secondarySiteChunk": t.string().optional(),
            "articleScore": t.number().optional(),
            "clusterUplift": t.proxy(renames["QualityNsrNsrDataClusterUpliftOut"]),
            "shoppingScore": t.number(),
            "priorAdjustedNsr": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalOut"])
            ).optional(),
            "language": t.integer(),
            "videoScore": t.number(),
            "nsr": t.number(),
            "metadata": t.proxy(renames["QualityNsrNsrDataMetadataOut"]),
            "healthScore": t.number().optional(),
            "nsrdataFromFallbackPatternKey": t.boolean().optional(),
            "vlq": t.number().optional(),
            "clutterScore": t.number().optional(),
            "clutterScores": t.array(
                t.proxy(renames["QualityNsrVersionedFloatSignalOut"])
            ),
            "ugcScore": t.number(),
            "versionedData": t.array(
                t.proxy(renames["QualityNsrNSRVersionedDataOut"])
            ).optional(),
            "siteLinkOut": t.number().optional(),
            "pnav": t.number().optional(),
            "siteLinkIn": t.number().optional(),
            "nsrOverrideBid": t.number().optional(),
            "nsrVariance": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrNsrDataOut"])
    types["NlpSemanticParsingModelsMediaCastDeviceAnnotationIn"] = t.struct(
        {
            "creationTimestampMs": t.string().optional(),
            "name": t.string(),
            "deviceId": t.string().optional(),
            "quantification": t.proxy(
                renames["NlpSemanticParsingModelsMediaQuantificationIn"]
            ).optional(),
            "deviceIdentifier": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdIn"]
            ).optional(),
            "castDeviceSource": t.string(),
            "castDeviceType": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaCastDeviceAnnotationIn"])
    types["NlpSemanticParsingModelsMediaCastDeviceAnnotationOut"] = t.struct(
        {
            "creationTimestampMs": t.string().optional(),
            "name": t.string(),
            "deviceId": t.string().optional(),
            "quantification": t.proxy(
                renames["NlpSemanticParsingModelsMediaQuantificationOut"]
            ).optional(),
            "deviceIdentifier": t.proxy(
                renames["AssistantApiCoreTypesDeviceIdOut"]
            ).optional(),
            "castDeviceSource": t.string(),
            "castDeviceType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaCastDeviceAnnotationOut"])
    types["GeostoreExceptionalHoursProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "range": t.proxy(renames["GeostoreTimeIntervalProtoIn"]).optional(),
            "hours": t.proxy(renames["GeostoreBusinessHoursProtoIn"]).optional(),
        }
    ).named(renames["GeostoreExceptionalHoursProtoIn"])
    types["GeostoreExceptionalHoursProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "range": t.proxy(renames["GeostoreTimeIntervalProtoOut"]).optional(),
            "hours": t.proxy(renames["GeostoreBusinessHoursProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreExceptionalHoursProtoOut"])
    types["AbuseiamNameValuePairIn"] = t.struct(
        {"nonUtf8Value": t.string(), "value": t.string(), "name": t.string()}
    ).named(renames["AbuseiamNameValuePairIn"])
    types["AbuseiamNameValuePairOut"] = t.struct(
        {
            "nonUtf8Value": t.string(),
            "value": t.string(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamNameValuePairOut"])
    types["VideoContentSearchCaptionEntityAnchorFeaturesIn"] = t.struct(
        {
            "hypernymConfidence": t.number().optional(),
            "previousAsrSentence": t.string().optional(),
            "entityDescription": t.string().optional(),
            "hypernymCount": t.number().optional(),
            "mentionConfidence": t.number().optional(),
            "isProduct": t.boolean().optional(),
            "mentions": t.integer().optional(),
            "bertScores": t.array(t.number()).optional(),
            "groupCohesion": t.number().optional(),
            "estimatedMentionTime": t.integer().optional(),
            "nextAsrSentence": t.string().optional(),
            "isOracleEntity": t.boolean().optional(),
            "durationCoverage": t.number().optional(),
            "otherAsrMentionText": t.array(t.string()).optional(),
            "maxMentionConfidence": t.number().optional(),
            "asrMentionTranscriptOffset": t.integer().optional(),
            "msFromLastAnchor": t.integer().optional(),
            "webrefEntityTopicality": t.number().optional(),
            "trustedNameConfidence": t.number().optional(),
            "broadness": t.number().optional(),
            "entityConnectedness": t.number().optional(),
            "entityMentionInDescription": t.boolean().optional(),
            "asrStartTime": t.integer().optional(),
            "otherEstimatedMentionTimes": t.array(t.integer()).optional(),
            "inWebrefEntities": t.boolean().optional(),
            "hyperpediaSalientTermsSimilarity": t.number().optional(),
            "entityInfo": t.proxy(
                renames["VideoContentSearchCaptionEntityDocInfoIn"]
            ).optional(),
            "asrSentence": t.string().optional(),
            "asrMentionText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityAnchorFeaturesIn"])
    types["VideoContentSearchCaptionEntityAnchorFeaturesOut"] = t.struct(
        {
            "hypernymConfidence": t.number().optional(),
            "previousAsrSentence": t.string().optional(),
            "entityDescription": t.string().optional(),
            "hypernymCount": t.number().optional(),
            "mentionConfidence": t.number().optional(),
            "isProduct": t.boolean().optional(),
            "mentions": t.integer().optional(),
            "bertScores": t.array(t.number()).optional(),
            "groupCohesion": t.number().optional(),
            "estimatedMentionTime": t.integer().optional(),
            "nextAsrSentence": t.string().optional(),
            "isOracleEntity": t.boolean().optional(),
            "durationCoverage": t.number().optional(),
            "otherAsrMentionText": t.array(t.string()).optional(),
            "maxMentionConfidence": t.number().optional(),
            "asrMentionTranscriptOffset": t.integer().optional(),
            "msFromLastAnchor": t.integer().optional(),
            "webrefEntityTopicality": t.number().optional(),
            "trustedNameConfidence": t.number().optional(),
            "broadness": t.number().optional(),
            "entityConnectedness": t.number().optional(),
            "entityMentionInDescription": t.boolean().optional(),
            "asrStartTime": t.integer().optional(),
            "otherEstimatedMentionTimes": t.array(t.integer()).optional(),
            "inWebrefEntities": t.boolean().optional(),
            "hyperpediaSalientTermsSimilarity": t.number().optional(),
            "entityInfo": t.proxy(
                renames["VideoContentSearchCaptionEntityDocInfoOut"]
            ).optional(),
            "asrSentence": t.string().optional(),
            "asrMentionText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionEntityAnchorFeaturesOut"])
    types["GoodocSymbolSymbolVariantIn"] = t.struct(
        {"Code": t.integer(), "Confidence": t.integer()}
    ).named(renames["GoodocSymbolSymbolVariantIn"])
    types["GoodocSymbolSymbolVariantOut"] = t.struct(
        {
            "Code": t.integer(),
            "Confidence": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocSymbolSymbolVariantOut"])
    types["NlpSemanticParsingDatetimeDateTimePropertyIn"] = t.struct(
        {
            "sourceTypeList": t.proxy(renames["CopleySourceTypeListIn"]).optional(),
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeIn"]
            ).optional(),
            "metadata": t.string().optional(),
            "timezoneIsExplicit": t.boolean().optional(),
            "sourceCalendar": t.string(),
            "hourStatus": t.string(),
            "dateFormat": t.string(),
            "relationToReference": t.string(),
            "expandYearToCurrent": t.boolean(),
            "inferredDateValue": t.string(),
            "personalReferenceMetadata": t.proxy(
                renames["CopleyPersonalReferenceMetadataIn"]
            ).optional(),
            "timeFormat": t.array(t.string()),
        }
    ).named(renames["NlpSemanticParsingDatetimeDateTimePropertyIn"])
    types["NlpSemanticParsingDatetimeDateTimePropertyOut"] = t.struct(
        {
            "sourceTypeList": t.proxy(renames["CopleySourceTypeListOut"]).optional(),
            "relative": t.proxy(
                renames["NlpSemanticParsingDatetimeRelativeDateTimeOut"]
            ).optional(),
            "metadata": t.string().optional(),
            "timezoneIsExplicit": t.boolean().optional(),
            "sourceCalendar": t.string(),
            "hourStatus": t.string(),
            "dateFormat": t.string(),
            "relationToReference": t.string(),
            "expandYearToCurrent": t.boolean(),
            "inferredDateValue": t.string(),
            "personalReferenceMetadata": t.proxy(
                renames["CopleyPersonalReferenceMetadataOut"]
            ).optional(),
            "timeFormat": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingDatetimeDateTimePropertyOut"])
    types["KnowledgeGraphNestedStructIn"] = t.struct(
        {
            "predicateObjs": t.array(
                t.proxy(renames["KnowledgeGraphNestedStructPredicateObjsIn"])
            ).optional()
        }
    ).named(renames["KnowledgeGraphNestedStructIn"])
    types["KnowledgeGraphNestedStructOut"] = t.struct(
        {
            "predicateObjs": t.array(
                t.proxy(renames["KnowledgeGraphNestedStructPredicateObjsOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeGraphNestedStructOut"])
    types["SocialGraphApiAppContactDataIn"] = t.struct(
        {
            "data": t.array(t.proxy(renames["SocialGraphApiDataColumnIn"])).optional(),
            "mimetype": t.string().optional(),
        }
    ).named(renames["SocialGraphApiAppContactDataIn"])
    types["SocialGraphApiAppContactDataOut"] = t.struct(
        {
            "data": t.array(t.proxy(renames["SocialGraphApiDataColumnOut"])).optional(),
            "mimetype": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialGraphApiAppContactDataOut"])
    types["GoogleCloudContentwarehouseV1PropertyIn"] = t.struct(
        {
            "integerValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1IntegerArrayIn"]
            ).optional(),
            "enumValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumArrayIn"]
            ).optional(),
            "floatValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1FloatArrayIn"]
            ).optional(),
            "textValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1TextArrayIn"]
            ).optional(),
            "name": t.string(),
            "mapProperty": t.proxy(
                renames["GoogleCloudContentwarehouseV1MapPropertyIn"]
            ).optional(),
            "dateTimeValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1DateTimeArrayIn"]
            ).optional(),
            "propertyValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1PropertyArrayIn"]
            ).optional(),
            "timestampValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampArrayIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyIn"])
    types["GoogleCloudContentwarehouseV1PropertyOut"] = t.struct(
        {
            "integerValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1IntegerArrayOut"]
            ).optional(),
            "enumValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1EnumArrayOut"]
            ).optional(),
            "floatValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1FloatArrayOut"]
            ).optional(),
            "textValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1TextArrayOut"]
            ).optional(),
            "name": t.string(),
            "mapProperty": t.proxy(
                renames["GoogleCloudContentwarehouseV1MapPropertyOut"]
            ).optional(),
            "dateTimeValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1DateTimeArrayOut"]
            ).optional(),
            "propertyValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1PropertyArrayOut"]
            ).optional(),
            "timestampValues": t.proxy(
                renames["GoogleCloudContentwarehouseV1TimestampArrayOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1PropertyOut"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailCertificateIn"] = t.struct(
        {
            "configurationName": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ).optional(),
            "status": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusIn"
                ]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailCertificateIn"])
    types["AppsPeopleOzExternalMergedpeopleapiEmailCertificateOut"] = t.struct(
        {
            "configurationName": t.string().optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ).optional(),
            "status": t.proxy(
                renames[
                    "AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatusOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiEmailCertificateOut"])
    types["GeostoreBoundingMarkerProtoIn"] = t.struct(
        {
            "boundingMarker": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "side": t.string().optional(),
            "markerAdjacencyBeginFraction": t.number().optional(),
            "flowlineAdjacencyBeginFraction": t.number().optional(),
            "flowlineAdjacencyEndFraction": t.number(),
            "markerAdjacencyEndFraction": t.number(),
            "boundingMarkerToken": t.string().optional(),
        }
    ).named(renames["GeostoreBoundingMarkerProtoIn"])
    types["GeostoreBoundingMarkerProtoOut"] = t.struct(
        {
            "boundingMarker": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "side": t.string().optional(),
            "markerAdjacencyBeginFraction": t.number().optional(),
            "flowlineAdjacencyBeginFraction": t.number().optional(),
            "flowlineAdjacencyEndFraction": t.number(),
            "markerAdjacencyEndFraction": t.number(),
            "boundingMarkerToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreBoundingMarkerProtoOut"])
    types["RepositoryWebrefPreprocessingNameEntityScoresIn"] = t.struct(
        {"priorScore": t.number().optional(), "volumeBasedScore": t.number().optional()}
    ).named(renames["RepositoryWebrefPreprocessingNameEntityScoresIn"])
    types["RepositoryWebrefPreprocessingNameEntityScoresOut"] = t.struct(
        {
            "priorScore": t.number().optional(),
            "volumeBasedScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefPreprocessingNameEntityScoresOut"])
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityIn"
    ] = t.struct({"lockedField": t.array(t.string()).optional()}).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityIn"
        ]
    )
    types[
        "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityOut"
    ] = t.struct(
        {
            "lockedField": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditabilityOut"
        ]
    )
    types["RepositoryWebrefLightweightTokensMatchedLightweightTokenIn"] = t.struct(
        {
            "additionalBeginOffset": t.integer().optional(),
            "type": t.string().optional(),
            "endOffset": t.integer().optional(),
            "patternId": t.string().optional(),
            "beginOffset": t.integer().optional(),
            "sourceEntityIndex": t.integer().optional(),
            "additionalEndOffset": t.integer().optional(),
        }
    ).named(renames["RepositoryWebrefLightweightTokensMatchedLightweightTokenIn"])
    types["RepositoryWebrefLightweightTokensMatchedLightweightTokenOut"] = t.struct(
        {
            "additionalBeginOffset": t.integer().optional(),
            "type": t.string().optional(),
            "endOffset": t.integer().optional(),
            "patternId": t.string().optional(),
            "beginOffset": t.integer().optional(),
            "sourceEntityIndex": t.integer().optional(),
            "additionalEndOffset": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefLightweightTokensMatchedLightweightTokenOut"])
    types["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentIn"] = t.struct(
        {"endIndex": t.string().optional(), "startIndex": t.string().optional()}
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentIn"])
    types["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentOut"] = t.struct(
        {
            "endIndex": t.string().optional(),
            "startIndex": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentOut"])
    types["KnowledgeAnswersMeaningSchemaKeyIn"] = t.struct(
        {"deprecatedVersion": t.string().optional(), "mid": t.string().optional()}
    ).named(renames["KnowledgeAnswersMeaningSchemaKeyIn"])
    types["KnowledgeAnswersMeaningSchemaKeyOut"] = t.struct(
        {
            "deprecatedVersion": t.string().optional(),
            "mid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersMeaningSchemaKeyOut"])
    types["KaltixPerDocDataIn"] = t.struct(
        {
            "KaltixRank": t.integer().optional(),
            "LocalKaltixRank": t.integer().optional(),
            "SiteKaltixRank": t.integer().optional(),
        }
    ).named(renames["KaltixPerDocDataIn"])
    types["KaltixPerDocDataOut"] = t.struct(
        {
            "KaltixRank": t.integer().optional(),
            "LocalKaltixRank": t.integer().optional(),
            "SiteKaltixRank": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KaltixPerDocDataOut"])
    types["QualityNsrExperimentalNsrTeamWSJDataIn"] = t.struct(
        {
            "lookupKey": t.string().optional(),
            "experimentalNsrTeamData": t.proxy(
                renames["QualityNsrExperimentalNsrTeamDataIn"]
            ),
        }
    ).named(renames["QualityNsrExperimentalNsrTeamWSJDataIn"])
    types["QualityNsrExperimentalNsrTeamWSJDataOut"] = t.struct(
        {
            "lookupKey": t.string().optional(),
            "experimentalNsrTeamData": t.proxy(
                renames["QualityNsrExperimentalNsrTeamDataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNsrExperimentalNsrTeamWSJDataOut"])
    types["ImageDataMultibangEntitiesMultibangEntityIn"] = t.struct(
        {"entityId": t.string().optional(), "score": t.number().optional()}
    ).named(renames["ImageDataMultibangEntitiesMultibangEntityIn"])
    types["ImageDataMultibangEntitiesMultibangEntityOut"] = t.struct(
        {
            "entityId": t.string().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageDataMultibangEntitiesMultibangEntityOut"])
    types["KnowledgeAnswersOpaqueCalendarReferenceTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarReferenceTypeIn"])
    types["KnowledgeAnswersOpaqueCalendarReferenceTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarReferenceTypeOut"])
    types["SocialPersonalizationKnexAnnotationIn"] = t.struct(
        {"item": t.array(t.proxy(renames["SocialPersonalizationKnexAnnotationItemIn"]))}
    ).named(renames["SocialPersonalizationKnexAnnotationIn"])
    types["SocialPersonalizationKnexAnnotationOut"] = t.struct(
        {
            "item": t.array(
                t.proxy(renames["SocialPersonalizationKnexAnnotationItemOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialPersonalizationKnexAnnotationOut"])
    types["OceanGEPriceLocaleIn"] = t.struct(
        {
            "locale": t.string().optional(),
            "offerPrice": t.proxy(renames["OceanGEMoneyIn"]).optional(),
            "onSaleTimeSecs": t.string().optional(),
        }
    ).named(renames["OceanGEPriceLocaleIn"])
    types["OceanGEPriceLocaleOut"] = t.struct(
        {
            "locale": t.string().optional(),
            "offerPrice": t.proxy(renames["OceanGEMoneyOut"]).optional(),
            "onSaleTimeSecs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanGEPriceLocaleOut"])
    types["ScienceCitationFundingExtractionInfoIn"] = t.struct(
        {
            "Source": t.string(),
            "DocPart": t.string(),
            "ClearedFunding": t.string().optional(),
            "ParseSection": t.string(),
            "DebugFundingTextBlock": t.string().optional(),
        }
    ).named(renames["ScienceCitationFundingExtractionInfoIn"])
    types["ScienceCitationFundingExtractionInfoOut"] = t.struct(
        {
            "Source": t.string(),
            "DocPart": t.string(),
            "ClearedFunding": t.string().optional(),
            "ParseSection": t.string(),
            "DebugFundingTextBlock": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationFundingExtractionInfoOut"])
    types["RepositoryWebrefSimplifiedAnchorIn"] = t.struct(
        {
            "scoreFromOffdomain": t.number(),
            "normalizedScore": t.number().optional(),
            "anchorIndices": t.proxy(
                renames["RepositoryWebrefAnchorIndicesIn"]
            ).optional(),
            "count": t.string().optional(),
            "totalVolumeFromOffdomain": t.number(),
            "totalVolume": t.number().optional(),
            "scoreFromFragment": t.number().optional(),
            "scoreFromRedirect": t.number().optional(),
            "score": t.number().optional(),
            "scoreFromOnsite": t.number(),
            "normalizedScoreFromOffdomain": t.number(),
            "countFromOffdomain": t.string().optional(),
            "totalVolumeFromOnsite": t.number(),
            "normalizedScoreFromOnsite": t.number(),
            "anchorText": t.proxy(
                renames["RepositoryWebrefLocalizedStringIn"]
            ).optional(),
            "scoreFromOnsiteFragment": t.number(),
            "countFromOnsite": t.string().optional(),
            "scoreFromOffdomainFragment": t.number(),
        }
    ).named(renames["RepositoryWebrefSimplifiedAnchorIn"])
    types["RepositoryWebrefSimplifiedAnchorOut"] = t.struct(
        {
            "scoreFromOffdomain": t.number(),
            "normalizedScore": t.number().optional(),
            "anchorIndices": t.proxy(
                renames["RepositoryWebrefAnchorIndicesOut"]
            ).optional(),
            "count": t.string().optional(),
            "totalVolumeFromOffdomain": t.number(),
            "totalVolume": t.number().optional(),
            "scoreFromFragment": t.number().optional(),
            "scoreFromRedirect": t.number().optional(),
            "score": t.number().optional(),
            "scoreFromOnsite": t.number(),
            "normalizedScoreFromOffdomain": t.number(),
            "countFromOffdomain": t.string().optional(),
            "totalVolumeFromOnsite": t.number(),
            "normalizedScoreFromOnsite": t.number(),
            "anchorText": t.proxy(
                renames["RepositoryWebrefLocalizedStringOut"]
            ).optional(),
            "scoreFromOnsiteFragment": t.number(),
            "countFromOnsite": t.string().optional(),
            "scoreFromOffdomainFragment": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefSimplifiedAnchorOut"])
    types["TravelFlightsAirlineConfigContactInfoIn"] = t.struct(
        {"data": t.string().optional(), "type": t.string()}
    ).named(renames["TravelFlightsAirlineConfigContactInfoIn"])
    types["TravelFlightsAirlineConfigContactInfoOut"] = t.struct(
        {
            "data": t.string().optional(),
            "type": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TravelFlightsAirlineConfigContactInfoOut"])
    types["ScienceOceanViewIn"] = t.struct(
        {"countryview": t.array(t.proxy(renames["ScienceOceanViewCountryViewIn"]))}
    ).named(renames["ScienceOceanViewIn"])
    types["ScienceOceanViewOut"] = t.struct(
        {
            "countryview": t.array(t.proxy(renames["ScienceOceanViewCountryViewOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceOceanViewOut"])
    types["ResearchScienceSearchDataDownloadIn"] = t.struct(
        {
            "fileFormatClass": t.string().optional(),
            "downloadUrl": t.string().optional(),
            "contentSize": t.string().optional(),
            "parsedContentSize": t.proxy(
                renames["ResearchScienceSearchDataSizeIn"]
            ).optional(),
            "fileFormat": t.string().optional(),
        }
    ).named(renames["ResearchScienceSearchDataDownloadIn"])
    types["ResearchScienceSearchDataDownloadOut"] = t.struct(
        {
            "fileFormatClass": t.string().optional(),
            "downloadUrl": t.string().optional(),
            "contentSize": t.string().optional(),
            "parsedContentSize": t.proxy(
                renames["ResearchScienceSearchDataSizeOut"]
            ).optional(),
            "fileFormat": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScienceSearchDataDownloadOut"])
    types["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityIn"])
    types["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoDeviceTakePhotoCapabilityOut"])
    types["GoogleAssistantAccessoryV1DeviceStateIn"] = t.struct(
        {
            "doNotDisturb": t.boolean().optional(),
            "deviceTimeZone": t.proxy(renames["GoogleTypeTimeZoneIn"]).optional(),
            "timerState": t.proxy(
                renames["GoogleAssistantEmbeddedV1TimersIn"]
            ).optional(),
            "contextParams": t.string().optional(),
            "deviceTime": t.string().optional(),
            "fitnessActivitiesState": t.proxy(
                renames["GoogleAssistantEmbeddedV1FitnessActivitiesIn"]
            ).optional(),
            "alarmState": t.proxy(
                renames["GoogleAssistantEmbeddedV1AlarmsIn"]
            ).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1DeviceStateIn"])
    types["GoogleAssistantAccessoryV1DeviceStateOut"] = t.struct(
        {
            "doNotDisturb": t.boolean().optional(),
            "deviceTimeZone": t.proxy(renames["GoogleTypeTimeZoneOut"]).optional(),
            "timerState": t.proxy(
                renames["GoogleAssistantEmbeddedV1TimersOut"]
            ).optional(),
            "contextParams": t.string().optional(),
            "deviceTime": t.string().optional(),
            "fitnessActivitiesState": t.proxy(
                renames["GoogleAssistantEmbeddedV1FitnessActivitiesOut"]
            ).optional(),
            "alarmState": t.proxy(
                renames["GoogleAssistantEmbeddedV1AlarmsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1DeviceStateOut"])
    types["GeostorePriceInfoFoodNutritionFactsCaloriesFactIn"] = t.struct(
        {
            "upperAmount": t.integer(),
            "lowerAmount": t.integer(),
            "unit": t.string().optional(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsCaloriesFactIn"])
    types["GeostorePriceInfoFoodNutritionFactsCaloriesFactOut"] = t.struct(
        {
            "upperAmount": t.integer(),
            "lowerAmount": t.integer(),
            "unit": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePriceInfoFoodNutritionFactsCaloriesFactOut"])
    types["ShingleInfoPerDocDataIn"] = t.struct(
        {
            "source": t.array(t.proxy(renames["ShingleSourceIn"])).optional(),
            "numShingles": t.integer().optional(),
        }
    ).named(renames["ShingleInfoPerDocDataIn"])
    types["ShingleInfoPerDocDataOut"] = t.struct(
        {
            "source": t.array(t.proxy(renames["ShingleSourceOut"])).optional(),
            "numShingles": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShingleInfoPerDocDataOut"])
    types["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityIn"])
    types["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["AssistantDevicesPlatformProtoMediaPlayMediaCapabilityOut"])
    types["SpeechS3LanguageIdentificationResultIn"] = t.struct(
        {
            "voicedUtterance": t.boolean().optional(),
            "rankedTopSupportedLanguages": t.array(
                t.proxy(renames["SpeechS3LocaleIn"])
            ).optional(),
            "startTimeUsec": t.string().optional(),
            "endTimeUsec": t.string().optional(),
            "topLanguageConfidence": t.string().optional(),
        }
    ).named(renames["SpeechS3LanguageIdentificationResultIn"])
    types["SpeechS3LanguageIdentificationResultOut"] = t.struct(
        {
            "voicedUtterance": t.boolean().optional(),
            "rankedTopSupportedLanguages": t.array(
                t.proxy(renames["SpeechS3LocaleOut"])
            ).optional(),
            "startTimeUsec": t.string().optional(),
            "endTimeUsec": t.string().optional(),
            "topLanguageConfidence": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SpeechS3LanguageIdentificationResultOut"])
    types["CloudAiPlatformTenantresourceGcsBucketConfigIn"] = t.struct(
        {
            "ttlDays": t.integer().optional(),
            "viewers": t.array(t.string()).optional(),
            "entityName": t.string().optional(),
            "admins": t.array(t.string()),
            "kmsKeyReference": t.string().optional(),
            "bucketName": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceGcsBucketConfigIn"])
    types["CloudAiPlatformTenantresourceGcsBucketConfigOut"] = t.struct(
        {
            "ttlDays": t.integer().optional(),
            "viewers": t.array(t.string()).optional(),
            "entityName": t.string().optional(),
            "admins": t.array(t.string()),
            "kmsKeyReference": t.string().optional(),
            "bucketName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceGcsBucketConfigOut"])
    types["RepositoryWebrefNgramContextIn"] = t.struct(
        {
            "mention": t.array(
                t.proxy(renames["RepositoryWebrefNgramMentionIn"])
            ).optional(),
            "weight": t.number().optional(),
            "text": t.string().optional(),
        }
    ).named(renames["RepositoryWebrefNgramContextIn"])
    types["RepositoryWebrefNgramContextOut"] = t.struct(
        {
            "mention": t.array(
                t.proxy(renames["RepositoryWebrefNgramMentionOut"])
            ).optional(),
            "weight": t.number().optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefNgramContextOut"])
    types["AssistantApiCarSettingsCapabilitiesIn"] = t.struct(
        {
            "supportsAddingCars": t.boolean().optional(),
            "playWarmerWelcome": t.boolean().optional(),
        }
    ).named(renames["AssistantApiCarSettingsCapabilitiesIn"])
    types["AssistantApiCarSettingsCapabilitiesOut"] = t.struct(
        {
            "supportsAddingCars": t.boolean().optional(),
            "playWarmerWelcome": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCarSettingsCapabilitiesOut"])
    types["ContentAttributionsOutgoingAttributionIn"] = t.struct(
        {
            "properties": t.integer(),
            "bestEvidenceType": t.string(),
            "usableForClustering": t.boolean(),
            "docid": t.string(),
        }
    ).named(renames["ContentAttributionsOutgoingAttributionIn"])
    types["ContentAttributionsOutgoingAttributionOut"] = t.struct(
        {
            "properties": t.integer(),
            "bestEvidenceType": t.string(),
            "usableForClustering": t.boolean(),
            "docid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ContentAttributionsOutgoingAttributionOut"])
    types["CloudAiPlatformTenantresourceTenantServiceAccountIdentityIn"] = t.struct(
        {
            "serviceName": t.string().optional(),
            "serviceAccountEmail": t.string().optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantServiceAccountIdentityIn"])
    types["CloudAiPlatformTenantresourceTenantServiceAccountIdentityOut"] = t.struct(
        {
            "serviceName": t.string().optional(),
            "serviceAccountEmail": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CloudAiPlatformTenantresourceTenantServiceAccountIdentityOut"])
    types["KnowledgeAnswersIntentQueryLocalSignalsIn"] = t.struct(
        {
            "localResultSignals": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryLocalResultSignalsIn"])
            ).optional(),
            "minSalientTermSimilarity": t.number().optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryLocalSignalsIn"])
    types["KnowledgeAnswersIntentQueryLocalSignalsOut"] = t.struct(
        {
            "localResultSignals": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryLocalResultSignalsOut"])
            ).optional(),
            "minSalientTermSimilarity": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryLocalSignalsOut"])
    types["QualityNavboostCrapsAgingDataIn"] = t.struct(
        {
            "lastMonthBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketIn"]
            ).optional(),
            "yearPlusBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketIn"]
            ).optional(),
            "lastWeekBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketIn"]
            ).optional(),
            "lastYearBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketIn"]
            ).optional(),
        }
    ).named(renames["QualityNavboostCrapsAgingDataIn"])
    types["QualityNavboostCrapsAgingDataOut"] = t.struct(
        {
            "lastMonthBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketOut"]
            ).optional(),
            "yearPlusBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketOut"]
            ).optional(),
            "lastWeekBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketOut"]
            ).optional(),
            "lastYearBucket": t.proxy(
                renames["QualityNavboostCrapsAgingDataAgingAgeBucketOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityNavboostCrapsAgingDataOut"])
    types["NlpSemanticParsingSaftMeasureIn"] = t.struct(
        {
            "rawText": t.string().optional(),
            "value": t.number().optional(),
            "category": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingSaftMeasureIn"])
    types["NlpSemanticParsingSaftMeasureOut"] = t.struct(
        {
            "rawText": t.string().optional(),
            "value": t.number().optional(),
            "category": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingSaftMeasureOut"])
    types["ImageRepositoryApiItagSpecificMetadataIn"] = t.struct(
        {
            "transcodeItag": t.integer().optional(),
            "xtagsList": t.proxy(renames["ImageRepositoryApiXtagListIn"]).optional(),
            "videoId": t.proxy(renames["VideoAssetsVenomVideoIdIn"]).optional(),
            "expirationTimestampSec": t.string().optional(),
            "genus": t.string().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["ImageRepositoryApiItagSpecificMetadataIn"])
    types["ImageRepositoryApiItagSpecificMetadataOut"] = t.struct(
        {
            "transcodeItag": t.integer().optional(),
            "xtagsList": t.proxy(renames["ImageRepositoryApiXtagListOut"]).optional(),
            "videoId": t.proxy(renames["VideoAssetsVenomVideoIdOut"]).optional(),
            "expirationTimestampSec": t.string().optional(),
            "genus": t.string().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryApiItagSpecificMetadataOut"])
    types["FreebaseMeasurementUnitIn"] = t.struct(
        {
            "power": t.integer(),
            "unitMid": t.string().optional(),
            "unit": t.proxy(renames["FreebaseIdIn"]),
        }
    ).named(renames["FreebaseMeasurementUnitIn"])
    types["FreebaseMeasurementUnitOut"] = t.struct(
        {
            "power": t.integer(),
            "unitMid": t.string().optional(),
            "unit": t.proxy(renames["FreebaseIdOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseMeasurementUnitOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkIn"] = t.struct(
        {"url": t.string().optional(), "anchorText": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkOut"] = t.struct(
        {
            "url": t.string().optional(),
            "anchorText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLinkOut"])
    types["GoogleCloudContentwarehouseV1FloatTypeOptionsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1FloatTypeOptionsIn"])
    types["GoogleCloudContentwarehouseV1FloatTypeOptionsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1FloatTypeOptionsOut"])
    types["GoogleCloudDocumentaiV1DocumentShardInfoIn"] = t.struct(
        {
            "shardIndex": t.string().optional(),
            "shardCount": t.string().optional(),
            "textOffset": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentShardInfoIn"])
    types["GoogleCloudDocumentaiV1DocumentShardInfoOut"] = t.struct(
        {
            "shardIndex": t.string().optional(),
            "shardCount": t.string().optional(),
            "textOffset": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentShardInfoOut"])
    types["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeIn"])
    types["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueComplexQueriesRewriteTypeOut"])
    types["CrawlerChangerateUrlChangerateIn"] = t.struct(
        {
            "patternChangePeriodVersion": t.integer().optional(),
            "changeperiod": t.integer().optional(),
            "patternBasedLowerChangePeriod": t.integer().optional(),
            "ugcChangePeriod": t.integer().optional(),
            "confidence": t.number().optional(),
            "type": t.integer().optional(),
            "globalBasedChangePeriodConfidence": t.number().optional(),
            "lastFetched": t.integer().optional(),
            "patternBasedChangePeriodConfidence": t.number().optional(),
            "globalBasedPriorStrength": t.number(),
            "globalBasedChangePeriod": t.integer().optional(),
            "lastChangeSignificance": t.number().optional(),
            "patternBasedPriorPeriod": t.number().optional(),
            "approximatedPosterior": t.proxy(
                renames["CrawlerChangerateMultipleComponentDistributionIn"]
            ).optional(),
            "averageChangeSignificance": t.number().optional(),
            "patternBasedPriorStrength": t.number(),
            "numIntervals": t.integer().optional(),
            "lastChanged": t.integer().optional(),
            "ugcChangePeriodConfidence": t.number(),
            "globalBasedPriorPeriod": t.number().optional(),
            "patternBasedChangePeriod": t.integer().optional(),
        }
    ).named(renames["CrawlerChangerateUrlChangerateIn"])
    types["CrawlerChangerateUrlChangerateOut"] = t.struct(
        {
            "patternChangePeriodVersion": t.integer().optional(),
            "changeperiod": t.integer().optional(),
            "patternBasedLowerChangePeriod": t.integer().optional(),
            "ugcChangePeriod": t.integer().optional(),
            "confidence": t.number().optional(),
            "type": t.integer().optional(),
            "globalBasedChangePeriodConfidence": t.number().optional(),
            "lastFetched": t.integer().optional(),
            "patternBasedChangePeriodConfidence": t.number().optional(),
            "globalBasedPriorStrength": t.number(),
            "globalBasedChangePeriod": t.integer().optional(),
            "lastChangeSignificance": t.number().optional(),
            "patternBasedPriorPeriod": t.number().optional(),
            "approximatedPosterior": t.proxy(
                renames["CrawlerChangerateMultipleComponentDistributionOut"]
            ).optional(),
            "averageChangeSignificance": t.number().optional(),
            "patternBasedPriorStrength": t.number(),
            "numIntervals": t.integer().optional(),
            "lastChanged": t.integer().optional(),
            "ugcChangePeriodConfidence": t.number(),
            "globalBasedPriorPeriod": t.number().optional(),
            "patternBasedChangePeriod": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateUrlChangerateOut"])
    types["IndexingSignalAggregatorRunningMeanAndVarianceInternalStateIn"] = t.struct(
        {
            "mean": t.number().optional(),
            "m2": t.number().optional(),
            "totalWeight": t.number().optional(),
        }
    ).named(renames["IndexingSignalAggregatorRunningMeanAndVarianceInternalStateIn"])
    types["IndexingSignalAggregatorRunningMeanAndVarianceInternalStateOut"] = t.struct(
        {
            "mean": t.number().optional(),
            "m2": t.number().optional(),
            "totalWeight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingSignalAggregatorRunningMeanAndVarianceInternalStateOut"])
    types["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairIn"] = t.struct(
        {"timeS": t.number(), "name": t.string()}
    ).named(renames["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairIn"])
    types["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairOut"] = t.struct(
        {
            "timeS": t.number(),
            "name": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoAnonTimingStatPairOut"])
    types["AssistantContextProviderIdIn"] = t.struct(
        {
            "ecosystemType": t.string().optional(),
            "providerCorpusId": t.string().optional(),
            "appProviderId": t.proxy(
                renames["AssistantContextAppProviderIdIn"]
            ).optional(),
            "mediaProviderId": t.proxy(
                renames["AssistantContextMediaProviderIdIn"]
            ).optional(),
            "mid": t.string().optional(),
            "providerVariant": t.proxy(
                renames["AssistantContextProviderVariantIn"]
            ).optional(),
        }
    ).named(renames["AssistantContextProviderIdIn"])
    types["AssistantContextProviderIdOut"] = t.struct(
        {
            "ecosystemType": t.string().optional(),
            "providerCorpusId": t.string().optional(),
            "appProviderId": t.proxy(
                renames["AssistantContextAppProviderIdOut"]
            ).optional(),
            "mediaProviderId": t.proxy(
                renames["AssistantContextMediaProviderIdOut"]
            ).optional(),
            "mid": t.string().optional(),
            "providerVariant": t.proxy(
                renames["AssistantContextProviderVariantOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantContextProviderIdOut"])
    types["GeostoreSweepProtoIn"] = t.struct(
        {
            "sweepCurve": t.proxy(renames["GeostoreCurveConnectionProtoIn"]).optional(),
            "otherSegmentFeatureId": t.proxy(
                renames["GeostoreFeatureIdProtoIn"]
            ).optional(),
            "polygon": t.proxy(renames["GeostorePolygonProtoIn"]).optional(),
            "sweepToken": t.string().optional(),
        }
    ).named(renames["GeostoreSweepProtoIn"])
    types["GeostoreSweepProtoOut"] = t.struct(
        {
            "sweepCurve": t.proxy(
                renames["GeostoreCurveConnectionProtoOut"]
            ).optional(),
            "otherSegmentFeatureId": t.proxy(
                renames["GeostoreFeatureIdProtoOut"]
            ).optional(),
            "polygon": t.proxy(renames["GeostorePolygonProtoOut"]).optional(),
            "sweepToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreSweepProtoOut"])
    types["NlpSemanticParsingLocalHotelTypeIn"] = t.struct(
        {
            "farmstay": t.boolean(),
            "golfResort": t.boolean(),
            "other": t.boolean().optional(),
            "businessHotel": t.boolean(),
            "hotel": t.boolean().optional(),
            "seasideResort": t.boolean(),
            "condoHotel": t.boolean(),
            "wellnessAndSpaAccommodation": t.boolean(),
            "cottage": t.boolean(),
            "boutiqueHotel": t.boolean(),
            "youthHostel": t.boolean(),
            "vacationRental": t.boolean().optional(),
            "resort": t.boolean(),
            "lodge": t.boolean(),
            "pension": t.boolean(),
            "servicedApartment": t.boolean(),
            "houseboat": t.boolean(),
            "vacationApartment": t.boolean(),
            "japaneseInn": t.boolean().optional(),
            "guestRanch": t.boolean(),
            "mountainHut": t.boolean(),
            "chalet": t.boolean(),
            "vacationHouse": t.boolean(),
            "commonLodgingHouse": t.boolean(),
            "conventionHotel": t.boolean(),
            "villa": t.boolean(),
            "motel": t.boolean(),
            "allInclusiveResort": t.boolean().optional(),
            "lodging": t.boolean(),
            "gite": t.boolean(),
            "guesthouse": t.boolean(),
            "loveHotel": t.boolean(),
            "cabin": t.boolean().optional(),
            "casinoAccommodation": t.boolean(),
            "skiResort": t.boolean(),
            "hostel": t.boolean(),
            "ecoHotel": t.boolean(),
            "inn": t.boolean(),
            "extendedStayHotel": t.boolean(),
            "capsuleHotel": t.boolean(),
            "japaneseInnWithHotSpring": t.boolean(),
            "safariLodge": t.boolean(),
            "beachResort": t.boolean(),
            "suite": t.boolean(),
            "bedAndBreakfast": t.boolean(),
            "castleHotel": t.boolean(),
            "campsite": t.boolean(),
        }
    ).named(renames["NlpSemanticParsingLocalHotelTypeIn"])
    types["NlpSemanticParsingLocalHotelTypeOut"] = t.struct(
        {
            "farmstay": t.boolean(),
            "golfResort": t.boolean(),
            "other": t.boolean().optional(),
            "businessHotel": t.boolean(),
            "hotel": t.boolean().optional(),
            "seasideResort": t.boolean(),
            "condoHotel": t.boolean(),
            "wellnessAndSpaAccommodation": t.boolean(),
            "cottage": t.boolean(),
            "boutiqueHotel": t.boolean(),
            "youthHostel": t.boolean(),
            "vacationRental": t.boolean().optional(),
            "resort": t.boolean(),
            "lodge": t.boolean(),
            "pension": t.boolean(),
            "servicedApartment": t.boolean(),
            "houseboat": t.boolean(),
            "vacationApartment": t.boolean(),
            "japaneseInn": t.boolean().optional(),
            "guestRanch": t.boolean(),
            "mountainHut": t.boolean(),
            "chalet": t.boolean(),
            "vacationHouse": t.boolean(),
            "commonLodgingHouse": t.boolean(),
            "conventionHotel": t.boolean(),
            "villa": t.boolean(),
            "motel": t.boolean(),
            "allInclusiveResort": t.boolean().optional(),
            "lodging": t.boolean(),
            "gite": t.boolean(),
            "guesthouse": t.boolean(),
            "loveHotel": t.boolean(),
            "cabin": t.boolean().optional(),
            "casinoAccommodation": t.boolean(),
            "skiResort": t.boolean(),
            "hostel": t.boolean(),
            "ecoHotel": t.boolean(),
            "inn": t.boolean(),
            "extendedStayHotel": t.boolean(),
            "capsuleHotel": t.boolean(),
            "japaneseInnWithHotSpring": t.boolean(),
            "safariLodge": t.boolean(),
            "beachResort": t.boolean(),
            "suite": t.boolean(),
            "bedAndBreakfast": t.boolean(),
            "castleHotel": t.boolean(),
            "campsite": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingLocalHotelTypeOut"])
    types["ImageUnderstandingIndexingAnnotationGroupIn"] = t.struct(
        {
            "annotation": t.array(
                t.proxy(renames["ImageUnderstandingIndexingAnnotationIn"])
            )
        }
    ).named(renames["ImageUnderstandingIndexingAnnotationGroupIn"])
    types["ImageUnderstandingIndexingAnnotationGroupOut"] = t.struct(
        {
            "annotation": t.array(
                t.proxy(renames["ImageUnderstandingIndexingAnnotationOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageUnderstandingIndexingAnnotationGroupOut"])
    types["AssistantGroundingRankerAssistantInteractionFeaturesIn"] = t.struct(
        {
            "timeDecayed1dHalfLife": t.number().optional(),
            "timeSinceLastCanceledActionSecs": t.number(),
            "timeSinceLastButOneCanceledActionSecs": t.number(),
            "timeSinceLastButOneCompletedActionSecs": t.number(),
            "timeDecayed14dHalfLife": t.number(),
            "timeSinceLastButTwoCanceledActionSecs": t.number(),
            "timeDecayedAuis14dHalfLife": t.number(),
            "timeDecayedCanceled14dHalfLife": t.number(),
            "timeSinceLastButTwoCompletedActionSecs": t.number(),
            "timeDecayedAccepted14dHalfLife": t.number(),
            "timeSinceLastCompletedActionSecs": t.number().optional(),
            "timeDecayedDeclined14dHalfLife": t.number(),
            "timeDecayed7dHalfLife": t.number(),
        }
    ).named(renames["AssistantGroundingRankerAssistantInteractionFeaturesIn"])
    types["AssistantGroundingRankerAssistantInteractionFeaturesOut"] = t.struct(
        {
            "timeDecayed1dHalfLife": t.number().optional(),
            "timeSinceLastCanceledActionSecs": t.number(),
            "timeSinceLastButOneCanceledActionSecs": t.number(),
            "timeSinceLastButOneCompletedActionSecs": t.number(),
            "timeDecayed14dHalfLife": t.number(),
            "timeSinceLastButTwoCanceledActionSecs": t.number(),
            "timeDecayedAuis14dHalfLife": t.number(),
            "timeDecayedCanceled14dHalfLife": t.number(),
            "timeSinceLastButTwoCompletedActionSecs": t.number(),
            "timeDecayedAccepted14dHalfLife": t.number(),
            "timeSinceLastCompletedActionSecs": t.number().optional(),
            "timeDecayedDeclined14dHalfLife": t.number(),
            "timeDecayed7dHalfLife": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantGroundingRankerAssistantInteractionFeaturesOut"])
    types["GeostoreRouteAssociationProtoIn"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoIn"]).optional(),
            "routeDirection": t.string().optional(),
            "displayPreference": t.string().optional(),
            "route": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
        }
    ).named(renames["GeostoreRouteAssociationProtoIn"])
    types["GeostoreRouteAssociationProtoOut"] = t.struct(
        {
            "metadata": t.proxy(renames["GeostoreFieldMetadataProtoOut"]).optional(),
            "routeDirection": t.string().optional(),
            "displayPreference": t.string().optional(),
            "route": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreRouteAssociationProtoOut"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationIn"] = t.struct(
        {
            "vendorCanonicalUrl": t.string(),
            "popularScore": t.number(),
            "countriesSupported": t.array(t.string()).optional(),
            "localizedTrustedGenome": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeIn"
                ]
            ),
            "vendorUrl": t.string(),
            "description": t.string(),
            "liveOpDetails": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoIn"]
            ).optional(),
            "imageData": t.proxy(
                renames["QualityCalypsoAppsUniversalImageDataIn"]
            ).optional(),
            "screenUrlThumbnail": t.array(t.string()),
            "name": t.string(),
            "originalRating": t.string(),
            "iconUrlThumbnail": t.string(),
            "optionalResult": t.boolean().optional(),
            "countryPrices": t.array(
                t.proxy(
                    renames[
                        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceIn"
                    ]
                )
            ),
            "supportsChromecast": t.boolean().optional(),
            "size": t.string().optional(),
            "hasEditorsChoiceBadge": t.boolean().optional(),
            "marketplace": t.string().optional(),
            "applicationUrl": t.string().optional(),
            "operatingSystems": t.array(t.string()).optional(),
            "totalRatingCount": t.integer().optional(),
            "price": t.string().optional(),
            "ratingCount": t.string(),
            "isDefaultLangLocale": t.boolean().optional(),
            "subcategory": t.array(t.string()),
            "totalRating": t.number(),
            "vendor": t.string().optional(),
            "platformTags": t.array(t.string()),
            "releaseDate": t.string(),
            "lastUpdated": t.string(),
            "inAppPurchase": t.boolean().optional(),
            "langLocale": t.string().optional(),
            "devConsoleId": t.string().optional(),
            "trustedGenomeData": t.struct({"_": t.string().optional()}).optional(),
            "appTypeData": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataIn"
                ]
            ),
            "supportsAndroidTv": t.boolean().optional(),
            "iconUrlHref": t.string().optional(),
            "filteringTag": t.array(t.string()).optional(),
            "rankData": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataIn"
                ]
            ),
            "currency": t.string(),
            "extractedIconColors": t.array(t.integer()).optional(),
            "screenUrlHref": t.array(t.string()).optional(),
            "reviewAuthor": t.string(),
            "physicalDeviceTags": t.array(t.string()),
            "reviewCount": t.string(),
            "category": t.array(t.string()).optional(),
            "rating": t.string().optional(),
            "numDownloads": t.string(),
            "version": t.string(),
            "genre": t.array(t.string()),
            "breadcrumbs": t.proxy(renames["RepositoryAnnotationsRdfaBreadcrumbsIn"]),
            "extractedIconColor": t.integer().optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationIn"])
    types["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationOut"] = t.struct(
        {
            "vendorCanonicalUrl": t.string(),
            "popularScore": t.number(),
            "countriesSupported": t.array(t.string()).optional(),
            "localizedTrustedGenome": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenomeOut"
                ]
            ),
            "vendorUrl": t.string(),
            "description": t.string(),
            "liveOpDetails": t.proxy(
                renames["QualityCalypsoAppsUniversalAuLiveOpsDetailInfoOut"]
            ).optional(),
            "imageData": t.proxy(
                renames["QualityCalypsoAppsUniversalImageDataOut"]
            ).optional(),
            "screenUrlThumbnail": t.array(t.string()),
            "name": t.string(),
            "originalRating": t.string(),
            "iconUrlThumbnail": t.string(),
            "optionalResult": t.boolean().optional(),
            "countryPrices": t.array(
                t.proxy(
                    renames[
                        "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPriceOut"
                    ]
                )
            ),
            "supportsChromecast": t.boolean().optional(),
            "size": t.string().optional(),
            "hasEditorsChoiceBadge": t.boolean().optional(),
            "marketplace": t.string().optional(),
            "applicationUrl": t.string().optional(),
            "operatingSystems": t.array(t.string()).optional(),
            "totalRatingCount": t.integer().optional(),
            "price": t.string().optional(),
            "ratingCount": t.string(),
            "isDefaultLangLocale": t.boolean().optional(),
            "subcategory": t.array(t.string()),
            "totalRating": t.number(),
            "vendor": t.string().optional(),
            "platformTags": t.array(t.string()),
            "releaseDate": t.string(),
            "lastUpdated": t.string(),
            "inAppPurchase": t.boolean().optional(),
            "langLocale": t.string().optional(),
            "devConsoleId": t.string().optional(),
            "trustedGenomeData": t.struct({"_": t.string().optional()}).optional(),
            "appTypeData": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeDataOut"
                ]
            ),
            "supportsAndroidTv": t.boolean().optional(),
            "iconUrlHref": t.string().optional(),
            "filteringTag": t.array(t.string()).optional(),
            "rankData": t.proxy(
                renames[
                    "RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankDataOut"
                ]
            ),
            "currency": t.string(),
            "extractedIconColors": t.array(t.integer()).optional(),
            "screenUrlHref": t.array(t.string()).optional(),
            "reviewAuthor": t.string(),
            "physicalDeviceTags": t.array(t.string()),
            "reviewCount": t.string(),
            "category": t.array(t.string()).optional(),
            "rating": t.string().optional(),
            "numDownloads": t.string(),
            "version": t.string(),
            "genre": t.array(t.string()),
            "breadcrumbs": t.proxy(renames["RepositoryAnnotationsRdfaBreadcrumbsOut"]),
            "extractedIconColor": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationOut"])
    types["QualityActionsReminderLocationCategoryInfoIn"] = t.struct(
        {"displayName": t.string().optional(), "locationCategory": t.string()}
    ).named(renames["QualityActionsReminderLocationCategoryInfoIn"])
    types["QualityActionsReminderLocationCategoryInfoOut"] = t.struct(
        {
            "displayName": t.string().optional(),
            "locationCategory": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualityActionsReminderLocationCategoryInfoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoIn"] = t.struct(
        {"id": t.string().optional(), "containerType": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoOut"] = t.struct(
        {
            "id": t.string().optional(),
            "containerType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfoOut"])
    types["MultiscalePointerIndexIn"] = t.struct(
        {"index": t.integer().optional()}
    ).named(renames["MultiscalePointerIndexIn"])
    types["MultiscalePointerIndexOut"] = t.struct(
        {
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MultiscalePointerIndexOut"])
    types["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesIn"] = t.struct(
        {
            "editDistanceRatio": t.number().optional(),
            "editDistance": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "matchedFrameTimeMs": t.integer().optional(),
            "matchedOcrText": t.string().optional(),
        }
    ).named(renames["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesIn"])
    types["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesOut"] = t.struct(
        {
            "editDistanceRatio": t.number().optional(),
            "editDistance": t.integer().optional(),
            "matchedDescriptionText": t.string().optional(),
            "matchedFrameTimeMs": t.integer().optional(),
            "matchedOcrText": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchOcrDescriptionTrainingDataAnchorFeaturesOut"])
    types["IndexingEmbeddedContentOutputGenerationTimestampsIn"] = t.struct(
        {"renderedSnapshot": t.integer(), "documentData": t.integer()}
    ).named(renames["IndexingEmbeddedContentOutputGenerationTimestampsIn"])
    types["IndexingEmbeddedContentOutputGenerationTimestampsOut"] = t.struct(
        {
            "renderedSnapshot": t.integer(),
            "documentData": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentOutputGenerationTimestampsOut"])
    types["AssistantVerticalsHomeautomationProtoAttributeIn"] = t.struct(
        {
            "structureBasedRoutine": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineIn"
                ]
            )
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAttributeIn"])
    types["AssistantVerticalsHomeautomationProtoAttributeOut"] = t.struct(
        {
            "structureBasedRoutine": t.proxy(
                renames[
                    "AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantVerticalsHomeautomationProtoAttributeOut"])
    types["NlpSemanticParsingAppAnnotationIn"] = t.struct(
        {"appInfo": t.array(t.proxy(renames["QualityActionsAppInfoIn"])).optional()}
    ).named(renames["NlpSemanticParsingAppAnnotationIn"])
    types["NlpSemanticParsingAppAnnotationOut"] = t.struct(
        {
            "appInfo": t.array(t.proxy(renames["QualityActionsAppInfoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingAppAnnotationOut"])
    types["AssistantDevicesPlatformProtoResponseLimitsIn"] = t.struct(
        {
            "maxDisplayLinesBytes": t.integer().optional(),
            "maxSuggestionChipBytes": t.integer().optional(),
            "maxAssistResponseSizeBytes": t.integer().optional(),
            "maxSuggestionChips": t.integer().optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoResponseLimitsIn"])
    types["AssistantDevicesPlatformProtoResponseLimitsOut"] = t.struct(
        {
            "maxDisplayLinesBytes": t.integer().optional(),
            "maxSuggestionChipBytes": t.integer().optional(),
            "maxAssistResponseSizeBytes": t.integer().optional(),
            "maxSuggestionChips": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantDevicesPlatformProtoResponseLimitsOut"])
    types["RepositoryWebrefMentionRatingsSingleMentionRatingIn"] = t.struct(
        {
            "isCorrectRange": t.boolean().optional(),
            "mentionMatch": t.string(),
            "taskData": t.proxy(renames["RepositoryWebrefTaskDataIn"]),
            "mentionRelevant": t.string(),
            "ratingSource": t.string().optional(),
            "raterCanUnderstandTopic": t.boolean().optional(),
            "topicMentionedInResult": t.array(t.string()),
            "phraseRefer": t.string(),
            "resultCount": t.integer(),
        }
    ).named(renames["RepositoryWebrefMentionRatingsSingleMentionRatingIn"])
    types["RepositoryWebrefMentionRatingsSingleMentionRatingOut"] = t.struct(
        {
            "isCorrectRange": t.boolean().optional(),
            "mentionMatch": t.string(),
            "taskData": t.proxy(renames["RepositoryWebrefTaskDataOut"]),
            "mentionRelevant": t.string(),
            "ratingSource": t.string().optional(),
            "raterCanUnderstandTopic": t.boolean().optional(),
            "topicMentionedInResult": t.array(t.string()),
            "phraseRefer": t.string(),
            "resultCount": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionRatingsSingleMentionRatingOut"])
    types["DocPropertiesIn"] = t.struct(
        {
            "numTokens": t.integer().optional(),
            "numPunctuations": t.integer(),
            "timestamp": t.string().optional(),
            "badTitle": t.boolean().optional(),
            "restricts": t.array(t.string()),
            "numTags": t.integer(),
            "title": t.string().optional(),
            "leadingtext": t.proxy(
                renames["SnippetsLeadingtextLeadingTextInfoIn"]
            ).optional(),
            "proseRestrict": t.array(t.string()).optional(),
            "badtitleinfo": t.array(t.proxy(renames["DocPropertiesBadTitleInfoIn"])),
            "avgTermWeight": t.integer().optional(),
            "languages": t.array(t.integer()).optional(),
        }
    ).named(renames["DocPropertiesIn"])
    types["DocPropertiesOut"] = t.struct(
        {
            "numTokens": t.integer().optional(),
            "numPunctuations": t.integer(),
            "timestamp": t.string().optional(),
            "badTitle": t.boolean().optional(),
            "restricts": t.array(t.string()),
            "numTags": t.integer(),
            "title": t.string().optional(),
            "leadingtext": t.proxy(
                renames["SnippetsLeadingtextLeadingTextInfoOut"]
            ).optional(),
            "proseRestrict": t.array(t.string()).optional(),
            "badtitleinfo": t.array(t.proxy(renames["DocPropertiesBadTitleInfoOut"])),
            "avgTermWeight": t.integer().optional(),
            "languages": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DocPropertiesOut"])
    types["MediaIndexRegionIn"] = t.struct(
        {
            "entityFields": t.array(
                t.proxy(renames["MediaIndexEntityFieldIn"])
            ).optional(),
            "starburstTokensV5": t.array(t.string()),
            "starburstFeaturesV5": t.string().optional(),
            "primiGenericTokensV25": t.array(t.string()),
            "labels": t.proxy(renames["MediaIndexSparseFloatVectorIn"]).optional(),
            "starburstV4": t.proxy(renames["ImageContentStarburstVersionGroupIn"]),
            "starburstV5": t.proxy(renames["ImageContentStarburstVersionGroupIn"]),
            "starburstTokensV4": t.array(t.string()),
            "starburstFeaturesV4": t.string().optional(),
            "boundingBox": t.proxy(renames["MediaIndexBoundingboxIn"]).optional(),
            "primiApparelFeaturesV2": t.string().optional(),
            "primiApparelTokensV2": t.array(t.string()),
            "primiGenericFeaturesV25": t.string().optional(),
        }
    ).named(renames["MediaIndexRegionIn"])
    types["MediaIndexRegionOut"] = t.struct(
        {
            "entityFields": t.array(
                t.proxy(renames["MediaIndexEntityFieldOut"])
            ).optional(),
            "starburstTokensV5": t.array(t.string()),
            "starburstFeaturesV5": t.string().optional(),
            "primiGenericTokensV25": t.array(t.string()),
            "labels": t.proxy(renames["MediaIndexSparseFloatVectorOut"]).optional(),
            "starburstV4": t.proxy(renames["ImageContentStarburstVersionGroupOut"]),
            "starburstV5": t.proxy(renames["ImageContentStarburstVersionGroupOut"]),
            "starburstTokensV4": t.array(t.string()),
            "starburstFeaturesV4": t.string().optional(),
            "boundingBox": t.proxy(renames["MediaIndexBoundingboxOut"]).optional(),
            "primiApparelFeaturesV2": t.string().optional(),
            "primiApparelTokensV2": t.array(t.string()),
            "primiGenericFeaturesV25": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexRegionOut"])
    types["CompositeDocPartialUpdateInfoIn"] = t.struct(
        {
            "shouldLookupDocjoinsTier": t.integer().optional(),
            "imagesSignalNames": t.array(t.string()).optional(),
            "lastFullIndexingInfo": t.array(
                t.proxy(renames["CompositeDocPartialUpdateInfoLastFullIndexingInfoIn"])
            ).optional(),
            "signalNames": t.array(t.string()).optional(),
            "goldmineAnnotatorNames": t.array(t.string()).optional(),
        }
    ).named(renames["CompositeDocPartialUpdateInfoIn"])
    types["CompositeDocPartialUpdateInfoOut"] = t.struct(
        {
            "shouldLookupDocjoinsTier": t.integer().optional(),
            "imagesSignalNames": t.array(t.string()).optional(),
            "lastFullIndexingInfo": t.array(
                t.proxy(renames["CompositeDocPartialUpdateInfoLastFullIndexingInfoOut"])
            ).optional(),
            "signalNames": t.array(t.string()).optional(),
            "goldmineAnnotatorNames": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CompositeDocPartialUpdateInfoOut"])
    types["LensDiscoveryStylePersonAttributesPersonVisibilityScoresIn"] = t.struct(
        {
            "personVisibilityPredictions": t.array(
                t.proxy(
                    renames[
                        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionIn"
                    ]
                )
            ).optional(),
            "discretizedPersonVisibilityScore": t.integer().optional(),
        }
    ).named(renames["LensDiscoveryStylePersonAttributesPersonVisibilityScoresIn"])
    types["LensDiscoveryStylePersonAttributesPersonVisibilityScoresOut"] = t.struct(
        {
            "personVisibilityPredictions": t.array(
                t.proxy(
                    renames[
                        "LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPredictionOut"
                    ]
                )
            ).optional(),
            "discretizedPersonVisibilityScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStylePersonAttributesPersonVisibilityScoresOut"])
    types["RepositoryAnnotationsRdfaCrumbIn"] = t.struct(
        {"url": t.string().optional(), "title": t.string().optional()}
    ).named(renames["RepositoryAnnotationsRdfaCrumbIn"])
    types["RepositoryAnnotationsRdfaCrumbOut"] = t.struct(
        {
            "url": t.string().optional(),
            "title": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaCrumbOut"])
    types["ResearchScamGenericFeatureVectorRestrictTokensIn"] = t.struct(
        {
            "tokenMembership": t.array(t.string()).optional(),
            "v3": t.proxy(renames["ResearchScamV3RestrictIn"]).optional(),
            "definition": t.proxy(
                renames["ResearchScamCoscamRestrictDefinitionIn"]
            ).optional(),
            "whitelistToken": t.array(t.string()).optional(),
            "tokens": t.proxy(
                renames["ResearchScamCoscamRestrictTokensV2In"]
            ).optional(),
            "v3CompatibleNamespace": t.string().optional(),
            "blacklistToken": t.array(t.string()),
            "easyDefinition": t.proxy(
                renames["ResearchScamCoscamEasyRestrictDefinitionIn"]
            ).optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorRestrictTokensIn"])
    types["ResearchScamGenericFeatureVectorRestrictTokensOut"] = t.struct(
        {
            "tokenMembership": t.array(t.string()).optional(),
            "v3": t.proxy(renames["ResearchScamV3RestrictOut"]).optional(),
            "definition": t.proxy(
                renames["ResearchScamCoscamRestrictDefinitionOut"]
            ).optional(),
            "whitelistToken": t.array(t.string()).optional(),
            "tokens": t.proxy(
                renames["ResearchScamCoscamRestrictTokensV2Out"]
            ).optional(),
            "v3CompatibleNamespace": t.string().optional(),
            "blacklistToken": t.array(t.string()),
            "easyDefinition": t.proxy(
                renames["ResearchScamCoscamEasyRestrictDefinitionOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamGenericFeatureVectorRestrictTokensOut"])
    types["GoogleInternalAppsWaldoV1alphaTimeRangeIn"] = t.struct(
        {"endTime": t.string().optional(), "startTime": t.string().optional()}
    ).named(renames["GoogleInternalAppsWaldoV1alphaTimeRangeIn"])
    types["GoogleInternalAppsWaldoV1alphaTimeRangeOut"] = t.struct(
        {
            "endTime": t.string().optional(),
            "startTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaTimeRangeOut"])
    types["HtmlrenderWebkitHeadlessProtoRenderEventIn"] = t.struct(
        {
            "frameResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoFrameResizeEventIn"]
            ),
            "redirect": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRedirectEventIn"]
            ),
            "modalDialog": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoModalDialogEventIn"]
            ),
            "windowOpen": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWindowOpenEventIn"]
            ),
            "initialLoad": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoInitialLoadEventIn"]
            ),
            "virtualTimeOffset": t.number().optional(),
            "scriptOriginUrl": t.string().optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderEventIn"])
    types["HtmlrenderWebkitHeadlessProtoRenderEventOut"] = t.struct(
        {
            "frameResize": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoFrameResizeEventOut"]
            ),
            "redirect": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoRedirectEventOut"]
            ),
            "modalDialog": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoModalDialogEventOut"]
            ),
            "windowOpen": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoWindowOpenEventOut"]
            ),
            "initialLoad": t.proxy(
                renames["HtmlrenderWebkitHeadlessProtoInitialLoadEventOut"]
            ),
            "virtualTimeOffset": t.number().optional(),
            "scriptOriginUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HtmlrenderWebkitHeadlessProtoRenderEventOut"])
    types["GoogleCloudDocumentaiV1DocumentTextAnchorIn"] = t.struct(
        {
            "content": t.string().optional(),
            "textSegments": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentIn"]
                )
            ).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextAnchorIn"])
    types["GoogleCloudDocumentaiV1DocumentTextAnchorOut"] = t.struct(
        {
            "content": t.string().optional(),
            "textSegments": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentTextAnchorOut"])
    types["PhotosVisionGroundtruthdbNormalizedBoundingBoxIn"] = t.struct(
        {"xmax": t.number(), "xmin": t.number(), "ymax": t.number(), "ymin": t.number()}
    ).named(renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxIn"])
    types["PhotosVisionGroundtruthdbNormalizedBoundingBoxOut"] = t.struct(
        {
            "xmax": t.number(),
            "xmin": t.number(),
            "ymax": t.number(),
            "ymin": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PhotosVisionGroundtruthdbNormalizedBoundingBoxOut"])
    types["RepositoryWebrefForwardingUrlsIn"] = t.struct(
        {"forwardingUrl": t.array(t.string()).optional()}
    ).named(renames["RepositoryWebrefForwardingUrlsIn"])
    types["RepositoryWebrefForwardingUrlsOut"] = t.struct(
        {
            "forwardingUrl": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefForwardingUrlsOut"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentIn"] = t.struct(
        {"name": t.string(), "url": t.string()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentIn"])
    types["AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentOut"] = t.struct(
        {
            "name": t.string(),
            "url": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiOrganizationAssignmentOut"])
    types["DrishtiQuantizedByteDenseFeatureDataIn"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraIn"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraIn"]),
            "value": t.string().optional(),
        }
    ).named(renames["DrishtiQuantizedByteDenseFeatureDataIn"])
    types["DrishtiQuantizedByteDenseFeatureDataOut"] = t.struct(
        {
            "extra": t.array(t.proxy(renames["DrishtiFeatureExtraOut"])).optional(),
            "generalExtra": t.proxy(renames["DrishtiFeatureExtraOut"]),
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiQuantizedByteDenseFeatureDataOut"])
    types["RepositoryWebrefWikipediaCategoryIn"] = t.struct(
        {"categoryName": t.string()}
    ).named(renames["RepositoryWebrefWikipediaCategoryIn"])
    types["RepositoryWebrefWikipediaCategoryOut"] = t.struct(
        {
            "categoryName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefWikipediaCategoryOut"])
    types["GeostoreTimeEndpointProtoIn"] = t.struct(
        {
            "hour": t.integer().optional(),
            "day": t.integer().optional(),
            "month": t.string(),
            "dayType": t.string(),
            "minute": t.integer().optional(),
            "weekType": t.string(),
            "week": t.integer().optional(),
            "second": t.integer().optional(),
            "year": t.integer(),
        }
    ).named(renames["GeostoreTimeEndpointProtoIn"])
    types["GeostoreTimeEndpointProtoOut"] = t.struct(
        {
            "hour": t.integer().optional(),
            "day": t.integer().optional(),
            "month": t.string(),
            "dayType": t.string(),
            "minute": t.integer().optional(),
            "weekType": t.string(),
            "week": t.integer().optional(),
            "second": t.integer().optional(),
            "year": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTimeEndpointProtoOut"])
    types["AssistantApiSupportedClientOpIn"] = t.struct(
        {
            "supportedExecution": t.proxy(
                renames["AssistantApiSupportedClientOpSupportedExecutionIn"]
            ),
            "clientOpName": t.string().optional(),
            "version": t.integer().optional(),
            "clientOpProperties": t.proxy(renames["AssistantApiProtobufIn"]).optional(),
        }
    ).named(renames["AssistantApiSupportedClientOpIn"])
    types["AssistantApiSupportedClientOpOut"] = t.struct(
        {
            "supportedExecution": t.proxy(
                renames["AssistantApiSupportedClientOpSupportedExecutionOut"]
            ),
            "clientOpName": t.string().optional(),
            "version": t.integer().optional(),
            "clientOpProperties": t.proxy(
                renames["AssistantApiProtobufOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSupportedClientOpOut"])
    types["CrawlerChangerateUrlVersionIn"] = t.struct(
        {
            "offDomainLinksChecksum": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "simhash": t.string().optional(),
            "simhashIsTrusted": t.boolean().optional(),
            "additionalChangesMerged": t.integer().optional(),
            "offDomainLinksCount": t.integer().optional(),
            "contentType": t.integer().optional(),
            "simhashV2": t.string().optional(),
            "lastModified": t.integer().optional(),
            "onDomainLinksCount": t.integer().optional(),
            "shingleSimhash": t.proxy(
                renames["IndexingConverterShingleFingerprintIn"]
            ).optional(),
            "isImsNotModified": t.boolean().optional(),
            "tile": t.array(t.integer()).optional(),
            "simhashV2IsTrusted": t.boolean().optional(),
        }
    ).named(renames["CrawlerChangerateUrlVersionIn"])
    types["CrawlerChangerateUrlVersionOut"] = t.struct(
        {
            "offDomainLinksChecksum": t.integer().optional(),
            "timestamp": t.integer().optional(),
            "simhash": t.string().optional(),
            "simhashIsTrusted": t.boolean().optional(),
            "additionalChangesMerged": t.integer().optional(),
            "offDomainLinksCount": t.integer().optional(),
            "contentType": t.integer().optional(),
            "simhashV2": t.string().optional(),
            "lastModified": t.integer().optional(),
            "onDomainLinksCount": t.integer().optional(),
            "shingleSimhash": t.proxy(
                renames["IndexingConverterShingleFingerprintOut"]
            ).optional(),
            "isImsNotModified": t.boolean().optional(),
            "tile": t.array(t.integer()).optional(),
            "simhashV2IsTrusted": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CrawlerChangerateUrlVersionOut"])
    types["VideoMediaOverviewVideoOverviewIn"] = t.struct(
        {
            "videoHasClosedCaptions": t.boolean(),
            "codecId": t.integer(),
            "colorDynamicRange": t.string(),
            "roundedUpOriginalDurationSec": t.integer().optional(),
            "fps": t.number(),
            "aspectRatio": t.string(),
            "averageFps": t.number().optional(),
            "resolution": t.string(),
            "width": t.integer(),
            "height": t.integer(),
        }
    ).named(renames["VideoMediaOverviewVideoOverviewIn"])
    types["VideoMediaOverviewVideoOverviewOut"] = t.struct(
        {
            "videoHasClosedCaptions": t.boolean(),
            "codecId": t.integer(),
            "colorDynamicRange": t.string(),
            "roundedUpOriginalDurationSec": t.integer().optional(),
            "fps": t.number(),
            "aspectRatio": t.string(),
            "averageFps": t.number().optional(),
            "resolution": t.string(),
            "width": t.integer(),
            "height": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoMediaOverviewVideoOverviewOut"])
    types["GeostoreTransitStationProtoIn"] = t.struct(
        {"agencies": t.array(t.proxy(renames["GeostoreFeatureIdProtoIn"])).optional()}
    ).named(renames["GeostoreTransitStationProtoIn"])
    types["GeostoreTransitStationProtoOut"] = t.struct(
        {
            "agencies": t.array(
                t.proxy(renames["GeostoreFeatureIdProtoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreTransitStationProtoOut"])
    types["PeoplestackFlexorgsProtoInternalExternalIn"] = t.struct(
        {
            "stateStatus": t.array(
                t.proxy(
                    renames["PeoplestackFlexorgsProtoInternalExternalStateStatusIn"]
                )
            ).optional(),
            "application": t.string().optional(),
        }
    ).named(renames["PeoplestackFlexorgsProtoInternalExternalIn"])
    types["PeoplestackFlexorgsProtoInternalExternalOut"] = t.struct(
        {
            "stateStatus": t.array(
                t.proxy(
                    renames["PeoplestackFlexorgsProtoInternalExternalStateStatusOut"]
                )
            ).optional(),
            "application": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PeoplestackFlexorgsProtoInternalExternalOut"])
    types["GoogleInternalAppsWaldoV1alphaCalendarBusyIn"] = t.struct(
        {
            "nextAvailable": t.string().optional(),
            "eventSummary": t.string().optional(),
            "occupiedUntil": t.string().optional(),
            "committedUntil": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaCalendarBusyIn"])
    types["GoogleInternalAppsWaldoV1alphaCalendarBusyOut"] = t.struct(
        {
            "nextAvailable": t.string().optional(),
            "eventSummary": t.string().optional(),
            "occupiedUntil": t.string().optional(),
            "committedUntil": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaCalendarBusyOut"])
    types["IndexingPrivacyAccessAccessRequirementsIn"] = t.struct(
        {"restrictionCategories": t.array(t.string())}
    ).named(renames["IndexingPrivacyAccessAccessRequirementsIn"])
    types["IndexingPrivacyAccessAccessRequirementsOut"] = t.struct(
        {
            "restrictionCategories": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingPrivacyAccessAccessRequirementsOut"])
    types["GoogleCloudDocumentaiV1DocumentPageTableTableCellIn"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageIn"]
                )
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"]
            ).optional(),
            "rowSpan": t.integer().optional(),
            "colSpan": t.integer().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableTableCellIn"])
    types["GoogleCloudDocumentaiV1DocumentPageTableTableCellOut"] = t.struct(
        {
            "detectedLanguages": t.array(
                t.proxy(
                    renames["GoogleCloudDocumentaiV1DocumentPageDetectedLanguageOut"]
                )
            ).optional(),
            "layout": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"]
            ).optional(),
            "rowSpan": t.integer().optional(),
            "colSpan": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageTableTableCellOut"])
    types["IndexingBadSSLCertificateIn"] = t.struct(
        {
            "urlWithBadSslCertificate": t.string().optional(),
            "badSslCertificate": t.proxy(renames["TrawlerSSLCertificateInfoIn"]),
        }
    ).named(renames["IndexingBadSSLCertificateIn"])
    types["IndexingBadSSLCertificateOut"] = t.struct(
        {
            "urlWithBadSslCertificate": t.string().optional(),
            "badSslCertificate": t.proxy(renames["TrawlerSSLCertificateInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingBadSSLCertificateOut"])
    types["SocialCommonUserMentionDataIn"] = t.struct(
        {
            "email": t.string(),
            "user": t.proxy(renames["SecurityCredentialsPrincipalProtoIn"]).optional(),
            "userGaiaId": t.string().optional(),
            "userId": t.string().optional(),
        }
    ).named(renames["SocialCommonUserMentionDataIn"])
    types["SocialCommonUserMentionDataOut"] = t.struct(
        {
            "email": t.string(),
            "user": t.proxy(renames["SecurityCredentialsPrincipalProtoOut"]).optional(),
            "userGaiaId": t.string().optional(),
            "userId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SocialCommonUserMentionDataOut"])
    types["LensDiscoveryStylePersonAttributesIn"] = t.struct(
        {
            "version": t.string(),
            "discretizedPredictedAge": t.integer().optional(),
            "discretizedVisualSaliencyScore": t.integer().optional(),
            "personVisibilityScores": t.proxy(
                renames["LensDiscoveryStylePersonAttributesPersonVisibilityScoresIn"]
            ),
            "discretizedFemaleConfidence": t.integer(),
            "personBoundingBox": t.proxy(
                renames["LensDiscoveryStyleBoundingBoxIn"]
            ).optional(),
            "discretizedMaleConfidence": t.integer().optional(),
            "predictedAgeBucket": t.string().optional(),
            "discretizedFaceVisibilityScore": t.integer().optional(),
        }
    ).named(renames["LensDiscoveryStylePersonAttributesIn"])
    types["LensDiscoveryStylePersonAttributesOut"] = t.struct(
        {
            "version": t.string(),
            "discretizedPredictedAge": t.integer().optional(),
            "discretizedVisualSaliencyScore": t.integer().optional(),
            "personVisibilityScores": t.proxy(
                renames["LensDiscoveryStylePersonAttributesPersonVisibilityScoresOut"]
            ),
            "discretizedFemaleConfidence": t.integer(),
            "personBoundingBox": t.proxy(
                renames["LensDiscoveryStyleBoundingBoxOut"]
            ).optional(),
            "discretizedMaleConfidence": t.integer().optional(),
            "predictedAgeBucket": t.string().optional(),
            "discretizedFaceVisibilityScore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LensDiscoveryStylePersonAttributesOut"])
    types["FocusBackendDeviceIdIn"] = t.struct(
        {"Hash": t.string().optional(), "AndroidDeviceId": t.string().optional()}
    ).named(renames["FocusBackendDeviceIdIn"])
    types["FocusBackendDeviceIdOut"] = t.struct(
        {
            "Hash": t.string().optional(),
            "AndroidDeviceId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FocusBackendDeviceIdOut"])
    types["SmearedWebLandingPageEntryIn"] = t.struct(
        {"imagesearchDocid": t.string().optional(), "webDocid": t.string().optional()}
    ).named(renames["SmearedWebLandingPageEntryIn"])
    types["SmearedWebLandingPageEntryOut"] = t.struct(
        {
            "imagesearchDocid": t.string().optional(),
            "webDocid": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SmearedWebLandingPageEntryOut"])
    types["SnippetsLeadingtextLeadingTextInfoIn"] = t.struct(
        {
            "beginPos": t.integer().optional(),
            "type": t.string().optional(),
            "leadingtext": t.array(
                t.proxy(renames["SnippetsLeadingtextLeadingTextAnnotationIn"])
            ).optional(),
            "text": t.string().optional(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextInfoIn"])
    types["SnippetsLeadingtextLeadingTextInfoOut"] = t.struct(
        {
            "beginPos": t.integer().optional(),
            "type": t.string().optional(),
            "leadingtext": t.array(
                t.proxy(renames["SnippetsLeadingtextLeadingTextAnnotationOut"])
            ).optional(),
            "text": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnippetsLeadingtextLeadingTextInfoOut"])
    types["GoogleCloudContentwarehouseV1FetchAclRequestIn"] = t.struct(
        {
            "projectOwner": t.boolean().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FetchAclRequestIn"])
    types["GoogleCloudContentwarehouseV1FetchAclRequestOut"] = t.struct(
        {
            "projectOwner": t.boolean().optional(),
            "requestMetadata": t.proxy(
                renames["GoogleCloudContentwarehouseV1RequestMetadataOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1FetchAclRequestOut"])
    types["GoogleTypeTimeZoneIn"] = t.struct(
        {"version": t.string().optional(), "id": t.string().optional()}
    ).named(renames["GoogleTypeTimeZoneIn"])
    types["GoogleTypeTimeZoneOut"] = t.struct(
        {
            "version": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleTypeTimeZoneOut"])
    types["KnowledgeAnswersIntentQueryCollectionScoreIn"] = t.struct(
        {"scoreValue": t.number(), "scoreType": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryCollectionScoreIn"])
    types["KnowledgeAnswersIntentQueryCollectionScoreOut"] = t.struct(
        {
            "scoreValue": t.number(),
            "scoreType": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryCollectionScoreOut"])
    types["KnowledgeAnswersIntentQueryArgPathIn"] = t.struct(
        {
            "components": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgPathComponentIn"])
            )
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgPathIn"])
    types["KnowledgeAnswersIntentQueryArgPathOut"] = t.struct(
        {
            "components": t.array(
                t.proxy(renames["KnowledgeAnswersIntentQueryArgPathComponentOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryArgPathOut"])
    types["AssistantLogsTargetDeviceLogIn"] = t.struct(
        {
            "devices": t.array(t.proxy(renames["AssistantLogsDeviceInfoLogIn"])),
            "resultConfidenceLevel": t.string(),
            "lowConfidenceReason": t.string(),
        }
    ).named(renames["AssistantLogsTargetDeviceLogIn"])
    types["AssistantLogsTargetDeviceLogOut"] = t.struct(
        {
            "devices": t.array(t.proxy(renames["AssistantLogsDeviceInfoLogOut"])),
            "resultConfidenceLevel": t.string(),
            "lowConfidenceReason": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantLogsTargetDeviceLogOut"])
    types["OfficialPagesOfficialKeyIn"] = t.struct(
        {"query": t.string(), "language": t.integer(), "country": t.string()}
    ).named(renames["OfficialPagesOfficialKeyIn"])
    types["OfficialPagesOfficialKeyOut"] = t.struct(
        {
            "query": t.string(),
            "language": t.integer(),
            "country": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OfficialPagesOfficialKeyOut"])
    types["KnowledgeAnswersIntentQueryTokenSynonymIn"] = t.struct(
        {"source": t.string(), "synonymNgram": t.string()}
    ).named(renames["KnowledgeAnswersIntentQueryTokenSynonymIn"])
    types["KnowledgeAnswersIntentQueryTokenSynonymOut"] = t.struct(
        {
            "source": t.string(),
            "synonymNgram": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["KnowledgeAnswersIntentQueryTokenSynonymOut"])
    types["SearchPolicyRankableSensitivitySyntheticIntentIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["SearchPolicyRankableSensitivitySyntheticIntentIn"])
    types["SearchPolicyRankableSensitivitySyntheticIntentOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SearchPolicyRankableSensitivitySyntheticIntentOut"])
    types["GoogleCloudContentwarehouseV1DocumentLinkIn"] = t.struct(
        {
            "state": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "sourceDocumentReference": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentReferenceIn"]
            ).optional(),
            "targetDocumentReference": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentReferenceIn"]
            ).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentLinkIn"])
    types["GoogleCloudContentwarehouseV1DocumentLinkOut"] = t.struct(
        {
            "state": t.string().optional(),
            "createTime": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "sourceDocumentReference": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentReferenceOut"]
            ).optional(),
            "targetDocumentReference": t.proxy(
                renames["GoogleCloudContentwarehouseV1DocumentReferenceOut"]
            ).optional(),
            "updateTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DocumentLinkOut"])
    types["MultiscaleLayerPresenceIn"] = t.struct(
        {"present": t.boolean().optional(), "implicitLength": t.integer().optional()}
    ).named(renames["MultiscaleLayerPresenceIn"])
    types["MultiscaleLayerPresenceOut"] = t.struct(
        {
            "present": t.boolean().optional(),
            "implicitLength": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MultiscaleLayerPresenceOut"])
    types["AssistantRemindersAttachmentIn"] = t.struct(
        {
            "id": t.string().optional(),
            "surfaceType": t.array(t.string()).optional(),
            "link": t.proxy(renames["AssistantRemindersAttachmentLinkIn"]),
        }
    ).named(renames["AssistantRemindersAttachmentIn"])
    types["AssistantRemindersAttachmentOut"] = t.struct(
        {
            "id": t.string().optional(),
            "surfaceType": t.array(t.string()).optional(),
            "link": t.proxy(renames["AssistantRemindersAttachmentLinkOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantRemindersAttachmentOut"])
    types["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsIn"])
    types["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersIntentQueryFreetextAnnotationSignalsOut"])
    types["GoogleInternalAppsWaldoV1alphaOfficeLocationIn"] = t.struct(
        {
            "label": t.string().optional(),
            "experimentalFloorId": t.string().optional(),
            "experimentalBuildingId": t.string().optional(),
            "experimentalDeskId": t.string().optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaOfficeLocationIn"])
    types["GoogleInternalAppsWaldoV1alphaOfficeLocationOut"] = t.struct(
        {
            "label": t.string().optional(),
            "experimentalFloorId": t.string().optional(),
            "experimentalBuildingId": t.string().optional(),
            "experimentalDeskId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaOfficeLocationOut"])
    types["GeostoreAddressComponentProtoIn"] = t.struct(
        {
            "type": t.string().optional(),
            "index": t.integer().optional(),
            "textAffix": t.array(
                t.proxy(renames["GeostoreTextAffixProtoIn"])
            ).optional(),
            "range": t.proxy(renames["GeostoreAddressRangeProtoIn"]).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
            "featureType": t.integer().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoIn"]).optional(),
            "parsedName": t.array(t.proxy(renames["GeostoreNameProtoIn"])).optional(),
        }
    ).named(renames["GeostoreAddressComponentProtoIn"])
    types["GeostoreAddressComponentProtoOut"] = t.struct(
        {
            "type": t.string().optional(),
            "index": t.integer().optional(),
            "textAffix": t.array(
                t.proxy(renames["GeostoreTextAffixProtoOut"])
            ).optional(),
            "range": t.proxy(renames["GeostoreAddressRangeProtoOut"]).optional(),
            "temporaryData": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "featureType": t.integer().optional(),
            "featureId": t.proxy(renames["GeostoreFeatureIdProtoOut"]).optional(),
            "parsedName": t.array(t.proxy(renames["GeostoreNameProtoOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreAddressComponentProtoOut"])
    types["GoogleCloudContentwarehouseV1QAResultHighlightIn"] = t.struct(
        {"endIndex": t.integer().optional(), "startIndex": t.integer().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1QAResultHighlightIn"])
    types["GoogleCloudContentwarehouseV1QAResultHighlightOut"] = t.struct(
        {
            "endIndex": t.integer().optional(),
            "startIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1QAResultHighlightOut"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterMemberIn"] = t.struct(
        {"personId": t.string().optional(), "memberType": t.string().optional()}
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberIn"])
    types["AppsPeopleOzExternalMergedpeopleapiRosterMemberOut"] = t.struct(
        {
            "personId": t.string().optional(),
            "memberType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiRosterMemberOut"])
    types["ClassifierPornSiteDataIn"] = t.struct(
        {
            "siteSoftpornRatio": t.number(),
            "violenceScore": t.number().optional(),
            "avgPedoPageScore": t.number().optional(),
            "numberOfPedoPages": t.string().optional(),
            "violenceStats": t.proxy(renames["ClassifierPornSiteViolenceStatsIn"]),
            "versionedscore": t.array(
                t.proxy(renames["ClassifierPornSiteDataVersionedScoreIn"])
            ),
            "numberOfPages": t.string().optional(),
            "sitePornRatio": t.number().optional(),
            "site": t.string().optional(),
            "finalPedoSiteScore": t.number(),
        }
    ).named(renames["ClassifierPornSiteDataIn"])
    types["ClassifierPornSiteDataOut"] = t.struct(
        {
            "siteSoftpornRatio": t.number(),
            "violenceScore": t.number().optional(),
            "avgPedoPageScore": t.number().optional(),
            "numberOfPedoPages": t.string().optional(),
            "violenceStats": t.proxy(renames["ClassifierPornSiteViolenceStatsOut"]),
            "versionedscore": t.array(
                t.proxy(renames["ClassifierPornSiteDataVersionedScoreOut"])
            ),
            "numberOfPages": t.string().optional(),
            "sitePornRatio": t.number().optional(),
            "site": t.string().optional(),
            "finalPedoSiteScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ClassifierPornSiteDataOut"])
    types["AssistantApiCoreTypesProviderIn"] = t.struct(
        {
            "chromeosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesChromeOsAppInfoIn"]
            ).optional(),
            "fallbackUrl": t.string().optional(),
            "kaiosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesKaiOsAppInfoIn"]
            ).optional(),
            "sipProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesSipProviderInfoIn"]
            ).optional(),
            "iosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesIosAppInfoIn"]
            ).optional(),
            "internalProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesInternalProviderInfoIn"]
            ).optional(),
            "webProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesWebProviderInfoIn"]
            ).optional(),
            "iconImageUrl": t.string().optional(),
            "cloudProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesCloudProviderInfoIn"]
            ).optional(),
            "castAppInfo": t.proxy(
                renames["AssistantApiCoreTypesCastAppInfoIn"]
            ).optional(),
            "androidAppInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoIn"]
            ).optional(),
            "homeAppInfo": t.proxy(renames["AssistantApiCoreTypesHomeAppInfoIn"]),
        }
    ).named(renames["AssistantApiCoreTypesProviderIn"])
    types["AssistantApiCoreTypesProviderOut"] = t.struct(
        {
            "chromeosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesChromeOsAppInfoOut"]
            ).optional(),
            "fallbackUrl": t.string().optional(),
            "kaiosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesKaiOsAppInfoOut"]
            ).optional(),
            "sipProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesSipProviderInfoOut"]
            ).optional(),
            "iosAppInfo": t.proxy(
                renames["AssistantApiCoreTypesIosAppInfoOut"]
            ).optional(),
            "internalProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesInternalProviderInfoOut"]
            ).optional(),
            "webProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesWebProviderInfoOut"]
            ).optional(),
            "iconImageUrl": t.string().optional(),
            "cloudProviderInfo": t.proxy(
                renames["AssistantApiCoreTypesCloudProviderInfoOut"]
            ).optional(),
            "castAppInfo": t.proxy(
                renames["AssistantApiCoreTypesCastAppInfoOut"]
            ).optional(),
            "androidAppInfo": t.proxy(
                renames["AssistantApiCoreTypesAndroidAppInfoOut"]
            ).optional(),
            "homeAppInfo": t.proxy(renames["AssistantApiCoreTypesHomeAppInfoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesProviderOut"])
    types["NlpSemanticParsingModelsShoppingAssistantStoreIn"] = t.struct(
        {
            "location": t.proxy(
                renames["NlpSemanticParsingLocalLocationIn"]
            ).optional(),
            "name": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantStoreIn"])
    types["NlpSemanticParsingModelsShoppingAssistantStoreOut"] = t.struct(
        {
            "location": t.proxy(
                renames["NlpSemanticParsingLocalLocationOut"]
            ).optional(),
            "name": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsShoppingAssistantStoreOut"])
    types["IndexingEmbeddedContentRenderCacheStatsIn"] = t.struct(
        {
            "lastRenderedTimestampUsec": t.string().optional(),
            "crawledSimhashDistance": t.integer(),
            "renderedSimhashDistance": t.integer(),
            "cacheExpireTimestampUsec": t.string().optional(),
            "renderCache": t.string(),
        }
    ).named(renames["IndexingEmbeddedContentRenderCacheStatsIn"])
    types["IndexingEmbeddedContentRenderCacheStatsOut"] = t.struct(
        {
            "lastRenderedTimestampUsec": t.string().optional(),
            "crawledSimhashDistance": t.integer(),
            "renderedSimhashDistance": t.integer(),
            "cacheExpireTimestampUsec": t.string().optional(),
            "renderCache": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentRenderCacheStatsOut"])
    types["NlpSemanticParsingModelsMediaEpisodeConstraintIn"] = t.struct(
        {
            "description": t.proxy(
                renames["NlpSemanticParsingModelsMediaDescriptionIn"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeIn"]
            ).optional(),
            "absoluteIndex": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataIn"]),
            "rawText": t.string(),
            "relativeIndex": t.integer().optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaEpisodeConstraintIn"])
    types["NlpSemanticParsingModelsMediaEpisodeConstraintOut"] = t.struct(
        {
            "description": t.proxy(
                renames["NlpSemanticParsingModelsMediaDescriptionOut"]
            ).optional(),
            "dateTime": t.proxy(
                renames["NlpSemanticParsingDatetimeDateTimeOut"]
            ).optional(),
            "absoluteIndex": t.integer().optional(),
            "evalData": t.proxy(renames["NlpSemanticParsingAnnotationEvalDataOut"]),
            "rawText": t.string(),
            "relativeIndex": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingModelsMediaEpisodeConstraintOut"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclIn"] = t.struct(
        {
            "predefinedAclEntry": t.array(t.string()).optional(),
            "aclEntry": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryIn"]
                )
            ).optional(),
            "authorizedViewers": t.array(t.string()).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclIn"])
    types["AppsPeopleOzExternalMergedpeopleapiFieldAclOut"] = t.struct(
        {
            "predefinedAclEntry": t.array(t.string()).optional(),
            "aclEntry": t.array(
                t.proxy(
                    renames["AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryOut"]
                )
            ).optional(),
            "authorizedViewers": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiFieldAclOut"])
    types["TelephoneNumberIn"] = t.struct(
        {
            "nationalPrefix": t.string().optional(),
            "number": t.array(t.string()).optional(),
            "extension": t.string().optional(),
            "areaCode": t.string().optional(),
            "countryCode": t.integer().optional(),
        }
    ).named(renames["TelephoneNumberIn"])
    types["TelephoneNumberOut"] = t.struct(
        {
            "nationalPrefix": t.string().optional(),
            "number": t.array(t.string()).optional(),
            "extension": t.string().optional(),
            "areaCode": t.string().optional(),
            "countryCode": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TelephoneNumberOut"])
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoIn"
    ] = t.struct(
        {
            "startTimedeltaMs": t.string().optional(),
            "effectDurationMs": t.string().optional(),
            "isEnabled": t.boolean().optional(),
        }
    ).named(
        renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoIn"]
    )
    types[
        "AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoOut"
    ] = t.struct(
        {
            "startTimedeltaMs": t.string().optional(),
            "effectDurationMs": t.string().optional(),
            "isEnabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfoOut"]
    )
    types["GoogleInternalAppsWaldoV1alphaCustomLocationIn"] = t.struct(
        {
            "label": t.string().optional(),
            "location": t.string().optional(),
            "geoCoordinates": t.proxy(renames["GoogleTypeLatLngIn"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaCustomLocationIn"])
    types["GoogleInternalAppsWaldoV1alphaCustomLocationOut"] = t.struct(
        {
            "label": t.string().optional(),
            "location": t.string().optional(),
            "geoCoordinates": t.proxy(renames["GoogleTypeLatLngOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleInternalAppsWaldoV1alphaCustomLocationOut"])
    types["QualityQrewritePrimaryCalendarAliasIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["QualityQrewritePrimaryCalendarAliasIn"])
    types["QualityQrewritePrimaryCalendarAliasOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["QualityQrewritePrimaryCalendarAliasOut"])
    types["AssistantApiOemCapabilitiesIn"] = t.struct(
        {
            "thirdPartyActionConfig": t.proxy(
                renames["AssistantApiThirdPartyActionConfigIn"]
            ).optional(),
            "cloudCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoCloudCapabilityIn"]
            ).optional(),
            "cloudDeviceCapabilities": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "deviceModelRevisionId": t.string().optional(),
            "deviceSpecificData": t.string().optional(),
            "internalCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoInternalCapabilityIn"]
            ).optional(),
            "deviceModelId": t.string().optional(),
        }
    ).named(renames["AssistantApiOemCapabilitiesIn"])
    types["AssistantApiOemCapabilitiesOut"] = t.struct(
        {
            "thirdPartyActionConfig": t.proxy(
                renames["AssistantApiThirdPartyActionConfigOut"]
            ).optional(),
            "cloudCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoCloudCapabilityOut"]
            ).optional(),
            "cloudDeviceCapabilities": t.struct(
                {"_": t.string().optional()}
            ).optional(),
            "deviceModelRevisionId": t.string().optional(),
            "deviceSpecificData": t.string().optional(),
            "internalCapability": t.proxy(
                renames["AssistantDevicesPlatformProtoInternalCapabilityOut"]
            ).optional(),
            "deviceModelId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiOemCapabilitiesOut"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotValueIn"] = t.struct(
        {
            "values": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueIn"
                    ]
                )
            )
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueIn"])
    types["NlpSemanticParsingProtoActionsOnGoogleSlotValueOut"] = t.struct(
        {
            "values": t.array(
                t.proxy(
                    renames[
                        "NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValueOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSemanticParsingProtoActionsOnGoogleSlotValueOut"])
    types["BusinessHoursIntervalIn"] = t.struct(
        {"start": t.integer().optional(), "end": t.integer().optional()}
    ).named(renames["BusinessHoursIntervalIn"])
    types["BusinessHoursIntervalOut"] = t.struct(
        {
            "start": t.integer().optional(),
            "end": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BusinessHoursIntervalOut"])
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleIn"
    ] = t.struct({"intentId": t.string(), "slotName": t.string()}).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleIn"]
    )
    types[
        "KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleOut"
    ] = t.struct(
        {
            "intentId": t.string(),
            "slotName": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRoleOut"]
    )
    types["ScienceCitationSubjectIn"] = t.struct(
        {"Probability": t.number().optional(), "Name": t.string().optional()}
    ).named(renames["ScienceCitationSubjectIn"])
    types["ScienceCitationSubjectOut"] = t.struct(
        {
            "Probability": t.number().optional(),
            "Name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceCitationSubjectOut"])
    types["AppsPeopleOzExternalMergedpeopleapiMissionIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "value": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMissionIn"])
    types["AppsPeopleOzExternalMergedpeopleapiMissionOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "value": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiMissionOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeIn"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "bornBefore": t.string().optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeOut"] = t.struct(
        {
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "bornBefore": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCertifiedBornBeforeOut"])
    types["AssistantContextAppProviderIdIn"] = t.struct(
        {
            "androidPackageName": t.string().optional(),
            "versionCode": t.integer().optional(),
            "castAppId": t.string().optional(),
            "activityClassName": t.string().optional(),
        }
    ).named(renames["AssistantContextAppProviderIdIn"])
    types["AssistantContextAppProviderIdOut"] = t.struct(
        {
            "androidPackageName": t.string().optional(),
            "versionCode": t.integer().optional(),
            "castAppId": t.string().optional(),
            "activityClassName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantContextAppProviderIdOut"])
    types["ScienceOceanViewCountryViewIn"] = t.struct(
        {"ViewType": t.integer().optional(), "CountryCode": t.string().optional()}
    ).named(renames["ScienceOceanViewCountryViewIn"])
    types["ScienceOceanViewCountryViewOut"] = t.struct(
        {
            "ViewType": t.integer().optional(),
            "CountryCode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScienceOceanViewCountryViewOut"])
    types["MustangReposWwwSnippetsOrganicListSnippetResponseIn"] = t.struct(
        {
            "items": t.array(t.string()),
            "headerUsedInSnippet": t.boolean().optional(),
            "header": t.string().optional(),
            "radishScore": t.number().optional(),
            "headerTitleRedundancy": t.number().optional(),
            "originalTotalItems": t.integer().optional(),
        }
    ).named(renames["MustangReposWwwSnippetsOrganicListSnippetResponseIn"])
    types["MustangReposWwwSnippetsOrganicListSnippetResponseOut"] = t.struct(
        {
            "items": t.array(t.string()),
            "headerUsedInSnippet": t.boolean().optional(),
            "header": t.string().optional(),
            "radishScore": t.number().optional(),
            "headerTitleRedundancy": t.number().optional(),
            "originalTotalItems": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MustangReposWwwSnippetsOrganicListSnippetResponseOut"])
    types["GoogleCloudDocumentaiV1DocumentStyleFontSizeIn"] = t.struct(
        {"size": t.number().optional(), "unit": t.string().optional()}
    ).named(renames["GoogleCloudDocumentaiV1DocumentStyleFontSizeIn"])
    types["GoogleCloudDocumentaiV1DocumentStyleFontSizeOut"] = t.struct(
        {
            "size": t.number().optional(),
            "unit": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentStyleFontSizeOut"])
    types["VideoContentSearchCaptionSpanAnchorSetFeaturesIn"] = t.struct(
        {
            "anchorSetDolphinScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsIn"]
            ).optional()
        }
    ).named(renames["VideoContentSearchCaptionSpanAnchorSetFeaturesIn"])
    types["VideoContentSearchCaptionSpanAnchorSetFeaturesOut"] = t.struct(
        {
            "anchorSetDolphinScoreStats": t.proxy(
                renames["VideoContentSearchMetricStatsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoContentSearchCaptionSpanAnchorSetFeaturesOut"])
    types["NlpMeaningMeaningRemodelingControlIn"] = t.struct(
        {"remodelingId": t.array(t.string())}
    ).named(renames["NlpMeaningMeaningRemodelingControlIn"])
    types["NlpMeaningMeaningRemodelingControlOut"] = t.struct(
        {
            "remodelingId": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpMeaningMeaningRemodelingControlOut"])
    types["AppsPeopleOzExternalMergedpeopleapiCoverPhotoIn"] = t.struct(
        {
            "imageHeight": t.integer(),
            "isDefault": t.boolean(),
            "imageId": t.string(),
            "isAnimated": t.boolean(),
            "imageWidth": t.integer(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
            "imageUrl": t.string(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCoverPhotoIn"])
    types["AppsPeopleOzExternalMergedpeopleapiCoverPhotoOut"] = t.struct(
        {
            "imageHeight": t.integer(),
            "isDefault": t.boolean(),
            "imageId": t.string(),
            "isAnimated": t.boolean(),
            "imageWidth": t.integer(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "imageUrl": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiCoverPhotoOut"])
    types["GoogleCloudContentwarehouseV1TimestampValueIn"] = t.struct(
        {"timestampValue": t.string().optional(), "textValue": t.string().optional()}
    ).named(renames["GoogleCloudContentwarehouseV1TimestampValueIn"])
    types["GoogleCloudContentwarehouseV1TimestampValueOut"] = t.struct(
        {
            "timestampValue": t.string().optional(),
            "textValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1TimestampValueOut"])
    types["ExtraSnippetInfoResponseMatchInfoIn"] = t.struct(
        {
            "weightedItems": t.string().optional(),
            "urlMatches": t.string().optional(),
            "titleMatches": t.string().optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseMatchInfoIn"])
    types["ExtraSnippetInfoResponseMatchInfoOut"] = t.struct(
        {
            "weightedItems": t.string().optional(),
            "urlMatches": t.string().optional(),
            "titleMatches": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExtraSnippetInfoResponseMatchInfoOut"])
    types["RepositoryWebrefMentionEvalInfoIn"] = t.struct(
        {"rating": t.number().optional(), "atmWeight": t.number().optional()}
    ).named(renames["RepositoryWebrefMentionEvalInfoIn"])
    types["RepositoryWebrefMentionEvalInfoOut"] = t.struct(
        {
            "rating": t.number().optional(),
            "atmWeight": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefMentionEvalInfoOut"])
    types["GeostorePropertyValueStatusProtoIn"] = t.struct(
        {
            "propertyId": t.proxy(
                renames["GeostoreFeaturePropertyIdProtoIn"]
            ).optional(),
            "valueStatus": t.string().optional(),
        }
    ).named(renames["GeostorePropertyValueStatusProtoIn"])
    types["GeostorePropertyValueStatusProtoOut"] = t.struct(
        {
            "propertyId": t.proxy(
                renames["GeostoreFeaturePropertyIdProtoOut"]
            ).optional(),
            "valueStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostorePropertyValueStatusProtoOut"])
    types["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn"] = t.struct(
        {
            "lastProcessedOutputTimestampMs": t.string().optional(),
            "linkMember": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberIn"
                    ]
                )
            ).optional(),
            "lastModifiedInputTimestampMs": t.string().optional(),
            "fpOutlinks": t.string().optional(),
            "unvalidatedOutlink": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataIn"
                    ]
                )
            ),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoIn"])
    types["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut"] = t.struct(
        {
            "lastProcessedOutputTimestampMs": t.string().optional(),
            "linkMember": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMemberOut"
                    ]
                )
            ).optional(),
            "lastModifiedInputTimestampMs": t.string().optional(),
            "fpOutlinks": t.string().optional(),
            "unvalidatedOutlink": t.array(
                t.proxy(
                    renames[
                        "IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkDataOut"
                    ]
                )
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoOut"])
    types["TeragoogleDocumentInfoSectionIn"] = t.struct(
        {
            "tokens": t.string(),
            "name": t.string(),
            "fieldName": t.array(t.string()).optional(),
        }
    ).named(renames["TeragoogleDocumentInfoSectionIn"])
    types["TeragoogleDocumentInfoSectionOut"] = t.struct(
        {
            "tokens": t.string(),
            "name": t.string(),
            "fieldName": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TeragoogleDocumentInfoSectionOut"])
    types["GeostoreFlowLineProtoIn"] = t.struct(
        {"track": t.proxy(renames["GeostoreTrackProtoIn"])}
    ).named(renames["GeostoreFlowLineProtoIn"])
    types["GeostoreFlowLineProtoOut"] = t.struct(
        {
            "track": t.proxy(renames["GeostoreTrackProtoOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreFlowLineProtoOut"])
    types["AssistantApiSettingsDowntimeScheduleIn"] = t.struct(
        {
            "periods": t.array(
                t.proxy(renames["AssistantApiSettingsDowntimePeriodIn"])
            ).optional(),
            "enabled": t.boolean().optional(),
        }
    ).named(renames["AssistantApiSettingsDowntimeScheduleIn"])
    types["AssistantApiSettingsDowntimeScheduleOut"] = t.struct(
        {
            "periods": t.array(
                t.proxy(renames["AssistantApiSettingsDowntimePeriodOut"])
            ).optional(),
            "enabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiSettingsDowntimeScheduleOut"])
    types["GoodocLabelIn"] = t.struct(
        {
            "BreakLabel": t.proxy(renames["GoodocBreakLabelIn"]),
            "SemanticLabel": t.proxy(renames["GoodocSemanticLabelIn"]).optional(),
            "LanguageLabel": t.array(
                t.proxy(renames["GoodocLanguageLabelIn"])
            ).optional(),
            "CharLabel": t.proxy(renames["GoodocCharLabelIn"]).optional(),
            "AnchorLabel": t.array(t.proxy(renames["GoodocAnchorLabelIn"])).optional(),
        }
    ).named(renames["GoodocLabelIn"])
    types["GoodocLabelOut"] = t.struct(
        {
            "BreakLabel": t.proxy(renames["GoodocBreakLabelOut"]),
            "SemanticLabel": t.proxy(renames["GoodocSemanticLabelOut"]).optional(),
            "LanguageLabel": t.array(
                t.proxy(renames["GoodocLanguageLabelOut"])
            ).optional(),
            "CharLabel": t.proxy(renames["GoodocCharLabelOut"]).optional(),
            "AnchorLabel": t.array(t.proxy(renames["GoodocAnchorLabelOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocLabelOut"])
    types["GoogleCloudContentwarehouseV1DataUpdateActionIn"] = t.struct(
        {"entries": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["GoogleCloudContentwarehouseV1DataUpdateActionIn"])
    types["GoogleCloudContentwarehouseV1DataUpdateActionOut"] = t.struct(
        {
            "entries": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1DataUpdateActionOut"])
    types["ResearchScamQueryResponseIn"] = t.struct(
        {
            "restrictStats": t.array(
                t.proxy(renames["ResearchScamRestrictStatsIn"])
            ).optional(),
            "numUnreachableMachines": t.integer().optional(),
            "results": t.array(
                t.proxy(renames["ResearchScamNearestNeighborsIn"])
            ).optional(),
            "latency": t.array(
                t.proxy(renames["ResearchScamOnlineSearchLatencyStatsIn"])
            ).optional(),
            "status": t.proxy(renames["UtilStatusProtoIn"]).optional(),
            "numTotalMachines": t.integer().optional(),
            "numDeadlineExceededMachines": t.integer().optional(),
            "numOkMachines": t.integer().optional(),
        }
    ).named(renames["ResearchScamQueryResponseIn"])
    types["ResearchScamQueryResponseOut"] = t.struct(
        {
            "restrictStats": t.array(
                t.proxy(renames["ResearchScamRestrictStatsOut"])
            ).optional(),
            "numUnreachableMachines": t.integer().optional(),
            "results": t.array(
                t.proxy(renames["ResearchScamNearestNeighborsOut"])
            ).optional(),
            "latency": t.array(
                t.proxy(renames["ResearchScamOnlineSearchLatencyStatsOut"])
            ).optional(),
            "status": t.proxy(renames["UtilStatusProtoOut"]).optional(),
            "numTotalMachines": t.integer().optional(),
            "numDeadlineExceededMachines": t.integer().optional(),
            "numOkMachines": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResearchScamQueryResponseOut"])
    types["MediaIndexVideoCoreSignalsIn"] = t.struct(
        {
            "centroid": t.proxy(renames["MediaIndexVideoCentroidIn"]),
            "videoFrames": t.array(t.proxy(renames["MediaIndexVideoFrameIn"])),
        }
    ).named(renames["MediaIndexVideoCoreSignalsIn"])
    types["MediaIndexVideoCoreSignalsOut"] = t.struct(
        {
            "centroid": t.proxy(renames["MediaIndexVideoCentroidOut"]),
            "videoFrames": t.array(t.proxy(renames["MediaIndexVideoFrameOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MediaIndexVideoCoreSignalsOut"])
    types["AnchorsAnchorIn"] = t.struct(
        {
            "targetUrlEncoding": t.integer().optional(),
            "fullLeftContext": t.array(t.string()).optional(),
            "lastUpdateTimestamp": t.integer().optional(),
            "sourceType": t.integer().optional(),
            "fontsize": t.integer(),
            "origText": t.string().optional(),
            "forwardingTypes": t.integer().optional(),
            "weight": t.integer().optional(),
            "possiblyOldFirstseenDate": t.boolean().optional(),
            "locality": t.integer().optional(),
            "fragment": t.string().optional(),
            "setiPagerankWeight": t.number().optional(),
            "text": t.string().optional(),
            "expired": t.boolean().optional(),
            "context": t.integer(),
            "deleted": t.boolean(),
            "originalTargetDocid": t.string().optional(),
            "compressedOriginalTargetUrl": t.string().optional(),
            "linkAdditionalInfo": t.proxy(
                renames["Proto2BridgeMessageSetIn"]
            ).optional(),
            "pagerankWeight": t.number().optional(),
            "parallelLinks": t.integer().optional(),
            "compressedImageUrls": t.array(t.string()).optional(),
            "creationDate": t.integer().optional(),
            "experimental": t.boolean().optional(),
            "offset": t.integer().optional(),
            "catfishTags": t.array(t.integer()).optional(),
            "type": t.integer().optional(),
            "deletionDate": t.integer(),
            "firstseenDate": t.integer().optional(),
            "encodedNewsAnchorData": t.integer().optional(),
            "context2": t.integer().optional(),
            "isLocal": t.boolean().optional(),
            "timestamp": t.string().optional(),
            "bucket": t.integer(),
            "source": t.proxy(renames["AnchorsAnchorSourceIn"]),
            "demotionreason": t.integer().optional(),
            "linkTags": t.array(t.integer()).optional(),
            "fullRightContext": t.array(t.string()),
            "firstseenNearCreation": t.boolean().optional(),
        }
    ).named(renames["AnchorsAnchorIn"])
    types["AnchorsAnchorOut"] = t.struct(
        {
            "targetUrlEncoding": t.integer().optional(),
            "fullLeftContext": t.array(t.string()).optional(),
            "lastUpdateTimestamp": t.integer().optional(),
            "sourceType": t.integer().optional(),
            "fontsize": t.integer(),
            "origText": t.string().optional(),
            "forwardingTypes": t.integer().optional(),
            "weight": t.integer().optional(),
            "possiblyOldFirstseenDate": t.boolean().optional(),
            "locality": t.integer().optional(),
            "fragment": t.string().optional(),
            "setiPagerankWeight": t.number().optional(),
            "text": t.string().optional(),
            "expired": t.boolean().optional(),
            "context": t.integer(),
            "deleted": t.boolean(),
            "originalTargetDocid": t.string().optional(),
            "compressedOriginalTargetUrl": t.string().optional(),
            "linkAdditionalInfo": t.proxy(
                renames["Proto2BridgeMessageSetOut"]
            ).optional(),
            "pagerankWeight": t.number().optional(),
            "parallelLinks": t.integer().optional(),
            "compressedImageUrls": t.array(t.string()).optional(),
            "creationDate": t.integer().optional(),
            "experimental": t.boolean().optional(),
            "offset": t.integer().optional(),
            "catfishTags": t.array(t.integer()).optional(),
            "type": t.integer().optional(),
            "deletionDate": t.integer(),
            "firstseenDate": t.integer().optional(),
            "encodedNewsAnchorData": t.integer().optional(),
            "context2": t.integer().optional(),
            "isLocal": t.boolean().optional(),
            "timestamp": t.string().optional(),
            "bucket": t.integer(),
            "source": t.proxy(renames["AnchorsAnchorSourceOut"]),
            "demotionreason": t.integer().optional(),
            "linkTags": t.array(t.integer()).optional(),
            "fullRightContext": t.array(t.string()),
            "firstseenNearCreation": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AnchorsAnchorOut"])
    types["CopleySourceTypeListIn"] = t.struct(
        {"sourceTypeMetadata": t.array(t.proxy(renames["CopleySourceTypeMetadataIn"]))}
    ).named(renames["CopleySourceTypeListIn"])
    types["CopleySourceTypeListOut"] = t.struct(
        {
            "sourceTypeMetadata": t.array(
                t.proxy(renames["CopleySourceTypeMetadataOut"])
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CopleySourceTypeListOut"])
    types["IndexingEmbeddedContentFetchHostCountIn"] = t.struct(
        {
            "num": t.integer(),
            "counter": t.array(
                t.proxy(renames["IndexingEmbeddedContentFetchHostCountCounterIn"])
            ),
            "host": t.string(),
        }
    ).named(renames["IndexingEmbeddedContentFetchHostCountIn"])
    types["IndexingEmbeddedContentFetchHostCountOut"] = t.struct(
        {
            "num": t.integer(),
            "counter": t.array(
                t.proxy(renames["IndexingEmbeddedContentFetchHostCountCounterOut"])
            ),
            "host": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["IndexingEmbeddedContentFetchHostCountOut"])
    types["QualitySitemapTwoLevelTargetIn"] = t.struct(
        {
            "firstLevelTarget": t.proxy(renames["QualitySitemapTargetIn"]),
            "secondLevelTarget": t.array(t.proxy(renames["QualitySitemapTargetIn"])),
        }
    ).named(renames["QualitySitemapTwoLevelTargetIn"])
    types["QualitySitemapTwoLevelTargetOut"] = t.struct(
        {
            "firstLevelTarget": t.proxy(renames["QualitySitemapTargetOut"]),
            "secondLevelTarget": t.array(t.proxy(renames["QualitySitemapTargetOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QualitySitemapTwoLevelTargetOut"])
    types["GoogleAssistantAccessoryV1ResponseConfigIn"] = t.struct(
        {
            "deviceState": t.proxy(
                renames["GoogleAssistantAccessoryV1DeviceStateIn"]
            ).optional(),
            "deviceConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1DeviceConfigIn"]
            ).optional(),
            "deviceInteraction": t.string().optional(),
            "audioOutConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1AudioOutConfigIn"]
            ).optional(),
            "outputSampleRateHz": t.integer().optional(),
            "screenOutConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1ScreenOutConfigIn"]
            ).optional(),
            "responseType": t.string().optional(),
            "isNewConversation": t.boolean().optional(),
            "initialAudioBytes": t.integer().optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ResponseConfigIn"])
    types["GoogleAssistantAccessoryV1ResponseConfigOut"] = t.struct(
        {
            "deviceState": t.proxy(
                renames["GoogleAssistantAccessoryV1DeviceStateOut"]
            ).optional(),
            "deviceConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1DeviceConfigOut"]
            ).optional(),
            "deviceInteraction": t.string().optional(),
            "audioOutConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1AudioOutConfigOut"]
            ).optional(),
            "outputSampleRateHz": t.integer().optional(),
            "screenOutConfig": t.proxy(
                renames["GoogleAssistantAccessoryV1ScreenOutConfigOut"]
            ).optional(),
            "responseType": t.string().optional(),
            "isNewConversation": t.boolean().optional(),
            "initialAudioBytes": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleAssistantAccessoryV1ResponseConfigOut"])
    types["VideoPerDocDataIn"] = t.struct(
        {
            "frames": t.proxy(renames["MediaIndexVideoFramesIn"]),
            "coreSignals": t.proxy(renames["MediaIndexVideoCoreSignalsIn"]),
        }
    ).named(renames["VideoPerDocDataIn"])
    types["VideoPerDocDataOut"] = t.struct(
        {
            "frames": t.proxy(renames["MediaIndexVideoFramesOut"]),
            "coreSignals": t.proxy(renames["MediaIndexVideoCoreSignalsOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VideoPerDocDataOut"])
    types["CountrySalientCountryIn"] = t.struct(
        {
            "countryCode": t.integer(),
            "compressedSalience": t.integer(),
            "salience": t.number(),
        }
    ).named(renames["CountrySalientCountryIn"])
    types["CountrySalientCountryOut"] = t.struct(
        {
            "countryCode": t.integer(),
            "compressedSalience": t.integer(),
            "salience": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CountrySalientCountryOut"])
    types["YoutubeCommentsSentimentSentimentEntitySentimentAnnotationIn"] = t.struct(
        {
            "mentionSentiment": t.array(
                t.proxy(
                    renames[
                        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationIn"
                    ]
                )
            ),
            "entityName": t.string().optional(),
            "mid": t.string().optional(),
            "magnitude": t.number().optional(),
            "polarity": t.number().optional(),
            "score": t.number().optional(),
        }
    ).named(renames["YoutubeCommentsSentimentSentimentEntitySentimentAnnotationIn"])
    types["YoutubeCommentsSentimentSentimentEntitySentimentAnnotationOut"] = t.struct(
        {
            "mentionSentiment": t.array(
                t.proxy(
                    renames[
                        "YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotationOut"
                    ]
                )
            ),
            "entityName": t.string().optional(),
            "mid": t.string().optional(),
            "magnitude": t.number().optional(),
            "polarity": t.number().optional(),
            "score": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["YoutubeCommentsSentimentSentimentEntitySentimentAnnotationOut"])
    types["SafesearchInternalImageSignalsIn"] = t.struct(
        {
            "starburstViolenceScore": t.number(),
            "starburstPornScore": t.number().optional(),
            "imageEntitiesViolenceScore": t.number(),
        }
    ).named(renames["SafesearchInternalImageSignalsIn"])
    types["SafesearchInternalImageSignalsOut"] = t.struct(
        {
            "starburstViolenceScore": t.number(),
            "starburstPornScore": t.number().optional(),
            "imageEntitiesViolenceScore": t.number(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SafesearchInternalImageSignalsOut"])
    types["OfficialPagesQuerySetIn"] = t.struct(
        {
            "queries": t.array(t.proxy(renames["OfficialPagesOfficialKeyIn"])),
            "queryCountryLanguageFingerprints": t.array(t.string()).optional(),
        }
    ).named(renames["OfficialPagesQuerySetIn"])
    types["OfficialPagesQuerySetOut"] = t.struct(
        {
            "queries": t.array(t.proxy(renames["OfficialPagesOfficialKeyOut"])),
            "queryCountryLanguageFingerprints": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OfficialPagesQuerySetOut"])
    types["AbuseiamManualReviewerInfoIn"] = t.struct(
        {"username": t.string(), "credential": t.array(t.string())}
    ).named(renames["AbuseiamManualReviewerInfoIn"])
    types["AbuseiamManualReviewerInfoOut"] = t.struct(
        {
            "username": t.string(),
            "credential": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AbuseiamManualReviewerInfoOut"])
    types["FreebaseCitationIn"] = t.struct(
        {
            "uri": t.string().optional(),
            "provider": t.string().optional(),
            "project": t.string().optional(),
            "statement": t.string().optional(),
            "isAttributionRequired": t.boolean().optional(),
            "dataset": t.string().optional(),
        }
    ).named(renames["FreebaseCitationIn"])
    types["FreebaseCitationOut"] = t.struct(
        {
            "uri": t.string().optional(),
            "provider": t.string().optional(),
            "project": t.string().optional(),
            "statement": t.string().optional(),
            "isAttributionRequired": t.boolean().optional(),
            "dataset": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FreebaseCitationOut"])
    types["GeostoreVerticalOrderingProtoIn"] = t.struct(
        {"level": t.number().optional()}
    ).named(renames["GeostoreVerticalOrderingProtoIn"])
    types["GeostoreVerticalOrderingProtoOut"] = t.struct(
        {
            "level": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GeostoreVerticalOrderingProtoOut"])
    types["AppsPeopleOzExternalMergedpeopleapiConnectionReminderIn"] = t.struct(
        {
            "contactPromptSettings": t.proxy(
                renames["SocialGraphApiProtoContactPromptSettingsIn"]
            ).optional(),
            "prompt": t.array(
                t.proxy(renames["SocialGraphApiProtoPromptIn"])
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataIn"]
            ),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiConnectionReminderIn"])
    types["AppsPeopleOzExternalMergedpeopleapiConnectionReminderOut"] = t.struct(
        {
            "contactPromptSettings": t.proxy(
                renames["SocialGraphApiProtoContactPromptSettingsOut"]
            ).optional(),
            "prompt": t.array(
                t.proxy(renames["SocialGraphApiProtoPromptOut"])
            ).optional(),
            "metadata": t.proxy(
                renames["AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadataOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AppsPeopleOzExternalMergedpeopleapiConnectionReminderOut"])
    types["ImageRepositoryAnimatedImagePerdocDataIn"] = t.struct(
        {
            "aggregatedPornScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationIn"]
            ).optional(),
            "durationMs": t.integer().optional(),
        }
    ).named(renames["ImageRepositoryAnimatedImagePerdocDataIn"])
    types["ImageRepositoryAnimatedImagePerdocDataOut"] = t.struct(
        {
            "aggregatedPornScores": t.proxy(
                renames["ImageSafesearchContentBrainPornAnnotationOut"]
            ).optional(),
            "durationMs": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageRepositoryAnimatedImagePerdocDataOut"])
    types["PeoplestackFlexorgsProtoInternalExternalStateStatusIn"] = t.struct(
        {"contextType": t.string(), "state": t.string()}
    ).named(renames["PeoplestackFlexorgsProtoInternalExternalStateStatusIn"])
    types["PeoplestackFlexorgsProtoInternalExternalStateStatusOut"] = t.struct(
        {
            "contextType": t.string(),
            "state": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PeoplestackFlexorgsProtoInternalExternalStateStatusOut"])
    types["RepositoryAnnotationsRdfaBreadcrumbsIn"] = t.struct(
        {
            "crumb": t.array(
                t.proxy(renames["RepositoryAnnotationsRdfaCrumbIn"])
            ).optional(),
            "url": t.string().optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaBreadcrumbsIn"])
    types["RepositoryAnnotationsRdfaBreadcrumbsOut"] = t.struct(
        {
            "crumb": t.array(
                t.proxy(renames["RepositoryAnnotationsRdfaCrumbOut"])
            ).optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryAnnotationsRdfaBreadcrumbsOut"])
    types["GoogleCloudDocumentaiV1DocumentPageLayoutIn"] = t.struct(
        {
            "boundingPoly": t.proxy(
                renames["GoogleCloudDocumentaiV1BoundingPolyIn"]
            ).optional(),
            "confidence": t.number().optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorIn"]
            ).optional(),
            "orientation": t.string().optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageLayoutIn"])
    types["GoogleCloudDocumentaiV1DocumentPageLayoutOut"] = t.struct(
        {
            "boundingPoly": t.proxy(
                renames["GoogleCloudDocumentaiV1BoundingPolyOut"]
            ).optional(),
            "confidence": t.number().optional(),
            "textAnchor": t.proxy(
                renames["GoogleCloudDocumentaiV1DocumentTextAnchorOut"]
            ).optional(),
            "orientation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudDocumentaiV1DocumentPageLayoutOut"])
    types["AssistantApiCoreTypesMessageNotificationIn"] = t.struct(
        {
            "markAsReadActionAvailable": t.boolean().optional(),
            "messageRecipientType": t.string(),
            "groupingKey": t.string().optional(),
            "packageName": t.string().optional(),
            "dataUri": t.string().optional(),
            "bundleId": t.string().optional(),
            "mimeType": t.string().optional(),
            "sender": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationPersonIn"]
            ),
            "messageLength": t.integer().optional(),
            "groupName": t.string().optional(),
            "postTime": t.string().optional(),
            "opaqueToken": t.string().optional(),
            "notificationKey": t.string().optional(),
            "appName": t.string().optional(),
            "notificationIconKey": t.string().optional(),
            "senderName": t.string().optional(),
            "notificationEntries": t.array(
                t.proxy(
                    renames[
                        "AssistantApiCoreTypesMessageNotificationNotificationEntryIn"
                    ]
                )
            ),
            "replyActionAvailable": t.boolean().optional(),
            "index": t.integer().optional(),
        }
    ).named(renames["AssistantApiCoreTypesMessageNotificationIn"])
    types["AssistantApiCoreTypesMessageNotificationOut"] = t.struct(
        {
            "markAsReadActionAvailable": t.boolean().optional(),
            "messageRecipientType": t.string(),
            "groupingKey": t.string().optional(),
            "packageName": t.string().optional(),
            "dataUri": t.string().optional(),
            "bundleId": t.string().optional(),
            "mimeType": t.string().optional(),
            "sender": t.proxy(
                renames["AssistantApiCoreTypesMessageNotificationPersonOut"]
            ),
            "messageLength": t.integer().optional(),
            "groupName": t.string().optional(),
            "postTime": t.string().optional(),
            "opaqueToken": t.string().optional(),
            "notificationKey": t.string().optional(),
            "appName": t.string().optional(),
            "notificationIconKey": t.string().optional(),
            "senderName": t.string().optional(),
            "notificationEntries": t.array(
                t.proxy(
                    renames[
                        "AssistantApiCoreTypesMessageNotificationNotificationEntryOut"
                    ]
                )
            ),
            "replyActionAvailable": t.boolean().optional(),
            "index": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AssistantApiCoreTypesMessageNotificationOut"])
    types["GoogleCloudContentwarehouseV1QAResultIn"] = t.struct(
        {
            "highlights": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1QAResultHighlightIn"])
            ).optional(),
            "confidenceScore": t.number().optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1QAResultIn"])
    types["GoogleCloudContentwarehouseV1QAResultOut"] = t.struct(
        {
            "highlights": t.array(
                t.proxy(renames["GoogleCloudContentwarehouseV1QAResultHighlightOut"])
            ).optional(),
            "confidenceScore": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoogleCloudContentwarehouseV1QAResultOut"])
    types["NlpSaftMeasureIn"] = t.struct(
        {
            "value": t.string().optional(),
            "canonical": t.number().optional(),
            "type": t.string(),
            "unit": t.string(),
            "granularity": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseIn"]).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetIn"]).optional(),
        }
    ).named(renames["NlpSaftMeasureIn"])
    types["NlpSaftMeasureOut"] = t.struct(
        {
            "value": t.string().optional(),
            "canonical": t.number().optional(),
            "type": t.string(),
            "unit": t.string(),
            "granularity": t.number().optional(),
            "phrase": t.proxy(renames["NlpSaftPhraseOut"]).optional(),
            "info": t.proxy(renames["Proto2BridgeMessageSetOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NlpSaftMeasureOut"])
    types["DrishtiCompressedFeatureIn"] = t.struct(
        {
            "featureName": t.string(),
            "inRangeBitstream": t.string().optional(),
            "outOfRangeBitstream": t.string(),
        }
    ).named(renames["DrishtiCompressedFeatureIn"])
    types["DrishtiCompressedFeatureOut"] = t.struct(
        {
            "featureName": t.string(),
            "inRangeBitstream": t.string().optional(),
            "outOfRangeBitstream": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DrishtiCompressedFeatureOut"])
    types["OceanPerDocDataIn"] = t.struct(
        {
            "pageNumber": t.integer().optional(),
            "flags": t.string().optional(),
            "numPages": t.integer(),
            "pageid": t.integer(),
            "volumeid": t.string(),
        }
    ).named(renames["OceanPerDocDataIn"])
    types["OceanPerDocDataOut"] = t.struct(
        {
            "pageNumber": t.integer().optional(),
            "flags": t.string().optional(),
            "numPages": t.integer(),
            "pageid": t.integer(),
            "volumeid": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OceanPerDocDataOut"])
    types["RepositoryWebrefEntityJoinIn"] = t.struct(
        {
            "enricherDebugData": t.proxy(
                renames["RepositoryWebrefEnricherDebugDataIn"]
            ).optional(),
            "representation": t.array(
                t.proxy(renames["RepositoryWebrefDomainSpecificRepresentationIn"])
            ).optional(),
            "linkInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalLinkInfoIn"])
            ).optional(),
            "annotatedEntityId": t.proxy(
                renames["RepositoryWebrefWebrefEntityIdIn"]
            ).optional(),
            "enricherAnnotatorProfile": t.proxy(
                renames["RepositoryWebrefAnnotatorProfileIn"]
            ).optional(),
            "cdoc": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocIn"])
            ).optional(),
            "debugInfo": t.array(
                t.proxy(renames["RepositoryWebrefEntityDebugInfoIn"])
            ).optional(),
            "refconNameInfo": t.array(
                t.proxy(renames["RepositoryWebrefRefconRefconNameInfoIn"])
            ).optional(),
            "humanRatings": t.proxy(
                renames["RepositoryWebrefHumanRatingsIn"]
            ).optional(),
            "extraData": t.proxy(renames["RepositoryWebrefExtraMetadataIn"]).optional(),
            "contextNameInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalNameInfoIn"])
            ).optional(),
            "nameInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalNameInfoIn"])
            ).optional(),
        }
    ).named(renames["RepositoryWebrefEntityJoinIn"])
    types["RepositoryWebrefEntityJoinOut"] = t.struct(
        {
            "enricherDebugData": t.proxy(
                renames["RepositoryWebrefEnricherDebugDataOut"]
            ).optional(),
            "representation": t.array(
                t.proxy(renames["RepositoryWebrefDomainSpecificRepresentationOut"])
            ).optional(),
            "linkInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalLinkInfoOut"])
            ).optional(),
            "annotatedEntityId": t.proxy(
                renames["RepositoryWebrefWebrefEntityIdOut"]
            ).optional(),
            "enricherAnnotatorProfile": t.proxy(
                renames["RepositoryWebrefAnnotatorProfileOut"]
            ).optional(),
            "cdoc": t.array(
                t.proxy(renames["RepositoryWebrefSimplifiedCompositeDocOut"])
            ).optional(),
            "debugInfo": t.array(
                t.proxy(renames["RepositoryWebrefEntityDebugInfoOut"])
            ).optional(),
            "refconNameInfo": t.array(
                t.proxy(renames["RepositoryWebrefRefconRefconNameInfoOut"])
            ).optional(),
            "humanRatings": t.proxy(
                renames["RepositoryWebrefHumanRatingsOut"]
            ).optional(),
            "extraData": t.proxy(
                renames["RepositoryWebrefExtraMetadataOut"]
            ).optional(),
            "contextNameInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalNameInfoOut"])
            ).optional(),
            "nameInfo": t.array(
                t.proxy(renames["RepositoryWebrefGlobalNameInfoOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RepositoryWebrefEntityJoinOut"])
    types["KnowledgeAnswersOpaqueCalendarEventTypeIn"] = t.struct(
        {"_": t.string().optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarEventTypeIn"])
    types["KnowledgeAnswersOpaqueCalendarEventTypeOut"] = t.struct(
        {"error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["KnowledgeAnswersOpaqueCalendarEventTypeOut"])
    types["GoodocCharLabelIn"] = t.struct(
        {
            "Penalty": t.integer().optional(),
            "NotOcrablePerQA": t.boolean().optional(),
            "HorizontalScale": t.integer().optional(),
            "IsStrikeout": t.boolean(),
            "BaseLine": t.integer().optional(),
            "HasUncertainHeight": t.boolean().optional(),
            "SerifProbability": t.integer().optional(),
            "IsBold": t.boolean(),
            "FontType": t.integer(),
            "IsSuperscript": t.boolean(),
            "Confidence": t.integer().optional(),
            "IsSubscript": t.boolean(),
            "CharacterHeight": t.integer().optional(),
            "IsItalic": t.boolean(),
            "Color": t.integer().optional(),
            "IsSuspicious": t.boolean().optional(),
            "FontSize": t.integer().optional(),
            "FontId": t.integer().optional(),
            "IsUnderlined": t.boolean(),
            "IsSmallCaps": t.boolean(),
            "FontSizeFloat": t.number().optional(),
        }
    ).named(renames["GoodocCharLabelIn"])
    types["GoodocCharLabelOut"] = t.struct(
        {
            "Penalty": t.integer().optional(),
            "NotOcrablePerQA": t.boolean().optional(),
            "HorizontalScale": t.integer().optional(),
            "IsStrikeout": t.boolean(),
            "BaseLine": t.integer().optional(),
            "HasUncertainHeight": t.boolean().optional(),
            "SerifProbability": t.integer().optional(),
            "IsBold": t.boolean(),
            "FontType": t.integer(),
            "IsSuperscript": t.boolean(),
            "Confidence": t.integer().optional(),
            "IsSubscript": t.boolean(),
            "CharacterHeight": t.integer().optional(),
            "IsItalic": t.boolean(),
            "Color": t.integer().optional(),
            "IsSuspicious": t.boolean().optional(),
            "FontSize": t.integer().optional(),
            "FontId": t.integer().optional(),
            "IsUnderlined": t.boolean(),
            "IsSmallCaps": t.boolean(),
            "FontSizeFloat": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GoodocCharLabelOut"])

    functions = {}
    functions["projectsFetchAcl"] = contentwarehouse.post(
        "v1/{resource}:setAcl",
        t.struct(
            {
                "resource": t.string(),
                "projectOwner": t.boolean().optional(),
                "policy": t.proxy(renames["GoogleIamV1PolicyIn"]),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1SetAclResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsSetAcl"] = contentwarehouse.post(
        "v1/{resource}:setAcl",
        t.struct(
            {
                "resource": t.string(),
                "projectOwner": t.boolean().optional(),
                "policy": t.proxy(renames["GoogleIamV1PolicyIn"]),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1SetAclResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsInitialize"] = contentwarehouse.post(
        "v1/{location}:initialize",
        t.struct(
            {
                "location": t.string(),
                "accessControlMode": t.string(),
                "kmsKey": t.string().optional(),
                "documentCreatorDefaultRole": t.string().optional(),
                "databaseType": t.string(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleLongrunningOperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsRuleSetsGet"] = contentwarehouse.patch(
        "v1/{name}",
        t.struct(
            {
                "name": t.string(),
                "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"]),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsRuleSetsCreate"] = contentwarehouse.patch(
        "v1/{name}",
        t.struct(
            {
                "name": t.string(),
                "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"]),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsRuleSetsDelete"] = contentwarehouse.patch(
        "v1/{name}",
        t.struct(
            {
                "name": t.string(),
                "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"]),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsRuleSetsList"] = contentwarehouse.patch(
        "v1/{name}",
        t.struct(
            {
                "name": t.string(),
                "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"]),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsRuleSetsPatch"] = contentwarehouse.patch(
        "v1/{name}",
        t.struct(
            {
                "name": t.string(),
                "ruleSet": t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetIn"]),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1RuleSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentSchemasList"] = contentwarehouse.post(
        "v1/{parent}/documentSchemas",
        t.struct(
            {
                "parent": t.string(),
                "displayName": t.string(),
                "name": t.string().optional(),
                "documentIsFolder": t.boolean().optional(),
                "description": t.string().optional(),
                "propertyDefinitions": t.array(
                    t.proxy(
                        renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"]
                    )
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentSchemasDelete"] = contentwarehouse.post(
        "v1/{parent}/documentSchemas",
        t.struct(
            {
                "parent": t.string(),
                "displayName": t.string(),
                "name": t.string().optional(),
                "documentIsFolder": t.boolean().optional(),
                "description": t.string().optional(),
                "propertyDefinitions": t.array(
                    t.proxy(
                        renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"]
                    )
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentSchemasGet"] = contentwarehouse.post(
        "v1/{parent}/documentSchemas",
        t.struct(
            {
                "parent": t.string(),
                "displayName": t.string(),
                "name": t.string().optional(),
                "documentIsFolder": t.boolean().optional(),
                "description": t.string().optional(),
                "propertyDefinitions": t.array(
                    t.proxy(
                        renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"]
                    )
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentSchemasPatch"] = contentwarehouse.post(
        "v1/{parent}/documentSchemas",
        t.struct(
            {
                "parent": t.string(),
                "displayName": t.string(),
                "name": t.string().optional(),
                "documentIsFolder": t.boolean().optional(),
                "description": t.string().optional(),
                "propertyDefinitions": t.array(
                    t.proxy(
                        renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"]
                    )
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentSchemasCreate"] = contentwarehouse.post(
        "v1/{parent}/documentSchemas",
        t.struct(
            {
                "parent": t.string(),
                "displayName": t.string(),
                "name": t.string().optional(),
                "documentIsFolder": t.boolean().optional(),
                "description": t.string().optional(),
                "propertyDefinitions": t.array(
                    t.proxy(
                        renames["GoogleCloudContentwarehouseV1PropertyDefinitionIn"]
                    )
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1DocumentSchemaOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsSynonymSetsPatch"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsSynonymSetsDelete"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsSynonymSetsCreate"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsSynonymSetsList"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsSynonymSetsGet"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleCloudContentwarehouseV1SynonymSetOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsOperationsGet"] = contentwarehouse.get(
        "v1/{name}",
        t.struct({"name": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["GoogleLongrunningOperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsSearch"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsDelete"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsGet"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsPatch"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsLinkedSources"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsCreate"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsFetchAcl"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsLock"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsSetAcl"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsLinkedTargets"] = contentwarehouse.post(
        "v1/{parent}/linkedTargets",
        t.struct(
            {
                "parent": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleCloudContentwarehouseV1ListLinkedTargetsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsReferenceIdGet"] = contentwarehouse.post(
        "v1/{name}:delete",
        t.struct(
            {
                "name": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleProtobufEmptyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsReferenceIdPatch"] = contentwarehouse.post(
        "v1/{name}:delete",
        t.struct(
            {
                "name": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleProtobufEmptyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsReferenceIdDelete"] = contentwarehouse.post(
        "v1/{name}:delete",
        t.struct(
            {
                "name": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleProtobufEmptyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsDocumentLinksCreate"] = contentwarehouse.post(
        "v1/{name}:delete",
        t.struct(
            {
                "name": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleProtobufEmptyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsLocationsDocumentsDocumentLinksDelete"] = contentwarehouse.post(
        "v1/{name}:delete",
        t.struct(
            {
                "name": t.string(),
                "requestMetadata": t.proxy(
                    renames["GoogleCloudContentwarehouseV1RequestMetadataIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["GoogleProtobufEmptyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )

    return Import(
        importer="contentwarehouse",
        renames=renames,
        types=Box(types),
        functions=Box(functions),
    )
