from typegraph import t
from box import Box
from typegraph.importers.base.importer import Import
from typegraph.runtimes.http import HTTPRuntime


def import_compute() -> Import:
    compute = HTTPRuntime("https://compute.googleapis.com/")

    renames = {
        "ErrorResponse": "_compute_1_ErrorResponse",
        "ProjectsGetXpnResourcesIn": "_compute_2_ProjectsGetXpnResourcesIn",
        "ProjectsGetXpnResourcesOut": "_compute_3_ProjectsGetXpnResourcesOut",
        "RegionInstanceGroupManagersDeleteInstancesRequestIn": "_compute_4_RegionInstanceGroupManagersDeleteInstancesRequestIn",
        "RegionInstanceGroupManagersDeleteInstancesRequestOut": "_compute_5_RegionInstanceGroupManagersDeleteInstancesRequestOut",
        "InstanceGroupManagersListPerInstanceConfigsRespIn": "_compute_6_InstanceGroupManagersListPerInstanceConfigsRespIn",
        "InstanceGroupManagersListPerInstanceConfigsRespOut": "_compute_7_InstanceGroupManagersListPerInstanceConfigsRespOut",
        "ConnectionDrainingIn": "_compute_8_ConnectionDrainingIn",
        "ConnectionDrainingOut": "_compute_9_ConnectionDrainingOut",
        "UsableSubnetworksAggregatedListIn": "_compute_10_UsableSubnetworksAggregatedListIn",
        "UsableSubnetworksAggregatedListOut": "_compute_11_UsableSubnetworksAggregatedListOut",
        "InstancePropertiesIn": "_compute_12_InstancePropertiesIn",
        "InstancePropertiesOut": "_compute_13_InstancePropertiesOut",
        "VpnGatewayStatusVpnConnectionIn": "_compute_14_VpnGatewayStatusVpnConnectionIn",
        "VpnGatewayStatusVpnConnectionOut": "_compute_15_VpnGatewayStatusVpnConnectionOut",
        "RouterBgpPeerBfdIn": "_compute_16_RouterBgpPeerBfdIn",
        "RouterBgpPeerBfdOut": "_compute_17_RouterBgpPeerBfdOut",
        "InstanceManagedByIgmErrorInstanceActionDetailsIn": "_compute_18_InstanceManagedByIgmErrorInstanceActionDetailsIn",
        "InstanceManagedByIgmErrorInstanceActionDetailsOut": "_compute_19_InstanceManagedByIgmErrorInstanceActionDetailsOut",
        "MetadataFilterIn": "_compute_20_MetadataFilterIn",
        "MetadataFilterOut": "_compute_21_MetadataFilterOut",
        "DiskTypesScopedListIn": "_compute_22_DiskTypesScopedListIn",
        "DiskTypesScopedListOut": "_compute_23_DiskTypesScopedListOut",
        "FirewallPolicyRuleMatcherLayer4ConfigIn": "_compute_24_FirewallPolicyRuleMatcherLayer4ConfigIn",
        "FirewallPolicyRuleMatcherLayer4ConfigOut": "_compute_25_FirewallPolicyRuleMatcherLayer4ConfigOut",
        "NodeGroupsListNodesIn": "_compute_26_NodeGroupsListNodesIn",
        "NodeGroupsListNodesOut": "_compute_27_NodeGroupsListNodesOut",
        "TargetPoolsAddHealthCheckRequestIn": "_compute_28_TargetPoolsAddHealthCheckRequestIn",
        "TargetPoolsAddHealthCheckRequestOut": "_compute_29_TargetPoolsAddHealthCheckRequestOut",
        "PacketMirroringMirroredResourceInfoSubnetInfoIn": "_compute_30_PacketMirroringMirroredResourceInfoSubnetInfoIn",
        "PacketMirroringMirroredResourceInfoSubnetInfoOut": "_compute_31_PacketMirroringMirroredResourceInfoSubnetInfoOut",
        "LogConfigCloudAuditOptionsIn": "_compute_32_LogConfigCloudAuditOptionsIn",
        "LogConfigCloudAuditOptionsOut": "_compute_33_LogConfigCloudAuditOptionsOut",
        "PacketMirroringListIn": "_compute_34_PacketMirroringListIn",
        "PacketMirroringListOut": "_compute_35_PacketMirroringListOut",
        "RegionInstanceGroupListIn": "_compute_36_RegionInstanceGroupListIn",
        "RegionInstanceGroupListOut": "_compute_37_RegionInstanceGroupListOut",
        "InstanceGroupManagersSetTargetPoolsRequestIn": "_compute_38_InstanceGroupManagersSetTargetPoolsRequestIn",
        "InstanceGroupManagersSetTargetPoolsRequestOut": "_compute_39_InstanceGroupManagersSetTargetPoolsRequestOut",
        "ShareSettingsIn": "_compute_40_ShareSettingsIn",
        "ShareSettingsOut": "_compute_41_ShareSettingsOut",
        "TargetInstanceIn": "_compute_42_TargetInstanceIn",
        "TargetInstanceOut": "_compute_43_TargetInstanceOut",
        "ResourcePolicyListIn": "_compute_44_ResourcePolicyListIn",
        "ResourcePolicyListOut": "_compute_45_ResourcePolicyListOut",
        "InstanceManagedByIgmErrorIn": "_compute_46_InstanceManagedByIgmErrorIn",
        "InstanceManagedByIgmErrorOut": "_compute_47_InstanceManagedByIgmErrorOut",
        "VpnGatewayAggregatedListIn": "_compute_48_VpnGatewayAggregatedListIn",
        "VpnGatewayAggregatedListOut": "_compute_49_VpnGatewayAggregatedListOut",
        "TargetInstanceListIn": "_compute_50_TargetInstanceListIn",
        "TargetInstanceListOut": "_compute_51_TargetInstanceListOut",
        "GuestOsFeatureIn": "_compute_52_GuestOsFeatureIn",
        "GuestOsFeatureOut": "_compute_53_GuestOsFeatureOut",
        "ReservationsScopedListIn": "_compute_54_ReservationsScopedListIn",
        "ReservationsScopedListOut": "_compute_55_ReservationsScopedListOut",
        "RouterInterfaceIn": "_compute_56_RouterInterfaceIn",
        "RouterInterfaceOut": "_compute_57_RouterInterfaceOut",
        "PublicDelegatedPrefixAggregatedListIn": "_compute_58_PublicDelegatedPrefixAggregatedListIn",
        "PublicDelegatedPrefixAggregatedListOut": "_compute_59_PublicDelegatedPrefixAggregatedListOut",
        "InstanceGroupManagerUpdatePolicyIn": "_compute_60_InstanceGroupManagerUpdatePolicyIn",
        "InstanceGroupManagerUpdatePolicyOut": "_compute_61_InstanceGroupManagerUpdatePolicyOut",
        "TargetHttpsProxiesSetCertificateMapRequestIn": "_compute_62_TargetHttpsProxiesSetCertificateMapRequestIn",
        "TargetHttpsProxiesSetCertificateMapRequestOut": "_compute_63_TargetHttpsProxiesSetCertificateMapRequestOut",
        "TargetSslProxiesSetSslCertificatesRequestIn": "_compute_64_TargetSslProxiesSetSslCertificatesRequestIn",
        "TargetSslProxiesSetSslCertificatesRequestOut": "_compute_65_TargetSslProxiesSetSslCertificatesRequestOut",
        "RegionInstanceGroupManagerPatchInstanceConfigReqIn": "_compute_66_RegionInstanceGroupManagerPatchInstanceConfigReqIn",
        "RegionInstanceGroupManagerPatchInstanceConfigReqOut": "_compute_67_RegionInstanceGroupManagerPatchInstanceConfigReqOut",
        "RegionInstanceGroupManagersListInstancesResponseIn": "_compute_68_RegionInstanceGroupManagersListInstancesResponseIn",
        "RegionInstanceGroupManagersListInstancesResponseOut": "_compute_69_RegionInstanceGroupManagersListInstancesResponseOut",
        "BackendServiceFailoverPolicyIn": "_compute_70_BackendServiceFailoverPolicyIn",
        "BackendServiceFailoverPolicyOut": "_compute_71_BackendServiceFailoverPolicyOut",
        "UrlMapTestIn": "_compute_72_UrlMapTestIn",
        "UrlMapTestOut": "_compute_73_UrlMapTestOut",
        "DiskParamsIn": "_compute_74_DiskParamsIn",
        "DiskParamsOut": "_compute_75_DiskParamsOut",
        "NetworkEdgeSecurityServiceAggregatedListIn": "_compute_76_NetworkEdgeSecurityServiceAggregatedListIn",
        "NetworkEdgeSecurityServiceAggregatedListOut": "_compute_77_NetworkEdgeSecurityServiceAggregatedListOut",
        "InstanceWithNamedPortsIn": "_compute_78_InstanceWithNamedPortsIn",
        "InstanceWithNamedPortsOut": "_compute_79_InstanceWithNamedPortsOut",
        "PacketMirroringForwardingRuleInfoIn": "_compute_80_PacketMirroringForwardingRuleInfoIn",
        "PacketMirroringForwardingRuleInfoOut": "_compute_81_PacketMirroringForwardingRuleInfoOut",
        "OperationListIn": "_compute_82_OperationListIn",
        "OperationListOut": "_compute_83_OperationListOut",
        "TargetPoolsRemoveHealthCheckRequestIn": "_compute_84_TargetPoolsRemoveHealthCheckRequestIn",
        "TargetPoolsRemoveHealthCheckRequestOut": "_compute_85_TargetPoolsRemoveHealthCheckRequestOut",
        "ForwardingRuleAggregatedListIn": "_compute_86_ForwardingRuleAggregatedListIn",
        "ForwardingRuleAggregatedListOut": "_compute_87_ForwardingRuleAggregatedListOut",
        "PublicAdvertisedPrefixPublicDelegatedPrefixIn": "_compute_88_PublicAdvertisedPrefixPublicDelegatedPrefixIn",
        "PublicAdvertisedPrefixPublicDelegatedPrefixOut": "_compute_89_PublicAdvertisedPrefixPublicDelegatedPrefixOut",
        "BackendServiceIn": "_compute_90_BackendServiceIn",
        "BackendServiceOut": "_compute_91_BackendServiceOut",
        "ReservationAggregatedListIn": "_compute_92_ReservationAggregatedListIn",
        "ReservationAggregatedListOut": "_compute_93_ReservationAggregatedListOut",
        "HealthCheckServicesListIn": "_compute_94_HealthCheckServicesListIn",
        "HealthCheckServicesListOut": "_compute_95_HealthCheckServicesListOut",
        "SubnetworkListIn": "_compute_96_SubnetworkListIn",
        "SubnetworkListOut": "_compute_97_SubnetworkListOut",
        "UrlMapsValidateRequestIn": "_compute_98_UrlMapsValidateRequestIn",
        "UrlMapsValidateRequestOut": "_compute_99_UrlMapsValidateRequestOut",
        "HttpHeaderMatchIn": "_compute_100_HttpHeaderMatchIn",
        "HttpHeaderMatchOut": "_compute_101_HttpHeaderMatchOut",
        "InstanceGroupManagerAutoHealingPolicyIn": "_compute_102_InstanceGroupManagerAutoHealingPolicyIn",
        "InstanceGroupManagerAutoHealingPolicyOut": "_compute_103_InstanceGroupManagerAutoHealingPolicyOut",
        "PublicAdvertisedPrefixIn": "_compute_104_PublicAdvertisedPrefixIn",
        "PublicAdvertisedPrefixOut": "_compute_105_PublicAdvertisedPrefixOut",
        "NetworkEndpointGroupListIn": "_compute_106_NetworkEndpointGroupListIn",
        "NetworkEndpointGroupListOut": "_compute_107_NetworkEndpointGroupListOut",
        "InstanceGroupManagersRecreateInstancesRequestIn": "_compute_108_InstanceGroupManagersRecreateInstancesRequestIn",
        "InstanceGroupManagersRecreateInstancesRequestOut": "_compute_109_InstanceGroupManagersRecreateInstancesRequestOut",
        "OperationsScopedListIn": "_compute_110_OperationsScopedListIn",
        "OperationsScopedListOut": "_compute_111_OperationsScopedListOut",
        "ProjectsDisableXpnResourceRequestIn": "_compute_112_ProjectsDisableXpnResourceRequestIn",
        "ProjectsDisableXpnResourceRequestOut": "_compute_113_ProjectsDisableXpnResourceRequestOut",
        "InstanceGroupsSetNamedPortsRequestIn": "_compute_114_InstanceGroupsSetNamedPortsRequestIn",
        "InstanceGroupsSetNamedPortsRequestOut": "_compute_115_InstanceGroupsSetNamedPortsRequestOut",
        "InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeIn": "_compute_116_InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeIn",
        "InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeOut": "_compute_117_InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeOut",
        "SecurityPolicyRuleMatcherConfigIn": "_compute_118_SecurityPolicyRuleMatcherConfigIn",
        "SecurityPolicyRuleMatcherConfigOut": "_compute_119_SecurityPolicyRuleMatcherConfigOut",
        "TargetPoolIn": "_compute_120_TargetPoolIn",
        "TargetPoolOut": "_compute_121_TargetPoolOut",
        "BackendServiceAggregatedListIn": "_compute_122_BackendServiceAggregatedListIn",
        "BackendServiceAggregatedListOut": "_compute_123_BackendServiceAggregatedListOut",
        "TargetVpnGatewayIn": "_compute_124_TargetVpnGatewayIn",
        "TargetVpnGatewayOut": "_compute_125_TargetVpnGatewayOut",
        "Uint128In": "_compute_126_Uint128In",
        "Uint128Out": "_compute_127_Uint128Out",
        "FirewallIn": "_compute_128_FirewallIn",
        "FirewallOut": "_compute_129_FirewallOut",
        "NodeTemplatesScopedListIn": "_compute_130_NodeTemplatesScopedListIn",
        "NodeTemplatesScopedListOut": "_compute_131_NodeTemplatesScopedListOut",
        "SecurityPolicyListIn": "_compute_132_SecurityPolicyListIn",
        "SecurityPolicyListOut": "_compute_133_SecurityPolicyListOut",
        "UsageExportLocationIn": "_compute_134_UsageExportLocationIn",
        "UsageExportLocationOut": "_compute_135_UsageExportLocationOut",
        "LicenseCodeLicenseAliasIn": "_compute_136_LicenseCodeLicenseAliasIn",
        "LicenseCodeLicenseAliasOut": "_compute_137_LicenseCodeLicenseAliasOut",
        "BackendBucketCdnPolicyIn": "_compute_138_BackendBucketCdnPolicyIn",
        "BackendBucketCdnPolicyOut": "_compute_139_BackendBucketCdnPolicyOut",
        "InterconnectCircuitInfoIn": "_compute_140_InterconnectCircuitInfoIn",
        "InterconnectCircuitInfoOut": "_compute_141_InterconnectCircuitInfoOut",
        "SslCertificateIn": "_compute_142_SslCertificateIn",
        "SslCertificateOut": "_compute_143_SslCertificateOut",
        "LocationPolicyIn": "_compute_144_LocationPolicyIn",
        "LocationPolicyOut": "_compute_145_LocationPolicyOut",
        "InstanceTemplatesScopedListIn": "_compute_146_InstanceTemplatesScopedListIn",
        "InstanceTemplatesScopedListOut": "_compute_147_InstanceTemplatesScopedListOut",
        "ShieldedInstanceConfigIn": "_compute_148_ShieldedInstanceConfigIn",
        "ShieldedInstanceConfigOut": "_compute_149_ShieldedInstanceConfigOut",
        "RouteListIn": "_compute_150_RouteListIn",
        "RouteListOut": "_compute_151_RouteListOut",
        "SslCertificateAggregatedListIn": "_compute_152_SslCertificateAggregatedListIn",
        "SslCertificateAggregatedListOut": "_compute_153_SslCertificateAggregatedListOut",
        "WeightedBackendServiceIn": "_compute_154_WeightedBackendServiceIn",
        "WeightedBackendServiceOut": "_compute_155_WeightedBackendServiceOut",
        "PreservedStateIn": "_compute_156_PreservedStateIn",
        "PreservedStateOut": "_compute_157_PreservedStateOut",
        "ReservationAffinityIn": "_compute_158_ReservationAffinityIn",
        "ReservationAffinityOut": "_compute_159_ReservationAffinityOut",
        "NodeGroupNodeIn": "_compute_160_NodeGroupNodeIn",
        "NodeGroupNodeOut": "_compute_161_NodeGroupNodeOut",
        "AuditConfigIn": "_compute_162_AuditConfigIn",
        "AuditConfigOut": "_compute_163_AuditConfigOut",
        "NetworkEndpointWithHealthStatusIn": "_compute_164_NetworkEndpointWithHealthStatusIn",
        "NetworkEndpointWithHealthStatusOut": "_compute_165_NetworkEndpointWithHealthStatusOut",
        "BackendServiceLogConfigIn": "_compute_166_BackendServiceLogConfigIn",
        "BackendServiceLogConfigOut": "_compute_167_BackendServiceLogConfigOut",
        "FirewallLogConfigIn": "_compute_168_FirewallLogConfigIn",
        "FirewallLogConfigOut": "_compute_169_FirewallLogConfigOut",
        "GuestAttributesIn": "_compute_170_GuestAttributesIn",
        "GuestAttributesOut": "_compute_171_GuestAttributesOut",
        "NodeTemplateIn": "_compute_172_NodeTemplateIn",
        "NodeTemplateOut": "_compute_173_NodeTemplateOut",
        "GuestAttributesEntryIn": "_compute_174_GuestAttributesEntryIn",
        "GuestAttributesEntryOut": "_compute_175_GuestAttributesEntryOut",
        "InstanceGroupListIn": "_compute_176_InstanceGroupListIn",
        "InstanceGroupListOut": "_compute_177_InstanceGroupListOut",
        "FirewallListIn": "_compute_178_FirewallListIn",
        "FirewallListOut": "_compute_179_FirewallListOut",
        "DiskResourceStatusAsyncReplicationStatusIn": "_compute_180_DiskResourceStatusAsyncReplicationStatusIn",
        "DiskResourceStatusAsyncReplicationStatusOut": "_compute_181_DiskResourceStatusAsyncReplicationStatusOut",
        "OperationIn": "_compute_182_OperationIn",
        "OperationOut": "_compute_183_OperationOut",
        "SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionIn": "_compute_184_SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionIn",
        "SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionOut": "_compute_185_SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionOut",
        "TargetPoolInstanceHealthIn": "_compute_186_TargetPoolInstanceHealthIn",
        "TargetPoolInstanceHealthOut": "_compute_187_TargetPoolInstanceHealthOut",
        "SourceInstancePropertiesIn": "_compute_188_SourceInstancePropertiesIn",
        "SourceInstancePropertiesOut": "_compute_189_SourceInstancePropertiesOut",
        "NetworkInterfaceIn": "_compute_190_NetworkInterfaceIn",
        "NetworkInterfaceOut": "_compute_191_NetworkInterfaceOut",
        "RegionDisksRemoveResourcePoliciesRequestIn": "_compute_192_RegionDisksRemoveResourcePoliciesRequestIn",
        "RegionDisksRemoveResourcePoliciesRequestOut": "_compute_193_RegionDisksRemoveResourcePoliciesRequestOut",
        "InstanceGroupManagerStatusIn": "_compute_194_InstanceGroupManagerStatusIn",
        "InstanceGroupManagerStatusOut": "_compute_195_InstanceGroupManagerStatusOut",
        "PathMatcherIn": "_compute_196_PathMatcherIn",
        "PathMatcherOut": "_compute_197_PathMatcherOut",
        "ScreenshotIn": "_compute_198_ScreenshotIn",
        "ScreenshotOut": "_compute_199_ScreenshotOut",
        "SecurityPolicyRuleRedirectOptionsIn": "_compute_200_SecurityPolicyRuleRedirectOptionsIn",
        "SecurityPolicyRuleRedirectOptionsOut": "_compute_201_SecurityPolicyRuleRedirectOptionsOut",
        "CommitmentListIn": "_compute_202_CommitmentListIn",
        "CommitmentListOut": "_compute_203_CommitmentListOut",
        "ShieldedInstanceIdentityEntryIn": "_compute_204_ShieldedInstanceIdentityEntryIn",
        "ShieldedInstanceIdentityEntryOut": "_compute_205_ShieldedInstanceIdentityEntryOut",
        "ResourcePolicyInstanceSchedulePolicyIn": "_compute_206_ResourcePolicyInstanceSchedulePolicyIn",
        "ResourcePolicyInstanceSchedulePolicyOut": "_compute_207_ResourcePolicyInstanceSchedulePolicyOut",
        "AuthorizationLoggingOptionsIn": "_compute_208_AuthorizationLoggingOptionsIn",
        "AuthorizationLoggingOptionsOut": "_compute_209_AuthorizationLoggingOptionsOut",
        "SslCertificateManagedSslCertificateIn": "_compute_210_SslCertificateManagedSslCertificateIn",
        "SslCertificateManagedSslCertificateOut": "_compute_211_SslCertificateManagedSslCertificateOut",
        "TargetGrpcProxyListIn": "_compute_212_TargetGrpcProxyListIn",
        "TargetGrpcProxyListOut": "_compute_213_TargetGrpcProxyListOut",
        "RouterStatusNatStatusIn": "_compute_214_RouterStatusNatStatusIn",
        "RouterStatusNatStatusOut": "_compute_215_RouterStatusNatStatusOut",
        "ExternalVpnGatewayIn": "_compute_216_ExternalVpnGatewayIn",
        "ExternalVpnGatewayOut": "_compute_217_ExternalVpnGatewayOut",
        "ConfidentialInstanceConfigIn": "_compute_218_ConfidentialInstanceConfigIn",
        "ConfidentialInstanceConfigOut": "_compute_219_ConfidentialInstanceConfigOut",
        "InstanceTemplateAggregatedListIn": "_compute_220_InstanceTemplateAggregatedListIn",
        "InstanceTemplateAggregatedListOut": "_compute_221_InstanceTemplateAggregatedListOut",
        "RouterBgpIn": "_compute_222_RouterBgpIn",
        "RouterBgpOut": "_compute_223_RouterBgpOut",
        "ResourcePolicyIn": "_compute_224_ResourcePolicyIn",
        "ResourcePolicyOut": "_compute_225_ResourcePolicyOut",
        "HealthStatusIn": "_compute_226_HealthStatusIn",
        "HealthStatusOut": "_compute_227_HealthStatusOut",
        "PreservedStatePreservedDiskIn": "_compute_228_PreservedStatePreservedDiskIn",
        "PreservedStatePreservedDiskOut": "_compute_229_PreservedStatePreservedDiskOut",
        "AutoscalingPolicyCustomMetricUtilizationIn": "_compute_230_AutoscalingPolicyCustomMetricUtilizationIn",
        "AutoscalingPolicyCustomMetricUtilizationOut": "_compute_231_AutoscalingPolicyCustomMetricUtilizationOut",
        "SchedulingNodeAffinityIn": "_compute_232_SchedulingNodeAffinityIn",
        "SchedulingNodeAffinityOut": "_compute_233_SchedulingNodeAffinityOut",
        "UrlMapReferenceIn": "_compute_234_UrlMapReferenceIn",
        "UrlMapReferenceOut": "_compute_235_UrlMapReferenceOut",
        "ResourcePolicyResourceStatusInstanceSchedulePolicyStatusIn": "_compute_236_ResourcePolicyResourceStatusInstanceSchedulePolicyStatusIn",
        "ResourcePolicyResourceStatusInstanceSchedulePolicyStatusOut": "_compute_237_ResourcePolicyResourceStatusInstanceSchedulePolicyStatusOut",
        "CacheKeyPolicyIn": "_compute_238_CacheKeyPolicyIn",
        "CacheKeyPolicyOut": "_compute_239_CacheKeyPolicyOut",
        "ImageListIn": "_compute_240_ImageListIn",
        "ImageListOut": "_compute_241_ImageListOut",
        "SubnetworksSetPrivateIpGoogleAccessRequestIn": "_compute_242_SubnetworksSetPrivateIpGoogleAccessRequestIn",
        "SubnetworksSetPrivateIpGoogleAccessRequestOut": "_compute_243_SubnetworksSetPrivateIpGoogleAccessRequestOut",
        "PacketMirroringMirroredResourceInfoIn": "_compute_244_PacketMirroringMirroredResourceInfoIn",
        "PacketMirroringMirroredResourceInfoOut": "_compute_245_PacketMirroringMirroredResourceInfoOut",
        "InterconnectDiagnosticsLinkStatusIn": "_compute_246_InterconnectDiagnosticsLinkStatusIn",
        "InterconnectDiagnosticsLinkStatusOut": "_compute_247_InterconnectDiagnosticsLinkStatusOut",
        "SecurityPolicyRulePreconfiguredWafConfigExclusionIn": "_compute_248_SecurityPolicyRulePreconfiguredWafConfigExclusionIn",
        "SecurityPolicyRulePreconfiguredWafConfigExclusionOut": "_compute_249_SecurityPolicyRulePreconfiguredWafConfigExclusionOut",
        "RegionListIn": "_compute_250_RegionListIn",
        "RegionListOut": "_compute_251_RegionListOut",
        "HttpRouteActionIn": "_compute_252_HttpRouteActionIn",
        "HttpRouteActionOut": "_compute_253_HttpRouteActionOut",
        "CorsPolicyIn": "_compute_254_CorsPolicyIn",
        "CorsPolicyOut": "_compute_255_CorsPolicyOut",
        "BackendBucketCdnPolicyNegativeCachingPolicyIn": "_compute_256_BackendBucketCdnPolicyNegativeCachingPolicyIn",
        "BackendBucketCdnPolicyNegativeCachingPolicyOut": "_compute_257_BackendBucketCdnPolicyNegativeCachingPolicyOut",
        "NetworksAddPeeringRequestIn": "_compute_258_NetworksAddPeeringRequestIn",
        "NetworksAddPeeringRequestOut": "_compute_259_NetworksAddPeeringRequestOut",
        "NetworkPeeringIn": "_compute_260_NetworkPeeringIn",
        "NetworkPeeringOut": "_compute_261_NetworkPeeringOut",
        "RouterStatusBgpPeerStatusIn": "_compute_262_RouterStatusBgpPeerStatusIn",
        "RouterStatusBgpPeerStatusOut": "_compute_263_RouterStatusBgpPeerStatusOut",
        "VmEndpointNatMappingsListIn": "_compute_264_VmEndpointNatMappingsListIn",
        "VmEndpointNatMappingsListOut": "_compute_265_VmEndpointNatMappingsListOut",
        "SecurityPolicyDdosProtectionConfigIn": "_compute_266_SecurityPolicyDdosProtectionConfigIn",
        "SecurityPolicyDdosProtectionConfigOut": "_compute_267_SecurityPolicyDdosProtectionConfigOut",
        "BulkInsertInstanceResourceIn": "_compute_268_BulkInsertInstanceResourceIn",
        "BulkInsertInstanceResourceOut": "_compute_269_BulkInsertInstanceResourceOut",
        "DiskInstantiationConfigIn": "_compute_270_DiskInstantiationConfigIn",
        "DiskInstantiationConfigOut": "_compute_271_DiskInstantiationConfigOut",
        "SecurityPolicyRulePreconfiguredWafConfigIn": "_compute_272_SecurityPolicyRulePreconfiguredWafConfigIn",
        "SecurityPolicyRulePreconfiguredWafConfigOut": "_compute_273_SecurityPolicyRulePreconfiguredWafConfigOut",
        "DisksRemoveResourcePoliciesRequestIn": "_compute_274_DisksRemoveResourcePoliciesRequestIn",
        "DisksRemoveResourcePoliciesRequestOut": "_compute_275_DisksRemoveResourcePoliciesRequestOut",
        "FirewallPoliciesListAssociationsResponseIn": "_compute_276_FirewallPoliciesListAssociationsResponseIn",
        "FirewallPoliciesListAssociationsResponseOut": "_compute_277_FirewallPoliciesListAssociationsResponseOut",
        "InstancesSetNameRequestIn": "_compute_278_InstancesSetNameRequestIn",
        "InstancesSetNameRequestOut": "_compute_279_InstancesSetNameRequestOut",
        "FirewallPolicyRuleIn": "_compute_280_FirewallPolicyRuleIn",
        "FirewallPolicyRuleOut": "_compute_281_FirewallPolicyRuleOut",
        "TargetGrpcProxyIn": "_compute_282_TargetGrpcProxyIn",
        "TargetGrpcProxyOut": "_compute_283_TargetGrpcProxyOut",
        "RegionDisksResizeRequestIn": "_compute_284_RegionDisksResizeRequestIn",
        "RegionDisksResizeRequestOut": "_compute_285_RegionDisksResizeRequestOut",
        "SnapshotListIn": "_compute_286_SnapshotListIn",
        "SnapshotListOut": "_compute_287_SnapshotListOut",
        "SslPoliciesListIn": "_compute_288_SslPoliciesListIn",
        "SslPoliciesListOut": "_compute_289_SslPoliciesListOut",
        "NetworkListIn": "_compute_290_NetworkListIn",
        "NetworkListOut": "_compute_291_NetworkListOut",
        "SecurityPolicyRuleMatcherIn": "_compute_292_SecurityPolicyRuleMatcherIn",
        "SecurityPolicyRuleMatcherOut": "_compute_293_SecurityPolicyRuleMatcherOut",
        "RegionDiskTypeListIn": "_compute_294_RegionDiskTypeListIn",
        "RegionDiskTypeListOut": "_compute_295_RegionDiskTypeListOut",
        "HealthCheckServiceReferenceIn": "_compute_296_HealthCheckServiceReferenceIn",
        "HealthCheckServiceReferenceOut": "_compute_297_HealthCheckServiceReferenceOut",
        "ResourceGroupReferenceIn": "_compute_298_ResourceGroupReferenceIn",
        "ResourceGroupReferenceOut": "_compute_299_ResourceGroupReferenceOut",
        "NetworkAttachmentConnectedEndpointIn": "_compute_300_NetworkAttachmentConnectedEndpointIn",
        "NetworkAttachmentConnectedEndpointOut": "_compute_301_NetworkAttachmentConnectedEndpointOut",
        "UrlMapsScopedListIn": "_compute_302_UrlMapsScopedListIn",
        "UrlMapsScopedListOut": "_compute_303_UrlMapsScopedListOut",
        "BackendBucketCdnPolicyBypassCacheOnRequestHeaderIn": "_compute_304_BackendBucketCdnPolicyBypassCacheOnRequestHeaderIn",
        "BackendBucketCdnPolicyBypassCacheOnRequestHeaderOut": "_compute_305_BackendBucketCdnPolicyBypassCacheOnRequestHeaderOut",
        "TargetHttpsProxyAggregatedListIn": "_compute_306_TargetHttpsProxyAggregatedListIn",
        "TargetHttpsProxyAggregatedListOut": "_compute_307_TargetHttpsProxyAggregatedListOut",
        "InitialStateConfigIn": "_compute_308_InitialStateConfigIn",
        "InitialStateConfigOut": "_compute_309_InitialStateConfigOut",
        "RegionInstanceGroupManagersApplyUpdatesRequestIn": "_compute_310_RegionInstanceGroupManagersApplyUpdatesRequestIn",
        "RegionInstanceGroupManagersApplyUpdatesRequestOut": "_compute_311_RegionInstanceGroupManagersApplyUpdatesRequestOut",
        "VpnGatewayStatusHighAvailabilityRequirementStateIn": "_compute_312_VpnGatewayStatusHighAvailabilityRequirementStateIn",
        "VpnGatewayStatusHighAvailabilityRequirementStateOut": "_compute_313_VpnGatewayStatusHighAvailabilityRequirementStateOut",
        "NetworkEndpointGroupsAttachEndpointsRequestIn": "_compute_314_NetworkEndpointGroupsAttachEndpointsRequestIn",
        "NetworkEndpointGroupsAttachEndpointsRequestOut": "_compute_315_NetworkEndpointGroupsAttachEndpointsRequestOut",
        "SubnetworksScopedListIn": "_compute_316_SubnetworksScopedListIn",
        "SubnetworksScopedListOut": "_compute_317_SubnetworksScopedListOut",
        "SecurityPolicyAdvancedOptionsConfigJsonCustomConfigIn": "_compute_318_SecurityPolicyAdvancedOptionsConfigJsonCustomConfigIn",
        "SecurityPolicyAdvancedOptionsConfigJsonCustomConfigOut": "_compute_319_SecurityPolicyAdvancedOptionsConfigJsonCustomConfigOut",
        "BackendServiceIAPIn": "_compute_320_BackendServiceIAPIn",
        "BackendServiceIAPOut": "_compute_321_BackendServiceIAPOut",
        "SnapshotIn": "_compute_322_SnapshotIn",
        "SnapshotOut": "_compute_323_SnapshotOut",
        "InstanceTemplateListIn": "_compute_324_InstanceTemplateListIn",
        "InstanceTemplateListOut": "_compute_325_InstanceTemplateListOut",
        "NetworkEndpointGroupAppEngineIn": "_compute_326_NetworkEndpointGroupAppEngineIn",
        "NetworkEndpointGroupAppEngineOut": "_compute_327_NetworkEndpointGroupAppEngineOut",
        "RegionInstanceGroupManagersSetTemplateRequestIn": "_compute_328_RegionInstanceGroupManagersSetTemplateRequestIn",
        "RegionInstanceGroupManagersSetTemplateRequestOut": "_compute_329_RegionInstanceGroupManagersSetTemplateRequestOut",
        "InstanceReferenceIn": "_compute_330_InstanceReferenceIn",
        "InstanceReferenceOut": "_compute_331_InstanceReferenceOut",
        "InterconnectIn": "_compute_332_InterconnectIn",
        "InterconnectOut": "_compute_333_InterconnectOut",
        "QuotaIn": "_compute_334_QuotaIn",
        "QuotaOut": "_compute_335_QuotaOut",
        "RegionSetPolicyRequestIn": "_compute_336_RegionSetPolicyRequestIn",
        "RegionSetPolicyRequestOut": "_compute_337_RegionSetPolicyRequestOut",
        "BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyIn": "_compute_338_BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyIn",
        "BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyOut": "_compute_339_BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyOut",
        "InterconnectAttachmentConfigurationConstraintsIn": "_compute_340_InterconnectAttachmentConfigurationConstraintsIn",
        "InterconnectAttachmentConfigurationConstraintsOut": "_compute_341_InterconnectAttachmentConfigurationConstraintsOut",
        "NetworkEndpointGroupsDetachEndpointsRequestIn": "_compute_342_NetworkEndpointGroupsDetachEndpointsRequestIn",
        "NetworkEndpointGroupsDetachEndpointsRequestOut": "_compute_343_NetworkEndpointGroupsDetachEndpointsRequestOut",
        "InterconnectLocationRegionInfoIn": "_compute_344_InterconnectLocationRegionInfoIn",
        "InterconnectLocationRegionInfoOut": "_compute_345_InterconnectLocationRegionInfoOut",
        "FirewallPolicyRuleSecureTagIn": "_compute_346_FirewallPolicyRuleSecureTagIn",
        "FirewallPolicyRuleSecureTagOut": "_compute_347_FirewallPolicyRuleSecureTagOut",
        "VpnTunnelsScopedListIn": "_compute_348_VpnTunnelsScopedListIn",
        "VpnTunnelsScopedListOut": "_compute_349_VpnTunnelsScopedListOut",
        "PublicDelegatedPrefixPublicDelegatedSubPrefixIn": "_compute_350_PublicDelegatedPrefixPublicDelegatedSubPrefixIn",
        "PublicDelegatedPrefixPublicDelegatedSubPrefixOut": "_compute_351_PublicDelegatedPrefixPublicDelegatedSubPrefixOut",
        "LicenseResourceCommitmentIn": "_compute_352_LicenseResourceCommitmentIn",
        "LicenseResourceCommitmentOut": "_compute_353_LicenseResourceCommitmentOut",
        "InterconnectAttachmentsScopedListIn": "_compute_354_InterconnectAttachmentsScopedListIn",
        "InterconnectAttachmentsScopedListOut": "_compute_355_InterconnectAttachmentsScopedListOut",
        "VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsIn": "_compute_356_VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsIn",
        "VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsOut": "_compute_357_VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsOut",
        "TargetTcpProxiesScopedListIn": "_compute_358_TargetTcpProxiesScopedListIn",
        "TargetTcpProxiesScopedListOut": "_compute_359_TargetTcpProxiesScopedListOut",
        "TargetHttpProxiesScopedListIn": "_compute_360_TargetHttpProxiesScopedListIn",
        "TargetHttpProxiesScopedListOut": "_compute_361_TargetHttpProxiesScopedListOut",
        "SecurityPolicyRecaptchaOptionsConfigIn": "_compute_362_SecurityPolicyRecaptchaOptionsConfigIn",
        "SecurityPolicyRecaptchaOptionsConfigOut": "_compute_363_SecurityPolicyRecaptchaOptionsConfigOut",
        "AutoscalingPolicyLoadBalancingUtilizationIn": "_compute_364_AutoscalingPolicyLoadBalancingUtilizationIn",
        "AutoscalingPolicyLoadBalancingUtilizationOut": "_compute_365_AutoscalingPolicyLoadBalancingUtilizationOut",
        "BackendServiceLocalityLoadBalancingPolicyConfigPolicyIn": "_compute_366_BackendServiceLocalityLoadBalancingPolicyConfigPolicyIn",
        "BackendServiceLocalityLoadBalancingPolicyConfigPolicyOut": "_compute_367_BackendServiceLocalityLoadBalancingPolicyConfigPolicyOut",
        "RegionAutoscalerListIn": "_compute_368_RegionAutoscalerListIn",
        "RegionAutoscalerListOut": "_compute_369_RegionAutoscalerListOut",
        "SecurityPoliciesScopedListIn": "_compute_370_SecurityPoliciesScopedListIn",
        "SecurityPoliciesScopedListOut": "_compute_371_SecurityPoliciesScopedListOut",
        "NodeGroupsScopedListIn": "_compute_372_NodeGroupsScopedListIn",
        "NodeGroupsScopedListOut": "_compute_373_NodeGroupsScopedListOut",
        "InstanceConsumptionDataIn": "_compute_374_InstanceConsumptionDataIn",
        "InstanceConsumptionDataOut": "_compute_375_InstanceConsumptionDataOut",
        "RegionTargetHttpsProxiesSetSslCertificatesRequestIn": "_compute_376_RegionTargetHttpsProxiesSetSslCertificatesRequestIn",
        "RegionTargetHttpsProxiesSetSslCertificatesRequestOut": "_compute_377_RegionTargetHttpsProxiesSetSslCertificatesRequestOut",
        "NotificationEndpointListIn": "_compute_378_NotificationEndpointListIn",
        "NotificationEndpointListOut": "_compute_379_NotificationEndpointListOut",
        "ServiceAttachmentListIn": "_compute_380_ServiceAttachmentListIn",
        "ServiceAttachmentListOut": "_compute_381_ServiceAttachmentListOut",
        "TagsIn": "_compute_382_TagsIn",
        "TagsOut": "_compute_383_TagsOut",
        "HealthCheckServiceIn": "_compute_384_HealthCheckServiceIn",
        "HealthCheckServiceOut": "_compute_385_HealthCheckServiceOut",
        "PolicyIn": "_compute_386_PolicyIn",
        "PolicyOut": "_compute_387_PolicyOut",
        "AllocationResourceStatusSpecificSKUAllocationIn": "_compute_388_AllocationResourceStatusSpecificSKUAllocationIn",
        "AllocationResourceStatusSpecificSKUAllocationOut": "_compute_389_AllocationResourceStatusSpecificSKUAllocationOut",
        "MachineTypeListIn": "_compute_390_MachineTypeListIn",
        "MachineTypeListOut": "_compute_391_MachineTypeListOut",
        "ExchangedPeeringRouteIn": "_compute_392_ExchangedPeeringRouteIn",
        "ExchangedPeeringRouteOut": "_compute_393_ExchangedPeeringRouteOut",
        "InstanceGroupManagersDeletePerInstanceConfigsReqIn": "_compute_394_InstanceGroupManagersDeletePerInstanceConfigsReqIn",
        "InstanceGroupManagersDeletePerInstanceConfigsReqOut": "_compute_395_InstanceGroupManagersDeletePerInstanceConfigsReqOut",
        "ZoneSetLabelsRequestIn": "_compute_396_ZoneSetLabelsRequestIn",
        "ZoneSetLabelsRequestOut": "_compute_397_ZoneSetLabelsRequestOut",
        "HelpLinkIn": "_compute_398_HelpLinkIn",
        "HelpLinkOut": "_compute_399_HelpLinkOut",
        "InstanceGroupManagerActionsSummaryIn": "_compute_400_InstanceGroupManagerActionsSummaryIn",
        "InstanceGroupManagerActionsSummaryOut": "_compute_401_InstanceGroupManagerActionsSummaryOut",
        "SslCertificateListIn": "_compute_402_SslCertificateListIn",
        "SslCertificateListOut": "_compute_403_SslCertificateListOut",
        "TCPHealthCheckIn": "_compute_404_TCPHealthCheckIn",
        "TCPHealthCheckOut": "_compute_405_TCPHealthCheckOut",
        "NetworkEndpointGroupCloudRunIn": "_compute_406_NetworkEndpointGroupCloudRunIn",
        "NetworkEndpointGroupCloudRunOut": "_compute_407_NetworkEndpointGroupCloudRunOut",
        "DiskAggregatedListIn": "_compute_408_DiskAggregatedListIn",
        "DiskAggregatedListOut": "_compute_409_DiskAggregatedListOut",
        "MachineImageIn": "_compute_410_MachineImageIn",
        "MachineImageOut": "_compute_411_MachineImageOut",
        "RouterNatLogConfigIn": "_compute_412_RouterNatLogConfigIn",
        "RouterNatLogConfigOut": "_compute_413_RouterNatLogConfigOut",
        "InstanceGroupsListInstancesIn": "_compute_414_InstanceGroupsListInstancesIn",
        "InstanceGroupsListInstancesOut": "_compute_415_InstanceGroupsListInstancesOut",
        "InstancesSetLabelsRequestIn": "_compute_416_InstancesSetLabelsRequestIn",
        "InstancesSetLabelsRequestOut": "_compute_417_InstancesSetLabelsRequestOut",
        "AcceleratorTypeListIn": "_compute_418_AcceleratorTypeListIn",
        "AcceleratorTypeListOut": "_compute_419_AcceleratorTypeListOut",
        "AllocationResourceStatusIn": "_compute_420_AllocationResourceStatusIn",
        "AllocationResourceStatusOut": "_compute_421_AllocationResourceStatusOut",
        "InstanceGroupManagerVersionIn": "_compute_422_InstanceGroupManagerVersionIn",
        "InstanceGroupManagerVersionOut": "_compute_423_InstanceGroupManagerVersionOut",
        "NetworkEndpointGroupPscDataIn": "_compute_424_NetworkEndpointGroupPscDataIn",
        "NetworkEndpointGroupPscDataOut": "_compute_425_NetworkEndpointGroupPscDataOut",
        "RouterListIn": "_compute_426_RouterListIn",
        "RouterListOut": "_compute_427_RouterListOut",
        "UrlMapsValidateResponseIn": "_compute_428_UrlMapsValidateResponseIn",
        "UrlMapsValidateResponseOut": "_compute_429_UrlMapsValidateResponseOut",
        "DiskMoveRequestIn": "_compute_430_DiskMoveRequestIn",
        "DiskMoveRequestOut": "_compute_431_DiskMoveRequestOut",
        "VpnGatewayListIn": "_compute_432_VpnGatewayListIn",
        "VpnGatewayListOut": "_compute_433_VpnGatewayListOut",
        "NetworkAttachmentAggregatedListIn": "_compute_434_NetworkAttachmentAggregatedListIn",
        "NetworkAttachmentAggregatedListOut": "_compute_435_NetworkAttachmentAggregatedListOut",
        "InstanceGroupManagerAggregatedListIn": "_compute_436_InstanceGroupManagerAggregatedListIn",
        "InstanceGroupManagerAggregatedListOut": "_compute_437_InstanceGroupManagerAggregatedListOut",
        "NodeTemplateAggregatedListIn": "_compute_438_NodeTemplateAggregatedListIn",
        "NodeTemplateAggregatedListOut": "_compute_439_NodeTemplateAggregatedListOut",
        "MachineTypeIn": "_compute_440_MachineTypeIn",
        "MachineTypeOut": "_compute_441_MachineTypeOut",
        "SourceDiskEncryptionKeyIn": "_compute_442_SourceDiskEncryptionKeyIn",
        "SourceDiskEncryptionKeyOut": "_compute_443_SourceDiskEncryptionKeyOut",
        "AddressAggregatedListIn": "_compute_444_AddressAggregatedListIn",
        "AddressAggregatedListOut": "_compute_445_AddressAggregatedListOut",
        "RouterStatusResponseIn": "_compute_446_RouterStatusResponseIn",
        "RouterStatusResponseOut": "_compute_447_RouterStatusResponseOut",
        "SecurityPolicyRuleIn": "_compute_448_SecurityPolicyRuleIn",
        "SecurityPolicyRuleOut": "_compute_449_SecurityPolicyRuleOut",
        "InstanceParamsIn": "_compute_450_InstanceParamsIn",
        "InstanceParamsOut": "_compute_451_InstanceParamsOut",
        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskIn": "_compute_452_AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskIn",
        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOut": "_compute_453_AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOut",
        "ExchangedPeeringRoutesListIn": "_compute_454_ExchangedPeeringRoutesListIn",
        "ExchangedPeeringRoutesListOut": "_compute_455_ExchangedPeeringRoutesListOut",
        "ProjectsSetDefaultNetworkTierRequestIn": "_compute_456_ProjectsSetDefaultNetworkTierRequestIn",
        "ProjectsSetDefaultNetworkTierRequestOut": "_compute_457_ProjectsSetDefaultNetworkTierRequestOut",
        "PacketMirroringAggregatedListIn": "_compute_458_PacketMirroringAggregatedListIn",
        "PacketMirroringAggregatedListOut": "_compute_459_PacketMirroringAggregatedListOut",
        "HttpRouteRuleIn": "_compute_460_HttpRouteRuleIn",
        "HttpRouteRuleOut": "_compute_461_HttpRouteRuleOut",
        "InterconnectLocationListIn": "_compute_462_InterconnectLocationListIn",
        "InterconnectLocationListOut": "_compute_463_InterconnectLocationListOut",
        "PacketIntervalsIn": "_compute_464_PacketIntervalsIn",
        "PacketIntervalsOut": "_compute_465_PacketIntervalsOut",
        "InstanceManagedByIgmErrorManagedInstanceErrorIn": "_compute_466_InstanceManagedByIgmErrorManagedInstanceErrorIn",
        "InstanceManagedByIgmErrorManagedInstanceErrorOut": "_compute_467_InstanceManagedByIgmErrorManagedInstanceErrorOut",
        "AutoscalingPolicyScaleInControlIn": "_compute_468_AutoscalingPolicyScaleInControlIn",
        "AutoscalingPolicyScaleInControlOut": "_compute_469_AutoscalingPolicyScaleInControlOut",
        "InstanceTemplateIn": "_compute_470_InstanceTemplateIn",
        "InstanceTemplateOut": "_compute_471_InstanceTemplateOut",
        "InstancesSetMachineResourcesRequestIn": "_compute_472_InstancesSetMachineResourcesRequestIn",
        "InstancesSetMachineResourcesRequestOut": "_compute_473_InstancesSetMachineResourcesRequestOut",
        "InstanceGroupManagersUpdatePerInstanceConfigsReqIn": "_compute_474_InstanceGroupManagersUpdatePerInstanceConfigsReqIn",
        "InstanceGroupManagersUpdatePerInstanceConfigsReqOut": "_compute_475_InstanceGroupManagersUpdatePerInstanceConfigsReqOut",
        "ExternalVpnGatewayListIn": "_compute_476_ExternalVpnGatewayListIn",
        "ExternalVpnGatewayListOut": "_compute_477_ExternalVpnGatewayListOut",
        "LocationPolicyLocationConstraintsIn": "_compute_478_LocationPolicyLocationConstraintsIn",
        "LocationPolicyLocationConstraintsOut": "_compute_479_LocationPolicyLocationConstraintsOut",
        "RegionUrlMapsValidateRequestIn": "_compute_480_RegionUrlMapsValidateRequestIn",
        "RegionUrlMapsValidateRequestOut": "_compute_481_RegionUrlMapsValidateRequestOut",
        "PathRuleIn": "_compute_482_PathRuleIn",
        "PathRuleOut": "_compute_483_PathRuleOut",
        "TargetSslProxiesSetBackendServiceRequestIn": "_compute_484_TargetSslProxiesSetBackendServiceRequestIn",
        "TargetSslProxiesSetBackendServiceRequestOut": "_compute_485_TargetSslProxiesSetBackendServiceRequestOut",
        "NodeGroupListIn": "_compute_486_NodeGroupListIn",
        "NodeGroupListOut": "_compute_487_NodeGroupListOut",
        "InterconnectAttachmentAggregatedListIn": "_compute_488_InterconnectAttachmentAggregatedListIn",
        "InterconnectAttachmentAggregatedListOut": "_compute_489_InterconnectAttachmentAggregatedListOut",
        "NodeTypeAggregatedListIn": "_compute_490_NodeTypeAggregatedListIn",
        "NodeTypeAggregatedListOut": "_compute_491_NodeTypeAggregatedListOut",
        "MachineTypeAggregatedListIn": "_compute_492_MachineTypeAggregatedListIn",
        "MachineTypeAggregatedListOut": "_compute_493_MachineTypeAggregatedListOut",
        "SslCertificatesScopedListIn": "_compute_494_SslCertificatesScopedListIn",
        "SslCertificatesScopedListOut": "_compute_495_SslCertificatesScopedListOut",
        "GlobalOrganizationSetPolicyRequestIn": "_compute_496_GlobalOrganizationSetPolicyRequestIn",
        "GlobalOrganizationSetPolicyRequestOut": "_compute_497_GlobalOrganizationSetPolicyRequestOut",
        "RegionInstanceGroupManagersRecreateRequestIn": "_compute_498_RegionInstanceGroupManagersRecreateRequestIn",
        "RegionInstanceGroupManagersRecreateRequestOut": "_compute_499_RegionInstanceGroupManagersRecreateRequestOut",
        "RouterBgpPeerIn": "_compute_500_RouterBgpPeerIn",
        "RouterBgpPeerOut": "_compute_501_RouterBgpPeerOut",
        "RegionInstanceGroupManagerListIn": "_compute_502_RegionInstanceGroupManagerListIn",
        "RegionInstanceGroupManagerListOut": "_compute_503_RegionInstanceGroupManagerListOut",
        "ConsistentHashLoadBalancerSettingsHttpCookieIn": "_compute_504_ConsistentHashLoadBalancerSettingsHttpCookieIn",
        "ConsistentHashLoadBalancerSettingsHttpCookieOut": "_compute_505_ConsistentHashLoadBalancerSettingsHttpCookieOut",
        "ForwardingRuleReferenceIn": "_compute_506_ForwardingRuleReferenceIn",
        "ForwardingRuleReferenceOut": "_compute_507_ForwardingRuleReferenceOut",
        "PacketMirroringsScopedListIn": "_compute_508_PacketMirroringsScopedListIn",
        "PacketMirroringsScopedListOut": "_compute_509_PacketMirroringsScopedListOut",
        "InstancesSetServiceAccountRequestIn": "_compute_510_InstancesSetServiceAccountRequestIn",
        "InstancesSetServiceAccountRequestOut": "_compute_511_InstancesSetServiceAccountRequestOut",
        "InstanceGroupsListInstancesRequestIn": "_compute_512_InstanceGroupsListInstancesRequestIn",
        "InstanceGroupsListInstancesRequestOut": "_compute_513_InstanceGroupsListInstancesRequestOut",
        "NetworkEndpointIn": "_compute_514_NetworkEndpointIn",
        "NetworkEndpointOut": "_compute_515_NetworkEndpointOut",
        "SecuritySettingsIn": "_compute_516_SecuritySettingsIn",
        "SecuritySettingsOut": "_compute_517_SecuritySettingsOut",
        "TargetVpnGatewayAggregatedListIn": "_compute_518_TargetVpnGatewayAggregatedListIn",
        "TargetVpnGatewayAggregatedListOut": "_compute_519_TargetVpnGatewayAggregatedListOut",
        "CommitmentIn": "_compute_520_CommitmentIn",
        "CommitmentOut": "_compute_521_CommitmentOut",
        "DisksResizeRequestIn": "_compute_522_DisksResizeRequestIn",
        "DisksResizeRequestOut": "_compute_523_DisksResizeRequestOut",
        "PublicDelegatedPrefixIn": "_compute_524_PublicDelegatedPrefixIn",
        "PublicDelegatedPrefixOut": "_compute_525_PublicDelegatedPrefixOut",
        "BindingIn": "_compute_526_BindingIn",
        "BindingOut": "_compute_527_BindingOut",
        "InstanceGroupManagerIn": "_compute_528_InstanceGroupManagerIn",
        "InstanceGroupManagerOut": "_compute_529_InstanceGroupManagerOut",
        "InterconnectDiagnosticsARPEntryIn": "_compute_530_InterconnectDiagnosticsARPEntryIn",
        "InterconnectDiagnosticsARPEntryOut": "_compute_531_InterconnectDiagnosticsARPEntryOut",
        "PacketMirroringMirroredResourceInfoInstanceInfoIn": "_compute_532_PacketMirroringMirroredResourceInfoInstanceInfoIn",
        "PacketMirroringMirroredResourceInfoInstanceInfoOut": "_compute_533_PacketMirroringMirroredResourceInfoInstanceInfoOut",
        "BackendServiceCdnPolicyNegativeCachingPolicyIn": "_compute_534_BackendServiceCdnPolicyNegativeCachingPolicyIn",
        "BackendServiceCdnPolicyNegativeCachingPolicyOut": "_compute_535_BackendServiceCdnPolicyNegativeCachingPolicyOut",
        "VpnTunnelAggregatedListIn": "_compute_536_VpnTunnelAggregatedListIn",
        "VpnTunnelAggregatedListOut": "_compute_537_VpnTunnelAggregatedListOut",
        "NetworksRemovePeeringRequestIn": "_compute_538_NetworksRemovePeeringRequestIn",
        "NetworksRemovePeeringRequestOut": "_compute_539_NetworksRemovePeeringRequestOut",
        "ProjectIn": "_compute_540_ProjectIn",
        "ProjectOut": "_compute_541_ProjectOut",
        "ImageFamilyViewIn": "_compute_542_ImageFamilyViewIn",
        "ImageFamilyViewOut": "_compute_543_ImageFamilyViewOut",
        "ShieldedInstanceIdentityIn": "_compute_544_ShieldedInstanceIdentityIn",
        "ShieldedInstanceIdentityOut": "_compute_545_ShieldedInstanceIdentityOut",
        "ExternalVpnGatewayInterfaceIn": "_compute_546_ExternalVpnGatewayInterfaceIn",
        "ExternalVpnGatewayInterfaceOut": "_compute_547_ExternalVpnGatewayInterfaceOut",
        "XpnHostListIn": "_compute_548_XpnHostListIn",
        "XpnHostListOut": "_compute_549_XpnHostListOut",
        "NodeGroupIn": "_compute_550_NodeGroupIn",
        "NodeGroupOut": "_compute_551_NodeGroupOut",
        "ReservationListIn": "_compute_552_ReservationListIn",
        "ReservationListOut": "_compute_553_ReservationListOut",
        "TargetHttpsProxiesSetQuicOverrideRequestIn": "_compute_554_TargetHttpsProxiesSetQuicOverrideRequestIn",
        "TargetHttpsProxiesSetQuicOverrideRequestOut": "_compute_555_TargetHttpsProxiesSetQuicOverrideRequestOut",
        "VpnTunnelIn": "_compute_556_VpnTunnelIn",
        "VpnTunnelOut": "_compute_557_VpnTunnelOut",
        "UrlMapIn": "_compute_558_UrlMapIn",
        "UrlMapOut": "_compute_559_UrlMapOut",
        "ProjectsEnableXpnResourceRequestIn": "_compute_560_ProjectsEnableXpnResourceRequestIn",
        "ProjectsEnableXpnResourceRequestOut": "_compute_561_ProjectsEnableXpnResourceRequestOut",
        "SecurityPoliciesAggregatedListIn": "_compute_562_SecurityPoliciesAggregatedListIn",
        "SecurityPoliciesAggregatedListOut": "_compute_563_SecurityPoliciesAggregatedListOut",
        "InstanceGroupManagersScopedListIn": "_compute_564_InstanceGroupManagersScopedListIn",
        "InstanceGroupManagersScopedListOut": "_compute_565_InstanceGroupManagersScopedListOut",
        "LogConfigIn": "_compute_566_LogConfigIn",
        "LogConfigOut": "_compute_567_LogConfigOut",
        "InstanceGroupAggregatedListIn": "_compute_568_InstanceGroupAggregatedListIn",
        "InstanceGroupAggregatedListOut": "_compute_569_InstanceGroupAggregatedListOut",
        "RoutersScopedListIn": "_compute_570_RoutersScopedListIn",
        "RoutersScopedListOut": "_compute_571_RoutersScopedListOut",
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseIn": "_compute_572_RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseIn",
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseOut": "_compute_573_RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseOut",
        "TargetHttpsProxyListIn": "_compute_574_TargetHttpsProxyListIn",
        "TargetHttpsProxyListOut": "_compute_575_TargetHttpsProxyListOut",
        "InterconnectListIn": "_compute_576_InterconnectListIn",
        "InterconnectListOut": "_compute_577_InterconnectListOut",
        "ManagedInstanceIn": "_compute_578_ManagedInstanceIn",
        "ManagedInstanceOut": "_compute_579_ManagedInstanceOut",
        "AdvancedMachineFeaturesIn": "_compute_580_AdvancedMachineFeaturesIn",
        "AdvancedMachineFeaturesOut": "_compute_581_AdvancedMachineFeaturesOut",
        "BackendServicesScopedListIn": "_compute_582_BackendServicesScopedListIn",
        "BackendServicesScopedListOut": "_compute_583_BackendServicesScopedListOut",
        "HttpRouteRuleMatchIn": "_compute_584_HttpRouteRuleMatchIn",
        "HttpRouteRuleMatchOut": "_compute_585_HttpRouteRuleMatchOut",
        "RegionSetLabelsRequestIn": "_compute_586_RegionSetLabelsRequestIn",
        "RegionSetLabelsRequestOut": "_compute_587_RegionSetLabelsRequestOut",
        "RouterNatRuleActionIn": "_compute_588_RouterNatRuleActionIn",
        "RouterNatRuleActionOut": "_compute_589_RouterNatRuleActionOut",
        "InterconnectRemoteLocationIn": "_compute_590_InterconnectRemoteLocationIn",
        "InterconnectRemoteLocationOut": "_compute_591_InterconnectRemoteLocationOut",
        "SubnetworkIn": "_compute_592_SubnetworkIn",
        "SubnetworkOut": "_compute_593_SubnetworkOut",
        "VpnGatewaysGetStatusResponseIn": "_compute_594_VpnGatewaysGetStatusResponseIn",
        "VpnGatewaysGetStatusResponseOut": "_compute_595_VpnGatewaysGetStatusResponseOut",
        "AddressIn": "_compute_596_AddressIn",
        "AddressOut": "_compute_597_AddressOut",
        "TargetTcpProxiesSetProxyHeaderRequestIn": "_compute_598_TargetTcpProxiesSetProxyHeaderRequestIn",
        "TargetTcpProxiesSetProxyHeaderRequestOut": "_compute_599_TargetTcpProxiesSetProxyHeaderRequestOut",
        "InstanceGroupManagerStatusVersionTargetIn": "_compute_600_InstanceGroupManagerStatusVersionTargetIn",
        "InstanceGroupManagerStatusVersionTargetOut": "_compute_601_InstanceGroupManagerStatusVersionTargetOut",
        "DiskIn": "_compute_602_DiskIn",
        "DiskOut": "_compute_603_DiskOut",
        "TargetSslProxiesSetProxyHeaderRequestIn": "_compute_604_TargetSslProxiesSetProxyHeaderRequestIn",
        "TargetSslProxiesSetProxyHeaderRequestOut": "_compute_605_TargetSslProxiesSetProxyHeaderRequestOut",
        "RegionInstanceGroupManagerUpdateInstanceConfigReqIn": "_compute_606_RegionInstanceGroupManagerUpdateInstanceConfigReqIn",
        "RegionInstanceGroupManagerUpdateInstanceConfigReqOut": "_compute_607_RegionInstanceGroupManagerUpdateInstanceConfigReqOut",
        "RouterIn": "_compute_608_RouterIn",
        "RouterOut": "_compute_609_RouterOut",
        "TargetHttpProxyAggregatedListIn": "_compute_610_TargetHttpProxyAggregatedListIn",
        "TargetHttpProxyAggregatedListOut": "_compute_611_TargetHttpProxyAggregatedListOut",
        "NetworkAttachmentListIn": "_compute_612_NetworkAttachmentListIn",
        "NetworkAttachmentListOut": "_compute_613_NetworkAttachmentListOut",
        "UrlRewriteIn": "_compute_614_UrlRewriteIn",
        "UrlRewriteOut": "_compute_615_UrlRewriteOut",
        "RouteIn": "_compute_616_RouteIn",
        "RouteOut": "_compute_617_RouteOut",
        "PerInstanceConfigIn": "_compute_618_PerInstanceConfigIn",
        "PerInstanceConfigOut": "_compute_619_PerInstanceConfigOut",
        "ServiceAttachmentIn": "_compute_620_ServiceAttachmentIn",
        "ServiceAttachmentOut": "_compute_621_ServiceAttachmentOut",
        "ResourcePolicySnapshotSchedulePolicyScheduleIn": "_compute_622_ResourcePolicySnapshotSchedulePolicyScheduleIn",
        "ResourcePolicySnapshotSchedulePolicyScheduleOut": "_compute_623_ResourcePolicySnapshotSchedulePolicyScheduleOut",
        "TargetSslProxiesSetCertificateMapRequestIn": "_compute_624_TargetSslProxiesSetCertificateMapRequestIn",
        "TargetSslProxiesSetCertificateMapRequestOut": "_compute_625_TargetSslProxiesSetCertificateMapRequestOut",
        "AddressesScopedListIn": "_compute_626_AddressesScopedListIn",
        "AddressesScopedListOut": "_compute_627_AddressesScopedListOut",
        "ResourcePolicySnapshotSchedulePolicySnapshotPropertiesIn": "_compute_628_ResourcePolicySnapshotSchedulePolicySnapshotPropertiesIn",
        "ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOut": "_compute_629_ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOut",
        "SecurityPolicyAdaptiveProtectionConfigIn": "_compute_630_SecurityPolicyAdaptiveProtectionConfigIn",
        "SecurityPolicyAdaptiveProtectionConfigOut": "_compute_631_SecurityPolicyAdaptiveProtectionConfigOut",
        "HttpHealthCheckIn": "_compute_632_HttpHealthCheckIn",
        "HttpHealthCheckOut": "_compute_633_HttpHealthCheckOut",
        "InterconnectOutageNotificationIn": "_compute_634_InterconnectOutageNotificationIn",
        "InterconnectOutageNotificationOut": "_compute_635_InterconnectOutageNotificationOut",
        "InterconnectRemoteLocationPermittedConnectionsIn": "_compute_636_InterconnectRemoteLocationPermittedConnectionsIn",
        "InterconnectRemoteLocationPermittedConnectionsOut": "_compute_637_InterconnectRemoteLocationPermittedConnectionsOut",
        "NotificationEndpointGrpcSettingsIn": "_compute_638_NotificationEndpointGrpcSettingsIn",
        "NotificationEndpointGrpcSettingsOut": "_compute_639_NotificationEndpointGrpcSettingsOut",
        "HttpsHealthCheckListIn": "_compute_640_HttpsHealthCheckListIn",
        "HttpsHealthCheckListOut": "_compute_641_HttpsHealthCheckListOut",
        "SourceInstanceParamsIn": "_compute_642_SourceInstanceParamsIn",
        "SourceInstanceParamsOut": "_compute_643_SourceInstanceParamsOut",
        "SecurityPoliciesListPreconfiguredExpressionSetsResponseIn": "_compute_644_SecurityPoliciesListPreconfiguredExpressionSetsResponseIn",
        "SecurityPoliciesListPreconfiguredExpressionSetsResponseOut": "_compute_645_SecurityPoliciesListPreconfiguredExpressionSetsResponseOut",
        "AutoscalerStatusDetailsIn": "_compute_646_AutoscalerStatusDetailsIn",
        "AutoscalerStatusDetailsOut": "_compute_647_AutoscalerStatusDetailsOut",
        "ManagedInstanceVersionIn": "_compute_648_ManagedInstanceVersionIn",
        "ManagedInstanceVersionOut": "_compute_649_ManagedInstanceVersionOut",
        "SslPoliciesAggregatedListIn": "_compute_650_SslPoliciesAggregatedListIn",
        "SslPoliciesAggregatedListOut": "_compute_651_SslPoliciesAggregatedListOut",
        "InstanceGroupsAddInstancesRequestIn": "_compute_652_InstanceGroupsAddInstancesRequestIn",
        "InstanceGroupsAddInstancesRequestOut": "_compute_653_InstanceGroupsAddInstancesRequestOut",
        "RouterAggregatedListIn": "_compute_654_RouterAggregatedListIn",
        "RouterAggregatedListOut": "_compute_655_RouterAggregatedListOut",
        "InstanceGroupManagerListIn": "_compute_656_InstanceGroupManagerListIn",
        "InstanceGroupManagerListOut": "_compute_657_InstanceGroupManagerListOut",
        "NodeGroupsAddNodesRequestIn": "_compute_658_NodeGroupsAddNodesRequestIn",
        "NodeGroupsAddNodesRequestOut": "_compute_659_NodeGroupsAddNodesRequestOut",
        "AuditLogConfigIn": "_compute_660_AuditLogConfigIn",
        "AuditLogConfigOut": "_compute_661_AuditLogConfigOut",
        "ConditionIn": "_compute_662_ConditionIn",
        "ConditionOut": "_compute_663_ConditionOut",
        "AcceleratorConfigIn": "_compute_664_AcceleratorConfigIn",
        "AcceleratorConfigOut": "_compute_665_AcceleratorConfigOut",
        "InstanceGroupManagerStatusStatefulPerInstanceConfigsIn": "_compute_666_InstanceGroupManagerStatusStatefulPerInstanceConfigsIn",
        "InstanceGroupManagerStatusStatefulPerInstanceConfigsOut": "_compute_667_InstanceGroupManagerStatusStatefulPerInstanceConfigsOut",
        "ZoneIn": "_compute_668_ZoneIn",
        "ZoneOut": "_compute_669_ZoneOut",
        "ReservationIn": "_compute_670_ReservationIn",
        "ReservationOut": "_compute_671_ReservationOut",
        "BackendServiceGroupHealthIn": "_compute_672_BackendServiceGroupHealthIn",
        "BackendServiceGroupHealthOut": "_compute_673_BackendServiceGroupHealthOut",
        "FixedOrPercentIn": "_compute_674_FixedOrPercentIn",
        "FixedOrPercentOut": "_compute_675_FixedOrPercentOut",
        "PacketMirroringFilterIn": "_compute_676_PacketMirroringFilterIn",
        "PacketMirroringFilterOut": "_compute_677_PacketMirroringFilterOut",
        "LogConfigDataAccessOptionsIn": "_compute_678_LogConfigDataAccessOptionsIn",
        "LogConfigDataAccessOptionsOut": "_compute_679_LogConfigDataAccessOptionsOut",
        "InstanceGroupManagerStatusStatefulIn": "_compute_680_InstanceGroupManagerStatusStatefulIn",
        "InstanceGroupManagerStatusStatefulOut": "_compute_681_InstanceGroupManagerStatusStatefulOut",
        "InterconnectRemoteLocationConstraintsIn": "_compute_682_InterconnectRemoteLocationConstraintsIn",
        "InterconnectRemoteLocationConstraintsOut": "_compute_683_InterconnectRemoteLocationConstraintsOut",
        "NodeGroupsSetNodeTemplateRequestIn": "_compute_684_NodeGroupsSetNodeTemplateRequestIn",
        "NodeGroupsSetNodeTemplateRequestOut": "_compute_685_NodeGroupsSetNodeTemplateRequestOut",
        "HttpRedirectActionIn": "_compute_686_HttpRedirectActionIn",
        "HttpRedirectActionOut": "_compute_687_HttpRedirectActionOut",
        "TestFailureIn": "_compute_688_TestFailureIn",
        "TestFailureOut": "_compute_689_TestFailureOut",
        "VpnGatewaysScopedListIn": "_compute_690_VpnGatewaysScopedListIn",
        "VpnGatewaysScopedListOut": "_compute_691_VpnGatewaysScopedListOut",
        "QuotaExceededInfoIn": "_compute_692_QuotaExceededInfoIn",
        "QuotaExceededInfoOut": "_compute_693_QuotaExceededInfoOut",
        "SecurityPolicyReferenceIn": "_compute_694_SecurityPolicyReferenceIn",
        "SecurityPolicyReferenceOut": "_compute_695_SecurityPolicyReferenceOut",
        "RegionInstanceGroupManagersCreateInstancesRequestIn": "_compute_696_RegionInstanceGroupManagersCreateInstancesRequestIn",
        "RegionInstanceGroupManagersCreateInstancesRequestOut": "_compute_697_RegionInstanceGroupManagersCreateInstancesRequestOut",
        "LocalDiskIn": "_compute_698_LocalDiskIn",
        "LocalDiskOut": "_compute_699_LocalDiskOut",
        "NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn": "_compute_700_NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn",
        "NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut": "_compute_701_NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut",
        "ConsistentHashLoadBalancerSettingsIn": "_compute_702_ConsistentHashLoadBalancerSettingsIn",
        "ConsistentHashLoadBalancerSettingsOut": "_compute_703_ConsistentHashLoadBalancerSettingsOut",
        "SecurityPolicyRuleHttpHeaderActionIn": "_compute_704_SecurityPolicyRuleHttpHeaderActionIn",
        "SecurityPolicyRuleHttpHeaderActionOut": "_compute_705_SecurityPolicyRuleHttpHeaderActionOut",
        "LicenseResourceRequirementsIn": "_compute_706_LicenseResourceRequirementsIn",
        "LicenseResourceRequirementsOut": "_compute_707_LicenseResourceRequirementsOut",
        "HealthCheckLogConfigIn": "_compute_708_HealthCheckLogConfigIn",
        "HealthCheckLogConfigOut": "_compute_709_HealthCheckLogConfigOut",
        "WafExpressionSetExpressionIn": "_compute_710_WafExpressionSetExpressionIn",
        "WafExpressionSetExpressionOut": "_compute_711_WafExpressionSetExpressionOut",
        "HealthStatusForNetworkEndpointIn": "_compute_712_HealthStatusForNetworkEndpointIn",
        "HealthStatusForNetworkEndpointOut": "_compute_713_HealthStatusForNetworkEndpointOut",
        "NetworkIn": "_compute_714_NetworkIn",
        "NetworkOut": "_compute_715_NetworkOut",
        "DiskResourceStatusIn": "_compute_716_DiskResourceStatusIn",
        "DiskResourceStatusOut": "_compute_717_DiskResourceStatusOut",
        "RoutersPreviewResponseIn": "_compute_718_RoutersPreviewResponseIn",
        "RoutersPreviewResponseOut": "_compute_719_RoutersPreviewResponseOut",
        "BackendIn": "_compute_720_BackendIn",
        "BackendOut": "_compute_721_BackendOut",
        "InstanceMoveRequestIn": "_compute_722_InstanceMoveRequestIn",
        "InstanceMoveRequestOut": "_compute_723_InstanceMoveRequestOut",
        "ReferenceIn": "_compute_724_ReferenceIn",
        "ReferenceOut": "_compute_725_ReferenceOut",
        "SslCertificateSelfManagedSslCertificateIn": "_compute_726_SslCertificateSelfManagedSslCertificateIn",
        "SslCertificateSelfManagedSslCertificateOut": "_compute_727_SslCertificateSelfManagedSslCertificateOut",
        "ResourcePolicyAggregatedListIn": "_compute_728_ResourcePolicyAggregatedListIn",
        "ResourcePolicyAggregatedListOut": "_compute_729_ResourcePolicyAggregatedListOut",
        "HostRuleIn": "_compute_730_HostRuleIn",
        "HostRuleOut": "_compute_731_HostRuleOut",
        "AttachedDiskInitializeParamsIn": "_compute_732_AttachedDiskInitializeParamsIn",
        "AttachedDiskInitializeParamsOut": "_compute_733_AttachedDiskInitializeParamsOut",
        "HttpQueryParameterMatchIn": "_compute_734_HttpQueryParameterMatchIn",
        "HttpQueryParameterMatchOut": "_compute_735_HttpQueryParameterMatchOut",
        "NetworkRoutingConfigIn": "_compute_736_NetworkRoutingConfigIn",
        "NetworkRoutingConfigOut": "_compute_737_NetworkRoutingConfigOut",
        "GlobalSetLabelsRequestIn": "_compute_738_GlobalSetLabelsRequestIn",
        "GlobalSetLabelsRequestOut": "_compute_739_GlobalSetLabelsRequestOut",
        "NetworksUpdatePeeringRequestIn": "_compute_740_NetworksUpdatePeeringRequestIn",
        "NetworksUpdatePeeringRequestOut": "_compute_741_NetworksUpdatePeeringRequestOut",
        "AddressListIn": "_compute_742_AddressListIn",
        "AddressListOut": "_compute_743_AddressListOut",
        "SubnetworkAggregatedListIn": "_compute_744_SubnetworkAggregatedListIn",
        "SubnetworkAggregatedListOut": "_compute_745_SubnetworkAggregatedListOut",
        "FirewallPolicyAssociationIn": "_compute_746_FirewallPolicyAssociationIn",
        "FirewallPolicyAssociationOut": "_compute_747_FirewallPolicyAssociationOut",
        "TargetInstancesScopedListIn": "_compute_748_TargetInstancesScopedListIn",
        "TargetInstancesScopedListOut": "_compute_749_TargetInstancesScopedListOut",
        "TargetTcpProxiesSetBackendServiceRequestIn": "_compute_750_TargetTcpProxiesSetBackendServiceRequestIn",
        "TargetTcpProxiesSetBackendServiceRequestOut": "_compute_751_TargetTcpProxiesSetBackendServiceRequestOut",
        "AutoscalingPolicyCpuUtilizationIn": "_compute_752_AutoscalingPolicyCpuUtilizationIn",
        "AutoscalingPolicyCpuUtilizationOut": "_compute_753_AutoscalingPolicyCpuUtilizationOut",
        "LicensesListResponseIn": "_compute_754_LicensesListResponseIn",
        "LicensesListResponseOut": "_compute_755_LicensesListResponseOut",
        "BfdStatusPacketCountsIn": "_compute_756_BfdStatusPacketCountsIn",
        "BfdStatusPacketCountsOut": "_compute_757_BfdStatusPacketCountsOut",
        "PublicDelegatedPrefixListIn": "_compute_758_PublicDelegatedPrefixListIn",
        "PublicDelegatedPrefixListOut": "_compute_759_PublicDelegatedPrefixListOut",
        "RegionInstanceGroupManagersSetTargetPoolsRequestIn": "_compute_760_RegionInstanceGroupManagersSetTargetPoolsRequestIn",
        "RegionInstanceGroupManagersSetTargetPoolsRequestOut": "_compute_761_RegionInstanceGroupManagersSetTargetPoolsRequestOut",
        "RouteAsPathIn": "_compute_762_RouteAsPathIn",
        "RouteAsPathOut": "_compute_763_RouteAsPathOut",
        "SslPolicyReferenceIn": "_compute_764_SslPolicyReferenceIn",
        "SslPolicyReferenceOut": "_compute_765_SslPolicyReferenceOut",
        "NetworkEndpointGroupsListEndpointsRequestIn": "_compute_766_NetworkEndpointGroupsListEndpointsRequestIn",
        "NetworkEndpointGroupsListEndpointsRequestOut": "_compute_767_NetworkEndpointGroupsListEndpointsRequestOut",
        "AllocationSpecificSKUAllocationReservedInstancePropertiesIn": "_compute_768_AllocationSpecificSKUAllocationReservedInstancePropertiesIn",
        "AllocationSpecificSKUAllocationReservedInstancePropertiesOut": "_compute_769_AllocationSpecificSKUAllocationReservedInstancePropertiesOut",
        "InterconnectDiagnosticsLinkLACPStatusIn": "_compute_770_InterconnectDiagnosticsLinkLACPStatusIn",
        "InterconnectDiagnosticsLinkLACPStatusOut": "_compute_771_InterconnectDiagnosticsLinkLACPStatusOut",
        "DiskAsyncReplicationListIn": "_compute_772_DiskAsyncReplicationListIn",
        "DiskAsyncReplicationListOut": "_compute_773_DiskAsyncReplicationListOut",
        "GlobalSetPolicyRequestIn": "_compute_774_GlobalSetPolicyRequestIn",
        "GlobalSetPolicyRequestOut": "_compute_775_GlobalSetPolicyRequestOut",
        "AcceleratorTypeAggregatedListIn": "_compute_776_AcceleratorTypeAggregatedListIn",
        "AcceleratorTypeAggregatedListOut": "_compute_777_AcceleratorTypeAggregatedListOut",
        "InstancesScopedListIn": "_compute_778_InstancesScopedListIn",
        "InstancesScopedListOut": "_compute_779_InstancesScopedListOut",
        "FirewallPolicyListIn": "_compute_780_FirewallPolicyListIn",
        "FirewallPolicyListOut": "_compute_781_FirewallPolicyListOut",
        "GRPCHealthCheckIn": "_compute_782_GRPCHealthCheckIn",
        "GRPCHealthCheckOut": "_compute_783_GRPCHealthCheckOut",
        "RequestMirrorPolicyIn": "_compute_784_RequestMirrorPolicyIn",
        "RequestMirrorPolicyOut": "_compute_785_RequestMirrorPolicyOut",
        "SSLHealthCheckIn": "_compute_786_SSLHealthCheckIn",
        "SSLHealthCheckOut": "_compute_787_SSLHealthCheckOut",
        "HttpFaultAbortIn": "_compute_788_HttpFaultAbortIn",
        "HttpFaultAbortOut": "_compute_789_HttpFaultAbortOut",
        "NodeTypeIn": "_compute_790_NodeTypeIn",
        "NodeTypeOut": "_compute_791_NodeTypeOut",
        "TargetReferenceIn": "_compute_792_TargetReferenceIn",
        "TargetReferenceOut": "_compute_793_TargetReferenceOut",
        "InstanceListIn": "_compute_794_InstanceListIn",
        "InstanceListOut": "_compute_795_InstanceListOut",
        "RegionInstanceGroupsSetNamedPortsRequestIn": "_compute_796_RegionInstanceGroupsSetNamedPortsRequestIn",
        "RegionInstanceGroupsSetNamedPortsRequestOut": "_compute_797_RegionInstanceGroupsSetNamedPortsRequestOut",
        "RouterStatusNatStatusNatRuleStatusIn": "_compute_798_RouterStatusNatStatusNatRuleStatusIn",
        "RouterStatusNatStatusNatRuleStatusOut": "_compute_799_RouterStatusNatStatusNatRuleStatusOut",
        "ResourceCommitmentIn": "_compute_800_ResourceCommitmentIn",
        "ResourceCommitmentOut": "_compute_801_ResourceCommitmentOut",
        "AutoscalingPolicyIn": "_compute_802_AutoscalingPolicyIn",
        "AutoscalingPolicyOut": "_compute_803_AutoscalingPolicyOut",
        "XpnResourceIdIn": "_compute_804_XpnResourceIdIn",
        "XpnResourceIdOut": "_compute_805_XpnResourceIdOut",
        "SslPolicyIn": "_compute_806_SslPolicyIn",
        "SslPolicyOut": "_compute_807_SslPolicyOut",
        "RouterStatusIn": "_compute_808_RouterStatusIn",
        "RouterStatusOut": "_compute_809_RouterStatusOut",
        "NetworkEndpointGroupsListNetworkEndpointsIn": "_compute_810_NetworkEndpointGroupsListNetworkEndpointsIn",
        "NetworkEndpointGroupsListNetworkEndpointsOut": "_compute_811_NetworkEndpointGroupsListNetworkEndpointsOut",
        "InstanceIn": "_compute_812_InstanceIn",
        "InstanceOut": "_compute_813_InstanceOut",
        "NetworkEndpointGroupCloudFunctionIn": "_compute_814_NetworkEndpointGroupCloudFunctionIn",
        "NetworkEndpointGroupCloudFunctionOut": "_compute_815_NetworkEndpointGroupCloudFunctionOut",
        "InstanceGroupManagersDeleteInstancesRequestIn": "_compute_816_InstanceGroupManagersDeleteInstancesRequestIn",
        "InstanceGroupManagersDeleteInstancesRequestOut": "_compute_817_InstanceGroupManagersDeleteInstancesRequestOut",
        "VpnGatewayIn": "_compute_818_VpnGatewayIn",
        "VpnGatewayOut": "_compute_819_VpnGatewayOut",
        "SchedulingIn": "_compute_820_SchedulingIn",
        "SchedulingOut": "_compute_821_SchedulingOut",
        "RegionInstanceGroupManagersAbandonInstancesRequestIn": "_compute_822_RegionInstanceGroupManagersAbandonInstancesRequestIn",
        "RegionInstanceGroupManagersAbandonInstancesRequestOut": "_compute_823_RegionInstanceGroupManagersAbandonInstancesRequestOut",
        "HealthCheckIn": "_compute_824_HealthCheckIn",
        "HealthCheckOut": "_compute_825_HealthCheckOut",
        "CustomerEncryptionKeyIn": "_compute_826_CustomerEncryptionKeyIn",
        "CustomerEncryptionKeyOut": "_compute_827_CustomerEncryptionKeyOut",
        "StatefulPolicyPreservedStateDiskDeviceIn": "_compute_828_StatefulPolicyPreservedStateDiskDeviceIn",
        "StatefulPolicyPreservedStateDiskDeviceOut": "_compute_829_StatefulPolicyPreservedStateDiskDeviceOut",
        "InstanceGroupManagersAbandonInstancesRequestIn": "_compute_830_InstanceGroupManagersAbandonInstancesRequestIn",
        "InstanceGroupManagersAbandonInstancesRequestOut": "_compute_831_InstanceGroupManagersAbandonInstancesRequestOut",
        "NodeTemplateNodeTypeFlexibilityIn": "_compute_832_NodeTemplateNodeTypeFlexibilityIn",
        "NodeTemplateNodeTypeFlexibilityOut": "_compute_833_NodeTemplateNodeTypeFlexibilityOut",
        "ServiceAttachmentConnectedEndpointIn": "_compute_834_ServiceAttachmentConnectedEndpointIn",
        "ServiceAttachmentConnectedEndpointOut": "_compute_835_ServiceAttachmentConnectedEndpointOut",
        "UsableSubnetworkIn": "_compute_836_UsableSubnetworkIn",
        "UsableSubnetworkOut": "_compute_837_UsableSubnetworkOut",
        "ForwardingRuleIn": "_compute_838_ForwardingRuleIn",
        "ForwardingRuleOut": "_compute_839_ForwardingRuleOut",
        "InstanceGroupIn": "_compute_840_InstanceGroupIn",
        "InstanceGroupOut": "_compute_841_InstanceGroupOut",
        "InstancesSetMinCpuPlatformRequestIn": "_compute_842_InstancesSetMinCpuPlatformRequestIn",
        "InstancesSetMinCpuPlatformRequestOut": "_compute_843_InstancesSetMinCpuPlatformRequestOut",
        "SslPoliciesScopedListIn": "_compute_844_SslPoliciesScopedListIn",
        "SslPoliciesScopedListOut": "_compute_845_SslPoliciesScopedListOut",
        "NetworkEndpointGroupAggregatedListIn": "_compute_846_NetworkEndpointGroupAggregatedListIn",
        "NetworkEndpointGroupAggregatedListOut": "_compute_847_NetworkEndpointGroupAggregatedListOut",
        "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigIn": "_compute_848_SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigIn",
        "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOut": "_compute_849_SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOut",
        "HealthCheckReferenceIn": "_compute_850_HealthCheckReferenceIn",
        "HealthCheckReferenceOut": "_compute_851_HealthCheckReferenceOut",
        "InterconnectLocationIn": "_compute_852_InterconnectLocationIn",
        "InterconnectLocationOut": "_compute_853_InterconnectLocationOut",
        "PublicDelegatedPrefixesScopedListIn": "_compute_854_PublicDelegatedPrefixesScopedListIn",
        "PublicDelegatedPrefixesScopedListOut": "_compute_855_PublicDelegatedPrefixesScopedListOut",
        "ResourcePoliciesScopedListIn": "_compute_856_ResourcePoliciesScopedListIn",
        "ResourcePoliciesScopedListOut": "_compute_857_ResourcePoliciesScopedListOut",
        "TargetSslProxyIn": "_compute_858_TargetSslProxyIn",
        "TargetSslProxyOut": "_compute_859_TargetSslProxyOut",
        "ResourcePolicyResourceStatusIn": "_compute_860_ResourcePolicyResourceStatusIn",
        "ResourcePolicyResourceStatusOut": "_compute_861_ResourcePolicyResourceStatusOut",
        "TargetPoolsAddInstanceRequestIn": "_compute_862_TargetPoolsAddInstanceRequestIn",
        "TargetPoolsAddInstanceRequestOut": "_compute_863_TargetPoolsAddInstanceRequestOut",
        "NetworkEndpointGroupIn": "_compute_864_NetworkEndpointGroupIn",
        "NetworkEndpointGroupOut": "_compute_865_NetworkEndpointGroupOut",
        "HttpsHealthCheckIn": "_compute_866_HttpsHealthCheckIn",
        "HttpsHealthCheckOut": "_compute_867_HttpsHealthCheckOut",
        "NodeTemplateListIn": "_compute_868_NodeTemplateListIn",
        "NodeTemplateListOut": "_compute_869_NodeTemplateListOut",
        "RegionInstanceGroupManagerDeleteInstanceConfigReqIn": "_compute_870_RegionInstanceGroupManagerDeleteInstanceConfigReqIn",
        "RegionInstanceGroupManagerDeleteInstanceConfigReqOut": "_compute_871_RegionInstanceGroupManagerDeleteInstanceConfigReqOut",
        "ManagedInstanceInstanceHealthIn": "_compute_872_ManagedInstanceInstanceHealthIn",
        "ManagedInstanceInstanceHealthOut": "_compute_873_ManagedInstanceInstanceHealthOut",
        "InterconnectRemoteLocationConstraintsSubnetLengthRangeIn": "_compute_874_InterconnectRemoteLocationConstraintsSubnetLengthRangeIn",
        "InterconnectRemoteLocationConstraintsSubnetLengthRangeOut": "_compute_875_InterconnectRemoteLocationConstraintsSubnetLengthRangeOut",
        "SecurityPolicyRuleRateLimitOptionsThresholdIn": "_compute_876_SecurityPolicyRuleRateLimitOptionsThresholdIn",
        "SecurityPolicyRuleRateLimitOptionsThresholdOut": "_compute_877_SecurityPolicyRuleRateLimitOptionsThresholdOut",
        "TargetHttpProxyListIn": "_compute_878_TargetHttpProxyListIn",
        "TargetHttpProxyListOut": "_compute_879_TargetHttpProxyListOut",
        "TargetHttpsProxiesScopedListIn": "_compute_880_TargetHttpsProxiesScopedListIn",
        "TargetHttpsProxiesScopedListOut": "_compute_881_TargetHttpsProxiesScopedListOut",
        "LicenseIn": "_compute_882_LicenseIn",
        "LicenseOut": "_compute_883_LicenseOut",
        "HttpFaultInjectionIn": "_compute_884_HttpFaultInjectionIn",
        "HttpFaultInjectionOut": "_compute_885_HttpFaultInjectionOut",
        "TargetSslProxyListIn": "_compute_886_TargetSslProxyListIn",
        "TargetSslProxyListOut": "_compute_887_TargetSslProxyListOut",
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn": "_compute_888_RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn",
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut": "_compute_889_RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut",
        "VpnGatewayVpnGatewayInterfaceIn": "_compute_890_VpnGatewayVpnGatewayInterfaceIn",
        "VpnGatewayVpnGatewayInterfaceOut": "_compute_891_VpnGatewayVpnGatewayInterfaceOut",
        "ForwardingRuleServiceDirectoryRegistrationIn": "_compute_892_ForwardingRuleServiceDirectoryRegistrationIn",
        "ForwardingRuleServiceDirectoryRegistrationOut": "_compute_893_ForwardingRuleServiceDirectoryRegistrationOut",
        "RegionInstanceGroupManagersListInstanceConfigsRespIn": "_compute_894_RegionInstanceGroupManagersListInstanceConfigsRespIn",
        "RegionInstanceGroupManagersListInstanceConfigsRespOut": "_compute_895_RegionInstanceGroupManagersListInstanceConfigsRespOut",
        "SubsettingIn": "_compute_896_SubsettingIn",
        "SubsettingOut": "_compute_897_SubsettingOut",
        "InstancesSetMachineTypeRequestIn": "_compute_898_InstancesSetMachineTypeRequestIn",
        "InstancesSetMachineTypeRequestOut": "_compute_899_InstancesSetMachineTypeRequestOut",
        "CustomerEncryptionKeyProtectedDiskIn": "_compute_900_CustomerEncryptionKeyProtectedDiskIn",
        "CustomerEncryptionKeyProtectedDiskOut": "_compute_901_CustomerEncryptionKeyProtectedDiskOut",
        "TestPermissionsRequestIn": "_compute_902_TestPermissionsRequestIn",
        "TestPermissionsRequestOut": "_compute_903_TestPermissionsRequestOut",
        "RegionInstanceGroupManagersListErrorsResponseIn": "_compute_904_RegionInstanceGroupManagersListErrorsResponseIn",
        "RegionInstanceGroupManagersListErrorsResponseOut": "_compute_905_RegionInstanceGroupManagersListErrorsResponseOut",
        "NetworkEndpointGroupsScopedListIn": "_compute_906_NetworkEndpointGroupsScopedListIn",
        "NetworkEndpointGroupsScopedListOut": "_compute_907_NetworkEndpointGroupsScopedListOut",
        "DiskTypeListIn": "_compute_908_DiskTypeListIn",
        "DiskTypeListOut": "_compute_909_DiskTypeListOut",
        "SavedAttachedDiskIn": "_compute_910_SavedAttachedDiskIn",
        "SavedAttachedDiskOut": "_compute_911_SavedAttachedDiskOut",
        "PreconfiguredWafSetIn": "_compute_912_PreconfiguredWafSetIn",
        "PreconfiguredWafSetOut": "_compute_913_PreconfiguredWafSetOut",
        "NetworkAttachmentsScopedListIn": "_compute_914_NetworkAttachmentsScopedListIn",
        "NetworkAttachmentsScopedListOut": "_compute_915_NetworkAttachmentsScopedListOut",
        "HealthCheckListIn": "_compute_916_HealthCheckListIn",
        "HealthCheckListOut": "_compute_917_HealthCheckListOut",
        "SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigIn": "_compute_918_SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigIn",
        "SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigOut": "_compute_919_SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigOut",
        "ResourcePolicySnapshotSchedulePolicyRetentionPolicyIn": "_compute_920_ResourcePolicySnapshotSchedulePolicyRetentionPolicyIn",
        "ResourcePolicySnapshotSchedulePolicyRetentionPolicyOut": "_compute_921_ResourcePolicySnapshotSchedulePolicyRetentionPolicyOut",
        "InstanceGroupsScopedListIn": "_compute_922_InstanceGroupsScopedListIn",
        "InstanceGroupsScopedListOut": "_compute_923_InstanceGroupsScopedListOut",
        "TargetVpnGatewayListIn": "_compute_924_TargetVpnGatewayListIn",
        "TargetVpnGatewayListOut": "_compute_925_TargetVpnGatewayListOut",
        "InstanceGroupManagersPatchPerInstanceConfigsReqIn": "_compute_926_InstanceGroupManagersPatchPerInstanceConfigsReqIn",
        "InstanceGroupManagersPatchPerInstanceConfigsReqOut": "_compute_927_InstanceGroupManagersPatchPerInstanceConfigsReqOut",
        "ProjectsListXpnHostsRequestIn": "_compute_928_ProjectsListXpnHostsRequestIn",
        "ProjectsListXpnHostsRequestOut": "_compute_929_ProjectsListXpnHostsRequestOut",
        "Int64RangeMatchIn": "_compute_930_Int64RangeMatchIn",
        "Int64RangeMatchOut": "_compute_931_Int64RangeMatchOut",
        "TargetPoolsScopedListIn": "_compute_932_TargetPoolsScopedListIn",
        "TargetPoolsScopedListOut": "_compute_933_TargetPoolsScopedListOut",
        "BackendServiceListIn": "_compute_934_BackendServiceListIn",
        "BackendServiceListOut": "_compute_935_BackendServiceListOut",
        "ScalingScheduleStatusIn": "_compute_936_ScalingScheduleStatusIn",
        "ScalingScheduleStatusOut": "_compute_937_ScalingScheduleStatusOut",
        "TargetTcpProxyAggregatedListIn": "_compute_938_TargetTcpProxyAggregatedListIn",
        "TargetTcpProxyAggregatedListOut": "_compute_939_TargetTcpProxyAggregatedListOut",
        "VmEndpointNatMappingsInterfaceNatMappingsIn": "_compute_940_VmEndpointNatMappingsInterfaceNatMappingsIn",
        "VmEndpointNatMappingsInterfaceNatMappingsOut": "_compute_941_VmEndpointNatMappingsInterfaceNatMappingsOut",
        "ServiceAttachmentAggregatedListIn": "_compute_942_ServiceAttachmentAggregatedListIn",
        "ServiceAttachmentAggregatedListOut": "_compute_943_ServiceAttachmentAggregatedListOut",
        "ResourcePolicyWeeklyCycleDayOfWeekIn": "_compute_944_ResourcePolicyWeeklyCycleDayOfWeekIn",
        "ResourcePolicyWeeklyCycleDayOfWeekOut": "_compute_945_ResourcePolicyWeeklyCycleDayOfWeekOut",
        "InstanceGroupsRemoveInstancesRequestIn": "_compute_946_InstanceGroupsRemoveInstancesRequestIn",
        "InstanceGroupsRemoveInstancesRequestOut": "_compute_947_InstanceGroupsRemoveInstancesRequestOut",
        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn": "_compute_948_SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn",
        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut": "_compute_949_SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut",
        "ResourcePolicyGroupPlacementPolicyIn": "_compute_950_ResourcePolicyGroupPlacementPolicyIn",
        "ResourcePolicyGroupPlacementPolicyOut": "_compute_951_ResourcePolicyGroupPlacementPolicyOut",
        "InstancesStartWithEncryptionKeyRequestIn": "_compute_952_InstancesStartWithEncryptionKeyRequestIn",
        "InstancesStartWithEncryptionKeyRequestOut": "_compute_953_InstancesStartWithEncryptionKeyRequestOut",
        "CommitmentAggregatedListIn": "_compute_954_CommitmentAggregatedListIn",
        "CommitmentAggregatedListOut": "_compute_955_CommitmentAggregatedListOut",
        "RouterNatIn": "_compute_956_RouterNatIn",
        "RouterNatOut": "_compute_957_RouterNatOut",
        "AutoscalerAggregatedListIn": "_compute_958_AutoscalerAggregatedListIn",
        "AutoscalerAggregatedListOut": "_compute_959_AutoscalerAggregatedListOut",
        "SslPoliciesListAvailableFeaturesResponseIn": "_compute_960_SslPoliciesListAvailableFeaturesResponseIn",
        "SslPoliciesListAvailableFeaturesResponseOut": "_compute_961_SslPoliciesListAvailableFeaturesResponseOut",
        "AutoscalerListIn": "_compute_962_AutoscalerListIn",
        "AutoscalerListOut": "_compute_963_AutoscalerListOut",
        "StatefulPolicyPreservedStateIn": "_compute_964_StatefulPolicyPreservedStateIn",
        "StatefulPolicyPreservedStateOut": "_compute_965_StatefulPolicyPreservedStateOut",
        "UrlMapsAggregatedListIn": "_compute_966_UrlMapsAggregatedListIn",
        "UrlMapsAggregatedListOut": "_compute_967_UrlMapsAggregatedListOut",
        "AttachedDiskIn": "_compute_968_AttachedDiskIn",
        "AttachedDiskOut": "_compute_969_AttachedDiskOut",
        "NetworkAttachmentIn": "_compute_970_NetworkAttachmentIn",
        "NetworkAttachmentOut": "_compute_971_NetworkAttachmentOut",
        "InstanceGroupManagersSetInstanceTemplateRequestIn": "_compute_972_InstanceGroupManagersSetInstanceTemplateRequestIn",
        "InstanceGroupManagersSetInstanceTemplateRequestOut": "_compute_973_InstanceGroupManagersSetInstanceTemplateRequestOut",
        "FirewallPolicyRuleMatcherIn": "_compute_974_FirewallPolicyRuleMatcherIn",
        "FirewallPolicyRuleMatcherOut": "_compute_975_FirewallPolicyRuleMatcherOut",
        "DurationIn": "_compute_976_DurationIn",
        "DurationOut": "_compute_977_DurationOut",
        "UrlMapValidationResultIn": "_compute_978_UrlMapValidationResultIn",
        "UrlMapValidationResultOut": "_compute_979_UrlMapValidationResultOut",
        "NodeGroupsDeleteNodesRequestIn": "_compute_980_NodeGroupsDeleteNodesRequestIn",
        "NodeGroupsDeleteNodesRequestOut": "_compute_981_NodeGroupsDeleteNodesRequestOut",
        "DiskAsyncReplicationIn": "_compute_982_DiskAsyncReplicationIn",
        "DiskAsyncReplicationOut": "_compute_983_DiskAsyncReplicationOut",
        "DistributionPolicyZoneConfigurationIn": "_compute_984_DistributionPolicyZoneConfigurationIn",
        "DistributionPolicyZoneConfigurationOut": "_compute_985_DistributionPolicyZoneConfigurationOut",
        "NetworkEdgeSecurityServiceIn": "_compute_986_NetworkEdgeSecurityServiceIn",
        "NetworkEdgeSecurityServiceOut": "_compute_987_NetworkEdgeSecurityServiceOut",
        "UrlMapListIn": "_compute_988_UrlMapListIn",
        "UrlMapListOut": "_compute_989_UrlMapListOut",
        "DiskListIn": "_compute_990_DiskListIn",
        "DiskListOut": "_compute_991_DiskListOut",
        "RouterNatSubnetworkToNatIn": "_compute_992_RouterNatSubnetworkToNatIn",
        "RouterNatSubnetworkToNatOut": "_compute_993_RouterNatSubnetworkToNatOut",
        "TestPermissionsResponseIn": "_compute_994_TestPermissionsResponseIn",
        "TestPermissionsResponseOut": "_compute_995_TestPermissionsResponseOut",
        "HealthChecksAggregatedListIn": "_compute_996_HealthChecksAggregatedListIn",
        "HealthChecksAggregatedListOut": "_compute_997_HealthChecksAggregatedListOut",
        "InterconnectRemoteLocationListIn": "_compute_998_InterconnectRemoteLocationListIn",
        "InterconnectRemoteLocationListOut": "_compute_999_InterconnectRemoteLocationListOut",
        "BackendServiceCdnPolicyBypassCacheOnRequestHeaderIn": "_compute_1000_BackendServiceCdnPolicyBypassCacheOnRequestHeaderIn",
        "BackendServiceCdnPolicyBypassCacheOnRequestHeaderOut": "_compute_1001_BackendServiceCdnPolicyBypassCacheOnRequestHeaderOut",
        "InterconnectDiagnosticsLinkOpticalPowerIn": "_compute_1002_InterconnectDiagnosticsLinkOpticalPowerIn",
        "InterconnectDiagnosticsLinkOpticalPowerOut": "_compute_1003_InterconnectDiagnosticsLinkOpticalPowerOut",
        "InstancesAddResourcePoliciesRequestIn": "_compute_1004_InstancesAddResourcePoliciesRequestIn",
        "InstancesAddResourcePoliciesRequestOut": "_compute_1005_InstancesAddResourcePoliciesRequestOut",
        "RegionIn": "_compute_1006_RegionIn",
        "RegionOut": "_compute_1007_RegionOut",
        "TargetTcpProxyIn": "_compute_1008_TargetTcpProxyIn",
        "TargetTcpProxyOut": "_compute_1009_TargetTcpProxyOut",
        "BackendServiceConnectionTrackingPolicyIn": "_compute_1010_BackendServiceConnectionTrackingPolicyIn",
        "BackendServiceConnectionTrackingPolicyOut": "_compute_1011_BackendServiceConnectionTrackingPolicyOut",
        "ServiceAccountIn": "_compute_1012_ServiceAccountIn",
        "ServiceAccountOut": "_compute_1013_ServiceAccountOut",
        "BfdStatusIn": "_compute_1014_BfdStatusIn",
        "BfdStatusOut": "_compute_1015_BfdStatusOut",
        "DisksScopedListIn": "_compute_1016_DisksScopedListIn",
        "DisksScopedListOut": "_compute_1017_DisksScopedListOut",
        "UsableSubnetworkSecondaryRangeIn": "_compute_1018_UsableSubnetworkSecondaryRangeIn",
        "UsableSubnetworkSecondaryRangeOut": "_compute_1019_UsableSubnetworkSecondaryRangeOut",
        "RegionInstanceGroupsListInstancesIn": "_compute_1020_RegionInstanceGroupsListInstancesIn",
        "RegionInstanceGroupsListInstancesOut": "_compute_1021_RegionInstanceGroupsListInstancesOut",
        "BfdPacketIn": "_compute_1022_BfdPacketIn",
        "BfdPacketOut": "_compute_1023_BfdPacketOut",
        "ExprIn": "_compute_1024_ExprIn",
        "ExprOut": "_compute_1025_ExprOut",
        "DiskTypeIn": "_compute_1026_DiskTypeIn",
        "DiskTypeOut": "_compute_1027_DiskTypeOut",
        "SecurityPolicyAdvancedOptionsConfigIn": "_compute_1028_SecurityPolicyAdvancedOptionsConfigIn",
        "SecurityPolicyAdvancedOptionsConfigOut": "_compute_1029_SecurityPolicyAdvancedOptionsConfigOut",
        "ShareSettingsProjectConfigIn": "_compute_1030_ShareSettingsProjectConfigIn",
        "ShareSettingsProjectConfigOut": "_compute_1031_ShareSettingsProjectConfigOut",
        "AcceleratorTypesScopedListIn": "_compute_1032_AcceleratorTypesScopedListIn",
        "AcceleratorTypesScopedListOut": "_compute_1033_AcceleratorTypesScopedListOut",
        "ReservationsResizeRequestIn": "_compute_1034_ReservationsResizeRequestIn",
        "ReservationsResizeRequestOut": "_compute_1035_ReservationsResizeRequestOut",
        "ResourcePolicyHourlyCycleIn": "_compute_1036_ResourcePolicyHourlyCycleIn",
        "ResourcePolicyHourlyCycleOut": "_compute_1037_ResourcePolicyHourlyCycleOut",
        "ManagedInstanceLastAttemptIn": "_compute_1038_ManagedInstanceLastAttemptIn",
        "ManagedInstanceLastAttemptOut": "_compute_1039_ManagedInstanceLastAttemptOut",
        "ResourcePolicyDailyCycleIn": "_compute_1040_ResourcePolicyDailyCycleIn",
        "ResourcePolicyDailyCycleOut": "_compute_1041_ResourcePolicyDailyCycleOut",
        "ResourcePolicySnapshotSchedulePolicyIn": "_compute_1042_ResourcePolicySnapshotSchedulePolicyIn",
        "ResourcePolicySnapshotSchedulePolicyOut": "_compute_1043_ResourcePolicySnapshotSchedulePolicyOut",
        "NetworkPerformanceConfigIn": "_compute_1044_NetworkPerformanceConfigIn",
        "NetworkPerformanceConfigOut": "_compute_1045_NetworkPerformanceConfigOut",
        "InstancesRemoveResourcePoliciesRequestIn": "_compute_1046_InstancesRemoveResourcePoliciesRequestIn",
        "InstancesRemoveResourcePoliciesRequestOut": "_compute_1047_InstancesRemoveResourcePoliciesRequestOut",
        "NodeGroupAutoscalingPolicyIn": "_compute_1048_NodeGroupAutoscalingPolicyIn",
        "NodeGroupAutoscalingPolicyOut": "_compute_1049_NodeGroupAutoscalingPolicyOut",
        "DisplayDeviceIn": "_compute_1050_DisplayDeviceIn",
        "DisplayDeviceOut": "_compute_1051_DisplayDeviceOut",
        "RuleIn": "_compute_1052_RuleIn",
        "RuleOut": "_compute_1053_RuleOut",
        "NamedPortIn": "_compute_1054_NamedPortIn",
        "NamedPortOut": "_compute_1055_NamedPortOut",
        "BackendServiceCdnPolicyIn": "_compute_1056_BackendServiceCdnPolicyIn",
        "BackendServiceCdnPolicyOut": "_compute_1057_BackendServiceCdnPolicyOut",
        "LogConfigCounterOptionsCustomFieldIn": "_compute_1058_LogConfigCounterOptionsCustomFieldIn",
        "LogConfigCounterOptionsCustomFieldOut": "_compute_1059_LogConfigCounterOptionsCustomFieldOut",
        "RouterAdvertisedIpRangeIn": "_compute_1060_RouterAdvertisedIpRangeIn",
        "RouterAdvertisedIpRangeOut": "_compute_1061_RouterAdvertisedIpRangeOut",
        "ResourcePolicyWeeklyCycleIn": "_compute_1062_ResourcePolicyWeeklyCycleIn",
        "ResourcePolicyWeeklyCycleOut": "_compute_1063_ResourcePolicyWeeklyCycleOut",
        "BackendBucketIn": "_compute_1064_BackendBucketIn",
        "BackendBucketOut": "_compute_1065_BackendBucketOut",
        "AutoscalingPolicyScalingScheduleIn": "_compute_1066_AutoscalingPolicyScalingScheduleIn",
        "AutoscalingPolicyScalingScheduleOut": "_compute_1067_AutoscalingPolicyScalingScheduleOut",
        "VpnGatewayStatusIn": "_compute_1068_VpnGatewayStatusIn",
        "VpnGatewayStatusOut": "_compute_1069_VpnGatewayStatusOut",
        "SecurityPoliciesWafConfigIn": "_compute_1070_SecurityPoliciesWafConfigIn",
        "SecurityPoliciesWafConfigOut": "_compute_1071_SecurityPoliciesWafConfigOut",
        "GlobalNetworkEndpointGroupsDetachEndpointsRequestIn": "_compute_1072_GlobalNetworkEndpointGroupsDetachEndpointsRequestIn",
        "GlobalNetworkEndpointGroupsDetachEndpointsRequestOut": "_compute_1073_GlobalNetworkEndpointGroupsDetachEndpointsRequestOut",
        "DistributionPolicyIn": "_compute_1074_DistributionPolicyIn",
        "DistributionPolicyOut": "_compute_1075_DistributionPolicyOut",
        "HttpFaultDelayIn": "_compute_1076_HttpFaultDelayIn",
        "HttpFaultDelayOut": "_compute_1077_HttpFaultDelayOut",
        "BackendServiceLocalityLoadBalancingPolicyConfigIn": "_compute_1078_BackendServiceLocalityLoadBalancingPolicyConfigIn",
        "BackendServiceLocalityLoadBalancingPolicyConfigOut": "_compute_1079_BackendServiceLocalityLoadBalancingPolicyConfigOut",
        "NodeTypeListIn": "_compute_1080_NodeTypeListIn",
        "NodeTypeListOut": "_compute_1081_NodeTypeListOut",
        "TargetPoolListIn": "_compute_1082_TargetPoolListIn",
        "TargetPoolListOut": "_compute_1083_TargetPoolListOut",
        "TargetInstanceAggregatedListIn": "_compute_1084_TargetInstanceAggregatedListIn",
        "TargetInstanceAggregatedListOut": "_compute_1085_TargetInstanceAggregatedListOut",
        "InterconnectAttachmentPartnerMetadataIn": "_compute_1086_InterconnectAttachmentPartnerMetadataIn",
        "InterconnectAttachmentPartnerMetadataOut": "_compute_1087_InterconnectAttachmentPartnerMetadataOut",
        "TargetHttpsProxiesSetSslCertificatesRequestIn": "_compute_1088_TargetHttpsProxiesSetSslCertificatesRequestIn",
        "TargetHttpsProxiesSetSslCertificatesRequestOut": "_compute_1089_TargetHttpsProxiesSetSslCertificatesRequestOut",
        "HTTPSHealthCheckIn": "_compute_1090_HTTPSHealthCheckIn",
        "HTTPSHealthCheckOut": "_compute_1091_HTTPSHealthCheckOut",
        "AutoscalerIn": "_compute_1092_AutoscalerIn",
        "AutoscalerOut": "_compute_1093_AutoscalerOut",
        "HttpHeaderOptionIn": "_compute_1094_HttpHeaderOptionIn",
        "HttpHeaderOptionOut": "_compute_1095_HttpHeaderOptionOut",
        "DiskTypeAggregatedListIn": "_compute_1096_DiskTypeAggregatedListIn",
        "DiskTypeAggregatedListOut": "_compute_1097_DiskTypeAggregatedListOut",
        "CircuitBreakersIn": "_compute_1098_CircuitBreakersIn",
        "CircuitBreakersOut": "_compute_1099_CircuitBreakersOut",
        "SignedUrlKeyIn": "_compute_1100_SignedUrlKeyIn",
        "SignedUrlKeyOut": "_compute_1101_SignedUrlKeyOut",
        "VpnGatewayStatusTunnelIn": "_compute_1102_VpnGatewayStatusTunnelIn",
        "VpnGatewayStatusTunnelOut": "_compute_1103_VpnGatewayStatusTunnelOut",
        "UrlMapTestHeaderIn": "_compute_1104_UrlMapTestHeaderIn",
        "UrlMapTestHeaderOut": "_compute_1105_UrlMapTestHeaderOut",
        "HttpHealthCheckListIn": "_compute_1106_HttpHealthCheckListIn",
        "HttpHealthCheckListOut": "_compute_1107_HttpHealthCheckListOut",
        "ForwardingRulesScopedListIn": "_compute_1108_ForwardingRulesScopedListIn",
        "ForwardingRulesScopedListOut": "_compute_1109_ForwardingRulesScopedListOut",
        "InstancesGetEffectiveFirewallsResponseIn": "_compute_1110_InstancesGetEffectiveFirewallsResponseIn",
        "InstancesGetEffectiveFirewallsResponseOut": "_compute_1111_InstancesGetEffectiveFirewallsResponseOut",
        "NodeGroupsSimulateMaintenanceEventRequestIn": "_compute_1112_NodeGroupsSimulateMaintenanceEventRequestIn",
        "NodeGroupsSimulateMaintenanceEventRequestOut": "_compute_1113_NodeGroupsSimulateMaintenanceEventRequestOut",
        "RouterNatRuleIn": "_compute_1114_RouterNatRuleIn",
        "RouterNatRuleOut": "_compute_1115_RouterNatRuleOut",
        "ZoneSetPolicyRequestIn": "_compute_1116_ZoneSetPolicyRequestIn",
        "ZoneSetPolicyRequestOut": "_compute_1117_ZoneSetPolicyRequestOut",
        "ImageIn": "_compute_1118_ImageIn",
        "ImageOut": "_compute_1119_ImageOut",
        "MachineTypesScopedListIn": "_compute_1120_MachineTypesScopedListIn",
        "MachineTypesScopedListOut": "_compute_1121_MachineTypesScopedListOut",
        "MetadataIn": "_compute_1122_MetadataIn",
        "MetadataOut": "_compute_1123_MetadataOut",
        "TargetPoolAggregatedListIn": "_compute_1124_TargetPoolAggregatedListIn",
        "TargetPoolAggregatedListOut": "_compute_1125_TargetPoolAggregatedListOut",
        "NodeGroupAggregatedListIn": "_compute_1126_NodeGroupAggregatedListIn",
        "NodeGroupAggregatedListOut": "_compute_1127_NodeGroupAggregatedListOut",
        "ResourceStatusIn": "_compute_1128_ResourceStatusIn",
        "ResourceStatusOut": "_compute_1129_ResourceStatusOut",
        "ShieldedInstanceIntegrityPolicyIn": "_compute_1130_ShieldedInstanceIntegrityPolicyIn",
        "ShieldedInstanceIntegrityPolicyOut": "_compute_1131_ShieldedInstanceIntegrityPolicyOut",
        "ResourcePolicyInstanceSchedulePolicyScheduleIn": "_compute_1132_ResourcePolicyInstanceSchedulePolicyScheduleIn",
        "ResourcePolicyInstanceSchedulePolicyScheduleOut": "_compute_1133_ResourcePolicyInstanceSchedulePolicyScheduleOut",
        "AllocationSpecificSKUReservationIn": "_compute_1134_AllocationSpecificSKUReservationIn",
        "AllocationSpecificSKUReservationOut": "_compute_1135_AllocationSpecificSKUReservationOut",
        "InstanceGroupManagersListManagedInstancesResponseIn": "_compute_1136_InstanceGroupManagersListManagedInstancesResponseIn",
        "InstanceGroupManagersListManagedInstancesResponseOut": "_compute_1137_InstanceGroupManagersListManagedInstancesResponseOut",
        "PacketMirroringIn": "_compute_1138_PacketMirroringIn",
        "PacketMirroringOut": "_compute_1139_PacketMirroringOut",
        "GlobalAddressesMoveRequestIn": "_compute_1140_GlobalAddressesMoveRequestIn",
        "GlobalAddressesMoveRequestOut": "_compute_1141_GlobalAddressesMoveRequestOut",
        "HTTP2HealthCheckIn": "_compute_1142_HTTP2HealthCheckIn",
        "HTTP2HealthCheckOut": "_compute_1143_HTTP2HealthCheckOut",
        "BackendBucketListIn": "_compute_1144_BackendBucketListIn",
        "BackendBucketListOut": "_compute_1145_BackendBucketListOut",
        "InstanceListReferrersIn": "_compute_1146_InstanceListReferrersIn",
        "InstanceListReferrersOut": "_compute_1147_InstanceListReferrersOut",
        "InterconnectAttachmentIn": "_compute_1148_InterconnectAttachmentIn",
        "InterconnectAttachmentOut": "_compute_1149_InterconnectAttachmentOut",
        "OperationAggregatedListIn": "_compute_1150_OperationAggregatedListIn",
        "OperationAggregatedListOut": "_compute_1151_OperationAggregatedListOut",
        "HealthChecksScopedListIn": "_compute_1152_HealthChecksScopedListIn",
        "HealthChecksScopedListOut": "_compute_1153_HealthChecksScopedListOut",
        "StatefulPolicyIn": "_compute_1154_StatefulPolicyIn",
        "StatefulPolicyOut": "_compute_1155_StatefulPolicyOut",
        "LocalizedMessageIn": "_compute_1156_LocalizedMessageIn",
        "LocalizedMessageOut": "_compute_1157_LocalizedMessageOut",
        "BackendBucketCdnPolicyCacheKeyPolicyIn": "_compute_1158_BackendBucketCdnPolicyCacheKeyPolicyIn",
        "BackendBucketCdnPolicyCacheKeyPolicyOut": "_compute_1159_BackendBucketCdnPolicyCacheKeyPolicyOut",
        "SubnetworksExpandIpCidrRangeRequestIn": "_compute_1160_SubnetworksExpandIpCidrRangeRequestIn",
        "SubnetworksExpandIpCidrRangeRequestOut": "_compute_1161_SubnetworksExpandIpCidrRangeRequestOut",
        "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn": "_compute_1162_InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn",
        "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut": "_compute_1163_InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut",
        "LicenseCodeIn": "_compute_1164_LicenseCodeIn",
        "LicenseCodeOut": "_compute_1165_LicenseCodeOut",
        "PacketMirroringNetworkInfoIn": "_compute_1166_PacketMirroringNetworkInfoIn",
        "PacketMirroringNetworkInfoOut": "_compute_1167_PacketMirroringNetworkInfoOut",
        "MachineImageListIn": "_compute_1168_MachineImageListIn",
        "MachineImageListOut": "_compute_1169_MachineImageListOut",
        "BulkInsertInstanceResourcePerInstancePropertiesIn": "_compute_1170_BulkInsertInstanceResourcePerInstancePropertiesIn",
        "BulkInsertInstanceResourcePerInstancePropertiesOut": "_compute_1171_BulkInsertInstanceResourcePerInstancePropertiesOut",
        "HTTPHealthCheckIn": "_compute_1172_HTTPHealthCheckIn",
        "HTTPHealthCheckOut": "_compute_1173_HTTPHealthCheckOut",
        "SecurityPolicyIn": "_compute_1174_SecurityPolicyIn",
        "SecurityPolicyOut": "_compute_1175_SecurityPolicyOut",
        "InstanceConsumptionInfoIn": "_compute_1176_InstanceConsumptionInfoIn",
        "InstanceConsumptionInfoOut": "_compute_1177_InstanceConsumptionInfoOut",
        "SavedDiskIn": "_compute_1178_SavedDiskIn",
        "SavedDiskOut": "_compute_1179_SavedDiskOut",
        "NetworksGetEffectiveFirewallsResponseIn": "_compute_1180_NetworksGetEffectiveFirewallsResponseIn",
        "NetworksGetEffectiveFirewallsResponseOut": "_compute_1181_NetworksGetEffectiveFirewallsResponseOut",
        "VpnTunnelListIn": "_compute_1182_VpnTunnelListIn",
        "VpnTunnelListOut": "_compute_1183_VpnTunnelListOut",
        "ServiceAttachmentConsumerProjectLimitIn": "_compute_1184_ServiceAttachmentConsumerProjectLimitIn",
        "ServiceAttachmentConsumerProjectLimitOut": "_compute_1185_ServiceAttachmentConsumerProjectLimitOut",
        "LocationPolicyLocationIn": "_compute_1186_LocationPolicyLocationIn",
        "LocationPolicyLocationOut": "_compute_1187_LocationPolicyLocationOut",
        "NodeGroupMaintenanceWindowIn": "_compute_1188_NodeGroupMaintenanceWindowIn",
        "NodeGroupMaintenanceWindowOut": "_compute_1189_NodeGroupMaintenanceWindowOut",
        "AcceleratorTypeIn": "_compute_1190_AcceleratorTypeIn",
        "AcceleratorTypeOut": "_compute_1191_AcceleratorTypeOut",
        "GlobalNetworkEndpointGroupsAttachEndpointsRequestIn": "_compute_1192_GlobalNetworkEndpointGroupsAttachEndpointsRequestIn",
        "GlobalNetworkEndpointGroupsAttachEndpointsRequestOut": "_compute_1193_GlobalNetworkEndpointGroupsAttachEndpointsRequestOut",
        "SubnetworkSecondaryRangeIn": "_compute_1194_SubnetworkSecondaryRangeIn",
        "SubnetworkSecondaryRangeOut": "_compute_1195_SubnetworkSecondaryRangeOut",
        "GuestAttributesValueIn": "_compute_1196_GuestAttributesValueIn",
        "GuestAttributesValueOut": "_compute_1197_GuestAttributesValueOut",
        "FileContentBufferIn": "_compute_1198_FileContentBufferIn",
        "FileContentBufferOut": "_compute_1199_FileContentBufferOut",
        "AliasIpRangeIn": "_compute_1200_AliasIpRangeIn",
        "AliasIpRangeOut": "_compute_1201_AliasIpRangeOut",
        "CommitmentsScopedListIn": "_compute_1202_CommitmentsScopedListIn",
        "CommitmentsScopedListOut": "_compute_1203_CommitmentsScopedListOut",
        "SecurityPolicyRuleRateLimitOptionsIn": "_compute_1204_SecurityPolicyRuleRateLimitOptionsIn",
        "SecurityPolicyRuleRateLimitOptionsOut": "_compute_1205_SecurityPolicyRuleRateLimitOptionsOut",
        "InterconnectDiagnosticsIn": "_compute_1206_InterconnectDiagnosticsIn",
        "InterconnectDiagnosticsOut": "_compute_1207_InterconnectDiagnosticsOut",
        "VmEndpointNatMappingsIn": "_compute_1208_VmEndpointNatMappingsIn",
        "VmEndpointNatMappingsOut": "_compute_1209_VmEndpointNatMappingsOut",
        "InterconnectAttachmentListIn": "_compute_1210_InterconnectAttachmentListIn",
        "InterconnectAttachmentListOut": "_compute_1211_InterconnectAttachmentListOut",
        "ErrorInfoIn": "_compute_1212_ErrorInfoIn",
        "ErrorInfoOut": "_compute_1213_ErrorInfoOut",
        "BackendServiceReferenceIn": "_compute_1214_BackendServiceReferenceIn",
        "BackendServiceReferenceOut": "_compute_1215_BackendServiceReferenceOut",
        "DisksAddResourcePoliciesRequestIn": "_compute_1216_DisksAddResourcePoliciesRequestIn",
        "DisksAddResourcePoliciesRequestOut": "_compute_1217_DisksAddResourcePoliciesRequestOut",
        "InterconnectsGetDiagnosticsResponseIn": "_compute_1218_InterconnectsGetDiagnosticsResponseIn",
        "InterconnectsGetDiagnosticsResponseOut": "_compute_1219_InterconnectsGetDiagnosticsResponseOut",
        "HelpIn": "_compute_1220_HelpIn",
        "HelpOut": "_compute_1221_HelpOut",
        "InstanceGroupManagersListErrorsResponseIn": "_compute_1222_InstanceGroupManagersListErrorsResponseIn",
        "InstanceGroupManagersListErrorsResponseOut": "_compute_1223_InstanceGroupManagersListErrorsResponseOut",
        "RegionDisksAddResourcePoliciesRequestIn": "_compute_1224_RegionDisksAddResourcePoliciesRequestIn",
        "RegionDisksAddResourcePoliciesRequestOut": "_compute_1225_RegionDisksAddResourcePoliciesRequestOut",
        "RegionAddressesMoveRequestIn": "_compute_1226_RegionAddressesMoveRequestIn",
        "RegionAddressesMoveRequestOut": "_compute_1227_RegionAddressesMoveRequestOut",
        "CacheInvalidationRuleIn": "_compute_1228_CacheInvalidationRuleIn",
        "CacheInvalidationRuleOut": "_compute_1229_CacheInvalidationRuleOut",
        "ServerBindingIn": "_compute_1230_ServerBindingIn",
        "ServerBindingOut": "_compute_1231_ServerBindingOut",
        "OutlierDetectionIn": "_compute_1232_OutlierDetectionIn",
        "OutlierDetectionOut": "_compute_1233_OutlierDetectionOut",
        "SerialPortOutputIn": "_compute_1234_SerialPortOutputIn",
        "SerialPortOutputOut": "_compute_1235_SerialPortOutputOut",
        "MetadataFilterLabelMatchIn": "_compute_1236_MetadataFilterLabelMatchIn",
        "MetadataFilterLabelMatchOut": "_compute_1237_MetadataFilterLabelMatchOut",
        "LogConfigCounterOptionsIn": "_compute_1238_LogConfigCounterOptionsIn",
        "LogConfigCounterOptionsOut": "_compute_1239_LogConfigCounterOptionsOut",
        "PublicAdvertisedPrefixListIn": "_compute_1240_PublicAdvertisedPrefixListIn",
        "PublicAdvertisedPrefixListOut": "_compute_1241_PublicAdvertisedPrefixListOut",
        "TargetVpnGatewaysScopedListIn": "_compute_1242_TargetVpnGatewaysScopedListIn",
        "TargetVpnGatewaysScopedListOut": "_compute_1243_TargetVpnGatewaysScopedListOut",
        "WafExpressionSetIn": "_compute_1244_WafExpressionSetIn",
        "WafExpressionSetOut": "_compute_1245_WafExpressionSetOut",
        "ServiceAttachmentsScopedListIn": "_compute_1246_ServiceAttachmentsScopedListIn",
        "ServiceAttachmentsScopedListOut": "_compute_1247_ServiceAttachmentsScopedListOut",
        "RouterMd5AuthenticationKeyIn": "_compute_1248_RouterMd5AuthenticationKeyIn",
        "RouterMd5AuthenticationKeyOut": "_compute_1249_RouterMd5AuthenticationKeyOut",
        "InstanceGroupManagersApplyUpdatesRequestIn": "_compute_1250_InstanceGroupManagersApplyUpdatesRequestIn",
        "InstanceGroupManagersApplyUpdatesRequestOut": "_compute_1251_InstanceGroupManagersApplyUpdatesRequestOut",
        "HttpRetryPolicyIn": "_compute_1252_HttpRetryPolicyIn",
        "HttpRetryPolicyOut": "_compute_1253_HttpRetryPolicyOut",
        "RegionInstanceGroupsListInstancesRequestIn": "_compute_1254_RegionInstanceGroupsListInstancesRequestIn",
        "RegionInstanceGroupsListInstancesRequestOut": "_compute_1255_RegionInstanceGroupsListInstancesRequestOut",
        "InstanceAggregatedListIn": "_compute_1256_InstanceAggregatedListIn",
        "InstanceAggregatedListOut": "_compute_1257_InstanceAggregatedListOut",
        "TargetHttpProxyIn": "_compute_1258_TargetHttpProxyIn",
        "TargetHttpProxyOut": "_compute_1259_TargetHttpProxyOut",
        "ForwardingRuleListIn": "_compute_1260_ForwardingRuleListIn",
        "ForwardingRuleListOut": "_compute_1261_ForwardingRuleListOut",
        "HttpHeaderActionIn": "_compute_1262_HttpHeaderActionIn",
        "HttpHeaderActionOut": "_compute_1263_HttpHeaderActionOut",
        "FirewallPolicyIn": "_compute_1264_FirewallPolicyIn",
        "FirewallPolicyOut": "_compute_1265_FirewallPolicyOut",
        "NetworkEdgeSecurityServicesScopedListIn": "_compute_1266_NetworkEdgeSecurityServicesScopedListIn",
        "NetworkEdgeSecurityServicesScopedListOut": "_compute_1267_NetworkEdgeSecurityServicesScopedListOut",
        "AccessConfigIn": "_compute_1268_AccessConfigIn",
        "AccessConfigOut": "_compute_1269_AccessConfigOut",
        "ZoneListIn": "_compute_1270_ZoneListIn",
        "ZoneListOut": "_compute_1271_ZoneListOut",
        "AutoscalersScopedListIn": "_compute_1272_AutoscalersScopedListIn",
        "AutoscalersScopedListOut": "_compute_1273_AutoscalersScopedListOut",
        "InterconnectAttachmentPrivateInfoIn": "_compute_1274_InterconnectAttachmentPrivateInfoIn",
        "InterconnectAttachmentPrivateInfoOut": "_compute_1275_InterconnectAttachmentPrivateInfoOut",
        "TargetTcpProxyListIn": "_compute_1276_TargetTcpProxyListIn",
        "TargetTcpProxyListOut": "_compute_1277_TargetTcpProxyListOut",
        "DeprecationStatusIn": "_compute_1278_DeprecationStatusIn",
        "DeprecationStatusOut": "_compute_1279_DeprecationStatusOut",
        "SubnetworkLogConfigIn": "_compute_1280_SubnetworkLogConfigIn",
        "SubnetworkLogConfigOut": "_compute_1281_SubnetworkLogConfigOut",
        "NodeTypesScopedListIn": "_compute_1282_NodeTypesScopedListIn",
        "NodeTypesScopedListOut": "_compute_1283_NodeTypesScopedListOut",
        "NotificationEndpointIn": "_compute_1284_NotificationEndpointIn",
        "NotificationEndpointOut": "_compute_1285_NotificationEndpointOut",
        "TargetPoolsRemoveInstanceRequestIn": "_compute_1286_TargetPoolsRemoveInstanceRequestIn",
        "TargetPoolsRemoveInstanceRequestOut": "_compute_1287_TargetPoolsRemoveInstanceRequestOut",
        "InstanceGroupManagersCreateInstancesRequestIn": "_compute_1288_InstanceGroupManagersCreateInstancesRequestIn",
        "InstanceGroupManagersCreateInstancesRequestOut": "_compute_1289_InstanceGroupManagersCreateInstancesRequestOut",
        "TargetHttpsProxyIn": "_compute_1290_TargetHttpsProxyIn",
        "TargetHttpsProxyOut": "_compute_1291_TargetHttpsProxyOut",
    }

    types = {}
    types["ErrorResponse"] = t.struct(
        {"code": t.integer(), "message": t.string(), "status": t.string()}
    ).named(renames["ErrorResponse"])
    types["ProjectsGetXpnResourcesIn"] = t.struct(
        {
            "resources": t.array(t.proxy(renames["XpnResourceIdIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["ProjectsGetXpnResourcesIn"])
    types["ProjectsGetXpnResourcesOut"] = t.struct(
        {
            "resources": t.array(t.proxy(renames["XpnResourceIdOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectsGetXpnResourcesOut"])
    types["RegionInstanceGroupManagersDeleteInstancesRequestIn"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "skipInstancesOnValidationError": t.boolean().optional(),
        }
    ).named(renames["RegionInstanceGroupManagersDeleteInstancesRequestIn"])
    types["RegionInstanceGroupManagersDeleteInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "skipInstancesOnValidationError": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersDeleteInstancesRequestOut"])
    types["InstanceGroupManagersListPerInstanceConfigsRespIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PerInstanceConfigIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagersListPerInstanceConfigsRespIn"])
    types["InstanceGroupManagersListPerInstanceConfigsRespOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PerInstanceConfigOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersListPerInstanceConfigsRespOut"])
    types["ConnectionDrainingIn"] = t.struct(
        {"drainingTimeoutSec": t.integer().optional()}
    ).named(renames["ConnectionDrainingIn"])
    types["ConnectionDrainingOut"] = t.struct(
        {
            "drainingTimeoutSec": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ConnectionDrainingOut"])
    types["UsableSubnetworksAggregatedListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["UsableSubnetworkIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["UsableSubnetworksAggregatedListIn"])
    types["UsableSubnetworksAggregatedListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["UsableSubnetworkOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UsableSubnetworksAggregatedListOut"])
    types["InstancePropertiesIn"] = t.struct(
        {
            "confidentialInstanceConfig": t.proxy(
                renames["ConfidentialInstanceConfigIn"]
            ).optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "keyRevocationActionType": t.string().optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceIn"])
            ).optional(),
            "networkPerformanceConfig": t.proxy(
                renames["NetworkPerformanceConfigIn"]
            ).optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigIn"])
            ).optional(),
            "canIpForward": t.boolean().optional(),
            "scheduling": t.proxy(renames["SchedulingIn"]).optional(),
            "machineType": t.string().optional(),
            "shieldedInstanceConfig": t.proxy(
                renames["ShieldedInstanceConfigIn"]
            ).optional(),
            "disks": t.array(t.proxy(renames["AttachedDiskIn"])).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "advancedMachineFeatures": t.proxy(
                renames["AdvancedMachineFeaturesIn"]
            ).optional(),
            "description": t.string().optional(),
            "serviceAccounts": t.array(t.proxy(renames["ServiceAccountIn"])).optional(),
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "tags": t.proxy(renames["TagsIn"]).optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "reservationAffinity": t.proxy(renames["ReservationAffinityIn"]).optional(),
            "metadata": t.proxy(renames["MetadataIn"]).optional(),
            "minCpuPlatform": t.string().optional(),
        }
    ).named(renames["InstancePropertiesIn"])
    types["InstancePropertiesOut"] = t.struct(
        {
            "confidentialInstanceConfig": t.proxy(
                renames["ConfidentialInstanceConfigOut"]
            ).optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "keyRevocationActionType": t.string().optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceOut"])
            ).optional(),
            "networkPerformanceConfig": t.proxy(
                renames["NetworkPerformanceConfigOut"]
            ).optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "canIpForward": t.boolean().optional(),
            "scheduling": t.proxy(renames["SchedulingOut"]).optional(),
            "machineType": t.string().optional(),
            "shieldedInstanceConfig": t.proxy(
                renames["ShieldedInstanceConfigOut"]
            ).optional(),
            "disks": t.array(t.proxy(renames["AttachedDiskOut"])).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "advancedMachineFeatures": t.proxy(
                renames["AdvancedMachineFeaturesOut"]
            ).optional(),
            "description": t.string().optional(),
            "serviceAccounts": t.array(
                t.proxy(renames["ServiceAccountOut"])
            ).optional(),
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "tags": t.proxy(renames["TagsOut"]).optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "reservationAffinity": t.proxy(
                renames["ReservationAffinityOut"]
            ).optional(),
            "metadata": t.proxy(renames["MetadataOut"]).optional(),
            "minCpuPlatform": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancePropertiesOut"])
    types["VpnGatewayStatusVpnConnectionIn"] = t.struct(
        {
            "peerGcpGateway": t.string().optional(),
            "peerExternalGateway": t.string().optional(),
            "state": t.proxy(
                renames["VpnGatewayStatusHighAvailabilityRequirementStateIn"]
            ).optional(),
            "tunnels": t.array(t.proxy(renames["VpnGatewayStatusTunnelIn"])).optional(),
        }
    ).named(renames["VpnGatewayStatusVpnConnectionIn"])
    types["VpnGatewayStatusVpnConnectionOut"] = t.struct(
        {
            "peerGcpGateway": t.string().optional(),
            "peerExternalGateway": t.string().optional(),
            "state": t.proxy(
                renames["VpnGatewayStatusHighAvailabilityRequirementStateOut"]
            ).optional(),
            "tunnels": t.array(
                t.proxy(renames["VpnGatewayStatusTunnelOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayStatusVpnConnectionOut"])
    types["RouterBgpPeerBfdIn"] = t.struct(
        {
            "minReceiveInterval": t.integer().optional(),
            "minTransmitInterval": t.integer().optional(),
            "sessionInitializationMode": t.string().optional(),
            "multiplier": t.integer().optional(),
        }
    ).named(renames["RouterBgpPeerBfdIn"])
    types["RouterBgpPeerBfdOut"] = t.struct(
        {
            "minReceiveInterval": t.integer().optional(),
            "minTransmitInterval": t.integer().optional(),
            "sessionInitializationMode": t.string().optional(),
            "multiplier": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterBgpPeerBfdOut"])
    types["InstanceManagedByIgmErrorInstanceActionDetailsIn"] = t.struct(
        {
            "instance": t.string().optional(),
            "version": t.proxy(renames["ManagedInstanceVersionIn"]).optional(),
            "action": t.string().optional(),
        }
    ).named(renames["InstanceManagedByIgmErrorInstanceActionDetailsIn"])
    types["InstanceManagedByIgmErrorInstanceActionDetailsOut"] = t.struct(
        {
            "instance": t.string().optional(),
            "version": t.proxy(renames["ManagedInstanceVersionOut"]).optional(),
            "action": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceManagedByIgmErrorInstanceActionDetailsOut"])
    types["MetadataFilterIn"] = t.struct(
        {
            "filterMatchCriteria": t.string().optional(),
            "filterLabels": t.array(
                t.proxy(renames["MetadataFilterLabelMatchIn"])
            ).optional(),
        }
    ).named(renames["MetadataFilterIn"])
    types["MetadataFilterOut"] = t.struct(
        {
            "filterMatchCriteria": t.string().optional(),
            "filterLabels": t.array(
                t.proxy(renames["MetadataFilterLabelMatchOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MetadataFilterOut"])
    types["DiskTypesScopedListIn"] = t.struct(
        {
            "diskTypes": t.array(t.proxy(renames["DiskTypeIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["DiskTypesScopedListIn"])
    types["DiskTypesScopedListOut"] = t.struct(
        {
            "diskTypes": t.array(t.proxy(renames["DiskTypeOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskTypesScopedListOut"])
    types["FirewallPolicyRuleMatcherLayer4ConfigIn"] = t.struct(
        {"ipProtocol": t.string().optional(), "ports": t.array(t.string()).optional()}
    ).named(renames["FirewallPolicyRuleMatcherLayer4ConfigIn"])
    types["FirewallPolicyRuleMatcherLayer4ConfigOut"] = t.struct(
        {
            "ipProtocol": t.string().optional(),
            "ports": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyRuleMatcherLayer4ConfigOut"])
    types["NodeGroupsListNodesIn"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NodeGroupNodeIn"])).optional(),
        }
    ).named(renames["NodeGroupsListNodesIn"])
    types["NodeGroupsListNodesOut"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NodeGroupNodeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsListNodesOut"])
    types["TargetPoolsAddHealthCheckRequestIn"] = t.struct(
        {"healthChecks": t.array(t.proxy(renames["HealthCheckReferenceIn"])).optional()}
    ).named(renames["TargetPoolsAddHealthCheckRequestIn"])
    types["TargetPoolsAddHealthCheckRequestOut"] = t.struct(
        {
            "healthChecks": t.array(
                t.proxy(renames["HealthCheckReferenceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolsAddHealthCheckRequestOut"])
    types["PacketMirroringMirroredResourceInfoSubnetInfoIn"] = t.struct(
        {"canonicalUrl": t.string().optional(), "url": t.string().optional()}
    ).named(renames["PacketMirroringMirroredResourceInfoSubnetInfoIn"])
    types["PacketMirroringMirroredResourceInfoSubnetInfoOut"] = t.struct(
        {
            "canonicalUrl": t.string().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringMirroredResourceInfoSubnetInfoOut"])
    types["LogConfigCloudAuditOptionsIn"] = t.struct(
        {
            "logName": t.string().optional(),
            "authorizationLoggingOptions": t.proxy(
                renames["AuthorizationLoggingOptionsIn"]
            ).optional(),
        }
    ).named(renames["LogConfigCloudAuditOptionsIn"])
    types["LogConfigCloudAuditOptionsOut"] = t.struct(
        {
            "logName": t.string().optional(),
            "authorizationLoggingOptions": t.proxy(
                renames["AuthorizationLoggingOptionsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogConfigCloudAuditOptionsOut"])
    types["PacketMirroringListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["PacketMirroringIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["PacketMirroringListIn"])
    types["PacketMirroringListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["PacketMirroringOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringListOut"])
    types["RegionInstanceGroupListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceGroupIn"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["RegionInstanceGroupListIn"])
    types["RegionInstanceGroupListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceGroupOut"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupListOut"])
    types["InstanceGroupManagersSetTargetPoolsRequestIn"] = t.struct(
        {
            "targetPools": t.array(t.string()).optional(),
            "fingerprint": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagersSetTargetPoolsRequestIn"])
    types["InstanceGroupManagersSetTargetPoolsRequestOut"] = t.struct(
        {
            "targetPools": t.array(t.string()).optional(),
            "fingerprint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersSetTargetPoolsRequestOut"])
    types["ShareSettingsIn"] = t.struct(
        {
            "projectMap": t.struct({"_": t.string().optional()}).optional(),
            "shareType": t.string().optional(),
        }
    ).named(renames["ShareSettingsIn"])
    types["ShareSettingsOut"] = t.struct(
        {
            "projectMap": t.struct({"_": t.string().optional()}).optional(),
            "shareType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShareSettingsOut"])
    types["TargetInstanceIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "zone": t.string().optional(),
            "name": t.string().optional(),
            "natPolicy": t.string().optional(),
            "network": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "instance": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["TargetInstanceIn"])
    types["TargetInstanceOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "zone": t.string().optional(),
            "name": t.string().optional(),
            "natPolicy": t.string().optional(),
            "network": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "instance": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetInstanceOut"])
    types["ResourcePolicyListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "etag": t.string(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ResourcePolicyIn"])).optional(),
        }
    ).named(renames["ResourcePolicyListIn"])
    types["ResourcePolicyListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "etag": t.string(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ResourcePolicyOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyListOut"])
    types["InstanceManagedByIgmErrorIn"] = t.struct(
        {
            "timestamp": t.string().optional(),
            "error": t.proxy(
                renames["InstanceManagedByIgmErrorManagedInstanceErrorIn"]
            ).optional(),
            "instanceActionDetails": t.proxy(
                renames["InstanceManagedByIgmErrorInstanceActionDetailsIn"]
            ).optional(),
        }
    ).named(renames["InstanceManagedByIgmErrorIn"])
    types["InstanceManagedByIgmErrorOut"] = t.struct(
        {
            "timestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
            "instanceActionDetails": t.proxy(
                renames["InstanceManagedByIgmErrorInstanceActionDetailsOut"]
            ).optional(),
        }
    ).named(renames["InstanceManagedByIgmErrorOut"])
    types["VpnGatewayAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["VpnGatewayAggregatedListIn"])
    types["VpnGatewayAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayAggregatedListOut"])
    types["TargetInstanceListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetInstanceIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["TargetInstanceListIn"])
    types["TargetInstanceListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetInstanceOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetInstanceListOut"])
    types["GuestOsFeatureIn"] = t.struct({"type": t.string().optional()}).named(
        renames["GuestOsFeatureIn"]
    )
    types["GuestOsFeatureOut"] = t.struct(
        {
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GuestOsFeatureOut"])
    types["ReservationsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "reservations": t.array(t.proxy(renames["ReservationIn"])).optional(),
        }
    ).named(renames["ReservationsScopedListIn"])
    types["ReservationsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "reservations": t.array(t.proxy(renames["ReservationOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationsScopedListOut"])
    types["RouterInterfaceIn"] = t.struct(
        {
            "managementType": t.string().optional(),
            "linkedVpnTunnel": t.string().optional(),
            "privateIpAddress": t.string().optional(),
            "ipRange": t.string().optional(),
            "linkedInterconnectAttachment": t.string().optional(),
            "subnetwork": t.string().optional(),
            "redundantInterface": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["RouterInterfaceIn"])
    types["RouterInterfaceOut"] = t.struct(
        {
            "managementType": t.string().optional(),
            "linkedVpnTunnel": t.string().optional(),
            "privateIpAddress": t.string().optional(),
            "ipRange": t.string().optional(),
            "linkedInterconnectAttachment": t.string().optional(),
            "subnetwork": t.string().optional(),
            "redundantInterface": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterInterfaceOut"])
    types["PublicDelegatedPrefixAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["PublicDelegatedPrefixAggregatedListIn"])
    types["PublicDelegatedPrefixAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicDelegatedPrefixAggregatedListOut"])
    types["InstanceGroupManagerUpdatePolicyIn"] = t.struct(
        {
            "mostDisruptiveAllowedAction": t.string().optional(),
            "type": t.string().optional(),
            "minimalAction": t.string().optional(),
            "maxSurge": t.proxy(renames["FixedOrPercentIn"]).optional(),
            "maxUnavailable": t.proxy(renames["FixedOrPercentIn"]).optional(),
            "instanceRedistributionType": t.string().optional(),
            "replacementMethod": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerUpdatePolicyIn"])
    types["InstanceGroupManagerUpdatePolicyOut"] = t.struct(
        {
            "mostDisruptiveAllowedAction": t.string().optional(),
            "type": t.string().optional(),
            "minimalAction": t.string().optional(),
            "maxSurge": t.proxy(renames["FixedOrPercentOut"]).optional(),
            "maxUnavailable": t.proxy(renames["FixedOrPercentOut"]).optional(),
            "instanceRedistributionType": t.string().optional(),
            "replacementMethod": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerUpdatePolicyOut"])
    types["TargetHttpsProxiesSetCertificateMapRequestIn"] = t.struct(
        {"certificateMap": t.string().optional()}
    ).named(renames["TargetHttpsProxiesSetCertificateMapRequestIn"])
    types["TargetHttpsProxiesSetCertificateMapRequestOut"] = t.struct(
        {
            "certificateMap": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxiesSetCertificateMapRequestOut"])
    types["TargetSslProxiesSetSslCertificatesRequestIn"] = t.struct(
        {"sslCertificates": t.array(t.string()).optional()}
    ).named(renames["TargetSslProxiesSetSslCertificatesRequestIn"])
    types["TargetSslProxiesSetSslCertificatesRequestOut"] = t.struct(
        {
            "sslCertificates": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxiesSetSslCertificatesRequestOut"])
    types["RegionInstanceGroupManagerPatchInstanceConfigReqIn"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigIn"])
            ).optional()
        }
    ).named(renames["RegionInstanceGroupManagerPatchInstanceConfigReqIn"])
    types["RegionInstanceGroupManagerPatchInstanceConfigReqOut"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagerPatchInstanceConfigReqOut"])
    types["RegionInstanceGroupManagersListInstancesResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "managedInstances": t.array(
                t.proxy(renames["ManagedInstanceIn"])
            ).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListInstancesResponseIn"])
    types["RegionInstanceGroupManagersListInstancesResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "managedInstances": t.array(
                t.proxy(renames["ManagedInstanceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListInstancesResponseOut"])
    types["BackendServiceFailoverPolicyIn"] = t.struct(
        {
            "disableConnectionDrainOnFailover": t.boolean().optional(),
            "failoverRatio": t.number().optional(),
            "dropTrafficIfUnhealthy": t.boolean().optional(),
        }
    ).named(renames["BackendServiceFailoverPolicyIn"])
    types["BackendServiceFailoverPolicyOut"] = t.struct(
        {
            "disableConnectionDrainOnFailover": t.boolean().optional(),
            "failoverRatio": t.number().optional(),
            "dropTrafficIfUnhealthy": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceFailoverPolicyOut"])
    types["UrlMapTestIn"] = t.struct(
        {
            "service": t.string().optional(),
            "description": t.string().optional(),
            "host": t.string().optional(),
            "expectedRedirectResponseCode": t.integer().optional(),
            "headers": t.array(t.proxy(renames["UrlMapTestHeaderIn"])).optional(),
            "path": t.string().optional(),
            "expectedOutputUrl": t.string().optional(),
        }
    ).named(renames["UrlMapTestIn"])
    types["UrlMapTestOut"] = t.struct(
        {
            "service": t.string().optional(),
            "description": t.string().optional(),
            "host": t.string().optional(),
            "expectedRedirectResponseCode": t.integer().optional(),
            "headers": t.array(t.proxy(renames["UrlMapTestHeaderOut"])).optional(),
            "path": t.string().optional(),
            "expectedOutputUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapTestOut"])
    types["DiskParamsIn"] = t.struct(
        {"resourceManagerTags": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["DiskParamsIn"])
    types["DiskParamsOut"] = t.struct(
        {
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskParamsOut"])
    types["NetworkEdgeSecurityServiceAggregatedListIn"] = t.struct(
        {
            "etag": t.string(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["NetworkEdgeSecurityServiceAggregatedListIn"])
    types["NetworkEdgeSecurityServiceAggregatedListOut"] = t.struct(
        {
            "etag": t.string(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEdgeSecurityServiceAggregatedListOut"])
    types["InstanceWithNamedPortsIn"] = t.struct(
        {
            "status": t.string().optional(),
            "instance": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
        }
    ).named(renames["InstanceWithNamedPortsIn"])
    types["InstanceWithNamedPortsOut"] = t.struct(
        {
            "status": t.string().optional(),
            "instance": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceWithNamedPortsOut"])
    types["PacketMirroringForwardingRuleInfoIn"] = t.struct(
        {"url": t.string().optional(), "canonicalUrl": t.string().optional()}
    ).named(renames["PacketMirroringForwardingRuleInfoIn"])
    types["PacketMirroringForwardingRuleInfoOut"] = t.struct(
        {
            "url": t.string().optional(),
            "canonicalUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringForwardingRuleInfoOut"])
    types["OperationListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["OperationIn"])).optional(),
        }
    ).named(renames["OperationListIn"])
    types["OperationListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["OperationOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OperationListOut"])
    types["TargetPoolsRemoveHealthCheckRequestIn"] = t.struct(
        {"healthChecks": t.array(t.proxy(renames["HealthCheckReferenceIn"])).optional()}
    ).named(renames["TargetPoolsRemoveHealthCheckRequestIn"])
    types["TargetPoolsRemoveHealthCheckRequestOut"] = t.struct(
        {
            "healthChecks": t.array(
                t.proxy(renames["HealthCheckReferenceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolsRemoveHealthCheckRequestOut"])
    types["ForwardingRuleAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["ForwardingRuleAggregatedListIn"])
    types["ForwardingRuleAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRuleAggregatedListOut"])
    types["PublicAdvertisedPrefixPublicDelegatedPrefixIn"] = t.struct(
        {
            "status": t.string().optional(),
            "name": t.string().optional(),
            "project": t.string().optional(),
            "region": t.string().optional(),
            "ipRange": t.string().optional(),
        }
    ).named(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
    types["PublicAdvertisedPrefixPublicDelegatedPrefixOut"] = t.struct(
        {
            "status": t.string().optional(),
            "name": t.string().optional(),
            "project": t.string().optional(),
            "region": t.string().optional(),
            "ipRange": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicAdvertisedPrefixPublicDelegatedPrefixOut"])
    types["BackendServiceIn"] = t.struct(
        {
            "protocol": t.string().optional(),
            "sessionAffinity": t.string().optional(),
            "kind": t.string().optional(),
            "affinityCookieTtlSec": t.integer().optional(),
            "region": t.string().optional(),
            "subsetting": t.proxy(renames["SubsettingIn"]),
            "localityLbPolicies": t.array(
                t.proxy(renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"])
            ).optional(),
            "securityPolicy": t.string().optional(),
            "fingerprint": t.string().optional(),
            "description": t.string().optional(),
            "loadBalancingScheme": t.string().optional(),
            "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
            "selfLink": t.string().optional(),
            "customResponseHeaders": t.array(t.string()).optional(),
            "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
            "localityLbPolicy": t.string().optional(),
            "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
            "edgeSecurityPolicy": t.string().optional(),
            "name": t.string().optional(),
            "failoverPolicy": t.proxy(
                renames["BackendServiceFailoverPolicyIn"]
            ).optional(),
            "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
            "serviceBindings": t.array(t.string()).optional(),
            "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
            "port": t.integer().optional(),
            "timeoutSec": t.integer().optional(),
            "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
            "id": t.string().optional(),
            "connectionTrackingPolicy": t.proxy(
                renames["BackendServiceConnectionTrackingPolicyIn"]
            ).optional(),
            "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
            "customRequestHeaders": t.array(t.string()).optional(),
            "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
            "metadatas": t.struct({"_": t.string().optional()}).optional(),
            "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
            "healthChecks": t.array(t.string()).optional(),
            "compressionMode": t.string().optional(),
            "enableCDN": t.boolean().optional(),
            "consistentHash": t.proxy(
                renames["ConsistentHashLoadBalancerSettingsIn"]
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "portName": t.string().optional(),
            "network": t.string().optional(),
        }
    ).named(renames["BackendServiceIn"])
    types["BackendServiceOut"] = t.struct(
        {
            "protocol": t.string().optional(),
            "sessionAffinity": t.string().optional(),
            "kind": t.string().optional(),
            "affinityCookieTtlSec": t.integer().optional(),
            "region": t.string().optional(),
            "subsetting": t.proxy(renames["SubsettingOut"]),
            "localityLbPolicies": t.array(
                t.proxy(renames["BackendServiceLocalityLoadBalancingPolicyConfigOut"])
            ).optional(),
            "securityPolicy": t.string().optional(),
            "fingerprint": t.string().optional(),
            "description": t.string().optional(),
            "loadBalancingScheme": t.string().optional(),
            "circuitBreakers": t.proxy(renames["CircuitBreakersOut"]),
            "selfLink": t.string().optional(),
            "customResponseHeaders": t.array(t.string()).optional(),
            "outlierDetection": t.proxy(renames["OutlierDetectionOut"]).optional(),
            "localityLbPolicy": t.string().optional(),
            "securitySettings": t.proxy(renames["SecuritySettingsOut"]).optional(),
            "edgeSecurityPolicy": t.string().optional(),
            "name": t.string().optional(),
            "failoverPolicy": t.proxy(
                renames["BackendServiceFailoverPolicyOut"]
            ).optional(),
            "iap": t.proxy(renames["BackendServiceIAPOut"]).optional(),
            "serviceBindings": t.array(t.string()).optional(),
            "backends": t.array(t.proxy(renames["BackendOut"])).optional(),
            "port": t.integer().optional(),
            "timeoutSec": t.integer().optional(),
            "connectionDraining": t.proxy(renames["ConnectionDrainingOut"]),
            "id": t.string().optional(),
            "connectionTrackingPolicy": t.proxy(
                renames["BackendServiceConnectionTrackingPolicyOut"]
            ).optional(),
            "maxStreamDuration": t.proxy(renames["DurationOut"]).optional(),
            "customRequestHeaders": t.array(t.string()).optional(),
            "logConfig": t.proxy(renames["BackendServiceLogConfigOut"]).optional(),
            "metadatas": t.struct({"_": t.string().optional()}).optional(),
            "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyOut"]).optional(),
            "healthChecks": t.array(t.string()).optional(),
            "compressionMode": t.string().optional(),
            "enableCDN": t.boolean().optional(),
            "consistentHash": t.proxy(
                renames["ConsistentHashLoadBalancerSettingsOut"]
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "portName": t.string().optional(),
            "network": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceOut"])
    types["ReservationAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["ReservationAggregatedListIn"])
    types["ReservationAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationAggregatedListOut"])
    types["HealthCheckServicesListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HealthCheckServiceIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["HealthCheckServicesListIn"])
    types["HealthCheckServicesListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HealthCheckServiceOut"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckServicesListOut"])
    types["SubnetworkListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["SubnetworkIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["SubnetworkListIn"])
    types["SubnetworkListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["SubnetworkOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworkListOut"])
    types["UrlMapsValidateRequestIn"] = t.struct(
        {
            "loadBalancingSchemes": t.array(t.string()).optional(),
            "resource": t.proxy(renames["UrlMapIn"]).optional(),
        }
    ).named(renames["UrlMapsValidateRequestIn"])
    types["UrlMapsValidateRequestOut"] = t.struct(
        {
            "loadBalancingSchemes": t.array(t.string()).optional(),
            "resource": t.proxy(renames["UrlMapOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapsValidateRequestOut"])
    types["HttpHeaderMatchIn"] = t.struct(
        {
            "exactMatch": t.string().optional(),
            "rangeMatch": t.proxy(renames["Int64RangeMatchIn"]).optional(),
            "suffixMatch": t.string().optional(),
            "invertMatch": t.boolean().optional(),
            "prefixMatch": t.string().optional(),
            "regexMatch": t.string().optional(),
            "presentMatch": t.boolean().optional(),
            "headerName": t.string().optional(),
        }
    ).named(renames["HttpHeaderMatchIn"])
    types["HttpHeaderMatchOut"] = t.struct(
        {
            "exactMatch": t.string().optional(),
            "rangeMatch": t.proxy(renames["Int64RangeMatchOut"]).optional(),
            "suffixMatch": t.string().optional(),
            "invertMatch": t.boolean().optional(),
            "prefixMatch": t.string().optional(),
            "regexMatch": t.string().optional(),
            "presentMatch": t.boolean().optional(),
            "headerName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpHeaderMatchOut"])
    types["InstanceGroupManagerAutoHealingPolicyIn"] = t.struct(
        {
            "healthCheck": t.string().optional(),
            "initialDelaySec": t.integer().optional(),
        }
    ).named(renames["InstanceGroupManagerAutoHealingPolicyIn"])
    types["InstanceGroupManagerAutoHealingPolicyOut"] = t.struct(
        {
            "healthCheck": t.string().optional(),
            "initialDelaySec": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerAutoHealingPolicyOut"])
    types["PublicAdvertisedPrefixIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "status": t.string().optional(),
            "sharedSecret": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "publicDelegatedPrefixs": t.array(
                t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
            ).optional(),
            "dnsVerificationIp": t.string().optional(),
            "description": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["PublicAdvertisedPrefixIn"])
    types["PublicAdvertisedPrefixOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "status": t.string().optional(),
            "sharedSecret": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "publicDelegatedPrefixs": t.array(
                t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixOut"])
            ).optional(),
            "dnsVerificationIp": t.string().optional(),
            "description": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicAdvertisedPrefixOut"])
    types["NetworkEndpointGroupListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["NetworkEndpointGroupIn"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["NetworkEndpointGroupListIn"])
    types["NetworkEndpointGroupListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["NetworkEndpointGroupOut"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupListOut"])
    types["InstanceGroupManagersRecreateInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.string()).optional()}
    ).named(renames["InstanceGroupManagersRecreateInstancesRequestIn"])
    types["InstanceGroupManagersRecreateInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersRecreateInstancesRequestOut"])
    types["OperationsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "operations": t.array(t.proxy(renames["OperationIn"])).optional(),
        }
    ).named(renames["OperationsScopedListIn"])
    types["OperationsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "operations": t.array(t.proxy(renames["OperationOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OperationsScopedListOut"])
    types["ProjectsDisableXpnResourceRequestIn"] = t.struct(
        {"xpnResource": t.proxy(renames["XpnResourceIdIn"]).optional()}
    ).named(renames["ProjectsDisableXpnResourceRequestIn"])
    types["ProjectsDisableXpnResourceRequestOut"] = t.struct(
        {
            "xpnResource": t.proxy(renames["XpnResourceIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectsDisableXpnResourceRequestOut"])
    types["InstanceGroupsSetNamedPortsRequestIn"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
        }
    ).named(renames["InstanceGroupsSetNamedPortsRequestIn"])
    types["InstanceGroupsSetNamedPortsRequestOut"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsSetNamedPortsRequestOut"])
    types["InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeIn"] = t.struct(
        {"min": t.integer(), "max": t.integer()}
    ).named(renames["InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeIn"])
    types[
        "InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeOut"
    ] = t.struct(
        {
            "min": t.integer(),
            "max": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeOut"]
    )
    types["SecurityPolicyRuleMatcherConfigIn"] = t.struct(
        {"srcIpRanges": t.array(t.string()).optional()}
    ).named(renames["SecurityPolicyRuleMatcherConfigIn"])
    types["SecurityPolicyRuleMatcherConfigOut"] = t.struct(
        {
            "srcIpRanges": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleMatcherConfigOut"])
    types["TargetPoolIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "healthChecks": t.array(t.string()).optional(),
            "region": t.string().optional(),
            "id": t.string().optional(),
            "backupPool": t.string().optional(),
            "sessionAffinity": t.string().optional(),
            "instances": t.array(t.string()).optional(),
            "failoverRatio": t.number().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["TargetPoolIn"])
    types["TargetPoolOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "healthChecks": t.array(t.string()).optional(),
            "region": t.string().optional(),
            "id": t.string().optional(),
            "backupPool": t.string().optional(),
            "sessionAffinity": t.string().optional(),
            "instances": t.array(t.string()).optional(),
            "failoverRatio": t.number().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolOut"])
    types["BackendServiceAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["BackendServiceAggregatedListIn"])
    types["BackendServiceAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceAggregatedListOut"])
    types["TargetVpnGatewayIn"] = t.struct(
        {
            "description": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "tunnels": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "forwardingRules": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "network": t.string().optional(),
        }
    ).named(renames["TargetVpnGatewayIn"])
    types["TargetVpnGatewayOut"] = t.struct(
        {
            "description": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "tunnels": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "forwardingRules": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "network": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetVpnGatewayOut"])
    types["Uint128In"] = t.struct({"low": t.string(), "high": t.string()}).named(
        renames["Uint128In"]
    )
    types["Uint128Out"] = t.struct(
        {
            "low": t.string(),
            "high": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["Uint128Out"])
    types["FirewallIn"] = t.struct(
        {
            "targetServiceAccounts": t.array(t.string()).optional(),
            "sourceServiceAccounts": t.array(t.string()).optional(),
            "priority": t.integer().optional(),
            "logConfig": t.proxy(renames["FirewallLogConfigIn"]).optional(),
            "id": t.string().optional(),
            "sourceTags": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "allowed": t.array(
                t.struct(
                    {
                        "IPProtocol": t.string().optional(),
                        "ports": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "denied": t.array(
                t.struct(
                    {
                        "IPProtocol": t.string().optional(),
                        "ports": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "direction": t.string().optional(),
            "targetTags": t.array(t.string()).optional(),
            "sourceRanges": t.array(t.string()).optional(),
            "disabled": t.boolean().optional(),
            "network": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "destinationRanges": t.array(t.string()).optional(),
        }
    ).named(renames["FirewallIn"])
    types["FirewallOut"] = t.struct(
        {
            "targetServiceAccounts": t.array(t.string()).optional(),
            "sourceServiceAccounts": t.array(t.string()).optional(),
            "priority": t.integer().optional(),
            "logConfig": t.proxy(renames["FirewallLogConfigOut"]).optional(),
            "id": t.string().optional(),
            "sourceTags": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "allowed": t.array(
                t.struct(
                    {
                        "IPProtocol": t.string().optional(),
                        "ports": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "denied": t.array(
                t.struct(
                    {
                        "IPProtocol": t.string().optional(),
                        "ports": t.array(t.string()).optional(),
                    }
                )
            ).optional(),
            "direction": t.string().optional(),
            "targetTags": t.array(t.string()).optional(),
            "sourceRanges": t.array(t.string()).optional(),
            "disabled": t.boolean().optional(),
            "network": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "destinationRanges": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallOut"])
    types["NodeTemplatesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nodeTemplates": t.array(t.proxy(renames["NodeTemplateIn"])).optional(),
        }
    ).named(renames["NodeTemplatesScopedListIn"])
    types["NodeTemplatesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nodeTemplates": t.array(t.proxy(renames["NodeTemplateOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTemplatesScopedListOut"])
    types["SecurityPolicyListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SecurityPolicyIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["SecurityPolicyListIn"])
    types["SecurityPolicyListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SecurityPolicyOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyListOut"])
    types["UsageExportLocationIn"] = t.struct(
        {"bucketName": t.string().optional(), "reportNamePrefix": t.string().optional()}
    ).named(renames["UsageExportLocationIn"])
    types["UsageExportLocationOut"] = t.struct(
        {
            "bucketName": t.string().optional(),
            "reportNamePrefix": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UsageExportLocationOut"])
    types["LicenseCodeLicenseAliasIn"] = t.struct(
        {"description": t.string().optional(), "selfLink": t.string().optional()}
    ).named(renames["LicenseCodeLicenseAliasIn"])
    types["LicenseCodeLicenseAliasOut"] = t.struct(
        {
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicenseCodeLicenseAliasOut"])
    types["BackendBucketCdnPolicyIn"] = t.struct(
        {
            "signedUrlKeyNames": t.array(t.string()).optional(),
            "negativeCachingPolicy": t.array(
                t.proxy(renames["BackendBucketCdnPolicyNegativeCachingPolicyIn"])
            ).optional(),
            "clientTtl": t.integer().optional(),
            "defaultTtl": t.integer().optional(),
            "negativeCaching": t.boolean().optional(),
            "cacheKeyPolicy": t.proxy(
                renames["BackendBucketCdnPolicyCacheKeyPolicyIn"]
            ).optional(),
            "serveWhileStale": t.integer().optional(),
            "requestCoalescing": t.boolean().optional(),
            "cacheMode": t.string().optional(),
            "maxTtl": t.integer().optional(),
            "bypassCacheOnRequestHeaders": t.array(
                t.proxy(renames["BackendBucketCdnPolicyBypassCacheOnRequestHeaderIn"])
            ).optional(),
            "signedUrlCacheMaxAgeSec": t.string().optional(),
        }
    ).named(renames["BackendBucketCdnPolicyIn"])
    types["BackendBucketCdnPolicyOut"] = t.struct(
        {
            "signedUrlKeyNames": t.array(t.string()).optional(),
            "negativeCachingPolicy": t.array(
                t.proxy(renames["BackendBucketCdnPolicyNegativeCachingPolicyOut"])
            ).optional(),
            "clientTtl": t.integer().optional(),
            "defaultTtl": t.integer().optional(),
            "negativeCaching": t.boolean().optional(),
            "cacheKeyPolicy": t.proxy(
                renames["BackendBucketCdnPolicyCacheKeyPolicyOut"]
            ).optional(),
            "serveWhileStale": t.integer().optional(),
            "requestCoalescing": t.boolean().optional(),
            "cacheMode": t.string().optional(),
            "maxTtl": t.integer().optional(),
            "bypassCacheOnRequestHeaders": t.array(
                t.proxy(renames["BackendBucketCdnPolicyBypassCacheOnRequestHeaderOut"])
            ).optional(),
            "signedUrlCacheMaxAgeSec": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketCdnPolicyOut"])
    types["InterconnectCircuitInfoIn"] = t.struct(
        {
            "googleDemarcId": t.string().optional(),
            "googleCircuitId": t.string().optional(),
            "customerDemarcId": t.string().optional(),
        }
    ).named(renames["InterconnectCircuitInfoIn"])
    types["InterconnectCircuitInfoOut"] = t.struct(
        {
            "googleDemarcId": t.string().optional(),
            "googleCircuitId": t.string().optional(),
            "customerDemarcId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectCircuitInfoOut"])
    types["SslCertificateIn"] = t.struct(
        {
            "privateKey": t.string().optional(),
            "subjectAlternativeNames": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "certificate": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "managed": t.proxy(
                renames["SslCertificateManagedSslCertificateIn"]
            ).optional(),
            "kind": t.string().optional(),
            "selfManaged": t.proxy(
                renames["SslCertificateSelfManagedSslCertificateIn"]
            ).optional(),
            "name": t.string().optional(),
            "expireTime": t.string().optional(),
            "type": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["SslCertificateIn"])
    types["SslCertificateOut"] = t.struct(
        {
            "privateKey": t.string().optional(),
            "subjectAlternativeNames": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "certificate": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "managed": t.proxy(
                renames["SslCertificateManagedSslCertificateOut"]
            ).optional(),
            "kind": t.string().optional(),
            "selfManaged": t.proxy(
                renames["SslCertificateSelfManagedSslCertificateOut"]
            ).optional(),
            "name": t.string().optional(),
            "expireTime": t.string().optional(),
            "type": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificateOut"])
    types["LocationPolicyIn"] = t.struct(
        {
            "targetShape": t.string().optional(),
            "locations": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["LocationPolicyIn"])
    types["LocationPolicyOut"] = t.struct(
        {
            "targetShape": t.string().optional(),
            "locations": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocationPolicyOut"])
    types["InstanceTemplatesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "instanceTemplates": t.array(
                t.proxy(renames["InstanceTemplateIn"])
            ).optional(),
        }
    ).named(renames["InstanceTemplatesScopedListIn"])
    types["InstanceTemplatesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "instanceTemplates": t.array(
                t.proxy(renames["InstanceTemplateOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceTemplatesScopedListOut"])
    types["ShieldedInstanceConfigIn"] = t.struct(
        {
            "enableVtpm": t.boolean().optional(),
            "enableIntegrityMonitoring": t.boolean().optional(),
            "enableSecureBoot": t.boolean().optional(),
        }
    ).named(renames["ShieldedInstanceConfigIn"])
    types["ShieldedInstanceConfigOut"] = t.struct(
        {
            "enableVtpm": t.boolean().optional(),
            "enableIntegrityMonitoring": t.boolean().optional(),
            "enableSecureBoot": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShieldedInstanceConfigOut"])
    types["RouteListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["RouteIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["RouteListIn"])
    types["RouteListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["RouteOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouteListOut"])
    types["SslCertificateAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["SslCertificateAggregatedListIn"])
    types["SslCertificateAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificateAggregatedListOut"])
    types["WeightedBackendServiceIn"] = t.struct(
        {
            "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
            "weight": t.integer().optional(),
            "backendService": t.string().optional(),
        }
    ).named(renames["WeightedBackendServiceIn"])
    types["WeightedBackendServiceOut"] = t.struct(
        {
            "headerAction": t.proxy(renames["HttpHeaderActionOut"]).optional(),
            "weight": t.integer().optional(),
            "backendService": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WeightedBackendServiceOut"])
    types["PreservedStateIn"] = t.struct(
        {
            "disks": t.struct({"_": t.string().optional()}).optional(),
            "metadata": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["PreservedStateIn"])
    types["PreservedStateOut"] = t.struct(
        {
            "disks": t.struct({"_": t.string().optional()}).optional(),
            "metadata": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PreservedStateOut"])
    types["ReservationAffinityIn"] = t.struct(
        {
            "values": t.array(t.string()).optional(),
            "consumeReservationType": t.string().optional(),
            "key": t.string().optional(),
        }
    ).named(renames["ReservationAffinityIn"])
    types["ReservationAffinityOut"] = t.struct(
        {
            "values": t.array(t.string()).optional(),
            "consumeReservationType": t.string().optional(),
            "key": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationAffinityOut"])
    types["NodeGroupNodeIn"] = t.struct(
        {
            "serverId": t.string().optional(),
            "nodeType": t.string().optional(),
            "instances": t.array(t.string()).optional(),
            "status": t.string(),
            "disks": t.array(t.proxy(renames["LocalDiskIn"])).optional(),
            "totalResources": t.proxy(renames["InstanceConsumptionInfoIn"]).optional(),
            "consumedResources": t.proxy(
                renames["InstanceConsumptionInfoIn"]
            ).optional(),
            "serverBinding": t.proxy(renames["ServerBindingIn"]).optional(),
            "name": t.string().optional(),
            "instanceConsumptionData": t.array(
                t.proxy(renames["InstanceConsumptionDataIn"])
            ).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "accelerators": t.array(t.proxy(renames["AcceleratorConfigIn"])).optional(),
            "cpuOvercommitType": t.string().optional(),
        }
    ).named(renames["NodeGroupNodeIn"])
    types["NodeGroupNodeOut"] = t.struct(
        {
            "serverId": t.string().optional(),
            "nodeType": t.string().optional(),
            "instances": t.array(t.string()).optional(),
            "status": t.string(),
            "disks": t.array(t.proxy(renames["LocalDiskOut"])).optional(),
            "totalResources": t.proxy(renames["InstanceConsumptionInfoOut"]).optional(),
            "consumedResources": t.proxy(
                renames["InstanceConsumptionInfoOut"]
            ).optional(),
            "serverBinding": t.proxy(renames["ServerBindingOut"]).optional(),
            "name": t.string().optional(),
            "instanceConsumptionData": t.array(
                t.proxy(renames["InstanceConsumptionDataOut"])
            ).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "accelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "cpuOvercommitType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupNodeOut"])
    types["AuditConfigIn"] = t.struct(
        {
            "exemptedMembers": t.array(t.string()).optional(),
            "service": t.string().optional(),
            "auditLogConfigs": t.array(t.proxy(renames["AuditLogConfigIn"])).optional(),
        }
    ).named(renames["AuditConfigIn"])
    types["AuditConfigOut"] = t.struct(
        {
            "exemptedMembers": t.array(t.string()).optional(),
            "service": t.string().optional(),
            "auditLogConfigs": t.array(
                t.proxy(renames["AuditLogConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AuditConfigOut"])
    types["NetworkEndpointWithHealthStatusIn"] = t.struct(
        {
            "networkEndpoint": t.proxy(renames["NetworkEndpointIn"]).optional(),
            "healths": t.array(
                t.proxy(renames["HealthStatusForNetworkEndpointIn"])
            ).optional(),
        }
    ).named(renames["NetworkEndpointWithHealthStatusIn"])
    types["NetworkEndpointWithHealthStatusOut"] = t.struct(
        {
            "networkEndpoint": t.proxy(renames["NetworkEndpointOut"]).optional(),
            "healths": t.array(
                t.proxy(renames["HealthStatusForNetworkEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointWithHealthStatusOut"])
    types["BackendServiceLogConfigIn"] = t.struct(
        {
            "sampleRate": t.number().optional(),
            "optionalFields": t.array(t.string()).optional(),
            "enable": t.boolean().optional(),
            "optionalMode": t.string().optional(),
        }
    ).named(renames["BackendServiceLogConfigIn"])
    types["BackendServiceLogConfigOut"] = t.struct(
        {
            "sampleRate": t.number().optional(),
            "optionalFields": t.array(t.string()).optional(),
            "enable": t.boolean().optional(),
            "optionalMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceLogConfigOut"])
    types["FirewallLogConfigIn"] = t.struct(
        {"enable": t.boolean().optional(), "metadata": t.string().optional()}
    ).named(renames["FirewallLogConfigIn"])
    types["FirewallLogConfigOut"] = t.struct(
        {
            "enable": t.boolean().optional(),
            "metadata": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallLogConfigOut"])
    types["GuestAttributesIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "queryPath": t.string().optional(),
            "selfLink": t.string().optional(),
            "variableValue": t.string().optional(),
            "variableKey": t.string().optional(),
            "queryValue": t.proxy(renames["GuestAttributesValueIn"]).optional(),
        }
    ).named(renames["GuestAttributesIn"])
    types["GuestAttributesOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "queryPath": t.string().optional(),
            "selfLink": t.string().optional(),
            "variableValue": t.string().optional(),
            "variableKey": t.string().optional(),
            "queryValue": t.proxy(renames["GuestAttributesValueOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GuestAttributesOut"])
    types["NodeTemplateIn"] = t.struct(
        {
            "id": t.string().optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "accelerators": t.array(t.proxy(renames["AcceleratorConfigIn"])),
            "nodeType": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nodeTypeFlexibility": t.proxy(
                renames["NodeTemplateNodeTypeFlexibilityIn"]
            ).optional(),
            "nodeAffinityLabels": t.struct({"_": t.string().optional()}).optional(),
            "creationTimestamp": t.string().optional(),
            "serverBinding": t.proxy(renames["ServerBindingIn"]).optional(),
            "disks": t.array(t.proxy(renames["LocalDiskIn"])),
            "statusMessage": t.string().optional(),
            "region": t.string().optional(),
            "cpuOvercommitType": t.string().optional(),
            "status": t.string().optional(),
        }
    ).named(renames["NodeTemplateIn"])
    types["NodeTemplateOut"] = t.struct(
        {
            "id": t.string().optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "accelerators": t.array(t.proxy(renames["AcceleratorConfigOut"])),
            "nodeType": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nodeTypeFlexibility": t.proxy(
                renames["NodeTemplateNodeTypeFlexibilityOut"]
            ).optional(),
            "nodeAffinityLabels": t.struct({"_": t.string().optional()}).optional(),
            "creationTimestamp": t.string().optional(),
            "serverBinding": t.proxy(renames["ServerBindingOut"]).optional(),
            "disks": t.array(t.proxy(renames["LocalDiskOut"])),
            "statusMessage": t.string().optional(),
            "region": t.string().optional(),
            "cpuOvercommitType": t.string().optional(),
            "status": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTemplateOut"])
    types["GuestAttributesEntryIn"] = t.struct(
        {
            "namespace": t.string().optional(),
            "value": t.string().optional(),
            "key": t.string().optional(),
        }
    ).named(renames["GuestAttributesEntryIn"])
    types["GuestAttributesEntryOut"] = t.struct(
        {
            "namespace": t.string().optional(),
            "value": t.string().optional(),
            "key": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GuestAttributesEntryOut"])
    types["InstanceGroupListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupIn"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["InstanceGroupListIn"])
    types["InstanceGroupListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupOut"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupListOut"])
    types["FirewallListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["FirewallIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["FirewallListIn"])
    types["FirewallListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["FirewallOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallListOut"])
    types["DiskResourceStatusAsyncReplicationStatusIn"] = t.struct(
        {"state": t.string()}
    ).named(renames["DiskResourceStatusAsyncReplicationStatusIn"])
    types["DiskResourceStatusAsyncReplicationStatusOut"] = t.struct(
        {"state": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["DiskResourceStatusAsyncReplicationStatusOut"])
    types["OperationIn"] = t.struct(
        {
            "warnings": t.array(
                t.struct(
                    {
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                        "message": t.string().optional(),
                        "code": t.string().optional(),
                    }
                )
            ).optional(),
            "operationGroupId": t.string().optional(),
            "operationType": t.string().optional(),
            "endTime": t.string().optional(),
            "clientOperationId": t.string().optional(),
            "kind": t.string().optional(),
            "user": t.string().optional(),
            "targetLink": t.string().optional(),
            "statusMessage": t.string().optional(),
            "insertTime": t.string().optional(),
            "targetId": t.string().optional(),
            "error": t.struct(
                {
                    "errors": t.array(
                        t.struct(
                            {
                                "message": t.string().optional(),
                                "location": t.string().optional(),
                                "errorDetails": t.array(
                                    t.struct(
                                        {
                                            "errorInfo": t.proxy(
                                                renames["ErrorInfoIn"]
                                            ),
                                            "localizedMessage": t.proxy(
                                                renames["LocalizedMessageIn"]
                                            ),
                                            "help": t.proxy(renames["HelpIn"]),
                                            "quotaInfo": t.proxy(
                                                renames["QuotaExceededInfoIn"]
                                            ),
                                        }
                                    )
                                ).optional(),
                                "code": t.string().optional(),
                            }
                        )
                    ).optional()
                }
            ).optional(),
            "startTime": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "httpErrorStatusCode": t.integer().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "progress": t.integer().optional(),
            "zone": t.string().optional(),
            "httpErrorMessage": t.string().optional(),
        }
    ).named(renames["OperationIn"])
    types["OperationOut"] = t.struct(
        {
            "warnings": t.array(
                t.struct(
                    {
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                        "message": t.string().optional(),
                        "code": t.string().optional(),
                    }
                )
            ).optional(),
            "operationGroupId": t.string().optional(),
            "operationType": t.string().optional(),
            "endTime": t.string().optional(),
            "clientOperationId": t.string().optional(),
            "kind": t.string().optional(),
            "user": t.string().optional(),
            "targetLink": t.string().optional(),
            "statusMessage": t.string().optional(),
            "insertTime": t.string().optional(),
            "targetId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
            "startTime": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "httpErrorStatusCode": t.integer().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "progress": t.integer().optional(),
            "zone": t.string().optional(),
            "httpErrorMessage": t.string().optional(),
        }
    ).named(renames["OperationOut"])
    types["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionIn"] = t.struct(
        {"headerName": t.string().optional(), "headerValue": t.string().optional()}
    ).named(renames["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionIn"])
    types["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionOut"] = t.struct(
        {
            "headerName": t.string().optional(),
            "headerValue": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionOut"])
    types["TargetPoolInstanceHealthIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "healthStatus": t.array(t.proxy(renames["HealthStatusIn"])),
        }
    ).named(renames["TargetPoolInstanceHealthIn"])
    types["TargetPoolInstanceHealthOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "healthStatus": t.array(t.proxy(renames["HealthStatusOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolInstanceHealthOut"])
    types["SourceInstancePropertiesIn"] = t.struct(
        {
            "description": t.string().optional(),
            "canIpForward": t.boolean().optional(),
            "tags": t.proxy(renames["TagsIn"]).optional(),
            "machineType": t.string().optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigIn"])
            ).optional(),
            "disks": t.array(t.proxy(renames["SavedAttachedDiskIn"])).optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceIn"])
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "deletionProtection": t.boolean().optional(),
            "metadata": t.proxy(renames["MetadataIn"]).optional(),
            "keyRevocationActionType": t.string().optional(),
            "minCpuPlatform": t.string().optional(),
            "serviceAccounts": t.array(t.proxy(renames["ServiceAccountIn"])).optional(),
            "scheduling": t.proxy(renames["SchedulingIn"]).optional(),
        }
    ).named(renames["SourceInstancePropertiesIn"])
    types["SourceInstancePropertiesOut"] = t.struct(
        {
            "description": t.string().optional(),
            "canIpForward": t.boolean().optional(),
            "tags": t.proxy(renames["TagsOut"]).optional(),
            "machineType": t.string().optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "disks": t.array(t.proxy(renames["SavedAttachedDiskOut"])).optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceOut"])
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "deletionProtection": t.boolean().optional(),
            "metadata": t.proxy(renames["MetadataOut"]).optional(),
            "keyRevocationActionType": t.string().optional(),
            "minCpuPlatform": t.string().optional(),
            "serviceAccounts": t.array(
                t.proxy(renames["ServiceAccountOut"])
            ).optional(),
            "scheduling": t.proxy(renames["SchedulingOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SourceInstancePropertiesOut"])
    types["NetworkInterfaceIn"] = t.struct(
        {
            "networkAttachment": t.string().optional(),
            "ipv6AccessType": t.string().optional(),
            "network": t.string().optional(),
            "networkIP": t.string().optional(),
            "name": t.string().optional(),
            "ipv6Address": t.string().optional(),
            "ipv6AccessConfigs": t.array(t.proxy(renames["AccessConfigIn"])).optional(),
            "subnetwork": t.string().optional(),
            "queueCount": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "stackType": t.string().optional(),
            "aliasIpRanges": t.array(t.proxy(renames["AliasIpRangeIn"])).optional(),
            "kind": t.string().optional(),
            "nicType": t.string().optional(),
            "accessConfigs": t.array(t.proxy(renames["AccessConfigIn"])).optional(),
            "internalIpv6PrefixLength": t.integer().optional(),
        }
    ).named(renames["NetworkInterfaceIn"])
    types["NetworkInterfaceOut"] = t.struct(
        {
            "networkAttachment": t.string().optional(),
            "ipv6AccessType": t.string().optional(),
            "network": t.string().optional(),
            "networkIP": t.string().optional(),
            "name": t.string().optional(),
            "ipv6Address": t.string().optional(),
            "ipv6AccessConfigs": t.array(
                t.proxy(renames["AccessConfigOut"])
            ).optional(),
            "subnetwork": t.string().optional(),
            "queueCount": t.integer().optional(),
            "fingerprint": t.string().optional(),
            "stackType": t.string().optional(),
            "aliasIpRanges": t.array(t.proxy(renames["AliasIpRangeOut"])).optional(),
            "kind": t.string().optional(),
            "nicType": t.string().optional(),
            "accessConfigs": t.array(t.proxy(renames["AccessConfigOut"])).optional(),
            "internalIpv6PrefixLength": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkInterfaceOut"])
    types["RegionDisksRemoveResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["RegionDisksRemoveResourcePoliciesRequestIn"])
    types["RegionDisksRemoveResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionDisksRemoveResourcePoliciesRequestOut"])
    types["InstanceGroupManagerStatusIn"] = t.struct(
        {
            "versionTarget": t.proxy(
                renames["InstanceGroupManagerStatusVersionTargetIn"]
            ).optional(),
            "stateful": t.proxy(
                renames["InstanceGroupManagerStatusStatefulIn"]
            ).optional(),
            "isStable": t.boolean().optional(),
            "autoscaler": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerStatusIn"])
    types["InstanceGroupManagerStatusOut"] = t.struct(
        {
            "versionTarget": t.proxy(
                renames["InstanceGroupManagerStatusVersionTargetOut"]
            ).optional(),
            "stateful": t.proxy(
                renames["InstanceGroupManagerStatusStatefulOut"]
            ).optional(),
            "isStable": t.boolean().optional(),
            "autoscaler": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerStatusOut"])
    types["PathMatcherIn"] = t.struct(
        {
            "name": t.string().optional(),
            "defaultService": t.string().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
            "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
            "pathRules": t.array(t.proxy(renames["PathRuleIn"])).optional(),
            "defaultUrlRedirect": t.proxy(renames["HttpRedirectActionIn"]).optional(),
            "description": t.string().optional(),
            "routeRules": t.array(t.proxy(renames["HttpRouteRuleIn"])).optional(),
        }
    ).named(renames["PathMatcherIn"])
    types["PathMatcherOut"] = t.struct(
        {
            "name": t.string().optional(),
            "defaultService": t.string().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionOut"]).optional(),
            "defaultRouteAction": t.proxy(renames["HttpRouteActionOut"]).optional(),
            "pathRules": t.array(t.proxy(renames["PathRuleOut"])).optional(),
            "defaultUrlRedirect": t.proxy(renames["HttpRedirectActionOut"]).optional(),
            "description": t.string().optional(),
            "routeRules": t.array(t.proxy(renames["HttpRouteRuleOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PathMatcherOut"])
    types["ScreenshotIn"] = t.struct(
        {"kind": t.string().optional(), "contents": t.string().optional()}
    ).named(renames["ScreenshotIn"])
    types["ScreenshotOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "contents": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScreenshotOut"])
    types["SecurityPolicyRuleRedirectOptionsIn"] = t.struct(
        {"target": t.string().optional(), "type": t.string().optional()}
    ).named(renames["SecurityPolicyRuleRedirectOptionsIn"])
    types["SecurityPolicyRuleRedirectOptionsOut"] = t.struct(
        {
            "target": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleRedirectOptionsOut"])
    types["CommitmentListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["CommitmentIn"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["CommitmentListIn"])
    types["CommitmentListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["CommitmentOut"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommitmentListOut"])
    types["ShieldedInstanceIdentityEntryIn"] = t.struct(
        {"ekPub": t.string().optional(), "ekCert": t.string().optional()}
    ).named(renames["ShieldedInstanceIdentityEntryIn"])
    types["ShieldedInstanceIdentityEntryOut"] = t.struct(
        {
            "ekPub": t.string().optional(),
            "ekCert": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShieldedInstanceIdentityEntryOut"])
    types["ResourcePolicyInstanceSchedulePolicyIn"] = t.struct(
        {
            "expirationTime": t.string().optional(),
            "vmStopSchedule": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyScheduleIn"]
            ).optional(),
            "startTime": t.string().optional(),
            "timeZone": t.string().optional(),
            "vmStartSchedule": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyScheduleIn"]
            ).optional(),
        }
    ).named(renames["ResourcePolicyInstanceSchedulePolicyIn"])
    types["ResourcePolicyInstanceSchedulePolicyOut"] = t.struct(
        {
            "expirationTime": t.string().optional(),
            "vmStopSchedule": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyScheduleOut"]
            ).optional(),
            "startTime": t.string().optional(),
            "timeZone": t.string().optional(),
            "vmStartSchedule": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyScheduleOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyInstanceSchedulePolicyOut"])
    types["AuthorizationLoggingOptionsIn"] = t.struct(
        {"permissionType": t.string().optional()}
    ).named(renames["AuthorizationLoggingOptionsIn"])
    types["AuthorizationLoggingOptionsOut"] = t.struct(
        {
            "permissionType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AuthorizationLoggingOptionsOut"])
    types["SslCertificateManagedSslCertificateIn"] = t.struct(
        {
            "domains": t.array(t.string()).optional(),
            "status": t.string().optional(),
            "domainStatus": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["SslCertificateManagedSslCertificateIn"])
    types["SslCertificateManagedSslCertificateOut"] = t.struct(
        {
            "domains": t.array(t.string()).optional(),
            "status": t.string().optional(),
            "domainStatus": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificateManagedSslCertificateOut"])
    types["TargetGrpcProxyListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetGrpcProxyIn"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["TargetGrpcProxyListIn"])
    types["TargetGrpcProxyListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetGrpcProxyOut"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetGrpcProxyListOut"])
    types["RouterStatusNatStatusIn"] = t.struct(
        {
            "name": t.string().optional(),
            "drainUserAllocatedNatIps": t.array(t.string()).optional(),
            "drainAutoAllocatedNatIps": t.array(t.string()).optional(),
            "autoAllocatedNatIps": t.array(t.string()).optional(),
            "userAllocatedNatIpResources": t.array(t.string()).optional(),
            "minExtraNatIpsNeeded": t.integer().optional(),
            "numVmEndpointsWithNatMappings": t.integer().optional(),
            "ruleStatus": t.array(
                t.proxy(renames["RouterStatusNatStatusNatRuleStatusIn"])
            ).optional(),
            "userAllocatedNatIps": t.array(t.string()).optional(),
        }
    ).named(renames["RouterStatusNatStatusIn"])
    types["RouterStatusNatStatusOut"] = t.struct(
        {
            "name": t.string().optional(),
            "drainUserAllocatedNatIps": t.array(t.string()).optional(),
            "drainAutoAllocatedNatIps": t.array(t.string()).optional(),
            "autoAllocatedNatIps": t.array(t.string()).optional(),
            "userAllocatedNatIpResources": t.array(t.string()).optional(),
            "minExtraNatIpsNeeded": t.integer().optional(),
            "numVmEndpointsWithNatMappings": t.integer().optional(),
            "ruleStatus": t.array(
                t.proxy(renames["RouterStatusNatStatusNatRuleStatusOut"])
            ).optional(),
            "userAllocatedNatIps": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterStatusNatStatusOut"])
    types["ExternalVpnGatewayIn"] = t.struct(
        {
            "id": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "redundancyType": t.string().optional(),
            "interfaces": t.array(
                t.proxy(renames["ExternalVpnGatewayInterfaceIn"])
            ).optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["ExternalVpnGatewayIn"])
    types["ExternalVpnGatewayOut"] = t.struct(
        {
            "id": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "redundancyType": t.string().optional(),
            "interfaces": t.array(
                t.proxy(renames["ExternalVpnGatewayInterfaceOut"])
            ).optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExternalVpnGatewayOut"])
    types["ConfidentialInstanceConfigIn"] = t.struct(
        {"enableConfidentialCompute": t.boolean().optional()}
    ).named(renames["ConfidentialInstanceConfigIn"])
    types["ConfidentialInstanceConfigOut"] = t.struct(
        {
            "enableConfidentialCompute": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ConfidentialInstanceConfigOut"])
    types["InstanceTemplateAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["InstanceTemplateAggregatedListIn"])
    types["InstanceTemplateAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceTemplateAggregatedListOut"])
    types["RouterBgpIn"] = t.struct(
        {
            "advertisedGroups": t.array(t.string()).optional(),
            "keepaliveInterval": t.integer().optional(),
            "asn": t.integer().optional(),
            "advertisedIpRanges": t.array(
                t.proxy(renames["RouterAdvertisedIpRangeIn"])
            ).optional(),
            "advertiseMode": t.string().optional(),
        }
    ).named(renames["RouterBgpIn"])
    types["RouterBgpOut"] = t.struct(
        {
            "advertisedGroups": t.array(t.string()).optional(),
            "keepaliveInterval": t.integer().optional(),
            "asn": t.integer().optional(),
            "advertisedIpRanges": t.array(
                t.proxy(renames["RouterAdvertisedIpRangeOut"])
            ).optional(),
            "advertiseMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterBgpOut"])
    types["ResourcePolicyIn"] = t.struct(
        {
            "snapshotSchedulePolicy": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyIn"]
            ).optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "groupPlacementPolicy": t.proxy(
                renames["ResourcePolicyGroupPlacementPolicyIn"]
            ).optional(),
            "description": t.string(),
            "status": t.string().optional(),
            "instanceSchedulePolicy": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyIn"]
            ).optional(),
            "region": t.string(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "resourceStatus": t.proxy(
                renames["ResourcePolicyResourceStatusIn"]
            ).optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["ResourcePolicyIn"])
    types["ResourcePolicyOut"] = t.struct(
        {
            "snapshotSchedulePolicy": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyOut"]
            ).optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "groupPlacementPolicy": t.proxy(
                renames["ResourcePolicyGroupPlacementPolicyOut"]
            ).optional(),
            "description": t.string(),
            "status": t.string().optional(),
            "instanceSchedulePolicy": t.proxy(
                renames["ResourcePolicyInstanceSchedulePolicyOut"]
            ).optional(),
            "region": t.string(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "resourceStatus": t.proxy(
                renames["ResourcePolicyResourceStatusOut"]
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyOut"])
    types["HealthStatusIn"] = t.struct(
        {
            "weight": t.string(),
            "port": t.integer().optional(),
            "forwardingRule": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "forwardingRuleIp": t.string().optional(),
            "ipAddress": t.string().optional(),
            "weightError": t.string(),
            "healthState": t.string().optional(),
            "instance": t.string().optional(),
        }
    ).named(renames["HealthStatusIn"])
    types["HealthStatusOut"] = t.struct(
        {
            "weight": t.string(),
            "port": t.integer().optional(),
            "forwardingRule": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "forwardingRuleIp": t.string().optional(),
            "ipAddress": t.string().optional(),
            "weightError": t.string(),
            "healthState": t.string().optional(),
            "instance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthStatusOut"])
    types["PreservedStatePreservedDiskIn"] = t.struct(
        {
            "mode": t.string().optional(),
            "autoDelete": t.string().optional(),
            "source": t.string().optional(),
        }
    ).named(renames["PreservedStatePreservedDiskIn"])
    types["PreservedStatePreservedDiskOut"] = t.struct(
        {
            "mode": t.string().optional(),
            "autoDelete": t.string().optional(),
            "source": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PreservedStatePreservedDiskOut"])
    types["AutoscalingPolicyCustomMetricUtilizationIn"] = t.struct(
        {
            "metric": t.string().optional(),
            "utilizationTargetType": t.string().optional(),
            "singleInstanceAssignment": t.number().optional(),
            "utilizationTarget": t.number().optional(),
            "filter": t.string().optional(),
        }
    ).named(renames["AutoscalingPolicyCustomMetricUtilizationIn"])
    types["AutoscalingPolicyCustomMetricUtilizationOut"] = t.struct(
        {
            "metric": t.string().optional(),
            "utilizationTargetType": t.string().optional(),
            "singleInstanceAssignment": t.number().optional(),
            "utilizationTarget": t.number().optional(),
            "filter": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyCustomMetricUtilizationOut"])
    types["SchedulingNodeAffinityIn"] = t.struct(
        {
            "key": t.string().optional(),
            "values": t.array(t.string()).optional(),
            "operator": t.string().optional(),
        }
    ).named(renames["SchedulingNodeAffinityIn"])
    types["SchedulingNodeAffinityOut"] = t.struct(
        {
            "key": t.string().optional(),
            "values": t.array(t.string()).optional(),
            "operator": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SchedulingNodeAffinityOut"])
    types["UrlMapReferenceIn"] = t.struct({"urlMap": t.string()}).named(
        renames["UrlMapReferenceIn"]
    )
    types["UrlMapReferenceOut"] = t.struct(
        {"urlMap": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["UrlMapReferenceOut"])
    types["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusIn"] = t.struct(
        {
            "lastRunStartTime": t.string().optional(),
            "nextRunStartTime": t.string().optional(),
        }
    ).named(renames["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusIn"])
    types["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusOut"] = t.struct(
        {
            "lastRunStartTime": t.string().optional(),
            "nextRunStartTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusOut"])
    types["CacheKeyPolicyIn"] = t.struct(
        {
            "includeHttpHeaders": t.array(t.string()).optional(),
            "includeNamedCookies": t.array(t.string()).optional(),
            "queryStringWhitelist": t.array(t.string()).optional(),
            "queryStringBlacklist": t.array(t.string()).optional(),
            "includeProtocol": t.boolean().optional(),
            "includeHost": t.boolean().optional(),
            "includeQueryString": t.boolean().optional(),
        }
    ).named(renames["CacheKeyPolicyIn"])
    types["CacheKeyPolicyOut"] = t.struct(
        {
            "includeHttpHeaders": t.array(t.string()).optional(),
            "includeNamedCookies": t.array(t.string()).optional(),
            "queryStringWhitelist": t.array(t.string()).optional(),
            "queryStringBlacklist": t.array(t.string()).optional(),
            "includeProtocol": t.boolean().optional(),
            "includeHost": t.boolean().optional(),
            "includeQueryString": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CacheKeyPolicyOut"])
    types["ImageListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["ImageIn"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["ImageListIn"])
    types["ImageListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["ImageOut"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageListOut"])
    types["SubnetworksSetPrivateIpGoogleAccessRequestIn"] = t.struct(
        {"privateIpGoogleAccess": t.boolean()}
    ).named(renames["SubnetworksSetPrivateIpGoogleAccessRequestIn"])
    types["SubnetworksSetPrivateIpGoogleAccessRequestOut"] = t.struct(
        {
            "privateIpGoogleAccess": t.boolean(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworksSetPrivateIpGoogleAccessRequestOut"])
    types["PacketMirroringMirroredResourceInfoIn"] = t.struct(
        {
            "instances": t.array(
                t.proxy(renames["PacketMirroringMirroredResourceInfoInstanceInfoIn"])
            ).optional(),
            "subnetworks": t.array(
                t.proxy(renames["PacketMirroringMirroredResourceInfoSubnetInfoIn"])
            ).optional(),
            "tags": t.array(t.string()).optional(),
        }
    ).named(renames["PacketMirroringMirroredResourceInfoIn"])
    types["PacketMirroringMirroredResourceInfoOut"] = t.struct(
        {
            "instances": t.array(
                t.proxy(renames["PacketMirroringMirroredResourceInfoInstanceInfoOut"])
            ).optional(),
            "subnetworks": t.array(
                t.proxy(renames["PacketMirroringMirroredResourceInfoSubnetInfoOut"])
            ).optional(),
            "tags": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringMirroredResourceInfoOut"])
    types["InterconnectDiagnosticsLinkStatusIn"] = t.struct(
        {
            "operationalStatus": t.string().optional(),
            "circuitId": t.string().optional(),
            "receivingOpticalPower": t.proxy(
                renames["InterconnectDiagnosticsLinkOpticalPowerIn"]
            ).optional(),
            "arpCaches": t.array(
                t.proxy(renames["InterconnectDiagnosticsARPEntryIn"])
            ).optional(),
            "lacpStatus": t.proxy(renames["InterconnectDiagnosticsLinkLACPStatusIn"]),
            "googleDemarc": t.string().optional(),
            "transmittingOpticalPower": t.proxy(
                renames["InterconnectDiagnosticsLinkOpticalPowerIn"]
            ).optional(),
        }
    ).named(renames["InterconnectDiagnosticsLinkStatusIn"])
    types["InterconnectDiagnosticsLinkStatusOut"] = t.struct(
        {
            "operationalStatus": t.string().optional(),
            "circuitId": t.string().optional(),
            "receivingOpticalPower": t.proxy(
                renames["InterconnectDiagnosticsLinkOpticalPowerOut"]
            ).optional(),
            "arpCaches": t.array(
                t.proxy(renames["InterconnectDiagnosticsARPEntryOut"])
            ).optional(),
            "lacpStatus": t.proxy(renames["InterconnectDiagnosticsLinkLACPStatusOut"]),
            "googleDemarc": t.string().optional(),
            "transmittingOpticalPower": t.proxy(
                renames["InterconnectDiagnosticsLinkOpticalPowerOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectDiagnosticsLinkStatusOut"])
    types["SecurityPolicyRulePreconfiguredWafConfigExclusionIn"] = t.struct(
        {
            "requestUrisToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"
                    ]
                )
            ).optional(),
            "requestCookiesToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"
                    ]
                )
            ).optional(),
            "requestHeadersToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"
                    ]
                )
            ).optional(),
            "targetRuleIds": t.array(t.string()).optional(),
            "requestQueryParamsToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"
                    ]
                )
            ).optional(),
            "targetRuleSet": t.string().optional(),
        }
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionIn"])
    types["SecurityPolicyRulePreconfiguredWafConfigExclusionOut"] = t.struct(
        {
            "requestUrisToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"
                    ]
                )
            ).optional(),
            "requestCookiesToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"
                    ]
                )
            ).optional(),
            "requestHeadersToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"
                    ]
                )
            ).optional(),
            "targetRuleIds": t.array(t.string()).optional(),
            "requestQueryParamsToExclude": t.array(
                t.proxy(
                    renames[
                        "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"
                    ]
                )
            ).optional(),
            "targetRuleSet": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionOut"])
    types["RegionListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["RegionIn"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["RegionListIn"])
    types["RegionListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["RegionOut"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionListOut"])
    types["HttpRouteActionIn"] = t.struct(
        {
            "retryPolicy": t.proxy(renames["HttpRetryPolicyIn"]).optional(),
            "urlRewrite": t.proxy(renames["UrlRewriteIn"]).optional(),
            "weightedBackendServices": t.array(
                t.proxy(renames["WeightedBackendServiceIn"])
            ).optional(),
            "requestMirrorPolicy": t.proxy(renames["RequestMirrorPolicyIn"]).optional(),
            "faultInjectionPolicy": t.proxy(renames["HttpFaultInjectionIn"]).optional(),
            "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
            "timeout": t.proxy(renames["DurationIn"]).optional(),
            "corsPolicy": t.proxy(renames["CorsPolicyIn"]).optional(),
        }
    ).named(renames["HttpRouteActionIn"])
    types["HttpRouteActionOut"] = t.struct(
        {
            "retryPolicy": t.proxy(renames["HttpRetryPolicyOut"]).optional(),
            "urlRewrite": t.proxy(renames["UrlRewriteOut"]).optional(),
            "weightedBackendServices": t.array(
                t.proxy(renames["WeightedBackendServiceOut"])
            ).optional(),
            "requestMirrorPolicy": t.proxy(
                renames["RequestMirrorPolicyOut"]
            ).optional(),
            "faultInjectionPolicy": t.proxy(
                renames["HttpFaultInjectionOut"]
            ).optional(),
            "maxStreamDuration": t.proxy(renames["DurationOut"]).optional(),
            "timeout": t.proxy(renames["DurationOut"]).optional(),
            "corsPolicy": t.proxy(renames["CorsPolicyOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpRouteActionOut"])
    types["CorsPolicyIn"] = t.struct(
        {
            "allowMethods": t.array(t.string()).optional(),
            "exposeHeaders": t.array(t.string()).optional(),
            "allowOriginRegexes": t.array(t.string()).optional(),
            "allowHeaders": t.array(t.string()).optional(),
            "allowOrigins": t.array(t.string()).optional(),
            "maxAge": t.integer().optional(),
            "allowCredentials": t.boolean().optional(),
            "disabled": t.boolean().optional(),
        }
    ).named(renames["CorsPolicyIn"])
    types["CorsPolicyOut"] = t.struct(
        {
            "allowMethods": t.array(t.string()).optional(),
            "exposeHeaders": t.array(t.string()).optional(),
            "allowOriginRegexes": t.array(t.string()).optional(),
            "allowHeaders": t.array(t.string()).optional(),
            "allowOrigins": t.array(t.string()).optional(),
            "maxAge": t.integer().optional(),
            "allowCredentials": t.boolean().optional(),
            "disabled": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CorsPolicyOut"])
    types["BackendBucketCdnPolicyNegativeCachingPolicyIn"] = t.struct(
        {"ttl": t.integer().optional(), "code": t.integer().optional()}
    ).named(renames["BackendBucketCdnPolicyNegativeCachingPolicyIn"])
    types["BackendBucketCdnPolicyNegativeCachingPolicyOut"] = t.struct(
        {
            "ttl": t.integer().optional(),
            "code": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketCdnPolicyNegativeCachingPolicyOut"])
    types["NetworksAddPeeringRequestIn"] = t.struct(
        {
            "peerNetwork": t.string().optional(),
            "autoCreateRoutes": t.boolean().optional(),
            "networkPeering": t.proxy(renames["NetworkPeeringIn"]).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["NetworksAddPeeringRequestIn"])
    types["NetworksAddPeeringRequestOut"] = t.struct(
        {
            "peerNetwork": t.string().optional(),
            "autoCreateRoutes": t.boolean().optional(),
            "networkPeering": t.proxy(renames["NetworkPeeringOut"]).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworksAddPeeringRequestOut"])
    types["NetworkPeeringIn"] = t.struct(
        {
            "stackType": t.string().optional(),
            "exportCustomRoutes": t.boolean().optional(),
            "autoCreateRoutes": t.boolean().optional(),
            "name": t.string().optional(),
            "importSubnetRoutesWithPublicIp": t.boolean().optional(),
            "importCustomRoutes": t.boolean().optional(),
            "network": t.string().optional(),
            "exportSubnetRoutesWithPublicIp": t.boolean().optional(),
            "stateDetails": t.string().optional(),
            "peerMtu": t.integer().optional(),
            "exchangeSubnetRoutes": t.boolean().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["NetworkPeeringIn"])
    types["NetworkPeeringOut"] = t.struct(
        {
            "stackType": t.string().optional(),
            "exportCustomRoutes": t.boolean().optional(),
            "autoCreateRoutes": t.boolean().optional(),
            "name": t.string().optional(),
            "importSubnetRoutesWithPublicIp": t.boolean().optional(),
            "importCustomRoutes": t.boolean().optional(),
            "network": t.string().optional(),
            "exportSubnetRoutesWithPublicIp": t.boolean().optional(),
            "stateDetails": t.string().optional(),
            "peerMtu": t.integer().optional(),
            "exchangeSubnetRoutes": t.boolean().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkPeeringOut"])
    types["RouterStatusBgpPeerStatusIn"] = t.struct(
        {
            "peerIpv6NexthopAddress": t.string().optional(),
            "enableIpv6": t.boolean().optional(),
            "peerIpAddress": t.string().optional(),
            "bfdStatus": t.proxy(renames["BfdStatusIn"]),
            "advertisedRoutes": t.array(t.proxy(renames["RouteIn"])).optional(),
            "uptime": t.string().optional(),
            "name": t.string().optional(),
            "state": t.string().optional(),
            "status": t.string().optional(),
            "md5AuthEnabled": t.boolean().optional(),
            "statusReason": t.string().optional(),
            "ipv6NexthopAddress": t.string().optional(),
            "routerApplianceInstance": t.string().optional(),
            "uptimeSeconds": t.string().optional(),
            "numLearnedRoutes": t.integer().optional(),
            "ipAddress": t.string().optional(),
            "linkedVpnTunnel": t.string().optional(),
        }
    ).named(renames["RouterStatusBgpPeerStatusIn"])
    types["RouterStatusBgpPeerStatusOut"] = t.struct(
        {
            "peerIpv6NexthopAddress": t.string().optional(),
            "enableIpv6": t.boolean().optional(),
            "peerIpAddress": t.string().optional(),
            "bfdStatus": t.proxy(renames["BfdStatusOut"]),
            "advertisedRoutes": t.array(t.proxy(renames["RouteOut"])).optional(),
            "uptime": t.string().optional(),
            "name": t.string().optional(),
            "state": t.string().optional(),
            "status": t.string().optional(),
            "md5AuthEnabled": t.boolean().optional(),
            "statusReason": t.string().optional(),
            "ipv6NexthopAddress": t.string().optional(),
            "routerApplianceInstance": t.string().optional(),
            "uptimeSeconds": t.string().optional(),
            "numLearnedRoutes": t.integer().optional(),
            "ipAddress": t.string().optional(),
            "linkedVpnTunnel": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterStatusBgpPeerStatusOut"])
    types["VmEndpointNatMappingsListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "result": t.array(t.proxy(renames["VmEndpointNatMappingsIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["VmEndpointNatMappingsListIn"])
    types["VmEndpointNatMappingsListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "result": t.array(t.proxy(renames["VmEndpointNatMappingsOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VmEndpointNatMappingsListOut"])
    types["SecurityPolicyDdosProtectionConfigIn"] = t.struct(
        {"ddosProtection": t.string()}
    ).named(renames["SecurityPolicyDdosProtectionConfigIn"])
    types["SecurityPolicyDdosProtectionConfigOut"] = t.struct(
        {
            "ddosProtection": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyDdosProtectionConfigOut"])
    types["BulkInsertInstanceResourceIn"] = t.struct(
        {
            "namePattern": t.string().optional(),
            "count": t.string().optional(),
            "instanceProperties": t.proxy(renames["InstancePropertiesIn"]).optional(),
            "perInstanceProperties": t.struct({"_": t.string().optional()}).optional(),
            "minCount": t.string().optional(),
            "locationPolicy": t.proxy(renames["LocationPolicyIn"]).optional(),
            "sourceInstanceTemplate": t.string().optional(),
        }
    ).named(renames["BulkInsertInstanceResourceIn"])
    types["BulkInsertInstanceResourceOut"] = t.struct(
        {
            "namePattern": t.string().optional(),
            "count": t.string().optional(),
            "instanceProperties": t.proxy(renames["InstancePropertiesOut"]).optional(),
            "perInstanceProperties": t.struct({"_": t.string().optional()}).optional(),
            "minCount": t.string().optional(),
            "locationPolicy": t.proxy(renames["LocationPolicyOut"]).optional(),
            "sourceInstanceTemplate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BulkInsertInstanceResourceOut"])
    types["DiskInstantiationConfigIn"] = t.struct(
        {
            "customImage": t.string().optional(),
            "instantiateFrom": t.string().optional(),
            "deviceName": t.string().optional(),
            "autoDelete": t.boolean().optional(),
        }
    ).named(renames["DiskInstantiationConfigIn"])
    types["DiskInstantiationConfigOut"] = t.struct(
        {
            "customImage": t.string().optional(),
            "instantiateFrom": t.string().optional(),
            "deviceName": t.string().optional(),
            "autoDelete": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskInstantiationConfigOut"])
    types["SecurityPolicyRulePreconfiguredWafConfigIn"] = t.struct(
        {
            "exclusions": t.array(
                t.proxy(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionIn"])
            ).optional()
        }
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigIn"])
    types["SecurityPolicyRulePreconfiguredWafConfigOut"] = t.struct(
        {
            "exclusions": t.array(
                t.proxy(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigOut"])
    types["DisksRemoveResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["DisksRemoveResourcePoliciesRequestIn"])
    types["DisksRemoveResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DisksRemoveResourcePoliciesRequestOut"])
    types["FirewallPoliciesListAssociationsResponseIn"] = t.struct(
        {
            "associations": t.array(
                t.proxy(renames["FirewallPolicyAssociationIn"])
            ).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["FirewallPoliciesListAssociationsResponseIn"])
    types["FirewallPoliciesListAssociationsResponseOut"] = t.struct(
        {
            "associations": t.array(
                t.proxy(renames["FirewallPolicyAssociationOut"])
            ).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPoliciesListAssociationsResponseOut"])
    types["InstancesSetNameRequestIn"] = t.struct(
        {"name": t.string().optional(), "currentName": t.string().optional()}
    ).named(renames["InstancesSetNameRequestIn"])
    types["InstancesSetNameRequestOut"] = t.struct(
        {
            "name": t.string().optional(),
            "currentName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetNameRequestOut"])
    types["FirewallPolicyRuleIn"] = t.struct(
        {
            "targetServiceAccounts": t.array(t.string()).optional(),
            "action": t.string().optional(),
            "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
            "description": t.string().optional(),
            "enableLogging": t.boolean().optional(),
            "kind": t.string().optional(),
            "priority": t.integer().optional(),
            "direction": t.string().optional(),
            "disabled": t.boolean().optional(),
            "ruleName": t.string().optional(),
            "targetResources": t.array(t.string()).optional(),
            "targetSecureTags": t.array(
                t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
            ).optional(),
            "ruleTupleCount": t.integer().optional(),
        }
    ).named(renames["FirewallPolicyRuleIn"])
    types["FirewallPolicyRuleOut"] = t.struct(
        {
            "targetServiceAccounts": t.array(t.string()).optional(),
            "action": t.string().optional(),
            "match": t.proxy(renames["FirewallPolicyRuleMatcherOut"]).optional(),
            "description": t.string().optional(),
            "enableLogging": t.boolean().optional(),
            "kind": t.string().optional(),
            "priority": t.integer().optional(),
            "direction": t.string().optional(),
            "disabled": t.boolean().optional(),
            "ruleName": t.string().optional(),
            "targetResources": t.array(t.string()).optional(),
            "targetSecureTags": t.array(
                t.proxy(renames["FirewallPolicyRuleSecureTagOut"])
            ).optional(),
            "ruleTupleCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyRuleOut"])
    types["TargetGrpcProxyIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "validateForProxyless": t.boolean().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "selfLinkWithId": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "urlMap": t.string().optional(),
        }
    ).named(renames["TargetGrpcProxyIn"])
    types["TargetGrpcProxyOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "validateForProxyless": t.boolean().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "selfLinkWithId": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "urlMap": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetGrpcProxyOut"])
    types["RegionDisksResizeRequestIn"] = t.struct(
        {"sizeGb": t.string().optional()}
    ).named(renames["RegionDisksResizeRequestIn"])
    types["RegionDisksResizeRequestOut"] = t.struct(
        {
            "sizeGb": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionDisksResizeRequestOut"])
    types["SnapshotListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["SnapshotIn"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["SnapshotListIn"])
    types["SnapshotListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["SnapshotOut"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotListOut"])
    types["SslPoliciesListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SslPolicyIn"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["SslPoliciesListIn"])
    types["SslPoliciesListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SslPolicyOut"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPoliciesListOut"])
    types["NetworkListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NetworkIn"])).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["NetworkListIn"])
    types["NetworkListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NetworkOut"])).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkListOut"])
    types["SecurityPolicyRuleMatcherIn"] = t.struct(
        {
            "config": t.proxy(renames["SecurityPolicyRuleMatcherConfigIn"]).optional(),
            "versionedExpr": t.string().optional(),
            "expr": t.proxy(renames["ExprIn"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleMatcherIn"])
    types["SecurityPolicyRuleMatcherOut"] = t.struct(
        {
            "config": t.proxy(renames["SecurityPolicyRuleMatcherConfigOut"]).optional(),
            "versionedExpr": t.string().optional(),
            "expr": t.proxy(renames["ExprOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleMatcherOut"])
    types["RegionDiskTypeListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["DiskTypeIn"])).optional(),
        }
    ).named(renames["RegionDiskTypeListIn"])
    types["RegionDiskTypeListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["DiskTypeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionDiskTypeListOut"])
    types["HealthCheckServiceReferenceIn"] = t.struct(
        {"healthCheckService": t.string()}
    ).named(renames["HealthCheckServiceReferenceIn"])
    types["HealthCheckServiceReferenceOut"] = t.struct(
        {
            "healthCheckService": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckServiceReferenceOut"])
    types["ResourceGroupReferenceIn"] = t.struct(
        {"group": t.string().optional()}
    ).named(renames["ResourceGroupReferenceIn"])
    types["ResourceGroupReferenceOut"] = t.struct(
        {
            "group": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourceGroupReferenceOut"])
    types["NetworkAttachmentConnectedEndpointIn"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "subnetwork": t.string().optional(),
            "status": t.string().optional(),
            "projectIdOrNum": t.string().optional(),
            "secondaryIpCidrRanges": t.array(t.string()).optional(),
        }
    ).named(renames["NetworkAttachmentConnectedEndpointIn"])
    types["NetworkAttachmentConnectedEndpointOut"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "subnetwork": t.string().optional(),
            "status": t.string().optional(),
            "projectIdOrNum": t.string().optional(),
            "secondaryIpCidrRanges": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkAttachmentConnectedEndpointOut"])
    types["UrlMapsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "urlMaps": t.array(t.proxy(renames["UrlMapIn"])).optional(),
        }
    ).named(renames["UrlMapsScopedListIn"])
    types["UrlMapsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "urlMaps": t.array(t.proxy(renames["UrlMapOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapsScopedListOut"])
    types["BackendBucketCdnPolicyBypassCacheOnRequestHeaderIn"] = t.struct(
        {"headerName": t.string().optional()}
    ).named(renames["BackendBucketCdnPolicyBypassCacheOnRequestHeaderIn"])
    types["BackendBucketCdnPolicyBypassCacheOnRequestHeaderOut"] = t.struct(
        {
            "headerName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketCdnPolicyBypassCacheOnRequestHeaderOut"])
    types["TargetHttpsProxyAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["TargetHttpsProxyAggregatedListIn"])
    types["TargetHttpsProxyAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxyAggregatedListOut"])
    types["InitialStateConfigIn"] = t.struct(
        {
            "keks": t.array(t.proxy(renames["FileContentBufferIn"])).optional(),
            "pk": t.proxy(renames["FileContentBufferIn"]).optional(),
            "dbs": t.array(t.proxy(renames["FileContentBufferIn"])).optional(),
            "dbxs": t.array(t.proxy(renames["FileContentBufferIn"])).optional(),
        }
    ).named(renames["InitialStateConfigIn"])
    types["InitialStateConfigOut"] = t.struct(
        {
            "keks": t.array(t.proxy(renames["FileContentBufferOut"])).optional(),
            "pk": t.proxy(renames["FileContentBufferOut"]).optional(),
            "dbs": t.array(t.proxy(renames["FileContentBufferOut"])).optional(),
            "dbxs": t.array(t.proxy(renames["FileContentBufferOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InitialStateConfigOut"])
    types["RegionInstanceGroupManagersApplyUpdatesRequestIn"] = t.struct(
        {
            "allInstances": t.boolean().optional(),
            "instances": t.array(t.string()).optional(),
            "mostDisruptiveAllowedAction": t.string().optional(),
            "minimalAction": t.string().optional(),
        }
    ).named(renames["RegionInstanceGroupManagersApplyUpdatesRequestIn"])
    types["RegionInstanceGroupManagersApplyUpdatesRequestOut"] = t.struct(
        {
            "allInstances": t.boolean().optional(),
            "instances": t.array(t.string()).optional(),
            "mostDisruptiveAllowedAction": t.string().optional(),
            "minimalAction": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersApplyUpdatesRequestOut"])
    types["VpnGatewayStatusHighAvailabilityRequirementStateIn"] = t.struct(
        {"state": t.string().optional(), "unsatisfiedReason": t.string().optional()}
    ).named(renames["VpnGatewayStatusHighAvailabilityRequirementStateIn"])
    types["VpnGatewayStatusHighAvailabilityRequirementStateOut"] = t.struct(
        {
            "state": t.string().optional(),
            "unsatisfiedReason": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayStatusHighAvailabilityRequirementStateOut"])
    types["NetworkEndpointGroupsAttachEndpointsRequestIn"] = t.struct(
        {"networkEndpoints": t.array(t.proxy(renames["NetworkEndpointIn"])).optional()}
    ).named(renames["NetworkEndpointGroupsAttachEndpointsRequestIn"])
    types["NetworkEndpointGroupsAttachEndpointsRequestOut"] = t.struct(
        {
            "networkEndpoints": t.array(
                t.proxy(renames["NetworkEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupsAttachEndpointsRequestOut"])
    types["SubnetworksScopedListIn"] = t.struct(
        {
            "subnetworks": t.array(t.proxy(renames["SubnetworkIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["SubnetworksScopedListIn"])
    types["SubnetworksScopedListOut"] = t.struct(
        {
            "subnetworks": t.array(t.proxy(renames["SubnetworkOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworksScopedListOut"])
    types["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigIn"] = t.struct(
        {"contentTypes": t.array(t.string()).optional()}
    ).named(renames["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigIn"])
    types["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigOut"] = t.struct(
        {
            "contentTypes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigOut"])
    types["BackendServiceIAPIn"] = t.struct(
        {
            "enabled": t.boolean().optional(),
            "oauth2ClientSecret": t.string().optional(),
            "oauth2ClientSecretSha256": t.string().optional(),
            "oauth2ClientId": t.string().optional(),
        }
    ).named(renames["BackendServiceIAPIn"])
    types["BackendServiceIAPOut"] = t.struct(
        {
            "enabled": t.boolean().optional(),
            "oauth2ClientSecret": t.string().optional(),
            "oauth2ClientSecretSha256": t.string().optional(),
            "oauth2ClientId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceIAPOut"])
    types["SnapshotIn"] = t.struct(
        {
            "licenses": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "downloadBytes": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "sourceSnapshotSchedulePolicyId": t.string().optional(),
            "snapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "autoCreated": t.boolean().optional(),
            "storageBytesStatus": t.string().optional(),
            "sourceDiskId": t.string().optional(),
            "sourceDiskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "architecture": t.string().optional(),
            "snapshotType": t.string().optional(),
            "description": t.string().optional(),
            "chainName": t.string().optional(),
            "creationSizeBytes": t.string().optional(),
            "locationHint": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "storageBytes": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "sourceDisk": t.string().optional(),
            "diskSizeGb": t.string().optional(),
            "status": t.string().optional(),
            "sourceSnapshotSchedulePolicy": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["SnapshotIn"])
    types["SnapshotOut"] = t.struct(
        {
            "licenses": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "downloadBytes": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "sourceSnapshotSchedulePolicyId": t.string().optional(),
            "snapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "autoCreated": t.boolean().optional(),
            "storageBytesStatus": t.string().optional(),
            "sourceDiskId": t.string().optional(),
            "sourceDiskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "architecture": t.string().optional(),
            "snapshotType": t.string().optional(),
            "description": t.string().optional(),
            "chainName": t.string().optional(),
            "creationSizeBytes": t.string().optional(),
            "locationHint": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "storageBytes": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "sourceDisk": t.string().optional(),
            "diskSizeGb": t.string().optional(),
            "status": t.string().optional(),
            "sourceSnapshotSchedulePolicy": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SnapshotOut"])
    types["InstanceTemplateListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceTemplateIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["InstanceTemplateListIn"])
    types["InstanceTemplateListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceTemplateOut"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceTemplateListOut"])
    types["NetworkEndpointGroupAppEngineIn"] = t.struct(
        {
            "version": t.string().optional(),
            "urlMask": t.string().optional(),
            "service": t.string().optional(),
        }
    ).named(renames["NetworkEndpointGroupAppEngineIn"])
    types["NetworkEndpointGroupAppEngineOut"] = t.struct(
        {
            "version": t.string().optional(),
            "urlMask": t.string().optional(),
            "service": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupAppEngineOut"])
    types["RegionInstanceGroupManagersSetTemplateRequestIn"] = t.struct(
        {"instanceTemplate": t.string().optional()}
    ).named(renames["RegionInstanceGroupManagersSetTemplateRequestIn"])
    types["RegionInstanceGroupManagersSetTemplateRequestOut"] = t.struct(
        {
            "instanceTemplate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersSetTemplateRequestOut"])
    types["InstanceReferenceIn"] = t.struct({"instance": t.string().optional()}).named(
        renames["InstanceReferenceIn"]
    )
    types["InstanceReferenceOut"] = t.struct(
        {
            "instance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceReferenceOut"])
    types["InterconnectIn"] = t.struct(
        {
            "googleIpAddress": t.string().optional(),
            "expectedOutages": t.array(
                t.proxy(renames["InterconnectOutageNotificationIn"])
            ).optional(),
            "kind": t.string().optional(),
            "interconnectType": t.string().optional(),
            "id": t.string().optional(),
            "nocContactEmail": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "remoteLocation": t.string().optional(),
            "googleReferenceId": t.string().optional(),
            "state": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "operationalStatus": t.string().optional(),
            "requestedLinkCount": t.integer().optional(),
            "circuitInfos": t.array(
                t.proxy(renames["InterconnectCircuitInfoIn"])
            ).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "peerIpAddress": t.string().optional(),
            "provisionedLinkCount": t.integer().optional(),
            "location": t.string().optional(),
            "interconnectAttachments": t.array(t.string()).optional(),
            "linkType": t.string().optional(),
            "customerName": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "adminEnabled": t.boolean().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["InterconnectIn"])
    types["InterconnectOut"] = t.struct(
        {
            "googleIpAddress": t.string().optional(),
            "expectedOutages": t.array(
                t.proxy(renames["InterconnectOutageNotificationOut"])
            ).optional(),
            "kind": t.string().optional(),
            "interconnectType": t.string().optional(),
            "id": t.string().optional(),
            "nocContactEmail": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "remoteLocation": t.string().optional(),
            "googleReferenceId": t.string().optional(),
            "state": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "operationalStatus": t.string().optional(),
            "requestedLinkCount": t.integer().optional(),
            "circuitInfos": t.array(
                t.proxy(renames["InterconnectCircuitInfoOut"])
            ).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "peerIpAddress": t.string().optional(),
            "provisionedLinkCount": t.integer().optional(),
            "location": t.string().optional(),
            "interconnectAttachments": t.array(t.string()).optional(),
            "linkType": t.string().optional(),
            "customerName": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "adminEnabled": t.boolean().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectOut"])
    types["QuotaIn"] = t.struct(
        {
            "limit": t.number().optional(),
            "metric": t.string().optional(),
            "usage": t.number().optional(),
            "owner": t.string().optional(),
        }
    ).named(renames["QuotaIn"])
    types["QuotaOut"] = t.struct(
        {
            "limit": t.number().optional(),
            "metric": t.string().optional(),
            "usage": t.number().optional(),
            "owner": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QuotaOut"])
    types["RegionSetPolicyRequestIn"] = t.struct(
        {
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingIn"])).optional(),
            "policy": t.proxy(renames["PolicyIn"]).optional(),
        }
    ).named(renames["RegionSetPolicyRequestIn"])
    types["RegionSetPolicyRequestOut"] = t.struct(
        {
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingOut"])).optional(),
            "policy": t.proxy(renames["PolicyOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionSetPolicyRequestOut"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyIn"] = t.struct(
        {"name": t.string().optional(), "data": t.string().optional()}
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyIn"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "data": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyOut"])
    types["InterconnectAttachmentConfigurationConstraintsIn"] = t.struct(
        {
            "bgpMd5": t.string().optional(),
            "bgpPeerAsnRanges": t.array(
                t.proxy(
                    renames[
                        "InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["InterconnectAttachmentConfigurationConstraintsIn"])
    types["InterconnectAttachmentConfigurationConstraintsOut"] = t.struct(
        {
            "bgpMd5": t.string().optional(),
            "bgpPeerAsnRanges": t.array(
                t.proxy(
                    renames[
                        "InterconnectAttachmentConfigurationConstraintsBgpPeerASNRangeOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentConfigurationConstraintsOut"])
    types["NetworkEndpointGroupsDetachEndpointsRequestIn"] = t.struct(
        {"networkEndpoints": t.array(t.proxy(renames["NetworkEndpointIn"])).optional()}
    ).named(renames["NetworkEndpointGroupsDetachEndpointsRequestIn"])
    types["NetworkEndpointGroupsDetachEndpointsRequestOut"] = t.struct(
        {
            "networkEndpoints": t.array(
                t.proxy(renames["NetworkEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupsDetachEndpointsRequestOut"])
    types["InterconnectLocationRegionInfoIn"] = t.struct(
        {
            "region": t.string().optional(),
            "expectedRttMs": t.string().optional(),
            "locationPresence": t.string().optional(),
        }
    ).named(renames["InterconnectLocationRegionInfoIn"])
    types["InterconnectLocationRegionInfoOut"] = t.struct(
        {
            "region": t.string().optional(),
            "expectedRttMs": t.string().optional(),
            "locationPresence": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectLocationRegionInfoOut"])
    types["FirewallPolicyRuleSecureTagIn"] = t.struct(
        {"state": t.string().optional(), "name": t.string().optional()}
    ).named(renames["FirewallPolicyRuleSecureTagIn"])
    types["FirewallPolicyRuleSecureTagOut"] = t.struct(
        {
            "state": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyRuleSecureTagOut"])
    types["VpnTunnelsScopedListIn"] = t.struct(
        {
            "vpnTunnels": t.array(t.proxy(renames["VpnTunnelIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["VpnTunnelsScopedListIn"])
    types["VpnTunnelsScopedListOut"] = t.struct(
        {
            "vpnTunnels": t.array(t.proxy(renames["VpnTunnelOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnTunnelsScopedListOut"])
    types["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"] = t.struct(
        {
            "isAddress": t.boolean().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "status": t.string().optional(),
            "delegateeProject": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
    types["PublicDelegatedPrefixPublicDelegatedSubPrefixOut"] = t.struct(
        {
            "isAddress": t.boolean().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "status": t.string().optional(),
            "delegateeProject": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixOut"])
    types["LicenseResourceCommitmentIn"] = t.struct(
        {
            "coresPerLicense": t.string().optional(),
            "license": t.string().optional(),
            "amount": t.string().optional(),
        }
    ).named(renames["LicenseResourceCommitmentIn"])
    types["LicenseResourceCommitmentOut"] = t.struct(
        {
            "coresPerLicense": t.string().optional(),
            "license": t.string().optional(),
            "amount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicenseResourceCommitmentOut"])
    types["InterconnectAttachmentsScopedListIn"] = t.struct(
        {
            "interconnectAttachments": t.array(
                t.proxy(renames["InterconnectAttachmentIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["InterconnectAttachmentsScopedListIn"])
    types["InterconnectAttachmentsScopedListOut"] = t.struct(
        {
            "interconnectAttachments": t.array(
                t.proxy(renames["InterconnectAttachmentOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentsScopedListOut"])
    types["VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsIn"] = t.struct(
        {
            "ruleNumber": t.integer().optional(),
            "numTotalDrainNatPorts": t.integer().optional(),
            "drainNatIpPortRanges": t.array(t.string()).optional(),
            "natIpPortRanges": t.array(t.string()).optional(),
            "numTotalNatPorts": t.integer().optional(),
        }
    ).named(renames["VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsIn"])
    types["VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsOut"] = t.struct(
        {
            "ruleNumber": t.integer().optional(),
            "numTotalDrainNatPorts": t.integer().optional(),
            "drainNatIpPortRanges": t.array(t.string()).optional(),
            "natIpPortRanges": t.array(t.string()).optional(),
            "numTotalNatPorts": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsOut"])
    types["TargetTcpProxiesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "targetTcpProxies": t.array(
                t.proxy(renames["TargetTcpProxyIn"])
            ).optional(),
        }
    ).named(renames["TargetTcpProxiesScopedListIn"])
    types["TargetTcpProxiesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "targetTcpProxies": t.array(
                t.proxy(renames["TargetTcpProxyOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxiesScopedListOut"])
    types["TargetHttpProxiesScopedListIn"] = t.struct(
        {
            "targetHttpProxies": t.array(
                t.proxy(renames["TargetHttpProxyIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["TargetHttpProxiesScopedListIn"])
    types["TargetHttpProxiesScopedListOut"] = t.struct(
        {
            "targetHttpProxies": t.array(
                t.proxy(renames["TargetHttpProxyOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpProxiesScopedListOut"])
    types["SecurityPolicyRecaptchaOptionsConfigIn"] = t.struct(
        {"redirectSiteKey": t.string().optional()}
    ).named(renames["SecurityPolicyRecaptchaOptionsConfigIn"])
    types["SecurityPolicyRecaptchaOptionsConfigOut"] = t.struct(
        {
            "redirectSiteKey": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRecaptchaOptionsConfigOut"])
    types["AutoscalingPolicyLoadBalancingUtilizationIn"] = t.struct(
        {"utilizationTarget": t.number().optional()}
    ).named(renames["AutoscalingPolicyLoadBalancingUtilizationIn"])
    types["AutoscalingPolicyLoadBalancingUtilizationOut"] = t.struct(
        {
            "utilizationTarget": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyLoadBalancingUtilizationOut"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigPolicyIn"] = t.struct(
        {"name": t.string().optional()}
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigPolicyIn"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigPolicyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigPolicyOut"])
    types["RegionAutoscalerListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["AutoscalerIn"])).optional(),
        }
    ).named(renames["RegionAutoscalerListIn"])
    types["RegionAutoscalerListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["AutoscalerOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionAutoscalerListOut"])
    types["SecurityPoliciesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "securityPolicies": t.array(
                t.proxy(renames["SecurityPolicyIn"])
            ).optional(),
        }
    ).named(renames["SecurityPoliciesScopedListIn"])
    types["SecurityPoliciesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "securityPolicies": t.array(
                t.proxy(renames["SecurityPolicyOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPoliciesScopedListOut"])
    types["NodeGroupsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nodeGroups": t.array(t.proxy(renames["NodeGroupIn"])).optional(),
        }
    ).named(renames["NodeGroupsScopedListIn"])
    types["NodeGroupsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nodeGroups": t.array(t.proxy(renames["NodeGroupOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsScopedListOut"])
    types["InstanceConsumptionDataIn"] = t.struct(
        {
            "consumptionInfo": t.proxy(renames["InstanceConsumptionInfoIn"]).optional(),
            "instance": t.string().optional(),
        }
    ).named(renames["InstanceConsumptionDataIn"])
    types["InstanceConsumptionDataOut"] = t.struct(
        {
            "consumptionInfo": t.proxy(
                renames["InstanceConsumptionInfoOut"]
            ).optional(),
            "instance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceConsumptionDataOut"])
    types["RegionTargetHttpsProxiesSetSslCertificatesRequestIn"] = t.struct(
        {"sslCertificates": t.array(t.string()).optional()}
    ).named(renames["RegionTargetHttpsProxiesSetSslCertificatesRequestIn"])
    types["RegionTargetHttpsProxiesSetSslCertificatesRequestOut"] = t.struct(
        {
            "sslCertificates": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionTargetHttpsProxiesSetSslCertificatesRequestOut"])
    types["NotificationEndpointListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NotificationEndpointIn"])).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["NotificationEndpointListIn"])
    types["NotificationEndpointListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["NotificationEndpointOut"])).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NotificationEndpointListOut"])
    types["ServiceAttachmentListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["ServiceAttachmentIn"])).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["ServiceAttachmentListIn"])
    types["ServiceAttachmentListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["ServiceAttachmentOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentListOut"])
    types["TagsIn"] = t.struct(
        {"fingerprint": t.string().optional(), "items": t.array(t.string()).optional()}
    ).named(renames["TagsIn"])
    types["TagsOut"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "items": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TagsOut"])
    types["HealthCheckServiceIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
            "healthStatusAggregationPolicy": t.string().optional(),
            "healthChecks": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "notificationEndpoints": t.array(t.string()).optional(),
            "networkEndpointGroups": t.array(t.string()).optional(),
            "region": t.string().optional(),
        }
    ).named(renames["HealthCheckServiceIn"])
    types["HealthCheckServiceOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
            "healthStatusAggregationPolicy": t.string().optional(),
            "healthChecks": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "notificationEndpoints": t.array(t.string()).optional(),
            "networkEndpointGroups": t.array(t.string()).optional(),
            "region": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckServiceOut"])
    types["PolicyIn"] = t.struct(
        {
            "bindings": t.array(t.proxy(renames["BindingIn"])).optional(),
            "etag": t.string().optional(),
            "auditConfigs": t.array(t.proxy(renames["AuditConfigIn"])).optional(),
            "version": t.integer().optional(),
            "rules": t.array(t.proxy(renames["RuleIn"])).optional(),
        }
    ).named(renames["PolicyIn"])
    types["PolicyOut"] = t.struct(
        {
            "bindings": t.array(t.proxy(renames["BindingOut"])).optional(),
            "etag": t.string().optional(),
            "auditConfigs": t.array(t.proxy(renames["AuditConfigOut"])).optional(),
            "version": t.integer().optional(),
            "rules": t.array(t.proxy(renames["RuleOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PolicyOut"])
    types["AllocationResourceStatusSpecificSKUAllocationIn"] = t.struct(
        {"sourceInstanceTemplateId": t.string().optional()}
    ).named(renames["AllocationResourceStatusSpecificSKUAllocationIn"])
    types["AllocationResourceStatusSpecificSKUAllocationOut"] = t.struct(
        {
            "sourceInstanceTemplateId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AllocationResourceStatusSpecificSKUAllocationOut"])
    types["MachineTypeListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["MachineTypeIn"])).optional(),
        }
    ).named(renames["MachineTypeListIn"])
    types["MachineTypeListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["MachineTypeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineTypeListOut"])
    types["ExchangedPeeringRouteIn"] = t.struct(
        {
            "type": t.string().optional(),
            "priority": t.integer().optional(),
            "nextHopRegion": t.string().optional(),
            "destRange": t.string().optional(),
            "imported": t.boolean().optional(),
        }
    ).named(renames["ExchangedPeeringRouteIn"])
    types["ExchangedPeeringRouteOut"] = t.struct(
        {
            "type": t.string().optional(),
            "priority": t.integer().optional(),
            "nextHopRegion": t.string().optional(),
            "destRange": t.string().optional(),
            "imported": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExchangedPeeringRouteOut"])
    types["InstanceGroupManagersDeletePerInstanceConfigsReqIn"] = t.struct(
        {"names": t.array(t.string()).optional()}
    ).named(renames["InstanceGroupManagersDeletePerInstanceConfigsReqIn"])
    types["InstanceGroupManagersDeletePerInstanceConfigsReqOut"] = t.struct(
        {
            "names": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersDeletePerInstanceConfigsReqOut"])
    types["ZoneSetLabelsRequestIn"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["ZoneSetLabelsRequestIn"])
    types["ZoneSetLabelsRequestOut"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ZoneSetLabelsRequestOut"])
    types["HelpLinkIn"] = t.struct(
        {"url": t.string().optional(), "description": t.string().optional()}
    ).named(renames["HelpLinkIn"])
    types["HelpLinkOut"] = t.struct(
        {
            "url": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HelpLinkOut"])
    types["InstanceGroupManagerActionsSummaryIn"] = t.struct(
        {
            "stopping": t.integer().optional(),
            "verifying": t.integer().optional(),
            "suspending": t.integer().optional(),
            "refreshing": t.integer().optional(),
            "restarting": t.integer().optional(),
            "recreating": t.integer().optional(),
            "abandoning": t.integer().optional(),
            "creating": t.integer().optional(),
            "none": t.integer().optional(),
            "creatingWithoutRetries": t.integer().optional(),
            "deleting": t.integer().optional(),
            "starting": t.integer().optional(),
            "resuming": t.integer().optional(),
        }
    ).named(renames["InstanceGroupManagerActionsSummaryIn"])
    types["InstanceGroupManagerActionsSummaryOut"] = t.struct(
        {
            "stopping": t.integer().optional(),
            "verifying": t.integer().optional(),
            "suspending": t.integer().optional(),
            "refreshing": t.integer().optional(),
            "restarting": t.integer().optional(),
            "recreating": t.integer().optional(),
            "abandoning": t.integer().optional(),
            "creating": t.integer().optional(),
            "none": t.integer().optional(),
            "creatingWithoutRetries": t.integer().optional(),
            "deleting": t.integer().optional(),
            "starting": t.integer().optional(),
            "resuming": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerActionsSummaryOut"])
    types["SslCertificateListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SslCertificateIn"])).optional(),
        }
    ).named(renames["SslCertificateListIn"])
    types["SslCertificateListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["SslCertificateOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificateListOut"])
    types["TCPHealthCheckIn"] = t.struct(
        {
            "response": t.string().optional(),
            "portName": t.string().optional(),
            "portSpecification": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "port": t.integer().optional(),
            "request": t.string().optional(),
        }
    ).named(renames["TCPHealthCheckIn"])
    types["TCPHealthCheckOut"] = t.struct(
        {
            "response": t.string().optional(),
            "portName": t.string().optional(),
            "portSpecification": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "port": t.integer().optional(),
            "request": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TCPHealthCheckOut"])
    types["NetworkEndpointGroupCloudRunIn"] = t.struct(
        {
            "urlMask": t.string().optional(),
            "tag": t.string().optional(),
            "service": t.string().optional(),
        }
    ).named(renames["NetworkEndpointGroupCloudRunIn"])
    types["NetworkEndpointGroupCloudRunOut"] = t.struct(
        {
            "urlMask": t.string().optional(),
            "tag": t.string().optional(),
            "service": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupCloudRunOut"])
    types["DiskAggregatedListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["DiskAggregatedListIn"])
    types["DiskAggregatedListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskAggregatedListOut"])
    types["MachineImageIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "sourceInstanceProperties": t.proxy(
                renames["SourceInstancePropertiesIn"]
            ).optional(),
            "totalStorageBytes": t.string().optional(),
            "status": t.string().optional(),
            "selfLink": t.string().optional(),
            "instanceProperties": t.proxy(renames["InstancePropertiesIn"]).optional(),
            "machineImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "guestFlush": t.boolean().optional(),
            "description": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
            "sourceDiskEncryptionKeys": t.array(
                t.proxy(renames["SourceDiskEncryptionKeyIn"])
            ).optional(),
            "sourceInstance": t.string().optional(),
        }
    ).named(renames["MachineImageIn"])
    types["MachineImageOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "sourceInstanceProperties": t.proxy(
                renames["SourceInstancePropertiesOut"]
            ).optional(),
            "totalStorageBytes": t.string().optional(),
            "status": t.string().optional(),
            "selfLink": t.string().optional(),
            "instanceProperties": t.proxy(renames["InstancePropertiesOut"]).optional(),
            "machineImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "guestFlush": t.boolean().optional(),
            "description": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "savedDisks": t.array(t.proxy(renames["SavedDiskOut"])).optional(),
            "sourceDiskEncryptionKeys": t.array(
                t.proxy(renames["SourceDiskEncryptionKeyOut"])
            ).optional(),
            "sourceInstance": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineImageOut"])
    types["RouterNatLogConfigIn"] = t.struct(
        {"enable": t.boolean().optional(), "filter": t.string().optional()}
    ).named(renames["RouterNatLogConfigIn"])
    types["RouterNatLogConfigOut"] = t.struct(
        {
            "enable": t.boolean().optional(),
            "filter": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterNatLogConfigOut"])
    types["InstanceGroupsListInstancesIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceWithNamedPortsIn"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["InstanceGroupsListInstancesIn"])
    types["InstanceGroupsListInstancesOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceWithNamedPortsOut"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsListInstancesOut"])
    types["InstancesSetLabelsRequestIn"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}),
        }
    ).named(renames["InstancesSetLabelsRequestIn"])
    types["InstancesSetLabelsRequestOut"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetLabelsRequestOut"])
    types["AcceleratorTypeListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["AcceleratorTypeIn"])).optional(),
        }
    ).named(renames["AcceleratorTypeListIn"])
    types["AcceleratorTypeListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["AcceleratorTypeOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AcceleratorTypeListOut"])
    types["AllocationResourceStatusIn"] = t.struct(
        {
            "specificSkuAllocation": t.proxy(
                renames["AllocationResourceStatusSpecificSKUAllocationIn"]
            ).optional()
        }
    ).named(renames["AllocationResourceStatusIn"])
    types["AllocationResourceStatusOut"] = t.struct(
        {
            "specificSkuAllocation": t.proxy(
                renames["AllocationResourceStatusSpecificSKUAllocationOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AllocationResourceStatusOut"])
    types["InstanceGroupManagerVersionIn"] = t.struct(
        {
            "instanceTemplate": t.string().optional(),
            "targetSize": t.proxy(renames["FixedOrPercentIn"]).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerVersionIn"])
    types["InstanceGroupManagerVersionOut"] = t.struct(
        {
            "instanceTemplate": t.string().optional(),
            "targetSize": t.proxy(renames["FixedOrPercentOut"]).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerVersionOut"])
    types["NetworkEndpointGroupPscDataIn"] = t.struct(
        {
            "consumerPscAddress": t.string().optional(),
            "pscConnectionId": t.string().optional(),
            "pscConnectionStatus": t.string().optional(),
        }
    ).named(renames["NetworkEndpointGroupPscDataIn"])
    types["NetworkEndpointGroupPscDataOut"] = t.struct(
        {
            "consumerPscAddress": t.string().optional(),
            "pscConnectionId": t.string().optional(),
            "pscConnectionStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupPscDataOut"])
    types["RouterListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["RouterIn"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["RouterListIn"])
    types["RouterListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["RouterOut"])).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterListOut"])
    types["UrlMapsValidateResponseIn"] = t.struct(
        {"result": t.proxy(renames["UrlMapValidationResultIn"])}
    ).named(renames["UrlMapsValidateResponseIn"])
    types["UrlMapsValidateResponseOut"] = t.struct(
        {
            "result": t.proxy(renames["UrlMapValidationResultOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapsValidateResponseOut"])
    types["DiskMoveRequestIn"] = t.struct(
        {"destinationZone": t.string().optional(), "targetDisk": t.string().optional()}
    ).named(renames["DiskMoveRequestIn"])
    types["DiskMoveRequestOut"] = t.struct(
        {
            "destinationZone": t.string().optional(),
            "targetDisk": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskMoveRequestOut"])
    types["VpnGatewayListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["VpnGatewayIn"])).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["VpnGatewayListIn"])
    types["VpnGatewayListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["VpnGatewayOut"])).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayListOut"])
    types["NetworkAttachmentAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NetworkAttachmentAggregatedListIn"])
    types["NetworkAttachmentAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkAttachmentAggregatedListOut"])
    types["InstanceGroupManagerAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerAggregatedListIn"])
    types["InstanceGroupManagerAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerAggregatedListOut"])
    types["NodeTemplateAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["NodeTemplateAggregatedListIn"])
    types["NodeTemplateAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTemplateAggregatedListOut"])
    types["MachineTypeIn"] = t.struct(
        {
            "memoryMb": t.integer().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "maximumPersistentDisks": t.integer().optional(),
            "name": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "guestCpus": t.integer().optional(),
            "imageSpaceGb": t.integer().optional(),
            "isSharedCpu": t.boolean().optional(),
            "scratchDisks": t.array(
                t.struct({"diskGb": t.integer().optional()})
            ).optional(),
            "selfLink": t.string().optional(),
            "zone": t.string().optional(),
            "accelerators": t.array(
                t.struct(
                    {
                        "guestAcceleratorCount": t.integer().optional(),
                        "guestAcceleratorType": t.string().optional(),
                    }
                )
            ).optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "maximumPersistentDisksSizeGb": t.string().optional(),
        }
    ).named(renames["MachineTypeIn"])
    types["MachineTypeOut"] = t.struct(
        {
            "memoryMb": t.integer().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "maximumPersistentDisks": t.integer().optional(),
            "name": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "guestCpus": t.integer().optional(),
            "imageSpaceGb": t.integer().optional(),
            "isSharedCpu": t.boolean().optional(),
            "scratchDisks": t.array(
                t.struct({"diskGb": t.integer().optional()})
            ).optional(),
            "selfLink": t.string().optional(),
            "zone": t.string().optional(),
            "accelerators": t.array(
                t.struct(
                    {
                        "guestAcceleratorCount": t.integer().optional(),
                        "guestAcceleratorType": t.string().optional(),
                    }
                )
            ).optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "maximumPersistentDisksSizeGb": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineTypeOut"])
    types["SourceDiskEncryptionKeyIn"] = t.struct(
        {
            "sourceDisk": t.string().optional(),
            "diskEncryptionKey": t.proxy(renames["CustomerEncryptionKeyIn"]).optional(),
        }
    ).named(renames["SourceDiskEncryptionKeyIn"])
    types["SourceDiskEncryptionKeyOut"] = t.struct(
        {
            "sourceDisk": t.string().optional(),
            "diskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SourceDiskEncryptionKeyOut"])
    types["AddressAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["AddressAggregatedListIn"])
    types["AddressAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AddressAggregatedListOut"])
    types["RouterStatusResponseIn"] = t.struct(
        {"result": t.proxy(renames["RouterStatusIn"]), "kind": t.string().optional()}
    ).named(renames["RouterStatusResponseIn"])
    types["RouterStatusResponseOut"] = t.struct(
        {
            "result": t.proxy(renames["RouterStatusOut"]),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterStatusResponseOut"])
    types["SecurityPolicyRuleIn"] = t.struct(
        {
            "redirectOptions": t.proxy(
                renames["SecurityPolicyRuleRedirectOptionsIn"]
            ).optional(),
            "preconfiguredWafConfig": t.proxy(
                renames["SecurityPolicyRulePreconfiguredWafConfigIn"]
            ).optional(),
            "description": t.string().optional(),
            "priority": t.integer().optional(),
            "kind": t.string().optional(),
            "rateLimitOptions": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsIn"]
            ).optional(),
            "headerAction": t.proxy(
                renames["SecurityPolicyRuleHttpHeaderActionIn"]
            ).optional(),
            "action": t.string().optional(),
            "match": t.proxy(renames["SecurityPolicyRuleMatcherIn"]).optional(),
            "preview": t.boolean().optional(),
        }
    ).named(renames["SecurityPolicyRuleIn"])
    types["SecurityPolicyRuleOut"] = t.struct(
        {
            "redirectOptions": t.proxy(
                renames["SecurityPolicyRuleRedirectOptionsOut"]
            ).optional(),
            "preconfiguredWafConfig": t.proxy(
                renames["SecurityPolicyRulePreconfiguredWafConfigOut"]
            ).optional(),
            "description": t.string().optional(),
            "priority": t.integer().optional(),
            "kind": t.string().optional(),
            "rateLimitOptions": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsOut"]
            ).optional(),
            "headerAction": t.proxy(
                renames["SecurityPolicyRuleHttpHeaderActionOut"]
            ).optional(),
            "action": t.string().optional(),
            "match": t.proxy(renames["SecurityPolicyRuleMatcherOut"]).optional(),
            "preview": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleOut"])
    types["InstanceParamsIn"] = t.struct(
        {"resourceManagerTags": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["InstanceParamsIn"])
    types["InstanceParamsOut"] = t.struct(
        {
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceParamsOut"])
    types[
        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskIn"
    ] = t.struct(
        {"diskSizeGb": t.string().optional(), "interface": t.string().optional()}
    ).named(
        renames[
            "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskIn"
        ]
    )
    types[
        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOut"
    ] = t.struct(
        {
            "diskSizeGb": t.string().optional(),
            "interface": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOut"
        ]
    )
    types["ExchangedPeeringRoutesListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ExchangedPeeringRouteIn"])).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["ExchangedPeeringRoutesListIn"])
    types["ExchangedPeeringRoutesListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ExchangedPeeringRouteOut"])).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExchangedPeeringRoutesListOut"])
    types["ProjectsSetDefaultNetworkTierRequestIn"] = t.struct(
        {"networkTier": t.string().optional()}
    ).named(renames["ProjectsSetDefaultNetworkTierRequestIn"])
    types["ProjectsSetDefaultNetworkTierRequestOut"] = t.struct(
        {
            "networkTier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectsSetDefaultNetworkTierRequestOut"])
    types["PacketMirroringAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["PacketMirroringAggregatedListIn"])
    types["PacketMirroringAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringAggregatedListOut"])
    types["HttpRouteRuleIn"] = t.struct(
        {
            "urlRedirect": t.proxy(renames["HttpRedirectActionIn"]).optional(),
            "priority": t.integer().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
            "description": t.string().optional(),
            "service": t.string().optional(),
            "routeAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
            "matchRules": t.array(t.proxy(renames["HttpRouteRuleMatchIn"])).optional(),
        }
    ).named(renames["HttpRouteRuleIn"])
    types["HttpRouteRuleOut"] = t.struct(
        {
            "urlRedirect": t.proxy(renames["HttpRedirectActionOut"]).optional(),
            "priority": t.integer().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionOut"]).optional(),
            "description": t.string().optional(),
            "service": t.string().optional(),
            "routeAction": t.proxy(renames["HttpRouteActionOut"]).optional(),
            "matchRules": t.array(t.proxy(renames["HttpRouteRuleMatchOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpRouteRuleOut"])
    types["InterconnectLocationListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectLocationIn"])).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["InterconnectLocationListIn"])
    types["InterconnectLocationListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectLocationOut"])).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectLocationListOut"])
    types["PacketIntervalsIn"] = t.struct(
        {
            "maxMs": t.string().optional(),
            "type": t.string().optional(),
            "numIntervals": t.string().optional(),
            "minMs": t.string().optional(),
            "duration": t.string().optional(),
            "avgMs": t.string().optional(),
        }
    ).named(renames["PacketIntervalsIn"])
    types["PacketIntervalsOut"] = t.struct(
        {
            "maxMs": t.string().optional(),
            "type": t.string().optional(),
            "numIntervals": t.string().optional(),
            "minMs": t.string().optional(),
            "duration": t.string().optional(),
            "avgMs": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketIntervalsOut"])
    types["InstanceManagedByIgmErrorManagedInstanceErrorIn"] = t.struct(
        {"message": t.string().optional(), "code": t.string().optional()}
    ).named(renames["InstanceManagedByIgmErrorManagedInstanceErrorIn"])
    types["InstanceManagedByIgmErrorManagedInstanceErrorOut"] = t.struct(
        {
            "message": t.string().optional(),
            "code": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceManagedByIgmErrorManagedInstanceErrorOut"])
    types["AutoscalingPolicyScaleInControlIn"] = t.struct(
        {
            "timeWindowSec": t.integer().optional(),
            "maxScaledInReplicas": t.proxy(renames["FixedOrPercentIn"]).optional(),
        }
    ).named(renames["AutoscalingPolicyScaleInControlIn"])
    types["AutoscalingPolicyScaleInControlOut"] = t.struct(
        {
            "timeWindowSec": t.integer().optional(),
            "maxScaledInReplicas": t.proxy(renames["FixedOrPercentOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyScaleInControlOut"])
    types["InstanceTemplateIn"] = t.struct(
        {
            "description": t.string().optional(),
            "sourceInstance": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "properties": t.proxy(renames["InstancePropertiesIn"]).optional(),
            "sourceInstanceParams": t.proxy(
                renames["SourceInstanceParamsIn"]
            ).optional(),
            "region": t.string().optional(),
        }
    ).named(renames["InstanceTemplateIn"])
    types["InstanceTemplateOut"] = t.struct(
        {
            "description": t.string().optional(),
            "sourceInstance": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "properties": t.proxy(renames["InstancePropertiesOut"]).optional(),
            "sourceInstanceParams": t.proxy(
                renames["SourceInstanceParamsOut"]
            ).optional(),
            "region": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceTemplateOut"])
    types["InstancesSetMachineResourcesRequestIn"] = t.struct(
        {
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigIn"])
            ).optional()
        }
    ).named(renames["InstancesSetMachineResourcesRequestIn"])
    types["InstancesSetMachineResourcesRequestOut"] = t.struct(
        {
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetMachineResourcesRequestOut"])
    types["InstanceGroupManagersUpdatePerInstanceConfigsReqIn"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigIn"])
            ).optional()
        }
    ).named(renames["InstanceGroupManagersUpdatePerInstanceConfigsReqIn"])
    types["InstanceGroupManagersUpdatePerInstanceConfigsReqOut"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersUpdatePerInstanceConfigsReqOut"])
    types["ExternalVpnGatewayListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "etag": t.string(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["ExternalVpnGatewayIn"])).optional(),
        }
    ).named(renames["ExternalVpnGatewayListIn"])
    types["ExternalVpnGatewayListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "etag": t.string(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["ExternalVpnGatewayOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExternalVpnGatewayListOut"])
    types["LocationPolicyLocationConstraintsIn"] = t.struct(
        {"maxCount": t.integer().optional()}
    ).named(renames["LocationPolicyLocationConstraintsIn"])
    types["LocationPolicyLocationConstraintsOut"] = t.struct(
        {
            "maxCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocationPolicyLocationConstraintsOut"])
    types["RegionUrlMapsValidateRequestIn"] = t.struct(
        {"resource": t.proxy(renames["UrlMapIn"]).optional()}
    ).named(renames["RegionUrlMapsValidateRequestIn"])
    types["RegionUrlMapsValidateRequestOut"] = t.struct(
        {
            "resource": t.proxy(renames["UrlMapOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionUrlMapsValidateRequestOut"])
    types["PathRuleIn"] = t.struct(
        {
            "paths": t.array(t.string()).optional(),
            "service": t.string().optional(),
            "routeAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
            "urlRedirect": t.proxy(renames["HttpRedirectActionIn"]).optional(),
        }
    ).named(renames["PathRuleIn"])
    types["PathRuleOut"] = t.struct(
        {
            "paths": t.array(t.string()).optional(),
            "service": t.string().optional(),
            "routeAction": t.proxy(renames["HttpRouteActionOut"]).optional(),
            "urlRedirect": t.proxy(renames["HttpRedirectActionOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PathRuleOut"])
    types["TargetSslProxiesSetBackendServiceRequestIn"] = t.struct(
        {"service": t.string().optional()}
    ).named(renames["TargetSslProxiesSetBackendServiceRequestIn"])
    types["TargetSslProxiesSetBackendServiceRequestOut"] = t.struct(
        {
            "service": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxiesSetBackendServiceRequestOut"])
    types["NodeGroupListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["NodeGroupIn"])).optional(),
        }
    ).named(renames["NodeGroupListIn"])
    types["NodeGroupListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["NodeGroupOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupListOut"])
    types["InterconnectAttachmentAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["InterconnectAttachmentAggregatedListIn"])
    types["InterconnectAttachmentAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentAggregatedListOut"])
    types["NodeTypeAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["NodeTypeAggregatedListIn"])
    types["NodeTypeAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTypeAggregatedListOut"])
    types["MachineTypeAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["MachineTypeAggregatedListIn"])
    types["MachineTypeAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineTypeAggregatedListOut"])
    types["SslCertificatesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "sslCertificates": t.array(t.proxy(renames["SslCertificateIn"])).optional(),
        }
    ).named(renames["SslCertificatesScopedListIn"])
    types["SslCertificatesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "sslCertificates": t.array(
                t.proxy(renames["SslCertificateOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificatesScopedListOut"])
    types["GlobalOrganizationSetPolicyRequestIn"] = t.struct(
        {
            "policy": t.proxy(renames["PolicyIn"]).optional(),
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingIn"])).optional(),
        }
    ).named(renames["GlobalOrganizationSetPolicyRequestIn"])
    types["GlobalOrganizationSetPolicyRequestOut"] = t.struct(
        {
            "policy": t.proxy(renames["PolicyOut"]).optional(),
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalOrganizationSetPolicyRequestOut"])
    types["RegionInstanceGroupManagersRecreateRequestIn"] = t.struct(
        {"instances": t.array(t.string()).optional()}
    ).named(renames["RegionInstanceGroupManagersRecreateRequestIn"])
    types["RegionInstanceGroupManagersRecreateRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersRecreateRequestOut"])
    types["RouterBgpPeerIn"] = t.struct(
        {
            "peerIpv6NexthopAddress": t.string().optional(),
            "managementType": t.string().optional(),
            "name": t.string().optional(),
            "enable": t.string().optional(),
            "interfaceName": t.string().optional(),
            "peerIpAddress": t.string().optional(),
            "advertisedGroups": t.array(t.string()).optional(),
            "md5AuthenticationKeyName": t.string().optional(),
            "enableIpv6": t.boolean().optional(),
            "bfd": t.proxy(renames["RouterBgpPeerBfdIn"]).optional(),
            "peerAsn": t.integer().optional(),
            "advertisedRoutePriority": t.integer().optional(),
            "routerApplianceInstance": t.string().optional(),
            "advertiseMode": t.string().optional(),
            "advertisedIpRanges": t.array(
                t.proxy(renames["RouterAdvertisedIpRangeIn"])
            ).optional(),
            "ipAddress": t.string().optional(),
            "ipv6NexthopAddress": t.string().optional(),
        }
    ).named(renames["RouterBgpPeerIn"])
    types["RouterBgpPeerOut"] = t.struct(
        {
            "peerIpv6NexthopAddress": t.string().optional(),
            "managementType": t.string().optional(),
            "name": t.string().optional(),
            "enable": t.string().optional(),
            "interfaceName": t.string().optional(),
            "peerIpAddress": t.string().optional(),
            "advertisedGroups": t.array(t.string()).optional(),
            "md5AuthenticationKeyName": t.string().optional(),
            "enableIpv6": t.boolean().optional(),
            "bfd": t.proxy(renames["RouterBgpPeerBfdOut"]).optional(),
            "peerAsn": t.integer().optional(),
            "advertisedRoutePriority": t.integer().optional(),
            "routerApplianceInstance": t.string().optional(),
            "advertiseMode": t.string().optional(),
            "advertisedIpRanges": t.array(
                t.proxy(renames["RouterAdvertisedIpRangeOut"])
            ).optional(),
            "ipAddress": t.string().optional(),
            "ipv6NexthopAddress": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterBgpPeerOut"])
    types["RegionInstanceGroupManagerListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupManagerIn"])).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["RegionInstanceGroupManagerListIn"])
    types["RegionInstanceGroupManagerListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupManagerOut"])).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagerListOut"])
    types["ConsistentHashLoadBalancerSettingsHttpCookieIn"] = t.struct(
        {
            "ttl": t.proxy(renames["DurationIn"]).optional(),
            "name": t.string().optional(),
            "path": t.string().optional(),
        }
    ).named(renames["ConsistentHashLoadBalancerSettingsHttpCookieIn"])
    types["ConsistentHashLoadBalancerSettingsHttpCookieOut"] = t.struct(
        {
            "ttl": t.proxy(renames["DurationOut"]).optional(),
            "name": t.string().optional(),
            "path": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ConsistentHashLoadBalancerSettingsHttpCookieOut"])
    types["ForwardingRuleReferenceIn"] = t.struct({"forwardingRule": t.string()}).named(
        renames["ForwardingRuleReferenceIn"]
    )
    types["ForwardingRuleReferenceOut"] = t.struct(
        {
            "forwardingRule": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRuleReferenceOut"])
    types["PacketMirroringsScopedListIn"] = t.struct(
        {
            "packetMirrorings": t.array(
                t.proxy(renames["PacketMirroringIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["PacketMirroringsScopedListIn"])
    types["PacketMirroringsScopedListOut"] = t.struct(
        {
            "packetMirrorings": t.array(
                t.proxy(renames["PacketMirroringOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringsScopedListOut"])
    types["InstancesSetServiceAccountRequestIn"] = t.struct(
        {"email": t.string().optional(), "scopes": t.array(t.string()).optional()}
    ).named(renames["InstancesSetServiceAccountRequestIn"])
    types["InstancesSetServiceAccountRequestOut"] = t.struct(
        {
            "email": t.string().optional(),
            "scopes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetServiceAccountRequestOut"])
    types["InstanceGroupsListInstancesRequestIn"] = t.struct(
        {"instanceState": t.string().optional()}
    ).named(renames["InstanceGroupsListInstancesRequestIn"])
    types["InstanceGroupsListInstancesRequestOut"] = t.struct(
        {
            "instanceState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsListInstancesRequestOut"])
    types["NetworkEndpointIn"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "port": t.integer().optional(),
            "fqdn": t.string().optional(),
            "instance": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["NetworkEndpointIn"])
    types["NetworkEndpointOut"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "port": t.integer().optional(),
            "fqdn": t.string().optional(),
            "instance": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointOut"])
    types["SecuritySettingsIn"] = t.struct(
        {
            "subjectAltNames": t.array(t.string()).optional(),
            "clientTlsPolicy": t.string().optional(),
        }
    ).named(renames["SecuritySettingsIn"])
    types["SecuritySettingsOut"] = t.struct(
        {
            "subjectAltNames": t.array(t.string()).optional(),
            "clientTlsPolicy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecuritySettingsOut"])
    types["TargetVpnGatewayAggregatedListIn"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["TargetVpnGatewayAggregatedListIn"])
    types["TargetVpnGatewayAggregatedListOut"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetVpnGatewayAggregatedListOut"])
    types["CommitmentIn"] = t.struct(
        {
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "reservations": t.array(t.proxy(renames["ReservationIn"])).optional(),
            "resources": t.array(t.proxy(renames["ResourceCommitmentIn"])).optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "category": t.string().optional(),
            "licenseResource": t.proxy(
                renames["LicenseResourceCommitmentIn"]
            ).optional(),
            "autoRenew": t.boolean().optional(),
            "plan": t.string().optional(),
            "endTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "splitSourceCommitment": t.string().optional(),
            "startTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "statusMessage": t.string().optional(),
            "mergeSourceCommitments": t.array(t.string()).optional(),
            "status": t.string().optional(),
        }
    ).named(renames["CommitmentIn"])
    types["CommitmentOut"] = t.struct(
        {
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "reservations": t.array(t.proxy(renames["ReservationOut"])).optional(),
            "resources": t.array(t.proxy(renames["ResourceCommitmentOut"])).optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "category": t.string().optional(),
            "licenseResource": t.proxy(
                renames["LicenseResourceCommitmentOut"]
            ).optional(),
            "autoRenew": t.boolean().optional(),
            "plan": t.string().optional(),
            "endTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "splitSourceCommitment": t.string().optional(),
            "startTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "statusMessage": t.string().optional(),
            "mergeSourceCommitments": t.array(t.string()).optional(),
            "status": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommitmentOut"])
    types["DisksResizeRequestIn"] = t.struct({"sizeGb": t.string().optional()}).named(
        renames["DisksResizeRequestIn"]
    )
    types["DisksResizeRequestOut"] = t.struct(
        {
            "sizeGb": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DisksResizeRequestOut"])
    types["PublicDelegatedPrefixIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "fingerprint": t.string().optional(),
            "id": t.string().optional(),
            "status": t.string().optional(),
            "name": t.string().optional(),
            "parentPrefix": t.string().optional(),
            "isLiveMigration": t.boolean().optional(),
            "ipCidrRange": t.string().optional(),
            "publicDelegatedSubPrefixs": t.array(
                t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
            ).optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["PublicDelegatedPrefixIn"])
    types["PublicDelegatedPrefixOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "fingerprint": t.string().optional(),
            "id": t.string().optional(),
            "status": t.string().optional(),
            "name": t.string().optional(),
            "parentPrefix": t.string().optional(),
            "isLiveMigration": t.boolean().optional(),
            "ipCidrRange": t.string().optional(),
            "publicDelegatedSubPrefixs": t.array(
                t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixOut"])
            ).optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicDelegatedPrefixOut"])
    types["BindingIn"] = t.struct(
        {
            "role": t.string().optional(),
            "bindingId": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "condition": t.proxy(renames["ExprIn"]).optional(),
        }
    ).named(renames["BindingIn"])
    types["BindingOut"] = t.struct(
        {
            "role": t.string().optional(),
            "bindingId": t.string().optional(),
            "members": t.array(t.string()).optional(),
            "condition": t.proxy(renames["ExprOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BindingOut"])
    types["InstanceGroupManagerIn"] = t.struct(
        {
            "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
            "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
            "zone": t.string().optional(),
            "targetSize": t.integer().optional(),
            "name": t.string().optional(),
            "listManagedInstancesResults": t.string().optional(),
            "updatePolicy": t.proxy(
                renames["InstanceGroupManagerUpdatePolicyIn"]
            ).optional(),
            "targetPools": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "distributionPolicy": t.proxy(renames["DistributionPolicyIn"]).optional(),
            "versions": t.array(
                t.proxy(renames["InstanceGroupManagerVersionIn"])
            ).optional(),
            "description": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
            "region": t.string().optional(),
            "instanceGroup": t.string().optional(),
            "selfLink": t.string().optional(),
            "instanceTemplate": t.string().optional(),
            "fingerprint": t.string().optional(),
            "currentActions": t.proxy(
                renames["InstanceGroupManagerActionsSummaryIn"]
            ).optional(),
            "autoHealingPolicies": t.array(
                t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
            ).optional(),
            "baseInstanceName": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerIn"])
    types["InstanceGroupManagerOut"] = t.struct(
        {
            "status": t.proxy(renames["InstanceGroupManagerStatusOut"]).optional(),
            "statefulPolicy": t.proxy(renames["StatefulPolicyOut"]).optional(),
            "zone": t.string().optional(),
            "targetSize": t.integer().optional(),
            "name": t.string().optional(),
            "listManagedInstancesResults": t.string().optional(),
            "updatePolicy": t.proxy(
                renames["InstanceGroupManagerUpdatePolicyOut"]
            ).optional(),
            "targetPools": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "distributionPolicy": t.proxy(renames["DistributionPolicyOut"]).optional(),
            "versions": t.array(
                t.proxy(renames["InstanceGroupManagerVersionOut"])
            ).optional(),
            "description": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortOut"])).optional(),
            "region": t.string().optional(),
            "instanceGroup": t.string().optional(),
            "selfLink": t.string().optional(),
            "instanceTemplate": t.string().optional(),
            "fingerprint": t.string().optional(),
            "currentActions": t.proxy(
                renames["InstanceGroupManagerActionsSummaryOut"]
            ).optional(),
            "autoHealingPolicies": t.array(
                t.proxy(renames["InstanceGroupManagerAutoHealingPolicyOut"])
            ).optional(),
            "baseInstanceName": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerOut"])
    types["InterconnectDiagnosticsARPEntryIn"] = t.struct(
        {"ipAddress": t.string().optional(), "macAddress": t.string().optional()}
    ).named(renames["InterconnectDiagnosticsARPEntryIn"])
    types["InterconnectDiagnosticsARPEntryOut"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "macAddress": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectDiagnosticsARPEntryOut"])
    types["PacketMirroringMirroredResourceInfoInstanceInfoIn"] = t.struct(
        {"canonicalUrl": t.string().optional(), "url": t.string().optional()}
    ).named(renames["PacketMirroringMirroredResourceInfoInstanceInfoIn"])
    types["PacketMirroringMirroredResourceInfoInstanceInfoOut"] = t.struct(
        {
            "canonicalUrl": t.string().optional(),
            "url": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringMirroredResourceInfoInstanceInfoOut"])
    types["BackendServiceCdnPolicyNegativeCachingPolicyIn"] = t.struct(
        {"ttl": t.integer().optional(), "code": t.integer().optional()}
    ).named(renames["BackendServiceCdnPolicyNegativeCachingPolicyIn"])
    types["BackendServiceCdnPolicyNegativeCachingPolicyOut"] = t.struct(
        {
            "ttl": t.integer().optional(),
            "code": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceCdnPolicyNegativeCachingPolicyOut"])
    types["VpnTunnelAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["VpnTunnelAggregatedListIn"])
    types["VpnTunnelAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnTunnelAggregatedListOut"])
    types["NetworksRemovePeeringRequestIn"] = t.struct(
        {"name": t.string().optional()}
    ).named(renames["NetworksRemovePeeringRequestIn"])
    types["NetworksRemovePeeringRequestOut"] = t.struct(
        {
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworksRemovePeeringRequestOut"])
    types["ProjectIn"] = t.struct(
        {
            "vmDnsSetting": t.string().optional(),
            "description": t.string().optional(),
            "quotas": t.array(t.proxy(renames["QuotaIn"])).optional(),
            "defaultServiceAccount": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "xpnProjectStatus": t.string().optional(),
            "commonInstanceMetadata": t.proxy(renames["MetadataIn"]).optional(),
            "id": t.string().optional(),
            "enabledFeatures": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "usageExportLocation": t.proxy(renames["UsageExportLocationIn"]).optional(),
            "defaultNetworkTier": t.string().optional(),
        }
    ).named(renames["ProjectIn"])
    types["ProjectOut"] = t.struct(
        {
            "vmDnsSetting": t.string().optional(),
            "description": t.string().optional(),
            "quotas": t.array(t.proxy(renames["QuotaOut"])).optional(),
            "defaultServiceAccount": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "xpnProjectStatus": t.string().optional(),
            "commonInstanceMetadata": t.proxy(renames["MetadataOut"]).optional(),
            "id": t.string().optional(),
            "enabledFeatures": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "usageExportLocation": t.proxy(
                renames["UsageExportLocationOut"]
            ).optional(),
            "defaultNetworkTier": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectOut"])
    types["ImageFamilyViewIn"] = t.struct(
        {"image": t.proxy(renames["ImageIn"]).optional()}
    ).named(renames["ImageFamilyViewIn"])
    types["ImageFamilyViewOut"] = t.struct(
        {
            "image": t.proxy(renames["ImageOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageFamilyViewOut"])
    types["ShieldedInstanceIdentityIn"] = t.struct(
        {
            "encryptionKey": t.proxy(
                renames["ShieldedInstanceIdentityEntryIn"]
            ).optional(),
            "kind": t.string().optional(),
            "signingKey": t.proxy(
                renames["ShieldedInstanceIdentityEntryIn"]
            ).optional(),
        }
    ).named(renames["ShieldedInstanceIdentityIn"])
    types["ShieldedInstanceIdentityOut"] = t.struct(
        {
            "encryptionKey": t.proxy(
                renames["ShieldedInstanceIdentityEntryOut"]
            ).optional(),
            "kind": t.string().optional(),
            "signingKey": t.proxy(
                renames["ShieldedInstanceIdentityEntryOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShieldedInstanceIdentityOut"])
    types["ExternalVpnGatewayInterfaceIn"] = t.struct(
        {"ipAddress": t.string().optional(), "id": t.integer().optional()}
    ).named(renames["ExternalVpnGatewayInterfaceIn"])
    types["ExternalVpnGatewayInterfaceOut"] = t.struct(
        {
            "ipAddress": t.string().optional(),
            "id": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExternalVpnGatewayInterfaceOut"])
    types["XpnHostListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["ProjectIn"])).optional(),
        }
    ).named(renames["XpnHostListIn"])
    types["XpnHostListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["ProjectOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["XpnHostListOut"])
    types["NodeGroupIn"] = t.struct(
        {
            "maintenanceWindow": t.proxy(renames["NodeGroupMaintenanceWindowIn"]),
            "status": t.string(),
            "kind": t.string().optional(),
            "size": t.integer().optional(),
            "id": t.string().optional(),
            "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
            "name": t.string().optional(),
            "locationHint": t.string().optional(),
            "description": t.string().optional(),
            "autoscalingPolicy": t.proxy(
                renames["NodeGroupAutoscalingPolicyIn"]
            ).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string(),
            "nodeTemplate": t.string().optional(),
            "zone": t.string().optional(),
            "maintenancePolicy": t.string().optional(),
        }
    ).named(renames["NodeGroupIn"])
    types["NodeGroupOut"] = t.struct(
        {
            "maintenanceWindow": t.proxy(renames["NodeGroupMaintenanceWindowOut"]),
            "status": t.string(),
            "kind": t.string().optional(),
            "size": t.integer().optional(),
            "id": t.string().optional(),
            "shareSettings": t.proxy(renames["ShareSettingsOut"]).optional(),
            "name": t.string().optional(),
            "locationHint": t.string().optional(),
            "description": t.string().optional(),
            "autoscalingPolicy": t.proxy(
                renames["NodeGroupAutoscalingPolicyOut"]
            ).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string(),
            "nodeTemplate": t.string().optional(),
            "zone": t.string().optional(),
            "maintenancePolicy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupOut"])
    types["ReservationListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["ReservationIn"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["ReservationListIn"])
    types["ReservationListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["ReservationOut"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationListOut"])
    types["TargetHttpsProxiesSetQuicOverrideRequestIn"] = t.struct(
        {"quicOverride": t.string().optional()}
    ).named(renames["TargetHttpsProxiesSetQuicOverrideRequestIn"])
    types["TargetHttpsProxiesSetQuicOverrideRequestOut"] = t.struct(
        {
            "quicOverride": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxiesSetQuicOverrideRequestOut"])
    types["VpnTunnelIn"] = t.struct(
        {
            "peerExternalGatewayInterface": t.integer().optional(),
            "labelFingerprint": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "id": t.string().optional(),
            "ikeVersion": t.integer().optional(),
            "peerExternalGateway": t.string().optional(),
            "peerGcpGateway": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "router": t.string().optional(),
            "sharedSecretHash": t.string().optional(),
            "localTrafficSelector": t.array(t.string()).optional(),
            "sharedSecret": t.string().optional(),
            "vpnGatewayInterface": t.integer().optional(),
            "detailedStatus": t.string().optional(),
            "description": t.string().optional(),
            "targetVpnGateway": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "peerIp": t.string().optional(),
            "remoteTrafficSelector": t.array(t.string()).optional(),
            "vpnGateway": t.string().optional(),
        }
    ).named(renames["VpnTunnelIn"])
    types["VpnTunnelOut"] = t.struct(
        {
            "peerExternalGatewayInterface": t.integer().optional(),
            "labelFingerprint": t.string().optional(),
            "region": t.string().optional(),
            "status": t.string().optional(),
            "id": t.string().optional(),
            "ikeVersion": t.integer().optional(),
            "peerExternalGateway": t.string().optional(),
            "peerGcpGateway": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "router": t.string().optional(),
            "sharedSecretHash": t.string().optional(),
            "localTrafficSelector": t.array(t.string()).optional(),
            "sharedSecret": t.string().optional(),
            "vpnGatewayInterface": t.integer().optional(),
            "detailedStatus": t.string().optional(),
            "description": t.string().optional(),
            "targetVpnGateway": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "peerIp": t.string().optional(),
            "remoteTrafficSelector": t.array(t.string()).optional(),
            "vpnGateway": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnTunnelOut"])
    types["UrlMapIn"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string().optional(),
            "defaultService": t.string().optional(),
            "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
            "id": t.string().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
            "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "defaultUrlRedirect": t.proxy(renames["HttpRedirectActionIn"]).optional(),
            "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
        }
    ).named(renames["UrlMapIn"])
    types["UrlMapOut"] = t.struct(
        {
            "creationTimestamp": t.string().optional(),
            "fingerprint": t.string().optional(),
            "defaultService": t.string().optional(),
            "pathMatchers": t.array(t.proxy(renames["PathMatcherOut"])).optional(),
            "id": t.string().optional(),
            "headerAction": t.proxy(renames["HttpHeaderActionOut"]).optional(),
            "tests": t.array(t.proxy(renames["UrlMapTestOut"])).optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "hostRules": t.array(t.proxy(renames["HostRuleOut"])).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "defaultUrlRedirect": t.proxy(renames["HttpRedirectActionOut"]).optional(),
            "defaultRouteAction": t.proxy(renames["HttpRouteActionOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapOut"])
    types["ProjectsEnableXpnResourceRequestIn"] = t.struct(
        {"xpnResource": t.proxy(renames["XpnResourceIdIn"]).optional()}
    ).named(renames["ProjectsEnableXpnResourceRequestIn"])
    types["ProjectsEnableXpnResourceRequestOut"] = t.struct(
        {
            "xpnResource": t.proxy(renames["XpnResourceIdOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectsEnableXpnResourceRequestOut"])
    types["SecurityPoliciesAggregatedListIn"] = t.struct(
        {
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "etag": t.string(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["SecurityPoliciesAggregatedListIn"])
    types["SecurityPoliciesAggregatedListOut"] = t.struct(
        {
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "etag": t.string(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPoliciesAggregatedListOut"])
    types["InstanceGroupManagersScopedListIn"] = t.struct(
        {
            "instanceGroupManagers": t.array(
                t.proxy(renames["InstanceGroupManagerIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["InstanceGroupManagersScopedListIn"])
    types["InstanceGroupManagersScopedListOut"] = t.struct(
        {
            "instanceGroupManagers": t.array(
                t.proxy(renames["InstanceGroupManagerOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersScopedListOut"])
    types["LogConfigIn"] = t.struct(
        {
            "dataAccess": t.proxy(renames["LogConfigDataAccessOptionsIn"]).optional(),
            "cloudAudit": t.proxy(renames["LogConfigCloudAuditOptionsIn"]).optional(),
            "counter": t.proxy(renames["LogConfigCounterOptionsIn"]).optional(),
        }
    ).named(renames["LogConfigIn"])
    types["LogConfigOut"] = t.struct(
        {
            "dataAccess": t.proxy(renames["LogConfigDataAccessOptionsOut"]).optional(),
            "cloudAudit": t.proxy(renames["LogConfigCloudAuditOptionsOut"]).optional(),
            "counter": t.proxy(renames["LogConfigCounterOptionsOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogConfigOut"])
    types["InstanceGroupAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["InstanceGroupAggregatedListIn"])
    types["InstanceGroupAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupAggregatedListOut"])
    types["RoutersScopedListIn"] = t.struct(
        {
            "routers": t.array(t.proxy(renames["RouterIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["RoutersScopedListIn"])
    types["RoutersScopedListOut"] = t.struct(
        {
            "routers": t.array(t.proxy(renames["RouterOut"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RoutersScopedListOut"])
    types["RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseIn"] = t.struct(
        {
            "firewalls": t.array(t.proxy(renames["FirewallIn"])).optional(),
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseIn"])
    types["RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseOut"] = t.struct(
        {
            "firewalls": t.array(t.proxy(renames["FirewallOut"])).optional(),
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseOut"])
    types["TargetHttpsProxyListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetHttpsProxyIn"])).optional(),
        }
    ).named(renames["TargetHttpsProxyListIn"])
    types["TargetHttpsProxyListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetHttpsProxyOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxyListOut"])
    types["InterconnectListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectIn"])).optional(),
        }
    ).named(renames["InterconnectListIn"])
    types["InterconnectListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectListOut"])
    types["ManagedInstanceIn"] = t.struct(
        {
            "instance": t.string().optional(),
            "instanceStatus": t.string().optional(),
            "version": t.proxy(renames["ManagedInstanceVersionIn"]).optional(),
            "currentAction": t.string().optional(),
            "instanceHealth": t.array(
                t.proxy(renames["ManagedInstanceInstanceHealthIn"])
            ).optional(),
            "lastAttempt": t.proxy(renames["ManagedInstanceLastAttemptIn"]).optional(),
            "id": t.string().optional(),
            "preservedStateFromPolicy": t.proxy(renames["PreservedStateIn"]).optional(),
            "preservedStateFromConfig": t.proxy(renames["PreservedStateIn"]).optional(),
        }
    ).named(renames["ManagedInstanceIn"])
    types["ManagedInstanceOut"] = t.struct(
        {
            "instance": t.string().optional(),
            "instanceStatus": t.string().optional(),
            "version": t.proxy(renames["ManagedInstanceVersionOut"]).optional(),
            "currentAction": t.string().optional(),
            "instanceHealth": t.array(
                t.proxy(renames["ManagedInstanceInstanceHealthOut"])
            ).optional(),
            "lastAttempt": t.proxy(renames["ManagedInstanceLastAttemptOut"]).optional(),
            "id": t.string().optional(),
            "preservedStateFromPolicy": t.proxy(
                renames["PreservedStateOut"]
            ).optional(),
            "preservedStateFromConfig": t.proxy(
                renames["PreservedStateOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ManagedInstanceOut"])
    types["AdvancedMachineFeaturesIn"] = t.struct(
        {
            "enableNestedVirtualization": t.boolean().optional(),
            "visibleCoreCount": t.integer().optional(),
            "enableUefiNetworking": t.boolean().optional(),
            "threadsPerCore": t.integer().optional(),
        }
    ).named(renames["AdvancedMachineFeaturesIn"])
    types["AdvancedMachineFeaturesOut"] = t.struct(
        {
            "enableNestedVirtualization": t.boolean().optional(),
            "visibleCoreCount": t.integer().optional(),
            "enableUefiNetworking": t.boolean().optional(),
            "threadsPerCore": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AdvancedMachineFeaturesOut"])
    types["BackendServicesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "backendServices": t.array(t.proxy(renames["BackendServiceIn"])).optional(),
        }
    ).named(renames["BackendServicesScopedListIn"])
    types["BackendServicesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "backendServices": t.array(
                t.proxy(renames["BackendServiceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServicesScopedListOut"])
    types["HttpRouteRuleMatchIn"] = t.struct(
        {
            "queryParameterMatches": t.array(
                t.proxy(renames["HttpQueryParameterMatchIn"])
            ).optional(),
            "pathTemplateMatch": t.string().optional(),
            "metadataFilters": t.array(t.proxy(renames["MetadataFilterIn"])).optional(),
            "fullPathMatch": t.string().optional(),
            "ignoreCase": t.boolean().optional(),
            "prefixMatch": t.string().optional(),
            "headerMatches": t.array(t.proxy(renames["HttpHeaderMatchIn"])).optional(),
            "regexMatch": t.string().optional(),
        }
    ).named(renames["HttpRouteRuleMatchIn"])
    types["HttpRouteRuleMatchOut"] = t.struct(
        {
            "queryParameterMatches": t.array(
                t.proxy(renames["HttpQueryParameterMatchOut"])
            ).optional(),
            "pathTemplateMatch": t.string().optional(),
            "metadataFilters": t.array(
                t.proxy(renames["MetadataFilterOut"])
            ).optional(),
            "fullPathMatch": t.string().optional(),
            "ignoreCase": t.boolean().optional(),
            "prefixMatch": t.string().optional(),
            "headerMatches": t.array(t.proxy(renames["HttpHeaderMatchOut"])).optional(),
            "regexMatch": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpRouteRuleMatchOut"])
    types["RegionSetLabelsRequestIn"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["RegionSetLabelsRequestIn"])
    types["RegionSetLabelsRequestOut"] = t.struct(
        {
            "labelFingerprint": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionSetLabelsRequestOut"])
    types["RouterNatRuleActionIn"] = t.struct(
        {
            "sourceNatDrainIps": t.array(t.string()).optional(),
            "sourceNatActiveIps": t.array(t.string()).optional(),
        }
    ).named(renames["RouterNatRuleActionIn"])
    types["RouterNatRuleActionOut"] = t.struct(
        {
            "sourceNatDrainIps": t.array(t.string()).optional(),
            "sourceNatActiveIps": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterNatRuleActionOut"])
    types["InterconnectRemoteLocationIn"] = t.struct(
        {
            "continent": t.string().optional(),
            "attachmentConfigurationConstraints": t.proxy(
                renames["InterconnectAttachmentConfigurationConstraintsIn"]
            ).optional(),
            "constraints": t.proxy(
                renames["InterconnectRemoteLocationConstraintsIn"]
            ).optional(),
            "permittedConnections": t.array(
                t.proxy(renames["InterconnectRemoteLocationPermittedConnectionsIn"])
            ).optional(),
            "maxLagSize10Gbps": t.integer().optional(),
            "address": t.string().optional(),
            "city": t.string().optional(),
            "status": t.string().optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "maxLagSize100Gbps": t.integer().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "facilityProvider": t.string().optional(),
            "peeringdbFacilityId": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "lacp": t.string().optional(),
            "facilityProviderFacilityId": t.string().optional(),
            "remoteService": t.string().optional(),
        }
    ).named(renames["InterconnectRemoteLocationIn"])
    types["InterconnectRemoteLocationOut"] = t.struct(
        {
            "continent": t.string().optional(),
            "attachmentConfigurationConstraints": t.proxy(
                renames["InterconnectAttachmentConfigurationConstraintsOut"]
            ).optional(),
            "constraints": t.proxy(
                renames["InterconnectRemoteLocationConstraintsOut"]
            ).optional(),
            "permittedConnections": t.array(
                t.proxy(renames["InterconnectRemoteLocationPermittedConnectionsOut"])
            ).optional(),
            "maxLagSize10Gbps": t.integer().optional(),
            "address": t.string().optional(),
            "city": t.string().optional(),
            "status": t.string().optional(),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "maxLagSize100Gbps": t.integer().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "facilityProvider": t.string().optional(),
            "peeringdbFacilityId": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "lacp": t.string().optional(),
            "facilityProviderFacilityId": t.string().optional(),
            "remoteService": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectRemoteLocationOut"])
    types["SubnetworkIn"] = t.struct(
        {
            "region": t.string().optional(),
            "logConfig": t.proxy(renames["SubnetworkLogConfigIn"]).optional(),
            "id": t.string().optional(),
            "fingerprint": t.string().optional(),
            "ipv6CidrRange": t.string().optional(),
            "description": t.string().optional(),
            "secondaryIpRanges": t.array(
                t.proxy(renames["SubnetworkSecondaryRangeIn"])
            ).optional(),
            "internalIpv6Prefix": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "network": t.string().optional(),
            "privateIpGoogleAccess": t.boolean().optional(),
            "enableFlowLogs": t.boolean().optional(),
            "ipv6AccessType": t.string().optional(),
            "externalIpv6Prefix": t.string().optional(),
            "gatewayAddress": t.string().optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "stackType": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "role": t.string().optional(),
            "state": t.string().optional(),
            "purpose": t.string().optional(),
            "ipCidrRange": t.string().optional(),
        }
    ).named(renames["SubnetworkIn"])
    types["SubnetworkOut"] = t.struct(
        {
            "region": t.string().optional(),
            "logConfig": t.proxy(renames["SubnetworkLogConfigOut"]).optional(),
            "id": t.string().optional(),
            "fingerprint": t.string().optional(),
            "ipv6CidrRange": t.string().optional(),
            "description": t.string().optional(),
            "secondaryIpRanges": t.array(
                t.proxy(renames["SubnetworkSecondaryRangeOut"])
            ).optional(),
            "internalIpv6Prefix": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "network": t.string().optional(),
            "privateIpGoogleAccess": t.boolean().optional(),
            "enableFlowLogs": t.boolean().optional(),
            "ipv6AccessType": t.string().optional(),
            "externalIpv6Prefix": t.string().optional(),
            "gatewayAddress": t.string().optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "stackType": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "role": t.string().optional(),
            "state": t.string().optional(),
            "purpose": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworkOut"])
    types["VpnGatewaysGetStatusResponseIn"] = t.struct(
        {"result": t.proxy(renames["VpnGatewayStatusIn"])}
    ).named(renames["VpnGatewaysGetStatusResponseIn"])
    types["VpnGatewaysGetStatusResponseOut"] = t.struct(
        {
            "result": t.proxy(renames["VpnGatewayStatusOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewaysGetStatusResponseOut"])
    types["AddressIn"] = t.struct(
        {
            "prefixLength": t.integer().optional(),
            "networkTier": t.string().optional(),
            "description": t.string().optional(),
            "network": t.string().optional(),
            "status": t.string().optional(),
            "addressType": t.string().optional(),
            "purpose": t.string().optional(),
            "ipVersion": t.string().optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "users": t.array(t.string()).optional(),
            "labelFingerprint": t.string().optional(),
            "address": t.string().optional(),
            "subnetwork": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "ipv6EndpointType": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["AddressIn"])
    types["AddressOut"] = t.struct(
        {
            "prefixLength": t.integer().optional(),
            "networkTier": t.string().optional(),
            "description": t.string().optional(),
            "network": t.string().optional(),
            "status": t.string().optional(),
            "addressType": t.string().optional(),
            "purpose": t.string().optional(),
            "ipVersion": t.string().optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "users": t.array(t.string()).optional(),
            "labelFingerprint": t.string().optional(),
            "address": t.string().optional(),
            "subnetwork": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "ipv6EndpointType": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AddressOut"])
    types["TargetTcpProxiesSetProxyHeaderRequestIn"] = t.struct(
        {"proxyHeader": t.string().optional()}
    ).named(renames["TargetTcpProxiesSetProxyHeaderRequestIn"])
    types["TargetTcpProxiesSetProxyHeaderRequestOut"] = t.struct(
        {
            "proxyHeader": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxiesSetProxyHeaderRequestOut"])
    types["InstanceGroupManagerStatusVersionTargetIn"] = t.struct(
        {"isReached": t.boolean().optional()}
    ).named(renames["InstanceGroupManagerStatusVersionTargetIn"])
    types["InstanceGroupManagerStatusVersionTargetOut"] = t.struct(
        {
            "isReached": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerStatusVersionTargetOut"])
    types["DiskIn"] = t.struct(
        {
            "sourceSnapshotId": t.string().optional(),
            "selfLink": t.string().optional(),
            "replicaZones": t.array(t.string()).optional(),
            "asyncPrimaryDisk": t.proxy(renames["DiskAsyncReplicationIn"]).optional(),
            "name": t.string().optional(),
            "sourceConsistencyGroupPolicy": t.string().optional(),
            "sourceImage": t.string().optional(),
            "physicalBlockSizeBytes": t.string().optional(),
            "sourceConsistencyGroupPolicyId": t.string().optional(),
            "sourceDisk": t.string().optional(),
            "params": t.proxy(renames["DiskParamsIn"]).optional(),
            "provisionedThroughput": t.string().optional(),
            "resourceStatus": t.proxy(renames["DiskResourceStatusIn"]).optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "architecture": t.string().optional(),
            "zone": t.string().optional(),
            "locationHint": t.string().optional(),
            "sourceImageId": t.string().optional(),
            "region": t.string().optional(),
            "description": t.string().optional(),
            "provisionedIops": t.string().optional(),
            "sizeGb": t.string().optional(),
            "type": t.string().optional(),
            "lastDetachTimestamp": t.string().optional(),
            "sourceStorageObject": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "guestOsFeatures": t.array(t.proxy(renames["GuestOsFeatureIn"])).optional(),
            "sourceSnapshot": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "status": t.string().optional(),
            "users": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "sourceDiskId": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "diskEncryptionKey": t.proxy(renames["CustomerEncryptionKeyIn"]).optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "lastAttachTimestamp": t.string().optional(),
            "options": t.string().optional(),
            "asyncSecondaryDisks": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["DiskIn"])
    types["DiskOut"] = t.struct(
        {
            "sourceSnapshotId": t.string().optional(),
            "selfLink": t.string().optional(),
            "replicaZones": t.array(t.string()).optional(),
            "asyncPrimaryDisk": t.proxy(renames["DiskAsyncReplicationOut"]).optional(),
            "name": t.string().optional(),
            "sourceConsistencyGroupPolicy": t.string().optional(),
            "sourceImage": t.string().optional(),
            "physicalBlockSizeBytes": t.string().optional(),
            "sourceConsistencyGroupPolicyId": t.string().optional(),
            "sourceDisk": t.string().optional(),
            "params": t.proxy(renames["DiskParamsOut"]).optional(),
            "provisionedThroughput": t.string().optional(),
            "resourceStatus": t.proxy(renames["DiskResourceStatusOut"]).optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "architecture": t.string().optional(),
            "zone": t.string().optional(),
            "locationHint": t.string().optional(),
            "sourceImageId": t.string().optional(),
            "region": t.string().optional(),
            "description": t.string().optional(),
            "provisionedIops": t.string().optional(),
            "sizeGb": t.string().optional(),
            "type": t.string().optional(),
            "lastDetachTimestamp": t.string().optional(),
            "sourceStorageObject": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "guestOsFeatures": t.array(
                t.proxy(renames["GuestOsFeatureOut"])
            ).optional(),
            "sourceSnapshot": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "status": t.string().optional(),
            "users": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "sourceDiskId": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "diskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "lastAttachTimestamp": t.string().optional(),
            "options": t.string().optional(),
            "asyncSecondaryDisks": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskOut"])
    types["TargetSslProxiesSetProxyHeaderRequestIn"] = t.struct(
        {"proxyHeader": t.string().optional()}
    ).named(renames["TargetSslProxiesSetProxyHeaderRequestIn"])
    types["TargetSslProxiesSetProxyHeaderRequestOut"] = t.struct(
        {
            "proxyHeader": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxiesSetProxyHeaderRequestOut"])
    types["RegionInstanceGroupManagerUpdateInstanceConfigReqIn"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigIn"])
            ).optional()
        }
    ).named(renames["RegionInstanceGroupManagerUpdateInstanceConfigReqIn"])
    types["RegionInstanceGroupManagerUpdateInstanceConfigReqOut"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagerUpdateInstanceConfigReqOut"])
    types["RouterIn"] = t.struct(
        {
            "nats": t.array(t.proxy(renames["RouterNatIn"])).optional(),
            "id": t.string().optional(),
            "bgp": t.proxy(renames["RouterBgpIn"]).optional(),
            "interfaces": t.array(t.proxy(renames["RouterInterfaceIn"])).optional(),
            "description": t.string().optional(),
            "encryptedInterconnectRouter": t.boolean().optional(),
            "kind": t.string().optional(),
            "md5AuthenticationKeys": t.array(
                t.proxy(renames["RouterMd5AuthenticationKeyIn"])
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "region": t.string().optional(),
            "bgpPeers": t.array(t.proxy(renames["RouterBgpPeerIn"])).optional(),
            "selfLink": t.string().optional(),
            "network": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["RouterIn"])
    types["RouterOut"] = t.struct(
        {
            "nats": t.array(t.proxy(renames["RouterNatOut"])).optional(),
            "id": t.string().optional(),
            "bgp": t.proxy(renames["RouterBgpOut"]).optional(),
            "interfaces": t.array(t.proxy(renames["RouterInterfaceOut"])).optional(),
            "description": t.string().optional(),
            "encryptedInterconnectRouter": t.boolean().optional(),
            "kind": t.string().optional(),
            "md5AuthenticationKeys": t.array(
                t.proxy(renames["RouterMd5AuthenticationKeyOut"])
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "region": t.string().optional(),
            "bgpPeers": t.array(t.proxy(renames["RouterBgpPeerOut"])).optional(),
            "selfLink": t.string().optional(),
            "network": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterOut"])
    types["TargetHttpProxyAggregatedListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["TargetHttpProxyAggregatedListIn"])
    types["TargetHttpProxyAggregatedListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpProxyAggregatedListOut"])
    types["NetworkAttachmentListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["NetworkAttachmentIn"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NetworkAttachmentListIn"])
    types["NetworkAttachmentListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["NetworkAttachmentOut"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkAttachmentListOut"])
    types["UrlRewriteIn"] = t.struct(
        {
            "hostRewrite": t.string().optional(),
            "pathPrefixRewrite": t.string().optional(),
            "pathTemplateRewrite": t.string().optional(),
        }
    ).named(renames["UrlRewriteIn"])
    types["UrlRewriteOut"] = t.struct(
        {
            "hostRewrite": t.string().optional(),
            "pathPrefixRewrite": t.string().optional(),
            "pathTemplateRewrite": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlRewriteOut"])
    types["RouteIn"] = t.struct(
        {
            "name": t.string().optional(),
            "destRange": t.string().optional(),
            "warnings": t.array(
                t.struct(
                    {
                        "message": t.string().optional(),
                        "code": t.string().optional(),
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                    }
                )
            ).optional(),
            "tags": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "nextHopIp": t.string().optional(),
            "kind": t.string().optional(),
            "nextHopPeering": t.string().optional(),
            "id": t.string().optional(),
            "routeType": t.string().optional(),
            "nextHopVpnTunnel": t.string().optional(),
            "asPaths": t.array(t.proxy(renames["RouteAsPathIn"])).optional(),
            "nextHopInstance": t.string().optional(),
            "network": t.string().optional(),
            "nextHopGateway": t.string().optional(),
            "routeStatus": t.string().optional(),
            "priority": t.integer().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "nextHopNetwork": t.string().optional(),
            "nextHopIlb": t.string().optional(),
        }
    ).named(renames["RouteIn"])
    types["RouteOut"] = t.struct(
        {
            "name": t.string().optional(),
            "destRange": t.string().optional(),
            "warnings": t.array(
                t.struct(
                    {
                        "message": t.string().optional(),
                        "code": t.string().optional(),
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                    }
                )
            ).optional(),
            "tags": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "nextHopIp": t.string().optional(),
            "kind": t.string().optional(),
            "nextHopPeering": t.string().optional(),
            "id": t.string().optional(),
            "routeType": t.string().optional(),
            "nextHopVpnTunnel": t.string().optional(),
            "asPaths": t.array(t.proxy(renames["RouteAsPathOut"])).optional(),
            "nextHopInstance": t.string().optional(),
            "network": t.string().optional(),
            "nextHopGateway": t.string().optional(),
            "routeStatus": t.string().optional(),
            "priority": t.integer().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "nextHopNetwork": t.string().optional(),
            "nextHopIlb": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouteOut"])
    types["PerInstanceConfigIn"] = t.struct(
        {
            "status": t.string().optional(),
            "name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "preservedState": t.proxy(renames["PreservedStateIn"]).optional(),
        }
    ).named(renames["PerInstanceConfigIn"])
    types["PerInstanceConfigOut"] = t.struct(
        {
            "status": t.string().optional(),
            "name": t.string().optional(),
            "fingerprint": t.string().optional(),
            "preservedState": t.proxy(renames["PreservedStateOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PerInstanceConfigOut"])
    types["ServiceAttachmentIn"] = t.struct(
        {
            "name": t.string().optional(),
            "id": t.string().optional(),
            "pscServiceAttachmentId": t.proxy(renames["Uint128In"]).optional(),
            "reconcileConnections": t.boolean().optional(),
            "producerForwardingRule": t.string().optional(),
            "connectedEndpoints": t.array(
                t.proxy(renames["ServiceAttachmentConnectedEndpointIn"])
            ).optional(),
            "enableProxyProtocol": t.boolean().optional(),
            "fingerprint": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "connectionPreference": t.string().optional(),
            "domainNames": t.array(t.string()).optional(),
            "targetService": t.string().optional(),
            "consumerRejectLists": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "consumerAcceptLists": t.array(
                t.proxy(renames["ServiceAttachmentConsumerProjectLimitIn"])
            ).optional(),
            "region": t.string().optional(),
            "natSubnets": t.array(t.string()).optional(),
        }
    ).named(renames["ServiceAttachmentIn"])
    types["ServiceAttachmentOut"] = t.struct(
        {
            "name": t.string().optional(),
            "id": t.string().optional(),
            "pscServiceAttachmentId": t.proxy(renames["Uint128Out"]).optional(),
            "reconcileConnections": t.boolean().optional(),
            "producerForwardingRule": t.string().optional(),
            "connectedEndpoints": t.array(
                t.proxy(renames["ServiceAttachmentConnectedEndpointOut"])
            ).optional(),
            "enableProxyProtocol": t.boolean().optional(),
            "fingerprint": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "connectionPreference": t.string().optional(),
            "domainNames": t.array(t.string()).optional(),
            "targetService": t.string().optional(),
            "consumerRejectLists": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "consumerAcceptLists": t.array(
                t.proxy(renames["ServiceAttachmentConsumerProjectLimitOut"])
            ).optional(),
            "region": t.string().optional(),
            "natSubnets": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentOut"])
    types["ResourcePolicySnapshotSchedulePolicyScheduleIn"] = t.struct(
        {
            "weeklySchedule": t.proxy(renames["ResourcePolicyWeeklyCycleIn"]),
            "dailySchedule": t.proxy(renames["ResourcePolicyDailyCycleIn"]),
            "hourlySchedule": t.proxy(renames["ResourcePolicyHourlyCycleIn"]),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyScheduleIn"])
    types["ResourcePolicySnapshotSchedulePolicyScheduleOut"] = t.struct(
        {
            "weeklySchedule": t.proxy(renames["ResourcePolicyWeeklyCycleOut"]),
            "dailySchedule": t.proxy(renames["ResourcePolicyDailyCycleOut"]),
            "hourlySchedule": t.proxy(renames["ResourcePolicyHourlyCycleOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyScheduleOut"])
    types["TargetSslProxiesSetCertificateMapRequestIn"] = t.struct(
        {"certificateMap": t.string().optional()}
    ).named(renames["TargetSslProxiesSetCertificateMapRequestIn"])
    types["TargetSslProxiesSetCertificateMapRequestOut"] = t.struct(
        {
            "certificateMap": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxiesSetCertificateMapRequestOut"])
    types["AddressesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "addresses": t.array(t.proxy(renames["AddressIn"])).optional(),
        }
    ).named(renames["AddressesScopedListIn"])
    types["AddressesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "addresses": t.array(t.proxy(renames["AddressOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AddressesScopedListOut"])
    types["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesIn"] = t.struct(
        {
            "storageLocations": t.array(t.string()).optional(),
            "guestFlush": t.boolean().optional(),
            "chainName": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesIn"])
    types["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOut"] = t.struct(
        {
            "storageLocations": t.array(t.string()).optional(),
            "guestFlush": t.boolean().optional(),
            "chainName": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOut"])
    types["SecurityPolicyAdaptiveProtectionConfigIn"] = t.struct(
        {
            "layer7DdosDefenseConfig": t.proxy(
                renames[
                    "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigIn"
                ]
            ).optional()
        }
    ).named(renames["SecurityPolicyAdaptiveProtectionConfigIn"])
    types["SecurityPolicyAdaptiveProtectionConfigOut"] = t.struct(
        {
            "layer7DdosDefenseConfig": t.proxy(
                renames[
                    "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOut"
                ]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyAdaptiveProtectionConfigOut"])
    types["HttpHealthCheckIn"] = t.struct(
        {
            "id": t.string().optional(),
            "name": t.string().optional(),
            "host": t.string().optional(),
            "requestPath": t.string().optional(),
            "port": t.integer().optional(),
            "checkIntervalSec": t.integer().optional(),
            "timeoutSec": t.integer().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "healthyThreshold": t.integer().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["HttpHealthCheckIn"])
    types["HttpHealthCheckOut"] = t.struct(
        {
            "id": t.string().optional(),
            "name": t.string().optional(),
            "host": t.string().optional(),
            "requestPath": t.string().optional(),
            "port": t.integer().optional(),
            "checkIntervalSec": t.integer().optional(),
            "timeoutSec": t.integer().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "healthyThreshold": t.integer().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpHealthCheckOut"])
    types["InterconnectOutageNotificationIn"] = t.struct(
        {
            "description": t.string().optional(),
            "name": t.string().optional(),
            "startTime": t.string().optional(),
            "issueType": t.string().optional(),
            "state": t.string().optional(),
            "endTime": t.string().optional(),
            "source": t.string().optional(),
            "affectedCircuits": t.array(t.string()).optional(),
        }
    ).named(renames["InterconnectOutageNotificationIn"])
    types["InterconnectOutageNotificationOut"] = t.struct(
        {
            "description": t.string().optional(),
            "name": t.string().optional(),
            "startTime": t.string().optional(),
            "issueType": t.string().optional(),
            "state": t.string().optional(),
            "endTime": t.string().optional(),
            "source": t.string().optional(),
            "affectedCircuits": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectOutageNotificationOut"])
    types["InterconnectRemoteLocationPermittedConnectionsIn"] = t.struct(
        {"interconnectLocation": t.string().optional()}
    ).named(renames["InterconnectRemoteLocationPermittedConnectionsIn"])
    types["InterconnectRemoteLocationPermittedConnectionsOut"] = t.struct(
        {
            "interconnectLocation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectRemoteLocationPermittedConnectionsOut"])
    types["NotificationEndpointGrpcSettingsIn"] = t.struct(
        {
            "payloadName": t.string().optional(),
            "retryDurationSec": t.integer().optional(),
            "resendInterval": t.proxy(renames["DurationIn"]).optional(),
            "authority": t.string().optional(),
            "endpoint": t.string().optional(),
        }
    ).named(renames["NotificationEndpointGrpcSettingsIn"])
    types["NotificationEndpointGrpcSettingsOut"] = t.struct(
        {
            "payloadName": t.string().optional(),
            "retryDurationSec": t.integer().optional(),
            "resendInterval": t.proxy(renames["DurationOut"]).optional(),
            "authority": t.string().optional(),
            "endpoint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NotificationEndpointGrpcSettingsOut"])
    types["HttpsHealthCheckListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HttpsHealthCheckIn"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["HttpsHealthCheckListIn"])
    types["HttpsHealthCheckListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HttpsHealthCheckOut"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpsHealthCheckListOut"])
    types["SourceInstanceParamsIn"] = t.struct(
        {
            "diskConfigs": t.array(
                t.proxy(renames["DiskInstantiationConfigIn"])
            ).optional()
        }
    ).named(renames["SourceInstanceParamsIn"])
    types["SourceInstanceParamsOut"] = t.struct(
        {
            "diskConfigs": t.array(
                t.proxy(renames["DiskInstantiationConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SourceInstanceParamsOut"])
    types["SecurityPoliciesListPreconfiguredExpressionSetsResponseIn"] = t.struct(
        {"preconfiguredExpressionSets": t.proxy(renames["SecurityPoliciesWafConfigIn"])}
    ).named(renames["SecurityPoliciesListPreconfiguredExpressionSetsResponseIn"])
    types["SecurityPoliciesListPreconfiguredExpressionSetsResponseOut"] = t.struct(
        {
            "preconfiguredExpressionSets": t.proxy(
                renames["SecurityPoliciesWafConfigOut"]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPoliciesListPreconfiguredExpressionSetsResponseOut"])
    types["AutoscalerStatusDetailsIn"] = t.struct(
        {"message": t.string().optional(), "type": t.string().optional()}
    ).named(renames["AutoscalerStatusDetailsIn"])
    types["AutoscalerStatusDetailsOut"] = t.struct(
        {
            "message": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalerStatusDetailsOut"])
    types["ManagedInstanceVersionIn"] = t.struct(
        {"name": t.string().optional(), "instanceTemplate": t.string().optional()}
    ).named(renames["ManagedInstanceVersionIn"])
    types["ManagedInstanceVersionOut"] = t.struct(
        {
            "name": t.string().optional(),
            "instanceTemplate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ManagedInstanceVersionOut"])
    types["SslPoliciesAggregatedListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "etag": t.string(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
        }
    ).named(renames["SslPoliciesAggregatedListIn"])
    types["SslPoliciesAggregatedListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "etag": t.string(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPoliciesAggregatedListOut"])
    types["InstanceGroupsAddInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["InstanceReferenceIn"])).optional()}
    ).named(renames["InstanceGroupsAddInstancesRequestIn"])
    types["InstanceGroupsAddInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceReferenceOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsAddInstancesRequestOut"])
    types["RouterAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["RouterAggregatedListIn"])
    types["RouterAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterAggregatedListOut"])
    types["InstanceGroupManagerListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupManagerIn"])).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagerListIn"])
    types["InstanceGroupManagerListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InstanceGroupManagerOut"])).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerListOut"])
    types["NodeGroupsAddNodesRequestIn"] = t.struct(
        {"additionalNodeCount": t.integer().optional()}
    ).named(renames["NodeGroupsAddNodesRequestIn"])
    types["NodeGroupsAddNodesRequestOut"] = t.struct(
        {
            "additionalNodeCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsAddNodesRequestOut"])
    types["AuditLogConfigIn"] = t.struct(
        {
            "ignoreChildExemptions": t.boolean().optional(),
            "logType": t.string().optional(),
            "exemptedMembers": t.array(t.string()).optional(),
        }
    ).named(renames["AuditLogConfigIn"])
    types["AuditLogConfigOut"] = t.struct(
        {
            "ignoreChildExemptions": t.boolean().optional(),
            "logType": t.string().optional(),
            "exemptedMembers": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AuditLogConfigOut"])
    types["ConditionIn"] = t.struct(
        {
            "sys": t.string().optional(),
            "svc": t.string().optional(),
            "op": t.string().optional(),
            "iam": t.string().optional(),
            "values": t.array(t.string()).optional(),
        }
    ).named(renames["ConditionIn"])
    types["ConditionOut"] = t.struct(
        {
            "sys": t.string().optional(),
            "svc": t.string().optional(),
            "op": t.string().optional(),
            "iam": t.string().optional(),
            "values": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ConditionOut"])
    types["AcceleratorConfigIn"] = t.struct(
        {
            "acceleratorType": t.string().optional(),
            "acceleratorCount": t.integer().optional(),
        }
    ).named(renames["AcceleratorConfigIn"])
    types["AcceleratorConfigOut"] = t.struct(
        {
            "acceleratorType": t.string().optional(),
            "acceleratorCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AcceleratorConfigOut"])
    types["InstanceGroupManagerStatusStatefulPerInstanceConfigsIn"] = t.struct(
        {"allEffective": t.boolean().optional()}
    ).named(renames["InstanceGroupManagerStatusStatefulPerInstanceConfigsIn"])
    types["InstanceGroupManagerStatusStatefulPerInstanceConfigsOut"] = t.struct(
        {
            "allEffective": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerStatusStatefulPerInstanceConfigsOut"])
    types["ZoneIn"] = t.struct(
        {
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "supportsPzs": t.boolean().optional(),
            "status": t.string().optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "availableCpuPlatforms": t.array(t.string()).optional(),
        }
    ).named(renames["ZoneIn"])
    types["ZoneOut"] = t.struct(
        {
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "supportsPzs": t.boolean().optional(),
            "status": t.string().optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "availableCpuPlatforms": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ZoneOut"])
    types["ReservationIn"] = t.struct(
        {
            "specificReservationRequired": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
            "description": t.string().optional(),
            "status": t.string().optional(),
            "kind": t.string().optional(),
            "specificReservation": t.proxy(
                renames["AllocationSpecificSKUReservationIn"]
            ).optional(),
            "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "id": t.string().optional(),
            "commitment": t.string().optional(),
            "zone": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "resourceStatus": t.proxy(renames["AllocationResourceStatusIn"]).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["ReservationIn"])
    types["ReservationOut"] = t.struct(
        {
            "specificReservationRequired": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
            "description": t.string().optional(),
            "status": t.string().optional(),
            "kind": t.string().optional(),
            "specificReservation": t.proxy(
                renames["AllocationSpecificSKUReservationOut"]
            ).optional(),
            "shareSettings": t.proxy(renames["ShareSettingsOut"]).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "id": t.string().optional(),
            "commitment": t.string().optional(),
            "zone": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "resourceStatus": t.proxy(
                renames["AllocationResourceStatusOut"]
            ).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationOut"])
    types["BackendServiceGroupHealthIn"] = t.struct(
        {
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "healthStatus": t.array(t.proxy(renames["HealthStatusIn"])).optional(),
        }
    ).named(renames["BackendServiceGroupHealthIn"])
    types["BackendServiceGroupHealthOut"] = t.struct(
        {
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "healthStatus": t.array(t.proxy(renames["HealthStatusOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceGroupHealthOut"])
    types["FixedOrPercentIn"] = t.struct(
        {
            "calculated": t.integer().optional(),
            "fixed": t.integer().optional(),
            "percent": t.integer().optional(),
        }
    ).named(renames["FixedOrPercentIn"])
    types["FixedOrPercentOut"] = t.struct(
        {
            "calculated": t.integer().optional(),
            "fixed": t.integer().optional(),
            "percent": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FixedOrPercentOut"])
    types["PacketMirroringFilterIn"] = t.struct(
        {
            "cidrRanges": t.array(t.string()).optional(),
            "IPProtocols": t.array(t.string()).optional(),
            "direction": t.string().optional(),
        }
    ).named(renames["PacketMirroringFilterIn"])
    types["PacketMirroringFilterOut"] = t.struct(
        {
            "cidrRanges": t.array(t.string()).optional(),
            "IPProtocols": t.array(t.string()).optional(),
            "direction": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringFilterOut"])
    types["LogConfigDataAccessOptionsIn"] = t.struct(
        {"logMode": t.string().optional()}
    ).named(renames["LogConfigDataAccessOptionsIn"])
    types["LogConfigDataAccessOptionsOut"] = t.struct(
        {
            "logMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogConfigDataAccessOptionsOut"])
    types["InstanceGroupManagerStatusStatefulIn"] = t.struct(
        {
            "hasStatefulConfig": t.boolean().optional(),
            "perInstanceConfigs": t.proxy(
                renames["InstanceGroupManagerStatusStatefulPerInstanceConfigsIn"]
            ).optional(),
        }
    ).named(renames["InstanceGroupManagerStatusStatefulIn"])
    types["InstanceGroupManagerStatusStatefulOut"] = t.struct(
        {
            "hasStatefulConfig": t.boolean().optional(),
            "perInstanceConfigs": t.proxy(
                renames["InstanceGroupManagerStatusStatefulPerInstanceConfigsOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagerStatusStatefulOut"])
    types["InterconnectRemoteLocationConstraintsIn"] = t.struct(
        {
            "portPairRemoteLocation": t.string().optional(),
            "portPairVlan": t.string().optional(),
            "subnetLengthRange": t.proxy(
                renames["InterconnectRemoteLocationConstraintsSubnetLengthRangeIn"]
            ).optional(),
        }
    ).named(renames["InterconnectRemoteLocationConstraintsIn"])
    types["InterconnectRemoteLocationConstraintsOut"] = t.struct(
        {
            "portPairRemoteLocation": t.string().optional(),
            "portPairVlan": t.string().optional(),
            "subnetLengthRange": t.proxy(
                renames["InterconnectRemoteLocationConstraintsSubnetLengthRangeOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectRemoteLocationConstraintsOut"])
    types["NodeGroupsSetNodeTemplateRequestIn"] = t.struct(
        {"nodeTemplate": t.string().optional()}
    ).named(renames["NodeGroupsSetNodeTemplateRequestIn"])
    types["NodeGroupsSetNodeTemplateRequestOut"] = t.struct(
        {
            "nodeTemplate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsSetNodeTemplateRequestOut"])
    types["HttpRedirectActionIn"] = t.struct(
        {
            "redirectResponseCode": t.string().optional(),
            "prefixRedirect": t.string().optional(),
            "httpsRedirect": t.boolean().optional(),
            "stripQuery": t.boolean().optional(),
            "hostRedirect": t.string().optional(),
            "pathRedirect": t.string().optional(),
        }
    ).named(renames["HttpRedirectActionIn"])
    types["HttpRedirectActionOut"] = t.struct(
        {
            "redirectResponseCode": t.string().optional(),
            "prefixRedirect": t.string().optional(),
            "httpsRedirect": t.boolean().optional(),
            "stripQuery": t.boolean().optional(),
            "hostRedirect": t.string().optional(),
            "pathRedirect": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpRedirectActionOut"])
    types["TestFailureIn"] = t.struct(
        {
            "actualRedirectResponseCode": t.integer().optional(),
            "headers": t.array(t.proxy(renames["UrlMapTestHeaderIn"])).optional(),
            "actualService": t.string().optional(),
            "expectedService": t.string().optional(),
            "actualOutputUrl": t.string().optional(),
            "expectedRedirectResponseCode": t.integer().optional(),
            "path": t.string().optional(),
            "host": t.string().optional(),
            "expectedOutputUrl": t.string().optional(),
        }
    ).named(renames["TestFailureIn"])
    types["TestFailureOut"] = t.struct(
        {
            "actualRedirectResponseCode": t.integer().optional(),
            "headers": t.array(t.proxy(renames["UrlMapTestHeaderOut"])).optional(),
            "actualService": t.string().optional(),
            "expectedService": t.string().optional(),
            "actualOutputUrl": t.string().optional(),
            "expectedRedirectResponseCode": t.integer().optional(),
            "path": t.string().optional(),
            "host": t.string().optional(),
            "expectedOutputUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TestFailureOut"])
    types["VpnGatewaysScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "vpnGateways": t.array(t.proxy(renames["VpnGatewayIn"])).optional(),
        }
    ).named(renames["VpnGatewaysScopedListIn"])
    types["VpnGatewaysScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "vpnGateways": t.array(t.proxy(renames["VpnGatewayOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewaysScopedListOut"])
    types["QuotaExceededInfoIn"] = t.struct(
        {
            "limit": t.number().optional(),
            "dimensions": t.struct({"_": t.string().optional()}).optional(),
            "metricName": t.string().optional(),
            "limitName": t.string().optional(),
        }
    ).named(renames["QuotaExceededInfoIn"])
    types["QuotaExceededInfoOut"] = t.struct(
        {
            "limit": t.number().optional(),
            "dimensions": t.struct({"_": t.string().optional()}).optional(),
            "metricName": t.string().optional(),
            "limitName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["QuotaExceededInfoOut"])
    types["SecurityPolicyReferenceIn"] = t.struct({"securityPolicy": t.string()}).named(
        renames["SecurityPolicyReferenceIn"]
    )
    types["SecurityPolicyReferenceOut"] = t.struct(
        {
            "securityPolicy": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyReferenceOut"])
    types["RegionInstanceGroupManagersCreateInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["PerInstanceConfigIn"])).optional()}
    ).named(renames["RegionInstanceGroupManagersCreateInstancesRequestIn"])
    types["RegionInstanceGroupManagersCreateInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["PerInstanceConfigOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersCreateInstancesRequestOut"])
    types["LocalDiskIn"] = t.struct(
        {
            "diskCount": t.integer().optional(),
            "diskSizeGb": t.integer().optional(),
            "diskType": t.string().optional(),
        }
    ).named(renames["LocalDiskIn"])
    types["LocalDiskOut"] = t.struct(
        {
            "diskCount": t.integer().optional(),
            "diskSizeGb": t.integer().optional(),
            "diskType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalDiskOut"])
    types["NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"] = t.struct(
        {
            "shortName": t.string().optional(),
            "type": t.string().optional(),
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleIn"])).optional(),
        }
    ).named(renames["NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"])
    types["NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"] = t.struct(
        {
            "shortName": t.string().optional(),
            "type": t.string().optional(),
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"])
    types["ConsistentHashLoadBalancerSettingsIn"] = t.struct(
        {
            "minimumRingSize": t.string().optional(),
            "httpHeaderName": t.string().optional(),
            "httpCookie": t.proxy(
                renames["ConsistentHashLoadBalancerSettingsHttpCookieIn"]
            ).optional(),
        }
    ).named(renames["ConsistentHashLoadBalancerSettingsIn"])
    types["ConsistentHashLoadBalancerSettingsOut"] = t.struct(
        {
            "minimumRingSize": t.string().optional(),
            "httpHeaderName": t.string().optional(),
            "httpCookie": t.proxy(
                renames["ConsistentHashLoadBalancerSettingsHttpCookieOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ConsistentHashLoadBalancerSettingsOut"])
    types["SecurityPolicyRuleHttpHeaderActionIn"] = t.struct(
        {
            "requestHeadersToAdds": t.array(
                t.proxy(renames["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionIn"])
            ).optional()
        }
    ).named(renames["SecurityPolicyRuleHttpHeaderActionIn"])
    types["SecurityPolicyRuleHttpHeaderActionOut"] = t.struct(
        {
            "requestHeadersToAdds": t.array(
                t.proxy(
                    renames["SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionOut"]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleHttpHeaderActionOut"])
    types["LicenseResourceRequirementsIn"] = t.struct(
        {
            "minMemoryMb": t.integer().optional(),
            "minGuestCpuCount": t.integer().optional(),
        }
    ).named(renames["LicenseResourceRequirementsIn"])
    types["LicenseResourceRequirementsOut"] = t.struct(
        {
            "minMemoryMb": t.integer().optional(),
            "minGuestCpuCount": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicenseResourceRequirementsOut"])
    types["HealthCheckLogConfigIn"] = t.struct(
        {"enable": t.boolean().optional()}
    ).named(renames["HealthCheckLogConfigIn"])
    types["HealthCheckLogConfigOut"] = t.struct(
        {
            "enable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckLogConfigOut"])
    types["WafExpressionSetExpressionIn"] = t.struct(
        {"sensitivity": t.integer().optional(), "id": t.string().optional()}
    ).named(renames["WafExpressionSetExpressionIn"])
    types["WafExpressionSetExpressionOut"] = t.struct(
        {
            "sensitivity": t.integer().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WafExpressionSetExpressionOut"])
    types["HealthStatusForNetworkEndpointIn"] = t.struct(
        {
            "healthState": t.string().optional(),
            "backendService": t.proxy(renames["BackendServiceReferenceIn"]).optional(),
            "healthCheck": t.proxy(renames["HealthCheckReferenceIn"]).optional(),
            "forwardingRule": t.proxy(renames["ForwardingRuleReferenceIn"]).optional(),
            "healthCheckService": t.proxy(
                renames["HealthCheckServiceReferenceIn"]
            ).optional(),
        }
    ).named(renames["HealthStatusForNetworkEndpointIn"])
    types["HealthStatusForNetworkEndpointOut"] = t.struct(
        {
            "healthState": t.string().optional(),
            "backendService": t.proxy(renames["BackendServiceReferenceOut"]).optional(),
            "healthCheck": t.proxy(renames["HealthCheckReferenceOut"]).optional(),
            "forwardingRule": t.proxy(renames["ForwardingRuleReferenceOut"]).optional(),
            "healthCheckService": t.proxy(
                renames["HealthCheckServiceReferenceOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthStatusForNetworkEndpointOut"])
    types["NetworkIn"] = t.struct(
        {
            "IPv4Range": t.string().optional(),
            "enableUlaInternalIpv6": t.boolean().optional(),
            "creationTimestamp": t.string().optional(),
            "peerings": t.array(t.proxy(renames["NetworkPeeringIn"])).optional(),
            "description": t.string().optional(),
            "subnetworks": t.array(t.string()).optional(),
            "networkFirewallPolicyEnforcementOrder": t.string().optional(),
            "gatewayIPv4": t.string().optional(),
            "mtu": t.integer().optional(),
            "firewallPolicy": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "routingConfig": t.proxy(renames["NetworkRoutingConfigIn"]).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "internalIpv6Range": t.string().optional(),
            "autoCreateSubnetworks": t.boolean().optional(),
            "selfLinkWithId": t.string().optional(),
        }
    ).named(renames["NetworkIn"])
    types["NetworkOut"] = t.struct(
        {
            "IPv4Range": t.string().optional(),
            "enableUlaInternalIpv6": t.boolean().optional(),
            "creationTimestamp": t.string().optional(),
            "peerings": t.array(t.proxy(renames["NetworkPeeringOut"])).optional(),
            "description": t.string().optional(),
            "subnetworks": t.array(t.string()).optional(),
            "networkFirewallPolicyEnforcementOrder": t.string().optional(),
            "gatewayIPv4": t.string().optional(),
            "mtu": t.integer().optional(),
            "firewallPolicy": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "routingConfig": t.proxy(renames["NetworkRoutingConfigOut"]).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "internalIpv6Range": t.string().optional(),
            "autoCreateSubnetworks": t.boolean().optional(),
            "selfLinkWithId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkOut"])
    types["DiskResourceStatusIn"] = t.struct(
        {
            "asyncPrimaryDisk": t.proxy(
                renames["DiskResourceStatusAsyncReplicationStatusIn"]
            ),
            "asyncSecondaryDisks": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["DiskResourceStatusIn"])
    types["DiskResourceStatusOut"] = t.struct(
        {
            "asyncPrimaryDisk": t.proxy(
                renames["DiskResourceStatusAsyncReplicationStatusOut"]
            ),
            "asyncSecondaryDisks": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskResourceStatusOut"])
    types["RoutersPreviewResponseIn"] = t.struct(
        {"resource": t.proxy(renames["RouterIn"]).optional()}
    ).named(renames["RoutersPreviewResponseIn"])
    types["RoutersPreviewResponseOut"] = t.struct(
        {
            "resource": t.proxy(renames["RouterOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RoutersPreviewResponseOut"])
    types["BackendIn"] = t.struct(
        {
            "maxConnectionsPerInstance": t.integer().optional(),
            "description": t.string().optional(),
            "capacityScaler": t.number().optional(),
            "maxRatePerInstance": t.number().optional(),
            "maxUtilization": t.number().optional(),
            "maxRatePerEndpoint": t.number().optional(),
            "failover": t.boolean().optional(),
            "group": t.string().optional(),
            "maxConnectionsPerEndpoint": t.integer().optional(),
            "maxRate": t.integer().optional(),
            "maxConnections": t.integer().optional(),
            "balancingMode": t.string().optional(),
        }
    ).named(renames["BackendIn"])
    types["BackendOut"] = t.struct(
        {
            "maxConnectionsPerInstance": t.integer().optional(),
            "description": t.string().optional(),
            "capacityScaler": t.number().optional(),
            "maxRatePerInstance": t.number().optional(),
            "maxUtilization": t.number().optional(),
            "maxRatePerEndpoint": t.number().optional(),
            "failover": t.boolean().optional(),
            "group": t.string().optional(),
            "maxConnectionsPerEndpoint": t.integer().optional(),
            "maxRate": t.integer().optional(),
            "maxConnections": t.integer().optional(),
            "balancingMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendOut"])
    types["InstanceMoveRequestIn"] = t.struct(
        {
            "targetInstance": t.string().optional(),
            "destinationZone": t.string().optional(),
        }
    ).named(renames["InstanceMoveRequestIn"])
    types["InstanceMoveRequestOut"] = t.struct(
        {
            "targetInstance": t.string().optional(),
            "destinationZone": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceMoveRequestOut"])
    types["ReferenceIn"] = t.struct(
        {
            "referenceType": t.string().optional(),
            "kind": t.string().optional(),
            "target": t.string().optional(),
            "referrer": t.string().optional(),
        }
    ).named(renames["ReferenceIn"])
    types["ReferenceOut"] = t.struct(
        {
            "referenceType": t.string().optional(),
            "kind": t.string().optional(),
            "target": t.string().optional(),
            "referrer": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReferenceOut"])
    types["SslCertificateSelfManagedSslCertificateIn"] = t.struct(
        {"certificate": t.string().optional(), "privateKey": t.string().optional()}
    ).named(renames["SslCertificateSelfManagedSslCertificateIn"])
    types["SslCertificateSelfManagedSslCertificateOut"] = t.struct(
        {
            "certificate": t.string().optional(),
            "privateKey": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslCertificateSelfManagedSslCertificateOut"])
    types["ResourcePolicyAggregatedListIn"] = t.struct(
        {
            "etag": t.string(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["ResourcePolicyAggregatedListIn"])
    types["ResourcePolicyAggregatedListOut"] = t.struct(
        {
            "etag": t.string(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyAggregatedListOut"])
    types["HostRuleIn"] = t.struct(
        {
            "hosts": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "pathMatcher": t.string().optional(),
        }
    ).named(renames["HostRuleIn"])
    types["HostRuleOut"] = t.struct(
        {
            "hosts": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "pathMatcher": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HostRuleOut"])
    types["AttachedDiskInitializeParamsIn"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "sourceImage": t.string().optional(),
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "diskType": t.string().optional(),
            "description": t.string().optional(),
            "diskName": t.string().optional(),
            "sourceSnapshot": t.string().optional(),
            "provisionedIops": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "onUpdateAction": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "architecture": t.string().optional(),
            "replicaZones": t.array(t.string()),
            "provisionedThroughput": t.string().optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "diskSizeGb": t.string().optional(),
        }
    ).named(renames["AttachedDiskInitializeParamsIn"])
    types["AttachedDiskInitializeParamsOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "sourceImage": t.string().optional(),
            "resourceManagerTags": t.struct({"_": t.string().optional()}).optional(),
            "diskType": t.string().optional(),
            "description": t.string().optional(),
            "diskName": t.string().optional(),
            "sourceSnapshot": t.string().optional(),
            "provisionedIops": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "onUpdateAction": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "architecture": t.string().optional(),
            "replicaZones": t.array(t.string()),
            "provisionedThroughput": t.string().optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "diskSizeGb": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttachedDiskInitializeParamsOut"])
    types["HttpQueryParameterMatchIn"] = t.struct(
        {
            "presentMatch": t.boolean().optional(),
            "name": t.string().optional(),
            "regexMatch": t.string().optional(),
            "exactMatch": t.string().optional(),
        }
    ).named(renames["HttpQueryParameterMatchIn"])
    types["HttpQueryParameterMatchOut"] = t.struct(
        {
            "presentMatch": t.boolean().optional(),
            "name": t.string().optional(),
            "regexMatch": t.string().optional(),
            "exactMatch": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpQueryParameterMatchOut"])
    types["NetworkRoutingConfigIn"] = t.struct(
        {"routingMode": t.string().optional()}
    ).named(renames["NetworkRoutingConfigIn"])
    types["NetworkRoutingConfigOut"] = t.struct(
        {
            "routingMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkRoutingConfigOut"])
    types["GlobalSetLabelsRequestIn"] = t.struct(
        {
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "labelFingerprint": t.string().optional(),
        }
    ).named(renames["GlobalSetLabelsRequestIn"])
    types["GlobalSetLabelsRequestOut"] = t.struct(
        {
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "labelFingerprint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalSetLabelsRequestOut"])
    types["NetworksUpdatePeeringRequestIn"] = t.struct(
        {"networkPeering": t.proxy(renames["NetworkPeeringIn"])}
    ).named(renames["NetworksUpdatePeeringRequestIn"])
    types["NetworksUpdatePeeringRequestOut"] = t.struct(
        {
            "networkPeering": t.proxy(renames["NetworkPeeringOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworksUpdatePeeringRequestOut"])
    types["AddressListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["AddressIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["AddressListIn"])
    types["AddressListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["AddressOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AddressListOut"])
    types["SubnetworkAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["SubnetworkAggregatedListIn"])
    types["SubnetworkAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworkAggregatedListOut"])
    types["FirewallPolicyAssociationIn"] = t.struct(
        {
            "name": t.string().optional(),
            "shortName": t.string().optional(),
            "firewallPolicyId": t.string().optional(),
            "attachmentTarget": t.string().optional(),
            "displayName": t.string().optional(),
        }
    ).named(renames["FirewallPolicyAssociationIn"])
    types["FirewallPolicyAssociationOut"] = t.struct(
        {
            "name": t.string().optional(),
            "shortName": t.string().optional(),
            "firewallPolicyId": t.string().optional(),
            "attachmentTarget": t.string().optional(),
            "displayName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyAssociationOut"])
    types["TargetInstancesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "targetInstances": t.array(t.proxy(renames["TargetInstanceIn"])).optional(),
        }
    ).named(renames["TargetInstancesScopedListIn"])
    types["TargetInstancesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "targetInstances": t.array(
                t.proxy(renames["TargetInstanceOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetInstancesScopedListOut"])
    types["TargetTcpProxiesSetBackendServiceRequestIn"] = t.struct(
        {"service": t.string().optional()}
    ).named(renames["TargetTcpProxiesSetBackendServiceRequestIn"])
    types["TargetTcpProxiesSetBackendServiceRequestOut"] = t.struct(
        {
            "service": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxiesSetBackendServiceRequestOut"])
    types["AutoscalingPolicyCpuUtilizationIn"] = t.struct(
        {
            "predictiveMethod": t.string().optional(),
            "utilizationTarget": t.number().optional(),
        }
    ).named(renames["AutoscalingPolicyCpuUtilizationIn"])
    types["AutoscalingPolicyCpuUtilizationOut"] = t.struct(
        {
            "predictiveMethod": t.string().optional(),
            "utilizationTarget": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyCpuUtilizationOut"])
    types["LicensesListResponseIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["LicenseIn"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["LicensesListResponseIn"])
    types["LicensesListResponseOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["LicenseOut"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicensesListResponseOut"])
    types["BfdStatusPacketCountsIn"] = t.struct(
        {
            "numRxSuccessful": t.integer().optional(),
            "numRxRejected": t.integer().optional(),
            "numRx": t.integer().optional(),
            "numTx": t.integer().optional(),
        }
    ).named(renames["BfdStatusPacketCountsIn"])
    types["BfdStatusPacketCountsOut"] = t.struct(
        {
            "numRxSuccessful": t.integer().optional(),
            "numRxRejected": t.integer().optional(),
            "numRx": t.integer().optional(),
            "numTx": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BfdStatusPacketCountsOut"])
    types["PublicDelegatedPrefixListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["PublicDelegatedPrefixIn"])).optional(),
        }
    ).named(renames["PublicDelegatedPrefixListIn"])
    types["PublicDelegatedPrefixListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["PublicDelegatedPrefixOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicDelegatedPrefixListOut"])
    types["RegionInstanceGroupManagersSetTargetPoolsRequestIn"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "targetPools": t.array(t.string()).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersSetTargetPoolsRequestIn"])
    types["RegionInstanceGroupManagersSetTargetPoolsRequestOut"] = t.struct(
        {
            "fingerprint": t.string().optional(),
            "targetPools": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersSetTargetPoolsRequestOut"])
    types["RouteAsPathIn"] = t.struct(
        {
            "pathSegmentType": t.string().optional(),
            "asLists": t.array(t.integer()).optional(),
        }
    ).named(renames["RouteAsPathIn"])
    types["RouteAsPathOut"] = t.struct(
        {
            "pathSegmentType": t.string().optional(),
            "asLists": t.array(t.integer()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouteAsPathOut"])
    types["SslPolicyReferenceIn"] = t.struct(
        {"sslPolicy": t.string().optional()}
    ).named(renames["SslPolicyReferenceIn"])
    types["SslPolicyReferenceOut"] = t.struct(
        {
            "sslPolicy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPolicyReferenceOut"])
    types["NetworkEndpointGroupsListEndpointsRequestIn"] = t.struct(
        {"healthStatus": t.string().optional()}
    ).named(renames["NetworkEndpointGroupsListEndpointsRequestIn"])
    types["NetworkEndpointGroupsListEndpointsRequestOut"] = t.struct(
        {
            "healthStatus": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupsListEndpointsRequestOut"])
    types["AllocationSpecificSKUAllocationReservedInstancePropertiesIn"] = t.struct(
        {
            "localSsds": t.array(
                t.proxy(
                    renames[
                        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskIn"
                    ]
                )
            ).optional(),
            "locationHint": t.string().optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigIn"])
            ).optional(),
            "machineType": t.string().optional(),
            "minCpuPlatform": t.string().optional(),
        }
    ).named(renames["AllocationSpecificSKUAllocationReservedInstancePropertiesIn"])
    types["AllocationSpecificSKUAllocationReservedInstancePropertiesOut"] = t.struct(
        {
            "localSsds": t.array(
                t.proxy(
                    renames[
                        "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOut"
                    ]
                )
            ).optional(),
            "locationHint": t.string().optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "machineType": t.string().optional(),
            "minCpuPlatform": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AllocationSpecificSKUAllocationReservedInstancePropertiesOut"])
    types["InterconnectDiagnosticsLinkLACPStatusIn"] = t.struct(
        {
            "neighborSystemId": t.string().optional(),
            "state": t.string().optional(),
            "googleSystemId": t.string().optional(),
        }
    ).named(renames["InterconnectDiagnosticsLinkLACPStatusIn"])
    types["InterconnectDiagnosticsLinkLACPStatusOut"] = t.struct(
        {
            "neighborSystemId": t.string().optional(),
            "state": t.string().optional(),
            "googleSystemId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectDiagnosticsLinkLACPStatusOut"])
    types["DiskAsyncReplicationListIn"] = t.struct(
        {"asyncReplicationDisk": t.proxy(renames["DiskAsyncReplicationIn"])}
    ).named(renames["DiskAsyncReplicationListIn"])
    types["DiskAsyncReplicationListOut"] = t.struct(
        {
            "asyncReplicationDisk": t.proxy(renames["DiskAsyncReplicationOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskAsyncReplicationListOut"])
    types["GlobalSetPolicyRequestIn"] = t.struct(
        {
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingIn"])).optional(),
            "policy": t.proxy(renames["PolicyIn"]).optional(),
        }
    ).named(renames["GlobalSetPolicyRequestIn"])
    types["GlobalSetPolicyRequestOut"] = t.struct(
        {
            "etag": t.string().optional(),
            "bindings": t.array(t.proxy(renames["BindingOut"])).optional(),
            "policy": t.proxy(renames["PolicyOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalSetPolicyRequestOut"])
    types["AcceleratorTypeAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["AcceleratorTypeAggregatedListIn"])
    types["AcceleratorTypeAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AcceleratorTypeAggregatedListOut"])
    types["InstancesScopedListIn"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["InstancesScopedListIn"])
    types["InstancesScopedListOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesScopedListOut"])
    types["FirewallPolicyListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["FirewallPolicyIn"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["FirewallPolicyListIn"])
    types["FirewallPolicyListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["FirewallPolicyOut"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyListOut"])
    types["GRPCHealthCheckIn"] = t.struct(
        {
            "grpcServiceName": t.string().optional(),
            "port": t.integer().optional(),
            "portName": t.string().optional(),
            "portSpecification": t.string().optional(),
        }
    ).named(renames["GRPCHealthCheckIn"])
    types["GRPCHealthCheckOut"] = t.struct(
        {
            "grpcServiceName": t.string().optional(),
            "port": t.integer().optional(),
            "portName": t.string().optional(),
            "portSpecification": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GRPCHealthCheckOut"])
    types["RequestMirrorPolicyIn"] = t.struct(
        {"backendService": t.string().optional()}
    ).named(renames["RequestMirrorPolicyIn"])
    types["RequestMirrorPolicyOut"] = t.struct(
        {
            "backendService": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RequestMirrorPolicyOut"])
    types["SSLHealthCheckIn"] = t.struct(
        {
            "request": t.string().optional(),
            "portName": t.string().optional(),
            "response": t.string().optional(),
            "port": t.integer().optional(),
            "proxyHeader": t.string().optional(),
            "portSpecification": t.string().optional(),
        }
    ).named(renames["SSLHealthCheckIn"])
    types["SSLHealthCheckOut"] = t.struct(
        {
            "request": t.string().optional(),
            "portName": t.string().optional(),
            "response": t.string().optional(),
            "port": t.integer().optional(),
            "proxyHeader": t.string().optional(),
            "portSpecification": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SSLHealthCheckOut"])
    types["HttpFaultAbortIn"] = t.struct(
        {"percentage": t.number().optional(), "httpStatus": t.integer().optional()}
    ).named(renames["HttpFaultAbortIn"])
    types["HttpFaultAbortOut"] = t.struct(
        {
            "percentage": t.number().optional(),
            "httpStatus": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpFaultAbortOut"])
    types["NodeTypeIn"] = t.struct(
        {
            "cpuPlatform": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "selfLink": t.string().optional(),
            "guestCpus": t.integer().optional(),
            "id": t.string().optional(),
            "localSsdGb": t.integer().optional(),
            "kind": t.string().optional(),
            "zone": t.string().optional(),
            "memoryMb": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["NodeTypeIn"])
    types["NodeTypeOut"] = t.struct(
        {
            "cpuPlatform": t.string().optional(),
            "name": t.string().optional(),
            "description": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "selfLink": t.string().optional(),
            "guestCpus": t.integer().optional(),
            "id": t.string().optional(),
            "localSsdGb": t.integer().optional(),
            "kind": t.string().optional(),
            "zone": t.string().optional(),
            "memoryMb": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTypeOut"])
    types["TargetReferenceIn"] = t.struct({"target": t.string()}).named(
        renames["TargetReferenceIn"]
    )
    types["TargetReferenceOut"] = t.struct(
        {"target": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["TargetReferenceOut"])
    types["InstanceListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceIn"])).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["InstanceListIn"])
    types["InstanceListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceOut"])).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceListOut"])
    types["RegionInstanceGroupsSetNamedPortsRequestIn"] = t.struct(
        {
            "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
            "fingerprint": t.string().optional(),
        }
    ).named(renames["RegionInstanceGroupsSetNamedPortsRequestIn"])
    types["RegionInstanceGroupsSetNamedPortsRequestOut"] = t.struct(
        {
            "namedPorts": t.array(t.proxy(renames["NamedPortOut"])).optional(),
            "fingerprint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupsSetNamedPortsRequestOut"])
    types["RouterStatusNatStatusNatRuleStatusIn"] = t.struct(
        {
            "drainNatIps": t.array(t.string()).optional(),
            "numVmEndpointsWithNatMappings": t.integer().optional(),
            "minExtraIpsNeeded": t.integer().optional(),
            "ruleNumber": t.integer().optional(),
            "activeNatIps": t.array(t.string()).optional(),
        }
    ).named(renames["RouterStatusNatStatusNatRuleStatusIn"])
    types["RouterStatusNatStatusNatRuleStatusOut"] = t.struct(
        {
            "drainNatIps": t.array(t.string()).optional(),
            "numVmEndpointsWithNatMappings": t.integer().optional(),
            "minExtraIpsNeeded": t.integer().optional(),
            "ruleNumber": t.integer().optional(),
            "activeNatIps": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterStatusNatStatusNatRuleStatusOut"])
    types["ResourceCommitmentIn"] = t.struct(
        {
            "type": t.string().optional(),
            "acceleratorType": t.string().optional(),
            "amount": t.string().optional(),
        }
    ).named(renames["ResourceCommitmentIn"])
    types["ResourceCommitmentOut"] = t.struct(
        {
            "type": t.string().optional(),
            "acceleratorType": t.string().optional(),
            "amount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourceCommitmentOut"])
    types["AutoscalingPolicyIn"] = t.struct(
        {
            "scaleInControl": t.proxy(renames["AutoscalingPolicyScaleInControlIn"]),
            "maxNumReplicas": t.integer().optional(),
            "scalingSchedules": t.struct({"_": t.string().optional()}).optional(),
            "minNumReplicas": t.integer().optional(),
            "mode": t.string().optional(),
            "loadBalancingUtilization": t.proxy(
                renames["AutoscalingPolicyLoadBalancingUtilizationIn"]
            ).optional(),
            "coolDownPeriodSec": t.integer().optional(),
            "cpuUtilization": t.proxy(
                renames["AutoscalingPolicyCpuUtilizationIn"]
            ).optional(),
            "customMetricUtilizations": t.array(
                t.proxy(renames["AutoscalingPolicyCustomMetricUtilizationIn"])
            ).optional(),
        }
    ).named(renames["AutoscalingPolicyIn"])
    types["AutoscalingPolicyOut"] = t.struct(
        {
            "scaleInControl": t.proxy(renames["AutoscalingPolicyScaleInControlOut"]),
            "maxNumReplicas": t.integer().optional(),
            "scalingSchedules": t.struct({"_": t.string().optional()}).optional(),
            "minNumReplicas": t.integer().optional(),
            "mode": t.string().optional(),
            "loadBalancingUtilization": t.proxy(
                renames["AutoscalingPolicyLoadBalancingUtilizationOut"]
            ).optional(),
            "coolDownPeriodSec": t.integer().optional(),
            "cpuUtilization": t.proxy(
                renames["AutoscalingPolicyCpuUtilizationOut"]
            ).optional(),
            "customMetricUtilizations": t.array(
                t.proxy(renames["AutoscalingPolicyCustomMetricUtilizationOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyOut"])
    types["XpnResourceIdIn"] = t.struct(
        {"id": t.string().optional(), "type": t.string().optional()}
    ).named(renames["XpnResourceIdIn"])
    types["XpnResourceIdOut"] = t.struct(
        {
            "id": t.string().optional(),
            "type": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["XpnResourceIdOut"])
    types["SslPolicyIn"] = t.struct(
        {
            "description": t.string().optional(),
            "id": t.string().optional(),
            "enabledFeatures": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "warnings": t.array(
                t.struct(
                    {
                        "code": t.string().optional(),
                        "message": t.string().optional(),
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                    }
                )
            ).optional(),
            "selfLink": t.string().optional(),
            "fingerprint": t.string().optional(),
            "profile": t.string().optional(),
            "region": t.string().optional(),
            "customFeatures": t.array(t.string()).optional(),
            "minTlsVersion": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["SslPolicyIn"])
    types["SslPolicyOut"] = t.struct(
        {
            "description": t.string().optional(),
            "id": t.string().optional(),
            "enabledFeatures": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "warnings": t.array(
                t.struct(
                    {
                        "code": t.string().optional(),
                        "message": t.string().optional(),
                        "data": t.array(
                            t.struct(
                                {
                                    "value": t.string().optional(),
                                    "key": t.string().optional(),
                                }
                            )
                        ).optional(),
                    }
                )
            ).optional(),
            "selfLink": t.string().optional(),
            "fingerprint": t.string().optional(),
            "profile": t.string().optional(),
            "region": t.string().optional(),
            "customFeatures": t.array(t.string()).optional(),
            "minTlsVersion": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPolicyOut"])
    types["RouterStatusIn"] = t.struct(
        {
            "bgpPeerStatus": t.array(t.proxy(renames["RouterStatusBgpPeerStatusIn"])),
            "natStatus": t.array(t.proxy(renames["RouterStatusNatStatusIn"])),
            "network": t.string().optional(),
            "bestRoutes": t.array(t.proxy(renames["RouteIn"])).optional(),
            "bestRoutesForRouter": t.array(t.proxy(renames["RouteIn"])).optional(),
        }
    ).named(renames["RouterStatusIn"])
    types["RouterStatusOut"] = t.struct(
        {
            "bgpPeerStatus": t.array(t.proxy(renames["RouterStatusBgpPeerStatusOut"])),
            "natStatus": t.array(t.proxy(renames["RouterStatusNatStatusOut"])),
            "network": t.string().optional(),
            "bestRoutes": t.array(t.proxy(renames["RouteOut"])).optional(),
            "bestRoutesForRouter": t.array(t.proxy(renames["RouteOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterStatusOut"])
    types["NetworkEndpointGroupsListNetworkEndpointsIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(
                t.proxy(renames["NetworkEndpointWithHealthStatusIn"])
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NetworkEndpointGroupsListNetworkEndpointsIn"])
    types["NetworkEndpointGroupsListNetworkEndpointsOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(
                t.proxy(renames["NetworkEndpointWithHealthStatusOut"])
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupsListNetworkEndpointsOut"])
    types["InstanceIn"] = t.struct(
        {
            "displayDevice": t.proxy(renames["DisplayDeviceIn"]).optional(),
            "lastStartTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "canIpForward": t.boolean().optional(),
            "sourceMachineImage": t.string().optional(),
            "confidentialInstanceConfig": t.proxy(
                renames["ConfidentialInstanceConfigIn"]
            ),
            "serviceAccounts": t.array(t.proxy(renames["ServiceAccountIn"])).optional(),
            "machineType": t.string().optional(),
            "statusMessage": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "networkPerformanceConfig": t.proxy(renames["NetworkPerformanceConfigIn"]),
            "tags": t.proxy(renames["TagsIn"]).optional(),
            "kind": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "params": t.proxy(renames["InstanceParamsIn"]).optional(),
            "zone": t.string().optional(),
            "disks": t.array(t.proxy(renames["AttachedDiskIn"])).optional(),
            "startRestricted": t.boolean().optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceIn"])
            ).optional(),
            "advancedMachineFeatures": t.proxy(
                renames["AdvancedMachineFeaturesIn"]
            ).optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigIn"])
            ).optional(),
            "reservationAffinity": t.proxy(renames["ReservationAffinityIn"]).optional(),
            "minCpuPlatform": t.string().optional(),
            "shieldedInstanceIntegrityPolicy": t.proxy(
                renames["ShieldedInstanceIntegrityPolicyIn"]
            ),
            "lastSuspendedTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "sourceMachineImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "description": t.string().optional(),
            "lastStopTimestamp": t.string().optional(),
            "scheduling": t.proxy(renames["SchedulingIn"]).optional(),
            "selfLink": t.string().optional(),
            "status": t.string().optional(),
            "shieldedInstanceConfig": t.proxy(renames["ShieldedInstanceConfigIn"]),
            "deletionProtection": t.boolean().optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "resourceStatus": t.proxy(renames["ResourceStatusIn"]).optional(),
            "keyRevocationActionType": t.string().optional(),
            "fingerprint": t.string().optional(),
            "cpuPlatform": t.string().optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "hostname": t.string().optional(),
            "metadata": t.proxy(renames["MetadataIn"]).optional(),
        }
    ).named(renames["InstanceIn"])
    types["InstanceOut"] = t.struct(
        {
            "displayDevice": t.proxy(renames["DisplayDeviceOut"]).optional(),
            "lastStartTimestamp": t.string().optional(),
            "id": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "canIpForward": t.boolean().optional(),
            "sourceMachineImage": t.string().optional(),
            "confidentialInstanceConfig": t.proxy(
                renames["ConfidentialInstanceConfigOut"]
            ),
            "serviceAccounts": t.array(
                t.proxy(renames["ServiceAccountOut"])
            ).optional(),
            "machineType": t.string().optional(),
            "statusMessage": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "networkPerformanceConfig": t.proxy(renames["NetworkPerformanceConfigOut"]),
            "tags": t.proxy(renames["TagsOut"]).optional(),
            "kind": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "params": t.proxy(renames["InstanceParamsOut"]).optional(),
            "zone": t.string().optional(),
            "disks": t.array(t.proxy(renames["AttachedDiskOut"])).optional(),
            "startRestricted": t.boolean().optional(),
            "networkInterfaces": t.array(
                t.proxy(renames["NetworkInterfaceOut"])
            ).optional(),
            "advancedMachineFeatures": t.proxy(
                renames["AdvancedMachineFeaturesOut"]
            ).optional(),
            "guestAccelerators": t.array(
                t.proxy(renames["AcceleratorConfigOut"])
            ).optional(),
            "reservationAffinity": t.proxy(
                renames["ReservationAffinityOut"]
            ).optional(),
            "minCpuPlatform": t.string().optional(),
            "shieldedInstanceIntegrityPolicy": t.proxy(
                renames["ShieldedInstanceIntegrityPolicyOut"]
            ),
            "lastSuspendedTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "sourceMachineImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "description": t.string().optional(),
            "lastStopTimestamp": t.string().optional(),
            "scheduling": t.proxy(renames["SchedulingOut"]).optional(),
            "selfLink": t.string().optional(),
            "status": t.string().optional(),
            "shieldedInstanceConfig": t.proxy(renames["ShieldedInstanceConfigOut"]),
            "deletionProtection": t.boolean().optional(),
            "resourcePolicies": t.array(t.string()).optional(),
            "satisfiesPzs": t.boolean().optional(),
            "resourceStatus": t.proxy(renames["ResourceStatusOut"]).optional(),
            "keyRevocationActionType": t.string().optional(),
            "fingerprint": t.string().optional(),
            "cpuPlatform": t.string().optional(),
            "privateIpv6GoogleAccess": t.string().optional(),
            "hostname": t.string().optional(),
            "metadata": t.proxy(renames["MetadataOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceOut"])
    types["NetworkEndpointGroupCloudFunctionIn"] = t.struct(
        {"function": t.string().optional(), "urlMask": t.string().optional()}
    ).named(renames["NetworkEndpointGroupCloudFunctionIn"])
    types["NetworkEndpointGroupCloudFunctionOut"] = t.struct(
        {
            "function": t.string().optional(),
            "urlMask": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupCloudFunctionOut"])
    types["InstanceGroupManagersDeleteInstancesRequestIn"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "skipInstancesOnValidationError": t.boolean().optional(),
        }
    ).named(renames["InstanceGroupManagersDeleteInstancesRequestIn"])
    types["InstanceGroupManagersDeleteInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "skipInstancesOnValidationError": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersDeleteInstancesRequestOut"])
    types["VpnGatewayIn"] = t.struct(
        {
            "network": t.string().optional(),
            "stackType": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "region": t.string().optional(),
            "vpnInterfaces": t.array(
                t.proxy(renames["VpnGatewayVpnGatewayInterfaceIn"])
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["VpnGatewayIn"])
    types["VpnGatewayOut"] = t.struct(
        {
            "network": t.string().optional(),
            "stackType": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "region": t.string().optional(),
            "vpnInterfaces": t.array(
                t.proxy(renames["VpnGatewayVpnGatewayInterfaceOut"])
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayOut"])
    types["SchedulingIn"] = t.struct(
        {
            "nodeAffinities": t.array(
                t.proxy(renames["SchedulingNodeAffinityIn"])
            ).optional(),
            "automaticRestart": t.boolean().optional(),
            "minNodeCpus": t.integer().optional(),
            "provisioningModel": t.string().optional(),
            "onHostMaintenance": t.string().optional(),
            "locationHint": t.string().optional(),
            "instanceTerminationAction": t.string().optional(),
            "preemptible": t.boolean().optional(),
        }
    ).named(renames["SchedulingIn"])
    types["SchedulingOut"] = t.struct(
        {
            "nodeAffinities": t.array(
                t.proxy(renames["SchedulingNodeAffinityOut"])
            ).optional(),
            "automaticRestart": t.boolean().optional(),
            "minNodeCpus": t.integer().optional(),
            "provisioningModel": t.string().optional(),
            "onHostMaintenance": t.string().optional(),
            "locationHint": t.string().optional(),
            "instanceTerminationAction": t.string().optional(),
            "preemptible": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SchedulingOut"])
    types["RegionInstanceGroupManagersAbandonInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.string()).optional()}
    ).named(renames["RegionInstanceGroupManagersAbandonInstancesRequestIn"])
    types["RegionInstanceGroupManagersAbandonInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersAbandonInstancesRequestOut"])
    types["HealthCheckIn"] = t.struct(
        {
            "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
            "timeoutSec": t.integer().optional(),
            "healthyThreshold": t.integer().optional(),
            "kind": t.string().optional(),
            "checkIntervalSec": t.integer().optional(),
            "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
            "creationTimestamp": t.string().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
            "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
            "type": t.string().optional(),
            "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
            "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
            "region": t.string().optional(),
        }
    ).named(renames["HealthCheckIn"])
    types["HealthCheckOut"] = t.struct(
        {
            "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckOut"]),
            "timeoutSec": t.integer().optional(),
            "healthyThreshold": t.integer().optional(),
            "kind": t.string().optional(),
            "checkIntervalSec": t.integer().optional(),
            "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckOut"]),
            "creationTimestamp": t.string().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "sslHealthCheck": t.proxy(renames["SSLHealthCheckOut"]),
            "tcpHealthCheck": t.proxy(renames["TCPHealthCheckOut"]),
            "description": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckOut"]),
            "type": t.string().optional(),
            "httpHealthCheck": t.proxy(renames["HTTPHealthCheckOut"]),
            "logConfig": t.proxy(renames["HealthCheckLogConfigOut"]).optional(),
            "region": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckOut"])
    types["CustomerEncryptionKeyIn"] = t.struct(
        {
            "rawKey": t.string().optional(),
            "kmsKeyName": t.string().optional(),
            "rsaEncryptedKey": t.string().optional(),
            "sha256": t.string().optional(),
            "kmsKeyServiceAccount": t.string().optional(),
        }
    ).named(renames["CustomerEncryptionKeyIn"])
    types["CustomerEncryptionKeyOut"] = t.struct(
        {
            "rawKey": t.string().optional(),
            "kmsKeyName": t.string().optional(),
            "rsaEncryptedKey": t.string().optional(),
            "sha256": t.string().optional(),
            "kmsKeyServiceAccount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CustomerEncryptionKeyOut"])
    types["StatefulPolicyPreservedStateDiskDeviceIn"] = t.struct(
        {"autoDelete": t.string().optional()}
    ).named(renames["StatefulPolicyPreservedStateDiskDeviceIn"])
    types["StatefulPolicyPreservedStateDiskDeviceOut"] = t.struct(
        {
            "autoDelete": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StatefulPolicyPreservedStateDiskDeviceOut"])
    types["InstanceGroupManagersAbandonInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.string()).optional()}
    ).named(renames["InstanceGroupManagersAbandonInstancesRequestIn"])
    types["InstanceGroupManagersAbandonInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersAbandonInstancesRequestOut"])
    types["NodeTemplateNodeTypeFlexibilityIn"] = t.struct(
        {"cpus": t.string(), "localSsd": t.string(), "memory": t.string()}
    ).named(renames["NodeTemplateNodeTypeFlexibilityIn"])
    types["NodeTemplateNodeTypeFlexibilityOut"] = t.struct(
        {
            "cpus": t.string(),
            "localSsd": t.string(),
            "memory": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTemplateNodeTypeFlexibilityOut"])
    types["ServiceAttachmentConnectedEndpointIn"] = t.struct(
        {
            "pscConnectionId": t.string().optional(),
            "status": t.string().optional(),
            "endpoint": t.string().optional(),
        }
    ).named(renames["ServiceAttachmentConnectedEndpointIn"])
    types["ServiceAttachmentConnectedEndpointOut"] = t.struct(
        {
            "pscConnectionId": t.string().optional(),
            "status": t.string().optional(),
            "endpoint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentConnectedEndpointOut"])
    types["UsableSubnetworkIn"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "role": t.string().optional(),
            "purpose": t.string().optional(),
            "externalIpv6Prefix": t.string().optional(),
            "stackType": t.string().optional(),
            "internalIpv6Prefix": t.string().optional(),
            "ipv6AccessType": t.string().optional(),
            "network": t.string().optional(),
            "subnetwork": t.string().optional(),
            "secondaryIpRanges": t.array(
                t.proxy(renames["UsableSubnetworkSecondaryRangeIn"])
            ).optional(),
        }
    ).named(renames["UsableSubnetworkIn"])
    types["UsableSubnetworkOut"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "role": t.string().optional(),
            "purpose": t.string().optional(),
            "externalIpv6Prefix": t.string().optional(),
            "stackType": t.string().optional(),
            "internalIpv6Prefix": t.string().optional(),
            "ipv6AccessType": t.string().optional(),
            "network": t.string().optional(),
            "subnetwork": t.string().optional(),
            "secondaryIpRanges": t.array(
                t.proxy(renames["UsableSubnetworkSecondaryRangeOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UsableSubnetworkOut"])
    types["ForwardingRuleIn"] = t.struct(
        {
            "pscConnectionStatus": t.string(),
            "creationTimestamp": t.string().optional(),
            "portRange": t.string().optional(),
            "ports": t.array(t.string()).optional(),
            "subnetwork": t.string().optional(),
            "isMirroringCollector": t.boolean().optional(),
            "allowPscGlobalAccess": t.boolean().optional(),
            "description": t.string().optional(),
            "loadBalancingScheme": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "allPorts": t.boolean().optional(),
            "network": t.string().optional(),
            "fingerprint": t.string().optional(),
            "IPAddress": t.string().optional(),
            "serviceName": t.string().optional(),
            "kind": t.string().optional(),
            "backendService": t.string().optional(),
            "pscConnectionId": t.string().optional(),
            "name": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "serviceDirectoryRegistrations": t.array(
                t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
            ).optional(),
            "baseForwardingRule": t.string().optional(),
            "noAutomateDnsZone": t.boolean().optional(),
            "metadataFilters": t.array(t.proxy(renames["MetadataFilterIn"])).optional(),
            "region": t.string().optional(),
            "ipVersion": t.string().optional(),
            "networkTier": t.string().optional(),
            "allowGlobalAccess": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "sourceIpRanges": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "target": t.string().optional(),
            "serviceLabel": t.string().optional(),
            "IPProtocol": t.string().optional(),
        }
    ).named(renames["ForwardingRuleIn"])
    types["ForwardingRuleOut"] = t.struct(
        {
            "pscConnectionStatus": t.string(),
            "creationTimestamp": t.string().optional(),
            "portRange": t.string().optional(),
            "ports": t.array(t.string()).optional(),
            "subnetwork": t.string().optional(),
            "isMirroringCollector": t.boolean().optional(),
            "allowPscGlobalAccess": t.boolean().optional(),
            "description": t.string().optional(),
            "loadBalancingScheme": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "allPorts": t.boolean().optional(),
            "network": t.string().optional(),
            "fingerprint": t.string().optional(),
            "IPAddress": t.string().optional(),
            "serviceName": t.string().optional(),
            "kind": t.string().optional(),
            "backendService": t.string().optional(),
            "pscConnectionId": t.string().optional(),
            "name": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "serviceDirectoryRegistrations": t.array(
                t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationOut"])
            ).optional(),
            "baseForwardingRule": t.string().optional(),
            "noAutomateDnsZone": t.boolean().optional(),
            "metadataFilters": t.array(
                t.proxy(renames["MetadataFilterOut"])
            ).optional(),
            "region": t.string().optional(),
            "ipVersion": t.string().optional(),
            "networkTier": t.string().optional(),
            "allowGlobalAccess": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "sourceIpRanges": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "target": t.string().optional(),
            "serviceLabel": t.string().optional(),
            "IPProtocol": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRuleOut"])
    types["InstanceGroupIn"] = t.struct(
        {
            "zone": t.string().optional(),
            "network": t.string().optional(),
            "region": t.string().optional(),
            "fingerprint": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "subnetwork": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
            "size": t.integer().optional(),
        }
    ).named(renames["InstanceGroupIn"])
    types["InstanceGroupOut"] = t.struct(
        {
            "zone": t.string().optional(),
            "network": t.string().optional(),
            "region": t.string().optional(),
            "fingerprint": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "kind": t.string().optional(),
            "name": t.string().optional(),
            "subnetwork": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "namedPorts": t.array(t.proxy(renames["NamedPortOut"])).optional(),
            "size": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupOut"])
    types["InstancesSetMinCpuPlatformRequestIn"] = t.struct(
        {"minCpuPlatform": t.string().optional()}
    ).named(renames["InstancesSetMinCpuPlatformRequestIn"])
    types["InstancesSetMinCpuPlatformRequestOut"] = t.struct(
        {
            "minCpuPlatform": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetMinCpuPlatformRequestOut"])
    types["SslPoliciesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "sslPolicies": t.array(t.proxy(renames["SslPolicyIn"])).optional(),
        }
    ).named(renames["SslPoliciesScopedListIn"])
    types["SslPoliciesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "sslPolicies": t.array(t.proxy(renames["SslPolicyOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPoliciesScopedListOut"])
    types["NetworkEndpointGroupAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NetworkEndpointGroupAggregatedListIn"])
    types["NetworkEndpointGroupAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupAggregatedListOut"])
    types["SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigIn"] = t.struct(
        {"ruleVisibility": t.string().optional(), "enable": t.boolean().optional()}
    ).named(renames["SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigIn"])
    types[
        "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOut"
    ] = t.struct(
        {
            "ruleVisibility": t.string().optional(),
            "enable": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOut"]
    )
    types["HealthCheckReferenceIn"] = t.struct({"healthCheck": t.string()}).named(
        renames["HealthCheckReferenceIn"]
    )
    types["HealthCheckReferenceOut"] = t.struct(
        {
            "healthCheck": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckReferenceOut"])
    types["InterconnectLocationIn"] = t.struct(
        {
            "supportsPzs": t.boolean().optional(),
            "status": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "facilityProvider": t.string().optional(),
            "continent": t.string().optional(),
            "city": t.string().optional(),
            "kind": t.string().optional(),
            "availabilityZone": t.string().optional(),
            "description": t.string().optional(),
            "address": t.string().optional(),
            "facilityProviderFacilityId": t.string().optional(),
            "peeringdbFacilityId": t.string().optional(),
            "id": t.string().optional(),
            "regionInfos": t.array(
                t.proxy(renames["InterconnectLocationRegionInfoIn"])
            ).optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["InterconnectLocationIn"])
    types["InterconnectLocationOut"] = t.struct(
        {
            "supportsPzs": t.boolean().optional(),
            "status": t.string().optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "facilityProvider": t.string().optional(),
            "continent": t.string().optional(),
            "city": t.string().optional(),
            "kind": t.string().optional(),
            "availabilityZone": t.string().optional(),
            "description": t.string().optional(),
            "address": t.string().optional(),
            "facilityProviderFacilityId": t.string().optional(),
            "peeringdbFacilityId": t.string().optional(),
            "id": t.string().optional(),
            "regionInfos": t.array(
                t.proxy(renames["InterconnectLocationRegionInfoOut"])
            ).optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectLocationOut"])
    types["PublicDelegatedPrefixesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "publicDelegatedPrefixes": t.array(
                t.proxy(renames["PublicDelegatedPrefixIn"])
            ).optional(),
        }
    ).named(renames["PublicDelegatedPrefixesScopedListIn"])
    types["PublicDelegatedPrefixesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "publicDelegatedPrefixes": t.array(
                t.proxy(renames["PublicDelegatedPrefixOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicDelegatedPrefixesScopedListOut"])
    types["ResourcePoliciesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "resourcePolicies": t.array(
                t.proxy(renames["ResourcePolicyIn"])
            ).optional(),
        }
    ).named(renames["ResourcePoliciesScopedListIn"])
    types["ResourcePoliciesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "resourcePolicies": t.array(
                t.proxy(renames["ResourcePolicyOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePoliciesScopedListOut"])
    types["TargetSslProxyIn"] = t.struct(
        {
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "certificateMap": t.string().optional(),
            "sslCertificates": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "service": t.string().optional(),
            "id": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "sslPolicy": t.string().optional(),
        }
    ).named(renames["TargetSslProxyIn"])
    types["TargetSslProxyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "certificateMap": t.string().optional(),
            "sslCertificates": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "service": t.string().optional(),
            "id": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "sslPolicy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxyOut"])
    types["ResourcePolicyResourceStatusIn"] = t.struct(
        {
            "instanceSchedulePolicy": t.proxy(
                renames["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusIn"]
            ).optional()
        }
    ).named(renames["ResourcePolicyResourceStatusIn"])
    types["ResourcePolicyResourceStatusOut"] = t.struct(
        {
            "instanceSchedulePolicy": t.proxy(
                renames["ResourcePolicyResourceStatusInstanceSchedulePolicyStatusOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyResourceStatusOut"])
    types["TargetPoolsAddInstanceRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["InstanceReferenceIn"])).optional()}
    ).named(renames["TargetPoolsAddInstanceRequestIn"])
    types["TargetPoolsAddInstanceRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceReferenceOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolsAddInstanceRequestOut"])
    types["NetworkEndpointGroupIn"] = t.struct(
        {
            "networkEndpointType": t.string().optional(),
            "id": t.string().optional(),
            "region": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "pscTargetService": t.string().optional(),
            "selfLink": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "cloudFunction": t.proxy(
                renames["NetworkEndpointGroupCloudFunctionIn"]
            ).optional(),
            "size": t.integer().optional(),
            "subnetwork": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "cloudRun": t.proxy(renames["NetworkEndpointGroupCloudRunIn"]).optional(),
            "defaultPort": t.integer().optional(),
            "zone": t.string().optional(),
            "pscData": t.proxy(renames["NetworkEndpointGroupPscDataIn"]),
            "network": t.string().optional(),
            "appEngine": t.proxy(renames["NetworkEndpointGroupAppEngineIn"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupIn"])
    types["NetworkEndpointGroupOut"] = t.struct(
        {
            "networkEndpointType": t.string().optional(),
            "id": t.string().optional(),
            "region": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "pscTargetService": t.string().optional(),
            "selfLink": t.string().optional(),
            "annotations": t.struct({"_": t.string().optional()}).optional(),
            "cloudFunction": t.proxy(
                renames["NetworkEndpointGroupCloudFunctionOut"]
            ).optional(),
            "size": t.integer().optional(),
            "subnetwork": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "cloudRun": t.proxy(renames["NetworkEndpointGroupCloudRunOut"]).optional(),
            "defaultPort": t.integer().optional(),
            "zone": t.string().optional(),
            "pscData": t.proxy(renames["NetworkEndpointGroupPscDataOut"]),
            "network": t.string().optional(),
            "appEngine": t.proxy(
                renames["NetworkEndpointGroupAppEngineOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupOut"])
    types["HttpsHealthCheckIn"] = t.struct(
        {
            "port": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "healthyThreshold": t.integer().optional(),
            "checkIntervalSec": t.integer().optional(),
            "id": t.string().optional(),
            "timeoutSec": t.integer().optional(),
            "requestPath": t.string().optional(),
            "host": t.string().optional(),
        }
    ).named(renames["HttpsHealthCheckIn"])
    types["HttpsHealthCheckOut"] = t.struct(
        {
            "port": t.integer().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "unhealthyThreshold": t.integer().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "healthyThreshold": t.integer().optional(),
            "checkIntervalSec": t.integer().optional(),
            "id": t.string().optional(),
            "timeoutSec": t.integer().optional(),
            "requestPath": t.string().optional(),
            "host": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpsHealthCheckOut"])
    types["NodeTemplateListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["NodeTemplateIn"])).optional(),
            "id": t.string().optional(),
        }
    ).named(renames["NodeTemplateListIn"])
    types["NodeTemplateListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["NodeTemplateOut"])).optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTemplateListOut"])
    types["RegionInstanceGroupManagerDeleteInstanceConfigReqIn"] = t.struct(
        {"names": t.array(t.string()).optional()}
    ).named(renames["RegionInstanceGroupManagerDeleteInstanceConfigReqIn"])
    types["RegionInstanceGroupManagerDeleteInstanceConfigReqOut"] = t.struct(
        {
            "names": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagerDeleteInstanceConfigReqOut"])
    types["ManagedInstanceInstanceHealthIn"] = t.struct(
        {
            "healthCheck": t.string().optional(),
            "detailedHealthState": t.string().optional(),
        }
    ).named(renames["ManagedInstanceInstanceHealthIn"])
    types["ManagedInstanceInstanceHealthOut"] = t.struct(
        {
            "healthCheck": t.string().optional(),
            "detailedHealthState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ManagedInstanceInstanceHealthOut"])
    types["InterconnectRemoteLocationConstraintsSubnetLengthRangeIn"] = t.struct(
        {"max": t.integer(), "min": t.integer()}
    ).named(renames["InterconnectRemoteLocationConstraintsSubnetLengthRangeIn"])
    types["InterconnectRemoteLocationConstraintsSubnetLengthRangeOut"] = t.struct(
        {
            "max": t.integer(),
            "min": t.integer(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectRemoteLocationConstraintsSubnetLengthRangeOut"])
    types["SecurityPolicyRuleRateLimitOptionsThresholdIn"] = t.struct(
        {"intervalSec": t.integer().optional(), "count": t.integer().optional()}
    ).named(renames["SecurityPolicyRuleRateLimitOptionsThresholdIn"])
    types["SecurityPolicyRuleRateLimitOptionsThresholdOut"] = t.struct(
        {
            "intervalSec": t.integer().optional(),
            "count": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleRateLimitOptionsThresholdOut"])
    types["TargetHttpProxyListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetHttpProxyIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["TargetHttpProxyListIn"])
    types["TargetHttpProxyListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetHttpProxyOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpProxyListOut"])
    types["TargetHttpsProxiesScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "targetHttpsProxies": t.array(
                t.proxy(renames["TargetHttpsProxyIn"])
            ).optional(),
        }
    ).named(renames["TargetHttpsProxiesScopedListIn"])
    types["TargetHttpsProxiesScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "targetHttpsProxies": t.array(
                t.proxy(renames["TargetHttpsProxyOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxiesScopedListOut"])
    types["LicenseIn"] = t.struct(
        {
            "resourceRequirements": t.proxy(renames["LicenseResourceRequirementsIn"]),
            "licenseCode": t.string().optional(),
            "name": t.string().optional(),
            "transferable": t.boolean().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "chargesUseFee": t.boolean().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["LicenseIn"])
    types["LicenseOut"] = t.struct(
        {
            "resourceRequirements": t.proxy(renames["LicenseResourceRequirementsOut"]),
            "licenseCode": t.string().optional(),
            "name": t.string().optional(),
            "transferable": t.boolean().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "chargesUseFee": t.boolean().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicenseOut"])
    types["HttpFaultInjectionIn"] = t.struct(
        {
            "delay": t.proxy(renames["HttpFaultDelayIn"]).optional(),
            "abort": t.proxy(renames["HttpFaultAbortIn"]).optional(),
        }
    ).named(renames["HttpFaultInjectionIn"])
    types["HttpFaultInjectionOut"] = t.struct(
        {
            "delay": t.proxy(renames["HttpFaultDelayOut"]).optional(),
            "abort": t.proxy(renames["HttpFaultAbortOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpFaultInjectionOut"])
    types["TargetSslProxyListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["TargetSslProxyIn"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["TargetSslProxyListIn"])
    types["TargetSslProxyListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["TargetSslProxyOut"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetSslProxyListOut"])
    types[
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"
    ] = t.struct(
        {
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleIn"])).optional(),
            "displayName": t.string().optional(),
            "type": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(
        renames[
            "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"
        ]
    )
    types[
        "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
    ] = t.struct(
        {
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleOut"])).optional(),
            "displayName": t.string().optional(),
            "type": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames[
            "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
        ]
    )
    types["VpnGatewayVpnGatewayInterfaceIn"] = t.struct(
        {
            "interconnectAttachment": t.string().optional(),
            "id": t.integer().optional(),
            "ipAddress": t.string().optional(),
        }
    ).named(renames["VpnGatewayVpnGatewayInterfaceIn"])
    types["VpnGatewayVpnGatewayInterfaceOut"] = t.struct(
        {
            "interconnectAttachment": t.string().optional(),
            "id": t.integer().optional(),
            "ipAddress": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayVpnGatewayInterfaceOut"])
    types["ForwardingRuleServiceDirectoryRegistrationIn"] = t.struct(
        {
            "service": t.string().optional(),
            "serviceDirectoryRegion": t.string().optional(),
            "namespace": t.string().optional(),
        }
    ).named(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
    types["ForwardingRuleServiceDirectoryRegistrationOut"] = t.struct(
        {
            "service": t.string().optional(),
            "serviceDirectoryRegion": t.string().optional(),
            "namespace": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRuleServiceDirectoryRegistrationOut"])
    types["RegionInstanceGroupManagersListInstanceConfigsRespIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PerInstanceConfigIn"])).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListInstanceConfigsRespIn"])
    types["RegionInstanceGroupManagersListInstanceConfigsRespOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PerInstanceConfigOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListInstanceConfigsRespOut"])
    types["SubsettingIn"] = t.struct({"policy": t.string()}).named(
        renames["SubsettingIn"]
    )
    types["SubsettingOut"] = t.struct(
        {"policy": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["SubsettingOut"])
    types["InstancesSetMachineTypeRequestIn"] = t.struct(
        {"machineType": t.string().optional()}
    ).named(renames["InstancesSetMachineTypeRequestIn"])
    types["InstancesSetMachineTypeRequestOut"] = t.struct(
        {
            "machineType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesSetMachineTypeRequestOut"])
    types["CustomerEncryptionKeyProtectedDiskIn"] = t.struct(
        {
            "source": t.string().optional(),
            "diskEncryptionKey": t.proxy(renames["CustomerEncryptionKeyIn"]).optional(),
        }
    ).named(renames["CustomerEncryptionKeyProtectedDiskIn"])
    types["CustomerEncryptionKeyProtectedDiskOut"] = t.struct(
        {
            "source": t.string().optional(),
            "diskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CustomerEncryptionKeyProtectedDiskOut"])
    types["TestPermissionsRequestIn"] = t.struct(
        {"permissions": t.array(t.string()).optional()}
    ).named(renames["TestPermissionsRequestIn"])
    types["TestPermissionsRequestOut"] = t.struct(
        {
            "permissions": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TestPermissionsRequestOut"])
    types["RegionInstanceGroupManagersListErrorsResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(
                t.proxy(renames["InstanceManagedByIgmErrorIn"])
            ).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListErrorsResponseIn"])
    types["RegionInstanceGroupManagersListErrorsResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(
                t.proxy(renames["InstanceManagedByIgmErrorOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupManagersListErrorsResponseOut"])
    types["NetworkEndpointGroupsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "networkEndpointGroups": t.array(
                t.proxy(renames["NetworkEndpointGroupIn"])
            ).optional(),
        }
    ).named(renames["NetworkEndpointGroupsScopedListIn"])
    types["NetworkEndpointGroupsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "networkEndpointGroups": t.array(
                t.proxy(renames["NetworkEndpointGroupOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEndpointGroupsScopedListOut"])
    types["DiskTypeListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["DiskTypeIn"])).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["DiskTypeListIn"])
    types["DiskTypeListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["DiskTypeOut"])).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskTypeListOut"])
    types["SavedAttachedDiskIn"] = t.struct(
        {
            "licenses": t.array(t.string()).optional(),
            "mode": t.string().optional(),
            "type": t.string().optional(),
            "kind": t.string().optional(),
            "index": t.integer().optional(),
            "deviceName": t.string().optional(),
            "guestOsFeatures": t.array(t.proxy(renames["GuestOsFeatureIn"])).optional(),
            "diskEncryptionKey": t.proxy(renames["CustomerEncryptionKeyIn"]).optional(),
            "storageBytes": t.string().optional(),
            "diskSizeGb": t.string().optional(),
            "source": t.string().optional(),
            "storageBytesStatus": t.string().optional(),
            "boot": t.boolean().optional(),
            "autoDelete": t.boolean().optional(),
            "diskType": t.string().optional(),
            "interface": t.string().optional(),
        }
    ).named(renames["SavedAttachedDiskIn"])
    types["SavedAttachedDiskOut"] = t.struct(
        {
            "licenses": t.array(t.string()).optional(),
            "mode": t.string().optional(),
            "type": t.string().optional(),
            "kind": t.string().optional(),
            "index": t.integer().optional(),
            "deviceName": t.string().optional(),
            "guestOsFeatures": t.array(
                t.proxy(renames["GuestOsFeatureOut"])
            ).optional(),
            "diskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "storageBytes": t.string().optional(),
            "diskSizeGb": t.string().optional(),
            "source": t.string().optional(),
            "storageBytesStatus": t.string().optional(),
            "boot": t.boolean().optional(),
            "autoDelete": t.boolean().optional(),
            "diskType": t.string().optional(),
            "interface": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SavedAttachedDiskOut"])
    types["PreconfiguredWafSetIn"] = t.struct(
        {"expressionSets": t.array(t.proxy(renames["WafExpressionSetIn"])).optional()}
    ).named(renames["PreconfiguredWafSetIn"])
    types["PreconfiguredWafSetOut"] = t.struct(
        {
            "expressionSets": t.array(
                t.proxy(renames["WafExpressionSetOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PreconfiguredWafSetOut"])
    types["NetworkAttachmentsScopedListIn"] = t.struct(
        {
            "networkAttachments": t.array(
                t.proxy(renames["NetworkAttachmentIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["NetworkAttachmentsScopedListIn"])
    types["NetworkAttachmentsScopedListOut"] = t.struct(
        {
            "networkAttachments": t.array(
                t.proxy(renames["NetworkAttachmentOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkAttachmentsScopedListOut"])
    types["HealthCheckListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["HealthCheckIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["HealthCheckListIn"])
    types["HealthCheckListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["HealthCheckOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthCheckListOut"])
    types["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigIn"] = t.struct(
        {
            "enforceOnKeyName": t.string().optional(),
            "enforceOnKeyType": t.string().optional(),
        }
    ).named(renames["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigIn"])
    types["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigOut"] = t.struct(
        {
            "enforceOnKeyName": t.string().optional(),
            "enforceOnKeyType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigOut"])
    types["ResourcePolicySnapshotSchedulePolicyRetentionPolicyIn"] = t.struct(
        {
            "onSourceDiskDelete": t.string().optional(),
            "maxRetentionDays": t.integer().optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyRetentionPolicyIn"])
    types["ResourcePolicySnapshotSchedulePolicyRetentionPolicyOut"] = t.struct(
        {
            "onSourceDiskDelete": t.string().optional(),
            "maxRetentionDays": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyRetentionPolicyOut"])
    types["InstanceGroupsScopedListIn"] = t.struct(
        {
            "instanceGroups": t.array(t.proxy(renames["InstanceGroupIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["InstanceGroupsScopedListIn"])
    types["InstanceGroupsScopedListOut"] = t.struct(
        {
            "instanceGroups": t.array(t.proxy(renames["InstanceGroupOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsScopedListOut"])
    types["TargetVpnGatewayListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetVpnGatewayIn"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["TargetVpnGatewayListIn"])
    types["TargetVpnGatewayListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetVpnGatewayOut"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetVpnGatewayListOut"])
    types["InstanceGroupManagersPatchPerInstanceConfigsReqIn"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigIn"])
            ).optional()
        }
    ).named(renames["InstanceGroupManagersPatchPerInstanceConfigsReqIn"])
    types["InstanceGroupManagersPatchPerInstanceConfigsReqOut"] = t.struct(
        {
            "perInstanceConfigs": t.array(
                t.proxy(renames["PerInstanceConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersPatchPerInstanceConfigsReqOut"])
    types["ProjectsListXpnHostsRequestIn"] = t.struct(
        {"organization": t.string().optional()}
    ).named(renames["ProjectsListXpnHostsRequestIn"])
    types["ProjectsListXpnHostsRequestOut"] = t.struct(
        {
            "organization": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ProjectsListXpnHostsRequestOut"])
    types["Int64RangeMatchIn"] = t.struct(
        {"rangeEnd": t.string().optional(), "rangeStart": t.string().optional()}
    ).named(renames["Int64RangeMatchIn"])
    types["Int64RangeMatchOut"] = t.struct(
        {
            "rangeEnd": t.string().optional(),
            "rangeStart": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["Int64RangeMatchOut"])
    types["TargetPoolsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "targetPools": t.array(t.proxy(renames["TargetPoolIn"])).optional(),
        }
    ).named(renames["TargetPoolsScopedListIn"])
    types["TargetPoolsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "targetPools": t.array(t.proxy(renames["TargetPoolOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolsScopedListOut"])
    types["BackendServiceListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["BackendServiceIn"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["BackendServiceListIn"])
    types["BackendServiceListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["BackendServiceOut"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceListOut"])
    types["ScalingScheduleStatusIn"] = t.struct(
        {
            "lastStartTime": t.string().optional(),
            "nextStartTime": t.string().optional(),
            "state": t.string().optional(),
        }
    ).named(renames["ScalingScheduleStatusIn"])
    types["ScalingScheduleStatusOut"] = t.struct(
        {
            "lastStartTime": t.string().optional(),
            "nextStartTime": t.string().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ScalingScheduleStatusOut"])
    types["TargetTcpProxyAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["TargetTcpProxyAggregatedListIn"])
    types["TargetTcpProxyAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxyAggregatedListOut"])
    types["VmEndpointNatMappingsInterfaceNatMappingsIn"] = t.struct(
        {
            "numTotalDrainNatPorts": t.integer().optional(),
            "sourceAliasIpRange": t.string().optional(),
            "ruleMappings": t.array(
                t.proxy(
                    renames[
                        "VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsIn"
                    ]
                )
            ).optional(),
            "numTotalNatPorts": t.integer().optional(),
            "drainNatIpPortRanges": t.array(t.string()).optional(),
            "sourceVirtualIp": t.string().optional(),
            "natIpPortRanges": t.array(t.string()).optional(),
        }
    ).named(renames["VmEndpointNatMappingsInterfaceNatMappingsIn"])
    types["VmEndpointNatMappingsInterfaceNatMappingsOut"] = t.struct(
        {
            "numTotalDrainNatPorts": t.integer().optional(),
            "sourceAliasIpRange": t.string().optional(),
            "ruleMappings": t.array(
                t.proxy(
                    renames[
                        "VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappingsOut"
                    ]
                )
            ).optional(),
            "numTotalNatPorts": t.integer().optional(),
            "drainNatIpPortRanges": t.array(t.string()).optional(),
            "sourceVirtualIp": t.string().optional(),
            "natIpPortRanges": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VmEndpointNatMappingsInterfaceNatMappingsOut"])
    types["ServiceAttachmentAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["ServiceAttachmentAggregatedListIn"])
    types["ServiceAttachmentAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentAggregatedListOut"])
    types["ResourcePolicyWeeklyCycleDayOfWeekIn"] = t.struct(
        {
            "startTime": t.string().optional(),
            "duration": t.string().optional(),
            "day": t.string().optional(),
        }
    ).named(renames["ResourcePolicyWeeklyCycleDayOfWeekIn"])
    types["ResourcePolicyWeeklyCycleDayOfWeekOut"] = t.struct(
        {
            "startTime": t.string().optional(),
            "duration": t.string().optional(),
            "day": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyWeeklyCycleDayOfWeekOut"])
    types["InstanceGroupsRemoveInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["InstanceReferenceIn"])).optional()}
    ).named(renames["InstanceGroupsRemoveInstancesRequestIn"])
    types["InstanceGroupsRemoveInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceReferenceOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupsRemoveInstancesRequestOut"])
    types["SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"] = t.struct(
        {"op": t.string().optional(), "val": t.string().optional()}
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsIn"])
    types["SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"] = t.struct(
        {
            "op": t.string().optional(),
            "val": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOut"])
    types["ResourcePolicyGroupPlacementPolicyIn"] = t.struct(
        {
            "availabilityDomainCount": t.integer().optional(),
            "vmCount": t.integer().optional(),
            "collocation": t.string().optional(),
        }
    ).named(renames["ResourcePolicyGroupPlacementPolicyIn"])
    types["ResourcePolicyGroupPlacementPolicyOut"] = t.struct(
        {
            "availabilityDomainCount": t.integer().optional(),
            "vmCount": t.integer().optional(),
            "collocation": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyGroupPlacementPolicyOut"])
    types["InstancesStartWithEncryptionKeyRequestIn"] = t.struct(
        {
            "disks": t.array(
                t.proxy(renames["CustomerEncryptionKeyProtectedDiskIn"])
            ).optional()
        }
    ).named(renames["InstancesStartWithEncryptionKeyRequestIn"])
    types["InstancesStartWithEncryptionKeyRequestOut"] = t.struct(
        {
            "disks": t.array(
                t.proxy(renames["CustomerEncryptionKeyProtectedDiskOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesStartWithEncryptionKeyRequestOut"])
    types["CommitmentAggregatedListIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["CommitmentAggregatedListIn"])
    types["CommitmentAggregatedListOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommitmentAggregatedListOut"])
    types["RouterNatIn"] = t.struct(
        {
            "udpIdleTimeoutSec": t.integer().optional(),
            "subnetworks": t.array(
                t.proxy(renames["RouterNatSubnetworkToNatIn"])
            ).optional(),
            "drainNatIps": t.array(t.string()).optional(),
            "enableDynamicPortAllocation": t.boolean().optional(),
            "maxPortsPerVm": t.integer().optional(),
            "name": t.string().optional(),
            "logConfig": t.proxy(renames["RouterNatLogConfigIn"]).optional(),
            "tcpEstablishedIdleTimeoutSec": t.integer().optional(),
            "tcpTransitoryIdleTimeoutSec": t.integer().optional(),
            "natIps": t.array(t.string()).optional(),
            "minPortsPerVm": t.integer().optional(),
            "endpointTypes": t.array(t.string()).optional(),
            "natIpAllocateOption": t.string().optional(),
            "icmpIdleTimeoutSec": t.integer().optional(),
            "enableEndpointIndependentMapping": t.boolean(),
            "sourceSubnetworkIpRangesToNat": t.string().optional(),
            "rules": t.array(t.proxy(renames["RouterNatRuleIn"])).optional(),
            "tcpTimeWaitTimeoutSec": t.integer().optional(),
        }
    ).named(renames["RouterNatIn"])
    types["RouterNatOut"] = t.struct(
        {
            "udpIdleTimeoutSec": t.integer().optional(),
            "subnetworks": t.array(
                t.proxy(renames["RouterNatSubnetworkToNatOut"])
            ).optional(),
            "drainNatIps": t.array(t.string()).optional(),
            "enableDynamicPortAllocation": t.boolean().optional(),
            "maxPortsPerVm": t.integer().optional(),
            "name": t.string().optional(),
            "logConfig": t.proxy(renames["RouterNatLogConfigOut"]).optional(),
            "tcpEstablishedIdleTimeoutSec": t.integer().optional(),
            "tcpTransitoryIdleTimeoutSec": t.integer().optional(),
            "natIps": t.array(t.string()).optional(),
            "minPortsPerVm": t.integer().optional(),
            "endpointTypes": t.array(t.string()).optional(),
            "natIpAllocateOption": t.string().optional(),
            "icmpIdleTimeoutSec": t.integer().optional(),
            "enableEndpointIndependentMapping": t.boolean(),
            "sourceSubnetworkIpRangesToNat": t.string().optional(),
            "rules": t.array(t.proxy(renames["RouterNatRuleOut"])).optional(),
            "tcpTimeWaitTimeoutSec": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterNatOut"])
    types["AutoscalerAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["AutoscalerAggregatedListIn"])
    types["AutoscalerAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalerAggregatedListOut"])
    types["SslPoliciesListAvailableFeaturesResponseIn"] = t.struct(
        {"features": t.array(t.string())}
    ).named(renames["SslPoliciesListAvailableFeaturesResponseIn"])
    types["SslPoliciesListAvailableFeaturesResponseOut"] = t.struct(
        {
            "features": t.array(t.string()),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SslPoliciesListAvailableFeaturesResponseOut"])
    types["AutoscalerListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["AutoscalerIn"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["AutoscalerListIn"])
    types["AutoscalerListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["AutoscalerOut"])).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalerListOut"])
    types["StatefulPolicyPreservedStateIn"] = t.struct(
        {"disks": t.struct({"_": t.string().optional()}).optional()}
    ).named(renames["StatefulPolicyPreservedStateIn"])
    types["StatefulPolicyPreservedStateOut"] = t.struct(
        {
            "disks": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StatefulPolicyPreservedStateOut"])
    types["UrlMapsAggregatedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["UrlMapsAggregatedListIn"])
    types["UrlMapsAggregatedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "unreachables": t.array(t.string()).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapsAggregatedListOut"])
    types["AttachedDiskIn"] = t.struct(
        {
            "shieldedInstanceInitialState": t.proxy(
                renames["InitialStateConfigIn"]
            ).optional(),
            "architecture": t.string().optional(),
            "initializeParams": t.proxy(
                renames["AttachedDiskInitializeParamsIn"]
            ).optional(),
            "forceAttach": t.boolean().optional(),
            "diskEncryptionKey": t.proxy(renames["CustomerEncryptionKeyIn"]).optional(),
            "autoDelete": t.boolean().optional(),
            "deviceName": t.string().optional(),
            "kind": t.string().optional(),
            "interface": t.string().optional(),
            "type": t.string().optional(),
            "index": t.integer().optional(),
            "diskSizeGb": t.string().optional(),
            "boot": t.boolean().optional(),
            "guestOsFeatures": t.array(t.proxy(renames["GuestOsFeatureIn"])).optional(),
            "source": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "mode": t.string().optional(),
        }
    ).named(renames["AttachedDiskIn"])
    types["AttachedDiskOut"] = t.struct(
        {
            "shieldedInstanceInitialState": t.proxy(
                renames["InitialStateConfigOut"]
            ).optional(),
            "architecture": t.string().optional(),
            "initializeParams": t.proxy(
                renames["AttachedDiskInitializeParamsOut"]
            ).optional(),
            "forceAttach": t.boolean().optional(),
            "diskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "autoDelete": t.boolean().optional(),
            "deviceName": t.string().optional(),
            "kind": t.string().optional(),
            "interface": t.string().optional(),
            "type": t.string().optional(),
            "index": t.integer().optional(),
            "diskSizeGb": t.string().optional(),
            "boot": t.boolean().optional(),
            "guestOsFeatures": t.array(
                t.proxy(renames["GuestOsFeatureOut"])
            ).optional(),
            "source": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "mode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AttachedDiskOut"])
    types["NetworkAttachmentIn"] = t.struct(
        {
            "connectionPreference": t.string(),
            "selfLinkWithId": t.string().optional(),
            "producerAcceptLists": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "network": t.string().optional(),
            "id": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "producerRejectLists": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "subnetworks": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "connectionEndpoints": t.array(
                t.proxy(renames["NetworkAttachmentConnectedEndpointIn"])
            ).optional(),
        }
    ).named(renames["NetworkAttachmentIn"])
    types["NetworkAttachmentOut"] = t.struct(
        {
            "connectionPreference": t.string(),
            "selfLinkWithId": t.string().optional(),
            "producerAcceptLists": t.array(t.string()).optional(),
            "description": t.string().optional(),
            "network": t.string().optional(),
            "id": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "producerRejectLists": t.array(t.string()).optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "subnetworks": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "connectionEndpoints": t.array(
                t.proxy(renames["NetworkAttachmentConnectedEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkAttachmentOut"])
    types["InstanceGroupManagersSetInstanceTemplateRequestIn"] = t.struct(
        {"instanceTemplate": t.string().optional()}
    ).named(renames["InstanceGroupManagersSetInstanceTemplateRequestIn"])
    types["InstanceGroupManagersSetInstanceTemplateRequestOut"] = t.struct(
        {
            "instanceTemplate": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersSetInstanceTemplateRequestOut"])
    types["FirewallPolicyRuleMatcherIn"] = t.struct(
        {
            "destAddressGroups": t.array(t.string()).optional(),
            "destThreatIntelligences": t.array(t.string()).optional(),
            "srcAddressGroups": t.array(t.string()).optional(),
            "srcThreatIntelligences": t.array(t.string()).optional(),
            "destRegionCodes": t.array(t.string()).optional(),
            "srcRegionCodes": t.array(t.string()).optional(),
            "srcSecureTags": t.array(
                t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
            ).optional(),
            "srcIpRanges": t.array(t.string()).optional(),
            "srcFqdns": t.array(t.string()).optional(),
            "destIpRanges": t.array(t.string()).optional(),
            "destFqdns": t.array(t.string()).optional(),
            "layer4Configs": t.array(
                t.proxy(renames["FirewallPolicyRuleMatcherLayer4ConfigIn"])
            ).optional(),
        }
    ).named(renames["FirewallPolicyRuleMatcherIn"])
    types["FirewallPolicyRuleMatcherOut"] = t.struct(
        {
            "destAddressGroups": t.array(t.string()).optional(),
            "destThreatIntelligences": t.array(t.string()).optional(),
            "srcAddressGroups": t.array(t.string()).optional(),
            "srcThreatIntelligences": t.array(t.string()).optional(),
            "destRegionCodes": t.array(t.string()).optional(),
            "srcRegionCodes": t.array(t.string()).optional(),
            "srcSecureTags": t.array(
                t.proxy(renames["FirewallPolicyRuleSecureTagOut"])
            ).optional(),
            "srcIpRanges": t.array(t.string()).optional(),
            "srcFqdns": t.array(t.string()).optional(),
            "destIpRanges": t.array(t.string()).optional(),
            "destFqdns": t.array(t.string()).optional(),
            "layer4Configs": t.array(
                t.proxy(renames["FirewallPolicyRuleMatcherLayer4ConfigOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyRuleMatcherOut"])
    types["DurationIn"] = t.struct(
        {"seconds": t.string().optional(), "nanos": t.integer().optional()}
    ).named(renames["DurationIn"])
    types["DurationOut"] = t.struct(
        {
            "seconds": t.string().optional(),
            "nanos": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DurationOut"])
    types["UrlMapValidationResultIn"] = t.struct(
        {
            "testPassed": t.boolean().optional(),
            "testFailures": t.array(t.proxy(renames["TestFailureIn"])),
            "loadErrors": t.array(t.string()),
            "loadSucceeded": t.boolean().optional(),
        }
    ).named(renames["UrlMapValidationResultIn"])
    types["UrlMapValidationResultOut"] = t.struct(
        {
            "testPassed": t.boolean().optional(),
            "testFailures": t.array(t.proxy(renames["TestFailureOut"])),
            "loadErrors": t.array(t.string()),
            "loadSucceeded": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapValidationResultOut"])
    types["NodeGroupsDeleteNodesRequestIn"] = t.struct(
        {"nodes": t.array(t.string()).optional()}
    ).named(renames["NodeGroupsDeleteNodesRequestIn"])
    types["NodeGroupsDeleteNodesRequestOut"] = t.struct(
        {
            "nodes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsDeleteNodesRequestOut"])
    types["DiskAsyncReplicationIn"] = t.struct(
        {
            "disk": t.string().optional(),
            "consistencyGroupPolicy": t.string().optional(),
            "diskId": t.string().optional(),
            "consistencyGroupPolicyId": t.string().optional(),
        }
    ).named(renames["DiskAsyncReplicationIn"])
    types["DiskAsyncReplicationOut"] = t.struct(
        {
            "disk": t.string().optional(),
            "consistencyGroupPolicy": t.string().optional(),
            "diskId": t.string().optional(),
            "consistencyGroupPolicyId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskAsyncReplicationOut"])
    types["DistributionPolicyZoneConfigurationIn"] = t.struct(
        {"zone": t.string().optional()}
    ).named(renames["DistributionPolicyZoneConfigurationIn"])
    types["DistributionPolicyZoneConfigurationOut"] = t.struct(
        {
            "zone": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DistributionPolicyZoneConfigurationOut"])
    types["NetworkEdgeSecurityServiceIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "selfLinkWithId": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "securityPolicy": t.string().optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["NetworkEdgeSecurityServiceIn"])
    types["NetworkEdgeSecurityServiceOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "fingerprint": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "selfLinkWithId": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "securityPolicy": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEdgeSecurityServiceOut"])
    types["UrlMapListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["UrlMapIn"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["UrlMapListIn"])
    types["UrlMapListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["UrlMapOut"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapListOut"])
    types["DiskListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["DiskIn"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["DiskListIn"])
    types["DiskListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["DiskOut"])).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskListOut"])
    types["RouterNatSubnetworkToNatIn"] = t.struct(
        {
            "sourceIpRangesToNat": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "secondaryIpRangeNames": t.array(t.string()).optional(),
        }
    ).named(renames["RouterNatSubnetworkToNatIn"])
    types["RouterNatSubnetworkToNatOut"] = t.struct(
        {
            "sourceIpRangesToNat": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "secondaryIpRangeNames": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterNatSubnetworkToNatOut"])
    types["TestPermissionsResponseIn"] = t.struct(
        {"permissions": t.array(t.string()).optional()}
    ).named(renames["TestPermissionsResponseIn"])
    types["TestPermissionsResponseOut"] = t.struct(
        {
            "permissions": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TestPermissionsResponseOut"])
    types["HealthChecksAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["HealthChecksAggregatedListIn"])
    types["HealthChecksAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthChecksAggregatedListOut"])
    types["InterconnectRemoteLocationListIn"] = t.struct(
        {
            "items": t.array(
                t.proxy(renames["InterconnectRemoteLocationIn"])
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["InterconnectRemoteLocationListIn"])
    types["InterconnectRemoteLocationListOut"] = t.struct(
        {
            "items": t.array(
                t.proxy(renames["InterconnectRemoteLocationOut"])
            ).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectRemoteLocationListOut"])
    types["BackendServiceCdnPolicyBypassCacheOnRequestHeaderIn"] = t.struct(
        {"headerName": t.string().optional()}
    ).named(renames["BackendServiceCdnPolicyBypassCacheOnRequestHeaderIn"])
    types["BackendServiceCdnPolicyBypassCacheOnRequestHeaderOut"] = t.struct(
        {
            "headerName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceCdnPolicyBypassCacheOnRequestHeaderOut"])
    types["InterconnectDiagnosticsLinkOpticalPowerIn"] = t.struct(
        {"value": t.number().optional(), "state": t.string().optional()}
    ).named(renames["InterconnectDiagnosticsLinkOpticalPowerIn"])
    types["InterconnectDiagnosticsLinkOpticalPowerOut"] = t.struct(
        {
            "value": t.number().optional(),
            "state": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectDiagnosticsLinkOpticalPowerOut"])
    types["InstancesAddResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["InstancesAddResourcePoliciesRequestIn"])
    types["InstancesAddResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesAddResourcePoliciesRequestOut"])
    types["RegionIn"] = t.struct(
        {
            "zones": t.array(t.string()).optional(),
            "supportsPzs": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "status": t.string().optional(),
            "id": t.string().optional(),
            "quotas": t.array(t.proxy(renames["QuotaIn"])).optional(),
            "name": t.string().optional(),
        }
    ).named(renames["RegionIn"])
    types["RegionOut"] = t.struct(
        {
            "zones": t.array(t.string()).optional(),
            "supportsPzs": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "creationTimestamp": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "status": t.string().optional(),
            "id": t.string().optional(),
            "quotas": t.array(t.proxy(renames["QuotaOut"])).optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionOut"])
    types["TargetTcpProxyIn"] = t.struct(
        {
            "proxyHeader": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "proxyBind": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "service": t.string().optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["TargetTcpProxyIn"])
    types["TargetTcpProxyOut"] = t.struct(
        {
            "proxyHeader": t.string().optional(),
            "kind": t.string().optional(),
            "description": t.string().optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "proxyBind": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "region": t.string().optional(),
            "service": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxyOut"])
    types["BackendServiceConnectionTrackingPolicyIn"] = t.struct(
        {
            "enableStrongAffinity": t.boolean().optional(),
            "connectionPersistenceOnUnhealthyBackends": t.string().optional(),
            "idleTimeoutSec": t.integer().optional(),
            "trackingMode": t.string().optional(),
        }
    ).named(renames["BackendServiceConnectionTrackingPolicyIn"])
    types["BackendServiceConnectionTrackingPolicyOut"] = t.struct(
        {
            "enableStrongAffinity": t.boolean().optional(),
            "connectionPersistenceOnUnhealthyBackends": t.string().optional(),
            "idleTimeoutSec": t.integer().optional(),
            "trackingMode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceConnectionTrackingPolicyOut"])
    types["ServiceAccountIn"] = t.struct(
        {"email": t.string().optional(), "scopes": t.array(t.string()).optional()}
    ).named(renames["ServiceAccountIn"])
    types["ServiceAccountOut"] = t.struct(
        {
            "email": t.string().optional(),
            "scopes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAccountOut"])
    types["BfdStatusIn"] = t.struct(
        {
            "uptimeMs": t.string().optional(),
            "bfdSessionInitializationMode": t.string().optional(),
            "txPacket": t.proxy(renames["BfdPacketIn"]).optional(),
            "controlPacketCounts": t.proxy(
                renames["BfdStatusPacketCountsIn"]
            ).optional(),
            "controlPacketIntervals": t.array(
                t.proxy(renames["PacketIntervalsIn"])
            ).optional(),
            "localDiagnostic": t.string().optional(),
            "negotiatedLocalControlTxIntervalMs": t.integer().optional(),
            "rxPacket": t.proxy(renames["BfdPacketIn"]).optional(),
            "configUpdateTimestampMicros": t.string().optional(),
            "localState": t.string().optional(),
        }
    ).named(renames["BfdStatusIn"])
    types["BfdStatusOut"] = t.struct(
        {
            "uptimeMs": t.string().optional(),
            "bfdSessionInitializationMode": t.string().optional(),
            "txPacket": t.proxy(renames["BfdPacketOut"]).optional(),
            "controlPacketCounts": t.proxy(
                renames["BfdStatusPacketCountsOut"]
            ).optional(),
            "controlPacketIntervals": t.array(
                t.proxy(renames["PacketIntervalsOut"])
            ).optional(),
            "localDiagnostic": t.string().optional(),
            "negotiatedLocalControlTxIntervalMs": t.integer().optional(),
            "rxPacket": t.proxy(renames["BfdPacketOut"]).optional(),
            "configUpdateTimestampMicros": t.string().optional(),
            "localState": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BfdStatusOut"])
    types["DisksScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "disks": t.array(t.proxy(renames["DiskIn"])).optional(),
        }
    ).named(renames["DisksScopedListIn"])
    types["DisksScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "disks": t.array(t.proxy(renames["DiskOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DisksScopedListOut"])
    types["UsableSubnetworkSecondaryRangeIn"] = t.struct(
        {"ipCidrRange": t.string().optional(), "rangeName": t.string().optional()}
    ).named(renames["UsableSubnetworkSecondaryRangeIn"])
    types["UsableSubnetworkSecondaryRangeOut"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "rangeName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UsableSubnetworkSecondaryRangeOut"])
    types["RegionInstanceGroupsListInstancesIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceWithNamedPortsIn"])).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["RegionInstanceGroupsListInstancesIn"])
    types["RegionInstanceGroupsListInstancesOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["InstanceWithNamedPortsOut"])).optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupsListInstancesOut"])
    types["BfdPacketIn"] = t.struct(
        {
            "state": t.string().optional(),
            "minTxIntervalMs": t.integer().optional(),
            "myDiscriminator": t.integer().optional(),
            "multipoint": t.boolean().optional(),
            "length": t.integer().optional(),
            "yourDiscriminator": t.integer().optional(),
            "demand": t.boolean().optional(),
            "minEchoRxIntervalMs": t.integer().optional(),
            "diagnostic": t.string().optional(),
            "poll": t.boolean().optional(),
            "final": t.boolean().optional(),
            "minRxIntervalMs": t.integer().optional(),
            "controlPlaneIndependent": t.boolean().optional(),
            "authenticationPresent": t.boolean().optional(),
            "version": t.integer().optional(),
            "multiplier": t.integer().optional(),
        }
    ).named(renames["BfdPacketIn"])
    types["BfdPacketOut"] = t.struct(
        {
            "state": t.string().optional(),
            "minTxIntervalMs": t.integer().optional(),
            "myDiscriminator": t.integer().optional(),
            "multipoint": t.boolean().optional(),
            "length": t.integer().optional(),
            "yourDiscriminator": t.integer().optional(),
            "demand": t.boolean().optional(),
            "minEchoRxIntervalMs": t.integer().optional(),
            "diagnostic": t.string().optional(),
            "poll": t.boolean().optional(),
            "final": t.boolean().optional(),
            "minRxIntervalMs": t.integer().optional(),
            "controlPlaneIndependent": t.boolean().optional(),
            "authenticationPresent": t.boolean().optional(),
            "version": t.integer().optional(),
            "multiplier": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BfdPacketOut"])
    types["ExprIn"] = t.struct(
        {
            "description": t.string().optional(),
            "expression": t.string().optional(),
            "title": t.string().optional(),
            "location": t.string().optional(),
        }
    ).named(renames["ExprIn"])
    types["ExprOut"] = t.struct(
        {
            "description": t.string().optional(),
            "expression": t.string().optional(),
            "title": t.string().optional(),
            "location": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ExprOut"])
    types["DiskTypeIn"] = t.struct(
        {
            "zone": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "validDiskSize": t.string().optional(),
            "description": t.string().optional(),
            "defaultDiskSizeGb": t.string().optional(),
            "kind": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["DiskTypeIn"])
    types["DiskTypeOut"] = t.struct(
        {
            "zone": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "region": t.string().optional(),
            "validDiskSize": t.string().optional(),
            "description": t.string().optional(),
            "defaultDiskSizeGb": t.string().optional(),
            "kind": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskTypeOut"])
    types["SecurityPolicyAdvancedOptionsConfigIn"] = t.struct(
        {
            "jsonParsing": t.string(),
            "logLevel": t.string(),
            "jsonCustomConfig": t.proxy(
                renames["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigIn"]
            ).optional(),
        }
    ).named(renames["SecurityPolicyAdvancedOptionsConfigIn"])
    types["SecurityPolicyAdvancedOptionsConfigOut"] = t.struct(
        {
            "jsonParsing": t.string(),
            "logLevel": t.string(),
            "jsonCustomConfig": t.proxy(
                renames["SecurityPolicyAdvancedOptionsConfigJsonCustomConfigOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyAdvancedOptionsConfigOut"])
    types["ShareSettingsProjectConfigIn"] = t.struct(
        {"projectId": t.string().optional()}
    ).named(renames["ShareSettingsProjectConfigIn"])
    types["ShareSettingsProjectConfigOut"] = t.struct(
        {
            "projectId": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShareSettingsProjectConfigOut"])
    types["AcceleratorTypesScopedListIn"] = t.struct(
        {
            "acceleratorTypes": t.array(
                t.proxy(renames["AcceleratorTypeIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["AcceleratorTypesScopedListIn"])
    types["AcceleratorTypesScopedListOut"] = t.struct(
        {
            "acceleratorTypes": t.array(
                t.proxy(renames["AcceleratorTypeOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AcceleratorTypesScopedListOut"])
    types["ReservationsResizeRequestIn"] = t.struct(
        {"specificSkuCount": t.string().optional()}
    ).named(renames["ReservationsResizeRequestIn"])
    types["ReservationsResizeRequestOut"] = t.struct(
        {
            "specificSkuCount": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ReservationsResizeRequestOut"])
    types["ResourcePolicyHourlyCycleIn"] = t.struct(
        {
            "hoursInCycle": t.integer().optional(),
            "startTime": t.string().optional(),
            "duration": t.string().optional(),
        }
    ).named(renames["ResourcePolicyHourlyCycleIn"])
    types["ResourcePolicyHourlyCycleOut"] = t.struct(
        {
            "hoursInCycle": t.integer().optional(),
            "startTime": t.string().optional(),
            "duration": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyHourlyCycleOut"])
    types["ManagedInstanceLastAttemptIn"] = t.struct(
        {
            "errors": t.struct(
                {
                    "errors": t.array(
                        t.struct(
                            {
                                "location": t.string().optional(),
                                "code": t.string().optional(),
                                "message": t.string().optional(),
                                "errorDetails": t.array(
                                    t.struct(
                                        {
                                            "localizedMessage": t.proxy(
                                                renames["LocalizedMessageIn"]
                                            ),
                                            "quotaInfo": t.proxy(
                                                renames["QuotaExceededInfoIn"]
                                            ),
                                            "help": t.proxy(renames["HelpIn"]),
                                            "errorInfo": t.proxy(
                                                renames["ErrorInfoIn"]
                                            ),
                                        }
                                    )
                                ).optional(),
                            }
                        )
                    ).optional()
                }
            ).optional()
        }
    ).named(renames["ManagedInstanceLastAttemptIn"])
    types["ManagedInstanceLastAttemptOut"] = t.struct(
        {
            "errors": t.struct(
                {
                    "errors": t.array(
                        t.struct(
                            {
                                "location": t.string().optional(),
                                "code": t.string().optional(),
                                "message": t.string().optional(),
                                "errorDetails": t.array(
                                    t.struct(
                                        {
                                            "localizedMessage": t.proxy(
                                                renames["LocalizedMessageOut"]
                                            ),
                                            "quotaInfo": t.proxy(
                                                renames["QuotaExceededInfoOut"]
                                            ),
                                            "help": t.proxy(renames["HelpOut"]),
                                            "errorInfo": t.proxy(
                                                renames["ErrorInfoOut"]
                                            ),
                                        }
                                    )
                                ).optional(),
                            }
                        )
                    ).optional()
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ManagedInstanceLastAttemptOut"])
    types["ResourcePolicyDailyCycleIn"] = t.struct(
        {
            "startTime": t.string().optional(),
            "daysInCycle": t.integer().optional(),
            "duration": t.string().optional(),
        }
    ).named(renames["ResourcePolicyDailyCycleIn"])
    types["ResourcePolicyDailyCycleOut"] = t.struct(
        {
            "startTime": t.string().optional(),
            "daysInCycle": t.integer().optional(),
            "duration": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyDailyCycleOut"])
    types["ResourcePolicySnapshotSchedulePolicyIn"] = t.struct(
        {
            "retentionPolicy": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyRetentionPolicyIn"]
            ).optional(),
            "snapshotProperties": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesIn"]
            ).optional(),
            "schedule": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyScheduleIn"]
            ).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyIn"])
    types["ResourcePolicySnapshotSchedulePolicyOut"] = t.struct(
        {
            "retentionPolicy": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyRetentionPolicyOut"]
            ).optional(),
            "snapshotProperties": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOut"]
            ).optional(),
            "schedule": t.proxy(
                renames["ResourcePolicySnapshotSchedulePolicyScheduleOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicySnapshotSchedulePolicyOut"])
    types["NetworkPerformanceConfigIn"] = t.struct(
        {"totalEgressBandwidthTier": t.string()}
    ).named(renames["NetworkPerformanceConfigIn"])
    types["NetworkPerformanceConfigOut"] = t.struct(
        {
            "totalEgressBandwidthTier": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkPerformanceConfigOut"])
    types["InstancesRemoveResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["InstancesRemoveResourcePoliciesRequestIn"])
    types["InstancesRemoveResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesRemoveResourcePoliciesRequestOut"])
    types["NodeGroupAutoscalingPolicyIn"] = t.struct(
        {
            "minNodes": t.integer().optional(),
            "maxNodes": t.integer().optional(),
            "mode": t.string().optional(),
        }
    ).named(renames["NodeGroupAutoscalingPolicyIn"])
    types["NodeGroupAutoscalingPolicyOut"] = t.struct(
        {
            "minNodes": t.integer().optional(),
            "maxNodes": t.integer().optional(),
            "mode": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupAutoscalingPolicyOut"])
    types["DisplayDeviceIn"] = t.struct(
        {"enableDisplay": t.boolean().optional()}
    ).named(renames["DisplayDeviceIn"])
    types["DisplayDeviceOut"] = t.struct(
        {
            "enableDisplay": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DisplayDeviceOut"])
    types["RuleIn"] = t.struct(
        {
            "description": t.string().optional(),
            "notIns": t.array(t.string()).optional(),
            "ins": t.array(t.string()).optional(),
            "logConfigs": t.array(t.proxy(renames["LogConfigIn"])).optional(),
            "action": t.string().optional(),
            "permissions": t.array(t.string()).optional(),
            "conditions": t.array(t.proxy(renames["ConditionIn"])).optional(),
        }
    ).named(renames["RuleIn"])
    types["RuleOut"] = t.struct(
        {
            "description": t.string().optional(),
            "notIns": t.array(t.string()).optional(),
            "ins": t.array(t.string()).optional(),
            "logConfigs": t.array(t.proxy(renames["LogConfigOut"])).optional(),
            "action": t.string().optional(),
            "permissions": t.array(t.string()).optional(),
            "conditions": t.array(t.proxy(renames["ConditionOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RuleOut"])
    types["NamedPortIn"] = t.struct(
        {"name": t.string().optional(), "port": t.integer().optional()}
    ).named(renames["NamedPortIn"])
    types["NamedPortOut"] = t.struct(
        {
            "name": t.string().optional(),
            "port": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NamedPortOut"])
    types["BackendServiceCdnPolicyIn"] = t.struct(
        {
            "cacheKeyPolicy": t.proxy(renames["CacheKeyPolicyIn"]).optional(),
            "clientTtl": t.integer().optional(),
            "signedUrlCacheMaxAgeSec": t.string().optional(),
            "signedUrlKeyNames": t.array(t.string()).optional(),
            "serveWhileStale": t.integer().optional(),
            "negativeCachingPolicy": t.array(
                t.proxy(renames["BackendServiceCdnPolicyNegativeCachingPolicyIn"])
            ).optional(),
            "cacheMode": t.string().optional(),
            "bypassCacheOnRequestHeaders": t.array(
                t.proxy(renames["BackendServiceCdnPolicyBypassCacheOnRequestHeaderIn"])
            ).optional(),
            "requestCoalescing": t.boolean().optional(),
            "negativeCaching": t.boolean().optional(),
            "maxTtl": t.integer().optional(),
            "defaultTtl": t.integer().optional(),
        }
    ).named(renames["BackendServiceCdnPolicyIn"])
    types["BackendServiceCdnPolicyOut"] = t.struct(
        {
            "cacheKeyPolicy": t.proxy(renames["CacheKeyPolicyOut"]).optional(),
            "clientTtl": t.integer().optional(),
            "signedUrlCacheMaxAgeSec": t.string().optional(),
            "signedUrlKeyNames": t.array(t.string()).optional(),
            "serveWhileStale": t.integer().optional(),
            "negativeCachingPolicy": t.array(
                t.proxy(renames["BackendServiceCdnPolicyNegativeCachingPolicyOut"])
            ).optional(),
            "cacheMode": t.string().optional(),
            "bypassCacheOnRequestHeaders": t.array(
                t.proxy(renames["BackendServiceCdnPolicyBypassCacheOnRequestHeaderOut"])
            ).optional(),
            "requestCoalescing": t.boolean().optional(),
            "negativeCaching": t.boolean().optional(),
            "maxTtl": t.integer().optional(),
            "defaultTtl": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceCdnPolicyOut"])
    types["LogConfigCounterOptionsCustomFieldIn"] = t.struct(
        {"value": t.string().optional(), "name": t.string().optional()}
    ).named(renames["LogConfigCounterOptionsCustomFieldIn"])
    types["LogConfigCounterOptionsCustomFieldOut"] = t.struct(
        {
            "value": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogConfigCounterOptionsCustomFieldOut"])
    types["RouterAdvertisedIpRangeIn"] = t.struct(
        {"range": t.string().optional(), "description": t.string().optional()}
    ).named(renames["RouterAdvertisedIpRangeIn"])
    types["RouterAdvertisedIpRangeOut"] = t.struct(
        {
            "range": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterAdvertisedIpRangeOut"])
    types["ResourcePolicyWeeklyCycleIn"] = t.struct(
        {
            "dayOfWeeks": t.array(
                t.proxy(renames["ResourcePolicyWeeklyCycleDayOfWeekIn"])
            ).optional()
        }
    ).named(renames["ResourcePolicyWeeklyCycleIn"])
    types["ResourcePolicyWeeklyCycleOut"] = t.struct(
        {
            "dayOfWeeks": t.array(
                t.proxy(renames["ResourcePolicyWeeklyCycleDayOfWeekOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyWeeklyCycleOut"])
    types["BackendBucketIn"] = t.struct(
        {
            "id": t.string().optional(),
            "cdnPolicy": t.proxy(renames["BackendBucketCdnPolicyIn"]).optional(),
            "compressionMode": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "enableCdn": t.boolean().optional(),
            "bucketName": t.string().optional(),
            "customResponseHeaders": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "edgeSecurityPolicy": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["BackendBucketIn"])
    types["BackendBucketOut"] = t.struct(
        {
            "id": t.string().optional(),
            "cdnPolicy": t.proxy(renames["BackendBucketCdnPolicyOut"]).optional(),
            "compressionMode": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "enableCdn": t.boolean().optional(),
            "bucketName": t.string().optional(),
            "customResponseHeaders": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "edgeSecurityPolicy": t.string().optional(),
            "name": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketOut"])
    types["AutoscalingPolicyScalingScheduleIn"] = t.struct(
        {
            "timeZone": t.string().optional(),
            "durationSec": t.integer().optional(),
            "description": t.string().optional(),
            "schedule": t.string().optional(),
            "disabled": t.boolean().optional(),
            "minRequiredReplicas": t.integer().optional(),
        }
    ).named(renames["AutoscalingPolicyScalingScheduleIn"])
    types["AutoscalingPolicyScalingScheduleOut"] = t.struct(
        {
            "timeZone": t.string().optional(),
            "durationSec": t.integer().optional(),
            "description": t.string().optional(),
            "schedule": t.string().optional(),
            "disabled": t.boolean().optional(),
            "minRequiredReplicas": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalingPolicyScalingScheduleOut"])
    types["VpnGatewayStatusIn"] = t.struct(
        {
            "vpnConnections": t.array(
                t.proxy(renames["VpnGatewayStatusVpnConnectionIn"])
            ).optional()
        }
    ).named(renames["VpnGatewayStatusIn"])
    types["VpnGatewayStatusOut"] = t.struct(
        {
            "vpnConnections": t.array(
                t.proxy(renames["VpnGatewayStatusVpnConnectionOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayStatusOut"])
    types["SecurityPoliciesWafConfigIn"] = t.struct(
        {"wafRules": t.proxy(renames["PreconfiguredWafSetIn"])}
    ).named(renames["SecurityPoliciesWafConfigIn"])
    types["SecurityPoliciesWafConfigOut"] = t.struct(
        {
            "wafRules": t.proxy(renames["PreconfiguredWafSetOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPoliciesWafConfigOut"])
    types["GlobalNetworkEndpointGroupsDetachEndpointsRequestIn"] = t.struct(
        {"networkEndpoints": t.array(t.proxy(renames["NetworkEndpointIn"])).optional()}
    ).named(renames["GlobalNetworkEndpointGroupsDetachEndpointsRequestIn"])
    types["GlobalNetworkEndpointGroupsDetachEndpointsRequestOut"] = t.struct(
        {
            "networkEndpoints": t.array(
                t.proxy(renames["NetworkEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalNetworkEndpointGroupsDetachEndpointsRequestOut"])
    types["DistributionPolicyIn"] = t.struct(
        {
            "zones": t.array(
                t.proxy(renames["DistributionPolicyZoneConfigurationIn"])
            ).optional(),
            "targetShape": t.string().optional(),
        }
    ).named(renames["DistributionPolicyIn"])
    types["DistributionPolicyOut"] = t.struct(
        {
            "zones": t.array(
                t.proxy(renames["DistributionPolicyZoneConfigurationOut"])
            ).optional(),
            "targetShape": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DistributionPolicyOut"])
    types["HttpFaultDelayIn"] = t.struct(
        {
            "fixedDelay": t.proxy(renames["DurationIn"]).optional(),
            "percentage": t.number().optional(),
        }
    ).named(renames["HttpFaultDelayIn"])
    types["HttpFaultDelayOut"] = t.struct(
        {
            "fixedDelay": t.proxy(renames["DurationOut"]).optional(),
            "percentage": t.number().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpFaultDelayOut"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigIn"] = t.struct(
        {
            "policy": t.proxy(
                renames["BackendServiceLocalityLoadBalancingPolicyConfigPolicyIn"]
            ),
            "customPolicy": t.proxy(
                renames["BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyIn"]
            ),
        }
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"])
    types["BackendServiceLocalityLoadBalancingPolicyConfigOut"] = t.struct(
        {
            "policy": t.proxy(
                renames["BackendServiceLocalityLoadBalancingPolicyConfigPolicyOut"]
            ),
            "customPolicy": t.proxy(
                renames[
                    "BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyOut"
                ]
            ),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceLocalityLoadBalancingPolicyConfigOut"])
    types["NodeTypeListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["NodeTypeIn"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["NodeTypeListIn"])
    types["NodeTypeListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["NodeTypeOut"])).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTypeListOut"])
    types["TargetPoolListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetPoolIn"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["TargetPoolListIn"])
    types["TargetPoolListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetPoolOut"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolListOut"])
    types["TargetInstanceAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["TargetInstanceAggregatedListIn"])
    types["TargetInstanceAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetInstanceAggregatedListOut"])
    types["InterconnectAttachmentPartnerMetadataIn"] = t.struct(
        {
            "partnerName": t.string().optional(),
            "interconnectName": t.string().optional(),
            "portalUrl": t.string().optional(),
        }
    ).named(renames["InterconnectAttachmentPartnerMetadataIn"])
    types["InterconnectAttachmentPartnerMetadataOut"] = t.struct(
        {
            "partnerName": t.string().optional(),
            "interconnectName": t.string().optional(),
            "portalUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentPartnerMetadataOut"])
    types["TargetHttpsProxiesSetSslCertificatesRequestIn"] = t.struct(
        {"sslCertificates": t.array(t.string()).optional()}
    ).named(renames["TargetHttpsProxiesSetSslCertificatesRequestIn"])
    types["TargetHttpsProxiesSetSslCertificatesRequestOut"] = t.struct(
        {
            "sslCertificates": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxiesSetSslCertificatesRequestOut"])
    types["HTTPSHealthCheckIn"] = t.struct(
        {
            "host": t.string().optional(),
            "portSpecification": t.string().optional(),
            "requestPath": t.string().optional(),
            "response": t.string().optional(),
            "port": t.integer().optional(),
            "portName": t.string().optional(),
            "proxyHeader": t.string().optional(),
        }
    ).named(renames["HTTPSHealthCheckIn"])
    types["HTTPSHealthCheckOut"] = t.struct(
        {
            "host": t.string().optional(),
            "portSpecification": t.string().optional(),
            "requestPath": t.string().optional(),
            "response": t.string().optional(),
            "port": t.integer().optional(),
            "portName": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HTTPSHealthCheckOut"])
    types["AutoscalerIn"] = t.struct(
        {
            "recommendedSize": t.integer().optional(),
            "description": t.string().optional(),
            "zone": t.string().optional(),
            "autoscalingPolicy": t.proxy(renames["AutoscalingPolicyIn"]).optional(),
            "target": t.string().optional(),
            "id": t.string().optional(),
            "scalingScheduleStatus": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "status": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "statusDetails": t.array(
                t.proxy(renames["AutoscalerStatusDetailsIn"])
            ).optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["AutoscalerIn"])
    types["AutoscalerOut"] = t.struct(
        {
            "recommendedSize": t.integer().optional(),
            "description": t.string().optional(),
            "zone": t.string().optional(),
            "autoscalingPolicy": t.proxy(renames["AutoscalingPolicyOut"]).optional(),
            "target": t.string().optional(),
            "id": t.string().optional(),
            "scalingScheduleStatus": t.struct({"_": t.string().optional()}).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "status": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "statusDetails": t.array(
                t.proxy(renames["AutoscalerStatusDetailsOut"])
            ).optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalerOut"])
    types["HttpHeaderOptionIn"] = t.struct(
        {
            "headerName": t.string().optional(),
            "headerValue": t.string().optional(),
            "replace": t.boolean().optional(),
        }
    ).named(renames["HttpHeaderOptionIn"])
    types["HttpHeaderOptionOut"] = t.struct(
        {
            "headerName": t.string().optional(),
            "headerValue": t.string().optional(),
            "replace": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpHeaderOptionOut"])
    types["DiskTypeAggregatedListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["DiskTypeAggregatedListIn"])
    types["DiskTypeAggregatedListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "unreachables": t.array(t.string()).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DiskTypeAggregatedListOut"])
    types["CircuitBreakersIn"] = t.struct(
        {
            "maxRequestsPerConnection": t.integer().optional(),
            "maxRetries": t.integer().optional(),
            "maxPendingRequests": t.integer().optional(),
            "maxRequests": t.integer().optional(),
            "maxConnections": t.integer().optional(),
        }
    ).named(renames["CircuitBreakersIn"])
    types["CircuitBreakersOut"] = t.struct(
        {
            "maxRequestsPerConnection": t.integer().optional(),
            "maxRetries": t.integer().optional(),
            "maxPendingRequests": t.integer().optional(),
            "maxRequests": t.integer().optional(),
            "maxConnections": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CircuitBreakersOut"])
    types["SignedUrlKeyIn"] = t.struct(
        {"keyValue": t.string().optional(), "keyName": t.string().optional()}
    ).named(renames["SignedUrlKeyIn"])
    types["SignedUrlKeyOut"] = t.struct(
        {
            "keyValue": t.string().optional(),
            "keyName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SignedUrlKeyOut"])
    types["VpnGatewayStatusTunnelIn"] = t.struct(
        {
            "localGatewayInterface": t.integer().optional(),
            "peerGatewayInterface": t.integer().optional(),
            "tunnelUrl": t.string().optional(),
        }
    ).named(renames["VpnGatewayStatusTunnelIn"])
    types["VpnGatewayStatusTunnelOut"] = t.struct(
        {
            "localGatewayInterface": t.integer().optional(),
            "peerGatewayInterface": t.integer().optional(),
            "tunnelUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnGatewayStatusTunnelOut"])
    types["UrlMapTestHeaderIn"] = t.struct(
        {"value": t.string().optional(), "name": t.string().optional()}
    ).named(renames["UrlMapTestHeaderIn"])
    types["UrlMapTestHeaderOut"] = t.struct(
        {
            "value": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["UrlMapTestHeaderOut"])
    types["HttpHealthCheckListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HttpHealthCheckIn"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["HttpHealthCheckListIn"])
    types["HttpHealthCheckListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["HttpHealthCheckOut"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpHealthCheckListOut"])
    types["ForwardingRulesScopedListIn"] = t.struct(
        {
            "forwardingRules": t.array(t.proxy(renames["ForwardingRuleIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["ForwardingRulesScopedListIn"])
    types["ForwardingRulesScopedListOut"] = t.struct(
        {
            "forwardingRules": t.array(
                t.proxy(renames["ForwardingRuleOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRulesScopedListOut"])
    types["InstancesGetEffectiveFirewallsResponseIn"] = t.struct(
        {
            "firewalls": t.array(t.proxy(renames["FirewallIn"])).optional(),
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"
                    ]
                )
            ).optional(),
        }
    ).named(renames["InstancesGetEffectiveFirewallsResponseIn"])
    types["InstancesGetEffectiveFirewallsResponseOut"] = t.struct(
        {
            "firewalls": t.array(t.proxy(renames["FirewallOut"])).optional(),
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
                    ]
                )
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstancesGetEffectiveFirewallsResponseOut"])
    types["NodeGroupsSimulateMaintenanceEventRequestIn"] = t.struct(
        {"nodes": t.array(t.string()).optional()}
    ).named(renames["NodeGroupsSimulateMaintenanceEventRequestIn"])
    types["NodeGroupsSimulateMaintenanceEventRequestOut"] = t.struct(
        {
            "nodes": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupsSimulateMaintenanceEventRequestOut"])
    types["RouterNatRuleIn"] = t.struct(
        {
            "ruleNumber": t.integer().optional(),
            "match": t.string().optional(),
            "action": t.proxy(renames["RouterNatRuleActionIn"]).optional(),
            "description": t.string().optional(),
        }
    ).named(renames["RouterNatRuleIn"])
    types["RouterNatRuleOut"] = t.struct(
        {
            "ruleNumber": t.integer().optional(),
            "match": t.string().optional(),
            "action": t.proxy(renames["RouterNatRuleActionOut"]).optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterNatRuleOut"])
    types["ZoneSetPolicyRequestIn"] = t.struct(
        {
            "etag": t.string().optional(),
            "policy": t.proxy(renames["PolicyIn"]).optional(),
            "bindings": t.array(t.proxy(renames["BindingIn"])).optional(),
        }
    ).named(renames["ZoneSetPolicyRequestIn"])
    types["ZoneSetPolicyRequestOut"] = t.struct(
        {
            "etag": t.string().optional(),
            "policy": t.proxy(renames["PolicyOut"]).optional(),
            "bindings": t.array(t.proxy(renames["BindingOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ZoneSetPolicyRequestOut"])
    types["ImageIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "guestOsFeatures": t.array(t.proxy(renames["GuestOsFeatureIn"])).optional(),
            "rawDisk": t.struct(
                {
                    "containerType": t.string().optional(),
                    "sha1Checksum": t.string().optional(),
                    "source": t.string().optional(),
                }
            ).optional(),
            "sourceDisk": t.string().optional(),
            "id": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "sourceImageId": t.string().optional(),
            "status": t.string().optional(),
            "sourceType": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "sourceDiskId": t.string().optional(),
            "description": t.string().optional(),
            "imageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "sourceSnapshotId": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "shieldedInstanceInitialState": t.proxy(
                renames["InitialStateConfigIn"]
            ).optional(),
            "archiveSizeBytes": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "architecture": t.string().optional(),
            "family": t.string().optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "sourceDiskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "sourceSnapshot": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "sourceImage": t.string().optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "diskSizeGb": t.string().optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyIn"]
            ).optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["ImageIn"])
    types["ImageOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "guestOsFeatures": t.array(
                t.proxy(renames["GuestOsFeatureOut"])
            ).optional(),
            "rawDisk": t.struct(
                {
                    "containerType": t.string().optional(),
                    "sha1Checksum": t.string().optional(),
                    "source": t.string().optional(),
                }
            ).optional(),
            "sourceDisk": t.string().optional(),
            "id": t.string().optional(),
            "storageLocations": t.array(t.string()).optional(),
            "sourceImageId": t.string().optional(),
            "status": t.string().optional(),
            "sourceType": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "sourceDiskId": t.string().optional(),
            "description": t.string().optional(),
            "imageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "sourceSnapshotId": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "shieldedInstanceInitialState": t.proxy(
                renames["InitialStateConfigOut"]
            ).optional(),
            "archiveSizeBytes": t.string().optional(),
            "licenses": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "architecture": t.string().optional(),
            "family": t.string().optional(),
            "licenseCodes": t.array(t.string()).optional(),
            "sourceDiskEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "sourceSnapshot": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "sourceImage": t.string().optional(),
            "sourceSnapshotEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "diskSizeGb": t.string().optional(),
            "sourceImageEncryptionKey": t.proxy(
                renames["CustomerEncryptionKeyOut"]
            ).optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ImageOut"])
    types["MachineTypesScopedListIn"] = t.struct(
        {
            "machineTypes": t.array(t.proxy(renames["MachineTypeIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["MachineTypesScopedListIn"])
    types["MachineTypesScopedListOut"] = t.struct(
        {
            "machineTypes": t.array(t.proxy(renames["MachineTypeOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineTypesScopedListOut"])
    types["MetadataIn"] = t.struct(
        {
            "items": t.array(
                t.struct({"value": t.string().optional(), "key": t.string().optional()})
            ).optional(),
            "kind": t.string().optional(),
            "fingerprint": t.string().optional(),
        }
    ).named(renames["MetadataIn"])
    types["MetadataOut"] = t.struct(
        {
            "items": t.array(
                t.struct({"value": t.string().optional(), "key": t.string().optional()})
            ).optional(),
            "kind": t.string().optional(),
            "fingerprint": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MetadataOut"])
    types["TargetPoolAggregatedListIn"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["TargetPoolAggregatedListIn"])
    types["TargetPoolAggregatedListOut"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolAggregatedListOut"])
    types["NodeGroupAggregatedListIn"] = t.struct(
        {
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["NodeGroupAggregatedListIn"])
    types["NodeGroupAggregatedListOut"] = t.struct(
        {
            "items": t.struct({"_": t.string().optional()}).optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupAggregatedListOut"])
    types["ResourceStatusIn"] = t.struct({"physicalHost": t.string().optional()}).named(
        renames["ResourceStatusIn"]
    )
    types["ResourceStatusOut"] = t.struct(
        {
            "physicalHost": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourceStatusOut"])
    types["ShieldedInstanceIntegrityPolicyIn"] = t.struct(
        {"updateAutoLearnPolicy": t.boolean().optional()}
    ).named(renames["ShieldedInstanceIntegrityPolicyIn"])
    types["ShieldedInstanceIntegrityPolicyOut"] = t.struct(
        {
            "updateAutoLearnPolicy": t.boolean().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ShieldedInstanceIntegrityPolicyOut"])
    types["ResourcePolicyInstanceSchedulePolicyScheduleIn"] = t.struct(
        {"schedule": t.string().optional()}
    ).named(renames["ResourcePolicyInstanceSchedulePolicyScheduleIn"])
    types["ResourcePolicyInstanceSchedulePolicyScheduleOut"] = t.struct(
        {
            "schedule": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ResourcePolicyInstanceSchedulePolicyScheduleOut"])
    types["AllocationSpecificSKUReservationIn"] = t.struct(
        {
            "inUseCount": t.string().optional(),
            "sourceInstanceTemplate": t.string().optional(),
            "assuredCount": t.string().optional(),
            "count": t.string().optional(),
            "instanceProperties": t.proxy(
                renames["AllocationSpecificSKUAllocationReservedInstancePropertiesIn"]
            ).optional(),
        }
    ).named(renames["AllocationSpecificSKUReservationIn"])
    types["AllocationSpecificSKUReservationOut"] = t.struct(
        {
            "inUseCount": t.string().optional(),
            "sourceInstanceTemplate": t.string().optional(),
            "assuredCount": t.string().optional(),
            "count": t.string().optional(),
            "instanceProperties": t.proxy(
                renames["AllocationSpecificSKUAllocationReservedInstancePropertiesOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AllocationSpecificSKUReservationOut"])
    types["InstanceGroupManagersListManagedInstancesResponseIn"] = t.struct(
        {
            "managedInstances": t.array(
                t.proxy(renames["ManagedInstanceIn"])
            ).optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagersListManagedInstancesResponseIn"])
    types["InstanceGroupManagersListManagedInstancesResponseOut"] = t.struct(
        {
            "managedInstances": t.array(
                t.proxy(renames["ManagedInstanceOut"])
            ).optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersListManagedInstancesResponseOut"])
    types["PacketMirroringIn"] = t.struct(
        {
            "filter": t.proxy(renames["PacketMirroringFilterIn"]).optional(),
            "enable": t.string().optional(),
            "kind": t.string().optional(),
            "region": t.string().optional(),
            "network": t.proxy(renames["PacketMirroringNetworkInfoIn"]).optional(),
            "id": t.string().optional(),
            "collectorIlb": t.proxy(
                renames["PacketMirroringForwardingRuleInfoIn"]
            ).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "mirroredResources": t.proxy(
                renames["PacketMirroringMirroredResourceInfoIn"]
            ).optional(),
            "description": t.string().optional(),
            "priority": t.integer().optional(),
        }
    ).named(renames["PacketMirroringIn"])
    types["PacketMirroringOut"] = t.struct(
        {
            "filter": t.proxy(renames["PacketMirroringFilterOut"]).optional(),
            "enable": t.string().optional(),
            "kind": t.string().optional(),
            "region": t.string().optional(),
            "network": t.proxy(renames["PacketMirroringNetworkInfoOut"]).optional(),
            "id": t.string().optional(),
            "collectorIlb": t.proxy(
                renames["PacketMirroringForwardingRuleInfoOut"]
            ).optional(),
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "name": t.string().optional(),
            "mirroredResources": t.proxy(
                renames["PacketMirroringMirroredResourceInfoOut"]
            ).optional(),
            "description": t.string().optional(),
            "priority": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringOut"])
    types["GlobalAddressesMoveRequestIn"] = t.struct(
        {
            "description": t.string().optional(),
            "destinationAddress": t.string().optional(),
        }
    ).named(renames["GlobalAddressesMoveRequestIn"])
    types["GlobalAddressesMoveRequestOut"] = t.struct(
        {
            "description": t.string().optional(),
            "destinationAddress": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalAddressesMoveRequestOut"])
    types["HTTP2HealthCheckIn"] = t.struct(
        {
            "port": t.integer().optional(),
            "host": t.string().optional(),
            "requestPath": t.string().optional(),
            "response": t.string().optional(),
            "portSpecification": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "portName": t.string().optional(),
        }
    ).named(renames["HTTP2HealthCheckIn"])
    types["HTTP2HealthCheckOut"] = t.struct(
        {
            "port": t.integer().optional(),
            "host": t.string().optional(),
            "requestPath": t.string().optional(),
            "response": t.string().optional(),
            "portSpecification": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "portName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HTTP2HealthCheckOut"])
    types["BackendBucketListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["BackendBucketIn"])).optional(),
        }
    ).named(renames["BackendBucketListIn"])
    types["BackendBucketListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "nextPageToken": t.string().optional(),
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["BackendBucketOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketListOut"])
    types["InstanceListReferrersIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ReferenceIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["InstanceListReferrersIn"])
    types["InstanceListReferrersOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "items": t.array(t.proxy(renames["ReferenceOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceListReferrersOut"])
    types["InterconnectAttachmentIn"] = t.struct(
        {
            "dataplaneVersion": t.integer().optional(),
            "configurationConstraints": t.proxy(
                renames["InterconnectAttachmentConfigurationConstraintsIn"]
            ).optional(),
            "customerRouterIpv6Address": t.string().optional(),
            "candidateIpv6Subnets": t.array(t.string()).optional(),
            "operationalStatus": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "vlanTag8021q": t.integer().optional(),
            "router": t.string().optional(),
            "cloudRouterIpv6InterfaceId": t.string().optional(),
            "remoteService": t.string().optional(),
            "encryption": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "type": t.string().optional(),
            "candidateSubnets": t.array(t.string()).optional(),
            "subnetLength": t.integer().optional(),
            "kind": t.string().optional(),
            "cloudRouterIpAddress": t.string().optional(),
            "cloudRouterIpv6Address": t.string().optional(),
            "partnerMetadata": t.proxy(
                renames["InterconnectAttachmentPartnerMetadataIn"]
            ).optional(),
            "mtu": t.integer().optional(),
            "ipsecInternalAddresses": t.array(t.string()).optional(),
            "pairingKey": t.string().optional(),
            "bandwidth": t.string().optional(),
            "customerRouterIpv6InterfaceId": t.string().optional(),
            "selfLink": t.string().optional(),
            "edgeAvailabilityDomain": t.string().optional(),
            "id": t.string().optional(),
            "customerRouterIpAddress": t.string().optional(),
            "partnerAsn": t.string().optional(),
            "description": t.string().optional(),
            "state": t.string().optional(),
            "interconnect": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "googleReferenceId": t.string().optional(),
            "stackType": t.string().optional(),
            "region": t.string().optional(),
            "adminEnabled": t.boolean().optional(),
            "privateInterconnectInfo": t.proxy(
                renames["InterconnectAttachmentPrivateInfoIn"]
            ).optional(),
        }
    ).named(renames["InterconnectAttachmentIn"])
    types["InterconnectAttachmentOut"] = t.struct(
        {
            "dataplaneVersion": t.integer().optional(),
            "configurationConstraints": t.proxy(
                renames["InterconnectAttachmentConfigurationConstraintsOut"]
            ).optional(),
            "customerRouterIpv6Address": t.string().optional(),
            "candidateIpv6Subnets": t.array(t.string()).optional(),
            "operationalStatus": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "vlanTag8021q": t.integer().optional(),
            "router": t.string().optional(),
            "cloudRouterIpv6InterfaceId": t.string().optional(),
            "remoteService": t.string().optional(),
            "encryption": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "type": t.string().optional(),
            "candidateSubnets": t.array(t.string()).optional(),
            "subnetLength": t.integer().optional(),
            "kind": t.string().optional(),
            "cloudRouterIpAddress": t.string().optional(),
            "cloudRouterIpv6Address": t.string().optional(),
            "partnerMetadata": t.proxy(
                renames["InterconnectAttachmentPartnerMetadataOut"]
            ).optional(),
            "mtu": t.integer().optional(),
            "ipsecInternalAddresses": t.array(t.string()).optional(),
            "pairingKey": t.string().optional(),
            "bandwidth": t.string().optional(),
            "customerRouterIpv6InterfaceId": t.string().optional(),
            "selfLink": t.string().optional(),
            "edgeAvailabilityDomain": t.string().optional(),
            "id": t.string().optional(),
            "customerRouterIpAddress": t.string().optional(),
            "partnerAsn": t.string().optional(),
            "description": t.string().optional(),
            "state": t.string().optional(),
            "interconnect": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "satisfiesPzs": t.boolean().optional(),
            "googleReferenceId": t.string().optional(),
            "stackType": t.string().optional(),
            "region": t.string().optional(),
            "adminEnabled": t.boolean().optional(),
            "privateInterconnectInfo": t.proxy(
                renames["InterconnectAttachmentPrivateInfoOut"]
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentOut"])
    types["OperationAggregatedListIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["OperationAggregatedListIn"])
    types["OperationAggregatedListOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "unreachables": t.array(t.string()).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OperationAggregatedListOut"])
    types["HealthChecksScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "healthChecks": t.array(t.proxy(renames["HealthCheckIn"])).optional(),
        }
    ).named(renames["HealthChecksScopedListIn"])
    types["HealthChecksScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "healthChecks": t.array(t.proxy(renames["HealthCheckOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HealthChecksScopedListOut"])
    types["StatefulPolicyIn"] = t.struct(
        {"preservedState": t.proxy(renames["StatefulPolicyPreservedStateIn"])}
    ).named(renames["StatefulPolicyIn"])
    types["StatefulPolicyOut"] = t.struct(
        {
            "preservedState": t.proxy(renames["StatefulPolicyPreservedStateOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["StatefulPolicyOut"])
    types["LocalizedMessageIn"] = t.struct(
        {"locale": t.string().optional(), "message": t.string().optional()}
    ).named(renames["LocalizedMessageIn"])
    types["LocalizedMessageOut"] = t.struct(
        {
            "locale": t.string().optional(),
            "message": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocalizedMessageOut"])
    types["BackendBucketCdnPolicyCacheKeyPolicyIn"] = t.struct(
        {
            "includeHttpHeaders": t.array(t.string()).optional(),
            "queryStringWhitelist": t.array(t.string()).optional(),
        }
    ).named(renames["BackendBucketCdnPolicyCacheKeyPolicyIn"])
    types["BackendBucketCdnPolicyCacheKeyPolicyOut"] = t.struct(
        {
            "includeHttpHeaders": t.array(t.string()).optional(),
            "queryStringWhitelist": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendBucketCdnPolicyCacheKeyPolicyOut"])
    types["SubnetworksExpandIpCidrRangeRequestIn"] = t.struct(
        {"ipCidrRange": t.string().optional()}
    ).named(renames["SubnetworksExpandIpCidrRangeRequestIn"])
    types["SubnetworksExpandIpCidrRangeRequestOut"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworksExpandIpCidrRangeRequestOut"])
    types["InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"] = t.struct(
        {
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "shortName": t.string().optional(),
            "type": t.string().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleIn"])).optional(),
        }
    ).named(renames["InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"])
    types[
        "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
    ] = t.struct(
        {
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "shortName": t.string().optional(),
            "type": t.string().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(
        renames["InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"]
    )
    types["LicenseCodeIn"] = t.struct(
        {
            "state": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "transferable": t.boolean().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "licenseAlias": t.array(
                t.proxy(renames["LicenseCodeLicenseAliasIn"])
            ).optional(),
        }
    ).named(renames["LicenseCodeIn"])
    types["LicenseCodeOut"] = t.struct(
        {
            "state": t.string().optional(),
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "description": t.string().optional(),
            "transferable": t.boolean().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "name": t.string().optional(),
            "licenseAlias": t.array(
                t.proxy(renames["LicenseCodeLicenseAliasOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LicenseCodeOut"])
    types["PacketMirroringNetworkInfoIn"] = t.struct(
        {"url": t.string().optional(), "canonicalUrl": t.string().optional()}
    ).named(renames["PacketMirroringNetworkInfoIn"])
    types["PacketMirroringNetworkInfoOut"] = t.struct(
        {
            "url": t.string().optional(),
            "canonicalUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PacketMirroringNetworkInfoOut"])
    types["MachineImageListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["MachineImageIn"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
        }
    ).named(renames["MachineImageListIn"])
    types["MachineImageListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "items": t.array(t.proxy(renames["MachineImageOut"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MachineImageListOut"])
    types["BulkInsertInstanceResourcePerInstancePropertiesIn"] = t.struct(
        {"name": t.string().optional()}
    ).named(renames["BulkInsertInstanceResourcePerInstancePropertiesIn"])
    types["BulkInsertInstanceResourcePerInstancePropertiesOut"] = t.struct(
        {
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BulkInsertInstanceResourcePerInstancePropertiesOut"])
    types["HTTPHealthCheckIn"] = t.struct(
        {
            "requestPath": t.string().optional(),
            "portSpecification": t.string().optional(),
            "response": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "portName": t.string().optional(),
            "host": t.string().optional(),
            "port": t.integer().optional(),
        }
    ).named(renames["HTTPHealthCheckIn"])
    types["HTTPHealthCheckOut"] = t.struct(
        {
            "requestPath": t.string().optional(),
            "portSpecification": t.string().optional(),
            "response": t.string().optional(),
            "proxyHeader": t.string().optional(),
            "portName": t.string().optional(),
            "host": t.string().optional(),
            "port": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HTTPHealthCheckOut"])
    types["SecurityPolicyIn"] = t.struct(
        {
            "name": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "ddosProtectionConfig": t.proxy(
                renames["SecurityPolicyDdosProtectionConfigIn"]
            ),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "advancedOptionsConfig": t.proxy(
                renames["SecurityPolicyAdvancedOptionsConfigIn"]
            ),
            "adaptiveProtectionConfig": t.proxy(
                renames["SecurityPolicyAdaptiveProtectionConfigIn"]
            ),
            "recaptchaOptionsConfig": t.proxy(
                renames["SecurityPolicyRecaptchaOptionsConfigIn"]
            ),
            "kind": t.string().optional(),
        }
    ).named(renames["SecurityPolicyIn"])
    types["SecurityPolicyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "labelFingerprint": t.string().optional(),
            "ddosProtectionConfig": t.proxy(
                renames["SecurityPolicyDdosProtectionConfigOut"]
            ),
            "id": t.string().optional(),
            "type": t.string().optional(),
            "rules": t.array(t.proxy(renames["SecurityPolicyRuleOut"])).optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "selfLink": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "labels": t.struct({"_": t.string().optional()}).optional(),
            "advancedOptionsConfig": t.proxy(
                renames["SecurityPolicyAdvancedOptionsConfigOut"]
            ),
            "adaptiveProtectionConfig": t.proxy(
                renames["SecurityPolicyAdaptiveProtectionConfigOut"]
            ),
            "recaptchaOptionsConfig": t.proxy(
                renames["SecurityPolicyRecaptchaOptionsConfigOut"]
            ),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyOut"])
    types["InstanceConsumptionInfoIn"] = t.struct(
        {
            "minNodeCpus": t.integer().optional(),
            "memoryMb": t.integer().optional(),
            "guestCpus": t.integer().optional(),
            "localSsdGb": t.integer().optional(),
        }
    ).named(renames["InstanceConsumptionInfoIn"])
    types["InstanceConsumptionInfoOut"] = t.struct(
        {
            "minNodeCpus": t.integer().optional(),
            "memoryMb": t.integer().optional(),
            "guestCpus": t.integer().optional(),
            "localSsdGb": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceConsumptionInfoOut"])
    types["SavedDiskIn"] = t.struct(
        {
            "storageBytesStatus": t.string().optional(),
            "kind": t.string().optional(),
            "architecture": t.string().optional(),
            "storageBytes": t.string().optional(),
            "sourceDisk": t.string().optional(),
        }
    ).named(renames["SavedDiskIn"])
    types["SavedDiskOut"] = t.struct(
        {
            "storageBytesStatus": t.string().optional(),
            "kind": t.string().optional(),
            "architecture": t.string().optional(),
            "storageBytes": t.string().optional(),
            "sourceDisk": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SavedDiskOut"])
    types["NetworksGetEffectiveFirewallsResponseIn"] = t.struct(
        {
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyIn"
                    ]
                )
            ).optional(),
            "firewalls": t.array(t.proxy(renames["FirewallIn"])).optional(),
        }
    ).named(renames["NetworksGetEffectiveFirewallsResponseIn"])
    types["NetworksGetEffectiveFirewallsResponseOut"] = t.struct(
        {
            "firewallPolicys": t.array(
                t.proxy(
                    renames[
                        "NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicyOut"
                    ]
                )
            ).optional(),
            "firewalls": t.array(t.proxy(renames["FirewallOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworksGetEffectiveFirewallsResponseOut"])
    types["VpnTunnelListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["VpnTunnelIn"])).optional(),
        }
    ).named(renames["VpnTunnelListIn"])
    types["VpnTunnelListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["VpnTunnelOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VpnTunnelListOut"])
    types["ServiceAttachmentConsumerProjectLimitIn"] = t.struct(
        {
            "projectIdOrNum": t.string().optional(),
            "connectionLimit": t.integer().optional(),
            "networkUrl": t.string().optional(),
        }
    ).named(renames["ServiceAttachmentConsumerProjectLimitIn"])
    types["ServiceAttachmentConsumerProjectLimitOut"] = t.struct(
        {
            "projectIdOrNum": t.string().optional(),
            "connectionLimit": t.integer().optional(),
            "networkUrl": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentConsumerProjectLimitOut"])
    types["LocationPolicyLocationIn"] = t.struct(
        {
            "constraints": t.proxy(
                renames["LocationPolicyLocationConstraintsIn"]
            ).optional(),
            "preference": t.string().optional(),
        }
    ).named(renames["LocationPolicyLocationIn"])
    types["LocationPolicyLocationOut"] = t.struct(
        {
            "constraints": t.proxy(
                renames["LocationPolicyLocationConstraintsOut"]
            ).optional(),
            "preference": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LocationPolicyLocationOut"])
    types["NodeGroupMaintenanceWindowIn"] = t.struct(
        {
            "maintenanceDuration": t.proxy(renames["DurationIn"]).optional(),
            "startTime": t.string().optional(),
        }
    ).named(renames["NodeGroupMaintenanceWindowIn"])
    types["NodeGroupMaintenanceWindowOut"] = t.struct(
        {
            "maintenanceDuration": t.proxy(renames["DurationOut"]).optional(),
            "startTime": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeGroupMaintenanceWindowOut"])
    types["AcceleratorTypeIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusIn"]).optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "zone": t.string().optional(),
            "maximumCardsPerInstance": t.integer().optional(),
        }
    ).named(renames["AcceleratorTypeIn"])
    types["AcceleratorTypeOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "deprecated": t.proxy(renames["DeprecationStatusOut"]).optional(),
            "id": t.string().optional(),
            "name": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "zone": t.string().optional(),
            "maximumCardsPerInstance": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AcceleratorTypeOut"])
    types["GlobalNetworkEndpointGroupsAttachEndpointsRequestIn"] = t.struct(
        {"networkEndpoints": t.array(t.proxy(renames["NetworkEndpointIn"])).optional()}
    ).named(renames["GlobalNetworkEndpointGroupsAttachEndpointsRequestIn"])
    types["GlobalNetworkEndpointGroupsAttachEndpointsRequestOut"] = t.struct(
        {
            "networkEndpoints": t.array(
                t.proxy(renames["NetworkEndpointOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GlobalNetworkEndpointGroupsAttachEndpointsRequestOut"])
    types["SubnetworkSecondaryRangeIn"] = t.struct(
        {"rangeName": t.string().optional(), "ipCidrRange": t.string().optional()}
    ).named(renames["SubnetworkSecondaryRangeIn"])
    types["SubnetworkSecondaryRangeOut"] = t.struct(
        {
            "rangeName": t.string().optional(),
            "ipCidrRange": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworkSecondaryRangeOut"])
    types["GuestAttributesValueIn"] = t.struct(
        {"items": t.array(t.proxy(renames["GuestAttributesEntryIn"]))}
    ).named(renames["GuestAttributesValueIn"])
    types["GuestAttributesValueOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["GuestAttributesEntryOut"])),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["GuestAttributesValueOut"])
    types["FileContentBufferIn"] = t.struct(
        {"fileType": t.string().optional(), "content": t.string().optional()}
    ).named(renames["FileContentBufferIn"])
    types["FileContentBufferOut"] = t.struct(
        {
            "fileType": t.string().optional(),
            "content": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FileContentBufferOut"])
    types["AliasIpRangeIn"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "subnetworkRangeName": t.string().optional(),
        }
    ).named(renames["AliasIpRangeIn"])
    types["AliasIpRangeOut"] = t.struct(
        {
            "ipCidrRange": t.string().optional(),
            "subnetworkRangeName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AliasIpRangeOut"])
    types["CommitmentsScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "commitments": t.array(t.proxy(renames["CommitmentIn"])).optional(),
        }
    ).named(renames["CommitmentsScopedListIn"])
    types["CommitmentsScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "commitments": t.array(t.proxy(renames["CommitmentOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CommitmentsScopedListOut"])
    types["SecurityPolicyRuleRateLimitOptionsIn"] = t.struct(
        {
            "enforceOnKey": t.string().optional(),
            "enforceOnKeyConfigs": t.array(
                t.proxy(
                    renames["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigIn"]
                )
            ).optional(),
            "exceedAction": t.string().optional(),
            "exceedRedirectOptions": t.proxy(
                renames["SecurityPolicyRuleRedirectOptionsIn"]
            ).optional(),
            "banThreshold": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsThresholdIn"]
            ).optional(),
            "conformAction": t.string().optional(),
            "banDurationSec": t.integer().optional(),
            "rateLimitThreshold": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsThresholdIn"]
            ).optional(),
            "enforceOnKeyName": t.string().optional(),
        }
    ).named(renames["SecurityPolicyRuleRateLimitOptionsIn"])
    types["SecurityPolicyRuleRateLimitOptionsOut"] = t.struct(
        {
            "enforceOnKey": t.string().optional(),
            "enforceOnKeyConfigs": t.array(
                t.proxy(
                    renames["SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigOut"]
                )
            ).optional(),
            "exceedAction": t.string().optional(),
            "exceedRedirectOptions": t.proxy(
                renames["SecurityPolicyRuleRedirectOptionsOut"]
            ).optional(),
            "banThreshold": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsThresholdOut"]
            ).optional(),
            "conformAction": t.string().optional(),
            "banDurationSec": t.integer().optional(),
            "rateLimitThreshold": t.proxy(
                renames["SecurityPolicyRuleRateLimitOptionsThresholdOut"]
            ).optional(),
            "enforceOnKeyName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SecurityPolicyRuleRateLimitOptionsOut"])
    types["InterconnectDiagnosticsIn"] = t.struct(
        {
            "macAddress": t.string().optional(),
            "arpCaches": t.array(
                t.proxy(renames["InterconnectDiagnosticsARPEntryIn"])
            ).optional(),
            "bundleOperationalStatus": t.string().optional(),
            "links": t.array(
                t.proxy(renames["InterconnectDiagnosticsLinkStatusIn"])
            ).optional(),
            "bundleAggregationType": t.string().optional(),
        }
    ).named(renames["InterconnectDiagnosticsIn"])
    types["InterconnectDiagnosticsOut"] = t.struct(
        {
            "macAddress": t.string().optional(),
            "arpCaches": t.array(
                t.proxy(renames["InterconnectDiagnosticsARPEntryOut"])
            ).optional(),
            "bundleOperationalStatus": t.string().optional(),
            "links": t.array(
                t.proxy(renames["InterconnectDiagnosticsLinkStatusOut"])
            ).optional(),
            "bundleAggregationType": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectDiagnosticsOut"])
    types["VmEndpointNatMappingsIn"] = t.struct(
        {
            "interfaceNatMappings": t.array(
                t.proxy(renames["VmEndpointNatMappingsInterfaceNatMappingsIn"])
            ),
            "instanceName": t.string().optional(),
        }
    ).named(renames["VmEndpointNatMappingsIn"])
    types["VmEndpointNatMappingsOut"] = t.struct(
        {
            "interfaceNatMappings": t.array(
                t.proxy(renames["VmEndpointNatMappingsInterfaceNatMappingsOut"])
            ),
            "instanceName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["VmEndpointNatMappingsOut"])
    types["InterconnectAttachmentListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectAttachmentIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["InterconnectAttachmentListIn"])
    types["InterconnectAttachmentListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["InterconnectAttachmentOut"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentListOut"])
    types["ErrorInfoIn"] = t.struct(
        {
            "reason": t.string().optional(),
            "domain": t.string().optional(),
            "metadatas": t.struct({"_": t.string().optional()}).optional(),
        }
    ).named(renames["ErrorInfoIn"])
    types["ErrorInfoOut"] = t.struct(
        {
            "reason": t.string().optional(),
            "domain": t.string().optional(),
            "metadatas": t.struct({"_": t.string().optional()}).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ErrorInfoOut"])
    types["BackendServiceReferenceIn"] = t.struct({"backendService": t.string()}).named(
        renames["BackendServiceReferenceIn"]
    )
    types["BackendServiceReferenceOut"] = t.struct(
        {
            "backendService": t.string(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["BackendServiceReferenceOut"])
    types["DisksAddResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["DisksAddResourcePoliciesRequestIn"])
    types["DisksAddResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DisksAddResourcePoliciesRequestOut"])
    types["InterconnectsGetDiagnosticsResponseIn"] = t.struct(
        {"result": t.proxy(renames["InterconnectDiagnosticsIn"])}
    ).named(renames["InterconnectsGetDiagnosticsResponseIn"])
    types["InterconnectsGetDiagnosticsResponseOut"] = t.struct(
        {
            "result": t.proxy(renames["InterconnectDiagnosticsOut"]),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectsGetDiagnosticsResponseOut"])
    types["HelpIn"] = t.struct(
        {"links": t.array(t.proxy(renames["HelpLinkIn"])).optional()}
    ).named(renames["HelpIn"])
    types["HelpOut"] = t.struct(
        {
            "links": t.array(t.proxy(renames["HelpLinkOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HelpOut"])
    types["InstanceGroupManagersListErrorsResponseIn"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(
                t.proxy(renames["InstanceManagedByIgmErrorIn"])
            ).optional(),
        }
    ).named(renames["InstanceGroupManagersListErrorsResponseIn"])
    types["InstanceGroupManagersListErrorsResponseOut"] = t.struct(
        {
            "nextPageToken": t.string().optional(),
            "items": t.array(
                t.proxy(renames["InstanceManagedByIgmErrorOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersListErrorsResponseOut"])
    types["RegionDisksAddResourcePoliciesRequestIn"] = t.struct(
        {"resourcePolicies": t.array(t.string()).optional()}
    ).named(renames["RegionDisksAddResourcePoliciesRequestIn"])
    types["RegionDisksAddResourcePoliciesRequestOut"] = t.struct(
        {
            "resourcePolicies": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionDisksAddResourcePoliciesRequestOut"])
    types["RegionAddressesMoveRequestIn"] = t.struct(
        {
            "destinationAddress": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["RegionAddressesMoveRequestIn"])
    types["RegionAddressesMoveRequestOut"] = t.struct(
        {
            "destinationAddress": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionAddressesMoveRequestOut"])
    types["CacheInvalidationRuleIn"] = t.struct(
        {"path": t.string(), "host": t.string().optional()}
    ).named(renames["CacheInvalidationRuleIn"])
    types["CacheInvalidationRuleOut"] = t.struct(
        {
            "path": t.string(),
            "host": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["CacheInvalidationRuleOut"])
    types["ServerBindingIn"] = t.struct({"type": t.string()}).named(
        renames["ServerBindingIn"]
    )
    types["ServerBindingOut"] = t.struct(
        {"type": t.string(), "error": t.proxy(renames["ErrorResponse"]).optional()}
    ).named(renames["ServerBindingOut"])
    types["OutlierDetectionIn"] = t.struct(
        {
            "successRateRequestVolume": t.integer().optional(),
            "consecutiveErrors": t.integer().optional(),
            "interval": t.proxy(renames["DurationIn"]).optional(),
            "enforcingSuccessRate": t.integer().optional(),
            "baseEjectionTime": t.proxy(renames["DurationIn"]).optional(),
            "successRateStdevFactor": t.integer().optional(),
            "maxEjectionPercent": t.integer().optional(),
            "consecutiveGatewayFailure": t.integer().optional(),
            "enforcingConsecutiveErrors": t.integer().optional(),
            "enforcingConsecutiveGatewayFailure": t.integer().optional(),
            "successRateMinimumHosts": t.integer().optional(),
        }
    ).named(renames["OutlierDetectionIn"])
    types["OutlierDetectionOut"] = t.struct(
        {
            "successRateRequestVolume": t.integer().optional(),
            "consecutiveErrors": t.integer().optional(),
            "interval": t.proxy(renames["DurationOut"]).optional(),
            "enforcingSuccessRate": t.integer().optional(),
            "baseEjectionTime": t.proxy(renames["DurationOut"]).optional(),
            "successRateStdevFactor": t.integer().optional(),
            "maxEjectionPercent": t.integer().optional(),
            "consecutiveGatewayFailure": t.integer().optional(),
            "enforcingConsecutiveErrors": t.integer().optional(),
            "enforcingConsecutiveGatewayFailure": t.integer().optional(),
            "successRateMinimumHosts": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["OutlierDetectionOut"])
    types["SerialPortOutputIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "start": t.string().optional(),
            "next": t.string().optional(),
            "contents": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["SerialPortOutputIn"])
    types["SerialPortOutputOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "start": t.string().optional(),
            "next": t.string().optional(),
            "contents": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SerialPortOutputOut"])
    types["MetadataFilterLabelMatchIn"] = t.struct(
        {"name": t.string().optional(), "value": t.string().optional()}
    ).named(renames["MetadataFilterLabelMatchIn"])
    types["MetadataFilterLabelMatchOut"] = t.struct(
        {
            "name": t.string().optional(),
            "value": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["MetadataFilterLabelMatchOut"])
    types["LogConfigCounterOptionsIn"] = t.struct(
        {
            "field": t.string().optional(),
            "metric": t.string().optional(),
            "customFields": t.array(
                t.proxy(renames["LogConfigCounterOptionsCustomFieldIn"])
            ).optional(),
        }
    ).named(renames["LogConfigCounterOptionsIn"])
    types["LogConfigCounterOptionsOut"] = t.struct(
        {
            "field": t.string().optional(),
            "metric": t.string().optional(),
            "customFields": t.array(
                t.proxy(renames["LogConfigCounterOptionsCustomFieldOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["LogConfigCounterOptionsOut"])
    types["PublicAdvertisedPrefixListIn"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PublicAdvertisedPrefixIn"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["PublicAdvertisedPrefixListIn"])
    types["PublicAdvertisedPrefixListOut"] = t.struct(
        {
            "items": t.array(t.proxy(renames["PublicAdvertisedPrefixOut"])).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["PublicAdvertisedPrefixListOut"])
    types["TargetVpnGatewaysScopedListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "targetVpnGateways": t.array(
                t.proxy(renames["TargetVpnGatewayIn"])
            ).optional(),
        }
    ).named(renames["TargetVpnGatewaysScopedListIn"])
    types["TargetVpnGatewaysScopedListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "targetVpnGateways": t.array(
                t.proxy(renames["TargetVpnGatewayOut"])
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetVpnGatewaysScopedListOut"])
    types["WafExpressionSetIn"] = t.struct(
        {
            "expressions": t.array(
                t.proxy(renames["WafExpressionSetExpressionIn"])
            ).optional(),
            "id": t.string().optional(),
            "aliases": t.array(t.string()).optional(),
        }
    ).named(renames["WafExpressionSetIn"])
    types["WafExpressionSetOut"] = t.struct(
        {
            "expressions": t.array(
                t.proxy(renames["WafExpressionSetExpressionOut"])
            ).optional(),
            "id": t.string().optional(),
            "aliases": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["WafExpressionSetOut"])
    types["ServiceAttachmentsScopedListIn"] = t.struct(
        {
            "serviceAttachments": t.array(
                t.proxy(renames["ServiceAttachmentIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["ServiceAttachmentsScopedListIn"])
    types["ServiceAttachmentsScopedListOut"] = t.struct(
        {
            "serviceAttachments": t.array(
                t.proxy(renames["ServiceAttachmentOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ServiceAttachmentsScopedListOut"])
    types["RouterMd5AuthenticationKeyIn"] = t.struct(
        {"name": t.string().optional(), "key": t.string().optional()}
    ).named(renames["RouterMd5AuthenticationKeyIn"])
    types["RouterMd5AuthenticationKeyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "key": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RouterMd5AuthenticationKeyOut"])
    types["InstanceGroupManagersApplyUpdatesRequestIn"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "allInstances": t.boolean().optional(),
            "minimalAction": t.string().optional(),
            "mostDisruptiveAllowedAction": t.string().optional(),
        }
    ).named(renames["InstanceGroupManagersApplyUpdatesRequestIn"])
    types["InstanceGroupManagersApplyUpdatesRequestOut"] = t.struct(
        {
            "instances": t.array(t.string()).optional(),
            "allInstances": t.boolean().optional(),
            "minimalAction": t.string().optional(),
            "mostDisruptiveAllowedAction": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersApplyUpdatesRequestOut"])
    types["HttpRetryPolicyIn"] = t.struct(
        {
            "retryConditions": t.array(t.string()).optional(),
            "numRetries": t.integer().optional(),
            "perTryTimeout": t.proxy(renames["DurationIn"]).optional(),
        }
    ).named(renames["HttpRetryPolicyIn"])
    types["HttpRetryPolicyOut"] = t.struct(
        {
            "retryConditions": t.array(t.string()).optional(),
            "numRetries": t.integer().optional(),
            "perTryTimeout": t.proxy(renames["DurationOut"]).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpRetryPolicyOut"])
    types["RegionInstanceGroupsListInstancesRequestIn"] = t.struct(
        {"instanceState": t.string().optional(), "portName": t.string().optional()}
    ).named(renames["RegionInstanceGroupsListInstancesRequestIn"])
    types["RegionInstanceGroupsListInstancesRequestOut"] = t.struct(
        {
            "instanceState": t.string().optional(),
            "portName": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["RegionInstanceGroupsListInstancesRequestOut"])
    types["InstanceAggregatedListIn"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
        }
    ).named(renames["InstanceAggregatedListIn"])
    types["InstanceAggregatedListOut"] = t.struct(
        {
            "unreachables": t.array(t.string()).optional(),
            "nextPageToken": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "items": t.struct({"_": t.string().optional()}).optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "id": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceAggregatedListOut"])
    types["TargetHttpProxyIn"] = t.struct(
        {
            "name": t.string().optional(),
            "proxyBind": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "fingerprint": t.string().optional(),
            "urlMap": t.string().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
        }
    ).named(renames["TargetHttpProxyIn"])
    types["TargetHttpProxyOut"] = t.struct(
        {
            "name": t.string().optional(),
            "proxyBind": t.boolean().optional(),
            "selfLink": t.string().optional(),
            "description": t.string().optional(),
            "region": t.string().optional(),
            "kind": t.string().optional(),
            "fingerprint": t.string().optional(),
            "urlMap": t.string().optional(),
            "id": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpProxyOut"])
    types["ForwardingRuleListIn"] = t.struct(
        {
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["ForwardingRuleIn"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["ForwardingRuleListIn"])
    types["ForwardingRuleListOut"] = t.struct(
        {
            "kind": t.string().optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["ForwardingRuleOut"])).optional(),
            "selfLink": t.string().optional(),
            "warning": t.struct(
                {
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ForwardingRuleListOut"])
    types["HttpHeaderActionIn"] = t.struct(
        {
            "requestHeadersToRemove": t.array(t.string()).optional(),
            "responseHeadersToAdd": t.array(
                t.proxy(renames["HttpHeaderOptionIn"])
            ).optional(),
            "requestHeadersToAdd": t.array(
                t.proxy(renames["HttpHeaderOptionIn"])
            ).optional(),
            "responseHeadersToRemove": t.array(t.string()).optional(),
        }
    ).named(renames["HttpHeaderActionIn"])
    types["HttpHeaderActionOut"] = t.struct(
        {
            "requestHeadersToRemove": t.array(t.string()).optional(),
            "responseHeadersToAdd": t.array(
                t.proxy(renames["HttpHeaderOptionOut"])
            ).optional(),
            "requestHeadersToAdd": t.array(
                t.proxy(renames["HttpHeaderOptionOut"])
            ).optional(),
            "responseHeadersToRemove": t.array(t.string()).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["HttpHeaderActionOut"])
    types["FirewallPolicyIn"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "parent": t.string().optional(),
            "kind": t.string().optional(),
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "ruleTupleCount": t.integer().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleIn"])).optional(),
            "selfLinkWithId": t.string().optional(),
            "associations": t.array(
                t.proxy(renames["FirewallPolicyAssociationIn"])
            ).optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "id": t.string().optional(),
            "shortName": t.string().optional(),
            "description": t.string().optional(),
        }
    ).named(renames["FirewallPolicyIn"])
    types["FirewallPolicyOut"] = t.struct(
        {
            "selfLink": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "parent": t.string().optional(),
            "kind": t.string().optional(),
            "displayName": t.string().optional(),
            "name": t.string().optional(),
            "ruleTupleCount": t.integer().optional(),
            "rules": t.array(t.proxy(renames["FirewallPolicyRuleOut"])).optional(),
            "selfLinkWithId": t.string().optional(),
            "associations": t.array(
                t.proxy(renames["FirewallPolicyAssociationOut"])
            ).optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "id": t.string().optional(),
            "shortName": t.string().optional(),
            "description": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["FirewallPolicyOut"])
    types["NetworkEdgeSecurityServicesScopedListIn"] = t.struct(
        {
            "networkEdgeSecurityServices": t.array(
                t.proxy(renames["NetworkEdgeSecurityServiceIn"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["NetworkEdgeSecurityServicesScopedListIn"])
    types["NetworkEdgeSecurityServicesScopedListOut"] = t.struct(
        {
            "networkEdgeSecurityServices": t.array(
                t.proxy(renames["NetworkEdgeSecurityServiceOut"])
            ).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NetworkEdgeSecurityServicesScopedListOut"])
    types["AccessConfigIn"] = t.struct(
        {
            "type": t.string().optional(),
            "externalIpv6PrefixLength": t.integer().optional(),
            "kind": t.string().optional(),
            "natIP": t.string().optional(),
            "setPublicPtr": t.boolean().optional(),
            "networkTier": t.string().optional(),
            "publicPtrDomainName": t.string().optional(),
            "externalIpv6": t.string().optional(),
            "name": t.string().optional(),
        }
    ).named(renames["AccessConfigIn"])
    types["AccessConfigOut"] = t.struct(
        {
            "type": t.string().optional(),
            "externalIpv6PrefixLength": t.integer().optional(),
            "kind": t.string().optional(),
            "natIP": t.string().optional(),
            "setPublicPtr": t.boolean().optional(),
            "networkTier": t.string().optional(),
            "publicPtrDomainName": t.string().optional(),
            "externalIpv6": t.string().optional(),
            "name": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AccessConfigOut"])
    types["ZoneListIn"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["ZoneIn"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["ZoneListIn"])
    types["ZoneListOut"] = t.struct(
        {
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "items": t.array(t.proxy(renames["ZoneOut"])).optional(),
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "kind": t.string().optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["ZoneListOut"])
    types["AutoscalersScopedListIn"] = t.struct(
        {
            "autoscalers": t.array(t.proxy(renames["AutoscalerIn"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
        }
    ).named(renames["AutoscalersScopedListIn"])
    types["AutoscalersScopedListOut"] = t.struct(
        {
            "autoscalers": t.array(t.proxy(renames["AutoscalerOut"])).optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "message": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["AutoscalersScopedListOut"])
    types["InterconnectAttachmentPrivateInfoIn"] = t.struct(
        {"tag8021q": t.integer().optional()}
    ).named(renames["InterconnectAttachmentPrivateInfoIn"])
    types["InterconnectAttachmentPrivateInfoOut"] = t.struct(
        {
            "tag8021q": t.integer().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InterconnectAttachmentPrivateInfoOut"])
    types["TargetTcpProxyListIn"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetTcpProxyIn"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
        }
    ).named(renames["TargetTcpProxyListIn"])
    types["TargetTcpProxyListOut"] = t.struct(
        {
            "id": t.string().optional(),
            "nextPageToken": t.string().optional(),
            "items": t.array(t.proxy(renames["TargetTcpProxyOut"])).optional(),
            "kind": t.string().optional(),
            "warning": t.struct(
                {
                    "code": t.string().optional(),
                    "data": t.array(
                        t.struct(
                            {
                                "value": t.string().optional(),
                                "key": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                }
            ).optional(),
            "selfLink": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetTcpProxyListOut"])
    types["DeprecationStatusIn"] = t.struct(
        {
            "deleted": t.string().optional(),
            "deprecated": t.string().optional(),
            "state": t.string().optional(),
            "replacement": t.string().optional(),
            "obsolete": t.string().optional(),
        }
    ).named(renames["DeprecationStatusIn"])
    types["DeprecationStatusOut"] = t.struct(
        {
            "deleted": t.string().optional(),
            "deprecated": t.string().optional(),
            "state": t.string().optional(),
            "replacement": t.string().optional(),
            "obsolete": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["DeprecationStatusOut"])
    types["SubnetworkLogConfigIn"] = t.struct(
        {
            "filterExpr": t.string().optional(),
            "metadataFields": t.array(t.string()).optional(),
            "enable": t.boolean().optional(),
            "aggregationInterval": t.string().optional(),
            "flowSampling": t.number().optional(),
            "metadata": t.string().optional(),
        }
    ).named(renames["SubnetworkLogConfigIn"])
    types["SubnetworkLogConfigOut"] = t.struct(
        {
            "filterExpr": t.string().optional(),
            "metadataFields": t.array(t.string()).optional(),
            "enable": t.boolean().optional(),
            "aggregationInterval": t.string().optional(),
            "flowSampling": t.number().optional(),
            "metadata": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["SubnetworkLogConfigOut"])
    types["NodeTypesScopedListIn"] = t.struct(
        {
            "nodeTypes": t.array(t.proxy(renames["NodeTypeIn"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
        }
    ).named(renames["NodeTypesScopedListIn"])
    types["NodeTypesScopedListOut"] = t.struct(
        {
            "nodeTypes": t.array(t.proxy(renames["NodeTypeOut"])).optional(),
            "warning": t.struct(
                {
                    "data": t.array(
                        t.struct(
                            {
                                "key": t.string().optional(),
                                "value": t.string().optional(),
                            }
                        )
                    ).optional(),
                    "message": t.string().optional(),
                    "code": t.string().optional(),
                }
            ).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NodeTypesScopedListOut"])
    types["NotificationEndpointIn"] = t.struct(
        {
            "id": t.string().optional(),
            "region": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "grpcSettings": t.proxy(
                renames["NotificationEndpointGrpcSettingsIn"]
            ).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
        }
    ).named(renames["NotificationEndpointIn"])
    types["NotificationEndpointOut"] = t.struct(
        {
            "id": t.string().optional(),
            "region": t.string().optional(),
            "description": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "grpcSettings": t.proxy(
                renames["NotificationEndpointGrpcSettingsOut"]
            ).optional(),
            "name": t.string().optional(),
            "selfLink": t.string().optional(),
            "kind": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["NotificationEndpointOut"])
    types["TargetPoolsRemoveInstanceRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["InstanceReferenceIn"])).optional()}
    ).named(renames["TargetPoolsRemoveInstanceRequestIn"])
    types["TargetPoolsRemoveInstanceRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["InstanceReferenceOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetPoolsRemoveInstanceRequestOut"])
    types["InstanceGroupManagersCreateInstancesRequestIn"] = t.struct(
        {"instances": t.array(t.proxy(renames["PerInstanceConfigIn"])).optional()}
    ).named(renames["InstanceGroupManagersCreateInstancesRequestIn"])
    types["InstanceGroupManagersCreateInstancesRequestOut"] = t.struct(
        {
            "instances": t.array(t.proxy(renames["PerInstanceConfigOut"])).optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["InstanceGroupManagersCreateInstancesRequestOut"])
    types["TargetHttpsProxyIn"] = t.struct(
        {
            "proxyBind": t.boolean().optional(),
            "quicOverride": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "sslPolicy": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "certificateMap": t.string().optional(),
            "kind": t.string().optional(),
            "sslCertificates": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "authorizationPolicy": t.string().optional(),
            "urlMap": t.string().optional(),
            "serverTlsPolicy": t.string().optional(),
        }
    ).named(renames["TargetHttpsProxyIn"])
    types["TargetHttpsProxyOut"] = t.struct(
        {
            "proxyBind": t.boolean().optional(),
            "quicOverride": t.string().optional(),
            "fingerprint": t.string().optional(),
            "region": t.string().optional(),
            "creationTimestamp": t.string().optional(),
            "description": t.string().optional(),
            "sslPolicy": t.string().optional(),
            "id": t.string().optional(),
            "selfLink": t.string().optional(),
            "certificateMap": t.string().optional(),
            "kind": t.string().optional(),
            "sslCertificates": t.array(t.string()).optional(),
            "name": t.string().optional(),
            "authorizationPolicy": t.string().optional(),
            "urlMap": t.string().optional(),
            "serverTlsPolicy": t.string().optional(),
            "error": t.proxy(renames["ErrorResponse"]).optional(),
        }
    ).named(renames["TargetHttpsProxyOut"])

    functions = {}
    functions["httpHealthChecksList"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpHealthChecksDelete"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpHealthChecksUpdate"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpHealthChecksGet"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpHealthChecksInsert"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpHealthChecksPatch"] = compute.patch(
        "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "httpHealthCheck": t.string().optional(),
                "project": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "host": t.string().optional(),
                "requestPath": t.string().optional(),
                "port": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesInsert"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesList"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesPatch"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesSetUrlMap"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesAggregatedList"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesGet"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpProxiesDelete"] = compute.delete(
        "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        t.struct(
            {
                "project": t.string().optional(),
                "targetHttpProxy": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysSetLabels"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysDelete"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysInsert"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysGetStatus"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysList"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnGatewaysGet"] = compute.get(
        "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        t.struct(
            {
                "vpnGateway": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VpnGatewayOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectLocationsGet"] = compute.get(
        "projects/{project}/global/interconnectLocations",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectLocationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectLocationsList"] = compute.get(
        "projects/{project}/global/interconnectLocations",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectLocationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksList"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksPatch"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksUpdate"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksGet"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksDelete"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthChecksInsert"] = compute.post(
        "projects/{project}/regions/{region}/healthChecks",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionOperationsWait"] = compute.get(
        "projects/{project}/regions/{region}/operations",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionOperationsGet"] = compute.get(
        "projects/{project}/regions/{region}/operations",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionOperationsDelete"] = compute.get(
        "projects/{project}/regions/{region}/operations",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionOperationsList"] = compute.get(
        "projects/{project}/regions/{region}/operations",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNotificationEndpointsInsert"] = compute.delete(
        "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        t.struct(
            {
                "region": t.string().optional(),
                "notificationEndpoint": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNotificationEndpointsGet"] = compute.delete(
        "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        t.struct(
            {
                "region": t.string().optional(),
                "notificationEndpoint": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNotificationEndpointsList"] = compute.delete(
        "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        t.struct(
            {
                "region": t.string().optional(),
                "notificationEndpoint": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNotificationEndpointsDelete"] = compute.delete(
        "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        t.struct(
            {
                "region": t.string().optional(),
                "notificationEndpoint": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsGet"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsSetLabels"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsPatch"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsGetDiagnostics"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsList"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsInsert"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectsDelete"] = compute.delete(
        "projects/{project}/global/interconnects/{interconnect}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "interconnect": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysAggregatedList"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysList"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysSetLabels"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysDelete"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysGet"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetVpnGatewaysInsert"] = compute.post(
        "projects/{project}/regions/{region}/targetVpnGateways",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "description": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "tunnels": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "status": t.string().optional(),
                "forwardingRules": t.array(t.string()).optional(),
                "kind": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersGet"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersInsert"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersDelete"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersUpdate"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersPatch"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["autoscalersList"] = compute.get(
        "projects/{project}/zones/{zone}/autoscalers",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "zone": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AutoscalerListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsList"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsPatch"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsGet"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsInsert"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsUpdate"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallsDelete"] = compute.delete(
        "projects/{project}/global/firewalls/{firewall}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "firewall": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesSetBackendService"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesInsert"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesSetProxyHeader"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesDelete"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesGet"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesAggregatedList"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetTcpProxiesList"] = compute.get(
        "projects/{project}/global/targetTcpProxies",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetTcpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsListNetworkEndpoints"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsGet"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsAttachNetworkEndpoints"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsDelete"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsInsert"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsDetachNetworkEndpoints"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsList"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsTestIamPermissions"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEndpointGroupsAggregatedList"] = compute.get(
        "projects/{project}/aggregated/networkEndpointGroups",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEdgeSecurityServicesAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "networkEdgeSecurityService": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEdgeSecurityServiceOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEdgeSecurityServicesInsert"] = compute.get(
        "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "networkEdgeSecurityService": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEdgeSecurityServiceOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEdgeSecurityServicesDelete"] = compute.get(
        "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "networkEdgeSecurityService": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEdgeSecurityServiceOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEdgeSecurityServicesPatch"] = compute.get(
        "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "networkEdgeSecurityService": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEdgeSecurityServiceOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkEdgeSecurityServicesGet"] = compute.get(
        "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "networkEdgeSecurityService": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEdgeSecurityServiceOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesSetLabels"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesGet"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesPatch"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesRemoveRule"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesInsert"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesAggregatedList"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesAddRule"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesDelete"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesListPreconfiguredExpressionSets"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesPatchRule"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesGetRule"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["securityPoliciesList"] = compute.get(
        "projects/{project}/global/securityPolicies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SecurityPolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetGrpcProxiesGet"] = compute.get(
        "projects/{project}/global/targetGrpcProxies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetGrpcProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetGrpcProxiesInsert"] = compute.get(
        "projects/{project}/global/targetGrpcProxies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetGrpcProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetGrpcProxiesDelete"] = compute.get(
        "projects/{project}/global/targetGrpcProxies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetGrpcProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetGrpcProxiesPatch"] = compute.get(
        "projects/{project}/global/targetGrpcProxies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetGrpcProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetGrpcProxiesList"] = compute.get(
        "projects/{project}/global/targetGrpcProxies",
        t.struct(
            {
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetGrpcProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTypesAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/nodeTypes/{nodeType}",
        t.struct(
            {
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "nodeType": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTypesList"] = compute.get(
        "projects/{project}/zones/{zone}/nodeTypes/{nodeType}",
        t.struct(
            {
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "nodeType": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTypesGet"] = compute.get(
        "projects/{project}/zones/{zone}/nodeTypes/{nodeType}",
        t.struct(
            {
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "nodeType": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesPatch"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesGet"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesDelete"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesInsert"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesList"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesAggregatedList"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslPoliciesListAvailableFeatures"] = compute.get(
        "projects/{project}/global/sslPolicies/listAvailableFeatures",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListAvailableFeaturesResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsPatch"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsSetLabels"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsDelete"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsList"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsInsert"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectAttachmentsGet"] = compute.get(
        "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        t.struct(
            {
                "interconnectAttachment": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesList"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesSetLabels"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesDelete"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesInsert"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesMove"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["addressesGet"] = compute.get(
        "projects/{project}/regions/{region}/addresses/{address}",
        t.struct(
            {
                "region": t.string().optional(),
                "project": t.string().optional(),
                "address": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AddressOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksAggregatedList"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksUpdate"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksPatch"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksGet"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksDelete"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksList"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["healthChecksInsert"] = compute.post(
        "projects/{project}/global/healthChecks",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "grpcHealthCheck": t.proxy(renames["GRPCHealthCheckIn"]),
                "timeoutSec": t.integer().optional(),
                "healthyThreshold": t.integer().optional(),
                "kind": t.string().optional(),
                "checkIntervalSec": t.integer().optional(),
                "httpsHealthCheck": t.proxy(renames["HTTPSHealthCheckIn"]),
                "creationTimestamp": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "sslHealthCheck": t.proxy(renames["SSLHealthCheckIn"]),
                "tcpHealthCheck": t.proxy(renames["TCPHealthCheckIn"]),
                "description": t.string().optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "http2HealthCheck": t.proxy(renames["HTTP2HealthCheckIn"]),
                "type": t.string().optional(),
                "httpHealthCheck": t.proxy(renames["HTTPHealthCheckIn"]),
                "logConfig": t.proxy(renames["HealthCheckLogConfigIn"]).optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkEndpointGroupsGet"] = compute.post(
        "projects/{project}/regions/{region}/networkEndpointGroups",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "networkEndpointType": t.string().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "pscTargetService": t.string().optional(),
                "selfLink": t.string().optional(),
                "annotations": t.struct({"_": t.string().optional()}).optional(),
                "cloudFunction": t.proxy(
                    renames["NetworkEndpointGroupCloudFunctionIn"]
                ).optional(),
                "size": t.integer().optional(),
                "subnetwork": t.string().optional(),
                "name": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "cloudRun": t.proxy(
                    renames["NetworkEndpointGroupCloudRunIn"]
                ).optional(),
                "defaultPort": t.integer().optional(),
                "zone": t.string().optional(),
                "pscData": t.proxy(renames["NetworkEndpointGroupPscDataIn"]),
                "network": t.string().optional(),
                "appEngine": t.proxy(
                    renames["NetworkEndpointGroupAppEngineIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkEndpointGroupsDelete"] = compute.post(
        "projects/{project}/regions/{region}/networkEndpointGroups",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "networkEndpointType": t.string().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "pscTargetService": t.string().optional(),
                "selfLink": t.string().optional(),
                "annotations": t.struct({"_": t.string().optional()}).optional(),
                "cloudFunction": t.proxy(
                    renames["NetworkEndpointGroupCloudFunctionIn"]
                ).optional(),
                "size": t.integer().optional(),
                "subnetwork": t.string().optional(),
                "name": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "cloudRun": t.proxy(
                    renames["NetworkEndpointGroupCloudRunIn"]
                ).optional(),
                "defaultPort": t.integer().optional(),
                "zone": t.string().optional(),
                "pscData": t.proxy(renames["NetworkEndpointGroupPscDataIn"]),
                "network": t.string().optional(),
                "appEngine": t.proxy(
                    renames["NetworkEndpointGroupAppEngineIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkEndpointGroupsList"] = compute.post(
        "projects/{project}/regions/{region}/networkEndpointGroups",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "networkEndpointType": t.string().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "pscTargetService": t.string().optional(),
                "selfLink": t.string().optional(),
                "annotations": t.struct({"_": t.string().optional()}).optional(),
                "cloudFunction": t.proxy(
                    renames["NetworkEndpointGroupCloudFunctionIn"]
                ).optional(),
                "size": t.integer().optional(),
                "subnetwork": t.string().optional(),
                "name": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "cloudRun": t.proxy(
                    renames["NetworkEndpointGroupCloudRunIn"]
                ).optional(),
                "defaultPort": t.integer().optional(),
                "zone": t.string().optional(),
                "pscData": t.proxy(renames["NetworkEndpointGroupPscDataIn"]),
                "network": t.string().optional(),
                "appEngine": t.proxy(
                    renames["NetworkEndpointGroupAppEngineIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkEndpointGroupsInsert"] = compute.post(
        "projects/{project}/regions/{region}/networkEndpointGroups",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "networkEndpointType": t.string().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "pscTargetService": t.string().optional(),
                "selfLink": t.string().optional(),
                "annotations": t.struct({"_": t.string().optional()}).optional(),
                "cloudFunction": t.proxy(
                    renames["NetworkEndpointGroupCloudFunctionIn"]
                ).optional(),
                "size": t.integer().optional(),
                "subnetwork": t.string().optional(),
                "name": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "cloudRun": t.proxy(
                    renames["NetworkEndpointGroupCloudRunIn"]
                ).optional(),
                "defaultPort": t.integer().optional(),
                "zone": t.string().optional(),
                "pscData": t.proxy(renames["NetworkEndpointGroupPscDataIn"]),
                "network": t.string().optional(),
                "appEngine": t.proxy(
                    renames["NetworkEndpointGroupAppEngineIn"]
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalPublicDelegatedPrefixesInsert"] = compute.patch(
        "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "region": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalPublicDelegatedPrefixesGet"] = compute.patch(
        "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "region": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalPublicDelegatedPrefixesDelete"] = compute.patch(
        "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "region": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalPublicDelegatedPrefixesList"] = compute.patch(
        "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "region": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalPublicDelegatedPrefixesPatch"] = compute.patch(
        "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "region": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsGet"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsInsert"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsDelete"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsList"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkAttachmentsGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy",
        t.struct(
            {
                "resource": t.string().optional(),
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routesList"] = compute.delete(
        "projects/{project}/global/routes/{route}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "route": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routesGet"] = compute.delete(
        "projects/{project}/global/routes/{route}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "route": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routesInsert"] = compute.delete(
        "projects/{project}/global/routes/{route}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "route": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routesDelete"] = compute.delete(
        "projects/{project}/global/routes/{route}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "route": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsGet"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsUpdate"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsAddSignedUrlKey"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsDeleteSignedUrlKey"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsInsert"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsSetEdgeSecurityPolicy"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsPatch"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsList"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendBucketsDelete"] = compute.delete(
        "projects/{project}/global/backendBuckets/{backendBucket}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "backendBucket": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsList"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsAddNodes"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsListNodes"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsDelete"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsPatch"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsDeleteNodes"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsSetNodeTemplate"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsGetIamPolicy"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsInsert"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsSimulateMaintenanceEvent"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsTestIamPermissions"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsSetIamPolicy"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeGroupsGet"] = compute.get(
        "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        t.struct(
            {
                "nodeGroup": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NodeGroupOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectRemoteLocationsList"] = compute.get(
        "projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}",
        t.struct(
            {
                "project": t.string().optional(),
                "interconnectRemoteLocation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectRemoteLocationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["interconnectRemoteLocationsGet"] = compute.get(
        "projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}",
        t.struct(
            {
                "project": t.string().optional(),
                "interconnectRemoteLocation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InterconnectRemoteLocationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysGet"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysDelete"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysSetLabels"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysTestIamPermissions"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysInsert"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["externalVpnGatewaysList"] = compute.get(
        "projects/{project}/global/externalVpnGateways",
        t.struct(
            {
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ExternalVpnGatewayListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesGet"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesDelete"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesInsert"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["resourcePoliciesList"] = compute.get(
        "projects/{project}/regions/{region}/resourcePolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ResourcePolicyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersApplyUpdatesToInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersSetInstanceTemplate"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersPatchPerInstanceConfigs"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersListErrors"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersListPerInstanceConfigs"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersDeletePerInstanceConfigs"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersDeleteInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersListManagedInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersUpdatePerInstanceConfigs"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersCreateInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersList"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersResize"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersRecreateInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersInsert"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersAbandonInstances"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersDelete"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersSetTargetPools"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersGet"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupManagersPatch"] = compute.patch(
        "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        t.struct(
            {
                "project": t.string().optional(),
                "instanceGroupManager": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "status": t.proxy(renames["InstanceGroupManagerStatusIn"]).optional(),
                "statefulPolicy": t.proxy(renames["StatefulPolicyIn"]).optional(),
                "zone": t.string().optional(),
                "targetSize": t.integer().optional(),
                "name": t.string().optional(),
                "listManagedInstancesResults": t.string().optional(),
                "updatePolicy": t.proxy(
                    renames["InstanceGroupManagerUpdatePolicyIn"]
                ).optional(),
                "targetPools": t.array(t.string()).optional(),
                "creationTimestamp": t.string().optional(),
                "id": t.string().optional(),
                "distributionPolicy": t.proxy(
                    renames["DistributionPolicyIn"]
                ).optional(),
                "versions": t.array(
                    t.proxy(renames["InstanceGroupManagerVersionIn"])
                ).optional(),
                "description": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "instanceGroup": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "fingerprint": t.string().optional(),
                "currentActions": t.proxy(
                    renames["InstanceGroupManagerActionsSummaryIn"]
                ).optional(),
                "autoHealingPolicies": t.array(
                    t.proxy(renames["InstanceGroupManagerAutoHealingPolicyIn"])
                ).optional(),
                "baseInstanceName": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksList"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksPatch"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksSetPrivateIpGoogleAccess"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksInsert"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksListUsable"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksDelete"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksExpandIpCidrRange"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["subnetworksGet"] = compute.get(
        "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        t.struct(
            {
                "project": t.string().optional(),
                "subnetwork": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SubnetworkOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesInsert"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesGet"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesDelete"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesPatch"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesListAvailableFeatures"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslPoliciesList"] = compute.get(
        "projects/{project}/regions/{region}/sslPolicies",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["SslPoliciesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersGet"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersList"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersInsert"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersPatch"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersUpdate"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionAutoscalersDelete"] = compute.delete(
        "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "autoscaler": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOrganizationOperationsGet"] = compute.delete(
        "locations/global/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "parentId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOrganizationOperationsList"] = compute.delete(
        "locations/global/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "parentId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOrganizationOperationsDelete"] = compute.delete(
        "locations/global/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "parentId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesPatch"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesSetIamPolicy"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesGetIamPolicy"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesTestIamPermissions"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesInsert"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesGetFromFamily"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesDelete"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesSetLabels"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesDeprecate"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesGet"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imagesList"] = compute.get(
        "projects/{project}/global/images",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "pageToken": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceTemplatesInsert"] = compute.get(
        "projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}",
        t.struct(
            {
                "region": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceTemplatesDelete"] = compute.get(
        "projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}",
        t.struct(
            {
                "region": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceTemplatesList"] = compute.get(
        "projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}",
        t.struct(
            {
                "region": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceTemplatesGet"] = compute.get(
        "projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}",
        t.struct(
            {
                "region": t.string().optional(),
                "instanceTemplate": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesList"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesCloneRules"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesRemoveAssociation"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesAddRule"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesPatchRule"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesGet"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesTestIamPermissions"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesAddAssociation"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesRemoveRule"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesGetRule"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesPatch"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesGetAssociation"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesDelete"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesInsert"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesSetIamPolicy"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networkFirewallPoliciesGetIamPolicy"] = compute.get(
        "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersPatchPerInstanceConfigs"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersList"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersDelete"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersListManagedInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersGet"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersDeletePerInstanceConfigs"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersListErrors"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersRecreateInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersAggregatedList"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersApplyUpdatesToInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersPatch"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersListPerInstanceConfigs"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersCreateInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersSetTargetPools"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersAbandonInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersSetInstanceTemplate"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersUpdatePerInstanceConfigs"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersInsert"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersDeleteInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupManagersResize"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        t.struct(
            {
                "instanceGroupManager": t.string().optional(),
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicAdvertisedPrefixesDelete"] = compute.post(
        "projects/{project}/global/publicAdvertisedPrefixes",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "status": t.string().optional(),
                "sharedSecret": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "publicDelegatedPrefixs": t.array(
                    t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
                ).optional(),
                "dnsVerificationIp": t.string().optional(),
                "description": t.string().optional(),
                "ipCidrRange": t.string().optional(),
                "fingerprint": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicAdvertisedPrefixesGet"] = compute.post(
        "projects/{project}/global/publicAdvertisedPrefixes",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "status": t.string().optional(),
                "sharedSecret": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "publicDelegatedPrefixs": t.array(
                    t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
                ).optional(),
                "dnsVerificationIp": t.string().optional(),
                "description": t.string().optional(),
                "ipCidrRange": t.string().optional(),
                "fingerprint": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicAdvertisedPrefixesPatch"] = compute.post(
        "projects/{project}/global/publicAdvertisedPrefixes",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "status": t.string().optional(),
                "sharedSecret": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "publicDelegatedPrefixs": t.array(
                    t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
                ).optional(),
                "dnsVerificationIp": t.string().optional(),
                "description": t.string().optional(),
                "ipCidrRange": t.string().optional(),
                "fingerprint": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicAdvertisedPrefixesList"] = compute.post(
        "projects/{project}/global/publicAdvertisedPrefixes",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "status": t.string().optional(),
                "sharedSecret": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "publicDelegatedPrefixs": t.array(
                    t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
                ).optional(),
                "dnsVerificationIp": t.string().optional(),
                "description": t.string().optional(),
                "ipCidrRange": t.string().optional(),
                "fingerprint": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicAdvertisedPrefixesInsert"] = compute.post(
        "projects/{project}/global/publicAdvertisedPrefixes",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "status": t.string().optional(),
                "sharedSecret": t.string().optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "id": t.string().optional(),
                "publicDelegatedPrefixs": t.array(
                    t.proxy(renames["PublicAdvertisedPrefixPublicDelegatedPrefixIn"])
                ).optional(),
                "dnsVerificationIp": t.string().optional(),
                "description": t.string().optional(),
                "ipCidrRange": t.string().optional(),
                "fingerprint": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetInstancesGet"] = compute.post(
        "projects/{project}/zones/{zone}/targetInstances",
        t.struct(
            {
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "natPolicy": t.string().optional(),
                "network": t.string().optional(),
                "selfLink": t.string().optional(),
                "description": t.string().optional(),
                "instance": t.string().optional(),
                "id": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetInstancesAggregatedList"] = compute.post(
        "projects/{project}/zones/{zone}/targetInstances",
        t.struct(
            {
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "natPolicy": t.string().optional(),
                "network": t.string().optional(),
                "selfLink": t.string().optional(),
                "description": t.string().optional(),
                "instance": t.string().optional(),
                "id": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetInstancesList"] = compute.post(
        "projects/{project}/zones/{zone}/targetInstances",
        t.struct(
            {
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "natPolicy": t.string().optional(),
                "network": t.string().optional(),
                "selfLink": t.string().optional(),
                "description": t.string().optional(),
                "instance": t.string().optional(),
                "id": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetInstancesDelete"] = compute.post(
        "projects/{project}/zones/{zone}/targetInstances",
        t.struct(
            {
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "natPolicy": t.string().optional(),
                "network": t.string().optional(),
                "selfLink": t.string().optional(),
                "description": t.string().optional(),
                "instance": t.string().optional(),
                "id": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetInstancesInsert"] = compute.post(
        "projects/{project}/zones/{zone}/targetInstances",
        t.struct(
            {
                "zone": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "natPolicy": t.string().optional(),
                "network": t.string().optional(),
                "selfLink": t.string().optional(),
                "description": t.string().optional(),
                "instance": t.string().optional(),
                "id": t.string().optional(),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstancesBulkInsert"] = compute.post(
        "projects/{project}/regions/{region}/instances/bulkInsert",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "namePattern": t.string().optional(),
                "count": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "perInstanceProperties": t.struct(
                    {"_": t.string().optional()}
                ).optional(),
                "minCount": t.string().optional(),
                "locationPolicy": t.proxy(renames["LocationPolicyIn"]).optional(),
                "sourceInstanceTemplate": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesDelete"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesList"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesInsert"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesGet"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["nodeTemplatesGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "region": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsGet"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsInsert"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsRemoveInstance"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsRemoveHealthCheck"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsAggregatedList"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsSetBackup"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsAddHealthCheck"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsAddInstance"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsGetHealth"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsList"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetPoolsDelete"] = compute.delete(
        "projects/{project}/regions/{region}/targetPools/{targetPool}",
        t.struct(
            {
                "region": t.string().optional(),
                "targetPool": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersPreview"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersPatch"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersDelete"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersInsert"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersList"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersGet"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersGetRouterStatus"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersUpdate"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["routersGetNatMappingInfo"] = compute.get(
        "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        t.struct(
            {
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "natName": t.string().optional(),
                "router": t.string().optional(),
                "maxResults": t.integer().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["VmEndpointNatMappingsListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zoneOperationsList"] = compute.get(
        "projects/{project}/zones/{zone}/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zoneOperationsWait"] = compute.get(
        "projects/{project}/zones/{zone}/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zoneOperationsDelete"] = compute.get(
        "projects/{project}/zones/{zone}/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zoneOperationsGet"] = compute.get(
        "projects/{project}/zones/{zone}/operations/{operation}",
        t.struct(
            {
                "operation": t.string().optional(),
                "project": t.string().optional(),
                "zone": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksPatch"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksGet"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksUpdatePeering"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksInsert"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksSwitchToCustomMode"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksGetEffectiveFirewalls"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksList"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksDelete"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksListPeeringRoutes"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksAddPeering"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["networksRemovePeering"] = compute.post(
        "projects/{project}/global/networks/{network}/removePeering",
        t.struct(
            {
                "requestId": t.string().optional(),
                "network": t.string().optional(),
                "project": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsDelete"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsDetachNetworkEndpoints"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsListNetworkEndpoints"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsGet"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsInsert"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsAttachNetworkEndpoints"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalNetworkEndpointGroupsList"] = compute.get(
        "projects/{project}/global/networkEndpointGroups",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["NetworkEndpointGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionCommitmentsGet"] = compute.get(
        "projects/{project}/regions/{region}/commitments",
        t.struct(
            {
                "region": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["CommitmentListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionCommitmentsInsert"] = compute.get(
        "projects/{project}/regions/{region}/commitments",
        t.struct(
            {
                "region": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["CommitmentListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionCommitmentsAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/commitments",
        t.struct(
            {
                "region": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["CommitmentListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionCommitmentsUpdate"] = compute.get(
        "projects/{project}/regions/{region}/commitments",
        t.struct(
            {
                "region": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["CommitmentListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionCommitmentsList"] = compute.get(
        "projects/{project}/regions/{region}/commitments",
        t.struct(
            {
                "region": t.string().optional(),
                "pageToken": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["CommitmentListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesSetCertificateMap"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesSetBackendService"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesSetSslCertificates"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesInsert"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesDelete"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesList"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesSetSslPolicy"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesGet"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetSslProxiesSetProxyHeader"] = compute.post(
        "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        t.struct(
            {
                "targetSslProxy": t.string().optional(),
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsList"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsAddInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsAggregatedList"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsSetNamedPorts"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsListInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsGet"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsDelete"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsRemoveInstances"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceGroupsInsert"] = compute.post(
        "projects/{project}/zones/{zone}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "network": t.string().optional(),
                "region": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "subnetwork": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "selfLink": t.string().optional(),
                "namedPorts": t.array(t.proxy(renames["NamedPortIn"])).optional(),
                "size": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsDelete"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsList"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsInsert"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsGet"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsTestIamPermissions"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsPatch"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["packetMirroringsAggregatedList"] = compute.get(
        "projects/{project}/aggregated/packetMirrorings",
        t.struct(
            {
                "includeAllScopes": t.boolean().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PacketMirroringAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsGet"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsAggregatedList"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsDelete"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsList"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsSetLabels"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["vpnTunnelsInsert"] = compute.post(
        "projects/{project}/regions/{region}/vpnTunnels",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "peerExternalGatewayInterface": t.integer().optional(),
                "labelFingerprint": t.string().optional(),
                "status": t.string().optional(),
                "id": t.string().optional(),
                "ikeVersion": t.integer().optional(),
                "peerExternalGateway": t.string().optional(),
                "peerGcpGateway": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "router": t.string().optional(),
                "sharedSecretHash": t.string().optional(),
                "localTrafficSelector": t.array(t.string()).optional(),
                "sharedSecret": t.string().optional(),
                "vpnGatewayInterface": t.integer().optional(),
                "detailedStatus": t.string().optional(),
                "description": t.string().optional(),
                "targetVpnGateway": t.string().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "name": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "peerIp": t.string().optional(),
                "remoteTrafficSelector": t.array(t.string()).optional(),
                "vpnGateway": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesInsert"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesSetIamPolicy"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesList"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesTestIamPermissions"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesGet"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesDelete"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licensesGetIamPolicy"] = compute.get(
        "projects/{project}/global/licenses/{resource}/getIamPolicy",
        t.struct(
            {
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesInsert"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesGet"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesMove"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesDelete"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesList"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalAddressesSetLabels"] = compute.post(
        "projects/{project}/global/addresses/{resource}/setLabels",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "labelFingerprint": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesInsert"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesGet"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesSetIamPolicy"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesAggregatedList"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesTestIamPermissions"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesDelete"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesGetIamPolicy"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instanceTemplatesList"] = compute.get(
        "projects/{project}/global/instanceTemplates",
        t.struct(
            {
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["InstanceTemplateListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSecurityPoliciesDelete"] = compute.post(
        "projects/{project}/regions/{region}/securityPolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "validateOnly": t.boolean().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "ddosProtectionConfig": t.proxy(
                    renames["SecurityPolicyDdosProtectionConfigIn"]
                ),
                "id": t.string().optional(),
                "type": t.string().optional(),
                "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "selfLink": t.string().optional(),
                "fingerprint": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "advancedOptionsConfig": t.proxy(
                    renames["SecurityPolicyAdvancedOptionsConfigIn"]
                ),
                "adaptiveProtectionConfig": t.proxy(
                    renames["SecurityPolicyAdaptiveProtectionConfigIn"]
                ),
                "recaptchaOptionsConfig": t.proxy(
                    renames["SecurityPolicyRecaptchaOptionsConfigIn"]
                ),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSecurityPoliciesList"] = compute.post(
        "projects/{project}/regions/{region}/securityPolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "validateOnly": t.boolean().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "ddosProtectionConfig": t.proxy(
                    renames["SecurityPolicyDdosProtectionConfigIn"]
                ),
                "id": t.string().optional(),
                "type": t.string().optional(),
                "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "selfLink": t.string().optional(),
                "fingerprint": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "advancedOptionsConfig": t.proxy(
                    renames["SecurityPolicyAdvancedOptionsConfigIn"]
                ),
                "adaptiveProtectionConfig": t.proxy(
                    renames["SecurityPolicyAdaptiveProtectionConfigIn"]
                ),
                "recaptchaOptionsConfig": t.proxy(
                    renames["SecurityPolicyRecaptchaOptionsConfigIn"]
                ),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSecurityPoliciesPatch"] = compute.post(
        "projects/{project}/regions/{region}/securityPolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "validateOnly": t.boolean().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "ddosProtectionConfig": t.proxy(
                    renames["SecurityPolicyDdosProtectionConfigIn"]
                ),
                "id": t.string().optional(),
                "type": t.string().optional(),
                "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "selfLink": t.string().optional(),
                "fingerprint": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "advancedOptionsConfig": t.proxy(
                    renames["SecurityPolicyAdvancedOptionsConfigIn"]
                ),
                "adaptiveProtectionConfig": t.proxy(
                    renames["SecurityPolicyAdaptiveProtectionConfigIn"]
                ),
                "recaptchaOptionsConfig": t.proxy(
                    renames["SecurityPolicyRecaptchaOptionsConfigIn"]
                ),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSecurityPoliciesGet"] = compute.post(
        "projects/{project}/regions/{region}/securityPolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "validateOnly": t.boolean().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "ddosProtectionConfig": t.proxy(
                    renames["SecurityPolicyDdosProtectionConfigIn"]
                ),
                "id": t.string().optional(),
                "type": t.string().optional(),
                "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "selfLink": t.string().optional(),
                "fingerprint": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "advancedOptionsConfig": t.proxy(
                    renames["SecurityPolicyAdvancedOptionsConfigIn"]
                ),
                "adaptiveProtectionConfig": t.proxy(
                    renames["SecurityPolicyAdaptiveProtectionConfigIn"]
                ),
                "recaptchaOptionsConfig": t.proxy(
                    renames["SecurityPolicyRecaptchaOptionsConfigIn"]
                ),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSecurityPoliciesInsert"] = compute.post(
        "projects/{project}/regions/{region}/securityPolicies",
        t.struct(
            {
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "validateOnly": t.boolean().optional(),
                "name": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "ddosProtectionConfig": t.proxy(
                    renames["SecurityPolicyDdosProtectionConfigIn"]
                ),
                "id": t.string().optional(),
                "type": t.string().optional(),
                "rules": t.array(t.proxy(renames["SecurityPolicyRuleIn"])).optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "selfLink": t.string().optional(),
                "fingerprint": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "advancedOptionsConfig": t.proxy(
                    renames["SecurityPolicyAdvancedOptionsConfigIn"]
                ),
                "adaptiveProtectionConfig": t.proxy(
                    renames["SecurityPolicyAdaptiveProtectionConfigIn"]
                ),
                "recaptchaOptionsConfig": t.proxy(
                    renames["SecurityPolicyRecaptchaOptionsConfigIn"]
                ),
                "kind": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsAggregatedList"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsInsert"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsList"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsDelete"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsGet"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsPatch"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsInvalidateCache"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsUpdate"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["urlMapsValidate"] = compute.post(
        "projects/{project}/global/urlMaps/{urlMap}/validate",
        t.struct(
            {
                "project": t.string().optional(),
                "urlMap": t.string().optional(),
                "loadBalancingSchemes": t.array(t.string()).optional(),
                "resource": t.proxy(renames["UrlMapIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["UrlMapsValidateResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesInsert"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesList"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesSetLabels"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesSetTarget"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesGet"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesDelete"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalForwardingRulesPatch"] = compute.patch(
        "projects/{project}/global/forwardingRules/{forwardingRule}",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "forwardingRule": t.string().optional(),
                "pscConnectionStatus": t.string(),
                "creationTimestamp": t.string().optional(),
                "portRange": t.string().optional(),
                "ports": t.array(t.string()).optional(),
                "subnetwork": t.string().optional(),
                "isMirroringCollector": t.boolean().optional(),
                "allowPscGlobalAccess": t.boolean().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "labelFingerprint": t.string().optional(),
                "allPorts": t.boolean().optional(),
                "network": t.string().optional(),
                "fingerprint": t.string().optional(),
                "IPAddress": t.string().optional(),
                "serviceName": t.string().optional(),
                "kind": t.string().optional(),
                "backendService": t.string().optional(),
                "pscConnectionId": t.string().optional(),
                "name": t.string().optional(),
                "labels": t.struct({"_": t.string().optional()}).optional(),
                "serviceDirectoryRegistrations": t.array(
                    t.proxy(renames["ForwardingRuleServiceDirectoryRegistrationIn"])
                ).optional(),
                "baseForwardingRule": t.string().optional(),
                "noAutomateDnsZone": t.boolean().optional(),
                "metadataFilters": t.array(
                    t.proxy(renames["MetadataFilterIn"])
                ).optional(),
                "region": t.string().optional(),
                "ipVersion": t.string().optional(),
                "networkTier": t.string().optional(),
                "allowGlobalAccess": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "sourceIpRanges": t.array(t.string()).optional(),
                "id": t.string().optional(),
                "target": t.string().optional(),
                "serviceLabel": t.string().optional(),
                "IPProtocol": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpProxiesGet"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpProxies",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpProxiesDelete"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpProxies",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpProxiesSetUrlMap"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpProxies",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpProxiesInsert"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpProxies",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpProxiesList"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpProxies",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpProxyListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksUpdate"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksTestIamPermissions"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksSetIamPolicy"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksResize"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksCreateSnapshot"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksDelete"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksGetIamPolicy"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksAddResourcePolicies"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksRemoveResourcePolicies"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksGet"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksInsert"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksSetLabels"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["disksList"] = compute.get(
        "projects/{project}/zones/{zone}/disks",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOperationsAggregatedList"] = compute.delete(
        "projects/{project}/global/operations/{operation}",
        t.struct(
            {
                "project": t.string().optional(),
                "operation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOperationsGet"] = compute.delete(
        "projects/{project}/global/operations/{operation}",
        t.struct(
            {
                "project": t.string().optional(),
                "operation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOperationsWait"] = compute.delete(
        "projects/{project}/global/operations/{operation}",
        t.struct(
            {
                "project": t.string().optional(),
                "operation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOperationsList"] = compute.delete(
        "projects/{project}/global/operations/{operation}",
        t.struct(
            {
                "project": t.string().optional(),
                "operation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["globalOperationsDelete"] = compute.delete(
        "projects/{project}/global/operations/{operation}",
        t.struct(
            {
                "project": t.string().optional(),
                "operation": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.struct({"_": t.string().optional()}),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsAggregatedList"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsList"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsResize"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsSetIamPolicy"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsGetIamPolicy"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsGet"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsTestIamPermissions"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsDelete"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsInsert"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["reservationsUpdate"] = compute.patch(
        "projects/{project}/zones/{zone}/reservations/{reservation}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "updateMask": t.string().optional(),
                "zone": t.string().optional(),
                "paths": t.string(),
                "reservation": t.string().optional(),
                "specificReservationRequired": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "resourcePolicies": t.struct({"_": t.string().optional()}).optional(),
                "description": t.string().optional(),
                "status": t.string().optional(),
                "kind": t.string().optional(),
                "specificReservation": t.proxy(
                    renames["AllocationSpecificSKUReservationIn"]
                ).optional(),
                "shareSettings": t.proxy(renames["ShareSettingsIn"]).optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "commitment": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "resourceStatus": t.proxy(
                    renames["AllocationResourceStatusIn"]
                ).optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesGet"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesDelete"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesInsert"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesAggregatedList"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesList"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["publicDelegatedPrefixesPatch"] = compute.patch(
        "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        t.struct(
            {
                "project": t.string().optional(),
                "requestId": t.string().optional(),
                "publicDelegatedPrefix": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "fingerprint": t.string().optional(),
                "id": t.string().optional(),
                "status": t.string().optional(),
                "name": t.string().optional(),
                "parentPrefix": t.string().optional(),
                "isLiveMigration": t.boolean().optional(),
                "ipCidrRange": t.string().optional(),
                "publicDelegatedSubPrefixs": t.array(
                    t.proxy(renames["PublicDelegatedPrefixPublicDelegatedSubPrefixIn"])
                ).optional(),
                "kind": t.string().optional(),
                "selfLink": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["imageFamilyViewsGet"] = compute.get(
        "projects/{project}/zones/{zone}/imageFamilyViews/{family}",
        t.struct(
            {
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "family": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ImageFamilyViewOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupsGet"] = compute.get(
        "projects/{project}/regions/{region}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionInstanceGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupsListInstances"] = compute.get(
        "projects/{project}/regions/{region}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionInstanceGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupsSetNamedPorts"] = compute.get(
        "projects/{project}/regions/{region}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionInstanceGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionInstanceGroupsList"] = compute.get(
        "projects/{project}/regions/{region}/instanceGroups",
        t.struct(
            {
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionInstanceGroupListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthCheckServicesGet"] = compute.get(
        "projects/{project}/regions/{region}/healthCheckServices",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["HealthCheckServicesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthCheckServicesInsert"] = compute.get(
        "projects/{project}/regions/{region}/healthCheckServices",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["HealthCheckServicesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthCheckServicesDelete"] = compute.get(
        "projects/{project}/regions/{region}/healthCheckServices",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["HealthCheckServicesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthCheckServicesPatch"] = compute.get(
        "projects/{project}/regions/{region}/healthCheckServices",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["HealthCheckServicesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionHealthCheckServicesList"] = compute.get(
        "projects/{project}/regions/{region}/healthCheckServices",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["HealthCheckServicesListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsValidate"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsUpdate"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsList"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsPatch"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsGet"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsDelete"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionUrlMapsInsert"] = compute.post(
        "projects/{project}/regions/{region}/urlMaps",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "fingerprint": t.string().optional(),
                "defaultService": t.string().optional(),
                "pathMatchers": t.array(t.proxy(renames["PathMatcherIn"])).optional(),
                "id": t.string().optional(),
                "headerAction": t.proxy(renames["HttpHeaderActionIn"]).optional(),
                "tests": t.array(t.proxy(renames["UrlMapTestIn"])).optional(),
                "description": t.string().optional(),
                "kind": t.string().optional(),
                "hostRules": t.array(t.proxy(renames["HostRuleIn"])).optional(),
                "name": t.string().optional(),
                "selfLink": t.string().optional(),
                "defaultUrlRedirect": t.proxy(
                    renames["HttpRedirectActionIn"]
                ).optional(),
                "defaultRouteAction": t.proxy(renames["HttpRouteActionIn"]).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetTcpProxiesList"] = compute.post(
        "projects/{project}/regions/{region}/targetTcpProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "project": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "service": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetTcpProxiesDelete"] = compute.post(
        "projects/{project}/regions/{region}/targetTcpProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "project": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "service": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetTcpProxiesGet"] = compute.post(
        "projects/{project}/regions/{region}/targetTcpProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "project": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "service": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetTcpProxiesInsert"] = compute.post(
        "projects/{project}/regions/{region}/targetTcpProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "region": t.string().optional(),
                "project": t.string().optional(),
                "proxyHeader": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "id": t.string().optional(),
                "name": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "selfLink": t.string().optional(),
                "service": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksInsert"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksDelete"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksGet"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksPatch"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksList"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["httpsHealthChecksUpdate"] = compute.put(
        "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        t.struct(
            {
                "project": t.string().optional(),
                "httpsHealthCheck": t.string().optional(),
                "requestId": t.string().optional(),
                "port": t.integer().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "unhealthyThreshold": t.integer().optional(),
                "selfLink": t.string().optional(),
                "kind": t.string().optional(),
                "description": t.string().optional(),
                "healthyThreshold": t.integer().optional(),
                "checkIntervalSec": t.integer().optional(),
                "id": t.string().optional(),
                "timeoutSec": t.integer().optional(),
                "requestPath": t.string().optional(),
                "host": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["acceleratorTypesAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}",
        t.struct(
            {
                "acceleratorType": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AcceleratorTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["acceleratorTypesList"] = compute.get(
        "projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}",
        t.struct(
            {
                "acceleratorType": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AcceleratorTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["acceleratorTypesGet"] = compute.get(
        "projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}",
        t.struct(
            {
                "acceleratorType": t.string().optional(),
                "zone": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["AcceleratorTypeOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDiskTypesGet"] = compute.get(
        "projects/{project}/regions/{region}/diskTypes",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionDiskTypeListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDiskTypesList"] = compute.get(
        "projects/{project}/regions/{region}/diskTypes",
        t.struct(
            {
                "filter": t.string().optional(),
                "region": t.string().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionDiskTypeListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslCertificatesDelete"] = compute.post(
        "projects/{project}/regions/{region}/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslCertificatesGet"] = compute.post(
        "projects/{project}/regions/{region}/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslCertificatesList"] = compute.post(
        "projects/{project}/regions/{region}/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionSslCertificatesInsert"] = compute.post(
        "projects/{project}/regions/{region}/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licenseCodesGet"] = compute.post(
        "projects/{project}/global/licenseCodes/{resource}/testIamPermissions",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "permissions": t.array(t.string()).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TestPermissionsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["licenseCodesTestIamPermissions"] = compute.post(
        "projects/{project}/global/licenseCodes/{resource}/testIamPermissions",
        t.struct(
            {
                "project": t.string().optional(),
                "resource": t.string().optional(),
                "permissions": t.array(t.string()).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TestPermissionsResponseOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesSetLabels"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesSetTarget"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesInsert"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesDelete"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesPatch"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesGet"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["forwardingRulesList"] = compute.get(
        "projects/{project}/regions/{region}/forwardingRules",
        t.struct(
            {
                "pageToken": t.string().optional(),
                "orderBy": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "maxResults": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ForwardingRuleListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineTypesGet"] = compute.get(
        "projects/{project}/aggregated/machineTypes",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["MachineTypeAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineTypesList"] = compute.get(
        "projects/{project}/aggregated/machineTypes",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["MachineTypeAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineTypesAggregatedList"] = compute.get(
        "projects/{project}/aggregated/machineTypes",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "includeAllScopes": t.boolean().optional(),
                "orderBy": t.string().optional(),
                "maxResults": t.integer().optional(),
                "project": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["MachineTypeAggregatedListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesDelete"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesRemoveRule"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesGet"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesAddRule"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesListAssociations"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesGetAssociation"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesSetIamPolicy"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesList"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesRemoveAssociation"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesTestIamPermissions"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesPatch"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesCloneRules"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesGetIamPolicy"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesGetRule"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesInsert"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesAddAssociation"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesMove"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["firewallPoliciesPatchRule"] = compute.post(
        "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        t.struct(
            {
                "requestId": t.string().optional(),
                "priority": t.integer().optional(),
                "firewallPolicy": t.string().optional(),
                "targetServiceAccounts": t.array(t.string()).optional(),
                "action": t.string().optional(),
                "match": t.proxy(renames["FirewallPolicyRuleMatcherIn"]).optional(),
                "description": t.string().optional(),
                "enableLogging": t.boolean().optional(),
                "kind": t.string().optional(),
                "direction": t.string().optional(),
                "disabled": t.boolean().optional(),
                "ruleName": t.string().optional(),
                "targetResources": t.array(t.string()).optional(),
                "targetSecureTags": t.array(
                    t.proxy(renames["FirewallPolicyRuleSecureTagIn"])
                ).optional(),
                "ruleTupleCount": t.integer().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesUpdate"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesList"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesGetIamPolicy"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesDelete"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesGetHealth"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesGet"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesPatch"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesSetIamPolicy"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionBackendServicesInsert"] = compute.post(
        "projects/{project}/regions/{region}/backendServices",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "protocol": t.string().optional(),
                "sessionAffinity": t.string().optional(),
                "kind": t.string().optional(),
                "affinityCookieTtlSec": t.integer().optional(),
                "subsetting": t.proxy(renames["SubsettingIn"]),
                "localityLbPolicies": t.array(
                    t.proxy(
                        renames["BackendServiceLocalityLoadBalancingPolicyConfigIn"]
                    )
                ).optional(),
                "securityPolicy": t.string().optional(),
                "fingerprint": t.string().optional(),
                "description": t.string().optional(),
                "loadBalancingScheme": t.string().optional(),
                "circuitBreakers": t.proxy(renames["CircuitBreakersIn"]),
                "selfLink": t.string().optional(),
                "customResponseHeaders": t.array(t.string()).optional(),
                "outlierDetection": t.proxy(renames["OutlierDetectionIn"]).optional(),
                "localityLbPolicy": t.string().optional(),
                "securitySettings": t.proxy(renames["SecuritySettingsIn"]).optional(),
                "edgeSecurityPolicy": t.string().optional(),
                "name": t.string().optional(),
                "failoverPolicy": t.proxy(
                    renames["BackendServiceFailoverPolicyIn"]
                ).optional(),
                "iap": t.proxy(renames["BackendServiceIAPIn"]).optional(),
                "serviceBindings": t.array(t.string()).optional(),
                "backends": t.array(t.proxy(renames["BackendIn"])).optional(),
                "port": t.integer().optional(),
                "timeoutSec": t.integer().optional(),
                "connectionDraining": t.proxy(renames["ConnectionDrainingIn"]),
                "id": t.string().optional(),
                "connectionTrackingPolicy": t.proxy(
                    renames["BackendServiceConnectionTrackingPolicyIn"]
                ).optional(),
                "maxStreamDuration": t.proxy(renames["DurationIn"]).optional(),
                "customRequestHeaders": t.array(t.string()).optional(),
                "logConfig": t.proxy(renames["BackendServiceLogConfigIn"]).optional(),
                "metadatas": t.struct({"_": t.string().optional()}).optional(),
                "cdnPolicy": t.proxy(renames["BackendServiceCdnPolicyIn"]).optional(),
                "healthChecks": t.array(t.string()).optional(),
                "compressionMode": t.string().optional(),
                "enableCDN": t.boolean().optional(),
                "consistentHash": t.proxy(
                    renames["ConsistentHashLoadBalancerSettingsIn"]
                ).optional(),
                "creationTimestamp": t.string().optional(),
                "portName": t.string().optional(),
                "network": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesList"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesGet"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesTestIamPermissions"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesDelete"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesSetIamPolicy"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesGetIamPolicy"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["machineImagesInsert"] = compute.post(
        "projects/{project}/global/machineImages",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "sourceInstance": t.string().optional(),
                "kind": t.string().optional(),
                "storageLocations": t.array(t.string()).optional(),
                "sourceInstanceProperties": t.proxy(
                    renames["SourceInstancePropertiesIn"]
                ).optional(),
                "totalStorageBytes": t.string().optional(),
                "status": t.string().optional(),
                "selfLink": t.string().optional(),
                "instanceProperties": t.proxy(
                    renames["InstancePropertiesIn"]
                ).optional(),
                "machineImageEncryptionKey": t.proxy(
                    renames["CustomerEncryptionKeyIn"]
                ).optional(),
                "guestFlush": t.boolean().optional(),
                "description": t.string().optional(),
                "satisfiesPzs": t.boolean().optional(),
                "id": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "name": t.string().optional(),
                "savedDisks": t.array(t.proxy(renames["SavedDiskIn"])).optional(),
                "sourceDiskEncryptionKeys": t.array(
                    t.proxy(renames["SourceDiskEncryptionKeyIn"])
                ).optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksInsert"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksGetIamPolicy"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksUpdate"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksRemoveResourcePolicies"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksGet"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksAddResourcePolicies"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksTestIamPermissions"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksDelete"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksCreateSnapshot"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksSetLabels"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksList"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksSetIamPolicy"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionDisksResize"] = compute.post(
        "projects/{project}/regions/{region}/disks/{disk}/resize",
        t.struct(
            {
                "project": t.string().optional(),
                "disk": t.string().optional(),
                "region": t.string().optional(),
                "requestId": t.string().optional(),
                "sizeGb": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsList"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsAggregatedList"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsDelete"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsInsert"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsPatch"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["serviceAttachmentsGet"] = compute.get(
        "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        t.struct(
            {
                "project": t.string().optional(),
                "region": t.string().optional(),
                "serviceAttachment": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ServiceAttachmentOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetGuestAttributes"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetIamPolicy"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesAggregatedList"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetDeletionProtection"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetScheduling"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetName"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetDiskAutoDelete"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetServiceAccount"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetShieldedInstanceIntegrityPolicy"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesAttachDisk"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetEffectiveFirewalls"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesUpdateShieldedInstanceConfig"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetScreenshot"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesList"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetSerialPortOutput"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetTags"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetMachineType"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesTestIamPermissions"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetMinCpuPlatform"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetMachineResources"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesBulkInsert"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetShieldedInstanceIdentity"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesReset"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesUpdateDisplayDevice"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetMetadata"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesDetachDisk"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesStartWithEncryptionKey"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesInsert"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGet"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesAddAccessConfig"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesDeleteAccessConfig"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesListReferrers"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesUpdate"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSuspend"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesAddResourcePolicies"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesResume"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesStart"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesDelete"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesUpdateNetworkInterface"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesGetIamPolicy"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesRemoveResourcePolicies"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesStop"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSimulateMaintenanceEvent"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSendDiagnosticInterrupt"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesSetLabels"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["instancesUpdateAccessConfig"] = compute.post(
        "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        t.struct(
            {
                "requestId": t.string().optional(),
                "zone": t.string().optional(),
                "instance": t.string().optional(),
                "project": t.string().optional(),
                "networkInterface": t.string().optional(),
                "type": t.string().optional(),
                "externalIpv6PrefixLength": t.integer().optional(),
                "kind": t.string().optional(),
                "natIP": t.string().optional(),
                "setPublicPtr": t.boolean().optional(),
                "networkTier": t.string().optional(),
                "publicPtrDomainName": t.string().optional(),
                "externalIpv6": t.string().optional(),
                "name": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsMoveDisk"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsGet"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsSetUsageExportBucket"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsEnableXpnHost"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsMoveInstance"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsSetDefaultNetworkTier"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsDisableXpnHost"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsListXpnHosts"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsSetCommonInstanceMetadata"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsEnableXpnResource"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsGetXpnResources"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsDisableXpnResource"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["projectsGetXpnHost"] = compute.get(
        "projects/{project}/getXpnHost",
        t.struct({"project": t.string().optional(), "auth": t.string().optional()}),
        t.proxy(renames["ProjectOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesUpdate"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesAddSignedUrlKey"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesSetIamPolicy"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesAggregatedList"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesInsert"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesDeleteSignedUrlKey"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesGetHealth"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesSetEdgeSecurityPolicy"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesList"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesSetSecurityPolicy"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesGet"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesPatch"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesGetIamPolicy"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["backendServicesDelete"] = compute.delete(
        "projects/{project}/global/backendServices/{backendService}",
        t.struct(
            {
                "backendService": t.string().optional(),
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["diskTypesGet"] = compute.get(
        "projects/{project}/zones/{zone}/diskTypes",
        t.struct(
            {
                "zone": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskTypeListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["diskTypesAggregatedList"] = compute.get(
        "projects/{project}/zones/{zone}/diskTypes",
        t.struct(
            {
                "zone": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskTypeListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["diskTypesList"] = compute.get(
        "projects/{project}/zones/{zone}/diskTypes",
        t.struct(
            {
                "zone": t.string().optional(),
                "maxResults": t.integer().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "filter": t.string().optional(),
                "orderBy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["DiskTypeListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesGetAssociation"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesPatchRule"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesAddAssociation"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesGetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesInsert"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesGetRule"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesPatch"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesCloneRules"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesRemoveAssociation"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesRemoveRule"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesTestIamPermissions"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesSetIamPolicy"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesGetEffectiveFirewalls"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesList"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesAddRule"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesDelete"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionNetworkFirewallPoliciesGet"] = compute.get(
        "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        t.struct(
            {
                "firewallPolicy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["FirewallPolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionsGet"] = compute.get(
        "projects/{project}/regions",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionsList"] = compute.get(
        "projects/{project}/regions",
        t.struct(
            {
                "project": t.string().optional(),
                "returnPartialSuccess": t.boolean().optional(),
                "filter": t.string().optional(),
                "maxResults": t.integer().optional(),
                "orderBy": t.string().optional(),
                "pageToken": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["RegionListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesSetUrlMap"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesDelete"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesInsert"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesList"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesSetSslCertificates"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesPatch"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["regionTargetHttpsProxiesGet"] = compute.get(
        "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        t.struct(
            {
                "targetHttpsProxy": t.string().optional(),
                "project": t.string().optional(),
                "region": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["TargetHttpsProxyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesAggregatedList"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesSetUrlMap"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesSetCertificateMap"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesList"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesPatch"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesSetSslCertificates"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesGet"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesSetSslPolicy"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesDelete"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesSetQuicOverride"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["targetHttpsProxiesInsert"] = compute.post(
        "projects/{project}/global/targetHttpsProxies",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "proxyBind": t.boolean().optional(),
                "quicOverride": t.string().optional(),
                "fingerprint": t.string().optional(),
                "region": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "description": t.string().optional(),
                "sslPolicy": t.string().optional(),
                "id": t.string().optional(),
                "selfLink": t.string().optional(),
                "certificateMap": t.string().optional(),
                "kind": t.string().optional(),
                "sslCertificates": t.array(t.string()).optional(),
                "name": t.string().optional(),
                "authorizationPolicy": t.string().optional(),
                "urlMap": t.string().optional(),
                "serverTlsPolicy": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zonesGet"] = compute.get(
        "projects/{project}/zones",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ZoneListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["zonesList"] = compute.get(
        "projects/{project}/zones",
        t.struct(
            {
                "returnPartialSuccess": t.boolean().optional(),
                "maxResults": t.integer().optional(),
                "pageToken": t.string().optional(),
                "project": t.string().optional(),
                "orderBy": t.string().optional(),
                "filter": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["ZoneListOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsSetIamPolicy"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsGet"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsDelete"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsSetLabels"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsInsert"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsTestIamPermissions"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsList"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["snapshotsGetIamPolicy"] = compute.get(
        "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        t.struct(
            {
                "project": t.string().optional(),
                "optionsRequestedPolicyVersion": t.integer().optional(),
                "resource": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["PolicyOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslCertificatesList"] = compute.post(
        "projects/{project}/global/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "region": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslCertificatesDelete"] = compute.post(
        "projects/{project}/global/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "region": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslCertificatesGet"] = compute.post(
        "projects/{project}/global/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "region": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslCertificatesAggregatedList"] = compute.post(
        "projects/{project}/global/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "region": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )
    functions["sslCertificatesInsert"] = compute.post(
        "projects/{project}/global/sslCertificates",
        t.struct(
            {
                "requestId": t.string().optional(),
                "project": t.string().optional(),
                "privateKey": t.string().optional(),
                "subjectAlternativeNames": t.array(t.string()).optional(),
                "selfLink": t.string().optional(),
                "region": t.string().optional(),
                "certificate": t.string().optional(),
                "description": t.string().optional(),
                "creationTimestamp": t.string().optional(),
                "managed": t.proxy(
                    renames["SslCertificateManagedSslCertificateIn"]
                ).optional(),
                "kind": t.string().optional(),
                "selfManaged": t.proxy(
                    renames["SslCertificateSelfManagedSslCertificateIn"]
                ).optional(),
                "name": t.string().optional(),
                "expireTime": t.string().optional(),
                "type": t.string().optional(),
                "id": t.string().optional(),
                "auth": t.string().optional(),
            }
        ),
        t.proxy(renames["OperationOut"]),
        auth_token_field="auth",
        content_type="application/json",
    )

    return Import(
        importer="compute", renames=renames, types=Box(types), functions=Box(functions)
    )
