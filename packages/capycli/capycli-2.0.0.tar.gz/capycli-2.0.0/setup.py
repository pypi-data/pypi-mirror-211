# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['capycli',
 'capycli.bom',
 'capycli.common',
 'capycli.data',
 'capycli.dependencies',
 'capycli.main',
 'capycli.mapping',
 'capycli.moverview',
 'capycli.project']

package_data = \
{'': ['*']}

install_requires = \
['chardet>=3.0.4,<4.0.0',
 'cli-support>=1.3,<2.0',
 'colorama>=0.4.3,<0.5.0',
 'cyclonedx-bom>=3.11.0,<4.0.0',
 'cyclonedx-python-lib>3.1.1',
 'dateparser>=1.1.8,<2.0.0',
 'importlib-resources>=5.12.0,<6.0.0',
 'openpyxl>=3.0.3,<4.0.0',
 'packageurl-python>0.8,<1.0',
 'pyjwt>=1.7.1,<2.0.0',
 'requests>=2.31.0,<3.0.0',
 'requirements-parser>=0.2.0,<0.3.0',
 'sw360>=1.2.0,<2.0.0',
 'tomli>=2.0.1,<3.0.0',
 'urllib3==1.26.15',
 'wheel>=0.38.4,<0.39.0']

entry_points = \
{'console_scripts': ['capycli = capycli.main.cli:main']}

setup_kwargs = {
    'name': 'capycli',
    'version': '2.0.0',
    'description': 'CaPyCli - Clearing Automation Python Command Line Interface',
    'long_description': '<!--\n# SPDX-FileCopyrightText: (c) 2018-2023 Siemens\n# SPDX-License-Identifier: MIT\n-->\n\n![Header_Image](images/Github-social-capycli.png)\n\n# CaPyCli - Clearing Automation Python Command Line Tool for SW360\n\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/sw360/capycli/blob/main/License.md)\n[![PyPI](https://shields.io/pypi/v/capycli)](https://pypi.org/project/capycli/)\n[![Python Version](https://img.shields.io/badge/python-3.8%2C3.9%2C3.10%2C3.11-yellow?logo=python)](https://www.python.org/doc/versions/)\n[![Static Checks](https://github.com/sw360/capycli/actions/workflows/static-checks.yml/badge.svg)](https://github.com/sw360/capycli/actions/workflows/static-checks.yml)\n[![Unit Tests](https://github.com/sw360/capycli/actions/workflows/unit-tests.yml/badge.svg)](https://github.com/sw360/capycli/actions/workflows/unit-tests.yml)\n[![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/tngraf/c8f15831ecdcf6e86ab2b69cbb2d4f89/raw/df1a91c074c5ee34dc1f0dcf82bc0e76e39b5b4e/capycli-cobertura-coverage.json&color=green)](https://github.com/sw360/capycli/actions/workflows/unit-tests.yml)\n[![SBOM](https://img.shields.io/badge/SBOM-CycloneDX-brightgreen)](https://github.com/tngraf/Tethys.Dgml/blob/master/SBOM/sbom.cyclonedx.xml)\n[![REUSE status](https://api.reuse.software/badge/git.fsfe.org/reuse/api)](https://api.reuse.software/info/git.fsfe.org/reuse/api)\n\nPython 3 scripts to allow license clearing automation using the\n[SW360](https://github.com/eclipse/sw360) software catalogue.\n\n## What is SW360?\n\n[SW360](https://github.com/eclipse/sw360) is a software component catalogue application designed to\nprovide a central place for sharing information about software components used by an organization.\nIt is designed to neatly integrate into existing infrastructures related to the management of\nsoftware artifacts and projects by providing separate backend services for distinct tasks and a set\nof portlets to access these services. A complete deployment unit exists (vagrant box or docker\ncontainer) that contains a complete configuration of all services and portlets.\n\nCompanies like Cariad, Siemens or Toshiba use SW360 to track their use of third party software components.\n\n## Why CaPyCli?\n\nSW360 is for software developers and software developers love to automate tasks. The SW360 user\ninterface is nice if you want to check a project or search for a single component. But if you have\na project with a JavaScript frontend and hundreds of components, you do not want to add all of them\nmanually. You want to be able to determine your software bill of materials (SBOM) and you want to\nmap this SBOM to the information that is already available of SW360.\n\nCaPyCli allows you to\n\n* determine your list of dependencies, your software bill of materials (SBOM)\n* determine meta-data for the SBOM items and download source files\n* map an SBOM to the data available on SW360\n* create all missing components and releases\n* create a project that contains all releases of your SBOM\n* track the progress on license compliance checks\n* show information about the project and its releases\n* show information about export control information and security vulnerabilities (if tracked via SW360)\n\n## Basic Syntax\n\n```code\nCaPyCli command [sub-command...] [options]\n\nCommands and Sub-Commands\n    getdependencies     dependency detection specific commands\n        Nuget             determine dependencies for a .Net/Nuget project\n        Python            determine dependencies for a Python project\n        Javascript        determine dependencies for a JavaScript project\n        MavenPom          determine dependencies for a Java/Maven project using the pom.xml file\n        MavenList         determine dependencies for a Java/Maven project using a Maven command\n\n    bom                 bill of material (SBOM) specific commands\n        Show              display contents of a SBOM\n        Convert           convert SBOM formats\n        Filter            apply filter file to a SBOM\n        Check             check that all releases in the SBOM exist on target SW360 instance\n        CheckItemStatus   show additional information about SBOM items on SW360\n        Map               map a given SBOM to data on SW360\n        CreateReleases    create new releases for existing components on SW360\n        CreateComponents  create new components and releases on SW360 (use with care!)\n        DownloadSources   download source files from the URL specified in the SBOM\n        Granularity       check a bill of material for potential component granularity issues\n        Diff              compare two bills of material.\n        Merge             merge two bills of material.\n        Findsources       determine the source code for SBOM items.\n\n    mapping\n        ToHtml            create a HTML page showing the mapping result\n        ToXlsx            create an Excel sheet showing the mapping result\n\n    moverview\n        ToHtml            create a HTML page showing the mapping result overview\n        ToXlsx            create an Excel sheet showing the mapping result overview\n\n    project\n        Find              find a project by name\n        Prerequisites     checks whether all prerequisites for a successfull\n                          software clearing are fulfilled\n        Show              show project details\n        Licenses          show licenses of all cleared compponents\n        Create            create or update a project on SW360\n        Update            update an exiting project, preserving linked releases\n        GetLicenseInfo    get license info of all project components\n        CreateReadme      create a Readme_OSS\n        Vulnerabilities   show security vulnerabilities of a project\n        ECC               Show export control status of a project\n\nOptions:\n  command                                           command and subcommand to process\n  -h, --help                                        show a help message and exit\n  -i INPUTFILE, --inputfile INPUTFILE               input file to read from\n  -ri RAW_INPUT, --raw-input RAW_INPUT              raw data input file to parse repository urls\n  -o OUTPUTFILE, --outputfile OUTPUTFILE            output file to write to\n  -filterfile FILTERFILE                            filter file to use\n  -v VERBOSE                                        be verbose\n  -t SW360_TOKEN, --token SW360_TOKEN               use this token for access to SW360\n  -oa, --oauth2                                     this is an oauth2 token\n  -url SW360_URL                                    use this URL for access to SW360\n  --nocache NOCACHE                                 do not use component cache\n  -cf CACHEFILE, --cachefile CACHEFILE              cache file name to use\n  -rc REFRESH_CACHE, --refresh_cache REFRESH_CACHE  refresh component cache\n  -sc, --similar                                    look for components with similar name\n  -ov CREATE_OVERVIEW, --overview CREATE_OVERVIEW   create an mapping overview JSON file\n  -mr WRITE_MAPRESULT, --mapresult WRITE_MAPRESULT  create a JSON file with the mapping details\n  -name                                             name of the project\n  -version                                          version of the project\n  -id ID                                            SW360 id of the project, supersedes name and \n                                                    version parameters\n  -ncli NCLI, --no-overwrite-cli NCLI               do not overwrite existing CLI files\n  -nconf NCONF, --no-overwrite-config NCONF         do not overwrite an existing configuration file\n  -dest DESTINATION, --destination DESTINATION      the destination folder\n  -source SOURCE                                    source folder or additional source file\n  --dbx DBX                                         relaxed handling of debian version numbers\n  --download                                        enable automatic download of missing sources\n  --search-meta-data SEARCH_META_DATA               search for component meta-data\n  -old-version OLD_VERSION                          previous version\n  -ex                                               show exit code\n  -rr RESULT_REQUIRED                               there must be a clearing result available\n  -xml XML                                          use XML format\n  -package-source PACKAGE_SOURCE                    URL of the package manager to use\n  -all                                              show/use all items\n  -format FORMAT                                    format to use (text, json, xml)\n  -fe FORCE_EXIT, --forceexit FORCE_EXIT            force a specific exit code\n  -m MODE, --mode MODE                              specific mode for some commands\n  -if INPUTFORMAT                                   Specify input file format\n  -of OUTPUTFORMAT                                  Specify output file format\n  -X DEBUG                                          Enable debug output\n```\n\n## Use Cases\n\nOver the time we implemented more and more commands with more and more parameters.  \nWe understand that it is hard for beginners to find the right command for the task\nthey want to do. Have a look at our [Use Case Overview](UseCaseOverview.md).\n\n## Software Clearing Approaches\n\nFrom time to time there are questions **why** a command has been implemented in this\nspecific way or why a command exists at all. Not all organization have the same\napproach when doing license compliance. Have a look at our\n[Software Clearing Approach Overview](SoftwareClearingApproachOverview.md) to see our\napproaches.\n\n## Note about Python Dependency Detection\n\nAt the moment there is only support for dependencies defined in a `requirements.txt` file.  \nPoetry users can create the `requirements.txt` file via\n\n```sh\npoetry export --format requirements.txt -o requirements.txt --without-hashes\n```\n\nIf you are using pipenv, you can create the `requirements.txt` file via\n\n```sh\npipenv lock -r > requirements.txt\n```\n\nIf your dependencies are defined in `setup.py` you may take a look at\nhttps://dephell.readthedocs.io/cmd-deps-convert.html or\nhttps://github.com/jazzband/pip-tools#example-usage-for-pip-compile to generate\na `requirements.txt` file.\n\nProbably the best solution is if you enhance CaPyCli to support poetry, pipenv or setup.py\ndirectly and open a merge request.\n\n## Examples\n\n### Find project by name\n\nCommand:\n\n```sh\ncapycli project find -name "tr-card"\n- or -\npython -m capycli project find -name tr-card\n```\n\nResult\n\n```sh\nCaPyCli - Find a project by name\n\n  Searching for projects by name\n    TR-Card, 1.0 => ID = ff697cd18fe178b26fc601b60e00fcdf\n```\n\nMore examples and usage notes can be found in [examples.md](examples.md).\n\n## Prerequisites\n\n* Python 3\n* A SW360 read (and write) token, see next section.\n\n## API Access\n\nAccess to the SW360 REST API requires an access token.\nThe token can be requested on SW360/Preferences/REST API Token.\n\nThe scripts in this repository expect, that a valid token\nis stored in the environment variable ``SW360ProductionToken``.\nAlternatively you can specify a token using the `-t` option.\n\nFor proper access to an SW360 instance the correct url must be own.\nThe SW360 url can be specified on the commandline with the `-url`\nparameter, via the environment variable ``SW360ServerUrl`` or in the\nconfig file (`.capycli.cfg`).\n\n## SBOM Format\n\nThe software bill of materials (SBOM) is a crucial information for most operations.\nThere is no common description what a bill of materials should contain.\nThere are different formats available, for example the SBOM of CyCloneDX,\nnevertheless most tools have their own SBOM format.\nWe have decided also to have our own flavor of CycloneDX, see [SBOM](Readme_BOM.md),\nfocused on the information we need to handle components, releases and projects\non SW360. It is a simple JSON format. CaPyCli reads or writes exactly the\ninformation that is needed.\nConversion support from or to our SBOM format is available.\nFor converting CycloneDX (XML) to JSON or for converting SPDX SBOMs, we like\nto refer you to the oepn source tools from [CycloneDX](https://cyclonedx.org/).\n\n## Mapping a SBOM to SW360\n\nSBOM mapping is described in an extra file, see [SBOM Mapping](Readme_Mapping.md).\n\n## Project Management\n\nThis is a Python project managed using ```Poetry```.\n\n## Installation\n\n### From PyPi\n\n* using `pip`:\n\n  ```shell\n  pip install capycli\n  ```\n\n## Copyright & License\n\nCopyright 2018-2023 Siemens\n\nThis program and the accompanying materials are made\navailable under the terms of the MIT License.  \nSPDX-License-Identifier: MIT\n',
    'author': 'Thomas Graf',
    'author_email': 'thomas.graf@siemens.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/sw360/capycli',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
