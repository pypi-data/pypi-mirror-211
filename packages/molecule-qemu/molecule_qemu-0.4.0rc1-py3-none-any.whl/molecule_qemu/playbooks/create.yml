---
- name: Create
  hosts: localhost
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  vars:
    molecule_ephemeral_directory: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}"
    molecule_driver_directory: "{{ ( molecule_ephemeral_directory + '/../../.qemu/' ) | realpath }}"
    molecule_scenario_name: "{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
    molecule_project_name: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"
    qemu_cap_hvf: false
    qemu_vm_image_arch: "x86_64"
    qemu_vm_image_format: "qcow2"
    qemu_vm_memory: "1024"
    qemu_vm_cpus: "2"
    qemu_vm_disk: "4G"

  tasks:
    ### configuration #########################################################
    - name: Register VMs data
      ansible.builtin.set_fact:
        instance: {
          "instance": "molecule-{{ molecule_project_name }}-{{ molecule_scenario_name }}-{{ item.name }}",
          "name": "{{ item.name }}",

          "image": "{{ item.image }}",
          "image_checksum": "{{ item.image_checksum | default(omit) }}",
          "image_arch": "{{ item.image_arch | default(qemu_vm_image_arch) }}",
          "image_format": "{{ item.image_format | default(qemu_vm_image_format) }}",

          "ssh_host": "{{ item.ssh_host | default('127.0.0.1') }}",
          "ssh_port": "{{ item.ssh_port | default(10022) }}",
          "ssh_user": "{{ item.ssh_user }}",

          "vm_cpus": "{{ item.vm_cpus | default(qemu_vm_cpus) }}",
          "vm_memory": "{{ item.vm_memory | default(qemu_vm_memory) }}",
          "vm_disk": "{{ item.vm_disk | default(qemu_vm_disk) }}",

          "path_disk": "{{ molecule_ephemeral_directory }}/run/{{ item.name }}.qcow2",
          "path_pid": "{{ molecule_ephemeral_directory }}/run/{{ item.name }}.pid",
        }
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      register: molecule_instances

    - name: Prepare VMs data
      ansible.builtin.set_fact:
        molecule_instances: "{{ molecule_instances.results | map(attribute='ansible_facts.instance') | list }}"

    ### assertions ############################################################
    - name: Assert VMs configuration
      ansible.builtin.assert:
        that:
          - molecule_instances is defined
          - molecule_instances | length > 0
          - molecule_instances | length == molecule_yml.platforms | length
          - molecule_instances | map(attribute='ssh_port') | list | unique | length == molecule_instances | length
        fail_msg: "Molecule instances are not properly defined"
        success_msg: "Molecule instances are properly defined"

    - name: Assert supported VMs configuration
      ansible.builtin.assert:
        that:
          - item.image_arch in ['x86_64', 'aarch64']
        fail_msg: "Molecule instance {{ item.name }} configuration is not supported"
        success_msg: "Molecule instance {{ item.name }} configuration is supported"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    ### capabilities ##########################################################
    - name: Read kern.hv_support
      ansible.builtin.command: sysctl kern.hv_support
      register: hv_support
      changed_when: false
      ignore_errors: true

    - name: Set hvf support
      ansible.builtin.set_fact:
        qemu_cap_hvf: "{{ hv_support.stdout | trim == 'kern.hv_support: 1' }}"
      when: hv_support is defined

    ### prerequisites #########################################################

    - name: Create driver directory
      ansible.builtin.file:
        path: "{{ molecule_driver_directory }}"
        state: directory
        mode: "0755"

    - name: Create run directory
      ansible.builtin.file:
        path: "{{ molecule_ephemeral_directory }}/run/"
        state: directory
        mode: "0755"

    - name: Create OpenSSH key pair
      community.crypto.openssh_keypair:
        path: "{{ molecule_ephemeral_directory }}/run/id_ed25519"
        type: ed25519
      register: ssh_keypair

    - name: Fetch ARM VMs bios
      ansible.builtin.get_url:
        url: "https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd"
        checksum: "sha256:42f915c44de6858f69ae6f1ffc9eaa3884d1b2ca97a7537d81312fb0dfd712cd"
        dest: "{{ molecule_driver_directory }}/QEMU_EFI.fd"
        mode: "0644"
      when: "'aarch64' in molecule_instances | map(attribute='image_arch') | list | unique"

    ### images ###############################################################
    - name: Create images directory
      ansible.builtin.file:
        path: "{{ molecule_driver_directory }}/images/"
        state: directory
        mode: "0755"

    - name: Fetch images
      ansible.builtin.get_url:
        url: "{{ item[0] }}"
        checksum: "{{ item[1] }}"
        dest: "{{ molecule_driver_directory }}/images/{{ item[0] | basename }}"
        mode: "0644"
      loop: "{{ molecule_instances | map(attribute='image') | zip(molecule_instances | map(attribute='image_checksum')) | list | unique }}"
      loop_control:
        label: "{{ item[0] | basename }}"
      register: images

    - name: Get images
      ansible.builtin.set_fact:
        images: "{{ 0 | extract(images.results | map(attribute='item')) | list | zip(images.results | map(attribute='dest') | list) }}"
        images_cache: {}

    - name: Set images cache
      ansible.builtin.set_fact:
        images_cache: "{{ images_cache | combine({item[0]: item[1]}) }}"
      loop: "{{ images }}"
      loop_control:
        label: "{{ item[0] | basename }}"

    ### cloud-init ############################################################
    - name: Create cloud-init folders
      ansible.builtin.file:
        path: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/"
        state: directory
        mode: "0755"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Render meta-data template
      ansible.builtin.template:
        src: templates/meta-data.j2
        dest: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/meta-data"
        mode: "0644"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Render user-data template
      ansible.builtin.template:
        src: templates/user-data.j2
        dest: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/user-data"
        mode: "0644"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create cloud-init iso using mkisofs
      ansible.builtin.command: >
        mkisofs
        -output {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}.iso
        -volid cidata
        -joliet
        -rock
        {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/
      args:
        creates: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}.iso"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    ### qemu ##################################################################
    - name: Create VMs disks
      ansible.builtin.command: >
        qemu-img create
        -f qcow2
        -o backing_file={{ images_cache[item.image] }},backing_fmt={{ item.image_format }}
        {{ item.path_disk }}
        {{ item.vm_disk }}
      args:
        creates: "{{ item.path_disk }}"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Launch VMs
      ansible.builtin.command: >
        qemu-system-{{ item.image_arch }}
        -name {{ item.name }}
        -boot d
        -cdrom {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}.iso
        -hda {{ item.path_disk }}
        -m {{ item.vm_memory }}
        -smp {{ item.vm_cpus }}
        -net nic
        -net user,hostfwd=tcp::{{ item.ssh_port }}-:22
        -display none
        -daemonize
        -pidfile {{ item.path_pid }}
        {% if item.image_arch == 'aarch64' %}
        -bios {{ molecule_driver_directory }}/QEMU_EFI.fd
        -cpu cortex-a72
        -machine virt,highmem=off
        {% if qemu_cap_hvf %}
        -accel hvf
        {% endif %}
        {% endif %}
      args:
        creates: "{{ item.path_pid }}"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    ### ssh ###################################################################
    - name: Wait for SSH
      ansible.builtin.wait_for:
        host: "{{ item.ssh_host }}"
        port: "{{ item.ssh_port }}"
        delay: 5
        timeout: 180
        search_regex: "OpenSSH"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"
      async: 300
      poll: 0
      register: qemu_launch

    - name: Wait for SSH to be ready
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ qemu_launch.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: qemu_launch_status
      until: qemu_launch_status.finished
      retries: 30
      delay: 10

    ### molecule ##############################################################
    - name: Prepare VMs config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          "instance": "{{ item.instance }}",
          "name": "{{ item.name }}",
          "address": "{{ item.ssh_host }}",
          "user": "{{ item.ssh_user }}",
          "port": "{{ item.ssh_port }}",
          "identity_file": "{{ ssh_keypair.filename }}",
          "pidfile": "{{ item.path_pid }}",
          "diskfile": "{{ item.path_disk }}",
        }
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"
      register: instance_config_dict

    - name: Prepare VMs config list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump VMs config
      ansible.builtin.copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: "0644"
