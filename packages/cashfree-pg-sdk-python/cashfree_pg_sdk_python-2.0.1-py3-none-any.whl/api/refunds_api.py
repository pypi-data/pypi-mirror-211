# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cashfree_pg_sdk_python.api_client import ApiClient
from cashfree_pg_sdk_python.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RefundsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def createrefund(self, x_client_id, x_client_secret, order_id, **kwargs):  # noqa: E501
        """Create Refund  # noqa: E501

        Use this API to initiate refunds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createrefund(x_client_id, x_client_secret, order_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param x_api_version:
        :type x_api_version: str
        :param x_idempotency_replayed:
        :type x_idempotency_replayed: bool
        :param x_idempotency_key:
        :type x_idempotency_key: str
        :param x_request_id:
        :type x_request_id: str
        :param cf_refund_request:
        :type cf_refund_request: CFRefundRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CFRefund
        """
        kwargs['_return_http_data_only'] = True
        return self.createrefund_with_http_info(x_client_id, x_client_secret, order_id, **kwargs)  # noqa: E501

    def createrefund_with_http_info(self, x_client_id, x_client_secret, order_id, **kwargs):  # noqa: E501
        """Create Refund  # noqa: E501

        Use this API to initiate refunds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.createrefund_with_http_info(x_client_id, x_client_secret, order_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param x_api_version:
        :type x_api_version: str
        :param x_idempotency_replayed:
        :type x_idempotency_replayed: bool
        :param x_idempotency_key:
        :type x_idempotency_key: str
        :param x_request_id:
        :type x_request_id: str
        :param cf_refund_request:
        :type cf_refund_request: CFRefundRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CFRefund, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_client_id',
            'x_client_secret',
            'order_id',
            'x_api_version',
            'x_idempotency_replayed',
            'x_idempotency_key',
            'x_request_id',
            'cf_refund_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createrefund" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_client_id' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_id` when calling `createrefund`")  # noqa: E501
        # verify the required parameter 'x_client_secret' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_secret') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_secret` when calling `createrefund`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if self.api_client.client_side_validation and local_var_params.get('order_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `order_id` when calling `createrefund`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in local_var_params:
            path_params['order_id'] = local_var_params['order_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_client_id' in local_var_params:
            header_params['x-client-id'] = local_var_params['x_client_id']  # noqa: E501
        if 'x_client_secret' in local_var_params:
            header_params['x-client-secret'] = local_var_params['x_client_secret']  # noqa: E501
        if 'x_api_version' in local_var_params:
            header_params['x-api-version'] = local_var_params['x_api_version']  # noqa: E501
        if 'x_idempotency_replayed' in local_var_params:
            header_params['x-idempotency-replayed'] = local_var_params['x_idempotency_replayed']  # noqa: E501
        if 'x_idempotency_key' in local_var_params:
            header_params['x-idempotency-key'] = local_var_params['x_idempotency_key']  # noqa: E501
        if 'x_request_id' in local_var_params:
            header_params['x-request-id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cf_refund_request' in local_var_params:
            body_params = local_var_params['cf_refund_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
            header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "CFRefund",
        }

        return self.api_client.call_api(
            '/orders/{order_id}/refunds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_refund(self, x_client_id, x_client_secret, order_id, refund_id, **kwargs):  # noqa: E501
        """Get Refund  # noqa: E501

        Use this API to fetch a specific refund processed on your Cashfree Account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_refund(x_client_id, x_client_secret, order_id, refund_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param refund_id: Refund Id of the refund you want to fetch. (required)
        :type refund_id: str
        :param x_api_version:
        :type x_api_version: str
        :param x_idempotency_replayed:
        :type x_idempotency_replayed: bool
        :param x_idempotency_key:
        :type x_idempotency_key: str
        :param x_request_id:
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CFRefund
        """
        kwargs['_return_http_data_only'] = True
        return self.get_refund_with_http_info(x_client_id, x_client_secret, order_id, refund_id, **kwargs)  # noqa: E501

    def get_refund_with_http_info(self, x_client_id, x_client_secret, order_id, refund_id, **kwargs):  # noqa: E501
        """Get Refund  # noqa: E501

        Use this API to fetch a specific refund processed on your Cashfree Account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_refund_with_http_info(x_client_id, x_client_secret, order_id, refund_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param refund_id: Refund Id of the refund you want to fetch. (required)
        :type refund_id: str
        :param x_api_version:
        :type x_api_version: str
        :param x_idempotency_replayed:
        :type x_idempotency_replayed: bool
        :param x_idempotency_key:
        :type x_idempotency_key: str
        :param x_request_id:
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CFRefund, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_client_id',
            'x_client_secret',
            'order_id',
            'refund_id',
            'x_api_version',
            'x_idempotency_replayed',
            'x_idempotency_key',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_client_id' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_id` when calling `get_refund`")  # noqa: E501
        # verify the required parameter 'x_client_secret' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_secret') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_secret` when calling `get_refund`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if self.api_client.client_side_validation and local_var_params.get('order_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `order_id` when calling `get_refund`")  # noqa: E501
        # verify the required parameter 'refund_id' is set
        if self.api_client.client_side_validation and local_var_params.get('refund_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `refund_id` when calling `get_refund`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in local_var_params:
            path_params['order_id'] = local_var_params['order_id']  # noqa: E501
        if 'refund_id' in local_var_params:
            path_params['refund_id'] = local_var_params['refund_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_client_id' in local_var_params:
            header_params['x-client-id'] = local_var_params['x_client_id']  # noqa: E501
        if 'x_client_secret' in local_var_params:
            header_params['x-client-secret'] = local_var_params['x_client_secret']  # noqa: E501
        if 'x_api_version' in local_var_params:
            header_params['x-api-version'] = local_var_params['x_api_version']  # noqa: E501
        if 'x_idempotency_replayed' in local_var_params:
            header_params['x-idempotency-replayed'] = local_var_params['x_idempotency_replayed']  # noqa: E501
        if 'x_idempotency_key' in local_var_params:
            header_params['x-idempotency-key'] = local_var_params['x_idempotency_key']  # noqa: E501
        if 'x_request_id' in local_var_params:
            header_params['x-request-id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "CFRefund",
        }

        return self.api_client.call_api(
            '/orders/{order_id}/refunds/{refund_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def getallrefundsfororder(self, x_client_id, x_client_secret, order_id, **kwargs):  # noqa: E501
        """Get All Refunds for an Order  # noqa: E501

        Use this API to fetch all refunds processed against an order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.getallrefundsfororder(x_client_id, x_client_secret, order_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param x_api_version:
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[CFRefund]
        """
        kwargs['_return_http_data_only'] = True
        return self.getallrefundsfororder_with_http_info(x_client_id, x_client_secret, order_id, **kwargs)  # noqa: E501

    def getallrefundsfororder_with_http_info(self, x_client_id, x_client_secret, order_id, **kwargs):  # noqa: E501
        """Get All Refunds for an Order  # noqa: E501

        Use this API to fetch all refunds processed against an order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.getallrefundsfororder_with_http_info(x_client_id, x_client_secret, order_id, async_req=True)
        >>> result = thread.get()

        :param x_client_id: (required)
        :type x_client_id: str
        :param x_client_secret: (required)
        :type x_client_secret: str
        :param order_id: (required)
        :type order_id: str
        :param x_api_version:
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[CFRefund], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_client_id',
            'x_client_secret',
            'order_id',
            'x_api_version'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getallrefundsfororder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_client_id' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_id` when calling `getallrefundsfororder`")  # noqa: E501
        # verify the required parameter 'x_client_secret' is set
        if self.api_client.client_side_validation and local_var_params.get('x_client_secret') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_client_secret` when calling `getallrefundsfororder`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if self.api_client.client_side_validation and local_var_params.get('order_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `order_id` when calling `getallrefundsfororder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in local_var_params:
            path_params['order_id'] = local_var_params['order_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_client_id' in local_var_params:
            header_params['x-client-id'] = local_var_params['x_client_id']  # noqa: E501
        if 'x_client_secret' in local_var_params:
            header_params['x-client-secret'] = local_var_params['x_client_secret']  # noqa: E501
        if 'x_api_version' in local_var_params:
            header_params['x-api-version'] = local_var_params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "list[CFRefund]",
        }

        return self.api_client.call_api(
            '/orders/{order_id}/refunds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
