# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFSettlementsEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cf_payment_id': 'str',
        'cf_settlement_id': 'str',
        'settlement_currency': 'str',
        'order_id': 'str',
        'entity': 'str',
        'order_amount': 'float',
        'payment_time': 'str',
        'service_charge': 'float',
        'service_tax': 'float',
        'settlement_amount': 'float',
        'settlement_id': 'int',
        'transfer_id': 'int',
        'transfer_time': 'str',
        'transfer_utr': 'str'
    }

    attribute_map = {
        'cf_payment_id': 'cf_payment_id',
        'cf_settlement_id': 'cf_settlement_id',
        'settlement_currency': 'settlement_currency',
        'order_id': 'order_id',
        'entity': 'entity',
        'order_amount': 'order_amount',
        'payment_time': 'payment_time',
        'service_charge': 'service_charge',
        'service_tax': 'service_tax',
        'settlement_amount': 'settlement_amount',
        'settlement_id': 'settlement_id',
        'transfer_id': 'transfer_id',
        'transfer_time': 'transfer_time',
        'transfer_utr': 'transfer_utr'
    }

    def __init__(self, cf_payment_id=None, cf_settlement_id=None, settlement_currency=None, order_id=None, entity=None, order_amount=None, payment_time=None, service_charge=None, service_tax=None, settlement_amount=None, settlement_id=None, transfer_id=None, transfer_time=None, transfer_utr=None, local_vars_configuration=None):  # noqa: E501
        """CFSettlementsEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cf_payment_id = None
        self._cf_settlement_id = None
        self._settlement_currency = None
        self._order_id = None
        self._entity = None
        self._order_amount = None
        self._payment_time = None
        self._service_charge = None
        self._service_tax = None
        self._settlement_amount = None
        self._settlement_id = None
        self._transfer_id = None
        self._transfer_time = None
        self._transfer_utr = None
        self.discriminator = None

        if cf_payment_id is not None:
            self.cf_payment_id = cf_payment_id
        if cf_settlement_id is not None:
            self.cf_settlement_id = cf_settlement_id
        if settlement_currency is not None:
            self.settlement_currency = settlement_currency
        if order_id is not None:
            self.order_id = order_id
        if entity is not None:
            self.entity = entity
        if order_amount is not None:
            self.order_amount = order_amount
        if payment_time is not None:
            self.payment_time = payment_time
        if service_charge is not None:
            self.service_charge = service_charge
        if service_tax is not None:
            self.service_tax = service_tax
        if settlement_amount is not None:
            self.settlement_amount = settlement_amount
        if settlement_id is not None:
            self.settlement_id = settlement_id
        if transfer_id is not None:
            self.transfer_id = transfer_id
        if transfer_time is not None:
            self.transfer_time = transfer_time
        if transfer_utr is not None:
            self.transfer_utr = transfer_utr

    @property
    def cf_payment_id(self):
        """Gets the cf_payment_id of this CFSettlementsEntity.  # noqa: E501


        :return: The cf_payment_id of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._cf_payment_id

    @cf_payment_id.setter
    def cf_payment_id(self, cf_payment_id):
        """Sets the cf_payment_id of this CFSettlementsEntity.


        :param cf_payment_id: The cf_payment_id of this CFSettlementsEntity.  # noqa: E501
        :type cf_payment_id: str
        """

        self._cf_payment_id = cf_payment_id

    @property
    def cf_settlement_id(self):
        """Gets the cf_settlement_id of this CFSettlementsEntity.  # noqa: E501


        :return: The cf_settlement_id of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._cf_settlement_id

    @cf_settlement_id.setter
    def cf_settlement_id(self, cf_settlement_id):
        """Sets the cf_settlement_id of this CFSettlementsEntity.


        :param cf_settlement_id: The cf_settlement_id of this CFSettlementsEntity.  # noqa: E501
        :type cf_settlement_id: str
        """

        self._cf_settlement_id = cf_settlement_id

    @property
    def settlement_currency(self):
        """Gets the settlement_currency of this CFSettlementsEntity.  # noqa: E501


        :return: The settlement_currency of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._settlement_currency

    @settlement_currency.setter
    def settlement_currency(self, settlement_currency):
        """Sets the settlement_currency of this CFSettlementsEntity.


        :param settlement_currency: The settlement_currency of this CFSettlementsEntity.  # noqa: E501
        :type settlement_currency: str
        """

        self._settlement_currency = settlement_currency

    @property
    def order_id(self):
        """Gets the order_id of this CFSettlementsEntity.  # noqa: E501


        :return: The order_id of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CFSettlementsEntity.


        :param order_id: The order_id of this CFSettlementsEntity.  # noqa: E501
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def entity(self):
        """Gets the entity of this CFSettlementsEntity.  # noqa: E501


        :return: The entity of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CFSettlementsEntity.


        :param entity: The entity of this CFSettlementsEntity.  # noqa: E501
        :type entity: str
        """

        self._entity = entity

    @property
    def order_amount(self):
        """Gets the order_amount of this CFSettlementsEntity.  # noqa: E501


        :return: The order_amount of this CFSettlementsEntity.  # noqa: E501
        :rtype: float
        """
        return self._order_amount

    @order_amount.setter
    def order_amount(self, order_amount):
        """Sets the order_amount of this CFSettlementsEntity.


        :param order_amount: The order_amount of this CFSettlementsEntity.  # noqa: E501
        :type order_amount: float
        """

        self._order_amount = order_amount

    @property
    def payment_time(self):
        """Gets the payment_time of this CFSettlementsEntity.  # noqa: E501


        :return: The payment_time of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_time

    @payment_time.setter
    def payment_time(self, payment_time):
        """Sets the payment_time of this CFSettlementsEntity.


        :param payment_time: The payment_time of this CFSettlementsEntity.  # noqa: E501
        :type payment_time: str
        """

        self._payment_time = payment_time

    @property
    def service_charge(self):
        """Gets the service_charge of this CFSettlementsEntity.  # noqa: E501


        :return: The service_charge of this CFSettlementsEntity.  # noqa: E501
        :rtype: float
        """
        return self._service_charge

    @service_charge.setter
    def service_charge(self, service_charge):
        """Sets the service_charge of this CFSettlementsEntity.


        :param service_charge: The service_charge of this CFSettlementsEntity.  # noqa: E501
        :type service_charge: float
        """

        self._service_charge = service_charge

    @property
    def service_tax(self):
        """Gets the service_tax of this CFSettlementsEntity.  # noqa: E501


        :return: The service_tax of this CFSettlementsEntity.  # noqa: E501
        :rtype: float
        """
        return self._service_tax

    @service_tax.setter
    def service_tax(self, service_tax):
        """Sets the service_tax of this CFSettlementsEntity.


        :param service_tax: The service_tax of this CFSettlementsEntity.  # noqa: E501
        :type service_tax: float
        """

        self._service_tax = service_tax

    @property
    def settlement_amount(self):
        """Gets the settlement_amount of this CFSettlementsEntity.  # noqa: E501


        :return: The settlement_amount of this CFSettlementsEntity.  # noqa: E501
        :rtype: float
        """
        return self._settlement_amount

    @settlement_amount.setter
    def settlement_amount(self, settlement_amount):
        """Sets the settlement_amount of this CFSettlementsEntity.


        :param settlement_amount: The settlement_amount of this CFSettlementsEntity.  # noqa: E501
        :type settlement_amount: float
        """

        self._settlement_amount = settlement_amount

    @property
    def settlement_id(self):
        """Gets the settlement_id of this CFSettlementsEntity.  # noqa: E501


        :return: The settlement_id of this CFSettlementsEntity.  # noqa: E501
        :rtype: int
        """
        return self._settlement_id

    @settlement_id.setter
    def settlement_id(self, settlement_id):
        """Sets the settlement_id of this CFSettlementsEntity.


        :param settlement_id: The settlement_id of this CFSettlementsEntity.  # noqa: E501
        :type settlement_id: int
        """

        self._settlement_id = settlement_id

    @property
    def transfer_id(self):
        """Gets the transfer_id of this CFSettlementsEntity.  # noqa: E501


        :return: The transfer_id of this CFSettlementsEntity.  # noqa: E501
        :rtype: int
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this CFSettlementsEntity.


        :param transfer_id: The transfer_id of this CFSettlementsEntity.  # noqa: E501
        :type transfer_id: int
        """

        self._transfer_id = transfer_id

    @property
    def transfer_time(self):
        """Gets the transfer_time of this CFSettlementsEntity.  # noqa: E501


        :return: The transfer_time of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._transfer_time

    @transfer_time.setter
    def transfer_time(self, transfer_time):
        """Sets the transfer_time of this CFSettlementsEntity.


        :param transfer_time: The transfer_time of this CFSettlementsEntity.  # noqa: E501
        :type transfer_time: str
        """

        self._transfer_time = transfer_time

    @property
    def transfer_utr(self):
        """Gets the transfer_utr of this CFSettlementsEntity.  # noqa: E501


        :return: The transfer_utr of this CFSettlementsEntity.  # noqa: E501
        :rtype: str
        """
        return self._transfer_utr

    @transfer_utr.setter
    def transfer_utr(self, transfer_utr):
        """Sets the transfer_utr of this CFSettlementsEntity.


        :param transfer_utr: The transfer_utr of this CFSettlementsEntity.  # noqa: E501
        :type transfer_utr: str
        """

        self._transfer_utr = transfer_utr

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFSettlementsEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFSettlementsEntity):
            return True

        return self.to_dict() != other.to_dict()
