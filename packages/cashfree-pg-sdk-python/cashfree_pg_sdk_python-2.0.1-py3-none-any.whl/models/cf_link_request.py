# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFLinkRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'link_id': 'str',
        'link_amount': 'float',
        'link_currency': 'str',
        'link_purpose': 'str',
        'customer_details': 'CFLinkCustomerDetailsEntity',
        'link_partial_payments': 'bool',
        'link_minimum_partial_amount': 'float',
        'link_expiry_time': 'str',
        'link_notify': 'CFLinkNotifyEntity',
        'link_auto_reminders': 'bool',
        'link_notes': 'dict[str, str]',
        'link_meta': 'CFLinkMetaEntity'
    }

    attribute_map = {
        'link_id': 'link_id',
        'link_amount': 'link_amount',
        'link_currency': 'link_currency',
        'link_purpose': 'link_purpose',
        'customer_details': 'customer_details',
        'link_partial_payments': 'link_partial_payments',
        'link_minimum_partial_amount': 'link_minimum_partial_amount',
        'link_expiry_time': 'link_expiry_time',
        'link_notify': 'link_notify',
        'link_auto_reminders': 'link_auto_reminders',
        'link_notes': 'link_notes',
        'link_meta': 'link_meta'
    }

    def __init__(self, link_id=None, link_amount=None, link_currency=None, link_purpose=None, customer_details=None, link_partial_payments=None, link_minimum_partial_amount=None, link_expiry_time=None, link_notify=None, link_auto_reminders=None, link_notes=None, link_meta=None, local_vars_configuration=None):  # noqa: E501
        """CFLinkRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._link_id = None
        self._link_amount = None
        self._link_currency = None
        self._link_purpose = None
        self._customer_details = None
        self._link_partial_payments = None
        self._link_minimum_partial_amount = None
        self._link_expiry_time = None
        self._link_notify = None
        self._link_auto_reminders = None
        self._link_notes = None
        self._link_meta = None
        self.discriminator = None

        self.link_id = link_id
        self.link_amount = link_amount
        self.link_currency = link_currency
        self.link_purpose = link_purpose
        self.customer_details = customer_details
        if link_partial_payments is not None:
            self.link_partial_payments = link_partial_payments
        if link_minimum_partial_amount is not None:
            self.link_minimum_partial_amount = link_minimum_partial_amount
        if link_expiry_time is not None:
            self.link_expiry_time = link_expiry_time
        if link_notify is not None:
            self.link_notify = link_notify
        if link_auto_reminders is not None:
            self.link_auto_reminders = link_auto_reminders
        if link_notes is not None:
            self.link_notes = link_notes
        if link_meta is not None:
            self.link_meta = link_meta

    @property
    def link_id(self):
        """Gets the link_id of this CFLinkRequest.  # noqa: E501

        Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs.  # noqa: E501

        :return: The link_id of this CFLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this CFLinkRequest.

        Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs.  # noqa: E501

        :param link_id: The link_id of this CFLinkRequest.  # noqa: E501
        :type link_id: str
        """
        if self.local_vars_configuration.client_side_validation and link_id is None:  # noqa: E501
            raise ValueError("Invalid value for `link_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                link_id is not None and len(link_id) > 50):
            raise ValueError("Invalid value for `link_id`, length must be less than or equal to `50`")  # noqa: E501

        self._link_id = link_id

    @property
    def link_amount(self):
        """Gets the link_amount of this CFLinkRequest.  # noqa: E501

        Amount to be collected using this link. Provide upto two decimals for paise.  # noqa: E501

        :return: The link_amount of this CFLinkRequest.  # noqa: E501
        :rtype: float
        """
        return self._link_amount

    @link_amount.setter
    def link_amount(self, link_amount):
        """Sets the link_amount of this CFLinkRequest.

        Amount to be collected using this link. Provide upto two decimals for paise.  # noqa: E501

        :param link_amount: The link_amount of this CFLinkRequest.  # noqa: E501
        :type link_amount: float
        """
        if self.local_vars_configuration.client_side_validation and link_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `link_amount`, must not be `None`")  # noqa: E501

        self._link_amount = link_amount

    @property
    def link_currency(self):
        """Gets the link_currency of this CFLinkRequest.  # noqa: E501

        Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies.  # noqa: E501

        :return: The link_currency of this CFLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._link_currency

    @link_currency.setter
    def link_currency(self, link_currency):
        """Sets the link_currency of this CFLinkRequest.

        Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies.  # noqa: E501

        :param link_currency: The link_currency of this CFLinkRequest.  # noqa: E501
        :type link_currency: str
        """
        if self.local_vars_configuration.client_side_validation and link_currency is None:  # noqa: E501
            raise ValueError("Invalid value for `link_currency`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                link_currency is not None and len(link_currency) > 3):
            raise ValueError("Invalid value for `link_currency`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                link_currency is not None and len(link_currency) < 3):
            raise ValueError("Invalid value for `link_currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._link_currency = link_currency

    @property
    def link_purpose(self):
        """Gets the link_purpose of this CFLinkRequest.  # noqa: E501

        A brief description for which payment must be collected. This is shown to the customer.  # noqa: E501

        :return: The link_purpose of this CFLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._link_purpose

    @link_purpose.setter
    def link_purpose(self, link_purpose):
        """Sets the link_purpose of this CFLinkRequest.

        A brief description for which payment must be collected. This is shown to the customer.  # noqa: E501

        :param link_purpose: The link_purpose of this CFLinkRequest.  # noqa: E501
        :type link_purpose: str
        """
        if self.local_vars_configuration.client_side_validation and link_purpose is None:  # noqa: E501
            raise ValueError("Invalid value for `link_purpose`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                link_purpose is not None and len(link_purpose) > 500):
            raise ValueError("Invalid value for `link_purpose`, length must be less than or equal to `500`")  # noqa: E501

        self._link_purpose = link_purpose

    @property
    def customer_details(self):
        """Gets the customer_details of this CFLinkRequest.  # noqa: E501


        :return: The customer_details of this CFLinkRequest.  # noqa: E501
        :rtype: CFLinkCustomerDetailsEntity
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this CFLinkRequest.


        :param customer_details: The customer_details of this CFLinkRequest.  # noqa: E501
        :type customer_details: CFLinkCustomerDetailsEntity
        """
        if self.local_vars_configuration.client_side_validation and customer_details is None:  # noqa: E501
            raise ValueError("Invalid value for `customer_details`, must not be `None`")  # noqa: E501

        self._customer_details = customer_details

    @property
    def link_partial_payments(self):
        """Gets the link_partial_payments of this CFLinkRequest.  # noqa: E501

        If \"true\", customer can make partial payments for the link.  # noqa: E501

        :return: The link_partial_payments of this CFLinkRequest.  # noqa: E501
        :rtype: bool
        """
        return self._link_partial_payments

    @link_partial_payments.setter
    def link_partial_payments(self, link_partial_payments):
        """Sets the link_partial_payments of this CFLinkRequest.

        If \"true\", customer can make partial payments for the link.  # noqa: E501

        :param link_partial_payments: The link_partial_payments of this CFLinkRequest.  # noqa: E501
        :type link_partial_payments: bool
        """

        self._link_partial_payments = link_partial_payments

    @property
    def link_minimum_partial_amount(self):
        """Gets the link_minimum_partial_amount of this CFLinkRequest.  # noqa: E501

        Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount.  # noqa: E501

        :return: The link_minimum_partial_amount of this CFLinkRequest.  # noqa: E501
        :rtype: float
        """
        return self._link_minimum_partial_amount

    @link_minimum_partial_amount.setter
    def link_minimum_partial_amount(self, link_minimum_partial_amount):
        """Sets the link_minimum_partial_amount of this CFLinkRequest.

        Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount.  # noqa: E501

        :param link_minimum_partial_amount: The link_minimum_partial_amount of this CFLinkRequest.  # noqa: E501
        :type link_minimum_partial_amount: float
        """

        self._link_minimum_partial_amount = link_minimum_partial_amount

    @property
    def link_expiry_time(self):
        """Gets the link_expiry_time of this CFLinkRequest.  # noqa: E501

        Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days.  # noqa: E501

        :return: The link_expiry_time of this CFLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._link_expiry_time

    @link_expiry_time.setter
    def link_expiry_time(self, link_expiry_time):
        """Sets the link_expiry_time of this CFLinkRequest.

        Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days.  # noqa: E501

        :param link_expiry_time: The link_expiry_time of this CFLinkRequest.  # noqa: E501
        :type link_expiry_time: str
        """

        self._link_expiry_time = link_expiry_time

    @property
    def link_notify(self):
        """Gets the link_notify of this CFLinkRequest.  # noqa: E501


        :return: The link_notify of this CFLinkRequest.  # noqa: E501
        :rtype: CFLinkNotifyEntity
        """
        return self._link_notify

    @link_notify.setter
    def link_notify(self, link_notify):
        """Sets the link_notify of this CFLinkRequest.


        :param link_notify: The link_notify of this CFLinkRequest.  # noqa: E501
        :type link_notify: CFLinkNotifyEntity
        """

        self._link_notify = link_notify

    @property
    def link_auto_reminders(self):
        """Gets the link_auto_reminders of this CFLinkRequest.  # noqa: E501

        If \"true\", reminders will be sent to customers for collecting payments.  # noqa: E501

        :return: The link_auto_reminders of this CFLinkRequest.  # noqa: E501
        :rtype: bool
        """
        return self._link_auto_reminders

    @link_auto_reminders.setter
    def link_auto_reminders(self, link_auto_reminders):
        """Sets the link_auto_reminders of this CFLinkRequest.

        If \"true\", reminders will be sent to customers for collecting payments.  # noqa: E501

        :param link_auto_reminders: The link_auto_reminders of this CFLinkRequest.  # noqa: E501
        :type link_auto_reminders: bool
        """

        self._link_auto_reminders = link_auto_reminders

    @property
    def link_notes(self):
        """Gets the link_notes of this CFLinkRequest.  # noqa: E501

        Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs  # noqa: E501

        :return: The link_notes of this CFLinkRequest.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._link_notes

    @link_notes.setter
    def link_notes(self, link_notes):
        """Sets the link_notes of this CFLinkRequest.

        Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs  # noqa: E501

        :param link_notes: The link_notes of this CFLinkRequest.  # noqa: E501
        :type link_notes: dict[str, str]
        """

        self._link_notes = link_notes

    @property
    def link_meta(self):
        """Gets the link_meta of this CFLinkRequest.  # noqa: E501


        :return: The link_meta of this CFLinkRequest.  # noqa: E501
        :rtype: CFLinkMetaEntity
        """
        return self._link_meta

    @link_meta.setter
    def link_meta(self, link_meta):
        """Sets the link_meta of this CFLinkRequest.


        :param link_meta: The link_meta of this CFLinkRequest.  # noqa: E501
        :type link_meta: CFLinkMetaEntity
        """

        self._link_meta = link_meta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFLinkRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFLinkRequest):
            return True

        return self.to_dict() != other.to_dict()
