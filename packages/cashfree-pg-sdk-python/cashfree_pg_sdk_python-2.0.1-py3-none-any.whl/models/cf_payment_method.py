# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFPaymentMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card': 'CFCard',
        'upi': 'CFUPI',
        'netbanking': 'CFNetbanking',
        'app': 'CFApp',
        'emi': 'CFCardEMI',
        'cardless_emi': 'CFCardlessEMI',
        'paylater': 'CFPaylater'
    }

    attribute_map = {
        'card': 'card',
        'upi': 'upi',
        'netbanking': 'netbanking',
        'app': 'app',
        'emi': 'emi',
        'cardless_emi': 'cardless_emi',
        'paylater': 'paylater'
    }

    def __init__(self, card=None, upi=None, netbanking=None, app=None, emi=None, cardless_emi=None, paylater=None, local_vars_configuration=None):  # noqa: E501
        """CFPaymentMethod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._card = None
        self._upi = None
        self._netbanking = None
        self._app = None
        self._emi = None
        self._cardless_emi = None
        self._paylater = None
        self.discriminator = None

        self.card = card
        self.upi = upi
        self.netbanking = netbanking
        self.app = app
        if emi is not None:
            self.emi = emi
        self.cardless_emi = cardless_emi
        self.paylater = paylater

    @property
    def card(self):
        """Gets the card of this CFPaymentMethod.  # noqa: E501


        :return: The card of this CFPaymentMethod.  # noqa: E501
        :rtype: CFCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this CFPaymentMethod.


        :param card: The card of this CFPaymentMethod.  # noqa: E501
        :type card: CFCard
        """
        if self.local_vars_configuration.client_side_validation and card is None:  # noqa: E501
            raise ValueError("Invalid value for `card`, must not be `None`")  # noqa: E501

        self._card = card

    @property
    def upi(self):
        """Gets the upi of this CFPaymentMethod.  # noqa: E501


        :return: The upi of this CFPaymentMethod.  # noqa: E501
        :rtype: CFUPI
        """
        return self._upi

    @upi.setter
    def upi(self, upi):
        """Sets the upi of this CFPaymentMethod.


        :param upi: The upi of this CFPaymentMethod.  # noqa: E501
        :type upi: CFUPI
        """
        if self.local_vars_configuration.client_side_validation and upi is None:  # noqa: E501
            raise ValueError("Invalid value for `upi`, must not be `None`")  # noqa: E501

        self._upi = upi

    @property
    def netbanking(self):
        """Gets the netbanking of this CFPaymentMethod.  # noqa: E501


        :return: The netbanking of this CFPaymentMethod.  # noqa: E501
        :rtype: CFNetbanking
        """
        return self._netbanking

    @netbanking.setter
    def netbanking(self, netbanking):
        """Sets the netbanking of this CFPaymentMethod.


        :param netbanking: The netbanking of this CFPaymentMethod.  # noqa: E501
        :type netbanking: CFNetbanking
        """
        if self.local_vars_configuration.client_side_validation and netbanking is None:  # noqa: E501
            raise ValueError("Invalid value for `netbanking`, must not be `None`")  # noqa: E501

        self._netbanking = netbanking

    @property
    def app(self):
        """Gets the app of this CFPaymentMethod.  # noqa: E501


        :return: The app of this CFPaymentMethod.  # noqa: E501
        :rtype: CFApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this CFPaymentMethod.


        :param app: The app of this CFPaymentMethod.  # noqa: E501
        :type app: CFApp
        """
        if self.local_vars_configuration.client_side_validation and app is None:  # noqa: E501
            raise ValueError("Invalid value for `app`, must not be `None`")  # noqa: E501

        self._app = app

    @property
    def emi(self):
        """Gets the emi of this CFPaymentMethod.  # noqa: E501


        :return: The emi of this CFPaymentMethod.  # noqa: E501
        :rtype: CFCardEMI
        """
        return self._emi

    @emi.setter
    def emi(self, emi):
        """Sets the emi of this CFPaymentMethod.


        :param emi: The emi of this CFPaymentMethod.  # noqa: E501
        :type emi: CFCardEMI
        """

        self._emi = emi

    @property
    def cardless_emi(self):
        """Gets the cardless_emi of this CFPaymentMethod.  # noqa: E501


        :return: The cardless_emi of this CFPaymentMethod.  # noqa: E501
        :rtype: CFCardlessEMI
        """
        return self._cardless_emi

    @cardless_emi.setter
    def cardless_emi(self, cardless_emi):
        """Sets the cardless_emi of this CFPaymentMethod.


        :param cardless_emi: The cardless_emi of this CFPaymentMethod.  # noqa: E501
        :type cardless_emi: CFCardlessEMI
        """
        if self.local_vars_configuration.client_side_validation and cardless_emi is None:  # noqa: E501
            raise ValueError("Invalid value for `cardless_emi`, must not be `None`")  # noqa: E501

        self._cardless_emi = cardless_emi

    @property
    def paylater(self):
        """Gets the paylater of this CFPaymentMethod.  # noqa: E501


        :return: The paylater of this CFPaymentMethod.  # noqa: E501
        :rtype: CFPaylater
        """
        return self._paylater

    @paylater.setter
    def paylater(self, paylater):
        """Sets the paylater of this CFPaymentMethod.


        :param paylater: The paylater of this CFPaymentMethod.  # noqa: E501
        :type paylater: CFPaylater
        """
        if self.local_vars_configuration.client_side_validation and paylater is None:  # noqa: E501
            raise ValueError("Invalid value for `paylater`, must not be `None`")  # noqa: E501

        self._paylater = paylater

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFPaymentMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFPaymentMethod):
            return True

        return self.to_dict() != other.to_dict()
