# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cf_order_id': 'int',
        'created_at': 'str',
        'order_id': 'str',
        'entity': 'str',
        'order_currency': 'str',
        'order_amount': 'float',
        'order_status': 'str',
        'order_token': 'str',
        'order_expiry_time': 'str',
        'order_note': 'str',
        'payment_link': 'str',
        'payment_session_id': 'str',
        'customer_details': 'CFCustomerDetails',
        'order_meta': 'CFOrderMeta',
        'payments': 'CFPaymentURLObject',
        'settlements': 'CFSettlementURLObject',
        'refunds': 'CFRefundURLObject',
        'order_tags': 'dict[str, str]',
        'order_splits': 'list[CFVendorSplit]',
        'terminal_data': 'object'
    }

    attribute_map = {
        'cf_order_id': 'cf_order_id',
        'created_at': 'created_at',
        'order_id': 'order_id',
        'entity': 'entity',
        'order_currency': 'order_currency',
        'order_amount': 'order_amount',
        'order_status': 'order_status',
        'order_token': 'order_token',
        'order_expiry_time': 'order_expiry_time',
        'order_note': 'order_note',
        'payment_link': 'payment_link',
        'payment_session_id': 'payment_session_id',
        'customer_details': 'customer_details',
        'order_meta': 'order_meta',
        'payments': 'payments',
        'settlements': 'settlements',
        'refunds': 'refunds',
        'order_tags': 'order_tags',
        'order_splits': 'order_splits',
        'terminal_data': 'terminal_data'
    }

    def __init__(self, cf_order_id=None, created_at=None, order_id=None, entity=None, order_currency=None, order_amount=None, order_status=None, order_token=None, order_expiry_time=None, order_note=None, payment_link=None, payment_session_id=None, customer_details=None, order_meta=None, payments=None, settlements=None, refunds=None, order_tags=None, order_splits=None, terminal_data=None, local_vars_configuration=None):  # noqa: E501
        """CFOrder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cf_order_id = None
        self._created_at = None
        self._order_id = None
        self._entity = None
        self._order_currency = None
        self._order_amount = None
        self._order_status = None
        self._order_token = None
        self._order_expiry_time = None
        self._order_note = None
        self._payment_link = None
        self._payment_session_id = None
        self._customer_details = None
        self._order_meta = None
        self._payments = None
        self._settlements = None
        self._refunds = None
        self._order_tags = None
        self._order_splits = None
        self._terminal_data = None
        self.discriminator = None

        if cf_order_id is not None:
            self.cf_order_id = cf_order_id
        if created_at is not None:
            self.created_at = created_at
        if order_id is not None:
            self.order_id = order_id
        if entity is not None:
            self.entity = entity
        if order_currency is not None:
            self.order_currency = order_currency
        if order_amount is not None:
            self.order_amount = order_amount
        if order_status is not None:
            self.order_status = order_status
        if order_token is not None:
            self.order_token = order_token
        if order_expiry_time is not None:
            self.order_expiry_time = order_expiry_time
        if order_note is not None:
            self.order_note = order_note
        if payment_link is not None:
            self.payment_link = payment_link
        if payment_session_id is not None:
            self.payment_session_id = payment_session_id
        if customer_details is not None:
            self.customer_details = customer_details
        if order_meta is not None:
            self.order_meta = order_meta
        if payments is not None:
            self.payments = payments
        if settlements is not None:
            self.settlements = settlements
        if refunds is not None:
            self.refunds = refunds
        if order_tags is not None:
            self.order_tags = order_tags
        if order_splits is not None:
            self.order_splits = order_splits
        if terminal_data is not None:
            self.terminal_data = terminal_data

    @property
    def cf_order_id(self):
        """Gets the cf_order_id of this CFOrder.  # noqa: E501


        :return: The cf_order_id of this CFOrder.  # noqa: E501
        :rtype: int
        """
        return self._cf_order_id

    @cf_order_id.setter
    def cf_order_id(self, cf_order_id):
        """Sets the cf_order_id of this CFOrder.


        :param cf_order_id: The cf_order_id of this CFOrder.  # noqa: E501
        :type cf_order_id: int
        """

        self._cf_order_id = cf_order_id

    @property
    def created_at(self):
        """Gets the created_at of this CFOrder.  # noqa: E501


        :return: The created_at of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CFOrder.


        :param created_at: The created_at of this CFOrder.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def order_id(self):
        """Gets the order_id of this CFOrder.  # noqa: E501


        :return: The order_id of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CFOrder.


        :param order_id: The order_id of this CFOrder.  # noqa: E501
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def entity(self):
        """Gets the entity of this CFOrder.  # noqa: E501


        :return: The entity of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CFOrder.


        :param entity: The entity of this CFOrder.  # noqa: E501
        :type entity: str
        """

        self._entity = entity

    @property
    def order_currency(self):
        """Gets the order_currency of this CFOrder.  # noqa: E501


        :return: The order_currency of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_currency

    @order_currency.setter
    def order_currency(self, order_currency):
        """Sets the order_currency of this CFOrder.


        :param order_currency: The order_currency of this CFOrder.  # noqa: E501
        :type order_currency: str
        """

        self._order_currency = order_currency

    @property
    def order_amount(self):
        """Gets the order_amount of this CFOrder.  # noqa: E501


        :return: The order_amount of this CFOrder.  # noqa: E501
        :rtype: float
        """
        return self._order_amount

    @order_amount.setter
    def order_amount(self, order_amount):
        """Sets the order_amount of this CFOrder.


        :param order_amount: The order_amount of this CFOrder.  # noqa: E501
        :type order_amount: float
        """

        self._order_amount = order_amount

    @property
    def order_status(self):
        """Gets the order_status of this CFOrder.  # noqa: E501


        :return: The order_status of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this CFOrder.


        :param order_status: The order_status of this CFOrder.  # noqa: E501
        :type order_status: str
        """

        self._order_status = order_status

    @property
    def order_token(self):
        """Gets the order_token of this CFOrder.  # noqa: E501


        :return: The order_token of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_token

    @order_token.setter
    def order_token(self, order_token):
        """Sets the order_token of this CFOrder.


        :param order_token: The order_token of this CFOrder.  # noqa: E501
        :type order_token: str
        """

        self._order_token = order_token

    @property
    def order_expiry_time(self):
        """Gets the order_expiry_time of this CFOrder.  # noqa: E501


        :return: The order_expiry_time of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_expiry_time

    @order_expiry_time.setter
    def order_expiry_time(self, order_expiry_time):
        """Sets the order_expiry_time of this CFOrder.


        :param order_expiry_time: The order_expiry_time of this CFOrder.  # noqa: E501
        :type order_expiry_time: str
        """

        self._order_expiry_time = order_expiry_time

    @property
    def order_note(self):
        """Gets the order_note of this CFOrder.  # noqa: E501


        :return: The order_note of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_note

    @order_note.setter
    def order_note(self, order_note):
        """Sets the order_note of this CFOrder.


        :param order_note: The order_note of this CFOrder.  # noqa: E501
        :type order_note: str
        """

        self._order_note = order_note

    @property
    def payment_link(self):
        """Gets the payment_link of this CFOrder.  # noqa: E501


        :return: The payment_link of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._payment_link

    @payment_link.setter
    def payment_link(self, payment_link):
        """Sets the payment_link of this CFOrder.


        :param payment_link: The payment_link of this CFOrder.  # noqa: E501
        :type payment_link: str
        """

        self._payment_link = payment_link

    @property
    def payment_session_id(self):
        """Gets the payment_session_id of this CFOrder.  # noqa: E501


        :return: The payment_session_id of this CFOrder.  # noqa: E501
        :rtype: str
        """
        return self._payment_session_id

    @payment_session_id.setter
    def payment_session_id(self, payment_session_id):
        """Sets the payment_session_id of this CFOrder.


        :param payment_session_id: The payment_session_id of this CFOrder.  # noqa: E501
        :type payment_session_id: str
        """

        self._payment_session_id = payment_session_id

    @property
    def customer_details(self):
        """Gets the customer_details of this CFOrder.  # noqa: E501


        :return: The customer_details of this CFOrder.  # noqa: E501
        :rtype: CFCustomerDetails
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this CFOrder.


        :param customer_details: The customer_details of this CFOrder.  # noqa: E501
        :type customer_details: CFCustomerDetails
        """

        self._customer_details = customer_details

    @property
    def order_meta(self):
        """Gets the order_meta of this CFOrder.  # noqa: E501


        :return: The order_meta of this CFOrder.  # noqa: E501
        :rtype: CFOrderMeta
        """
        return self._order_meta

    @order_meta.setter
    def order_meta(self, order_meta):
        """Sets the order_meta of this CFOrder.


        :param order_meta: The order_meta of this CFOrder.  # noqa: E501
        :type order_meta: CFOrderMeta
        """

        self._order_meta = order_meta

    @property
    def payments(self):
        """Gets the payments of this CFOrder.  # noqa: E501


        :return: The payments of this CFOrder.  # noqa: E501
        :rtype: CFPaymentURLObject
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this CFOrder.


        :param payments: The payments of this CFOrder.  # noqa: E501
        :type payments: CFPaymentURLObject
        """

        self._payments = payments

    @property
    def settlements(self):
        """Gets the settlements of this CFOrder.  # noqa: E501


        :return: The settlements of this CFOrder.  # noqa: E501
        :rtype: CFSettlementURLObject
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this CFOrder.


        :param settlements: The settlements of this CFOrder.  # noqa: E501
        :type settlements: CFSettlementURLObject
        """

        self._settlements = settlements

    @property
    def refunds(self):
        """Gets the refunds of this CFOrder.  # noqa: E501


        :return: The refunds of this CFOrder.  # noqa: E501
        :rtype: CFRefundURLObject
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this CFOrder.


        :param refunds: The refunds of this CFOrder.  # noqa: E501
        :type refunds: CFRefundURLObject
        """

        self._refunds = refunds

    @property
    def order_tags(self):
        """Gets the order_tags of this CFOrder.  # noqa: E501

        Custom Tags which can be passed for an order. A maximum of 6 tags can be added  # noqa: E501

        :return: The order_tags of this CFOrder.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._order_tags

    @order_tags.setter
    def order_tags(self, order_tags):
        """Sets the order_tags of this CFOrder.

        Custom Tags which can be passed for an order. A maximum of 6 tags can be added  # noqa: E501

        :param order_tags: The order_tags of this CFOrder.  # noqa: E501
        :type order_tags: dict[str, str]
        """

        self._order_tags = order_tags

    @property
    def order_splits(self):
        """Gets the order_splits of this CFOrder.  # noqa: E501


        :return: The order_splits of this CFOrder.  # noqa: E501
        :rtype: list[CFVendorSplit]
        """
        return self._order_splits

    @order_splits.setter
    def order_splits(self, order_splits):
        """Sets the order_splits of this CFOrder.


        :param order_splits: The order_splits of this CFOrder.  # noqa: E501
        :type order_splits: list[CFVendorSplit]
        """

        self._order_splits = order_splits

    @property
    def terminal_data(self):
        """Gets the terminal_data of this CFOrder.  # noqa: E501


        :return: The terminal_data of this CFOrder.  # noqa: E501
        :rtype: object
        """
        return self._terminal_data

    @terminal_data.setter
    def terminal_data(self, terminal_data):
        """Sets the terminal_data of this CFOrder.


        :param terminal_data: The terminal_data of this CFOrder.  # noqa: E501
        :type terminal_data: object
        """

        self._terminal_data = terminal_data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFOrder):
            return True

        return self.to_dict() != other.to_dict()
