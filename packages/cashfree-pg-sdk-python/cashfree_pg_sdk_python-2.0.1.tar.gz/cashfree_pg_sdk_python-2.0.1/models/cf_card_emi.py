# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFCardEMI(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channel': 'str',
        'card_number': 'str',
        'card_holder_name': 'str',
        'card_expiry_mm': 'str',
        'card_expiry_yy': 'str',
        'card_cvv': 'str',
        'card_alias': 'str',
        'card_bank_name': 'str',
        'emi_tenure': 'int'
    }

    attribute_map = {
        'channel': 'channel',
        'card_number': 'card_number',
        'card_holder_name': 'card_holder_name',
        'card_expiry_mm': 'card_expiry_mm',
        'card_expiry_yy': 'card_expiry_yy',
        'card_cvv': 'card_cvv',
        'card_alias': 'card_alias',
        'card_bank_name': 'card_bank_name',
        'emi_tenure': 'emi_tenure'
    }

    def __init__(self, channel='link', card_number=None, card_holder_name=None, card_expiry_mm=None, card_expiry_yy=None, card_cvv=None, card_alias=None, card_bank_name=None, emi_tenure=None, local_vars_configuration=None):  # noqa: E501
        """CFCardEMI - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._channel = None
        self._card_number = None
        self._card_holder_name = None
        self._card_expiry_mm = None
        self._card_expiry_yy = None
        self._card_cvv = None
        self._card_alias = None
        self._card_bank_name = None
        self._emi_tenure = None
        self.discriminator = None

        self.channel = channel
        self.card_number = card_number
        if card_holder_name is not None:
            self.card_holder_name = card_holder_name
        self.card_expiry_mm = card_expiry_mm
        self.card_expiry_yy = card_expiry_yy
        self.card_cvv = card_cvv
        if card_alias is not None:
            self.card_alias = card_alias
        self.card_bank_name = card_bank_name
        self.emi_tenure = emi_tenure

    @property
    def channel(self):
        """Gets the channel of this CFCardEMI.  # noqa: E501

        The channel for card payments will always be \"link\"  # noqa: E501

        :return: The channel of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CFCardEMI.

        The channel for card payments will always be \"link\"  # noqa: E501

        :param channel: The channel of this CFCardEMI.  # noqa: E501
        :type channel: str
        """
        if self.local_vars_configuration.client_side_validation and channel is None:  # noqa: E501
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501
        allowed_values = ["link"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and channel not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def card_number(self):
        """Gets the card_number of this CFCardEMI.  # noqa: E501

        Customer card number.  # noqa: E501

        :return: The card_number of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CFCardEMI.

        Customer card number.  # noqa: E501

        :param card_number: The card_number of this CFCardEMI.  # noqa: E501
        :type card_number: str
        """
        if self.local_vars_configuration.client_side_validation and card_number is None:  # noqa: E501
            raise ValueError("Invalid value for `card_number`, must not be `None`")  # noqa: E501

        self._card_number = card_number

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this CFCardEMI.  # noqa: E501

        Customer name mentioned on the card.  # noqa: E501

        :return: The card_holder_name of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this CFCardEMI.

        Customer name mentioned on the card.  # noqa: E501

        :param card_holder_name: The card_holder_name of this CFCardEMI.  # noqa: E501
        :type card_holder_name: str
        """

        self._card_holder_name = card_holder_name

    @property
    def card_expiry_mm(self):
        """Gets the card_expiry_mm of this CFCardEMI.  # noqa: E501

        Card expiry month.  # noqa: E501

        :return: The card_expiry_mm of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry_mm

    @card_expiry_mm.setter
    def card_expiry_mm(self, card_expiry_mm):
        """Sets the card_expiry_mm of this CFCardEMI.

        Card expiry month.  # noqa: E501

        :param card_expiry_mm: The card_expiry_mm of this CFCardEMI.  # noqa: E501
        :type card_expiry_mm: str
        """
        if self.local_vars_configuration.client_side_validation and card_expiry_mm is None:  # noqa: E501
            raise ValueError("Invalid value for `card_expiry_mm`, must not be `None`")  # noqa: E501

        self._card_expiry_mm = card_expiry_mm

    @property
    def card_expiry_yy(self):
        """Gets the card_expiry_yy of this CFCardEMI.  # noqa: E501

        Card expiry year.  # noqa: E501

        :return: The card_expiry_yy of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry_yy

    @card_expiry_yy.setter
    def card_expiry_yy(self, card_expiry_yy):
        """Sets the card_expiry_yy of this CFCardEMI.

        Card expiry year.  # noqa: E501

        :param card_expiry_yy: The card_expiry_yy of this CFCardEMI.  # noqa: E501
        :type card_expiry_yy: str
        """
        if self.local_vars_configuration.client_side_validation and card_expiry_yy is None:  # noqa: E501
            raise ValueError("Invalid value for `card_expiry_yy`, must not be `None`")  # noqa: E501

        self._card_expiry_yy = card_expiry_yy

    @property
    def card_cvv(self):
        """Gets the card_cvv of this CFCardEMI.  # noqa: E501

        CVV mentioned on the card.  # noqa: E501

        :return: The card_cvv of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_cvv

    @card_cvv.setter
    def card_cvv(self, card_cvv):
        """Sets the card_cvv of this CFCardEMI.

        CVV mentioned on the card.  # noqa: E501

        :param card_cvv: The card_cvv of this CFCardEMI.  # noqa: E501
        :type card_cvv: str
        """
        if self.local_vars_configuration.client_side_validation and card_cvv is None:  # noqa: E501
            raise ValueError("Invalid value for `card_cvv`, must not be `None`")  # noqa: E501

        self._card_cvv = card_cvv

    @property
    def card_alias(self):
        """Gets the card_alias of this CFCardEMI.  # noqa: E501

        Card alias as returned by Cashfree Vault API  # noqa: E501

        :return: The card_alias of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_alias

    @card_alias.setter
    def card_alias(self, card_alias):
        """Sets the card_alias of this CFCardEMI.

        Card alias as returned by Cashfree Vault API  # noqa: E501

        :param card_alias: The card_alias of this CFCardEMI.  # noqa: E501
        :type card_alias: str
        """

        self._card_alias = card_alias

    @property
    def card_bank_name(self):
        """Gets the card_bank_name of this CFCardEMI.  # noqa: E501

        Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\"Kotak\", \"ICICI\", \"RBL\", \"BOB\", \"Standard Chartered\", \"HDFC\"]  # noqa: E501

        :return: The card_bank_name of this CFCardEMI.  # noqa: E501
        :rtype: str
        """
        return self._card_bank_name

    @card_bank_name.setter
    def card_bank_name(self, card_bank_name):
        """Sets the card_bank_name of this CFCardEMI.

        Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\"Kotak\", \"ICICI\", \"RBL\", \"BOB\", \"Standard Chartered\", \"HDFC\"]  # noqa: E501

        :param card_bank_name: The card_bank_name of this CFCardEMI.  # noqa: E501
        :type card_bank_name: str
        """
        if self.local_vars_configuration.client_side_validation and card_bank_name is None:  # noqa: E501
            raise ValueError("Invalid value for `card_bank_name`, must not be `None`")  # noqa: E501
        allowed_values = ["Kotak", "ICICI", "RBL", "BOB", "Standard Chartered", "HDFC"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and card_bank_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `card_bank_name` ({0}), must be one of {1}"  # noqa: E501
                .format(card_bank_name, allowed_values)
            )

        self._card_bank_name = card_bank_name

    @property
    def emi_tenure(self):
        """Gets the emi_tenure of this CFCardEMI.  # noqa: E501

        EMI tenure selected by the user  # noqa: E501

        :return: The emi_tenure of this CFCardEMI.  # noqa: E501
        :rtype: int
        """
        return self._emi_tenure

    @emi_tenure.setter
    def emi_tenure(self, emi_tenure):
        """Sets the emi_tenure of this CFCardEMI.

        EMI tenure selected by the user  # noqa: E501

        :param emi_tenure: The emi_tenure of this CFCardEMI.  # noqa: E501
        :type emi_tenure: int
        """
        if self.local_vars_configuration.client_side_validation and emi_tenure is None:  # noqa: E501
            raise ValueError("Invalid value for `emi_tenure`, must not be `None`")  # noqa: E501

        self._emi_tenure = emi_tenure

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFCardEMI):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFCardEMI):
            return True

        return self.to_dict() != other.to_dict()
