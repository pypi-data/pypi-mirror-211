# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFCryptogram(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instrument_id': 'str',
        'token_requestor_id': 'str',
        'card_number': 'str',
        'card_expiry_mm': 'str',
        'card_expiry_yy': 'str',
        'cryptogram': 'str',
        'card_display': 'str'
    }

    attribute_map = {
        'instrument_id': 'instrument_id',
        'token_requestor_id': 'token_requestor_id',
        'card_number': 'card_number',
        'card_expiry_mm': 'card_expiry_mm',
        'card_expiry_yy': 'card_expiry_yy',
        'cryptogram': 'cryptogram',
        'card_display': 'card_display'
    }

    def __init__(self, instrument_id=None, token_requestor_id=None, card_number=None, card_expiry_mm=None, card_expiry_yy=None, cryptogram=None, card_display=None, local_vars_configuration=None):  # noqa: E501
        """CFCryptogram - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instrument_id = None
        self._token_requestor_id = None
        self._card_number = None
        self._card_expiry_mm = None
        self._card_expiry_yy = None
        self._cryptogram = None
        self._card_display = None
        self.discriminator = None

        if instrument_id is not None:
            self.instrument_id = instrument_id
        if token_requestor_id is not None:
            self.token_requestor_id = token_requestor_id
        if card_number is not None:
            self.card_number = card_number
        if card_expiry_mm is not None:
            self.card_expiry_mm = card_expiry_mm
        if card_expiry_yy is not None:
            self.card_expiry_yy = card_expiry_yy
        if cryptogram is not None:
            self.cryptogram = cryptogram
        if card_display is not None:
            self.card_display = card_display

    @property
    def instrument_id(self):
        """Gets the instrument_id of this CFCryptogram.  # noqa: E501

        instrument_id of saved instrument  # noqa: E501

        :return: The instrument_id of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this CFCryptogram.

        instrument_id of saved instrument  # noqa: E501

        :param instrument_id: The instrument_id of this CFCryptogram.  # noqa: E501
        :type instrument_id: str
        """

        self._instrument_id = instrument_id

    @property
    def token_requestor_id(self):
        """Gets the token_requestor_id of this CFCryptogram.  # noqa: E501

        TRID issued by card networks  # noqa: E501

        :return: The token_requestor_id of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._token_requestor_id

    @token_requestor_id.setter
    def token_requestor_id(self, token_requestor_id):
        """Sets the token_requestor_id of this CFCryptogram.

        TRID issued by card networks  # noqa: E501

        :param token_requestor_id: The token_requestor_id of this CFCryptogram.  # noqa: E501
        :type token_requestor_id: str
        """

        self._token_requestor_id = token_requestor_id

    @property
    def card_number(self):
        """Gets the card_number of this CFCryptogram.  # noqa: E501

        token pan number  # noqa: E501

        :return: The card_number of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CFCryptogram.

        token pan number  # noqa: E501

        :param card_number: The card_number of this CFCryptogram.  # noqa: E501
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def card_expiry_mm(self):
        """Gets the card_expiry_mm of this CFCryptogram.  # noqa: E501

        token pan expiry month  # noqa: E501

        :return: The card_expiry_mm of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry_mm

    @card_expiry_mm.setter
    def card_expiry_mm(self, card_expiry_mm):
        """Sets the card_expiry_mm of this CFCryptogram.

        token pan expiry month  # noqa: E501

        :param card_expiry_mm: The card_expiry_mm of this CFCryptogram.  # noqa: E501
        :type card_expiry_mm: str
        """

        self._card_expiry_mm = card_expiry_mm

    @property
    def card_expiry_yy(self):
        """Gets the card_expiry_yy of this CFCryptogram.  # noqa: E501

        token pan expiry year  # noqa: E501

        :return: The card_expiry_yy of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry_yy

    @card_expiry_yy.setter
    def card_expiry_yy(self, card_expiry_yy):
        """Sets the card_expiry_yy of this CFCryptogram.

        token pan expiry year  # noqa: E501

        :param card_expiry_yy: The card_expiry_yy of this CFCryptogram.  # noqa: E501
        :type card_expiry_yy: str
        """

        self._card_expiry_yy = card_expiry_yy

    @property
    def cryptogram(self):
        """Gets the cryptogram of this CFCryptogram.  # noqa: E501

        cryptogram  # noqa: E501

        :return: The cryptogram of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._cryptogram

    @cryptogram.setter
    def cryptogram(self, cryptogram):
        """Sets the cryptogram of this CFCryptogram.

        cryptogram  # noqa: E501

        :param cryptogram: The cryptogram of this CFCryptogram.  # noqa: E501
        :type cryptogram: str
        """

        self._cryptogram = cryptogram

    @property
    def card_display(self):
        """Gets the card_display of this CFCryptogram.  # noqa: E501

        last 4 digits of original card number  # noqa: E501

        :return: The card_display of this CFCryptogram.  # noqa: E501
        :rtype: str
        """
        return self._card_display

    @card_display.setter
    def card_display(self, card_display):
        """Sets the card_display of this CFCryptogram.

        last 4 digits of original card number  # noqa: E501

        :param card_display: The card_display of this CFCryptogram.  # noqa: E501
        :type card_display: str
        """

        self._card_display = card_display

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFCryptogram):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFCryptogram):
            return True

        return self.to_dict() != other.to_dict()
