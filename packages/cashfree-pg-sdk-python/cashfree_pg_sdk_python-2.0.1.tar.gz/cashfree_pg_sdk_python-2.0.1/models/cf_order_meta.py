# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFOrderMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'return_url': 'str',
        'notify_url': 'str',
        'payment_methods': 'str'
    }

    attribute_map = {
        'return_url': 'return_url',
        'notify_url': 'notify_url',
        'payment_methods': 'payment_methods'
    }

    def __init__(self, return_url=None, notify_url=None, payment_methods=None, local_vars_configuration=None):  # noqa: E501
        """CFOrderMeta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._return_url = None
        self._notify_url = None
        self._payment_methods = None
        self.discriminator = None

        if return_url is not None:
            self.return_url = return_url
        if notify_url is not None:
            self.notify_url = notify_url
        if payment_methods is not None:
            self.payment_methods = payment_methods

    @property
    def return_url(self):
        """Gets the return_url of this CFOrderMeta.  # noqa: E501

        The URL to which user will be redirected to after the payment on bank OTP page. Maximum length: 250.  # noqa: E501

        :return: The return_url of this CFOrderMeta.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this CFOrderMeta.

        The URL to which user will be redirected to after the payment on bank OTP page. Maximum length: 250.  # noqa: E501

        :param return_url: The return_url of this CFOrderMeta.  # noqa: E501
        :type return_url: str
        """

        self._return_url = return_url

    @property
    def notify_url(self):
        """Gets the notify_url of this CFOrderMeta.  # noqa: E501

        Notification URL for server-server communication. Useful when user's connection drops while re-directing. NotifyUrl should be an https URL. Maximum length: 250.  # noqa: E501

        :return: The notify_url of this CFOrderMeta.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this CFOrderMeta.

        Notification URL for server-server communication. Useful when user's connection drops while re-directing. NotifyUrl should be an https URL. Maximum length: 250.  # noqa: E501

        :param notify_url: The notify_url of this CFOrderMeta.  # noqa: E501
        :type notify_url: str
        """

        self._notify_url = notify_url

    @property
    def payment_methods(self):
        """Gets the payment_methods of this CFOrderMeta.  # noqa: E501

        Allowed payment modes for this order. Pass comma-separated values among following options - \"cc\", \"dc\", \"ccc\", \"ppc\", \"nb\", \"upi\", \"paypal\", \"app\". Leave it blank to show all available payment methods  # noqa: E501

        :return: The payment_methods of this CFOrderMeta.  # noqa: E501
        :rtype: str
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this CFOrderMeta.

        Allowed payment modes for this order. Pass comma-separated values among following options - \"cc\", \"dc\", \"ccc\", \"ppc\", \"nb\", \"upi\", \"paypal\", \"app\". Leave it blank to show all available payment methods  # noqa: E501

        :param payment_methods: The payment_methods of this CFOrderMeta.  # noqa: E501
        :type payment_methods: str
        """

        self._payment_methods = payment_methods

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFOrderMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFOrderMeta):
            return True

        return self.to_dict() != other.to_dict()
