# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFCustomerDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'customer_name': 'str',
        'customer_email': 'str',
        'customer_phone': 'str',
        'customer_bank_account_number': 'str',
        'customer_bank_ifsc': 'str',
        'customer_bank_code': 'int'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'customer_name': 'customer_name',
        'customer_email': 'customer_email',
        'customer_phone': 'customer_phone',
        'customer_bank_account_number': 'customer_bank_account_number',
        'customer_bank_ifsc': 'customer_bank_ifsc',
        'customer_bank_code': 'customer_bank_code'
    }

    def __init__(self, customer_id=None, customer_name=None, customer_email=None, customer_phone=None, customer_bank_account_number=None, customer_bank_ifsc=None, customer_bank_code=None, local_vars_configuration=None):  # noqa: E501
        """CFCustomerDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._customer_id = None
        self._customer_name = None
        self._customer_email = None
        self._customer_phone = None
        self._customer_bank_account_number = None
        self._customer_bank_ifsc = None
        self._customer_bank_code = None
        self.discriminator = None

        self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_email is not None:
            self.customer_email = customer_email
        self.customer_phone = customer_phone
        if customer_bank_account_number is not None:
            self.customer_bank_account_number = customer_bank_account_number
        if customer_bank_ifsc is not None:
            self.customer_bank_ifsc = customer_bank_ifsc
        if customer_bank_code is not None:
            self.customer_bank_code = customer_bank_code

    @property
    def customer_id(self):
        """Gets the customer_id of this CFCustomerDetails.  # noqa: E501

        A unique identifier for the customer. Use alphanumeric values only.  # noqa: E501

        :return: The customer_id of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CFCustomerDetails.

        A unique identifier for the customer. Use alphanumeric values only.  # noqa: E501

        :param customer_id: The customer_id of this CFCustomerDetails.  # noqa: E501
        :type customer_id: str
        """
        if self.local_vars_configuration.client_side_validation and customer_id is None:  # noqa: E501
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_id is not None and len(customer_id) > 50):
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_id is not None and len(customer_id) < 3):
            raise ValueError("Invalid value for `customer_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this CFCustomerDetails.  # noqa: E501

        Customer name.  # noqa: E501

        :return: The customer_name of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CFCustomerDetails.

        Customer name.  # noqa: E501

        :param customer_name: The customer_name of this CFCustomerDetails.  # noqa: E501
        :type customer_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_name is not None and len(customer_name) > 50):
            raise ValueError("Invalid value for `customer_name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_name is not None and len(customer_name) < 3):
            raise ValueError("Invalid value for `customer_name`, length must be greater than or equal to `3`")  # noqa: E501

        self._customer_name = customer_name

    @property
    def customer_email(self):
        """Gets the customer_email of this CFCustomerDetails.  # noqa: E501

        Customer email address.  # noqa: E501

        :return: The customer_email of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this CFCustomerDetails.

        Customer email address.  # noqa: E501

        :param customer_email: The customer_email of this CFCustomerDetails.  # noqa: E501
        :type customer_email: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_email is not None and len(customer_email) > 100):
            raise ValueError("Invalid value for `customer_email`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_email is not None and len(customer_email) < 3):
            raise ValueError("Invalid value for `customer_email`, length must be greater than or equal to `3`")  # noqa: E501

        self._customer_email = customer_email

    @property
    def customer_phone(self):
        """Gets the customer_phone of this CFCustomerDetails.  # noqa: E501

        Customer phone number.  # noqa: E501

        :return: The customer_phone of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this CFCustomerDetails.

        Customer phone number.  # noqa: E501

        :param customer_phone: The customer_phone of this CFCustomerDetails.  # noqa: E501
        :type customer_phone: str
        """
        if self.local_vars_configuration.client_side_validation and customer_phone is None:  # noqa: E501
            raise ValueError("Invalid value for `customer_phone`, must not be `None`")  # noqa: E501
        # if (self.local_vars_configuration.client_side_validation and
        #         customer_phone is not None and len(customer_phone) > 10):
        #     raise ValueError("Invalid value for `customer_phone`, length must be less than or equal to `10`")  # noqa: E501
        # if (self.local_vars_configuration.client_side_validation and
        #         customer_phone is not None and len(customer_phone) < 10):
        #     raise ValueError("Invalid value for `customer_phone`, length must be greater than or equal to `10`")  # noqa: E501

        self._customer_phone = customer_phone

    @property
    def customer_bank_account_number(self):
        """Gets the customer_bank_account_number of this CFCustomerDetails.  # noqa: E501

        Customer bank account. Required if you want to do a bank account check (TPV)  # noqa: E501

        :return: The customer_bank_account_number of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_bank_account_number

    @customer_bank_account_number.setter
    def customer_bank_account_number(self, customer_bank_account_number):
        """Sets the customer_bank_account_number of this CFCustomerDetails.

        Customer bank account. Required if you want to do a bank account check (TPV)  # noqa: E501

        :param customer_bank_account_number: The customer_bank_account_number of this CFCustomerDetails.  # noqa: E501
        :type customer_bank_account_number: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_bank_account_number is not None and len(customer_bank_account_number) > 20):
            raise ValueError("Invalid value for `customer_bank_account_number`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_bank_account_number is not None and len(customer_bank_account_number) < 3):
            raise ValueError("Invalid value for `customer_bank_account_number`, length must be greater than or equal to `3`")  # noqa: E501

        self._customer_bank_account_number = customer_bank_account_number

    @property
    def customer_bank_ifsc(self):
        """Gets the customer_bank_ifsc of this CFCustomerDetails.  # noqa: E501

        Customer bank IFSC. Required if you want to do a bank account check (TPV)  # noqa: E501

        :return: The customer_bank_ifsc of this CFCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_bank_ifsc

    @customer_bank_ifsc.setter
    def customer_bank_ifsc(self, customer_bank_ifsc):
        """Sets the customer_bank_ifsc of this CFCustomerDetails.

        Customer bank IFSC. Required if you want to do a bank account check (TPV)  # noqa: E501

        :param customer_bank_ifsc: The customer_bank_ifsc of this CFCustomerDetails.  # noqa: E501
        :type customer_bank_ifsc: str
        """

        self._customer_bank_ifsc = customer_bank_ifsc

    @property
    def customer_bank_code(self):
        """Gets the customer_bank_code of this CFCustomerDetails.  # noqa: E501

        Customer bank code. Required for net banking payments, if you want to do a bank account check (TPV)  # noqa: E501

        :return: The customer_bank_code of this CFCustomerDetails.  # noqa: E501
        :rtype: int
        """
        return self._customer_bank_code

    @customer_bank_code.setter
    def customer_bank_code(self, customer_bank_code):
        """Sets the customer_bank_code of this CFCustomerDetails.

        Customer bank code. Required for net banking payments, if you want to do a bank account check (TPV)  # noqa: E501

        :param customer_bank_code: The customer_bank_code of this CFCustomerDetails.  # noqa: E501
        :type customer_bank_code: int
        """

        self._customer_bank_code = customer_bank_code

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFCustomerDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFCustomerDetails):
            return True

        return self.to_dict() != other.to_dict()
