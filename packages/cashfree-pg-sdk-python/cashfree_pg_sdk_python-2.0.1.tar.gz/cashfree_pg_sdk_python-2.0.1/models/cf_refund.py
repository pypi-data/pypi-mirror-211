# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFRefund(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cf_payment_id': 'int',
        'cf_refund_id': 'str',
        'order_id': 'str',
        'refund_id': 'str',
        'entity': 'str',
        'refund_amount': 'float',
        'refund_currency': 'str',
        'refund_note': 'str',
        'refund_status': 'str',
        'refund_arn': 'str',
        'refund_charge': 'float',
        'status_description': 'str',
        'metadata': 'object',
        'refund_splits': 'list[CFVendorSplit]',
        'refund_type': 'str',
        'refund_mode': 'str',
        'created_at': 'str',
        'processed_at': 'str',
        'refund_speed': 'RefundSpeed'
    }

    attribute_map = {
        'cf_payment_id': 'cf_payment_id',
        'cf_refund_id': 'cf_refund_id',
        'order_id': 'order_id',
        'refund_id': 'refund_id',
        'entity': 'entity',
        'refund_amount': 'refund_amount',
        'refund_currency': 'refund_currency',
        'refund_note': 'refund_note',
        'refund_status': 'refund_status',
        'refund_arn': 'refund_arn',
        'refund_charge': 'refund_charge',
        'status_description': 'status_description',
        'metadata': 'metadata',
        'refund_splits': 'refund_splits',
        'refund_type': 'refund_type',
        'refund_mode': 'refund_mode',
        'created_at': 'created_at',
        'processed_at': 'processed_at',
        'refund_speed': 'refund_speed'
    }

    def __init__(self, cf_payment_id=None, cf_refund_id=None, order_id=None, refund_id=None, entity=None, refund_amount=None, refund_currency=None, refund_note=None, refund_status=None, refund_arn=None, refund_charge=None, status_description=None, metadata=None, refund_splits=None, refund_type=None, refund_mode=None, created_at=None, processed_at=None, refund_speed=None, local_vars_configuration=None):  # noqa: E501
        """CFRefund - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cf_payment_id = None
        self._cf_refund_id = None
        self._order_id = None
        self._refund_id = None
        self._entity = None
        self._refund_amount = None
        self._refund_currency = None
        self._refund_note = None
        self._refund_status = None
        self._refund_arn = None
        self._refund_charge = None
        self._status_description = None
        self._metadata = None
        self._refund_splits = None
        self._refund_type = None
        self._refund_mode = None
        self._created_at = None
        self._processed_at = None
        self._refund_speed = None
        self.discriminator = None

        if cf_payment_id is not None:
            self.cf_payment_id = cf_payment_id
        if cf_refund_id is not None:
            self.cf_refund_id = cf_refund_id
        if order_id is not None:
            self.order_id = order_id
        if refund_id is not None:
            self.refund_id = refund_id
        if entity is not None:
            self.entity = entity
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if refund_currency is not None:
            self.refund_currency = refund_currency
        if refund_note is not None:
            self.refund_note = refund_note
        if refund_status is not None:
            self.refund_status = refund_status
        if refund_arn is not None:
            self.refund_arn = refund_arn
        if refund_charge is not None:
            self.refund_charge = refund_charge
        if status_description is not None:
            self.status_description = status_description
        if metadata is not None:
            self.metadata = metadata
        if refund_splits is not None:
            self.refund_splits = refund_splits
        if refund_type is not None:
            self.refund_type = refund_type
        if refund_mode is not None:
            self.refund_mode = refund_mode
        if created_at is not None:
            self.created_at = created_at
        if processed_at is not None:
            self.processed_at = processed_at
        if refund_speed is not None:
            self.refund_speed = refund_speed

    @property
    def cf_payment_id(self):
        """Gets the cf_payment_id of this CFRefund.  # noqa: E501

        Cashfree Payments ID of the payment for which refund is initiated  # noqa: E501

        :return: The cf_payment_id of this CFRefund.  # noqa: E501
        :rtype: int
        """
        return self._cf_payment_id

    @cf_payment_id.setter
    def cf_payment_id(self, cf_payment_id):
        """Sets the cf_payment_id of this CFRefund.

        Cashfree Payments ID of the payment for which refund is initiated  # noqa: E501

        :param cf_payment_id: The cf_payment_id of this CFRefund.  # noqa: E501
        :type cf_payment_id: int
        """

        self._cf_payment_id = cf_payment_id

    @property
    def cf_refund_id(self):
        """Gets the cf_refund_id of this CFRefund.  # noqa: E501

        Cashfree Payments ID for a refund  # noqa: E501

        :return: The cf_refund_id of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._cf_refund_id

    @cf_refund_id.setter
    def cf_refund_id(self, cf_refund_id):
        """Sets the cf_refund_id of this CFRefund.

        Cashfree Payments ID for a refund  # noqa: E501

        :param cf_refund_id: The cf_refund_id of this CFRefund.  # noqa: E501
        :type cf_refund_id: str
        """

        self._cf_refund_id = cf_refund_id

    @property
    def order_id(self):
        """Gets the order_id of this CFRefund.  # noqa: E501

        Merchant’s order Id of the order for which refund is initiated  # noqa: E501

        :return: The order_id of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CFRefund.

        Merchant’s order Id of the order for which refund is initiated  # noqa: E501

        :param order_id: The order_id of this CFRefund.  # noqa: E501
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def refund_id(self):
        """Gets the refund_id of this CFRefund.  # noqa: E501

        Merchant’s refund ID of the refund  # noqa: E501

        :return: The refund_id of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this CFRefund.

        Merchant’s refund ID of the refund  # noqa: E501

        :param refund_id: The refund_id of this CFRefund.  # noqa: E501
        :type refund_id: str
        """

        self._refund_id = refund_id

    @property
    def entity(self):
        """Gets the entity of this CFRefund.  # noqa: E501

        Type of object  # noqa: E501

        :return: The entity of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CFRefund.

        Type of object  # noqa: E501

        :param entity: The entity of this CFRefund.  # noqa: E501
        :type entity: str
        """
        allowed_values = ["refund"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"  # noqa: E501
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def refund_amount(self):
        """Gets the refund_amount of this CFRefund.  # noqa: E501

        Amount that is refunded  # noqa: E501

        :return: The refund_amount of this CFRefund.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this CFRefund.

        Amount that is refunded  # noqa: E501

        :param refund_amount: The refund_amount of this CFRefund.  # noqa: E501
        :type refund_amount: float
        """

        self._refund_amount = refund_amount

    @property
    def refund_currency(self):
        """Gets the refund_currency of this CFRefund.  # noqa: E501

        Currency of the refund amount  # noqa: E501

        :return: The refund_currency of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_currency

    @refund_currency.setter
    def refund_currency(self, refund_currency):
        """Sets the refund_currency of this CFRefund.

        Currency of the refund amount  # noqa: E501

        :param refund_currency: The refund_currency of this CFRefund.  # noqa: E501
        :type refund_currency: str
        """

        self._refund_currency = refund_currency

    @property
    def refund_note(self):
        """Gets the refund_note of this CFRefund.  # noqa: E501

        Note added by merchant for the refund  # noqa: E501

        :return: The refund_note of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_note

    @refund_note.setter
    def refund_note(self, refund_note):
        """Sets the refund_note of this CFRefund.

        Note added by merchant for the refund  # noqa: E501

        :param refund_note: The refund_note of this CFRefund.  # noqa: E501
        :type refund_note: str
        """

        self._refund_note = refund_note

    @property
    def refund_status(self):
        """Gets the refund_status of this CFRefund.  # noqa: E501

        This can be one of [\"SUCCESS\", \"PENDING\", \"CANCELLED\", \"ONHOLD\"]  # noqa: E501

        :return: The refund_status of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_status

    @refund_status.setter
    def refund_status(self, refund_status):
        """Sets the refund_status of this CFRefund.

        This can be one of [\"SUCCESS\", \"PENDING\", \"CANCELLED\", \"ONHOLD\"]  # noqa: E501

        :param refund_status: The refund_status of this CFRefund.  # noqa: E501
        :type refund_status: str
        """
        allowed_values = ["SUCCESS", "PENDING", "CANCELLED", "ONHOLD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and refund_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `refund_status` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_status, allowed_values)
            )

        self._refund_status = refund_status

    @property
    def refund_arn(self):
        """Gets the refund_arn of this CFRefund.  # noqa: E501

        The bank reference number for refund  # noqa: E501

        :return: The refund_arn of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_arn

    @refund_arn.setter
    def refund_arn(self, refund_arn):
        """Sets the refund_arn of this CFRefund.

        The bank reference number for refund  # noqa: E501

        :param refund_arn: The refund_arn of this CFRefund.  # noqa: E501
        :type refund_arn: str
        """

        self._refund_arn = refund_arn

    @property
    def refund_charge(self):
        """Gets the refund_charge of this CFRefund.  # noqa: E501

        Charges in INR for processing refund  # noqa: E501

        :return: The refund_charge of this CFRefund.  # noqa: E501
        :rtype: float
        """
        return self._refund_charge

    @refund_charge.setter
    def refund_charge(self, refund_charge):
        """Sets the refund_charge of this CFRefund.

        Charges in INR for processing refund  # noqa: E501

        :param refund_charge: The refund_charge of this CFRefund.  # noqa: E501
        :type refund_charge: float
        """

        self._refund_charge = refund_charge

    @property
    def status_description(self):
        """Gets the status_description of this CFRefund.  # noqa: E501

        Description of refund status  # noqa: E501

        :return: The status_description of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this CFRefund.

        Description of refund status  # noqa: E501

        :param status_description: The status_description of this CFRefund.  # noqa: E501
        :type status_description: str
        """

        self._status_description = status_description

    @property
    def metadata(self):
        """Gets the metadata of this CFRefund.  # noqa: E501

        Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs  # noqa: E501

        :return: The metadata of this CFRefund.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CFRefund.

        Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs  # noqa: E501

        :param metadata: The metadata of this CFRefund.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def refund_splits(self):
        """Gets the refund_splits of this CFRefund.  # noqa: E501


        :return: The refund_splits of this CFRefund.  # noqa: E501
        :rtype: list[CFVendorSplit]
        """
        return self._refund_splits

    @refund_splits.setter
    def refund_splits(self, refund_splits):
        """Sets the refund_splits of this CFRefund.


        :param refund_splits: The refund_splits of this CFRefund.  # noqa: E501
        :type refund_splits: list[CFVendorSplit]
        """

        self._refund_splits = refund_splits

    @property
    def refund_type(self):
        """Gets the refund_type of this CFRefund.  # noqa: E501

        This can be one of [\"PAYMENT_AUTO_REFUND\", \"MERCHANT_INITIATED\", \"UNRECONCILED_AUTO_REFUND\"]  # noqa: E501

        :return: The refund_type of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_type

    @refund_type.setter
    def refund_type(self, refund_type):
        """Sets the refund_type of this CFRefund.

        This can be one of [\"PAYMENT_AUTO_REFUND\", \"MERCHANT_INITIATED\", \"UNRECONCILED_AUTO_REFUND\"]  # noqa: E501

        :param refund_type: The refund_type of this CFRefund.  # noqa: E501
        :type refund_type: str
        """
        allowed_values = ["PAYMENT_AUTO_REFUND", "MERCHANT_INITIATED", "UNRECONCILED_AUTO_REFUND"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and refund_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `refund_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_type, allowed_values)
            )

        self._refund_type = refund_type

    @property
    def refund_mode(self):
        """Gets the refund_mode of this CFRefund.  # noqa: E501

        Method or speed of processing refund  # noqa: E501

        :return: The refund_mode of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_mode

    @refund_mode.setter
    def refund_mode(self, refund_mode):
        """Sets the refund_mode of this CFRefund.

        Method or speed of processing refund  # noqa: E501

        :param refund_mode: The refund_mode of this CFRefund.  # noqa: E501
        :type refund_mode: str
        """
        allowed_values = ["STANDARD", "INSTANT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and refund_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `refund_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_mode, allowed_values)
            )

        self._refund_mode = refund_mode

    @property
    def created_at(self):
        """Gets the created_at of this CFRefund.  # noqa: E501

        Time of refund creation  # noqa: E501

        :return: The created_at of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CFRefund.

        Time of refund creation  # noqa: E501

        :param created_at: The created_at of this CFRefund.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def processed_at(self):
        """Gets the processed_at of this CFRefund.  # noqa: E501

        Time when refund was processed successfully  # noqa: E501

        :return: The processed_at of this CFRefund.  # noqa: E501
        :rtype: str
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this CFRefund.

        Time when refund was processed successfully  # noqa: E501

        :param processed_at: The processed_at of this CFRefund.  # noqa: E501
        :type processed_at: str
        """

        self._processed_at = processed_at

    @property
    def refund_speed(self):
        """Gets the refund_speed of this CFRefund.  # noqa: E501


        :return: The refund_speed of this CFRefund.  # noqa: E501
        :rtype: RefundSpeed
        """
        return self._refund_speed

    @refund_speed.setter
    def refund_speed(self, refund_speed):
        """Sets the refund_speed of this CFRefund.


        :param refund_speed: The refund_speed of this CFRefund.  # noqa: E501
        :type refund_speed: RefundSpeed
        """

        self._refund_speed = refund_speed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFRefund):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFRefund):
            return True

        return self.to_dict() != other.to_dict()
