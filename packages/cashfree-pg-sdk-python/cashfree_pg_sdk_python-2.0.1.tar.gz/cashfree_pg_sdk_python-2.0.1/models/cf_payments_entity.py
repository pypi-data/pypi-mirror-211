# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFPaymentsEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cf_payment_id': 'int',
        'order_id': 'str',
        'entity': 'str',
        'is_captured': 'bool',
        'order_amount': 'float',
        'payment_group': 'str',
        'payment_currency': 'str',
        'payment_amount': 'float',
        'payment_time': 'str',
        'payment_status': 'str',
        'payment_message': 'str',
        'bank_reference': 'str',
        'auth_id': 'str',
        'authorization': 'CFAuthorizationInPaymentsEntity',
        'payment_method': 'CFPaymentsEntityMethod',
        'error_details': 'object',
        'payment_completion_time': 'str',
        'payment_gateway_details': 'object',
        'payment_offers': 'object'
    }

    attribute_map = {
        'cf_payment_id': 'cf_payment_id',
        'order_id': 'order_id',
        'entity': 'entity',
        'is_captured': 'is_captured',
        'order_amount': 'order_amount',
        'payment_group': 'payment_group',
        'payment_currency': 'payment_currency',
        'payment_amount': 'payment_amount',
        'payment_time': 'payment_time',
        'payment_status': 'payment_status',
        'payment_message': 'payment_message',
        'bank_reference': 'bank_reference',
        'auth_id': 'auth_id',
        'authorization': 'authorization',
        'payment_method': 'payment_method',
        'error_details': 'error_details',
        'payment_completion_time': 'payment_completion_time',
        'payment_gateway_details': 'payment_gateway_details',
        'payment_offers': 'payment_offers'
    }

    def __init__(self, cf_payment_id=None, order_id=None, entity=None, is_captured=None, order_amount=None, payment_group=None, payment_currency=None, payment_amount=None, payment_time=None, payment_status=None, payment_message=None, bank_reference=None, auth_id=None, authorization=None, payment_method=None, error_details=None, payment_completion_time=None, payment_gateway_details=None, payment_offers=None, local_vars_configuration=None):  # noqa: E501
        """CFPaymentsEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cf_payment_id = None
        self._order_id = None
        self._entity = None
        self._is_captured = None
        self._order_amount = None
        self._payment_group = None
        self._payment_currency = None
        self._payment_amount = None
        self._payment_time = None
        self._payment_status = None
        self._payment_message = None
        self._bank_reference = None
        self._auth_id = None
        self._authorization = None
        self._payment_method = None
        self._error_details = None
        self._payment_completion_time = None
        self._payment_gateway_details = None
        self._payment_offers = None
        self.discriminator = None

        if cf_payment_id is not None:
            self.cf_payment_id = cf_payment_id
        if order_id is not None:
            self.order_id = order_id
        if entity is not None:
            self.entity = entity
        if is_captured is not None:
            self.is_captured = is_captured
        if order_amount is not None:
            self.order_amount = order_amount
        if payment_group is not None:
            self.payment_group = payment_group
        if payment_currency is not None:
            self.payment_currency = payment_currency
        if payment_amount is not None:
            self.payment_amount = payment_amount
        if payment_time is not None:
            self.payment_time = payment_time
        if payment_status is not None:
            self.payment_status = payment_status
        if payment_message is not None:
            self.payment_message = payment_message
        if bank_reference is not None:
            self.bank_reference = bank_reference
        if auth_id is not None:
            self.auth_id = auth_id
        if authorization is not None:
            self.authorization = authorization
        if payment_method is not None:
            self.payment_method = payment_method
        if error_details is not None:
            self.error_details = error_details
        if payment_completion_time is not None:
            self.payment_completion_time = payment_completion_time
        if payment_gateway_details is not None:
            self.payment_gateway_details = payment_gateway_details
        if payment_offers is not None:
            self.payment_offers = payment_offers

    @property
    def cf_payment_id(self):
        """Gets the cf_payment_id of this CFPaymentsEntity.  # noqa: E501


        :return: The cf_payment_id of this CFPaymentsEntity.  # noqa: E501
        :rtype: int
        """
        return self._cf_payment_id

    @cf_payment_id.setter
    def cf_payment_id(self, cf_payment_id):
        """Sets the cf_payment_id of this CFPaymentsEntity.


        :param cf_payment_id: The cf_payment_id of this CFPaymentsEntity.  # noqa: E501
        :type cf_payment_id: int
        """

        self._cf_payment_id = cf_payment_id

    @property
    def order_id(self):
        """Gets the order_id of this CFPaymentsEntity.  # noqa: E501


        :return: The order_id of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CFPaymentsEntity.


        :param order_id: The order_id of this CFPaymentsEntity.  # noqa: E501
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def entity(self):
        """Gets the entity of this CFPaymentsEntity.  # noqa: E501


        :return: The entity of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CFPaymentsEntity.


        :param entity: The entity of this CFPaymentsEntity.  # noqa: E501
        :type entity: str
        """

        self._entity = entity

    @property
    def is_captured(self):
        """Gets the is_captured of this CFPaymentsEntity.  # noqa: E501


        :return: The is_captured of this CFPaymentsEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_captured

    @is_captured.setter
    def is_captured(self, is_captured):
        """Sets the is_captured of this CFPaymentsEntity.


        :param is_captured: The is_captured of this CFPaymentsEntity.  # noqa: E501
        :type is_captured: bool
        """

        self._is_captured = is_captured

    @property
    def order_amount(self):
        """Gets the order_amount of this CFPaymentsEntity.  # noqa: E501

        Order amount can be different from payment amount if you collect service fee from the customer  # noqa: E501

        :return: The order_amount of this CFPaymentsEntity.  # noqa: E501
        :rtype: float
        """
        return self._order_amount

    @order_amount.setter
    def order_amount(self, order_amount):
        """Sets the order_amount of this CFPaymentsEntity.

        Order amount can be different from payment amount if you collect service fee from the customer  # noqa: E501

        :param order_amount: The order_amount of this CFPaymentsEntity.  # noqa: E501
        :type order_amount: float
        """

        self._order_amount = order_amount

    @property
    def payment_group(self):
        """Gets the payment_group of this CFPaymentsEntity.  # noqa: E501

        Type of payment group. One of ['upi', 'card', 'app', 'netbanking', 'paylater', 'cardless_emi']  # noqa: E501

        :return: The payment_group of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_group

    @payment_group.setter
    def payment_group(self, payment_group):
        """Sets the payment_group of this CFPaymentsEntity.

        Type of payment group. One of ['upi', 'card', 'app', 'netbanking', 'paylater', 'cardless_emi']  # noqa: E501

        :param payment_group: The payment_group of this CFPaymentsEntity.  # noqa: E501
        :type payment_group: str
        """

        self._payment_group = payment_group

    @property
    def payment_currency(self):
        """Gets the payment_currency of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_currency of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this CFPaymentsEntity.


        :param payment_currency: The payment_currency of this CFPaymentsEntity.  # noqa: E501
        :type payment_currency: str
        """

        self._payment_currency = payment_currency

    @property
    def payment_amount(self):
        """Gets the payment_amount of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_amount of this CFPaymentsEntity.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this CFPaymentsEntity.


        :param payment_amount: The payment_amount of this CFPaymentsEntity.  # noqa: E501
        :type payment_amount: float
        """

        self._payment_amount = payment_amount

    @property
    def payment_time(self):
        """Gets the payment_time of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_time of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_time

    @payment_time.setter
    def payment_time(self, payment_time):
        """Sets the payment_time of this CFPaymentsEntity.


        :param payment_time: The payment_time of this CFPaymentsEntity.  # noqa: E501
        :type payment_time: str
        """

        self._payment_time = payment_time

    @property
    def payment_status(self):
        """Gets the payment_status of this CFPaymentsEntity.  # noqa: E501

        The transaction status can be one of  [\"SUCCESS\", \"NOT_ATTEMPTED\", \"FAILED\", \"USER_DROPPED\", \"VOID\", \"CANCELLED\", \"PENDING\"]  # noqa: E501

        :return: The payment_status of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this CFPaymentsEntity.

        The transaction status can be one of  [\"SUCCESS\", \"NOT_ATTEMPTED\", \"FAILED\", \"USER_DROPPED\", \"VOID\", \"CANCELLED\", \"PENDING\"]  # noqa: E501

        :param payment_status: The payment_status of this CFPaymentsEntity.  # noqa: E501
        :type payment_status: str
        """
        allowed_values = ["SUCCESS", "NOT_ATTEMPTED", "FAILED", "USER_DROPPED", "VOID", "CANCELLED", "PENDING"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payment_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def payment_message(self):
        """Gets the payment_message of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_message of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_message

    @payment_message.setter
    def payment_message(self, payment_message):
        """Sets the payment_message of this CFPaymentsEntity.


        :param payment_message: The payment_message of this CFPaymentsEntity.  # noqa: E501
        :type payment_message: str
        """

        self._payment_message = payment_message

    @property
    def bank_reference(self):
        """Gets the bank_reference of this CFPaymentsEntity.  # noqa: E501


        :return: The bank_reference of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._bank_reference

    @bank_reference.setter
    def bank_reference(self, bank_reference):
        """Sets the bank_reference of this CFPaymentsEntity.


        :param bank_reference: The bank_reference of this CFPaymentsEntity.  # noqa: E501
        :type bank_reference: str
        """

        self._bank_reference = bank_reference

    @property
    def auth_id(self):
        """Gets the auth_id of this CFPaymentsEntity.  # noqa: E501


        :return: The auth_id of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._auth_id

    @auth_id.setter
    def auth_id(self, auth_id):
        """Sets the auth_id of this CFPaymentsEntity.


        :param auth_id: The auth_id of this CFPaymentsEntity.  # noqa: E501
        :type auth_id: str
        """

        self._auth_id = auth_id

    @property
    def authorization(self):
        """Gets the authorization of this CFPaymentsEntity.  # noqa: E501


        :return: The authorization of this CFPaymentsEntity.  # noqa: E501
        :rtype: CFAuthorizationInPaymentsEntity
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this CFPaymentsEntity.


        :param authorization: The authorization of this CFPaymentsEntity.  # noqa: E501
        :type authorization: CFAuthorizationInPaymentsEntity
        """

        self._authorization = authorization

    @property
    def payment_method(self):
        """Gets the payment_method of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_method of this CFPaymentsEntity.  # noqa: E501
        :rtype: CFPaymentsEntityMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CFPaymentsEntity.


        :param payment_method: The payment_method of this CFPaymentsEntity.  # noqa: E501
        :type payment_method: CFPaymentsEntityMethod
        """

        self._payment_method = payment_method

    @property
    def error_details(self):
        """Gets the error_details of this CFPaymentsEntity.  # noqa: E501


        :return: The error_details of this CFPaymentsEntity.  # noqa: E501
        :rtype: object
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this CFPaymentsEntity.


        :param error_details: The error_details of this CFPaymentsEntity.  # noqa: E501
        :type error_details: object
        """

        self._error_details = error_details

    @property
    def payment_completion_time(self):
        """Gets the payment_completion_time of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_completion_time of this CFPaymentsEntity.  # noqa: E501
        :rtype: str
        """
        return self._payment_completion_time

    @payment_completion_time.setter
    def payment_completion_time(self, payment_completion_time):
        """Sets the payment_completion_time of this CFPaymentsEntity.


        :param payment_completion_time: The payment_completion_time of this CFPaymentsEntity.  # noqa: E501
        :type payment_completion_time: str
        """

        self._payment_completion_time = payment_completion_time

    @property
    def payment_gateway_details(self):
        """Gets the payment_gateway_details of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_gateway_details of this CFPaymentsEntity.  # noqa: E501
        :rtype: object
        """
        return self._payment_gateway_details

    @payment_gateway_details.setter
    def payment_gateway_details(self, payment_gateway_details):
        """Sets the payment_gateway_details of this CFPaymentsEntity.


        :param payment_gateway_details: The payment_gateway_details of this CFPaymentsEntity.  # noqa: E501
        :type payment_gateway_details: object
        """

        self._payment_gateway_details = payment_gateway_details

    @property
    def payment_offers(self):
        """Gets the payment_offers of this CFPaymentsEntity.  # noqa: E501


        :return: The payment_offers of this CFPaymentsEntity.  # noqa: E501
        :rtype: object
        """
        return self._payment_offers

    @payment_offers.setter
    def payment_offers(self, payment_offers):
        """Sets the payment_offers of this CFPaymentsEntity.


        :param payment_offers: The payment_offers of this CFPaymentsEntity.  # noqa: E501
        :type payment_offers: object
        """

        self._payment_offers = payment_offers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFPaymentsEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFPaymentsEntity):
            return True

        return self.to_dict() != other.to_dict()
