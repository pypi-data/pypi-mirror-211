# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFFetchAllSavedInstruments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'afa_reference': 'int',
        'instrument_id': 'str',
        'instrument_type': 'str',
        'instrument_uid': 'str',
        'instrument_display': 'str',
        'instrument_status': 'str',
        'created_at': 'str',
        'instrument_meta': 'CFSavedInstrumentMeta'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'afa_reference': 'afa_reference',
        'instrument_id': 'instrument_id',
        'instrument_type': 'instrument_type',
        'instrument_uid': 'instrument_uid',
        'instrument_display': 'instrument_display',
        'instrument_status': 'instrument_status',
        'created_at': 'created_at',
        'instrument_meta': 'instrument_meta'
    }

    def __init__(self, customer_id=None, afa_reference=None, instrument_id=None, instrument_type=None, instrument_uid=None, instrument_display=None, instrument_status=None, created_at=None, instrument_meta=None, local_vars_configuration=None):  # noqa: E501
        """CFFetchAllSavedInstruments - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._customer_id = None
        self._afa_reference = None
        self._instrument_id = None
        self._instrument_type = None
        self._instrument_uid = None
        self._instrument_display = None
        self._instrument_status = None
        self._created_at = None
        self._instrument_meta = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if afa_reference is not None:
            self.afa_reference = afa_reference
        if instrument_id is not None:
            self.instrument_id = instrument_id
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if instrument_uid is not None:
            self.instrument_uid = instrument_uid
        if instrument_display is not None:
            self.instrument_display = instrument_display
        if instrument_status is not None:
            self.instrument_status = instrument_status
        if created_at is not None:
            self.created_at = created_at
        if instrument_meta is not None:
            self.instrument_meta = instrument_meta

    @property
    def customer_id(self):
        """Gets the customer_id of this CFFetchAllSavedInstruments.  # noqa: E501

        customer_id for which the instrument was saved  # noqa: E501

        :return: The customer_id of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CFFetchAllSavedInstruments.

        customer_id for which the instrument was saved  # noqa: E501

        :param customer_id: The customer_id of this CFFetchAllSavedInstruments.  # noqa: E501
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def afa_reference(self):
        """Gets the afa_reference of this CFFetchAllSavedInstruments.  # noqa: E501

        cf_payment_id of the successful transaction done while saving instrument  # noqa: E501

        :return: The afa_reference of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: int
        """
        return self._afa_reference

    @afa_reference.setter
    def afa_reference(self, afa_reference):
        """Sets the afa_reference of this CFFetchAllSavedInstruments.

        cf_payment_id of the successful transaction done while saving instrument  # noqa: E501

        :param afa_reference: The afa_reference of this CFFetchAllSavedInstruments.  # noqa: E501
        :type afa_reference: int
        """

        self._afa_reference = afa_reference

    @property
    def instrument_id(self):
        """Gets the instrument_id of this CFFetchAllSavedInstruments.  # noqa: E501

        saved instrument id  # noqa: E501

        :return: The instrument_id of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this CFFetchAllSavedInstruments.

        saved instrument id  # noqa: E501

        :param instrument_id: The instrument_id of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_id: str
        """

        self._instrument_id = instrument_id

    @property
    def instrument_type(self):
        """Gets the instrument_type of this CFFetchAllSavedInstruments.  # noqa: E501

        Type of the saved instrument  # noqa: E501

        :return: The instrument_type of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this CFFetchAllSavedInstruments.

        Type of the saved instrument  # noqa: E501

        :param instrument_type: The instrument_type of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_type: str
        """
        allowed_values = ["card"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_type` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_type, allowed_values)
            )

        self._instrument_type = instrument_type

    @property
    def instrument_uid(self):
        """Gets the instrument_uid of this CFFetchAllSavedInstruments.  # noqa: E501

        Unique id for the saved instrument  # noqa: E501

        :return: The instrument_uid of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument_uid

    @instrument_uid.setter
    def instrument_uid(self, instrument_uid):
        """Sets the instrument_uid of this CFFetchAllSavedInstruments.

        Unique id for the saved instrument  # noqa: E501

        :param instrument_uid: The instrument_uid of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_uid: str
        """

        self._instrument_uid = instrument_uid

    @property
    def instrument_display(self):
        """Gets the instrument_display of this CFFetchAllSavedInstruments.  # noqa: E501

        masked card number displayed to the customer  # noqa: E501

        :return: The instrument_display of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument_display

    @instrument_display.setter
    def instrument_display(self, instrument_display):
        """Sets the instrument_display of this CFFetchAllSavedInstruments.

        masked card number displayed to the customer  # noqa: E501

        :param instrument_display: The instrument_display of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_display: str
        """

        self._instrument_display = instrument_display

    @property
    def instrument_status(self):
        """Gets the instrument_status of this CFFetchAllSavedInstruments.  # noqa: E501

        status of the saved instrument  # noqa: E501

        :return: The instrument_status of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._instrument_status

    @instrument_status.setter
    def instrument_status(self, instrument_status):
        """Sets the instrument_status of this CFFetchAllSavedInstruments.

        status of the saved instrument  # noqa: E501

        :param instrument_status: The instrument_status of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_status` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_status, allowed_values)
            )

        self._instrument_status = instrument_status

    @property
    def created_at(self):
        """Gets the created_at of this CFFetchAllSavedInstruments.  # noqa: E501

        timestamp at which instrument was saved  # noqa: E501

        :return: The created_at of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CFFetchAllSavedInstruments.

        timestamp at which instrument was saved  # noqa: E501

        :param created_at: The created_at of this CFFetchAllSavedInstruments.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def instrument_meta(self):
        """Gets the instrument_meta of this CFFetchAllSavedInstruments.  # noqa: E501


        :return: The instrument_meta of this CFFetchAllSavedInstruments.  # noqa: E501
        :rtype: CFSavedInstrumentMeta
        """
        return self._instrument_meta

    @instrument_meta.setter
    def instrument_meta(self, instrument_meta):
        """Sets the instrument_meta of this CFFetchAllSavedInstruments.


        :param instrument_meta: The instrument_meta of this CFFetchAllSavedInstruments.  # noqa: E501
        :type instrument_meta: CFSavedInstrumentMeta
        """

        self._instrument_meta = instrument_meta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFFetchAllSavedInstruments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFFetchAllSavedInstruments):
            return True

        return self.to_dict() != other.to_dict()
