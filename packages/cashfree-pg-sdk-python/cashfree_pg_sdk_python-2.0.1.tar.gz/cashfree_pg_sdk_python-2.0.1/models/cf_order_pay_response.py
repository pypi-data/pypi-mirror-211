# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFOrderPayResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cf_payment_id': 'int',
        'payment_amount': 'float',
        'payment_method': 'str',
        'channel': 'str',
        'action': 'str',
        'data': 'CFOrderPayData'
    }

    attribute_map = {
        'cf_payment_id': 'cf_payment_id',
        'payment_amount': 'payment_amount',
        'payment_method': 'payment_method',
        'channel': 'channel',
        'action': 'action',
        'data': 'data'
    }

    def __init__(self, cf_payment_id=None, payment_amount=None, payment_method=None, channel=None, action=None, data=None, local_vars_configuration=None):  # noqa: E501
        """CFOrderPayResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cf_payment_id = None
        self._payment_amount = None
        self._payment_method = None
        self._channel = None
        self._action = None
        self._data = None
        self.discriminator = None

        if cf_payment_id is not None:
            self.cf_payment_id = cf_payment_id
        if payment_amount is not None:
            self.payment_amount = payment_amount
        if payment_method is not None:
            self.payment_method = payment_method
        if channel is not None:
            self.channel = channel
        self.action = action
        if data is not None:
            self.data = data

    @property
    def cf_payment_id(self):
        """Gets the cf_payment_id of this CFOrderPayResponse.  # noqa: E501

        Payment identifier created by Cashfree  # noqa: E501

        :return: The cf_payment_id of this CFOrderPayResponse.  # noqa: E501
        :rtype: int
        """
        return self._cf_payment_id

    @cf_payment_id.setter
    def cf_payment_id(self, cf_payment_id):
        """Sets the cf_payment_id of this CFOrderPayResponse.

        Payment identifier created by Cashfree  # noqa: E501

        :param cf_payment_id: The cf_payment_id of this CFOrderPayResponse.  # noqa: E501
        :type cf_payment_id: int
        """

        self._cf_payment_id = cf_payment_id

    @property
    def payment_amount(self):
        """Gets the payment_amount of this CFOrderPayResponse.  # noqa: E501


        :return: The payment_amount of this CFOrderPayResponse.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this CFOrderPayResponse.


        :param payment_amount: The payment_amount of this CFOrderPayResponse.  # noqa: E501
        :type payment_amount: float
        """

        self._payment_amount = payment_amount

    @property
    def payment_method(self):
        """Gets the payment_method of this CFOrderPayResponse.  # noqa: E501

        One of [\"upi\", \"netbanking\", \"card\", \"app\", \"cardless_emi\", \"paylater\"]   # noqa: E501

        :return: The payment_method of this CFOrderPayResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CFOrderPayResponse.

        One of [\"upi\", \"netbanking\", \"card\", \"app\", \"cardless_emi\", \"paylater\"]   # noqa: E501

        :param payment_method: The payment_method of this CFOrderPayResponse.  # noqa: E501
        :type payment_method: str
        """
        allowed_values = ["netbanking", "card", "upi", "app", "cardless_emi", "paylater"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payment_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def channel(self):
        """Gets the channel of this CFOrderPayResponse.  # noqa: E501

        One of [\"link\", \"collect\", \"qrcode\"]. In an older version we used to support different channels like 'gpay', 'phonepe' etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as 'link' and provider as 'gpay'  # noqa: E501

        :return: The channel of this CFOrderPayResponse.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CFOrderPayResponse.

        One of [\"link\", \"collect\", \"qrcode\"]. In an older version we used to support different channels like 'gpay', 'phonepe' etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as 'link' and provider as 'gpay'  # noqa: E501

        :param channel: The channel of this CFOrderPayResponse.  # noqa: E501
        :type channel: str
        """
        allowed_values = ["link", "collect", "qrcode"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and channel not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def action(self):
        """Gets the action of this CFOrderPayResponse.  # noqa: E501

        One of [\"link\", \"custom\", \"form\"]  # noqa: E501

        :return: The action of this CFOrderPayResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CFOrderPayResponse.

        One of [\"link\", \"custom\", \"form\"]  # noqa: E501

        :param action: The action of this CFOrderPayResponse.  # noqa: E501
        :type action: str
        """
        allowed_values = [None,"link", "custom", "form"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def data(self):
        """Gets the data of this CFOrderPayResponse.  # noqa: E501


        :return: The data of this CFOrderPayResponse.  # noqa: E501
        :rtype: CFOrderPayData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CFOrderPayResponse.


        :param data: The data of this CFOrderPayResponse.  # noqa: E501
        :type data: CFOrderPayData
        """

        self._data = data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFOrderPayResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFOrderPayResponse):
            return True

        return self.to_dict() != other.to_dict()
