# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFSavedInstrumentMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_network': 'str',
        'card_bank_name': 'str',
        'card_country': 'str',
        'card_type': 'str',
        'card_sub_type': 'str',
        'card_token_details': 'object'
    }

    attribute_map = {
        'card_network': 'card_network',
        'card_bank_name': 'card_bank_name',
        'card_country': 'card_country',
        'card_type': 'card_type',
        'card_sub_type': 'card_sub_type',
        'card_token_details': 'card_token_details'
    }

    def __init__(self, card_network=None, card_bank_name=None, card_country=None, card_type=None, card_sub_type=None, card_token_details=None, local_vars_configuration=None):  # noqa: E501
        """CFSavedInstrumentMeta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._card_network = None
        self._card_bank_name = None
        self._card_country = None
        self._card_type = None
        self._card_sub_type = None
        self._card_token_details = None
        self.discriminator = None

        if card_network is not None:
            self.card_network = card_network
        if card_bank_name is not None:
            self.card_bank_name = card_bank_name
        if card_country is not None:
            self.card_country = card_country
        if card_type is not None:
            self.card_type = card_type
        if card_sub_type is not None:
            self.card_sub_type = card_sub_type
        if card_token_details is not None:
            self.card_token_details = card_token_details

    @property
    def card_network(self):
        """Gets the card_network of this CFSavedInstrumentMeta.  # noqa: E501

        card scheme/network of the saved card  # noqa: E501

        :return: The card_network of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._card_network

    @card_network.setter
    def card_network(self, card_network):
        """Sets the card_network of this CFSavedInstrumentMeta.

        card scheme/network of the saved card  # noqa: E501

        :param card_network: The card_network of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_network: str
        """

        self._card_network = card_network

    @property
    def card_bank_name(self):
        """Gets the card_bank_name of this CFSavedInstrumentMeta.  # noqa: E501

        Issuing bank name of saved card  # noqa: E501

        :return: The card_bank_name of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._card_bank_name

    @card_bank_name.setter
    def card_bank_name(self, card_bank_name):
        """Sets the card_bank_name of this CFSavedInstrumentMeta.

        Issuing bank name of saved card  # noqa: E501

        :param card_bank_name: The card_bank_name of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_bank_name: str
        """

        self._card_bank_name = card_bank_name

    @property
    def card_country(self):
        """Gets the card_country of this CFSavedInstrumentMeta.  # noqa: E501

        Issuing country of saved card  # noqa: E501

        :return: The card_country of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._card_country

    @card_country.setter
    def card_country(self, card_country):
        """Sets the card_country of this CFSavedInstrumentMeta.

        Issuing country of saved card  # noqa: E501

        :param card_country: The card_country of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_country: str
        """

        self._card_country = card_country

    @property
    def card_type(self):
        """Gets the card_type of this CFSavedInstrumentMeta.  # noqa: E501

        Type of saved card  # noqa: E501

        :return: The card_type of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CFSavedInstrumentMeta.

        Type of saved card  # noqa: E501

        :param card_type: The card_type of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_type: str
        """

        self._card_type = card_type

    @property
    def card_sub_type(self):
        """Gets the card_sub_type of this CFSavedInstrumentMeta.  # noqa: E501

        Sub Type of saved card  # noqa: E501

        :return: The card_sub_type of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: str
        """
        return self._card_sub_type

    @card_sub_type.setter
    def card_sub_type(self, card_sub_type):
        """Sets the card_sub_type of this CFSavedInstrumentMeta.

        Sub Type of saved card  # noqa: E501

        :param card_sub_type: The card_sub_type of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_sub_type: str
        """

        self._card_sub_type = card_sub_type

    @property
    def card_token_details(self):
        """Gets the card_token_details of this CFSavedInstrumentMeta.  # noqa: E501


        :return: The card_token_details of this CFSavedInstrumentMeta.  # noqa: E501
        :rtype: object
        """
        return self._card_token_details

    @card_token_details.setter
    def card_token_details(self, card_token_details):
        """Sets the card_token_details of this CFSavedInstrumentMeta.


        :param card_token_details: The card_token_details of this CFSavedInstrumentMeta.  # noqa: E501
        :type card_token_details: object
        """

        self._card_token_details = card_token_details

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFSavedInstrumentMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFSavedInstrumentMeta):
            return True

        return self.to_dict() != other.to_dict()
