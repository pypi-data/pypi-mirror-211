# coding: utf-8

"""
    New Payment Gateway APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2022-01-01
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cashfree_pg_sdk_python.configuration import Configuration


class CFUPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channel': 'str',
        'upi_id': 'str',
        'authorize_only': 'bool',
        'authorization': 'CFUPIAuthorizeDetails'
    }

    attribute_map = {
        'channel': 'channel',
        'upi_id': 'upi_id',
        'authorize_only': 'authorize_only',
        'authorization': 'authorization'
    }

    def __init__(self, channel=None, upi_id=None, authorize_only=None, authorization=None, local_vars_configuration=None):  # noqa: E501
        """CFUPI - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._channel = None
        self._upi_id = None
        self._authorize_only = None
        self._authorization = None
        self.discriminator = None

        self.channel = channel
        self.upi_id = upi_id
        if authorize_only is not None:
            self.authorize_only = authorize_only
        if authorization is not None:
            self.authorization = authorization

    @property
    def channel(self):
        """Gets the channel of this CFUPI.  # noqa: E501

        Specify the channel through which the payment must be processed. Can be one of [\"link\", \"collect\", \"qrcode\"]  # noqa: E501

        :return: The channel of this CFUPI.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CFUPI.

        Specify the channel through which the payment must be processed. Can be one of [\"link\", \"collect\", \"qrcode\"]  # noqa: E501

        :param channel: The channel of this CFUPI.  # noqa: E501
        :type channel: str
        """
        if self.local_vars_configuration.client_side_validation and channel is None:  # noqa: E501
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501
        allowed_values = ["link", "collect", "qrcode"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and channel not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def upi_id(self):
        """Gets the upi_id of this CFUPI.  # noqa: E501

        Customer UPI VPA to process payment.  # noqa: E501

        :return: The upi_id of this CFUPI.  # noqa: E501
        :rtype: str
        """
        return self._upi_id

    @upi_id.setter
    def upi_id(self, upi_id):
        """Sets the upi_id of this CFUPI.

        Customer UPI VPA to process payment.  # noqa: E501

        :param upi_id: The upi_id of this CFUPI.  # noqa: E501
        :type upi_id: str
        """
        if self.local_vars_configuration.client_side_validation and upi_id is None:  # noqa: E501
            raise ValueError("Invalid value for `upi_id`, must not be `None`")  # noqa: E501

        self._upi_id = upi_id

    @property
    def authorize_only(self):
        """Gets the authorize_only of this CFUPI.  # noqa: E501

        For one time mandate on UPI. Set this as authorize_only = true. Please note that you can only use the \"collect\" channel if you are sending a one time mandate request  # noqa: E501

        :return: The authorize_only of this CFUPI.  # noqa: E501
        :rtype: bool
        """
        return self._authorize_only

    @authorize_only.setter
    def authorize_only(self, authorize_only):
        """Sets the authorize_only of this CFUPI.

        For one time mandate on UPI. Set this as authorize_only = true. Please note that you can only use the \"collect\" channel if you are sending a one time mandate request  # noqa: E501

        :param authorize_only: The authorize_only of this CFUPI.  # noqa: E501
        :type authorize_only: bool
        """

        self._authorize_only = authorize_only

    @property
    def authorization(self):
        """Gets the authorization of this CFUPI.  # noqa: E501


        :return: The authorization of this CFUPI.  # noqa: E501
        :rtype: CFUPIAuthorizeDetails
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this CFUPI.


        :param authorization: The authorization of this CFUPI.  # noqa: E501
        :type authorization: CFUPIAuthorizeDetails
        """

        self._authorization = authorization

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CFUPI):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CFUPI):
            return True

        return self.to_dict() != other.to_dict()
