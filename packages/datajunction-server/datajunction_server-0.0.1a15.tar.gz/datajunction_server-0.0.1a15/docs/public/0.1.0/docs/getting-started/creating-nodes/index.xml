<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataJunction</title>
    <link>0.1.0/docs/getting-started/creating-nodes/</link>
    <description>Recent content on DataJunction</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="0.1.0/docs/getting-started/creating-nodes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>0.1.0/docs/getting-started/creating-nodes/sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>0.1.0/docs/getting-started/creating-nodes/sources/</guid>
      <description>Sources # Source nodes represent external tables in a database or data warehouse and make up the foundational layer on which other nodes are built upon.
Attribute Description Type name Unique name used by other nodes to select from this node string description A human readable description of the node string mode published or draft (see Node Mode) string catalog The name of the external catalog string schema_ The name of the external schema string table The name of the external table string columns A map of the external table&amp;rsquo;s column names and types map Creating Source Nodes # Source nodes can be created by making a POST request to /nodes/source/.</description>
    </item>
    
    <item>
      <title></title>
      <link>0.1.0/docs/getting-started/creating-nodes/transforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>0.1.0/docs/getting-started/creating-nodes/transforms/</guid>
      <description>Transforms # Transform nodes allow you to do arbitray SQL operations on sources, dimensions, and even other transform nodes. Of course with a perfect data model, you may not need to define any transform nodes. However, in some cases it may be convenient to use transform nodes to clean up your external data within DJ by joining, aggregating, casting types, or any other SQL operation that your query engine supports.</description>
    </item>
    
    <item>
      <title></title>
      <link>0.1.0/docs/getting-started/creating-nodes/dimensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>0.1.0/docs/getting-started/creating-nodes/dimensions/</guid>
      <description>Dimensions # Dimension nodes are critical for defining the cross edges of the DJ DAG and are instrumental in many of DJ&amp;rsquo;s core features. They include a query that can select from any other node to create a representation of a dimension. Any column in any DJ node can then be tagged as a join key to any column on the dimension node. These join paths are used by DJ to discover all dimensions that are accessible for each metric.</description>
    </item>
    
    <item>
      <title></title>
      <link>0.1.0/docs/getting-started/creating-nodes/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>0.1.0/docs/getting-started/creating-nodes/metrics/</guid>
      <description>Metrics # Metric nodes represent an aggregation of a measure defined as a single expression in a query that selects from a single source, transform, or dimension node.
Attribute Description Type name Unique name used by other nodes to select from this node string description A human readable description of the node string mode published or draft (see Node Mode) string query A SQL query that selects a single expression from a single node string Creating Metric Nodes # Metric nodes can be created by making a POST request to /nodes/metric/.</description>
    </item>
    
    <item>
      <title></title>
      <link>0.1.0/docs/getting-started/creating-nodes/cubes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>0.1.0/docs/getting-started/creating-nodes/cubes/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>
