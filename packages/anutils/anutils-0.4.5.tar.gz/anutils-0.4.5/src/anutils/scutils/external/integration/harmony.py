import os
import pandas as pd

HARMONY_MATRIX_R_SCRIPT = os.path.join(os.path.dirname(__file__), 'harmony_matrix.R')


def harmony_matrix(
    input_path,
    output_path,
    metadata_path,
    batch_key='batch',
    # harmony arguments
    theta=None,
    lambda_=None,
    sigma=None,
    tau=None,
    max_iter_harmony=None,
    max_iter_cluster=None,
    epsilon_cluster=None,
    epsilon_harmony=None,
):
    """
    params:
    ---
    input_path: str
        dir containing `matrix.mtx`, `features.txt`, `metadata.txt`. can be generated by `anutils.scutils.data.h5ad2mtx`
    output_path: str
        output pcs tsv file path
    
    returns:
    ---
    pcs: pd.DataFrame, shape (n_cells, n_pcs)
        integrated PCs, with no index. cell order is the same as the input matrix
    """
    if not os.path.exists(os.path.dirname(output_path)):
        print(f'creating output dir: {output_path}')
        os.makedirs(output_path)
    # run harmony
    args = {
        '-i': input_path,
        '-o': output_path,
        '--metadata_file': metadata_path,
        '-b': batch_key,
    }
    for kwarg in [
            'theta', 'lambda_', 'sigma', 'tau', 'max_iter_harmony', 'max_iter_cluster',
            'epsilon_cluster', 'epsilon_harmony'
    ]:
        if locals()[kwarg] is not None:
            args[f'--{kwarg}'] = locals()[kwarg]
    cmd = f'Rscript {HARMONY_MATRIX_R_SCRIPT} {" ".join([f"{k} {v}" for k, v in args.items()])}'
    exit_code = os.system(cmd)
    if exit_code != 0:
        raise RuntimeError(f'Error running harmony: {cmd} (exit code: {exit_code}')

    # collect results into memory
    pcs = pd.read_csv(output_path, sep='\t', index_col=None, header=None)

    return pcs