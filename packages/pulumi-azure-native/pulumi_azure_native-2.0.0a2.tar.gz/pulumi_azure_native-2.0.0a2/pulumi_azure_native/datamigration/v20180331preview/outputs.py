# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'DatabaseInfoResponse',
    'SqlConnectionInfoResponse',
]

@pulumi.output_type
class DatabaseInfoResponse(dict):
    """
    Project Database Details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceDatabaseName":
            suggest = "source_database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_database_name: str):
        """
        Project Database Details
        :param str source_database_name: Name of the database
        """
        pulumi.set(__self__, "source_database_name", source_database_name)

    @property
    @pulumi.getter(name="sourceDatabaseName")
    def source_database_name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "source_database_name")


@pulumi.output_type
class SqlConnectionInfoResponse(dict):
    """
    Information for connecting to SQL database server
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "additionalSettings":
            suggest = "additional_settings"
        elif key == "encryptConnection":
            suggest = "encrypt_connection"
        elif key == "trustServerCertificate":
            suggest = "trust_server_certificate"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlConnectionInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlConnectionInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlConnectionInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: str,
                 type: str,
                 additional_settings: Optional[str] = None,
                 authentication: Optional[str] = None,
                 encrypt_connection: Optional[bool] = None,
                 password: Optional[str] = None,
                 trust_server_certificate: Optional[bool] = None,
                 user_name: Optional[str] = None):
        """
        Information for connecting to SQL database server
        :param str data_source: Data source in the format Protocol:MachineName\\SQLServerInstanceName,PortNumber
        :param str type: Type of connection info
               Expected value is 'SqlConnectionInfo'.
        :param str additional_settings: Additional connection settings
        :param str authentication: Authentication type to use for connection
        :param bool encrypt_connection: Whether to encrypt the connection
        :param str password: Password credential.
        :param bool trust_server_certificate: Whether to trust the server certificate
        :param str user_name: User name
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "type", 'SqlConnectionInfo')
        if additional_settings is not None:
            pulumi.set(__self__, "additional_settings", additional_settings)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if encrypt_connection is None:
            encrypt_connection = True
        if encrypt_connection is not None:
            pulumi.set(__self__, "encrypt_connection", encrypt_connection)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if trust_server_certificate is None:
            trust_server_certificate = False
        if trust_server_certificate is not None:
            pulumi.set(__self__, "trust_server_certificate", trust_server_certificate)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> str:
        """
        Data source in the format Protocol:MachineName\\SQLServerInstanceName,PortNumber
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of connection info
        Expected value is 'SqlConnectionInfo'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="additionalSettings")
    def additional_settings(self) -> Optional[str]:
        """
        Additional connection settings
        """
        return pulumi.get(self, "additional_settings")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication type to use for connection
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="encryptConnection")
    def encrypt_connection(self) -> Optional[bool]:
        """
        Whether to encrypt the connection
        """
        return pulumi.get(self, "encrypt_connection")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="trustServerCertificate")
    def trust_server_certificate(self) -> Optional[bool]:
        """
        Whether to trust the server certificate
        """
        return pulumi.get(self, "trust_server_certificate")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        User name
        """
        return pulumi.get(self, "user_name")


