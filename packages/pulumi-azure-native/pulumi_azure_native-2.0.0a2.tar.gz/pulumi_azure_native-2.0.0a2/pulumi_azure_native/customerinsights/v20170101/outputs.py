# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ParticipantPropertyReferenceResponse',
    'RelationshipLinkFieldMappingResponse',
    'TypePropertiesMappingResponse',
]

@pulumi.output_type
class ParticipantPropertyReferenceResponse(dict):
    """
    The participant property reference.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactionPropertyName":
            suggest = "interaction_property_name"
        elif key == "profilePropertyName":
            suggest = "profile_property_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParticipantPropertyReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParticipantPropertyReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParticipantPropertyReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interaction_property_name: str,
                 profile_property_name: str):
        """
        The participant property reference.
        :param str interaction_property_name: The interaction property that maps to the profile property.
        :param str profile_property_name: The profile property that maps to the interaction property.
        """
        pulumi.set(__self__, "interaction_property_name", interaction_property_name)
        pulumi.set(__self__, "profile_property_name", profile_property_name)

    @property
    @pulumi.getter(name="interactionPropertyName")
    def interaction_property_name(self) -> str:
        """
        The interaction property that maps to the profile property.
        """
        return pulumi.get(self, "interaction_property_name")

    @property
    @pulumi.getter(name="profilePropertyName")
    def profile_property_name(self) -> str:
        """
        The profile property that maps to the interaction property.
        """
        return pulumi.get(self, "profile_property_name")


@pulumi.output_type
class RelationshipLinkFieldMappingResponse(dict):
    """
    The fields mapping for Relationships.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactionFieldName":
            suggest = "interaction_field_name"
        elif key == "relationshipFieldName":
            suggest = "relationship_field_name"
        elif key == "linkType":
            suggest = "link_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RelationshipLinkFieldMappingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RelationshipLinkFieldMappingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RelationshipLinkFieldMappingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interaction_field_name: str,
                 relationship_field_name: str,
                 link_type: Optional[str] = None):
        """
        The fields mapping for Relationships.
        :param str interaction_field_name: The field name on the Interaction Type.
        :param str relationship_field_name: The field name on the Relationship metadata.
        :param str link_type: Link type.
        """
        pulumi.set(__self__, "interaction_field_name", interaction_field_name)
        pulumi.set(__self__, "relationship_field_name", relationship_field_name)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)

    @property
    @pulumi.getter(name="interactionFieldName")
    def interaction_field_name(self) -> str:
        """
        The field name on the Interaction Type.
        """
        return pulumi.get(self, "interaction_field_name")

    @property
    @pulumi.getter(name="relationshipFieldName")
    def relationship_field_name(self) -> str:
        """
        The field name on the Relationship metadata.
        """
        return pulumi.get(self, "relationship_field_name")

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[str]:
        """
        Link type.
        """
        return pulumi.get(self, "link_type")


@pulumi.output_type
class TypePropertiesMappingResponse(dict):
    """
    Metadata for a Link's property mapping.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactionTypePropertyName":
            suggest = "interaction_type_property_name"
        elif key == "profileTypePropertyName":
            suggest = "profile_type_property_name"
        elif key == "isProfileTypeId":
            suggest = "is_profile_type_id"
        elif key == "linkType":
            suggest = "link_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TypePropertiesMappingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TypePropertiesMappingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TypePropertiesMappingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interaction_type_property_name: str,
                 profile_type_property_name: str,
                 is_profile_type_id: Optional[bool] = None,
                 link_type: Optional[str] = None):
        """
        Metadata for a Link's property mapping.
        :param str interaction_type_property_name:  Property name on the source Interaction Type.
        :param str profile_type_property_name: Property name on the target Profile Type.
        :param bool is_profile_type_id: Flag to indicate whether the Profile Type property is an id on the Profile Type.
        :param str link_type: Link type.
        """
        pulumi.set(__self__, "interaction_type_property_name", interaction_type_property_name)
        pulumi.set(__self__, "profile_type_property_name", profile_type_property_name)
        if is_profile_type_id is not None:
            pulumi.set(__self__, "is_profile_type_id", is_profile_type_id)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)

    @property
    @pulumi.getter(name="interactionTypePropertyName")
    def interaction_type_property_name(self) -> str:
        """
         Property name on the source Interaction Type.
        """
        return pulumi.get(self, "interaction_type_property_name")

    @property
    @pulumi.getter(name="profileTypePropertyName")
    def profile_type_property_name(self) -> str:
        """
        Property name on the target Profile Type.
        """
        return pulumi.get(self, "profile_type_property_name")

    @property
    @pulumi.getter(name="isProfileTypeId")
    def is_profile_type_id(self) -> Optional[bool]:
        """
        Flag to indicate whether the Profile Type property is an id on the Profile Type.
        """
        return pulumi.get(self, "is_profile_type_id")

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[str]:
        """
        Link type.
        """
        return pulumi.get(self, "link_type")


