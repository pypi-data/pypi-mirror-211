# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ParticipantPropertyReferenceArgs',
    'RelationshipLinkFieldMappingArgs',
    'TypePropertiesMappingArgs',
]

@pulumi.input_type
class ParticipantPropertyReferenceArgs:
    def __init__(__self__, *,
                 interaction_property_name: pulumi.Input[str],
                 profile_property_name: pulumi.Input[str]):
        """
        The participant property reference.
        :param pulumi.Input[str] interaction_property_name: The interaction property that maps to the profile property.
        :param pulumi.Input[str] profile_property_name: The profile property that maps to the interaction property.
        """
        pulumi.set(__self__, "interaction_property_name", interaction_property_name)
        pulumi.set(__self__, "profile_property_name", profile_property_name)

    @property
    @pulumi.getter(name="interactionPropertyName")
    def interaction_property_name(self) -> pulumi.Input[str]:
        """
        The interaction property that maps to the profile property.
        """
        return pulumi.get(self, "interaction_property_name")

    @interaction_property_name.setter
    def interaction_property_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "interaction_property_name", value)

    @property
    @pulumi.getter(name="profilePropertyName")
    def profile_property_name(self) -> pulumi.Input[str]:
        """
        The profile property that maps to the interaction property.
        """
        return pulumi.get(self, "profile_property_name")

    @profile_property_name.setter
    def profile_property_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_property_name", value)


@pulumi.input_type
class RelationshipLinkFieldMappingArgs:
    def __init__(__self__, *,
                 interaction_field_name: pulumi.Input[str],
                 relationship_field_name: pulumi.Input[str],
                 link_type: Optional[pulumi.Input['LinkTypes']] = None):
        """
        The fields mapping for Relationships.
        :param pulumi.Input[str] interaction_field_name: The field name on the Interaction Type.
        :param pulumi.Input[str] relationship_field_name: The field name on the Relationship metadata.
        :param pulumi.Input['LinkTypes'] link_type: Link type.
        """
        pulumi.set(__self__, "interaction_field_name", interaction_field_name)
        pulumi.set(__self__, "relationship_field_name", relationship_field_name)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)

    @property
    @pulumi.getter(name="interactionFieldName")
    def interaction_field_name(self) -> pulumi.Input[str]:
        """
        The field name on the Interaction Type.
        """
        return pulumi.get(self, "interaction_field_name")

    @interaction_field_name.setter
    def interaction_field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "interaction_field_name", value)

    @property
    @pulumi.getter(name="relationshipFieldName")
    def relationship_field_name(self) -> pulumi.Input[str]:
        """
        The field name on the Relationship metadata.
        """
        return pulumi.get(self, "relationship_field_name")

    @relationship_field_name.setter
    def relationship_field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "relationship_field_name", value)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[pulumi.Input['LinkTypes']]:
        """
        Link type.
        """
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: Optional[pulumi.Input['LinkTypes']]):
        pulumi.set(self, "link_type", value)


@pulumi.input_type
class TypePropertiesMappingArgs:
    def __init__(__self__, *,
                 interaction_type_property_name: pulumi.Input[str],
                 profile_type_property_name: pulumi.Input[str],
                 is_profile_type_id: Optional[pulumi.Input[bool]] = None,
                 link_type: Optional[pulumi.Input['LinkTypes']] = None):
        """
        Metadata for a Link's property mapping.
        :param pulumi.Input[str] interaction_type_property_name:  Property name on the source Interaction Type.
        :param pulumi.Input[str] profile_type_property_name: Property name on the target Profile Type.
        :param pulumi.Input[bool] is_profile_type_id: Flag to indicate whether the Profile Type property is an id on the Profile Type.
        :param pulumi.Input['LinkTypes'] link_type: Link type.
        """
        pulumi.set(__self__, "interaction_type_property_name", interaction_type_property_name)
        pulumi.set(__self__, "profile_type_property_name", profile_type_property_name)
        if is_profile_type_id is not None:
            pulumi.set(__self__, "is_profile_type_id", is_profile_type_id)
        if link_type is not None:
            pulumi.set(__self__, "link_type", link_type)

    @property
    @pulumi.getter(name="interactionTypePropertyName")
    def interaction_type_property_name(self) -> pulumi.Input[str]:
        """
         Property name on the source Interaction Type.
        """
        return pulumi.get(self, "interaction_type_property_name")

    @interaction_type_property_name.setter
    def interaction_type_property_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "interaction_type_property_name", value)

    @property
    @pulumi.getter(name="profileTypePropertyName")
    def profile_type_property_name(self) -> pulumi.Input[str]:
        """
        Property name on the target Profile Type.
        """
        return pulumi.get(self, "profile_type_property_name")

    @profile_type_property_name.setter
    def profile_type_property_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_type_property_name", value)

    @property
    @pulumi.getter(name="isProfileTypeId")
    def is_profile_type_id(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether the Profile Type property is an id on the Profile Type.
        """
        return pulumi.get(self, "is_profile_type_id")

    @is_profile_type_id.setter
    def is_profile_type_id(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_profile_type_id", value)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> Optional[pulumi.Input['LinkTypes']]:
        """
        Link type.
        """
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: Optional[pulumi.Input['LinkTypes']]):
        pulumi.set(self, "link_type", value)


