# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'MonitoredResourceResponse',
    'VMResourcesResponse',
]

@pulumi.output_type
class MonitoredResourceResponse(dict):
    """
    The properties of a resource currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 reason_for_logs_status: Optional[str] = None,
                 sending_logs: Optional[str] = None):
        """
        The properties of a resource currently being monitored by the Elastic monitor resource.
        :param str id: The ARM id of the resource.
        :param str reason_for_logs_status: Reason for why the resource is sending logs (or why it is not sending).
        :param str sending_logs: Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if reason_for_logs_status is not None:
            pulumi.set(__self__, "reason_for_logs_status", reason_for_logs_status)
        if sending_logs is not None:
            pulumi.set(__self__, "sending_logs", sending_logs)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARM id of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="reasonForLogsStatus")
    def reason_for_logs_status(self) -> Optional[str]:
        """
        Reason for why the resource is sending logs (or why it is not sending).
        """
        return pulumi.get(self, "reason_for_logs_status")

    @property
    @pulumi.getter(name="sendingLogs")
    def sending_logs(self) -> Optional[str]:
        """
        Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        return pulumi.get(self, "sending_logs")


@pulumi.output_type
class VMResourcesResponse(dict):
    """
    The vm resource properties that is currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 vm_resource_id: Optional[str] = None):
        """
        The vm resource properties that is currently being monitored by the Elastic monitor resource.
        :param str vm_resource_id: The ARM id of the VM resource.
        """
        if vm_resource_id is not None:
            pulumi.set(__self__, "vm_resource_id", vm_resource_id)

    @property
    @pulumi.getter(name="vmResourceId")
    def vm_resource_id(self) -> Optional[str]:
        """
        The ARM id of the VM resource.
        """
        return pulumi.get(self, "vm_resource_id")


