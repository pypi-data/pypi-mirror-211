# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ElasticTrafficFilterResponse',
    'ElasticTrafficFilterRuleResponse',
    'MonitoredResourceResponse',
    'VMResourcesResponse',
]

@pulumi.output_type
class ElasticTrafficFilterResponse(dict):
    """
    Elastic traffic filter object
    """
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 include_by_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 rules: Optional[Sequence['outputs.ElasticTrafficFilterRuleResponse']] = None,
                 type: Optional[str] = None):
        """
        Elastic traffic filter object
        :param str description: Description of the elastic filter
        :param str id: Id of the elastic filter
        :param bool include_by_default: IncludeByDefault for the elastic filter
        :param str name: Name of the elastic filter
        :param str region: Region of the elastic filter
        :param Sequence['ElasticTrafficFilterRuleResponse'] rules: Rules in the elastic filter
        :param str type: Type of the elastic filter
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_by_default is not None:
            pulumi.set(__self__, "include_by_default", include_by_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the elastic filter
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the elastic filter
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeByDefault")
    def include_by_default(self) -> Optional[bool]:
        """
        IncludeByDefault for the elastic filter
        """
        return pulumi.get(self, "include_by_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the elastic filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region of the elastic filter
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.ElasticTrafficFilterRuleResponse']]:
        """
        Rules in the elastic filter
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the elastic filter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ElasticTrafficFilterRuleResponse(dict):
    """
    Elastic traffic filter rule object
    """
    def __init__(__self__, *,
                 azure_endpoint_guid: Optional[str] = None,
                 azure_endpoint_name: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 source: Optional[str] = None):
        """
        Elastic traffic filter rule object
        :param str azure_endpoint_guid: Guid of Private Endpoint in the elastic filter rule
        :param str azure_endpoint_name: Name of the Private Endpoint in the elastic filter rule
        :param str description: Description of the elastic filter rule
        :param str id: Id of the elastic filter rule
        :param str source: IP of the elastic filter rule
        """
        if azure_endpoint_guid is not None:
            pulumi.set(__self__, "azure_endpoint_guid", azure_endpoint_guid)
        if azure_endpoint_name is not None:
            pulumi.set(__self__, "azure_endpoint_name", azure_endpoint_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="azureEndpointGuid")
    def azure_endpoint_guid(self) -> Optional[str]:
        """
        Guid of Private Endpoint in the elastic filter rule
        """
        return pulumi.get(self, "azure_endpoint_guid")

    @property
    @pulumi.getter(name="azureEndpointName")
    def azure_endpoint_name(self) -> Optional[str]:
        """
        Name of the Private Endpoint in the elastic filter rule
        """
        return pulumi.get(self, "azure_endpoint_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the elastic filter rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the elastic filter rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        IP of the elastic filter rule
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class MonitoredResourceResponse(dict):
    """
    The properties of a resource currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 reason_for_logs_status: Optional[str] = None,
                 sending_logs: Optional[str] = None):
        """
        The properties of a resource currently being monitored by the Elastic monitor resource.
        :param str id: The ARM id of the resource.
        :param str reason_for_logs_status: Reason for why the resource is sending logs (or why it is not sending).
        :param str sending_logs: Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if reason_for_logs_status is not None:
            pulumi.set(__self__, "reason_for_logs_status", reason_for_logs_status)
        if sending_logs is not None:
            pulumi.set(__self__, "sending_logs", sending_logs)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARM id of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="reasonForLogsStatus")
    def reason_for_logs_status(self) -> Optional[str]:
        """
        Reason for why the resource is sending logs (or why it is not sending).
        """
        return pulumi.get(self, "reason_for_logs_status")

    @property
    @pulumi.getter(name="sendingLogs")
    def sending_logs(self) -> Optional[str]:
        """
        Flag indicating the status of the resource for sending logs operation to Elastic.
        """
        return pulumi.get(self, "sending_logs")


@pulumi.output_type
class VMResourcesResponse(dict):
    """
    The vm resource properties that is currently being monitored by the Elastic monitor resource.
    """
    def __init__(__self__, *,
                 vm_resource_id: Optional[str] = None):
        """
        The vm resource properties that is currently being monitored by the Elastic monitor resource.
        :param str vm_resource_id: The ARM id of the VM resource.
        """
        if vm_resource_id is not None:
            pulumi.set(__self__, "vm_resource_id", vm_resource_id)

    @property
    @pulumi.getter(name="vmResourceId")
    def vm_resource_id(self) -> Optional[str]:
        """
        The ARM id of the VM resource.
        """
        return pulumi.get(self, "vm_resource_id")


