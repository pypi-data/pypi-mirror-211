# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_metrics.ipynb.

# %% auto 0
__all__ = ['ks_score']

# %% ../nbs/01_metrics.ipynb 3
import numpy as np
import pandas as pd
from typing import Union

def ks_score(
        y_true: Union[pd.Series, np.ndarray], # The true binary labels, a.k.a target
        y_prob: Union[pd.Series, np.ndarray]  # The predicted probabilities, a.k.a scores
) -> float:
    """Calculate the KS score."""
    df2 = pd.DataFrame({"bad": y_true, "score": y_prob})
    df2["good"] = 1 - df2.bad
    df2["bucket"] = pd.qcut(df2["score"], 10, duplicates="drop")
    grouped = df2.groupby("bucket")
    agg1 = (
        pd.DataFrame(grouped.min()["score"])
        .rename(columns={"score": "min_scr"})
        .copy()
    )
    agg1["max_scr"] = grouped.max()["score"]
    agg1["bads"] = grouped.sum().bad
    agg1["goods"] = grouped.sum().good
    agg1["total"] = agg1.bads + agg1.goods
    agg2 = (agg1.sort_values(by="min_scr")).reset_index(drop=True)
    agg2["odds"] = (agg2.goods / agg2.bads).apply("{0:.2f}".format)
    agg2["bad_rate"] = (agg2.bads / agg2.total).apply("{0:.2%}".format)
    agg2["ks"] = (
        np.round(
            (
                (agg2.bads / df2.bad.sum()).cumsum()
                - (agg2.goods / df2.good.sum()).cumsum()  # noqa: W503
            ),
            4,
        )  # noqa: W503
        * 100  # noqa: W503
    )
    flag = lambda x: "<----" if x == agg2.ks.max() else ""  # noqa: E731
    agg2["max_ks"] = agg2.ks.apply(flag)
    return max(abs(agg2.ks))
