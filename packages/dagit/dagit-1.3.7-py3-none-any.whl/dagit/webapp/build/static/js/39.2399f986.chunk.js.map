{"version":3,"file":"static/js/39.2399f986.chunk.js","mappings":"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","sources":["../../core/src/instance/InstanceConfig.tsx","../../core/src/nav/InstanceWarningIcon.tsx","../../core/src/nav/WorkspaceStatus.tsx","../../core/src/instance/InstanceTabs.tsx","../../core/src/instance/useCanSeeConfig.tsx","../../core/src/ui/TabLink.tsx"],"sourcesContent":["import 'codemirror/addon/search/searchcursor';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  PageHeader,\n  Spinner,\n  Code,\n  Heading,\n  StyledReadOnlyCodeMirror,\n  Subheading,\n} from '@dagster-io/ui';\nimport * as codemirror from 'codemirror';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {InstanceConfigQuery, InstanceConfigQueryVariables} from './types/InstanceConfig.types';\n\nconst InstanceConfigStyle = createGlobalStyle`\n  .react-codemirror2 .CodeMirror.cm-s-instance-config {\n    box-shadow: 0 1px 0 ${Colors.KeylineGray};\n    height: 100%;\n  }\n\n  .react-codemirror2 .CodeMirror.cm-s-instance-config {\n    .config-highlight {\n      background-color: ${Colors.Yellow200};\n    }\n`;\n\nexport const InstanceConfig = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Configuration');\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<InstanceConfigQuery, InstanceConfigQueryVariables>(\n    INSTANCE_CONFIG_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const config = data?.instance.info;\n\n  const onEditorDidMount = (editor: codemirror.Editor) => {\n    const documentHash = document.location.hash;\n    if (documentHash) {\n      const target = new RegExp(`^${documentHash.slice(1)}:`);\n      const cursor = editor.getSearchCursor(target);\n      const found = cursor.findNext();\n      if (found) {\n        editor.markText(cursor.from(), cursor.to(), {className: 'config-highlight'});\n        editor.scrollIntoView(cursor.from());\n      }\n    }\n  };\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <InstanceConfigStyle />\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"config\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>\n          Dagster version: <Code style={{fontSize: '16px'}}>{data.version}</Code>\n        </Subheading>\n      </Box>\n      <StyledReadOnlyCodeMirror\n        editorDidMount={onEditorDidMount}\n        value={config || ''}\n        options={{lineNumbers: true, mode: 'yaml'}}\n        theme={['instance-config']}\n      />\n    </>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConfig;\n\nexport const INSTANCE_CONFIG_QUERY = gql`\n  query InstanceConfigQuery {\n    version\n    instance {\n      id\n      info\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, disabled, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={disabled ? '#' : to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n"],"names":["InstanceConfigStyle","createGlobalStyle","Colors","InstanceConfig","React","useTrackPageView","useDocumentTitle","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONFIG_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","config","instance","info","_jsxs","_Fragment","children","_jsx","PageHeader","title","Heading","tabs","InstanceTabs","tab","Box","padding","vertical","horizontal","border","side","width","color","Subheading","Code","style","fontSize","version","StyledReadOnlyCodeMirror","editorDidMount","editor","documentHash","document","location","hash","target","RegExp","concat","slice","cursor","getSearchCursor","findNext","markText","from","to","className","scrollIntoView","value","options","lineNumbers","mode","theme","Spinner","purpose","gql","_templateObject","_taggedTemplateLiteral","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","content","position","modifiers","offset","enabled","Icon","name","WorkspaceStatus","_ref","placeholder","codeLocations","type","Tooltip","placement","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","icon","bottom","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo","styled","disabled","rest","_objectWithoutProperties","_excluded","containerProps","getTabA11yProps","getTabContent","titleText","undefined","Link","_objectSpread","withConfig","displayName","componentId","tabCSS"],"sourceRoot":""}