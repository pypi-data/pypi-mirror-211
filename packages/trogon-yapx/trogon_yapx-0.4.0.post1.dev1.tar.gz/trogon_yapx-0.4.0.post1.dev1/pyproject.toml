[tool.poetry]
name = "trogon-yapx"
version = "0.4.0.post1.dev1"
description = "Fork of Trogon for more compatibility"
authors = ["Donald Mellenbruch <hello@Fresh2.dev>"]
readme = "README.md"
packages = [{include = "trogon"}]
license = "MIT"
homepage = "https://github.com/fresh2dev/trogon-yapx"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Other Audience",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Documentation",
]

[tool.poetry.dependencies]
python = "^3.7"
textual = {version = ">=0.26.0"}
#textual = {extras = ["dev"], path = "../textual", develop = true}
click = {version = ">=8.0.0", optional=true}
typer = {version = ">=0.9.0", optional = true}
yapx = {version = ">=0.1.0", optional = true}

[tool.poetry.extras]
click = ["click"]
typer = ["typer"]
yapx = ["yapx"]

[tool.poetry.group.dev.dependencies]
mypy = "^1.2.0"
black = "^23.3.0"
pytest = "^7.3.1"
textual = {extras = ["dev"], version = ">=0.26.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

###

[tool.pytest.ini_options]
minversion = 7.0
testpaths = ["tests"]

[tool.coverage.run]
source = ["trogon"]

[tool.pylint.MASTER]
ignore-paths = "^(?!trogon|tests).*$"
load-plugins = ["pylint_pytest"]
extension-pkg-whitelist = ["pydantic"]
[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "fixme",
    "invalid-name",
    "unnecessary-pass",
    "unnecessary-ellipsis",
    "too-few-public-methods",
    "import-outside-toplevel",
    "missing-module-docstring",
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/trogon"
files = "trogon/**/*.py"
plugins = ["pydantic.mypy"]
namespace_packages = true
explicit_package_bases = true
strict = true
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.black]
line-length = 88
include = 'trogon\/.*\.pyi?$|tests\/.*\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["trogon", "tests"]
float_to_top = true
honor_noqa = true
quiet = true


[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    # "D",  # pydocstyle
    "F",  # pyflakes
    "UP", # pyupgrade
    # "I",  # isort (missing-required-import)
    "C4",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "DTZ",  # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    # "ANN",# flake8-annotations
    "A",# flake8-builtins
    "COM",# flake8-commas
    "PT",# flake8-pytest-style
    "Q",# flake8-quotes
    "RET",# flake8-return
    "SIM",# flake8-simplify
    "ARG",# flake8-unused-arguments
    "PTH",# flake8-use-pathlib
    "ERA",# eradicate
    "PLW",# pylint-specific warnings
    "PLE",# pylint-specific errors
    "PLR",# pylint-specific refactors
    "PLC",# pylint-specific conventions
    # "RUF",# ruff-specific
    "TRY",# tryceratops
]
ignore = [
    # "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

# Avoid trying to fix flake8-bugbear (`B`) violations.
# Allow autofix for all enabled rules (when `--fix`) is provided.
# autofix F401=unused-imports
fixable = ["W", "E", "COM", "F401"]
unfixable = []

respect-gitignore = true

# Same as Black.
line-length = 88

target-version = "py37"

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py3{7,8,9,10,11}
skip_missing_interpreters = false
toxworkdir = /tmp/.tox
minversion = 4.0
[testenv]
recreate = true
extras = tests
commands =
    python -m pytest {posargs}
    python -m pylint --disable=C,R '**/*.py'
"""
