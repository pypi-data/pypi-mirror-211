import typing

import kubernetes.client

class ExtensionsV1beta1Api:
    def __init__(self, api_client: typing.Optional[kubernetes.client.ApiClient] = ...) -> None:
        ...
    def get_api_resources(self) -> kubernetes.client.V1APIResourceList:
        ...
    def list_daemon_set_for_all_namespaces(self, *, allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., pretty: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1DaemonSetList:
        ...
    def list_deployment_for_all_namespaces(self, *, allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., pretty: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1DeploymentList:
        ...
    def list_ingress_for_all_namespaces(self, *, allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., pretty: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1IngressList:
        ...
    def list_namespaced_daemon_set(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1DaemonSetList:
        ...
    def create_namespaced_daemon_set(self, namespace: str, body: kubernetes.client.V1beta1DaemonSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def delete_collection_namespaced_daemon_set(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_daemon_set(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def replace_namespaced_daemon_set(self, name: str, namespace: str, body: kubernetes.client.V1beta1DaemonSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def delete_namespaced_daemon_set(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_namespaced_daemon_set(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def read_namespaced_daemon_set_status(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def replace_namespaced_daemon_set_status(self, name: str, namespace: str, body: kubernetes.client.V1beta1DaemonSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def patch_namespaced_daemon_set_status(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1DaemonSet:
        ...
    def list_namespaced_deployment(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1DeploymentList:
        ...
    def create_namespaced_deployment(self, namespace: str, body: kubernetes.client.ExtensionsV1beta1Deployment, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def delete_collection_namespaced_deployment(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_deployment(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def replace_namespaced_deployment(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Deployment, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def delete_namespaced_deployment(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_namespaced_deployment(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def create_namespaced_deployment_rollback(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1DeploymentRollback, *, dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., pretty: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_deployment_scale(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def replace_namespaced_deployment_scale(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Scale, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def patch_namespaced_deployment_scale(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def read_namespaced_deployment_status(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def replace_namespaced_deployment_status(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Deployment, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def patch_namespaced_deployment_status(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Deployment:
        ...
    def list_namespaced_ingress(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1IngressList:
        ...
    def create_namespaced_ingress(self, namespace: str, body: kubernetes.client.ExtensionsV1beta1Ingress, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def delete_collection_namespaced_ingress(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_ingress(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def replace_namespaced_ingress(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Ingress, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def delete_namespaced_ingress(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_namespaced_ingress(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def read_namespaced_ingress_status(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def replace_namespaced_ingress_status(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Ingress, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def patch_namespaced_ingress_status(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Ingress:
        ...
    def list_namespaced_network_policy(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1NetworkPolicyList:
        ...
    def create_namespaced_network_policy(self, namespace: str, body: kubernetes.client.V1beta1NetworkPolicy, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1NetworkPolicy:
        ...
    def delete_collection_namespaced_network_policy(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_network_policy(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1NetworkPolicy:
        ...
    def replace_namespaced_network_policy(self, name: str, namespace: str, body: kubernetes.client.V1beta1NetworkPolicy, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1NetworkPolicy:
        ...
    def delete_namespaced_network_policy(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_namespaced_network_policy(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1NetworkPolicy:
        ...
    def list_namespaced_replica_set(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1ReplicaSetList:
        ...
    def create_namespaced_replica_set(self, namespace: str, body: kubernetes.client.V1beta1ReplicaSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def delete_collection_namespaced_replica_set(self, namespace: str, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_namespaced_replica_set(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def replace_namespaced_replica_set(self, name: str, namespace: str, body: kubernetes.client.V1beta1ReplicaSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def delete_namespaced_replica_set(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_namespaced_replica_set(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def read_namespaced_replica_set_scale(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def replace_namespaced_replica_set_scale(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Scale, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def patch_namespaced_replica_set_scale(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def read_namespaced_replica_set_status(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def replace_namespaced_replica_set_status(self, name: str, namespace: str, body: kubernetes.client.V1beta1ReplicaSet, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def patch_namespaced_replica_set_status(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1ReplicaSet:
        ...
    def read_namespaced_replication_controller_dummy_scale(self, name: str, namespace: str, *, pretty: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def replace_namespaced_replication_controller_dummy_scale(self, name: str, namespace: str, body: kubernetes.client.ExtensionsV1beta1Scale, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def patch_namespaced_replication_controller_dummy_scale(self, name: str, namespace: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1Scale:
        ...
    def list_network_policy_for_all_namespaces(self, *, allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., pretty: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1NetworkPolicyList:
        ...
    def list_pod_security_policy(self, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1PodSecurityPolicyList:
        ...
    def create_pod_security_policy(self, body: kubernetes.client.ExtensionsV1beta1PodSecurityPolicy, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1PodSecurityPolicy:
        ...
    def delete_collection_pod_security_policy(self, *, pretty: typing.Optional[str] = ..., allow_watch_bookmarks: typing.Optional[bool] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., _continue: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1Status:
        ...
    def read_pod_security_policy(self, name: str, *, pretty: typing.Optional[str] = ..., exact: typing.Optional[bool] = ..., export: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1PodSecurityPolicy:
        ...
    def replace_pod_security_policy(self, name: str, body: kubernetes.client.ExtensionsV1beta1PodSecurityPolicy, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ...) -> kubernetes.client.ExtensionsV1beta1PodSecurityPolicy:
        ...
    def delete_pod_security_policy(self, name: str, *, pretty: typing.Optional[str] = ..., body: typing.Optional[kubernetes.client.V1DeleteOptions] = ..., dry_run: typing.Optional[str] = ..., grace_period_seconds: typing.Optional[int] = ..., orphan_dependents: typing.Optional[bool] = ..., propagation_policy: typing.Optional[str] = ...) -> kubernetes.client.V1Status:
        ...
    def patch_pod_security_policy(self, name: str, body: typing.Any, *, pretty: typing.Optional[str] = ..., dry_run: typing.Optional[str] = ..., field_manager: typing.Optional[str] = ..., force: typing.Optional[bool] = ...) -> kubernetes.client.ExtensionsV1beta1PodSecurityPolicy:
        ...
    def list_replica_set_for_all_namespaces(self, *, allow_watch_bookmarks: typing.Optional[bool] = ..., _continue: typing.Optional[str] = ..., field_selector: typing.Optional[str] = ..., label_selector: typing.Optional[str] = ..., limit: typing.Optional[int] = ..., pretty: typing.Optional[str] = ..., resource_version: typing.Optional[str] = ..., timeout_seconds: typing.Optional[int] = ..., watch: typing.Optional[bool] = ...) -> kubernetes.client.V1beta1ReplicaSetList:
        ...
