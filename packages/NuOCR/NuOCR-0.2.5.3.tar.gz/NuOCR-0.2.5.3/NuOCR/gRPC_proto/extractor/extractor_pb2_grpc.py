# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..extractor import extractor_pb2 as extractor_dot_extractor__pb2


class ExtractorControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FormRecognition = channel.unary_unary(
                '/extractor_APIs_proto.ExtractorController/FormRecognition',
                request_serializer=extractor_dot_extractor__pb2.FormRequest.SerializeToString,
                response_deserializer=extractor_dot_extractor__pb2.Response.FromString,
                )
        self.DocAI = channel.unary_unary(
                '/extractor_APIs_proto.ExtractorController/DocAI',
                request_serializer=extractor_dot_extractor__pb2.DocRequest.SerializeToString,
                response_deserializer=extractor_dot_extractor__pb2.Response.FromString,
                )
        self.VinNumber = channel.unary_unary(
                '/extractor_APIs_proto.ExtractorController/VinNumber',
                request_serializer=extractor_dot_extractor__pb2.VinRequest.SerializeToString,
                response_deserializer=extractor_dot_extractor__pb2.Response.FromString,
                )
        self.Classifier = channel.unary_unary(
                '/extractor_APIs_proto.ExtractorController/Classifier',
                request_serializer=extractor_dot_extractor__pb2.ClassifierRequest.SerializeToString,
                response_deserializer=extractor_dot_extractor__pb2.Response.FromString,
                )
        self.Extractor = channel.unary_unary(
                '/extractor_APIs_proto.ExtractorController/Extractor',
                request_serializer=extractor_dot_extractor__pb2.Request.SerializeToString,
                response_deserializer=extractor_dot_extractor__pb2.Response.FromString,
                )


class ExtractorControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FormRecognition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DocAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VinNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Classifier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Extractor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExtractorControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FormRecognition': grpc.unary_unary_rpc_method_handler(
                    servicer.FormRecognition,
                    request_deserializer=extractor_dot_extractor__pb2.FormRequest.FromString,
                    response_serializer=extractor_dot_extractor__pb2.Response.SerializeToString,
            ),
            'DocAI': grpc.unary_unary_rpc_method_handler(
                    servicer.DocAI,
                    request_deserializer=extractor_dot_extractor__pb2.DocRequest.FromString,
                    response_serializer=extractor_dot_extractor__pb2.Response.SerializeToString,
            ),
            'VinNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.VinNumber,
                    request_deserializer=extractor_dot_extractor__pb2.VinRequest.FromString,
                    response_serializer=extractor_dot_extractor__pb2.Response.SerializeToString,
            ),
            'Classifier': grpc.unary_unary_rpc_method_handler(
                    servicer.Classifier,
                    request_deserializer=extractor_dot_extractor__pb2.ClassifierRequest.FromString,
                    response_serializer=extractor_dot_extractor__pb2.Response.SerializeToString,
            ),
            'Extractor': grpc.unary_unary_rpc_method_handler(
                    servicer.Extractor,
                    request_deserializer=extractor_dot_extractor__pb2.Request.FromString,
                    response_serializer=extractor_dot_extractor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'extractor_APIs_proto.ExtractorController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExtractorController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FormRecognition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/extractor_APIs_proto.ExtractorController/FormRecognition',
            extractor_dot_extractor__pb2.FormRequest.SerializeToString,
            extractor_dot_extractor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DocAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/extractor_APIs_proto.ExtractorController/DocAI',
            extractor_dot_extractor__pb2.DocRequest.SerializeToString,
            extractor_dot_extractor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VinNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/extractor_APIs_proto.ExtractorController/VinNumber',
            extractor_dot_extractor__pb2.VinRequest.SerializeToString,
            extractor_dot_extractor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Classifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/extractor_APIs_proto.ExtractorController/Classifier',
            extractor_dot_extractor__pb2.ClassifierRequest.SerializeToString,
            extractor_dot_extractor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Extractor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/extractor_APIs_proto.ExtractorController/Extractor',
            extractor_dot_extractor__pb2.Request.SerializeToString,
            extractor_dot_extractor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
