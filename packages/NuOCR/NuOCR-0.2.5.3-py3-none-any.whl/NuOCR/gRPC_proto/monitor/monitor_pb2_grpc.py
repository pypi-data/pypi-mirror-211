# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..monitor import monitor_pb2 as monitor_dot_monitor__pb2


class AnalysisControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.usageAnalyse = channel.unary_stream(
                '/analysis_APIs_proto.AnalysisController/usageAnalyse',
                request_serializer=monitor_dot_monitor__pb2.Request.SerializeToString,
                response_deserializer=monitor_dot_monitor__pb2.Response.FromString,
                )
        self.extractorAnalyse = channel.unary_stream(
                '/analysis_APIs_proto.AnalysisController/extractorAnalyse',
                request_serializer=monitor_dot_monitor__pb2.Request.SerializeToString,
                response_deserializer=monitor_dot_monitor__pb2.Response.FromString,
                )
        self.adaptorAnalyse = channel.unary_stream(
                '/analysis_APIs_proto.AnalysisController/adaptorAnalyse',
                request_serializer=monitor_dot_monitor__pb2.Request.SerializeToString,
                response_deserializer=monitor_dot_monitor__pb2.Response.FromString,
                )
        self.templatedFlowAnalyse = channel.unary_stream(
                '/analysis_APIs_proto.AnalysisController/templatedFlowAnalyse',
                request_serializer=monitor_dot_monitor__pb2.Request.SerializeToString,
                response_deserializer=monitor_dot_monitor__pb2.Response.FromString,
                )
        self.textProcessorAnalyse = channel.unary_stream(
                '/analysis_APIs_proto.AnalysisController/textProcessorAnalyse',
                request_serializer=monitor_dot_monitor__pb2.Request.SerializeToString,
                response_deserializer=monitor_dot_monitor__pb2.Response.FromString,
                )


class AnalysisControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def usageAnalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def extractorAnalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def adaptorAnalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def templatedFlowAnalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def textProcessorAnalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalysisControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'usageAnalyse': grpc.unary_stream_rpc_method_handler(
                    servicer.usageAnalyse,
                    request_deserializer=monitor_dot_monitor__pb2.Request.FromString,
                    response_serializer=monitor_dot_monitor__pb2.Response.SerializeToString,
            ),
            'extractorAnalyse': grpc.unary_stream_rpc_method_handler(
                    servicer.extractorAnalyse,
                    request_deserializer=monitor_dot_monitor__pb2.Request.FromString,
                    response_serializer=monitor_dot_monitor__pb2.Response.SerializeToString,
            ),
            'adaptorAnalyse': grpc.unary_stream_rpc_method_handler(
                    servicer.adaptorAnalyse,
                    request_deserializer=monitor_dot_monitor__pb2.Request.FromString,
                    response_serializer=monitor_dot_monitor__pb2.Response.SerializeToString,
            ),
            'templatedFlowAnalyse': grpc.unary_stream_rpc_method_handler(
                    servicer.templatedFlowAnalyse,
                    request_deserializer=monitor_dot_monitor__pb2.Request.FromString,
                    response_serializer=monitor_dot_monitor__pb2.Response.SerializeToString,
            ),
            'textProcessorAnalyse': grpc.unary_stream_rpc_method_handler(
                    servicer.textProcessorAnalyse,
                    request_deserializer=monitor_dot_monitor__pb2.Request.FromString,
                    response_serializer=monitor_dot_monitor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'analysis_APIs_proto.AnalysisController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalysisController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def usageAnalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis_APIs_proto.AnalysisController/usageAnalyse',
            monitor_dot_monitor__pb2.Request.SerializeToString,
            monitor_dot_monitor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def extractorAnalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis_APIs_proto.AnalysisController/extractorAnalyse',
            monitor_dot_monitor__pb2.Request.SerializeToString,
            monitor_dot_monitor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def adaptorAnalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis_APIs_proto.AnalysisController/adaptorAnalyse',
            monitor_dot_monitor__pb2.Request.SerializeToString,
            monitor_dot_monitor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def templatedFlowAnalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis_APIs_proto.AnalysisController/templatedFlowAnalyse',
            monitor_dot_monitor__pb2.Request.SerializeToString,
            monitor_dot_monitor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def textProcessorAnalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis_APIs_proto.AnalysisController/textProcessorAnalyse',
            monitor_dot_monitor__pb2.Request.SerializeToString,
            monitor_dot_monitor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
