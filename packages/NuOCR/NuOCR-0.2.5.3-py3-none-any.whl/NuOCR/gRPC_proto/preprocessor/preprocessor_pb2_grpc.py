# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..preprocessor import preprocessor_pb2 as preprocessor_dot_preprocessor__pb2


class PreProcessorControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PdftoImage = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/PdftoImage',
                request_serializer=preprocessor_dot_preprocessor__pb2.PdftoImageRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.ImagetoPdf = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/ImagetoPdf',
                request_serializer=preprocessor_dot_preprocessor__pb2.ImagetoPdfRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.CompressImage = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/CompressImage',
                request_serializer=preprocessor_dot_preprocessor__pb2.CompressImageRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.CropImage = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/CropImage',
                request_serializer=preprocessor_dot_preprocessor__pb2.CropImageRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.RotateImage = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/RotateImage',
                request_serializer=preprocessor_dot_preprocessor__pb2.RotateImageRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.CompressPdf = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/CompressPdf',
                request_serializer=preprocessor_dot_preprocessor__pb2.CompressPdfRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )
        self.ConvertRGBToGrey = channel.unary_stream(
                '/preprocessor_proto.PreProcessorController/ConvertRGBToGrey',
                request_serializer=preprocessor_dot_preprocessor__pb2.RGBToGreyRequest.SerializeToString,
                response_deserializer=preprocessor_dot_preprocessor__pb2.Response.FromString,
                )


class PreProcessorControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PdftoImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImagetoPdf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompressImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CropImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompressPdf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertRGBToGrey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PreProcessorControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PdftoImage': grpc.unary_stream_rpc_method_handler(
                    servicer.PdftoImage,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.PdftoImageRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'ImagetoPdf': grpc.unary_stream_rpc_method_handler(
                    servicer.ImagetoPdf,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.ImagetoPdfRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'CompressImage': grpc.unary_stream_rpc_method_handler(
                    servicer.CompressImage,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.CompressImageRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'CropImage': grpc.unary_stream_rpc_method_handler(
                    servicer.CropImage,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.CropImageRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'RotateImage': grpc.unary_stream_rpc_method_handler(
                    servicer.RotateImage,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.RotateImageRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'CompressPdf': grpc.unary_stream_rpc_method_handler(
                    servicer.CompressPdf,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.CompressPdfRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
            'ConvertRGBToGrey': grpc.unary_stream_rpc_method_handler(
                    servicer.ConvertRGBToGrey,
                    request_deserializer=preprocessor_dot_preprocessor__pb2.RGBToGreyRequest.FromString,
                    response_serializer=preprocessor_dot_preprocessor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'preprocessor_proto.PreProcessorController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PreProcessorController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PdftoImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/PdftoImage',
            preprocessor_dot_preprocessor__pb2.PdftoImageRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImagetoPdf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/ImagetoPdf',
            preprocessor_dot_preprocessor__pb2.ImagetoPdfRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompressImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/CompressImage',
            preprocessor_dot_preprocessor__pb2.CompressImageRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CropImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/CropImage',
            preprocessor_dot_preprocessor__pb2.CropImageRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RotateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/RotateImage',
            preprocessor_dot_preprocessor__pb2.RotateImageRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompressPdf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/CompressPdf',
            preprocessor_dot_preprocessor__pb2.CompressPdfRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertRGBToGrey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/preprocessor_proto.PreProcessorController/ConvertRGBToGrey',
            preprocessor_dot_preprocessor__pb2.RGBToGreyRequest.SerializeToString,
            preprocessor_dot_preprocessor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
