# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..multiformats import multiformats_pb2 as multiformats_dot_multiformats__pb2


class MultiFormatsControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JsonToCsv = channel.unary_stream(
                '/multiformats_APIs_proto.MultiFormatsController/JsonToCsv',
                request_serializer=multiformats_dot_multiformats__pb2.Request.SerializeToString,
                response_deserializer=multiformats_dot_multiformats__pb2.Response.FromString,
                )
        self.JsonToXml = channel.unary_stream(
                '/multiformats_APIs_proto.MultiFormatsController/JsonToXml',
                request_serializer=multiformats_dot_multiformats__pb2.Request.SerializeToString,
                response_deserializer=multiformats_dot_multiformats__pb2.Response.FromString,
                )
        self.JsonToBson = channel.unary_stream(
                '/multiformats_APIs_proto.MultiFormatsController/JsonToBson',
                request_serializer=multiformats_dot_multiformats__pb2.Request.SerializeToString,
                response_deserializer=multiformats_dot_multiformats__pb2.Response.FromString,
                )
        self.JsonToText = channel.unary_stream(
                '/multiformats_APIs_proto.MultiFormatsController/JsonToText',
                request_serializer=multiformats_dot_multiformats__pb2.Request.SerializeToString,
                response_deserializer=multiformats_dot_multiformats__pb2.Response.FromString,
                )
        self.JsonToMesgpack = channel.unary_stream(
                '/multiformats_APIs_proto.MultiFormatsController/JsonToMesgpack',
                request_serializer=multiformats_dot_multiformats__pb2.Request.SerializeToString,
                response_deserializer=multiformats_dot_multiformats__pb2.Response.FromString,
                )


class MultiFormatsControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JsonToCsv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonToXml(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonToBson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonToText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonToMesgpack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultiFormatsControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JsonToCsv': grpc.unary_stream_rpc_method_handler(
                    servicer.JsonToCsv,
                    request_deserializer=multiformats_dot_multiformats__pb2.Request.FromString,
                    response_serializer=multiformats_dot_multiformats__pb2.Response.SerializeToString,
            ),
            'JsonToXml': grpc.unary_stream_rpc_method_handler(
                    servicer.JsonToXml,
                    request_deserializer=multiformats_dot_multiformats__pb2.Request.FromString,
                    response_serializer=multiformats_dot_multiformats__pb2.Response.SerializeToString,
            ),
            'JsonToBson': grpc.unary_stream_rpc_method_handler(
                    servicer.JsonToBson,
                    request_deserializer=multiformats_dot_multiformats__pb2.Request.FromString,
                    response_serializer=multiformats_dot_multiformats__pb2.Response.SerializeToString,
            ),
            'JsonToText': grpc.unary_stream_rpc_method_handler(
                    servicer.JsonToText,
                    request_deserializer=multiformats_dot_multiformats__pb2.Request.FromString,
                    response_serializer=multiformats_dot_multiformats__pb2.Response.SerializeToString,
            ),
            'JsonToMesgpack': grpc.unary_stream_rpc_method_handler(
                    servicer.JsonToMesgpack,
                    request_deserializer=multiformats_dot_multiformats__pb2.Request.FromString,
                    response_serializer=multiformats_dot_multiformats__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multiformats_APIs_proto.MultiFormatsController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultiFormatsController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JsonToCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multiformats_APIs_proto.MultiFormatsController/JsonToCsv',
            multiformats_dot_multiformats__pb2.Request.SerializeToString,
            multiformats_dot_multiformats__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonToXml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multiformats_APIs_proto.MultiFormatsController/JsonToXml',
            multiformats_dot_multiformats__pb2.Request.SerializeToString,
            multiformats_dot_multiformats__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonToBson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multiformats_APIs_proto.MultiFormatsController/JsonToBson',
            multiformats_dot_multiformats__pb2.Request.SerializeToString,
            multiformats_dot_multiformats__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multiformats_APIs_proto.MultiFormatsController/JsonToText',
            multiformats_dot_multiformats__pb2.Request.SerializeToString,
            multiformats_dot_multiformats__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonToMesgpack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multiformats_APIs_proto.MultiFormatsController/JsonToMesgpack',
            multiformats_dot_multiformats__pb2.Request.SerializeToString,
            multiformats_dot_multiformats__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
