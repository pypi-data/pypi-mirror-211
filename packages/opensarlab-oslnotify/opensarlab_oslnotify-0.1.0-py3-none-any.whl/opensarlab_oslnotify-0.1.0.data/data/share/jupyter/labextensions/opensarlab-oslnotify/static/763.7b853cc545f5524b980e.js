"use strict";(self.webpackChunkopensarlab_oslnotify=self.webpackChunkopensarlab_oslnotify||[]).push([[763],{763:(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var n=o(474),a=o(20),s=o(51),r=o.n(s);const i={id:"opensarlab-oslnotify:plugin",description:"A JupyterLab extension.",autoStart:!0,activate:e=>{var t;console.log("JupyterLab extension opensarlab-oslnotify is activated!"),t="storage,calendar",document.head.insertAdjacentHTML("beforeend","<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css'/>"),document.head.insertAdjacentHTML("beforeend","<style>#toast-container>div{opacity:1;}</style>"),async function(e="",t={}){const o=a.ServerConnection.makeSettings(),s=n.URLExt.join(o.baseUrl,"opensarlab-oslnotify","?type="+e);let r;try{r=await a.ServerConnection.makeRequest(s,t,o)}catch(e){throw new a.ServerConnection.NetworkError(e)}let i=await r.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",r)}if(!r.ok)throw new a.ServerConnection.ResponseError(r,i.message||i);return i}(t).then((e=>{!function(e){r().options=e.options,e.data.forEach((e=>{r()[e.type](e.message,e.title)}))}(e)})).catch((e=>{console.error(`Error oslnotify: ${e}`)}))}}}}]);