from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING, Any, TypeVar

from vector_pipelines.components.embeddings.service import EmbeddingsService
from vector_pipelines.components.init import Initiable
from vector_pipelines.components.service import Serviceable
from vector_pipelines.grpc import embeddings_pb2_grpc

if TYPE_CHECKING:
    from grpc import Server

T = TypeVar("T")


class Embeddings(Initiable, Serviceable):
    """Base class for class that can generate embeddings for data."""

    @abstractmethod
    def encode(self, data: Any | list[Any]) -> list[list[int | float]]:
        """Encode the given data into embeddings.

        Args:
            data: The data to encode.

        Returns:
            The embeddings for the given data.
        """
        pass

    @property
    @abstractmethod
    def vector_size(self) -> int:
        """Get the size of the vectors that will be generated by the embeddings
        model.

        Returns:
            The size of the vectors.
        """
        pass

    def add_services(self, server: Server) -> None:
        embeddings_pb2_grpc.add_EmbeddingServiceServicer_to_server(
            EmbeddingsService(self), server
        )  # type: ignore

    def serve(self, port: int = 50051, max_workers: int = 10) -> None:
        if not self.initialized:
            self.init()
        return super().serve(port, max_workers)
