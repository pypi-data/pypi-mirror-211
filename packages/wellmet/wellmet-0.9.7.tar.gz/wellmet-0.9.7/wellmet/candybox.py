#!/usr/bin/env python
# coding: utf-8

"""
 we need to go deeper...
‚ò∫ –±–æ–ª—å—à–µ —è—â–∏–∫–æ–≤ –±–æ–≥—É —è—â–∏–∫–æ–≤!

ƒç chce se je≈°tƒõ nƒõkam ukladat meta infa od blackbox≈Ø 
ƒç K tomu vyu≈æijme pitonovskej dak tajping a zkus√≠me strƒçit tohle mezi
ƒç f-modelem a norm√°ln√≠m SampleBoxem. Snad to postaƒç√≠.
ƒç Kdy≈æ ne - bude t≈ôeba ≈°ecko p≈ôekopat.
ƒç (v≈°ak do souboru CandyBox zat√≠m nep≈Øjde - k tomu je pot≈ôeba podpora Readeru.)
"""

#ƒç Nechce se mi tahnout do projektu Pandas jako rekuajred dependensi,
#ƒç ale ani j√° sam po≈ôadnƒõ nerozum√≠m proƒç 
#ƒç asi proto, ≈æe se sp√≠≈°e jedn√° o pomocnou boƒçn√≠ "sekondari" funkcionalitu
try:
    import pandas as pd
    #ƒç prüê±ozat√≠m je mi ≈°uma ohlednƒõ toho, zda p√≠≈°u do kopii, nebo do slajsu
    #ƒç prozat√≠m zap√≠s do slajsu nejsp√≠≈° znamen√°, ≈æe p≈Øvodn√≠ data j√≠≈æ nejsou nutn√°
    #ƒç prozat√≠m se mi nechce robi≈• explicitn√© kopii, 
    #ƒç a zat√≠m ponechav√°m sber odpad≈Ø samotn√©mu Pandas
    
    #E disable SettingWithCopyWarning 
    #E Current WellMet policy: if writing to slice have occured, it probably means
    #E original df no more needed
    pd.set_option('mode.chained_assignment', None)
except ImportError:
    print("CandyBox: error of import Pandas. CandyBox will work in Pandas-free mode")

import numpy as np

class CandyBox:

    def __new__(cls, sample_object, df=None, **kwargs):
        """
        Jedname tvrdƒõ - nen√≠-li vstup konzistentn√≠, 
        tak tenhle box v≈Øbec nevytva≈ô√≠me
        """
        cb = super().__new__(cls)
        cb.sampling_plan = sample_object
        
        if df is not None:
            cb.df = df
        else:
            # obalime ƒç√≠sly
            for key in kwargs:
                if not hasattr(kwargs[key], '__getitem__'):
                    kwargs[key] = (kwargs[key],)
                
                
            try:
                cb.df = pd.DataFrame(kwargs)
                # chcem jednoduch√© numpy-like chovan√≠
                cb.df.reset_index(inplace=True)
            except NameError: # if there is no "pandas as pd"
                cb.kwargs = kwargs
        if cb.consistency_check():
            return cb
        else:
            raise ValueError("Sample and given values hasn't the same length. Zkr√°tka, do sebe nepat≈ô√≠")
            
        
    
        
#    def __str__(cb):
#       # if pandas
#       if 'df' in cb.__dict__:
#           return 'CandyBox: %s' % cb.df
#       # if not
#       else:
#           return 'CandyBox: %s' % cb.kwargs
        
    def __repr__(cb):
        # if pandas
        if 'df' in cb.__dict__:
            # df je na svƒõdomi pandas
            return 'CandyBox(%s, df=%s)' % (repr(cb.sampling_plan), repr(cb.df))
        # if not
        else:
            return 'CandyBox(%s, **%s)' % (repr(cb.sampling_plan), repr(cb.kwargs))
        
    def __len__(cb):
        return len(cb.sampling_plan)
        
        
    def __call__(cb, *args, **kwargs):
        # Houston, we've got a problem...
        # call meaning is different for underlaying f_models and upper Boxes
        # but SampleBox expect f_model under
        
        # hovnok√≥d, p≈ôekopat
        f = cb.sampling_plan(*args, **kwargs)
        if len(f) == 0:
            return CandyBox(f)
        else:
            return f
        
        
    
        
    def __getitem__(cb, slice):
        # if pandas
        if 'df' in cb.__dict__:
            df = cb.df.iloc[slice]
            #‚ò∫ –Ω–µ–ª—å–∑—è —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å –∏ –Ω–∞–∫—Ä–∞–∏—Ç—å DataFrame
            # pandas zlob√≠ (o kousek v√≠c jak numpy)
            if not isinstance(df, pd.DataFrame):
                # pravdƒõpodobnƒõ kdy≈æ se n√°m vr√°t√≠ serie, tak bude interpretov√°na jako sloup
                # fakt mi nic spolehlivƒõj≈°√≠ho nenapad√°
                df = pd.DataFrame(df).T
                
            # chcem jednoduch√© numpy-like chovan√≠
            # dƒõl√° probl√©my
            df.reset_index(drop=True, inplace=True)
            return CandyBox(cb.sampling_plan[slice], df=df)
        # if not
        else:
            sliced_dict = dict()
            for key in cb.kwargs:
                ##ƒç nech√°m na u≈æivateli, co vlo≈æ√≠ do slovn√≠ku a jak to bude slajsi≈•
                #ƒç sice furt podporuju variantu s tƒõmi slovn√≠ky
                #ƒç ale potrebuju aby chov√°n√≠ bylo trochu v√≠c p≈ôedvidateln√©
                sliced_dict[key] = np.atleast_1d(cb.kwargs[key][slice])
            return CandyBox(cb.sampling_plan[slice], **sliced_dict)
        
    def __setattr__(cb, key, value):
        # to je v≈°e co m√° samotn√Ω CandyBox
        # ≈æ√°dn√Ω dal≈°√≠ majetek u nƒõho nepozoruji
        if key in ('sampling_plan', 'df', 'kwargs'):
            cb.__dict__[key] = value
        elif len(cb) == len(value):
            # if pandas
            if 'df' in cb.__dict__:
                # df je na svƒõdomi pandas
                cb.df.loc[:, key] = value
            # if not
            else:
                cb.kwargs[key] = value
        else:
            raise ValueError("Sample and given values hasn't the same length. Zkr√°tka, do sebe nepat≈ô√≠")
        
        
    def __getattr__(cb, attr):
        # branime sa rekurzii
        # defend against recursion
        if attr == 'sampling_plan':
            raise AttributeError
            
        elif attr == 'candybox':
            return cb
            
        # hled√°me obracenƒõ
        # nejd≈ô√≠v se zeptame f_model,
        # teprve kdy≈æ ten niƒç nem√°  
        # mrkneme atribut u sebe
        try:
            return getattr(cb.sampling_plan, attr)
        except AttributeError:
            return cb._lookup(attr)
            
    def _lookup(cb, attr):
        # if pandas
        if 'df' in cb.__dict__:
            if attr in cb.df:
                # zkus√≠m p≈ôev√©st na numpy, proto≈æe 
                # Pandasovy indexy jen zlob√≠
                # a stejnƒõ nikdo je nepou≈æiv√° a na nƒõ nespoleh√°
                # dal≈°√≠ k√≥d by nemƒõl furt ≈ôe≈°it, co ta bombonjera m√° uvnit≈ô
                # i kdy≈æ je to ≈°koda, ≈æe nepujde mƒõnit jednotliv√© hodnoty
                try:
                    return cb.df[attr].to_numpy()
                except AttributeError:
                    return np.array(cb.df[attr])
                
                # zkus√≠m nep≈ôevadƒõt na numpy, proto≈æe chcu m√§≈• mo≈ænost hodnoty mƒõnit
                # pri slajsech resetuju indexy, tak≈æe mus√≠ to b√Ωt v pohodƒõ
                # douf√°m, ≈æe t√≠m –Ω–∏—â–µ–≥–æ –Ω–µ –ø–æ–ª–æ–º–∞ju
                # ≈°ecko se t√≠m zkazilo a je taky ot√°zkou 
                # zda je to vhodnƒõ kdy≈æ se furt robej slajsy
                # nech√°m to na u≈æivatelsk√©m k√≥du
                #return cb.df[attr]
            else: # implicitnƒõ pandas hod√≠ KeyError, kterej nechcem
                raise AttributeError
        
        # if not
        elif attr in cb.kwargs:
            value = cb.kwargs[attr]
            if len(cb)==len(value):
                return cb.kwargs[attr]
            else:
                # —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞—Ç–∞, –Ω–æ –º—ã –∏—Ö –≤–∞–º –Ω–µ–¥–∞–¥–∏–º)
                # zde nech≈• bude KeyError
                raise KeyError("CandyBox: well, we have some data, but they are not consistent, so we haven't")
                
        else: # implicitnƒõ slovn√≠ky (stejnƒõ jako pandas) hazej KeyError, kterej nechcem
            raise AttributeError
            
        
        
    def add_sample(cb, input):
        """
        hlavn√≠ po≈æadavek - jsou-li samply uspƒõ≈°nƒõ sjednoceny,
        tak ty blb√© zbytky nesmej√≠ mi hodit chybu!
        –∫–æ—Ç–ª–µ—Ç—ã - –æ—Ç–¥–µ–ª—å–Ω–æ, –º—É—Ö–∏ - –æ—Ç–¥–µ–ª—å–Ω–æ
        """
        
        # ƒço to je za vstup?
        sweety_input = hasattr(input, 'sampling_plan')
            
        #
        # –∫–æ—Ç–ª–µ—Ç—ã
        #
        # nechcu zde try-catch blok
        if sweety_input:
            cb.sampling_plan.add_sample(input.sampling_plan)
        else:
            cb.sampling_plan.add_sample(input)
        
        
        # –º—É—Ö–∏
        if sweety_input:
            # if pandas
            if 'df' in cb.__dict__:
                #if 'df' in input.__dict__: # jen pro formu kontrola
                # pandas mus√≠ m√≠t i tamtenhle objekt, ≈æejo?
                cb.df = cb.df.append(input.df, ignore_index=True)
            # if not
            else:
                # zjednodu≈°en√Ω join
                sample_len = len(cb.sampling_plan)
                for key in cb.kwargs:
                    # ani nebudu kontrolovat
                    #if isinstance(key, np.ndarray):
                        
                    if key in input.kwargs:
                        cb.kwargs[key] = np.append(cb.kwargs[key], input.kwargs[key])
                    else:
                        fill_len = sample_len - len(cb.kwargs[key])
                        full = (None for __ in range(fill_len))
                        cb.kwargs[key] = np.append(cb.kwargs[key], (*full,))
                
                
        else: # nesladk√Ω vstup
            sample_len = len(cb.sampling_plan)
            # if pandas
            if 'df' in cb.__dict__:
                fill_len = sample_len - len(cb.df)
                full_df = pd.DataFrame(index=range(fill_len))
                cb.df = cb.df.append(full_df, ignore_index=True)
            # if not
            else:
                for key in cb.kwargs:
                    fill_len = sample_len - len(cb.kwargs[key])
                    full = (None for __ in range(fill_len))
                    cb.kwargs[key] = np.append(cb.kwargs[key], (*full,))

                
    #E we'll see, if .new_sample will be needed
    #E year, we need it
    #‚ô• –º—ã–Ω—ã–º –≤—ã–ª—å —Å—ç–º–ø–ª –∫—É–ª—ç!
    def new_sample(cb, input=None, space='R'):
        # u≈æ je to stav√° matouc√≠m
        # pokud input je, dƒõl√°me tohle
        # vr√°c√≠me samy sobƒõ
        if input is None:
            return CandyBox(cb.sampling_plan())
            
        # pokud input nen√≠, dƒõl√°me vonohle
        # konvertujem vstup na na≈°e rozdƒõlen√≠
        else:
            # ƒço to je za vstup?
            if hasattr(input, 'sampling_plan'): #sweety_input:
                # if pandas
                if hasattr(input, 'df'):
                    return CandyBox(cb.sampling_plan.new_sample(input.sampling_plan, space=space), df=input.df)
                    
                # if there is no pandas DataFrame
                # we suppose there is dictionary in input.kwargs
                else:
                    return CandyBox(cb.sampling_plan.new_sample(input.sampling_plan, space=space), **input.kwargs)
                
            # nesladk√Ω vstup
            else:
                return cb.sampling_plan.new_sample(input, space)
        
        
        
            
            
        
    def consistency_check(cb):
        # ≈ôvat na cel√© mƒõsto nebudeme
        # if pandas
        if 'df' in cb.__dict__:
            return len(cb.sampling_plan)==len(cb.df)
        # if not
        else:
            sample_len = len(cb.sampling_plan)
            return all(sample_len == len(cb.kwargs[key]) for key in cb.kwargs)
