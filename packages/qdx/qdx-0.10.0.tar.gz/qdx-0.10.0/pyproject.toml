[project]
dependencies = ["dataclasses-json", "gql[requests]", "typed-argument-parser", "datargs", "rdkit-pypi"]
description = "A Talo Python package"
keywords = []
name = "qdx"
readme = "README.md"
requires-python = ">=3.10"

[project.scripts]
qdx = "qdx.__main__:main"

[project.urls]

[[project.authors]]
email = "someone@talo.systems"
name = "Someone"

[tool]
[tool.black]
line-length = 110

[tool.isort]
line_length = 110
profile = "black"

[tool.pydocstyle]
ignore = ["D202", "D105"]
match = "(?!test_).*.py"

[tool.pyright]
exclude = ["**/node_modules", "**/__pycache__", "**/*venv*", "result", "setup.py"]
ignore = ["**/node_modules", "**/__pycache__", "**/*venv*", "result", "setup.py"]
reportIncompatibleMethodOverride = "none"
reportIncompatibleVariableOverride = "none"
reportMissingImports = true
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

[[tool.pyright.executionEnvironments]]
root = ""

[[tool.pyright.executionEnvironments]]
extraPaths = [""]
root = "tests"

[tool.pytest]
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.setuptools]
[tool.setuptools.packages]
[tool.setuptools.packages.find]
exclude = ["test", "tests"]
where = [""]

[tool.poetry]
name = "qdx"
version = "0.10.0"
description = "Python SDK for interacting with the QDX API"
authors = ["Ryan Swart <ryan@talosystems.com>"]
readme = "README.md"
packages = [{include = "qdx"}]

[tool.poetry.scripts]
qdx = "qdx.__main__:main"

[tool.poetry.dependencies]
python = "^3.10"
dataclasses-json = "^0.5.7"
gql = {extras = ["requests"], version = "^3.4.0"}
typed-argument-parser = "^1.7.2"
datargs = "^0.11.0"
rdkit-pypi = "^2022.9.5"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
